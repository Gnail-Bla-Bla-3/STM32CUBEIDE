
MotorTesterKit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c53c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800c6cc  0800c6cc  0000d6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c81c  0800c81c  0000e07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c81c  0800c81c  0000d81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c824  0800c824  0000e07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c824  0800c824  0000d824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c828  0800c828  0000d828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800c82c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e07c  2**0
                  CONTENTS
 10 .bss          00005688  2000007c  2000007c  0000e07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005704  20005704  0000e07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000257c0  00000000  00000000  0000e0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000548d  00000000  00000000  0003386c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ef0  00000000  00000000  00038d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000182f  00000000  00000000  0003abf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026279  00000000  00000000  0003c41f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025bd4  00000000  00000000  00062698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1525  00000000  00000000  0008826c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00169791  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000867c  00000000  00000000  001697d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00171e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6b4 	.word	0x0800c6b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800c6b4 	.word	0x0800c6b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000574:	4b04      	ldr	r3, [pc, #16]	@ (8000588 <BMI088_ACCEL_NS_L+0x18>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a04      	ldr	r2, [pc, #16]	@ (800058c <BMI088_ACCEL_NS_L+0x1c>)
 800057a:	8811      	ldrh	r1, [r2, #0]
 800057c:	2200      	movs	r2, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fc14 	bl	8004dac <HAL_GPIO_WritePin>
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20000000 	.word	0x20000000
 800058c:	20000004 	.word	0x20000004

08000590 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000594:	4b04      	ldr	r3, [pc, #16]	@ (80005a8 <BMI088_ACCEL_NS_H+0x18>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a04      	ldr	r2, [pc, #16]	@ (80005ac <BMI088_ACCEL_NS_H+0x1c>)
 800059a:	8811      	ldrh	r1, [r2, #0]
 800059c:	2201      	movs	r2, #1
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 fc04 	bl	8004dac <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000004 	.word	0x20000004

080005b0 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <BMI088_GYRO_NS_L+0x18>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a04      	ldr	r2, [pc, #16]	@ (80005cc <BMI088_GYRO_NS_L+0x1c>)
 80005ba:	8811      	ldrh	r1, [r2, #0]
 80005bc:	2200      	movs	r2, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fbf4 	bl	8004dac <HAL_GPIO_WritePin>
}
 80005c4:	bf00      	nop
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	20000008 	.word	0x20000008
 80005cc:	2000000c 	.word	0x2000000c

080005d0 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 80005d4:	4b04      	ldr	r3, [pc, #16]	@ (80005e8 <BMI088_GYRO_NS_H+0x18>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a04      	ldr	r2, [pc, #16]	@ (80005ec <BMI088_GYRO_NS_H+0x1c>)
 80005da:	8811      	ldrh	r1, [r2, #0]
 80005dc:	2201      	movs	r2, #1
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 fbe4 	bl	8004dac <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000008 	.word	0x20000008
 80005ec:	2000000c 	.word	0x2000000c

080005f0 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	4603      	mov	r3, r0
 80005f8:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 80005fa:	f107 020f 	add.w	r2, r7, #15
 80005fe:	1df9      	adds	r1, r7, #7
 8000600:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <BMI088_read_write_byte+0x28>)
 800060a:	f005 ff55 	bl	80064b8 <HAL_SPI_TransmitReceive>
    return rx_data;
 800060e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000610:	4618      	mov	r0, r3
 8000612:	3710      	adds	r7, #16
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	2000059c 	.word	0x2000059c

0800061c <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000620:	4a05      	ldr	r2, [pc, #20]	@ (8000638 <IMU_get_temp+0x1c>)
 8000622:	4906      	ldr	r1, [pc, #24]	@ (800063c <IMU_get_temp+0x20>)
 8000624:	4806      	ldr	r0, [pc, #24]	@ (8000640 <IMU_get_temp+0x24>)
 8000626:	f000 f80d 	bl	8000644 <BMI088_read>
	return temp;
 800062a:	4b03      	ldr	r3, [pc, #12]	@ (8000638 <IMU_get_temp+0x1c>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	ee07 3a90 	vmov	s15, r3
}
 8000632:	eeb0 0a67 	vmov.f32	s0, s15
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000b0 	.word	0x200000b0
 800063c:	200000a4 	.word	0x200000a4
 8000640:	20000098 	.word	0x20000098

08000644 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b088      	sub	sp, #32
 8000648:	af00      	add	r7, sp, #0
 800064a:	60f8      	str	r0, [r7, #12]
 800064c:	60b9      	str	r1, [r7, #8]
 800064e:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8000650:	4a70      	ldr	r2, [pc, #448]	@ (8000814 <BMI088_read+0x1d0>)
 8000652:	f107 0314 	add.w	r3, r7, #20
 8000656:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065a:	6018      	str	r0, [r3, #0]
 800065c:	3304      	adds	r3, #4
 800065e:	8019      	strh	r1, [r3, #0]
 8000660:	3302      	adds	r3, #2
 8000662:	0c0a      	lsrs	r2, r1, #16
 8000664:	701a      	strb	r2, [r3, #0]
 8000666:	2300      	movs	r3, #0
 8000668:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 800066a:	f7ff ff81 	bl	8000570 <BMI088_ACCEL_NS_L>
 800066e:	2092      	movs	r0, #146	@ 0x92
 8000670:	f7ff ffbe 	bl	80005f0 <BMI088_read_write_byte>
 8000674:	f107 0314 	add.w	r3, r7, #20
 8000678:	2206      	movs	r2, #6
 800067a:	4619      	mov	r1, r3
 800067c:	2012      	movs	r0, #18
 800067e:	f000 f8cf 	bl	8000820 <BMI088_read_muli_reg>
 8000682:	f7ff ff85 	bl	8000590 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000686:	7d7b      	ldrb	r3, [r7, #21]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b21a      	sxth	r2, r3
 800068c:	7d3b      	ldrb	r3, [r7, #20]
 800068e:	b21b      	sxth	r3, r3
 8000690:	4313      	orrs	r3, r2
 8000692:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000694:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000698:	ee07 3a90 	vmov	s15, r3
 800069c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006a0:	4b5d      	ldr	r3, [pc, #372]	@ (8000818 <BMI088_read+0x1d4>)
 80006a2:	edd3 7a00 	vldr	s15, [r3]
 80006a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b21a      	sxth	r2, r3
 80006b6:	7dbb      	ldrb	r3, [r7, #22]
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	4313      	orrs	r3, r2
 80006bc:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80006be:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c2:	ee07 3a90 	vmov	s15, r3
 80006c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ca:	4b53      	ldr	r3, [pc, #332]	@ (8000818 <BMI088_read+0x1d4>)
 80006cc:	edd3 7a00 	vldr	s15, [r3]
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	3304      	adds	r3, #4
 80006d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d8:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80006dc:	7e7b      	ldrb	r3, [r7, #25]
 80006de:	021b      	lsls	r3, r3, #8
 80006e0:	b21a      	sxth	r2, r3
 80006e2:	7e3b      	ldrb	r3, [r7, #24]
 80006e4:	b21b      	sxth	r3, r3
 80006e6:	4313      	orrs	r3, r2
 80006e8:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80006ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006ee:	ee07 3a90 	vmov	s15, r3
 80006f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006f6:	4b48      	ldr	r3, [pc, #288]	@ (8000818 <BMI088_read+0x1d4>)
 80006f8:	edd3 7a00 	vldr	s15, [r3]
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	3308      	adds	r3, #8
 8000700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000704:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000708:	f7ff ff52 	bl	80005b0 <BMI088_GYRO_NS_L>
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	2208      	movs	r2, #8
 8000712:	4619      	mov	r1, r3
 8000714:	2000      	movs	r0, #0
 8000716:	f000 f883 	bl	8000820 <BMI088_read_muli_reg>
 800071a:	f7ff ff59 	bl	80005d0 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 800071e:	7d3b      	ldrb	r3, [r7, #20]
 8000720:	2b0f      	cmp	r3, #15
 8000722:	d140      	bne.n	80007a6 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000724:	7dfb      	ldrb	r3, [r7, #23]
 8000726:	021b      	lsls	r3, r3, #8
 8000728:	b21a      	sxth	r2, r3
 800072a:	7dbb      	ldrb	r3, [r7, #22]
 800072c:	b21b      	sxth	r3, r3
 800072e:	4313      	orrs	r3, r2
 8000730:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000732:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000736:	ee07 3a90 	vmov	s15, r3
 800073a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800073e:	4b37      	ldr	r3, [pc, #220]	@ (800081c <BMI088_read+0x1d8>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800074e:	7e7b      	ldrb	r3, [r7, #25]
 8000750:	021b      	lsls	r3, r3, #8
 8000752:	b21a      	sxth	r2, r3
 8000754:	7e3b      	ldrb	r3, [r7, #24]
 8000756:	b21b      	sxth	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 800075c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000760:	ee07 3a90 	vmov	s15, r3
 8000764:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000768:	4b2c      	ldr	r3, [pc, #176]	@ (800081c <BMI088_read+0x1d8>)
 800076a:	edd3 7a00 	vldr	s15, [r3]
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3304      	adds	r3, #4
 8000772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000776:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 800077a:	7efb      	ldrb	r3, [r7, #27]
 800077c:	021b      	lsls	r3, r3, #8
 800077e:	b21a      	sxth	r2, r3
 8000780:	7ebb      	ldrb	r3, [r7, #26]
 8000782:	b21b      	sxth	r3, r3
 8000784:	4313      	orrs	r3, r2
 8000786:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000788:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800078c:	ee07 3a90 	vmov	s15, r3
 8000790:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000794:	4b21      	ldr	r3, [pc, #132]	@ (800081c <BMI088_read+0x1d8>)
 8000796:	edd3 7a00 	vldr	s15, [r3]
 800079a:	68fb      	ldr	r3, [r7, #12]
 800079c:	3308      	adds	r3, #8
 800079e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007a2:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 80007a6:	f7ff fee3 	bl	8000570 <BMI088_ACCEL_NS_L>
 80007aa:	20a2      	movs	r0, #162	@ 0xa2
 80007ac:	f7ff ff20 	bl	80005f0 <BMI088_read_write_byte>
 80007b0:	f107 0314 	add.w	r3, r7, #20
 80007b4:	2202      	movs	r2, #2
 80007b6:	4619      	mov	r1, r3
 80007b8:	2022      	movs	r0, #34	@ 0x22
 80007ba:	f000 f831 	bl	8000820 <BMI088_read_muli_reg>
 80007be:	f7ff fee7 	bl	8000590 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 80007c2:	7d3b      	ldrb	r3, [r7, #20]
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	7d7b      	ldrb	r3, [r7, #21]
 80007ca:	095b      	lsrs	r3, r3, #5
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	b21b      	sxth	r3, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 80007d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80007dc:	db04      	blt.n	80007e8 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 80007de:	8bfb      	ldrh	r3, [r7, #30]
 80007e0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 80007e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007ec:	ee07 3a90 	vmov	s15, r3
 80007f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f4:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80007f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007fc:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8000800:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	edc3 7a00 	vstr	s15, [r3]
}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	0800c6cc 	.word	0x0800c6cc
 8000818:	20000010 	.word	0x20000010
 800081c:	20000014 	.word	0x20000014

08000820 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	6039      	str	r1, [r7, #0]
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8000830:	79fb      	ldrb	r3, [r7, #7]
 8000832:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000836:	b2db      	uxtb	r3, r3
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fed9 	bl	80005f0 <BMI088_read_write_byte>

    while (len != 0)
 800083e:	e00c      	b.n	800085a <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8000840:	2055      	movs	r0, #85	@ 0x55
 8000842:	f7ff fed5 	bl	80005f0 <BMI088_read_write_byte>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	701a      	strb	r2, [r3, #0]
        buf++;
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	3301      	adds	r3, #1
 8000852:	603b      	str	r3, [r7, #0]
        len--;
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	3b01      	subs	r3, #1
 8000858:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800085a:	79bb      	ldrb	r3, [r7, #6]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d1ef      	bne.n	8000840 <BMI088_read_muli_reg+0x20>
    }
}
 8000860:	bf00      	nop
 8000862:	bf00      	nop
 8000864:	3708      	adds	r7, #8
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
	...

0800086c <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b08c      	sub	sp, #48	@ 0x30
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	f107 0210 	add.w	r2, r7, #16
 800087c:	2100      	movs	r1, #0
 800087e:	6878      	ldr	r0, [r7, #4]
 8000880:	f003 f86c 	bl	800395c <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800088a:	d813      	bhi.n	80008b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 800088c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000890:	f240 809c 	bls.w	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8000894:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000898:	2b03      	cmp	r3, #3
 800089a:	f200 8097 	bhi.w	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 800089e:	a201      	add	r2, pc, #4	@ (adr r2, 80008a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	080009a9 	.word	0x080009a9
 80008a8:	080009bb 	.word	0x080009bb
 80008ac:	080009cd 	.word	0x080009cd
 80008b0:	080009cd 	.word	0x080009cd
 80008b4:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80008b8:	2b0a      	cmp	r3, #10
 80008ba:	f200 8087 	bhi.w	80009cc <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	3b01      	subs	r3, #1
 80008c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a44      	ldr	r2, [pc, #272]	@ (80009dc <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d131      	bne.n	8000934 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 80008d0:	7a3b      	ldrb	r3, [r7, #8]
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	b21a      	sxth	r2, r3
 80008d6:	7a7b      	ldrb	r3, [r7, #9]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	4313      	orrs	r3, r2
 80008dc:	b21a      	sxth	r2, r3
 80008de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008e2:	b291      	uxth	r1, r2
 80008e4:	4a3e      	ldr	r2, [pc, #248]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80008e6:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80008ea:	7abb      	ldrb	r3, [r7, #10]
 80008ec:	021b      	lsls	r3, r3, #8
 80008ee:	b219      	sxth	r1, r3
 80008f0:	7afb      	ldrb	r3, [r7, #11]
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80008f8:	430a      	orrs	r2, r1
 80008fa:	b211      	sxth	r1, r2
 80008fc:	4a38      	ldr	r2, [pc, #224]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80008fe:	00db      	lsls	r3, r3, #3
 8000900:	4413      	add	r3, r2
 8000902:	460a      	mov	r2, r1
 8000904:	805a      	strh	r2, [r3, #2]
 8000906:	7b3b      	ldrb	r3, [r7, #12]
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b219      	sxth	r1, r3
 800090c:	7b7b      	ldrb	r3, [r7, #13]
 800090e:	b21a      	sxth	r2, r3
 8000910:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000914:	430a      	orrs	r2, r1
 8000916:	b211      	sxth	r1, r2
 8000918:	4a31      	ldr	r2, [pc, #196]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800091a:	00db      	lsls	r3, r3, #3
 800091c:	4413      	add	r3, r2
 800091e:	460a      	mov	r2, r1
 8000920:	809a      	strh	r2, [r3, #4]
 8000922:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000926:	7bb9      	ldrb	r1, [r7, #14]
 8000928:	4a2d      	ldr	r2, [pc, #180]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800092a:	00db      	lsls	r3, r3, #3
 800092c:	4413      	add	r3, r2
 800092e:	460a      	mov	r2, r1
 8000930:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8000932:	e04d      	b.n	80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
            } else if (hcan == &hcan2) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a2b      	ldr	r2, [pc, #172]	@ (80009e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d149      	bne.n	80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 800093c:	7a3b      	ldrb	r3, [r7, #8]
 800093e:	021b      	lsls	r3, r3, #8
 8000940:	b21a      	sxth	r2, r3
 8000942:	7a7b      	ldrb	r3, [r7, #9]
 8000944:	b21b      	sxth	r3, r3
 8000946:	4313      	orrs	r3, r2
 8000948:	b21a      	sxth	r2, r3
 800094a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800094e:	b291      	uxth	r1, r2
 8000950:	4a23      	ldr	r2, [pc, #140]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8000952:	330b      	adds	r3, #11
 8000954:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8000958:	7abb      	ldrb	r3, [r7, #10]
 800095a:	021b      	lsls	r3, r3, #8
 800095c:	b219      	sxth	r1, r3
 800095e:	7afb      	ldrb	r3, [r7, #11]
 8000960:	b21a      	sxth	r2, r3
 8000962:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000966:	430a      	orrs	r2, r1
 8000968:	b211      	sxth	r1, r2
 800096a:	4a1d      	ldr	r2, [pc, #116]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800096c:	330b      	adds	r3, #11
 800096e:	00db      	lsls	r3, r3, #3
 8000970:	4413      	add	r3, r2
 8000972:	460a      	mov	r2, r1
 8000974:	805a      	strh	r2, [r3, #2]
 8000976:	7b3b      	ldrb	r3, [r7, #12]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	b219      	sxth	r1, r3
 800097c:	7b7b      	ldrb	r3, [r7, #13]
 800097e:	b21a      	sxth	r2, r3
 8000980:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000984:	430a      	orrs	r2, r1
 8000986:	b211      	sxth	r1, r2
 8000988:	4a15      	ldr	r2, [pc, #84]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800098a:	330b      	adds	r3, #11
 800098c:	00db      	lsls	r3, r3, #3
 800098e:	4413      	add	r3, r2
 8000990:	460a      	mov	r2, r1
 8000992:	809a      	strh	r2, [r3, #4]
 8000994:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000998:	7bb9      	ldrb	r1, [r7, #14]
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800099c:	330b      	adds	r3, #11
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	4413      	add	r3, r2
 80009a2:	460a      	mov	r2, r1
 80009a4:	719a      	strb	r2, [r3, #6]
            break;
 80009a6:	e013      	b.n	80009d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80009aa:	461a      	mov	r2, r3
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009b4:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 80009b8:	e00b      	b.n	80009d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 80009ba:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80009bc:	3308      	adds	r3, #8
 80009be:	f107 0208 	add.w	r2, r7, #8
 80009c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009c6:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80009ca:	e002      	b.n	80009d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            break;
 80009d0:	bf00      	nop
        }
    }
}
 80009d2:	bf00      	nop
 80009d4:	3730      	adds	r7, #48	@ 0x30
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200004f8 	.word	0x200004f8
 80009e0:	200000b4 	.word	0x200000b4
 80009e4:	20000520 	.word	0x20000520
 80009e8:	20000364 	.word	0x20000364

080009ec <getRotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
}
// beans
uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	460b      	mov	r3, r1
 80009f8:	71bb      	strb	r3, [r7, #6]
 80009fa:	4613      	mov	r3, r2
 80009fc:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 80009fe:	79bb      	ldrb	r3, [r7, #6]
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	dc02      	bgt.n	8000a0a <getRotorPosition+0x1e>
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	dc04      	bgt.n	8000a12 <getRotorPosition+0x26>
 8000a08:	e034      	b.n	8000a74 <getRotorPosition+0x88>
 8000a0a:	3b03      	subs	r3, #3
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d831      	bhi.n	8000a74 <getRotorPosition+0x88>
 8000a10:	e016      	b.n	8000a40 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8000a12:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	dd29      	ble.n	8000a6e <getRotorPosition+0x82>
 8000a1a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a1e:	2b08      	cmp	r3, #8
 8000a20:	dc25      	bgt.n	8000a6e <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8000a22:	79fb      	ldrb	r3, [r7, #7]
 8000a24:	1e5a      	subs	r2, r3, #1
 8000a26:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a2a:	1e59      	subs	r1, r3, #1
 8000a2c:	4815      	ldr	r0, [pc, #84]	@ (8000a84 <getRotorPosition+0x98>)
 8000a2e:	4613      	mov	r3, r2
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	4413      	add	r3, r2
 8000a34:	005b      	lsls	r3, r3, #1
 8000a36:	4413      	add	r3, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8000a3e:	e01b      	b.n	8000a78 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8000a40:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	dd14      	ble.n	8000a72 <getRotorPosition+0x86>
 8000a48:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a4c:	2b07      	cmp	r3, #7
 8000a4e:	dc10      	bgt.n	8000a72 <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a58:	1cd9      	adds	r1, r3, #3
 8000a5a:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <getRotorPosition+0x98>)
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4413      	add	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8000a6c:	e004      	b.n	8000a78 <getRotorPosition+0x8c>
			break;
 8000a6e:	bf00      	nop
 8000a70:	e000      	b.n	8000a74 <getRotorPosition+0x88>
			}
			break;
 8000a72:	bf00      	nop
		}
	}
	return -1;
 8000a74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	200000b4 	.word	0x200000b4

08000a88 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8000a8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a90:	4905      	ldr	r1, [pc, #20]	@ (8000aa8 <usart_Init+0x20>)
 8000a92:	4806      	ldr	r0, [pc, #24]	@ (8000aac <usart_Init+0x24>)
 8000a94:	f007 f80a 	bl	8007aac <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8000a98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a9c:	4904      	ldr	r1, [pc, #16]	@ (8000ab0 <usart_Init+0x28>)
 8000a9e:	4805      	ldr	r0, [pc, #20]	@ (8000ab4 <usart_Init+0x2c>)
 8000aa0:	f007 f804 	bl	8007aac <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000164 	.word	0x20000164
 8000aac:	2000087c 	.word	0x2000087c
 8000ab0:	20000264 	.word	0x20000264
 8000ab4:	2000090c 	.word	0x2000090c

08000ab8 <usart_printf>:

void usart_printf(const char *fmt,...) {
 8000ab8:	b40f      	push	{r0, r1, r2, r3}
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8000af4 <usart_printf+0x3c>)
 8000ac4:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8000af4 <usart_printf+0x3c>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	68b9      	ldr	r1, [r7, #8]
 8000acc:	480a      	ldr	r0, [pc, #40]	@ (8000af8 <usart_printf+0x40>)
 8000ace:	f00b f911 	bl	800bcf4 <vsiprintf>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	b29a      	uxth	r2, r3
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <usart_printf+0x44>)
 8000ad8:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 8000ada:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <usart_printf+0x44>)
 8000adc:	881b      	ldrh	r3, [r3, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	4905      	ldr	r1, [pc, #20]	@ (8000af8 <usart_printf+0x40>)
 8000ae2:	4807      	ldr	r0, [pc, #28]	@ (8000b00 <usart_printf+0x48>)
 8000ae4:	f006 ff72 	bl	80079cc <HAL_UART_Transmit_DMA>
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000af0:	b004      	add	sp, #16
 8000af2:	4770      	bx	lr
 8000af4:	20000390 	.word	0x20000390
 8000af8:	20000394 	.word	0x20000394
 8000afc:	20000494 	.word	0x20000494
 8000b00:	2000087c 	.word	0x2000087c

08000b04 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	@ 0x28
 8000b20:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8000b32:	2300      	movs	r3, #0
 8000b34:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8000b46:	463b      	mov	r3, r7
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480f      	ldr	r0, [pc, #60]	@ (8000b88 <can_filter_init+0x6c>)
 8000b4c:	f002 fde2 	bl	8003714 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8000b50:	480d      	ldr	r0, [pc, #52]	@ (8000b88 <can_filter_init+0x6c>)
 8000b52:	f002 febf 	bl	80038d4 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b56:	2102      	movs	r1, #2
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <can_filter_init+0x6c>)
 8000b5a:	f003 f821 	bl	8003ba0 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8000b5e:	230e      	movs	r3, #14
 8000b60:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8000b62:	230e      	movs	r3, #14
 8000b64:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8000b66:	463b      	mov	r3, r7
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <can_filter_init+0x70>)
 8000b6c:	f002 fdd2 	bl	8003714 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8000b70:	4806      	ldr	r0, [pc, #24]	@ (8000b8c <can_filter_init+0x70>)
 8000b72:	f002 feaf 	bl	80038d4 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000b76:	2102      	movs	r1, #2
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <can_filter_init+0x70>)
 8000b7a:	f003 f811 	bl	8003ba0 <HAL_CAN_ActivateNotification>
}
 8000b7e:	bf00      	nop
 8000b80:	3728      	adds	r7, #40	@ 0x28
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	200004f8 	.word	0x200004f8
 8000b8c:	20000520 	.word	0x20000520

08000b90 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8000b9a:	4a04      	ldr	r2, [pc, #16]	@ (8000bac <imu_pwm_set+0x1c>)
 8000b9c:	88fb      	ldrh	r3, [r7, #6]
 8000b9e:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	40014400 	.word	0x40014400

08000bb0 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 8000bbe:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <RC_init+0xac>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	695a      	ldr	r2, [r3, #20]
 8000bc4:	4b25      	ldr	r3, [pc, #148]	@ (8000c5c <RC_init+0xac>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bcc:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8000bce:	4b23      	ldr	r3, [pc, #140]	@ (8000c5c <RC_init+0xac>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	68da      	ldr	r2, [r3, #12]
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <RC_init+0xac>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 0210 	orr.w	r2, r2, #16
 8000bdc:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8000bde:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <RC_init+0xb0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b1e      	ldr	r3, [pc, #120]	@ (8000c60 <RC_init+0xb0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 0201 	bic.w	r2, r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8000bee:	e007      	b.n	8000c00 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <RC_init+0xb0>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <RC_init+0xb0>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f022 0201 	bic.w	r2, r2, #1
 8000bfe:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8000c00:	4b17      	ldr	r3, [pc, #92]	@ (8000c60 <RC_init+0xb0>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f003 0301 	and.w	r3, r3, #1
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d1f0      	bne.n	8000bf0 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8000c0e:	4b14      	ldr	r3, [pc, #80]	@ (8000c60 <RC_init+0xb0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a14      	ldr	r2, [pc, #80]	@ (8000c64 <RC_init+0xb4>)
 8000c14:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <RC_init+0xb0>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8000c1e:	4b10      	ldr	r3, [pc, #64]	@ (8000c60 <RC_init+0xb0>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8000c26:	4b0e      	ldr	r3, [pc, #56]	@ (8000c60 <RC_init+0xb0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	88fa      	ldrh	r2, [r7, #6]
 8000c2c:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <RC_init+0xb0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b0a      	ldr	r3, [pc, #40]	@ (8000c60 <RC_init+0xb0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8000c3c:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <RC_init+0xb0>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <RC_init+0xb0>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f042 0201 	orr.w	r2, r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	200008c4 	.word	0x200008c4
 8000c60:	20000a14 	.word	0x20000a14
 8000c64:	40004804 	.word	0x40004804

08000c68 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8000c70:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c74:	f008 f97a 	bl	8008f6c <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8000c78:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8000d1c <imu_temp_control_task+0xb4>
 8000c7c:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8000d20 <imu_temp_control_task+0xb8>
 8000c80:	4a28      	ldr	r2, [pc, #160]	@ (8000d24 <imu_temp_control_task+0xbc>)
 8000c82:	2100      	movs	r1, #0
 8000c84:	4828      	ldr	r0, [pc, #160]	@ (8000d28 <imu_temp_control_task+0xc0>)
 8000c86:	f000 ff3d 	bl	8001b04 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c8a:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <imu_temp_control_task+0xc4>)
 8000c8c:	2210      	movs	r2, #16
 8000c8e:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c90:	4826      	ldr	r0, [pc, #152]	@ (8000d2c <imu_temp_control_task+0xc4>)
 8000c92:	f005 fb88 	bl	80063a6 <HAL_SPI_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8000c9c:	f000 ff2c 	bl	8001af8 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f009 fa81 	bl	800a1a8 <pcTaskGetName>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f009 fb11 	bl	800a2d0 <xTaskGetHandle>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000d30 <imu_temp_control_task+0xc8>)
 8000cb2:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <imu_temp_control_task+0xcc>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8000cba:	bf00      	nop
 8000cbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	f009 ff31 	bl	800ab28 <ulTaskNotifyTake>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d1f7      	bne.n	8000cbc <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8000ccc:	f7ff fca6 	bl	800061c <IMU_get_temp>
 8000cd0:	eef0 7a40 	vmov.f32	s15, s0
 8000cd4:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8000d38 <imu_temp_control_task+0xd0>
 8000cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8000cdc:	4812      	ldr	r0, [pc, #72]	@ (8000d28 <imu_temp_control_task+0xc0>)
 8000cde:	f000 ff68 	bl	8001bb2 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <imu_temp_control_task+0xc0>)
 8000ce4:	edd3 7a08 	vldr	s15, [r3, #32]
 8000ce8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf0:	d503      	bpl.n	8000cfa <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8000cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8000d28 <imu_temp_control_task+0xc0>)
 8000cf4:	f04f 0200 	mov.w	r2, #0
 8000cf8:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8000cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8000d28 <imu_temp_control_task+0xc0>)
 8000cfc:	edd3 7a08 	vldr	s15, [r3, #32]
 8000d00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d04:	ee17 3a90 	vmov	r3, s15
 8000d08:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8000d0a:	89fb      	ldrh	r3, [r7, #14]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff3f 	bl	8000b90 <imu_pwm_set>
        osDelay(5);
 8000d12:	2005      	movs	r0, #5
 8000d14:	f008 f92a 	bl	8008f6c <osDelay>
    {
 8000d18:	e7cf      	b.n	8000cba <imu_temp_control_task+0x52>
 8000d1a:	bf00      	nop
 8000d1c:	45898000 	.word	0x45898000
 8000d20:	458ca000 	.word	0x458ca000
 8000d24:	0800c72c 	.word	0x0800c72c
 8000d28:	200004a0 	.word	0x200004a0
 8000d2c:	2000059c 	.word	0x2000059c
 8000d30:	20000498 	.word	0x20000498
 8000d34:	2000049c 	.word	0x2000049c
 8000d38:	42200000 	.word	0x42200000

08000d3c <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8000d46:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_GPIO_EXTI_Callback+0x54>)
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	88fa      	ldrh	r2, [r7, #6]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d11b      	bne.n	8000d88 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d016      	beq.n	8000d88 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d5a:	f009 fe57 	bl	800aa0c <xTaskGetSchedulerState>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d011      	beq.n	8000d88 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	490c      	ldr	r1, [pc, #48]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x60>)
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f009 ff28 	bl	800abc0 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000d70:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_GPIO_EXTI_Callback+0x60>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d007      	beq.n	8000d88 <HAL_GPIO_EXTI_Callback+0x4c>
 8000d78:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_GPIO_EXTI_Callback+0x64>)
 8000d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	f3bf 8f4f 	dsb	sy
 8000d84:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2000000e 	.word	0x2000000e
 8000d94:	2000049c 	.word	0x2000049c
 8000d98:	20000498 	.word	0x20000498
 8000d9c:	200004e8 	.word	0x200004e8
 8000da0:	e000ed04 	.word	0xe000ed04

08000da4 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8000db0:	f107 0308 	add.w	r3, r7, #8
 8000db4:	2206      	movs	r2, #6
 8000db6:	4619      	mov	r1, r3
 8000db8:	2003      	movs	r0, #3
 8000dba:	f000 f845 	bl	8000e48 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 8000dbe:	7a7b      	ldrb	r3, [r7, #9]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b21a      	sxth	r2, r3
 8000dc4:	7a3b      	ldrb	r3, [r7, #8]
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8000dcc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dd8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8000e44 <ist8310_read_mag+0xa0>
 8000ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8000de6:	7afb      	ldrb	r3, [r7, #11]
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	7abb      	ldrb	r3, [r7, #10]
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8000df4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000df8:	ee07 3a90 	vmov	s15, r3
 8000dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3304      	adds	r3, #4
 8000e04:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000e44 <ist8310_read_mag+0xa0>
 8000e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e0c:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8000e10:	7b7b      	ldrb	r3, [r7, #13]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	7b3b      	ldrb	r3, [r7, #12]
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8000e1e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e22:	ee07 3a90 	vmov	s15, r3
 8000e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	3308      	adds	r3, #8
 8000e2e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000e44 <ist8310_read_mag+0xa0>
 8000e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e36:	edc3 7a00 	vstr	s15, [r3]
}
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	3e99999a 	.word	0x3e99999a

08000e48 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af04      	add	r7, sp, #16
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
 8000e54:	4613      	mov	r3, r2
 8000e56:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	79bb      	ldrb	r3, [r7, #6]
 8000e5e:	b29b      	uxth	r3, r3
 8000e60:	210a      	movs	r1, #10
 8000e62:	9102      	str	r1, [sp, #8]
 8000e64:	9301      	str	r3, [sp, #4]
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	211c      	movs	r1, #28
 8000e6e:	4803      	ldr	r0, [pc, #12]	@ (8000e7c <ist8310_IIC_read_muli_reg+0x34>)
 8000e70:	f004 f912 	bl	8005098 <HAL_I2C_Mem_Read>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000548 	.word	0x20000548

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e84:	f002 fad8 	bl	8003438 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e88:	f000 f868 	bl	8000f5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8c:	f000 fd02 	bl	8001894 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e90:	f000 fc9a 	bl	80017c8 <MX_DMA_Init>
  MX_CAN1_Init();
 8000e94:	f000 f8ce 	bl	8001034 <MX_CAN1_Init>
  MX_CAN2_Init();
 8000e98:	f000 f902 	bl	80010a0 <MX_CAN2_Init>
  MX_SPI1_Init();
 8000e9c:	f000 f964 	bl	8001168 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000ea0:	f000 fa40 	bl	8001324 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000ea4:	f000 fc10 	bl	80016c8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000ea8:	f000 fc64 	bl	8001774 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8000eac:	f000 f992 	bl	80011d4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000eb0:	f000 fb20 	bl	80014f4 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8000eb4:	f000 fc32 	bl	800171c <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8000eb8:	f000 fbb8 	bl	800162c <MX_TIM10_Init>
  MX_I2C3_Init();
 8000ebc:	f000 f926 	bl	800110c <MX_I2C3_Init>
  MX_TIM5_Init();
 8000ec0:	f000 faa8 	bl	8001414 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8000ec4:	f7ff fe2a 	bl	8000b1c <can_filter_init>
  remote_control_init();
 8000ec8:	f001 f8fc 	bl	80020c4 <remote_control_init>
  usart_Init();
 8000ecc:	f7ff fddc 	bl	8000a88 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8000ed0:	f001 f906 	bl	80020e0 <get_remote_control_point>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <main+0xa8>)
 8000ed8:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000eda:	f007 ff6b 	bl	8008db4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8000ede:	4a13      	ldr	r2, [pc, #76]	@ (8000f2c <main+0xac>)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4813      	ldr	r0, [pc, #76]	@ (8000f30 <main+0xb0>)
 8000ee4:	f007 ffb0 	bl	8008e48 <osThreadNew>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <main+0xb4>)
 8000eec:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <main+0xb8>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4812      	ldr	r0, [pc, #72]	@ (8000f3c <main+0xbc>)
 8000ef4:	f007 ffa8 	bl	8008e48 <osThreadNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a11      	ldr	r2, [pc, #68]	@ (8000f40 <main+0xc0>)
 8000efc:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8000efe:	4a11      	ldr	r2, [pc, #68]	@ (8000f44 <main+0xc4>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	4811      	ldr	r0, [pc, #68]	@ (8000f48 <main+0xc8>)
 8000f04:	f007 ffa0 	bl	8008e48 <osThreadNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a10      	ldr	r2, [pc, #64]	@ (8000f4c <main+0xcc>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8000f0e:	4a10      	ldr	r2, [pc, #64]	@ (8000f50 <main+0xd0>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4810      	ldr	r0, [pc, #64]	@ (8000f54 <main+0xd4>)
 8000f14:	f007 ff98 	bl	8008e48 <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000f58 <main+0xd8>)
 8000f1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f1e:	f007 ff6d 	bl	8008dfc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f22:	bf00      	nop
 8000f24:	e7fd      	b.n	8000f22 <main+0xa2>
 8000f26:	bf00      	nop
 8000f28:	20000b44 	.word	0x20000b44
 8000f2c:	0800c738 	.word	0x0800c738
 8000f30:	08001a89 	.word	0x08001a89
 8000f34:	20000b34 	.word	0x20000b34
 8000f38:	0800c75c 	.word	0x0800c75c
 8000f3c:	08001ab1 	.word	0x08001ab1
 8000f40:	20000b38 	.word	0x20000b38
 8000f44:	0800c780 	.word	0x0800c780
 8000f48:	08000c69 	.word	0x08000c69
 8000f4c:	20000b3c 	.word	0x20000b3c
 8000f50:	0800c7a4 	.word	0x0800c7a4
 8000f54:	08001ae9 	.word	0x08001ae9
 8000f58:	20000b40 	.word	0x20000b40

08000f5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b094      	sub	sp, #80	@ 0x50
 8000f60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f62:	f107 0320 	add.w	r3, r7, #32
 8000f66:	2230      	movs	r2, #48	@ 0x30
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00a fecc 	bl	800bd08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f70:	f107 030c 	add.w	r3, r7, #12
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
 8000f84:	4b29      	ldr	r3, [pc, #164]	@ (800102c <SystemClock_Config+0xd0>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	4a28      	ldr	r2, [pc, #160]	@ (800102c <SystemClock_Config+0xd0>)
 8000f8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f90:	4b26      	ldr	r3, [pc, #152]	@ (800102c <SystemClock_Config+0xd0>)
 8000f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
 8000fa0:	4b23      	ldr	r3, [pc, #140]	@ (8001030 <SystemClock_Config+0xd4>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a22      	ldr	r2, [pc, #136]	@ (8001030 <SystemClock_Config+0xd4>)
 8000fa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b20      	ldr	r3, [pc, #128]	@ (8001030 <SystemClock_Config+0xd4>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000fcc:	2306      	movs	r3, #6
 8000fce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fd0:	23a8      	movs	r3, #168	@ 0xa8
 8000fd2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f004 fd61 	bl	8005aa8 <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fec:	f000 fd84 	bl	8001af8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ffc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001000:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001002:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001006:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001008:	f107 030c 	add.w	r3, r7, #12
 800100c:	2105      	movs	r1, #5
 800100e:	4618      	mov	r0, r3
 8001010:	f004 ffc2 	bl	8005f98 <HAL_RCC_ClockConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800101a:	f000 fd6d 	bl	8001af8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800101e:	f005 f8a1 	bl	8006164 <HAL_RCC_EnableCSS>
}
 8001022:	bf00      	nop
 8001024:	3750      	adds	r7, #80	@ 0x50
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	40023800 	.word	0x40023800
 8001030:	40007000 	.word	0x40007000

08001034 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_CAN1_Init+0x64>)
 800103a:	4a18      	ldr	r2, [pc, #96]	@ (800109c <MX_CAN1_Init+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <MX_CAN1_Init+0x64>)
 8001040:	2203      	movs	r2, #3
 8001042:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_CAN1_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <MX_CAN1_Init+0x64>)
 800104c:	2200      	movs	r2, #0
 800104e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_CAN1_Init+0x64>)
 8001052:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8001056:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_CAN1_Init+0x64>)
 800105a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800105e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001060:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <MX_CAN1_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <MX_CAN1_Init+0x64>)
 8001068:	2200      	movs	r2, #0
 800106a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800106c:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <MX_CAN1_Init+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <MX_CAN1_Init+0x64>)
 8001074:	2200      	movs	r2, #0
 8001076:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001078:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <MX_CAN1_Init+0x64>)
 800107a:	2200      	movs	r2, #0
 800107c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <MX_CAN1_Init+0x64>)
 8001080:	2200      	movs	r2, #0
 8001082:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001084:	4804      	ldr	r0, [pc, #16]	@ (8001098 <MX_CAN1_Init+0x64>)
 8001086:	f002 fa49 	bl	800351c <HAL_CAN_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001090:	f000 fd32 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200004f8 	.word	0x200004f8
 800109c:	40006400 	.word	0x40006400

080010a0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80010a4:	4b17      	ldr	r3, [pc, #92]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010a6:	4a18      	ldr	r2, [pc, #96]	@ (8001108 <MX_CAN2_Init+0x68>)
 80010a8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80010aa:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010ac:	2203      	movs	r2, #3
 80010ae:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010b0:	4b14      	ldr	r3, [pc, #80]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010b6:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80010bc:	4b11      	ldr	r3, [pc, #68]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010be:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80010c2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010c6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80010ca:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010da:	2200      	movs	r2, #0
 80010dc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80010f0:	4804      	ldr	r0, [pc, #16]	@ (8001104 <MX_CAN2_Init+0x64>)
 80010f2:	f002 fa13 	bl	800351c <HAL_CAN_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80010fc:	f000 fcfc 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000520 	.word	0x20000520
 8001108:	40006800 	.word	0x40006800

0800110c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <MX_I2C3_Init+0x50>)
 8001112:	4a13      	ldr	r2, [pc, #76]	@ (8001160 <MX_I2C3_Init+0x54>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_I2C3_Init+0x50>)
 8001118:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <MX_I2C3_Init+0x58>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_I2C3_Init+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <MX_I2C3_Init+0x50>)
 8001124:	2200      	movs	r2, #0
 8001126:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <MX_I2C3_Init+0x50>)
 800112a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800112e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001130:	4b0a      	ldr	r3, [pc, #40]	@ (800115c <MX_I2C3_Init+0x50>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001136:	4b09      	ldr	r3, [pc, #36]	@ (800115c <MX_I2C3_Init+0x50>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113c:	4b07      	ldr	r3, [pc, #28]	@ (800115c <MX_I2C3_Init+0x50>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <MX_I2C3_Init+0x50>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001148:	4804      	ldr	r0, [pc, #16]	@ (800115c <MX_I2C3_Init+0x50>)
 800114a:	f003 fe61 	bl	8004e10 <HAL_I2C_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001154:	f000 fcd0 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000548 	.word	0x20000548
 8001160:	40005c00 	.word	0x40005c00
 8001164:	00061a80 	.word	0x00061a80

08001168 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <MX_SPI1_Init+0x64>)
 800116e:	4a18      	ldr	r2, [pc, #96]	@ (80011d0 <MX_SPI1_Init+0x68>)
 8001170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001172:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <MX_SPI1_Init+0x64>)
 8001174:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117a:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <MX_SPI1_Init+0x64>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <MX_SPI1_Init+0x64>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001186:	4b11      	ldr	r3, [pc, #68]	@ (80011cc <MX_SPI1_Init+0x64>)
 8001188:	2202      	movs	r2, #2
 800118a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <MX_SPI1_Init+0x64>)
 800118e:	2201      	movs	r2, #1
 8001190:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001192:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <MX_SPI1_Init+0x64>)
 8001194:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001198:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <MX_SPI1_Init+0x64>)
 800119c:	2238      	movs	r2, #56	@ 0x38
 800119e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011b4:	220a      	movs	r2, #10
 80011b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	@ (80011cc <MX_SPI1_Init+0x64>)
 80011ba:	f005 f8f4 	bl	80063a6 <HAL_SPI_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80011c4:	f000 fc98 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	2000059c 	.word	0x2000059c
 80011d0:	40013000 	.word	0x40013000

080011d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b092      	sub	sp, #72	@ 0x48
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2220      	movs	r2, #32
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f00a fd82 	bl	800bd08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001204:	4b45      	ldr	r3, [pc, #276]	@ (800131c <MX_TIM1_Init+0x148>)
 8001206:	4a46      	ldr	r2, [pc, #280]	@ (8001320 <MX_TIM1_Init+0x14c>)
 8001208:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800120a:	4b44      	ldr	r3, [pc, #272]	@ (800131c <MX_TIM1_Init+0x148>)
 800120c:	2253      	movs	r2, #83	@ 0x53
 800120e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001210:	4b42      	ldr	r3, [pc, #264]	@ (800131c <MX_TIM1_Init+0x148>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001216:	4b41      	ldr	r3, [pc, #260]	@ (800131c <MX_TIM1_Init+0x148>)
 8001218:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800121c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121e:	4b3f      	ldr	r3, [pc, #252]	@ (800131c <MX_TIM1_Init+0x148>)
 8001220:	2200      	movs	r2, #0
 8001222:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001224:	4b3d      	ldr	r3, [pc, #244]	@ (800131c <MX_TIM1_Init+0x148>)
 8001226:	2200      	movs	r2, #0
 8001228:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122a:	4b3c      	ldr	r3, [pc, #240]	@ (800131c <MX_TIM1_Init+0x148>)
 800122c:	2200      	movs	r2, #0
 800122e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001230:	483a      	ldr	r0, [pc, #232]	@ (800131c <MX_TIM1_Init+0x148>)
 8001232:	f005 fc7f 	bl	8006b34 <HAL_TIM_PWM_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800123c:	f000 fc5c 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001248:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800124c:	4619      	mov	r1, r3
 800124e:	4833      	ldr	r0, [pc, #204]	@ (800131c <MX_TIM1_Init+0x148>)
 8001250:	f006 fa9e 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800125a:	f000 fc4d 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800125e:	2360      	movs	r3, #96	@ 0x60
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001266:	2300      	movs	r3, #0
 8001268:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800126a:	2300      	movs	r3, #0
 800126c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800126e:	2300      	movs	r3, #0
 8001270:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001272:	2300      	movs	r3, #0
 8001274:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001276:	2300      	movs	r3, #0
 8001278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800127a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	4826      	ldr	r0, [pc, #152]	@ (800131c <MX_TIM1_Init+0x148>)
 8001284:	f005 fdde 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800128e:	f000 fc33 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001296:	2204      	movs	r2, #4
 8001298:	4619      	mov	r1, r3
 800129a:	4820      	ldr	r0, [pc, #128]	@ (800131c <MX_TIM1_Init+0x148>)
 800129c:	f005 fdd2 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80012a6:	f000 fc27 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ae:	2208      	movs	r2, #8
 80012b0:	4619      	mov	r1, r3
 80012b2:	481a      	ldr	r0, [pc, #104]	@ (800131c <MX_TIM1_Init+0x148>)
 80012b4:	f005 fdc6 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80012be:	f000 fc1b 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c6:	220c      	movs	r2, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	4814      	ldr	r0, [pc, #80]	@ (800131c <MX_TIM1_Init+0x148>)
 80012cc:	f005 fdba 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80012d6:	f000 fc0f 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	4619      	mov	r1, r3
 80012fc:	4807      	ldr	r0, [pc, #28]	@ (800131c <MX_TIM1_Init+0x148>)
 80012fe:	f006 fac3 	bl	8007888 <HAL_TIMEx_ConfigBreakDeadTime>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001308:	f000 fbf6 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800130c:	4803      	ldr	r0, [pc, #12]	@ (800131c <MX_TIM1_Init+0x148>)
 800130e:	f001 fc7b 	bl	8002c08 <HAL_TIM_MspPostInit>

}
 8001312:	bf00      	nop
 8001314:	3748      	adds	r7, #72	@ 0x48
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	200005f4 	.word	0x200005f4
 8001320:	40010000 	.word	0x40010000

08001324 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08e      	sub	sp, #56	@ 0x38
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001338:	f107 0320 	add.w	r3, r7, #32
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001354:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <MX_TIM4_Init+0xe8>)
 8001356:	4a2e      	ldr	r2, [pc, #184]	@ (8001410 <MX_TIM4_Init+0xec>)
 8001358:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800135a:	4b2c      	ldr	r3, [pc, #176]	@ (800140c <MX_TIM4_Init+0xe8>)
 800135c:	2253      	movs	r2, #83	@ 0x53
 800135e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001360:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <MX_TIM4_Init+0xe8>)
 8001362:	2200      	movs	r2, #0
 8001364:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8001366:	4b29      	ldr	r3, [pc, #164]	@ (800140c <MX_TIM4_Init+0xe8>)
 8001368:	f245 2207 	movw	r2, #20999	@ 0x5207
 800136c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136e:	4b27      	ldr	r3, [pc, #156]	@ (800140c <MX_TIM4_Init+0xe8>)
 8001370:	2200      	movs	r2, #0
 8001372:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001374:	4b25      	ldr	r3, [pc, #148]	@ (800140c <MX_TIM4_Init+0xe8>)
 8001376:	2280      	movs	r2, #128	@ 0x80
 8001378:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800137a:	4824      	ldr	r0, [pc, #144]	@ (800140c <MX_TIM4_Init+0xe8>)
 800137c:	f005 fb22 	bl	80069c4 <HAL_TIM_Base_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001386:	f000 fbb7 	bl	8001af8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001390:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001394:	4619      	mov	r1, r3
 8001396:	481d      	ldr	r0, [pc, #116]	@ (800140c <MX_TIM4_Init+0xe8>)
 8001398:	f005 fe16 	bl	8006fc8 <HAL_TIM_ConfigClockSource>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80013a2:	f000 fba9 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013a6:	4819      	ldr	r0, [pc, #100]	@ (800140c <MX_TIM4_Init+0xe8>)
 80013a8:	f005 fbc4 	bl	8006b34 <HAL_TIM_PWM_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80013b2:	f000 fba1 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	4619      	mov	r1, r3
 80013c4:	4811      	ldr	r0, [pc, #68]	@ (800140c <MX_TIM4_Init+0xe8>)
 80013c6:	f006 f9e3 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80013d0:	f000 fb92 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d4:	2360      	movs	r3, #96	@ 0x60
 80013d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 80013d8:	f642 1303 	movw	r3, #10499	@ 0x2903
 80013dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2208      	movs	r2, #8
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	@ (800140c <MX_TIM4_Init+0xe8>)
 80013ee:	f005 fd29 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80013f8:	f000 fb7e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013fc:	4803      	ldr	r0, [pc, #12]	@ (800140c <MX_TIM4_Init+0xe8>)
 80013fe:	f001 fc03 	bl	8002c08 <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3738      	adds	r7, #56	@ 0x38
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000063c 	.word	0x2000063c
 8001410:	40000800 	.word	0x40000800

08001414 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141a:	f107 0320 	add.w	r3, r7, #32
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001424:	1d3b      	adds	r3, r7, #4
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]
 8001432:	615a      	str	r2, [r3, #20]
 8001434:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001436:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <MX_TIM5_Init+0xd8>)
 8001438:	4a2d      	ldr	r2, [pc, #180]	@ (80014f0 <MX_TIM5_Init+0xdc>)
 800143a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800143c:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <MX_TIM5_Init+0xd8>)
 800143e:	2253      	movs	r2, #83	@ 0x53
 8001440:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001442:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <MX_TIM5_Init+0xd8>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8001448:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <MX_TIM5_Init+0xd8>)
 800144a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 800144e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001450:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <MX_TIM5_Init+0xd8>)
 8001452:	2200      	movs	r2, #0
 8001454:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001456:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <MX_TIM5_Init+0xd8>)
 8001458:	2200      	movs	r2, #0
 800145a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800145c:	4823      	ldr	r0, [pc, #140]	@ (80014ec <MX_TIM5_Init+0xd8>)
 800145e:	f005 fb69 	bl	8006b34 <HAL_TIM_PWM_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001468:	f000 fb46 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001474:	f107 0320 	add.w	r3, r7, #32
 8001478:	4619      	mov	r1, r3
 800147a:	481c      	ldr	r0, [pc, #112]	@ (80014ec <MX_TIM5_Init+0xd8>)
 800147c:	f006 f988 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001486:	f000 fb37 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800148a:	2360      	movs	r3, #96	@ 0x60
 800148c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	4619      	mov	r1, r3
 80014a0:	4812      	ldr	r0, [pc, #72]	@ (80014ec <MX_TIM5_Init+0xd8>)
 80014a2:	f005 fccf 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80014ac:	f000 fb24 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	2204      	movs	r2, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	480d      	ldr	r0, [pc, #52]	@ (80014ec <MX_TIM5_Init+0xd8>)
 80014b8:	f005 fcc4 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80014c2:	f000 fb19 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2208      	movs	r2, #8
 80014ca:	4619      	mov	r1, r3
 80014cc:	4807      	ldr	r0, [pc, #28]	@ (80014ec <MX_TIM5_Init+0xd8>)
 80014ce:	f005 fcb9 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80014d8:	f000 fb0e 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014dc:	4803      	ldr	r0, [pc, #12]	@ (80014ec <MX_TIM5_Init+0xd8>)
 80014de:	f001 fb93 	bl	8002c08 <HAL_TIM_MspPostInit>

}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	@ 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000684 	.word	0x20000684
 80014f0:	40000c00 	.word	0x40000c00

080014f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b092      	sub	sp, #72	@ 0x48
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
 8001514:	615a      	str	r2, [r3, #20]
 8001516:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	2220      	movs	r2, #32
 800151c:	2100      	movs	r1, #0
 800151e:	4618      	mov	r0, r3
 8001520:	f00a fbf2 	bl	800bd08 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001524:	4b3f      	ldr	r3, [pc, #252]	@ (8001624 <MX_TIM8_Init+0x130>)
 8001526:	4a40      	ldr	r2, [pc, #256]	@ (8001628 <MX_TIM8_Init+0x134>)
 8001528:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 800152a:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <MX_TIM8_Init+0x130>)
 800152c:	2253      	movs	r2, #83	@ 0x53
 800152e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001530:	4b3c      	ldr	r3, [pc, #240]	@ (8001624 <MX_TIM8_Init+0x130>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001536:	4b3b      	ldr	r3, [pc, #236]	@ (8001624 <MX_TIM8_Init+0x130>)
 8001538:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800153c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	4b39      	ldr	r3, [pc, #228]	@ (8001624 <MX_TIM8_Init+0x130>)
 8001540:	2200      	movs	r2, #0
 8001542:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001544:	4b37      	ldr	r3, [pc, #220]	@ (8001624 <MX_TIM8_Init+0x130>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800154a:	4b36      	ldr	r3, [pc, #216]	@ (8001624 <MX_TIM8_Init+0x130>)
 800154c:	2280      	movs	r2, #128	@ 0x80
 800154e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001550:	4834      	ldr	r0, [pc, #208]	@ (8001624 <MX_TIM8_Init+0x130>)
 8001552:	f005 faef 	bl	8006b34 <HAL_TIM_PWM_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 800155c:	f000 facc 	bl	8001af8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001568:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800156c:	4619      	mov	r1, r3
 800156e:	482d      	ldr	r0, [pc, #180]	@ (8001624 <MX_TIM8_Init+0x130>)
 8001570:	f006 f90e 	bl	8007790 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800157a:	f000 fabd 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157e:	2360      	movs	r3, #96	@ 0x60
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001592:	2300      	movs	r3, #0
 8001594:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001596:	2300      	movs	r3, #0
 8001598:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800159a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800159e:	2200      	movs	r2, #0
 80015a0:	4619      	mov	r1, r3
 80015a2:	4820      	ldr	r0, [pc, #128]	@ (8001624 <MX_TIM8_Init+0x130>)
 80015a4:	f005 fc4e 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80015ae:	f000 faa3 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b6:	2204      	movs	r2, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	481a      	ldr	r0, [pc, #104]	@ (8001624 <MX_TIM8_Init+0x130>)
 80015bc:	f005 fc42 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80015c6:	f000 fa97 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ce:	2208      	movs	r2, #8
 80015d0:	4619      	mov	r1, r3
 80015d2:	4814      	ldr	r0, [pc, #80]	@ (8001624 <MX_TIM8_Init+0x130>)
 80015d4:	f005 fc36 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80015de:	f000 fa8b 	bl	8001af8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015fa:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001600:	1d3b      	adds	r3, r7, #4
 8001602:	4619      	mov	r1, r3
 8001604:	4807      	ldr	r0, [pc, #28]	@ (8001624 <MX_TIM8_Init+0x130>)
 8001606:	f006 f93f 	bl	8007888 <HAL_TIMEx_ConfigBreakDeadTime>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8001610:	f000 fa72 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001614:	4803      	ldr	r0, [pc, #12]	@ (8001624 <MX_TIM8_Init+0x130>)
 8001616:	f001 faf7 	bl	8002c08 <HAL_TIM_MspPostInit>

}
 800161a:	bf00      	nop
 800161c:	3748      	adds	r7, #72	@ 0x48
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200006cc 	.word	0x200006cc
 8001628:	40010400 	.word	0x40010400

0800162c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
 8001640:	615a      	str	r2, [r3, #20]
 8001642:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001644:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <MX_TIM10_Init+0x94>)
 8001646:	4a1f      	ldr	r2, [pc, #124]	@ (80016c4 <MX_TIM10_Init+0x98>)
 8001648:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800164a:	4b1d      	ldr	r3, [pc, #116]	@ (80016c0 <MX_TIM10_Init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001650:	4b1b      	ldr	r3, [pc, #108]	@ (80016c0 <MX_TIM10_Init+0x94>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001656:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <MX_TIM10_Init+0x94>)
 8001658:	f241 3287 	movw	r2, #4999	@ 0x1387
 800165c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800165e:	4b18      	ldr	r3, [pc, #96]	@ (80016c0 <MX_TIM10_Init+0x94>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b16      	ldr	r3, [pc, #88]	@ (80016c0 <MX_TIM10_Init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800166a:	4815      	ldr	r0, [pc, #84]	@ (80016c0 <MX_TIM10_Init+0x94>)
 800166c:	f005 f9aa 	bl	80069c4 <HAL_TIM_Base_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001676:	f000 fa3f 	bl	8001af8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800167a:	4811      	ldr	r0, [pc, #68]	@ (80016c0 <MX_TIM10_Init+0x94>)
 800167c:	f005 fa5a 	bl	8006b34 <HAL_TIM_PWM_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001686:	f000 fa37 	bl	8001af8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168a:	2360      	movs	r3, #96	@ 0x60
 800168c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	2200      	movs	r2, #0
 800169e:	4619      	mov	r1, r3
 80016a0:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <MX_TIM10_Init+0x94>)
 80016a2:	f005 fbcf 	bl	8006e44 <HAL_TIM_PWM_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80016ac:	f000 fa24 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80016b0:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <MX_TIM10_Init+0x94>)
 80016b2:	f001 faa9 	bl	8002c08 <HAL_TIM_MspPostInit>

}
 80016b6:	bf00      	nop
 80016b8:	3720      	adds	r7, #32
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000714 	.word	0x20000714
 80016c4:	40014400 	.word	0x40014400

080016c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <MX_USART1_UART_Init+0x50>)
 80016d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016da:	4b0e      	ldr	r3, [pc, #56]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016ee:	220c      	movs	r2, #12
 80016f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016f2:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	@ (8001714 <MX_USART1_UART_Init+0x4c>)
 8001700:	f006 f914 	bl	800792c <HAL_UART_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800170a:	f000 f9f5 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000087c 	.word	0x2000087c
 8001718:	40011000 	.word	0x40011000

0800171c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <MX_USART3_UART_Init+0x50>)
 8001724:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001728:	4a11      	ldr	r2, [pc, #68]	@ (8001770 <MX_USART3_UART_Init+0x54>)
 800172a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800172c:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001732:	4b0d      	ldr	r3, [pc, #52]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001738:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 800173a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800173e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001742:	220c      	movs	r2, #12
 8001744:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_USART3_UART_Init+0x4c>)
 8001754:	f006 f8ea 	bl	800792c <HAL_UART_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800175e:	f000 f9cb 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200008c4 	.word	0x200008c4
 800176c:	40004800 	.word	0x40004800
 8001770:	000186a0 	.word	0x000186a0

08001774 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001778:	4b11      	ldr	r3, [pc, #68]	@ (80017c0 <MX_USART6_UART_Init+0x4c>)
 800177a:	4a12      	ldr	r2, [pc, #72]	@ (80017c4 <MX_USART6_UART_Init+0x50>)
 800177c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <MX_USART6_UART_Init+0x4c>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <MX_USART6_UART_Init+0x4c>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0c      	ldr	r3, [pc, #48]	@ (80017c0 <MX_USART6_UART_Init+0x4c>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	@ (80017c0 <MX_USART6_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_USART6_UART_Init+0x4c>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b08      	ldr	r3, [pc, #32]	@ (80017c0 <MX_USART6_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b06      	ldr	r3, [pc, #24]	@ (80017c0 <MX_USART6_UART_Init+0x4c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <MX_USART6_UART_Init+0x4c>)
 80017ac:	f006 f8be 	bl	800792c <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80017b6:	f000 f99f 	bl	8001af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000090c 	.word	0x2000090c
 80017c4:	40011400 	.word	0x40011400

080017c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001890 <MX_DMA_Init+0xc8>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a2e      	ldr	r2, [pc, #184]	@ (8001890 <MX_DMA_Init+0xc8>)
 80017d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <MX_DMA_Init+0xc8>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <MX_DMA_Init+0xc8>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a27      	ldr	r2, [pc, #156]	@ (8001890 <MX_DMA_Init+0xc8>)
 80017f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b25      	ldr	r3, [pc, #148]	@ (8001890 <MX_DMA_Init+0xc8>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001806:	2200      	movs	r2, #0
 8001808:	2105      	movs	r1, #5
 800180a:	200c      	movs	r0, #12
 800180c:	f002 fcf9 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001810:	200c      	movs	r0, #12
 8001812:	f002 fd12 	bl	800423a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2105      	movs	r1, #5
 800181a:	200d      	movs	r0, #13
 800181c:	f002 fcf1 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001820:	200d      	movs	r0, #13
 8001822:	f002 fd0a 	bl	800423a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2105      	movs	r1, #5
 800182a:	200f      	movs	r0, #15
 800182c:	f002 fce9 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001830:	200f      	movs	r0, #15
 8001832:	f002 fd02 	bl	800423a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2105      	movs	r1, #5
 800183a:	202f      	movs	r0, #47	@ 0x2f
 800183c:	f002 fce1 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001840:	202f      	movs	r0, #47	@ 0x2f
 8001842:	f002 fcfa 	bl	800423a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2105      	movs	r1, #5
 800184a:	2039      	movs	r0, #57	@ 0x39
 800184c:	f002 fcd9 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001850:	2039      	movs	r0, #57	@ 0x39
 8001852:	f002 fcf2 	bl	800423a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2105      	movs	r1, #5
 800185a:	203a      	movs	r0, #58	@ 0x3a
 800185c:	f002 fcd1 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001860:	203a      	movs	r0, #58	@ 0x3a
 8001862:	f002 fcea 	bl	800423a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2105      	movs	r1, #5
 800186a:	2045      	movs	r0, #69	@ 0x45
 800186c:	f002 fcc9 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001870:	2045      	movs	r0, #69	@ 0x45
 8001872:	f002 fce2 	bl	800423a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2105      	movs	r1, #5
 800187a:	2046      	movs	r0, #70	@ 0x46
 800187c:	f002 fcc1 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001880:	2046      	movs	r0, #70	@ 0x46
 8001882:	f002 fcda 	bl	800423a <HAL_NVIC_EnableIRQ>

}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	@ 0x38
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	623b      	str	r3, [r7, #32]
 80018ae:	4b71      	ldr	r3, [pc, #452]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b2:	4a70      	ldr	r2, [pc, #448]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
 80018c4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
 80018ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	4a69      	ldr	r2, [pc, #420]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 80018d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d6:	4b67      	ldr	r3, [pc, #412]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	4b63      	ldr	r3, [pc, #396]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a62      	ldr	r2, [pc, #392]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b60      	ldr	r3, [pc, #384]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	4b5c      	ldr	r3, [pc, #368]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001906:	4a5b      	ldr	r2, [pc, #364]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001908:	f043 0308 	orr.w	r3, r3, #8
 800190c:	6313      	str	r3, [r2, #48]	@ 0x30
 800190e:	4b59      	ldr	r3, [pc, #356]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001912:	f003 0308 	and.w	r3, r3, #8
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b55      	ldr	r3, [pc, #340]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a54      	ldr	r2, [pc, #336]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b52      	ldr	r3, [pc, #328]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b4e      	ldr	r3, [pc, #312]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a4d      	ldr	r2, [pc, #308]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b4b      	ldr	r3, [pc, #300]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	60bb      	str	r3, [r7, #8]
 8001956:	4b47      	ldr	r3, [pc, #284]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195a:	4a46      	ldr	r2, [pc, #280]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 800195c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001960:	6313      	str	r3, [r2, #48]	@ 0x30
 8001962:	4b44      	ldr	r3, [pc, #272]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196a:	60bb      	str	r3, [r7, #8]
 800196c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	607b      	str	r3, [r7, #4]
 8001972:	4b40      	ldr	r3, [pc, #256]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	4a3f      	ldr	r2, [pc, #252]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001978:	f043 0320 	orr.w	r3, r3, #32
 800197c:	6313      	str	r3, [r2, #48]	@ 0x30
 800197e:	4b3d      	ldr	r3, [pc, #244]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001982:	f003 0320 	and.w	r3, r3, #32
 8001986:	607b      	str	r3, [r7, #4]
 8001988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	603b      	str	r3, [r7, #0]
 800198e:	4b39      	ldr	r3, [pc, #228]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a38      	ldr	r2, [pc, #224]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 8001994:	f043 0310 	orr.w	r3, r3, #16
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b36      	ldr	r3, [pc, #216]	@ (8001a74 <MX_GPIO_Init+0x1e0>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0310 	and.w	r3, r3, #16
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2140      	movs	r1, #64	@ 0x40
 80019aa:	4833      	ldr	r0, [pc, #204]	@ (8001a78 <MX_GPIO_Init+0x1e4>)
 80019ac:	f003 f9fe 	bl	8004dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2110      	movs	r1, #16
 80019b4:	4831      	ldr	r0, [pc, #196]	@ (8001a7c <MX_GPIO_Init+0x1e8>)
 80019b6:	f003 f9f9 	bl	8004dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	2101      	movs	r1, #1
 80019be:	4830      	ldr	r0, [pc, #192]	@ (8001a80 <MX_GPIO_Init+0x1ec>)
 80019c0:	f003 f9f4 	bl	8004dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019c4:	2340      	movs	r3, #64	@ 0x40
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c8:	2301      	movs	r3, #1
 80019ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019cc:	2300      	movs	r3, #0
 80019ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d0:	2300      	movs	r3, #0
 80019d2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	4827      	ldr	r0, [pc, #156]	@ (8001a78 <MX_GPIO_Init+0x1e4>)
 80019dc:	f003 f84a 	bl	8004a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019e0:	2308      	movs	r3, #8
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4820      	ldr	r0, [pc, #128]	@ (8001a78 <MX_GPIO_Init+0x1e4>)
 80019f6:	f003 f83d 	bl	8004a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019fa:	2310      	movs	r3, #16
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481a      	ldr	r0, [pc, #104]	@ (8001a7c <MX_GPIO_Init+0x1e8>)
 8001a12:	f003 f82f 	bl	8004a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8001a16:	2330      	movs	r3, #48	@ 0x30
 8001a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a1a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4816      	ldr	r0, [pc, #88]	@ (8001a84 <MX_GPIO_Init+0x1f0>)
 8001a2c:	f003 f822 	bl	8004a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a44:	4619      	mov	r1, r3
 8001a46:	480e      	ldr	r0, [pc, #56]	@ (8001a80 <MX_GPIO_Init+0x1ec>)
 8001a48:	f003 f814 	bl	8004a74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	2105      	movs	r1, #5
 8001a50:	2009      	movs	r0, #9
 8001a52:	f002 fbd6 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001a56:	2009      	movs	r0, #9
 8001a58:	f002 fbef 	bl	800423a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	2105      	movs	r1, #5
 8001a60:	200a      	movs	r0, #10
 8001a62:	f002 fbce 	bl	8004202 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001a66:	200a      	movs	r0, #10
 8001a68:	f002 fbe7 	bl	800423a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a6c:	bf00      	nop
 8001a6e:	3738      	adds	r7, #56	@ 0x38
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40021800 	.word	0x40021800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020400 	.word	0x40020400
 8001a84:	40020800 	.word	0x40020800

08001a88 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
				}
			}

		}
		*/
		uint16_t rpm = getRotorPosition(Bus1, M3508, 1);
 8001a90:	2201      	movs	r2, #1
 8001a92:	2101      	movs	r1, #1
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7fe ffa9 	bl	80009ec <getRotorPosition>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	81fb      	strh	r3, [r7, #14]
		usart_printf("beans %d \r\n", rpm);
 8001a9e:	89fb      	ldrh	r3, [r7, #14]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4802      	ldr	r0, [pc, #8]	@ (8001aac <TaskMain+0x24>)
 8001aa4:	f7ff f808 	bl	8000ab8 <usart_printf>
	for(;;) {
 8001aa8:	bf00      	nop
 8001aaa:	e7f1      	b.n	8001a90 <TaskMain+0x8>
 8001aac:	0800c708 	.word	0x0800c708

08001ab0 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */



	PWMInit(&htim1, &htim4, &htim5, &htim8);
 8001ab8:	4b07      	ldr	r3, [pc, #28]	@ (8001ad8 <TaskChassis+0x28>)
 8001aba:	4a08      	ldr	r2, [pc, #32]	@ (8001adc <TaskChassis+0x2c>)
 8001abc:	4908      	ldr	r1, [pc, #32]	@ (8001ae0 <TaskChassis+0x30>)
 8001abe:	4809      	ldr	r0, [pc, #36]	@ (8001ae4 <TaskChassis+0x34>)
 8001ac0:	f000 f9c0 	bl	8001e44 <PWMInit>

  /* Infinite loop */
    for(;;) {

		PWMTimerStarter();
 8001ac4:	f000 f9f2 	bl	8001eac <PWMTimerStarter>
		RCkeysRefresh();
 8001ac8:	f000 fcc0 	bl	800244c <RCkeysRefresh>
        osDelay(10);
 8001acc:	200a      	movs	r0, #10
 8001ace:	f007 fa4d 	bl	8008f6c <osDelay>
		PWMTimerStarter();
 8001ad2:	bf00      	nop
 8001ad4:	e7f6      	b.n	8001ac4 <TaskChassis+0x14>
 8001ad6:	bf00      	nop
 8001ad8:	200006cc 	.word	0x200006cc
 8001adc:	20000684 	.word	0x20000684
 8001ae0:	2000063c 	.word	0x2000063c
 8001ae4:	200005f4 	.word	0x200005f4

08001ae8 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 8001af0:	2005      	movs	r0, #5
 8001af2:	f007 fa3b 	bl	8008f6c <osDelay>
 8001af6:	e7fb      	b.n	8001af0 <TaskTurret+0x8>

08001af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001afc:	b672      	cpsid	i
}
 8001afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b00:	bf00      	nop
 8001b02:	e7fd      	b.n	8001b00 <Error_Handler+0x8>

08001b04 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6178      	str	r0, [r7, #20]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	60fa      	str	r2, [r7, #12]
 8001b10:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b14:	edc7 0a01 	vstr	s1, [r7, #4]
 8001b18:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d042      	beq.n	8001ba6 <PID_init+0xa2>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d03f      	beq.n	8001ba6 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	7cfa      	ldrb	r2, [r7, #19]
 8001b2a:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	3304      	adds	r3, #4
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	3308      	adds	r3, #8
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	621a      	str	r2, [r3, #32]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	6a1a      	ldr	r2, [r3, #32]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	629a      	str	r2, [r3, #40]	@ 0x28
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ba4:	e000      	b.n	8001ba8 <PID_init+0xa4>
        return;
 8001ba6:	bf00      	nop
}
 8001ba8:	371c      	adds	r7, #28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	ed87 0a02 	vstr	s0, [r7, #8]
 8001bbe:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <PID_calc+0x1c>
    {
        return 0.0f;
 8001bc8:	f04f 0300 	mov.w	r3, #0
 8001bcc:	e130      	b.n	8001e30 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8001bea:	ed97 7a01 	vldr	s14, [r7, #4]
 8001bee:	edd7 7a02 	vldr	s15, [r7, #8]
 8001bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	f040 8095 	bne.w	8001d30 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	ed93 7a01 	vldr	s14, [r3, #4]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001c12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	edd3 6a02 	vldr	s13, [r3, #8]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001c2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001c58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	ed93 7a03 	vldr	s14, [r3, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8c:	dd04      	ble.n	8001c98 <PID_calc+0xe6>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	695a      	ldr	r2, [r3, #20]
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c96:	e014      	b.n	8001cc2 <PID_calc+0x110>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	edd3 7a05 	vldr	s15, [r3, #20]
 8001ca4:	eef1 7a67 	vneg.f32	s15, s15
 8001ca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	d507      	bpl.n	8001cc2 <PID_calc+0x110>
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cb8:	eef1 7a67 	vneg.f32	s15, s15
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001cce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001cd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cf6:	dd04      	ble.n	8001d02 <PID_calc+0x150>
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	691a      	ldr	r2, [r3, #16]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	621a      	str	r2, [r3, #32]
 8001d00:	e094      	b.n	8001e2c <PID_calc+0x27a>
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	ed93 7a08 	vldr	s14, [r3, #32]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d0e:	eef1 7a67 	vneg.f32	s15, s15
 8001d12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	f140 8087 	bpl.w	8001e2c <PID_calc+0x27a>
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d24:	eef1 7a67 	vneg.f32	s15, s15
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	edc3 7a08 	vstr	s15, [r3, #32]
 8001d2e:	e07d      	b.n	8001e2c <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d179      	bne.n	8001e2c <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001d4a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001d8a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001d8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001d98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	ed93 7a03 	vldr	s14, [r3, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	ed93 7a08 	vldr	s14, [r3, #32]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001dca:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001dd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	ed93 7a08 	vldr	s14, [r3, #32]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	edd3 7a04 	vldr	s15, [r3, #16]
 8001dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df6:	dd04      	ble.n	8001e02 <PID_calc+0x250>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	621a      	str	r2, [r3, #32]
 8001e00:	e014      	b.n	8001e2c <PID_calc+0x27a>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	ed93 7a08 	vldr	s14, [r3, #32]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e0e:	eef1 7a67 	vneg.f32	s15, s15
 8001e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1a:	d507      	bpl.n	8001e2c <PID_calc+0x27a>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e22:	eef1 7a67 	vneg.f32	s15, s15
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
}
 8001e30:	ee07 3a90 	vmov	s15, r3
 8001e34:	eeb0 0a67 	vmov.f32	s0, s15
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b084      	sub	sp, #16
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8001e52:	4a12      	ldr	r2, [pc, #72]	@ (8001e9c <PWMInit+0x58>)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8001e58:	4a11      	ldr	r2, [pc, #68]	@ (8001ea0 <PWMInit+0x5c>)
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8001e5e:	4a11      	ldr	r2, [pc, #68]	@ (8001ea4 <PWMInit+0x60>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8001e64:	4a10      	ldr	r2, [pc, #64]	@ (8001ea8 <PWMInit+0x64>)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8001e6a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <PWMInit+0x58>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f004 fdf8 	bl	8006a64 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8001e74:	4b0a      	ldr	r3, [pc, #40]	@ (8001ea0 <PWMInit+0x5c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 fdf3 	bl	8006a64 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8001e7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ea4 <PWMInit+0x60>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f004 fdee 	bl	8006a64 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8001e88:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <PWMInit+0x64>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f004 fde9 	bl	8006a64 <HAL_TIM_Base_Start>
}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000b48 	.word	0x20000b48
 8001ea0:	20000b4c 	.word	0x20000b4c
 8001ea4:	20000b50 	.word	0x20000b50
 8001ea8:	20000b54 	.word	0x20000b54

08001eac <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	e0f1      	b.n	800209c <PWMTimerStarter+0x1f0>
		switch (i) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b0a      	cmp	r3, #10
 8001ebc:	f200 80eb 	bhi.w	8002096 <PWMTimerStarter+0x1ea>
 8001ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ec8 <PWMTimerStarter+0x1c>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001ef5 	.word	0x08001ef5
 8001ecc:	08001f1b 	.word	0x08001f1b
 8001ed0:	08001f41 	.word	0x08001f41
 8001ed4:	08001f67 	.word	0x08001f67
 8001ed8:	08001f8d 	.word	0x08001f8d
 8001edc:	08001fb3 	.word	0x08001fb3
 8001ee0:	08001fd9 	.word	0x08001fd9
 8001ee4:	08001fff 	.word	0x08001fff
 8001ee8:	08002025 	.word	0x08002025
 8001eec:	0800204b 	.word	0x0800204b
 8001ef0:	08002071 	.word	0x08002071
		case 0:
			if (whichPWMisOn[0] == 1) {
 8001ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80020b0 <PWMTimerStarter+0x204>)
 8001ef6:	f993 3000 	ldrsb.w	r3, [r3]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d106      	bne.n	8001f0c <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8001efe:	4b6d      	ldr	r3, [pc, #436]	@ (80020b4 <PWMTimerStarter+0x208>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f004 fe65 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8001f0a:	e0c4      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8001f0c:	4b69      	ldr	r3, [pc, #420]	@ (80020b4 <PWMTimerStarter+0x208>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2100      	movs	r1, #0
 8001f12:	4618      	mov	r0, r3
 8001f14:	f004 ff26 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8001f18:	e0bd      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8001f1a:	4b65      	ldr	r3, [pc, #404]	@ (80020b0 <PWMTimerStarter+0x204>)
 8001f1c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d106      	bne.n	8001f32 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8001f24:	4b63      	ldr	r3, [pc, #396]	@ (80020b4 <PWMTimerStarter+0x208>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2104      	movs	r1, #4
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f004 fe52 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8001f30:	e0b1      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8001f32:	4b60      	ldr	r3, [pc, #384]	@ (80020b4 <PWMTimerStarter+0x208>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2104      	movs	r1, #4
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f004 ff13 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8001f3e:	e0aa      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8001f40:	4b5b      	ldr	r3, [pc, #364]	@ (80020b0 <PWMTimerStarter+0x204>)
 8001f42:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d106      	bne.n	8001f58 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8001f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80020b4 <PWMTimerStarter+0x208>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2108      	movs	r1, #8
 8001f50:	4618      	mov	r0, r3
 8001f52:	f004 fe3f 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8001f56:	e09e      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8001f58:	4b56      	ldr	r3, [pc, #344]	@ (80020b4 <PWMTimerStarter+0x208>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2108      	movs	r1, #8
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f004 ff00 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8001f64:	e097      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8001f66:	4b52      	ldr	r3, [pc, #328]	@ (80020b0 <PWMTimerStarter+0x204>)
 8001f68:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d106      	bne.n	8001f7e <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8001f70:	4b50      	ldr	r3, [pc, #320]	@ (80020b4 <PWMTimerStarter+0x208>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	210c      	movs	r1, #12
 8001f76:	4618      	mov	r0, r3
 8001f78:	f004 fe2c 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8001f7c:	e08b      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8001f7e:	4b4d      	ldr	r3, [pc, #308]	@ (80020b4 <PWMTimerStarter+0x208>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	210c      	movs	r1, #12
 8001f84:	4618      	mov	r0, r3
 8001f86:	f004 feed 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8001f8a:	e084      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8001f8c:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <PWMTimerStarter+0x204>)
 8001f8e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d106      	bne.n	8001fa4 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8001f96:	4b48      	ldr	r3, [pc, #288]	@ (80020b8 <PWMTimerStarter+0x20c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f004 fe19 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8001fa2:	e078      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8001fa4:	4b44      	ldr	r3, [pc, #272]	@ (80020b8 <PWMTimerStarter+0x20c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2100      	movs	r1, #0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f004 feda 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8001fb0:	e071      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8001fb2:	4b3f      	ldr	r3, [pc, #252]	@ (80020b0 <PWMTimerStarter+0x204>)
 8001fb4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d106      	bne.n	8001fca <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8001fbc:	4b3e      	ldr	r3, [pc, #248]	@ (80020b8 <PWMTimerStarter+0x20c>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2104      	movs	r1, #4
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f004 fe06 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8001fc8:	e065      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8001fca:	4b3b      	ldr	r3, [pc, #236]	@ (80020b8 <PWMTimerStarter+0x20c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2104      	movs	r1, #4
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f004 fec7 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8001fd6:	e05e      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8001fd8:	4b35      	ldr	r3, [pc, #212]	@ (80020b0 <PWMTimerStarter+0x204>)
 8001fda:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d106      	bne.n	8001ff0 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8001fe2:	4b35      	ldr	r3, [pc, #212]	@ (80020b8 <PWMTimerStarter+0x20c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2108      	movs	r1, #8
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f004 fdf3 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8001fee:	e052      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8001ff0:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <PWMTimerStarter+0x20c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2108      	movs	r1, #8
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 feb4 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8001ffc:	e04b      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	@ (80020b0 <PWMTimerStarter+0x204>)
 8002000:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8002008:	4b2c      	ldr	r3, [pc, #176]	@ (80020bc <PWMTimerStarter+0x210>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f004 fde0 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8002014:	e03f      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8002016:	4b29      	ldr	r3, [pc, #164]	@ (80020bc <PWMTimerStarter+0x210>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2100      	movs	r1, #0
 800201c:	4618      	mov	r0, r3
 800201e:	f004 fea1 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8002022:	e038      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8002024:	4b22      	ldr	r3, [pc, #136]	@ (80020b0 <PWMTimerStarter+0x204>)
 8002026:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d106      	bne.n	800203c <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 800202e:	4b23      	ldr	r3, [pc, #140]	@ (80020bc <PWMTimerStarter+0x210>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2104      	movs	r1, #4
 8002034:	4618      	mov	r0, r3
 8002036:	f004 fdcd 	bl	8006bd4 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 800203a:	e02c      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 800203c:	4b1f      	ldr	r3, [pc, #124]	@ (80020bc <PWMTimerStarter+0x210>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2104      	movs	r1, #4
 8002042:	4618      	mov	r0, r3
 8002044:	f004 fe8e 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8002048:	e025      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 800204a:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <PWMTimerStarter+0x204>)
 800204c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8002054:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <PWMTimerStarter+0x210>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2108      	movs	r1, #8
 800205a:	4618      	mov	r0, r3
 800205c:	f004 fdba 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8002060:	e019      	b.n	8002096 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8002062:	4b16      	ldr	r3, [pc, #88]	@ (80020bc <PWMTimerStarter+0x210>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2108      	movs	r1, #8
 8002068:	4618      	mov	r0, r3
 800206a:	f004 fe7b 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 800206e:	e012      	b.n	8002096 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8002070:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <PWMTimerStarter+0x204>)
 8002072:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d106      	bne.n	8002088 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 800207a:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <PWMTimerStarter+0x214>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2108      	movs	r1, #8
 8002080:	4618      	mov	r0, r3
 8002082:	f004 fda7 	bl	8006bd4 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8002086:	e005      	b.n	8002094 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8002088:	4b0d      	ldr	r3, [pc, #52]	@ (80020c0 <PWMTimerStarter+0x214>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	2108      	movs	r1, #8
 800208e:	4618      	mov	r0, r3
 8002090:	f004 fe68 	bl	8006d64 <HAL_TIM_PWM_Stop>
			break;
 8002094:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	3301      	adds	r3, #1
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b0a      	cmp	r3, #10
 80020a0:	f77f af0a 	ble.w	8001eb8 <PWMTimerStarter+0xc>
		}
	}
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000b58 	.word	0x20000b58
 80020b4:	20000b48 	.word	0x20000b48
 80020b8:	20000b54 	.word	0x20000b54
 80020bc:	20000b50 	.word	0x20000b50
 80020c0:	20000b4c 	.word	0x20000b4c

080020c4 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 80020c8:	2224      	movs	r2, #36	@ 0x24
 80020ca:	4903      	ldr	r1, [pc, #12]	@ (80020d8 <remote_control_init+0x14>)
 80020cc:	4803      	ldr	r0, [pc, #12]	@ (80020dc <remote_control_init+0x18>)
 80020ce:	f7fe fd6f 	bl	8000bb0 <RC_init>
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000ba0 	.word	0x20000ba0
 80020dc:	20000b7c 	.word	0x20000b7c

080020e0 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 80020e4:	4b02      	ldr	r3, [pc, #8]	@ (80020f0 <get_remote_control_point+0x10>)
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	20000b64 	.word	0x20000b64

080020f4 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 80020fa:	4b44      	ldr	r3, [pc, #272]	@ (800220c <USART3_IRQHandler+0x118>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0320 	and.w	r3, r3, #32
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8002108:	2300      	movs	r3, #0
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	4b3f      	ldr	r3, [pc, #252]	@ (800220c <USART3_IRQHandler+0x118>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	4b3d      	ldr	r3, [pc, #244]	@ (800220c <USART3_IRQHandler+0x118>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 800211e:	e070      	b.n	8002202 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8002120:	4b3b      	ldr	r3, [pc, #236]	@ (8002210 <USART3_IRQHandler+0x11c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b00      	cmp	r3, #0
 800212a:	d06a      	beq.n	8002202 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 800212c:	2300      	movs	r3, #0
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	4b36      	ldr	r3, [pc, #216]	@ (800220c <USART3_IRQHandler+0x118>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	4b34      	ldr	r3, [pc, #208]	@ (800220c <USART3_IRQHandler+0x118>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8002142:	4b34      	ldr	r3, [pc, #208]	@ (8002214 <USART3_IRQHandler+0x120>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d12d      	bne.n	80021ac <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002150:	4b30      	ldr	r3, [pc, #192]	@ (8002214 <USART3_IRQHandler+0x120>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b2f      	ldr	r3, [pc, #188]	@ (8002214 <USART3_IRQHandler+0x120>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8002160:	4b2c      	ldr	r3, [pc, #176]	@ (8002214 <USART3_IRQHandler+0x120>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	b29b      	uxth	r3, r3
 8002168:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800216c:	b29a      	uxth	r2, r3
 800216e:	4b2a      	ldr	r3, [pc, #168]	@ (8002218 <USART3_IRQHandler+0x124>)
 8002170:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8002172:	4b28      	ldr	r3, [pc, #160]	@ (8002214 <USART3_IRQHandler+0x120>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2224      	movs	r2, #36	@ 0x24
 8002178:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 800217a:	4b26      	ldr	r3, [pc, #152]	@ (8002214 <USART3_IRQHandler+0x120>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b24      	ldr	r3, [pc, #144]	@ (8002214 <USART3_IRQHandler+0x120>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8002188:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 800218a:	4b22      	ldr	r3, [pc, #136]	@ (8002214 <USART3_IRQHandler+0x120>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b20      	ldr	r3, [pc, #128]	@ (8002214 <USART3_IRQHandler+0x120>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f042 0201 	orr.w	r2, r2, #1
 8002198:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 800219a:	4b1f      	ldr	r3, [pc, #124]	@ (8002218 <USART3_IRQHandler+0x124>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d12f      	bne.n	8002202 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 80021a2:	491e      	ldr	r1, [pc, #120]	@ (800221c <USART3_IRQHandler+0x128>)
 80021a4:	481e      	ldr	r0, [pc, #120]	@ (8002220 <USART3_IRQHandler+0x12c>)
 80021a6:	f000 f841 	bl	800222c <sbus_to_rc>
}
 80021aa:	e02a      	b.n	8002202 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <USART3_IRQHandler+0x120>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b18      	ldr	r3, [pc, #96]	@ (8002214 <USART3_IRQHandler+0x120>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80021bc:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <USART3_IRQHandler+0x120>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <USART3_IRQHandler+0x124>)
 80021cc:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <USART3_IRQHandler+0x120>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2224      	movs	r2, #36	@ 0x24
 80021d4:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 80021d6:	4b13      	ldr	r3, [pc, #76]	@ (8002224 <USART3_IRQHandler+0x130>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a12      	ldr	r2, [pc, #72]	@ (8002224 <USART3_IRQHandler+0x130>)
 80021dc:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80021e0:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80021e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002214 <USART3_IRQHandler+0x120>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <USART3_IRQHandler+0x120>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f042 0201 	orr.w	r2, r2, #1
 80021f0:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 80021f2:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <USART3_IRQHandler+0x124>)
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d103      	bne.n	8002202 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <USART3_IRQHandler+0x128>)
 80021fc:	480a      	ldr	r0, [pc, #40]	@ (8002228 <USART3_IRQHandler+0x134>)
 80021fe:	f000 f815 	bl	800222c <sbus_to_rc>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200008c4 	.word	0x200008c4
 8002210:	40004800 	.word	0x40004800
 8002214:	20000a14 	.word	0x20000a14
 8002218:	20000bc4 	.word	0x20000bc4
 800221c:	20000b64 	.word	0x20000b64
 8002220:	20000b7c 	.word	0x20000b7c
 8002224:	40026028 	.word	0x40026028
 8002228:	20000ba0 	.word	0x20000ba0

0800222c <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8101 	beq.w	8002440 <sbus_to_rc+0x214>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80fd 	beq.w	8002440 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	b21a      	sxth	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	3301      	adds	r3, #1
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	b21b      	sxth	r3, r3
 800225a:	4313      	orrs	r3, r2
 800225c:	b21b      	sxth	r3, r3
 800225e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002262:	b21a      	sxth	r2, r3
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3301      	adds	r3, #1
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	b2db      	uxtb	r3, r3
 8002270:	08db      	lsrs	r3, r3, #3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	b21a      	sxth	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	3302      	adds	r3, #2
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	015b      	lsls	r3, r3, #5
 8002280:	b21b      	sxth	r3, r3
 8002282:	4313      	orrs	r3, r2
 8002284:	b21b      	sxth	r3, r3
 8002286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800228a:	b21a      	sxth	r2, r3
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3302      	adds	r3, #2
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b2db      	uxtb	r3, r3
 8002298:	099b      	lsrs	r3, r3, #6
 800229a:	b2db      	uxtb	r3, r3
 800229c:	b21a      	sxth	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3303      	adds	r3, #3
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	b2db      	uxtb	r3, r3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	3304      	adds	r3, #4
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	4313      	orrs	r3, r2
 80022bc:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80022be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022c2:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	085b      	lsrs	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3305      	adds	r3, #5
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	01db      	lsls	r3, r3, #7
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	4313      	orrs	r3, r2
 80022e4:	b21b      	sxth	r3, r3
 80022e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	3305      	adds	r3, #5
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	b2da      	uxtb	r2, r3
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3305      	adds	r3, #5
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	b2db      	uxtb	r3, r3
 8002312:	109b      	asrs	r3, r3, #2
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	b2da      	uxtb	r2, r3
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3306      	adds	r3, #6
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	b21a      	sxth	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	3307      	adds	r3, #7
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	b2db      	uxtb	r3, r3
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	b21b      	sxth	r3, r3
 8002336:	4313      	orrs	r3, r2
 8002338:	b21a      	sxth	r2, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3308      	adds	r3, #8
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	b2db      	uxtb	r3, r3
 8002346:	b21a      	sxth	r2, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3309      	adds	r3, #9
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	b21b      	sxth	r3, r3
 8002354:	4313      	orrs	r3, r2
 8002356:	b21a      	sxth	r2, r3
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	330a      	adds	r3, #10
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	b2db      	uxtb	r3, r3
 8002364:	b21a      	sxth	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	330b      	adds	r3, #11
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	b21b      	sxth	r3, r3
 8002372:	4313      	orrs	r3, r2
 8002374:	b21a      	sxth	r2, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	330c      	adds	r3, #12
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	330d      	adds	r3, #13
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	330e      	adds	r3, #14
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	b2db      	uxtb	r3, r3
 800239a:	b21a      	sxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	330f      	adds	r3, #15
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	021b      	lsls	r3, r3, #8
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	4313      	orrs	r3, r2
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3310      	adds	r3, #16
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	b21a      	sxth	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3311      	adds	r3, #17
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	4313      	orrs	r3, r2
 80023ca:	b21a      	sxth	r2, r3
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	b29b      	uxth	r3, r3
 80023da:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80023de:	b29b      	uxth	r3, r3
 80023e0:	b21a      	sxth	r2, r3
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80023ec:	b21b      	sxth	r3, r3
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002402:	b21b      	sxth	r3, r3
 8002404:	b29b      	uxth	r3, r3
 8002406:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800240a:	b29b      	uxth	r3, r3
 800240c:	b21a      	sxth	r2, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002418:	b21b      	sxth	r3, r3
 800241a:	b29b      	uxth	r3, r3
 800241c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002420:	b29b      	uxth	r3, r3
 8002422:	b21a      	sxth	r2, r3
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800242e:	b21b      	sxth	r3, r3
 8002430:	b29b      	uxth	r3, r3
 8002432:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002436:	b29b      	uxth	r3, r3
 8002438:	b21a      	sxth	r2, r3
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	811a      	strh	r2, [r3, #8]
 800243e:	e000      	b.n	8002442 <sbus_to_rc+0x216>
        return;
 8002440:	bf00      	nop
}
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 8002452:	4b85      	ldr	r3, [pc, #532]	@ (8002668 <RCkeysRefresh+0x21c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	7d1a      	ldrb	r2, [r3, #20]
 8002458:	7d5b      	ldrb	r3, [r3, #21]
 800245a:	021b      	lsls	r3, r3, #8
 800245c:	4313      	orrs	r3, r2
 800245e:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 8002460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	da07      	bge.n	8002478 <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 8002468:	4b80      	ldr	r3, [pc, #512]	@ (800266c <RCkeysRefresh+0x220>)
 800246a:	2201      	movs	r2, #1
 800246c:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8002474:	80fb      	strh	r3, [r7, #6]
 8002476:	e002      	b.n	800247e <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 8002478:	4b7c      	ldr	r3, [pc, #496]	@ (800266c <RCkeysRefresh+0x220>)
 800247a:	2200      	movs	r2, #0
 800247c:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002484:	d307      	bcc.n	8002496 <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8002486:	4b79      	ldr	r3, [pc, #484]	@ (800266c <RCkeysRefresh+0x220>)
 8002488:	2201      	movs	r2, #1
 800248a:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8002492:	80fb      	strh	r3, [r7, #6]
 8002494:	e002      	b.n	800249c <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 8002496:	4b75      	ldr	r3, [pc, #468]	@ (800266c <RCkeysRefresh+0x220>)
 8002498:	2200      	movs	r2, #0
 800249a:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 800249c:	88fb      	ldrh	r3, [r7, #6]
 800249e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024a2:	d307      	bcc.n	80024b4 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 80024a4:	4b71      	ldr	r3, [pc, #452]	@ (800266c <RCkeysRefresh+0x220>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80024b0:	80fb      	strh	r3, [r7, #6]
 80024b2:	e002      	b.n	80024ba <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 80024b4:	4b6d      	ldr	r3, [pc, #436]	@ (800266c <RCkeysRefresh+0x220>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 80024ba:	88fb      	ldrh	r3, [r7, #6]
 80024bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c0:	d307      	bcc.n	80024d2 <RCkeysRefresh+0x86>
		pc_control.x = 1;
 80024c2:	4b6a      	ldr	r3, [pc, #424]	@ (800266c <RCkeysRefresh+0x220>)
 80024c4:	2201      	movs	r2, #1
 80024c6:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 80024c8:	88fb      	ldrh	r3, [r7, #6]
 80024ca:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80024ce:	80fb      	strh	r3, [r7, #6]
 80024d0:	e002      	b.n	80024d8 <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 80024d2:	4b66      	ldr	r3, [pc, #408]	@ (800266c <RCkeysRefresh+0x220>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 80024d8:	88fb      	ldrh	r3, [r7, #6]
 80024da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80024de:	d307      	bcc.n	80024f0 <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 80024e0:	4b62      	ldr	r3, [pc, #392]	@ (800266c <RCkeysRefresh+0x220>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80024ec:	80fb      	strh	r3, [r7, #6]
 80024ee:	e002      	b.n	80024f6 <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 80024f0:	4b5e      	ldr	r3, [pc, #376]	@ (800266c <RCkeysRefresh+0x220>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024fc:	d307      	bcc.n	800250e <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 80024fe:	4b5b      	ldr	r3, [pc, #364]	@ (800266c <RCkeysRefresh+0x220>)
 8002500:	2201      	movs	r2, #1
 8002502:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8002504:	88fb      	ldrh	r3, [r7, #6]
 8002506:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800250a:	80fb      	strh	r3, [r7, #6]
 800250c:	e002      	b.n	8002514 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 800250e:	4b57      	ldr	r3, [pc, #348]	@ (800266c <RCkeysRefresh+0x220>)
 8002510:	2200      	movs	r2, #0
 8002512:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800251a:	d307      	bcc.n	800252c <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 800251c:	4b53      	ldr	r3, [pc, #332]	@ (800266c <RCkeysRefresh+0x220>)
 800251e:	2201      	movs	r2, #1
 8002520:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002528:	80fb      	strh	r3, [r7, #6]
 800252a:	e002      	b.n	8002532 <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 800252c:	4b4f      	ldr	r3, [pc, #316]	@ (800266c <RCkeysRefresh+0x220>)
 800252e:	2200      	movs	r2, #0
 8002530:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 8002532:	88fb      	ldrh	r3, [r7, #6]
 8002534:	2bff      	cmp	r3, #255	@ 0xff
 8002536:	d907      	bls.n	8002548 <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 8002538:	4b4c      	ldr	r3, [pc, #304]	@ (800266c <RCkeysRefresh+0x220>)
 800253a:	2201      	movs	r2, #1
 800253c:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002544:	80fb      	strh	r3, [r7, #6]
 8002546:	e002      	b.n	800254e <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 8002548:	4b48      	ldr	r3, [pc, #288]	@ (800266c <RCkeysRefresh+0x220>)
 800254a:	2200      	movs	r2, #0
 800254c:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 800254e:	88fb      	ldrh	r3, [r7, #6]
 8002550:	2b7f      	cmp	r3, #127	@ 0x7f
 8002552:	d906      	bls.n	8002562 <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8002554:	4b45      	ldr	r3, [pc, #276]	@ (800266c <RCkeysRefresh+0x220>)
 8002556:	2201      	movs	r2, #1
 8002558:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	3b80      	subs	r3, #128	@ 0x80
 800255e:	80fb      	strh	r3, [r7, #6]
 8002560:	e002      	b.n	8002568 <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 8002562:	4b42      	ldr	r3, [pc, #264]	@ (800266c <RCkeysRefresh+0x220>)
 8002564:	2200      	movs	r2, #0
 8002566:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	2b3f      	cmp	r3, #63	@ 0x3f
 800256c:	d906      	bls.n	800257c <RCkeysRefresh+0x130>
		pc_control.q = 1;
 800256e:	4b3f      	ldr	r3, [pc, #252]	@ (800266c <RCkeysRefresh+0x220>)
 8002570:	2201      	movs	r2, #1
 8002572:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	3b40      	subs	r3, #64	@ 0x40
 8002578:	80fb      	strh	r3, [r7, #6]
 800257a:	e002      	b.n	8002582 <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 800257c:	4b3b      	ldr	r3, [pc, #236]	@ (800266c <RCkeysRefresh+0x220>)
 800257e:	2200      	movs	r2, #0
 8002580:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	2b1f      	cmp	r3, #31
 8002586:	d906      	bls.n	8002596 <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8002588:	4b38      	ldr	r3, [pc, #224]	@ (800266c <RCkeysRefresh+0x220>)
 800258a:	2201      	movs	r2, #1
 800258c:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 800258e:	88fb      	ldrh	r3, [r7, #6]
 8002590:	3b20      	subs	r3, #32
 8002592:	80fb      	strh	r3, [r7, #6]
 8002594:	e002      	b.n	800259c <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 8002596:	4b35      	ldr	r3, [pc, #212]	@ (800266c <RCkeysRefresh+0x220>)
 8002598:	2200      	movs	r2, #0
 800259a:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 800259c:	88fb      	ldrh	r3, [r7, #6]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	d906      	bls.n	80025b0 <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 80025a2:	4b32      	ldr	r3, [pc, #200]	@ (800266c <RCkeysRefresh+0x220>)
 80025a4:	2201      	movs	r2, #1
 80025a6:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 80025a8:	88fb      	ldrh	r3, [r7, #6]
 80025aa:	3b10      	subs	r3, #16
 80025ac:	80fb      	strh	r3, [r7, #6]
 80025ae:	e002      	b.n	80025b6 <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 80025b0:	4b2e      	ldr	r3, [pc, #184]	@ (800266c <RCkeysRefresh+0x220>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 80025b6:	88fb      	ldrh	r3, [r7, #6]
 80025b8:	2b07      	cmp	r3, #7
 80025ba:	d906      	bls.n	80025ca <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 80025bc:	4b2b      	ldr	r3, [pc, #172]	@ (800266c <RCkeysRefresh+0x220>)
 80025be:	2201      	movs	r2, #1
 80025c0:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	3b08      	subs	r3, #8
 80025c6:	80fb      	strh	r3, [r7, #6]
 80025c8:	e002      	b.n	80025d0 <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 80025ca:	4b28      	ldr	r3, [pc, #160]	@ (800266c <RCkeysRefresh+0x220>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 80025d0:	88fb      	ldrh	r3, [r7, #6]
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d906      	bls.n	80025e4 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 80025d6:	4b25      	ldr	r3, [pc, #148]	@ (800266c <RCkeysRefresh+0x220>)
 80025d8:	2201      	movs	r2, #1
 80025da:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	3b04      	subs	r3, #4
 80025e0:	80fb      	strh	r3, [r7, #6]
 80025e2:	e002      	b.n	80025ea <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 80025e4:	4b21      	ldr	r3, [pc, #132]	@ (800266c <RCkeysRefresh+0x220>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d906      	bls.n	80025fe <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 80025f0:	4b1e      	ldr	r3, [pc, #120]	@ (800266c <RCkeysRefresh+0x220>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 80025f6:	88fb      	ldrh	r3, [r7, #6]
 80025f8:	3b02      	subs	r3, #2
 80025fa:	80fb      	strh	r3, [r7, #6]
 80025fc:	e002      	b.n	8002604 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 80025fe:	4b1b      	ldr	r3, [pc, #108]	@ (800266c <RCkeysRefresh+0x220>)
 8002600:	2200      	movs	r2, #0
 8002602:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <RCkeysRefresh+0x220>)
 800260c:	2201      	movs	r2, #1
 800260e:	731a      	strb	r2, [r3, #12]
 8002610:	e002      	b.n	8002618 <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 8002612:	4b16      	ldr	r3, [pc, #88]	@ (800266c <RCkeysRefresh+0x220>)
 8002614:	2200      	movs	r2, #0
 8002616:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 8002618:	4b13      	ldr	r3, [pc, #76]	@ (8002668 <RCkeysRefresh+0x21c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002620:	b21a      	sxth	r2, r3
 8002622:	4b12      	ldr	r3, [pc, #72]	@ (800266c <RCkeysRefresh+0x220>)
 8002624:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 8002626:	4b10      	ldr	r3, [pc, #64]	@ (8002668 <RCkeysRefresh+0x21c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800262e:	b21a      	sxth	r2, r3
 8002630:	4b0e      	ldr	r3, [pc, #56]	@ (800266c <RCkeysRefresh+0x220>)
 8002632:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 8002634:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <RCkeysRefresh+0x21c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800263c:	b21a      	sxth	r2, r3
 800263e:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <RCkeysRefresh+0x220>)
 8002640:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <RCkeysRefresh+0x21c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	7c9b      	ldrb	r3, [r3, #18]
 8002648:	b25a      	sxtb	r2, r3
 800264a:	4b08      	ldr	r3, [pc, #32]	@ (800266c <RCkeysRefresh+0x220>)
 800264c:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 800264e:	4b06      	ldr	r3, [pc, #24]	@ (8002668 <RCkeysRefresh+0x21c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	7cdb      	ldrb	r3, [r3, #19]
 8002654:	b25a      	sxtb	r2, r3
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <RCkeysRefresh+0x220>)
 8002658:	71da      	strb	r2, [r3, #7]
}
 800265a:	bf00      	nop
 800265c:	370c      	adds	r7, #12
 800265e:	46bd      	mov	sp, r7
 8002660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002664:	4770      	bx	lr
 8002666:	bf00      	nop
 8002668:	20000018 	.word	0x20000018
 800266c:	20000374 	.word	0x20000374

08002670 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
 800267a:	4b12      	ldr	r3, [pc, #72]	@ (80026c4 <HAL_MspInit+0x54>)
 800267c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800267e:	4a11      	ldr	r2, [pc, #68]	@ (80026c4 <HAL_MspInit+0x54>)
 8002680:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002684:	6453      	str	r3, [r2, #68]	@ 0x44
 8002686:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <HAL_MspInit+0x54>)
 8002688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268e:	607b      	str	r3, [r7, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	603b      	str	r3, [r7, #0]
 8002696:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <HAL_MspInit+0x54>)
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	4a0a      	ldr	r2, [pc, #40]	@ (80026c4 <HAL_MspInit+0x54>)
 800269c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026a2:	4b08      	ldr	r3, [pc, #32]	@ (80026c4 <HAL_MspInit+0x54>)
 80026a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	210f      	movs	r1, #15
 80026b2:	f06f 0001 	mvn.w	r0, #1
 80026b6:	f001 fda4 	bl	8004202 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800

080026c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	@ 0x30
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002810 <HAL_CAN_MspInit+0x148>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d13d      	bne.n	8002766 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80026ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002814 <HAL_CAN_MspInit+0x14c>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	4a48      	ldr	r2, [pc, #288]	@ (8002814 <HAL_CAN_MspInit+0x14c>)
 80026f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80026f4:	4b47      	ldr	r3, [pc, #284]	@ (8002814 <HAL_CAN_MspInit+0x14c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10d      	bne.n	8002718 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	4b45      	ldr	r3, [pc, #276]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	4a44      	ldr	r2, [pc, #272]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 8002706:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800270a:	6413      	str	r3, [r2, #64]	@ 0x40
 800270c:	4b42      	ldr	r3, [pc, #264]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 800270e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002718:	2300      	movs	r3, #0
 800271a:	617b      	str	r3, [r7, #20]
 800271c:	4b3e      	ldr	r3, [pc, #248]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	4a3d      	ldr	r2, [pc, #244]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 8002722:	f043 0308 	orr.w	r3, r3, #8
 8002726:	6313      	str	r3, [r2, #48]	@ 0x30
 8002728:	4b3b      	ldr	r3, [pc, #236]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272c:	f003 0308 	and.w	r3, r3, #8
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002734:	2303      	movs	r3, #3
 8002736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002738:	2302      	movs	r3, #2
 800273a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273c:	2300      	movs	r3, #0
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002740:	2303      	movs	r3, #3
 8002742:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002744:	2309      	movs	r3, #9
 8002746:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002748:	f107 031c 	add.w	r3, r7, #28
 800274c:	4619      	mov	r1, r3
 800274e:	4833      	ldr	r0, [pc, #204]	@ (800281c <HAL_CAN_MspInit+0x154>)
 8002750:	f002 f990 	bl	8004a74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2105      	movs	r1, #5
 8002758:	2014      	movs	r0, #20
 800275a:	f001 fd52 	bl	8004202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800275e:	2014      	movs	r0, #20
 8002760:	f001 fd6b 	bl	800423a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002764:	e04f      	b.n	8002806 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a2d      	ldr	r2, [pc, #180]	@ (8002820 <HAL_CAN_MspInit+0x158>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d14a      	bne.n	8002806 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002770:	2300      	movs	r3, #0
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 8002776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002778:	4a27      	ldr	r2, [pc, #156]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 800277a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800277e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002780:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800278c:	4b21      	ldr	r3, [pc, #132]	@ (8002814 <HAL_CAN_MspInit+0x14c>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3301      	adds	r3, #1
 8002792:	4a20      	ldr	r2, [pc, #128]	@ (8002814 <HAL_CAN_MspInit+0x14c>)
 8002794:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002796:	4b1f      	ldr	r3, [pc, #124]	@ (8002814 <HAL_CAN_MspInit+0x14c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d10d      	bne.n	80027ba <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 80027a8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	4b16      	ldr	r3, [pc, #88]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	4a15      	ldr	r2, [pc, #84]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ca:	4b13      	ldr	r3, [pc, #76]	@ (8002818 <HAL_CAN_MspInit+0x150>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027d6:	2360      	movs	r3, #96	@ 0x60
 80027d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027da:	2302      	movs	r3, #2
 80027dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027de:	2300      	movs	r3, #0
 80027e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e2:	2303      	movs	r3, #3
 80027e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80027e6:	2309      	movs	r3, #9
 80027e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ea:	f107 031c 	add.w	r3, r7, #28
 80027ee:	4619      	mov	r1, r3
 80027f0:	480c      	ldr	r0, [pc, #48]	@ (8002824 <HAL_CAN_MspInit+0x15c>)
 80027f2:	f002 f93f 	bl	8004a74 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80027f6:	2200      	movs	r2, #0
 80027f8:	2105      	movs	r1, #5
 80027fa:	2040      	movs	r0, #64	@ 0x40
 80027fc:	f001 fd01 	bl	8004202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8002800:	2040      	movs	r0, #64	@ 0x40
 8002802:	f001 fd1a 	bl	800423a <HAL_NVIC_EnableIRQ>
}
 8002806:	bf00      	nop
 8002808:	3730      	adds	r7, #48	@ 0x30
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	40006400 	.word	0x40006400
 8002814:	20000bc8 	.word	0x20000bc8
 8002818:	40023800 	.word	0x40023800
 800281c:	40020c00 	.word	0x40020c00
 8002820:	40006800 	.word	0x40006800
 8002824:	40020400 	.word	0x40020400

08002828 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	@ 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a29      	ldr	r2, [pc, #164]	@ (80028ec <HAL_I2C_MspInit+0xc4>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d14b      	bne.n	80028e2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b28      	ldr	r3, [pc, #160]	@ (80028f0 <HAL_I2C_MspInit+0xc8>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002852:	4a27      	ldr	r2, [pc, #156]	@ (80028f0 <HAL_I2C_MspInit+0xc8>)
 8002854:	f043 0304 	orr.w	r3, r3, #4
 8002858:	6313      	str	r3, [r2, #48]	@ 0x30
 800285a:	4b25      	ldr	r3, [pc, #148]	@ (80028f0 <HAL_I2C_MspInit+0xc8>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b21      	ldr	r3, [pc, #132]	@ (80028f0 <HAL_I2C_MspInit+0xc8>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286e:	4a20      	ldr	r2, [pc, #128]	@ (80028f0 <HAL_I2C_MspInit+0xc8>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6313      	str	r3, [r2, #48]	@ 0x30
 8002876:	4b1e      	ldr	r3, [pc, #120]	@ (80028f0 <HAL_I2C_MspInit+0xc8>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002882:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002888:	2312      	movs	r3, #18
 800288a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002890:	2303      	movs	r3, #3
 8002892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002894:	2304      	movs	r3, #4
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4619      	mov	r1, r3
 800289e:	4815      	ldr	r0, [pc, #84]	@ (80028f4 <HAL_I2C_MspInit+0xcc>)
 80028a0:	f002 f8e8 	bl	8004a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80028a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028aa:	2312      	movs	r3, #18
 80028ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028b6:	2304      	movs	r3, #4
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4619      	mov	r1, r3
 80028c0:	480d      	ldr	r0, [pc, #52]	@ (80028f8 <HAL_I2C_MspInit+0xd0>)
 80028c2:	f002 f8d7 	bl	8004a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	4b09      	ldr	r3, [pc, #36]	@ (80028f0 <HAL_I2C_MspInit+0xc8>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	4a08      	ldr	r2, [pc, #32]	@ (80028f0 <HAL_I2C_MspInit+0xc8>)
 80028d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80028d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_I2C_MspInit+0xc8>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80028e2:	bf00      	nop
 80028e4:	3728      	adds	r7, #40	@ 0x28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40005c00 	.word	0x40005c00
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020000 	.word	0x40020000

080028fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b08a      	sub	sp, #40	@ 0x28
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002904:	f107 0314 	add.w	r3, r7, #20
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
 800290c:	605a      	str	r2, [r3, #4]
 800290e:	609a      	str	r2, [r3, #8]
 8002910:	60da      	str	r2, [r3, #12]
 8002912:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a28      	ldr	r2, [pc, #160]	@ (80029bc <HAL_SPI_MspInit+0xc0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d149      	bne.n	80029b2 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	613b      	str	r3, [r7, #16]
 8002922:	4b27      	ldr	r3, [pc, #156]	@ (80029c0 <HAL_SPI_MspInit+0xc4>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002926:	4a26      	ldr	r2, [pc, #152]	@ (80029c0 <HAL_SPI_MspInit+0xc4>)
 8002928:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800292c:	6453      	str	r3, [r2, #68]	@ 0x44
 800292e:	4b24      	ldr	r3, [pc, #144]	@ (80029c0 <HAL_SPI_MspInit+0xc4>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	4b20      	ldr	r3, [pc, #128]	@ (80029c0 <HAL_SPI_MspInit+0xc4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	4a1f      	ldr	r2, [pc, #124]	@ (80029c0 <HAL_SPI_MspInit+0xc4>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	6313      	str	r3, [r2, #48]	@ 0x30
 800294a:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_SPI_MspInit+0xc4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	60fb      	str	r3, [r7, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_SPI_MspInit+0xc4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	4a18      	ldr	r2, [pc, #96]	@ (80029c0 <HAL_SPI_MspInit+0xc4>)
 8002960:	f043 0301 	orr.w	r3, r3, #1
 8002964:	6313      	str	r3, [r2, #48]	@ 0x30
 8002966:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <HAL_SPI_MspInit+0xc4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8002972:	2318      	movs	r3, #24
 8002974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297a:	2300      	movs	r3, #0
 800297c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297e:	2303      	movs	r3, #3
 8002980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002982:	2305      	movs	r3, #5
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002986:	f107 0314 	add.w	r3, r7, #20
 800298a:	4619      	mov	r1, r3
 800298c:	480d      	ldr	r0, [pc, #52]	@ (80029c4 <HAL_SPI_MspInit+0xc8>)
 800298e:	f002 f871 	bl	8004a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002996:	2302      	movs	r3, #2
 8002998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029a2:	2305      	movs	r3, #5
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4619      	mov	r1, r3
 80029ac:	4806      	ldr	r0, [pc, #24]	@ (80029c8 <HAL_SPI_MspInit+0xcc>)
 80029ae:	f002 f861 	bl	8004a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80029b2:	bf00      	nop
 80029b4:	3728      	adds	r7, #40	@ 0x28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40013000 	.word	0x40013000
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020400 	.word	0x40020400
 80029c8:	40020000 	.word	0x40020000

080029cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b14 <HAL_TIM_PWM_MspInit+0x148>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10e      	bne.n	80029fc <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x14c>)
 80029e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e6:	4a4c      	ldr	r2, [pc, #304]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x14c>)
 80029e8:	f043 0301 	orr.w	r3, r3, #1
 80029ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80029ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x14c>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	617b      	str	r3, [r7, #20]
 80029f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80029fa:	e086      	b.n	8002b0a <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM5)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a46      	ldr	r2, [pc, #280]	@ (8002b1c <HAL_TIM_PWM_MspInit+0x150>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d16e      	bne.n	8002ae4 <HAL_TIM_PWM_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	613b      	str	r3, [r7, #16]
 8002a0a:	4b43      	ldr	r3, [pc, #268]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x14c>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0e:	4a42      	ldr	r2, [pc, #264]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x14c>)
 8002a10:	f043 0308 	orr.w	r3, r3, #8
 8002a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a16:	4b40      	ldr	r3, [pc, #256]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x14c>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1a:	f003 0308 	and.w	r3, r3, #8
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8002a22:	4b3f      	ldr	r3, [pc, #252]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a24:	4a3f      	ldr	r2, [pc, #252]	@ (8002b24 <HAL_TIM_PWM_MspInit+0x158>)
 8002a26:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8002a28:	4b3d      	ldr	r3, [pc, #244]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a2a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002a2e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a30:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a32:	2200      	movs	r2, #0
 8002a34:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a36:	4b3a      	ldr	r3, [pc, #232]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002a3c:	4b38      	ldr	r3, [pc, #224]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a42:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a44:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a4a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a4c:	4b34      	ldr	r3, [pc, #208]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a52:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 8002a54:	4b32      	ldr	r3, [pc, #200]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002a5a:	4b31      	ldr	r3, [pc, #196]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a60:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 8002a66:	482e      	ldr	r0, [pc, #184]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a68:	f001 fc02 	bl	8004270 <HAL_DMA_Init>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 8002a72:	f7ff f841 	bl	8001af8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a29      	ldr	r2, [pc, #164]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a7c:	4a28      	ldr	r2, [pc, #160]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x154>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002a82:	4b29      	ldr	r3, [pc, #164]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002a84:	4a29      	ldr	r2, [pc, #164]	@ (8002b2c <HAL_TIM_PWM_MspInit+0x160>)
 8002a86:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8002a88:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002a8a:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8002a8e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a90:	4b25      	ldr	r3, [pc, #148]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002a9c:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002a9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aa2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aa4:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002aa6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002aaa:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002aac:	4b1e      	ldr	r3, [pc, #120]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002aae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002ab2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8002ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002aba:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ac0:	4b19      	ldr	r3, [pc, #100]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8002ac6:	4818      	ldr	r0, [pc, #96]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002ac8:	f001 fbd2 	bl	8004270 <HAL_DMA_Init>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 8002ad2:	f7ff f811 	bl	8001af8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a13      	ldr	r2, [pc, #76]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002ada:	629a      	str	r2, [r3, #40]	@ 0x28
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <HAL_TIM_PWM_MspInit+0x15c>)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ae2:	e012      	b.n	8002b0a <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM8)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a11      	ldr	r2, [pc, #68]	@ (8002b30 <HAL_TIM_PWM_MspInit+0x164>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d10d      	bne.n	8002b0a <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	4b09      	ldr	r3, [pc, #36]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x14c>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af6:	4a08      	ldr	r2, [pc, #32]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x14c>)
 8002af8:	f043 0302 	orr.w	r3, r3, #2
 8002afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002afe:	4b06      	ldr	r3, [pc, #24]	@ (8002b18 <HAL_TIM_PWM_MspInit+0x14c>)
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	60fb      	str	r3, [r7, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
}
 8002b0a:	bf00      	nop
 8002b0c:	3718      	adds	r7, #24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40010000 	.word	0x40010000
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40000c00 	.word	0x40000c00
 8002b20:	200007bc 	.word	0x200007bc
 8002b24:	40026040 	.word	0x40026040
 8002b28:	2000081c 	.word	0x2000081c
 8002b2c:	40026070 	.word	0x40026070
 8002b30:	40010400 	.word	0x40010400

08002b34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2c      	ldr	r2, [pc, #176]	@ (8002bf4 <HAL_TIM_Base_MspInit+0xc0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d13e      	bne.n	8002bc4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002bf8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b56:	4b28      	ldr	r3, [pc, #160]	@ (8002bf8 <HAL_TIM_Base_MspInit+0xc4>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	60fb      	str	r3, [r7, #12]
 8002b60:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002b62:	4b26      	ldr	r3, [pc, #152]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <HAL_TIM_Base_MspInit+0xcc>)
 8002b66:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002b68:	4b24      	ldr	r3, [pc, #144]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002b6a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002b6e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b70:	4b22      	ldr	r3, [pc, #136]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002b72:	2200      	movs	r2, #0
 8002b74:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b76:	4b21      	ldr	r3, [pc, #132]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002b7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b82:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b84:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002b86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b8a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002b8e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b92:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002b94:	4b19      	ldr	r3, [pc, #100]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002b9a:	4b18      	ldr	r3, [pc, #96]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba0:	4b16      	ldr	r3, [pc, #88]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002ba6:	4815      	ldr	r0, [pc, #84]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002ba8:	f001 fb62 	bl	8004270 <HAL_DMA_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002bb2:	f7fe ffa1 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a10      	ldr	r2, [pc, #64]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002bba:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bbc:	4a0f      	ldr	r2, [pc, #60]	@ (8002bfc <HAL_TIM_Base_MspInit+0xc8>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002bc2:	e012      	b.n	8002bea <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a0e      	ldr	r2, [pc, #56]	@ (8002c04 <HAL_TIM_Base_MspInit+0xd0>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d10d      	bne.n	8002bea <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	4b09      	ldr	r3, [pc, #36]	@ (8002bf8 <HAL_TIM_Base_MspInit+0xc4>)
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd6:	4a08      	ldr	r2, [pc, #32]	@ (8002bf8 <HAL_TIM_Base_MspInit+0xc4>)
 8002bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bde:	4b06      	ldr	r3, [pc, #24]	@ (8002bf8 <HAL_TIM_Base_MspInit+0xc4>)
 8002be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40000800 	.word	0x40000800
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	2000075c 	.word	0x2000075c
 8002c00:	400260b8 	.word	0x400260b8
 8002c04:	40014400 	.word	0x40014400

08002c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08e      	sub	sp, #56	@ 0x38
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a6a      	ldr	r2, [pc, #424]	@ (8002dd0 <HAL_TIM_MspPostInit+0x1c8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d11f      	bne.n	8002c6a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	623b      	str	r3, [r7, #32]
 8002c2e:	4b69      	ldr	r3, [pc, #420]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	4a68      	ldr	r2, [pc, #416]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002c34:	f043 0310 	orr.w	r3, r3, #16
 8002c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c3a:	4b66      	ldr	r3, [pc, #408]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	623b      	str	r3, [r7, #32]
 8002c44:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8002c46:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c54:	2300      	movs	r3, #0
 8002c56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c60:	4619      	mov	r1, r3
 8002c62:	485d      	ldr	r0, [pc, #372]	@ (8002dd8 <HAL_TIM_MspPostInit+0x1d0>)
 8002c64:	f001 ff06 	bl	8004a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002c68:	e0ae      	b.n	8002dc8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8002ddc <HAL_TIM_MspPostInit+0x1d4>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d11f      	bne.n	8002cb4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c74:	2300      	movs	r3, #0
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	4b56      	ldr	r3, [pc, #344]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7c:	4a55      	ldr	r2, [pc, #340]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002c7e:	f043 0308 	orr.w	r3, r3, #8
 8002c82:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c84:	4b53      	ldr	r3, [pc, #332]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	f003 0308 	and.w	r3, r3, #8
 8002c8c:	61fb      	str	r3, [r7, #28]
 8002c8e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002c90:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c96:	2302      	movs	r3, #2
 8002c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002caa:	4619      	mov	r1, r3
 8002cac:	484c      	ldr	r0, [pc, #304]	@ (8002de0 <HAL_TIM_MspPostInit+0x1d8>)
 8002cae:	f001 fee1 	bl	8004a74 <HAL_GPIO_Init>
}
 8002cb2:	e089      	b.n	8002dc8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a4a      	ldr	r2, [pc, #296]	@ (8002de4 <HAL_TIM_MspPostInit+0x1dc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d11f      	bne.n	8002cfe <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	4b44      	ldr	r3, [pc, #272]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc6:	4a43      	ldr	r2, [pc, #268]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002cc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cce:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8002cda:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002cec:	2302      	movs	r3, #2
 8002cee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	483c      	ldr	r0, [pc, #240]	@ (8002de8 <HAL_TIM_MspPostInit+0x1e0>)
 8002cf8:	f001 febc 	bl	8004a74 <HAL_GPIO_Init>
}
 8002cfc:	e064      	b.n	8002dc8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3a      	ldr	r2, [pc, #232]	@ (8002dec <HAL_TIM_MspPostInit+0x1e4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d13c      	bne.n	8002d82 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	4b31      	ldr	r3, [pc, #196]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	4a30      	ldr	r2, [pc, #192]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d16:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d18:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	4a29      	ldr	r2, [pc, #164]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002d2e:	f043 0304 	orr.w	r3, r3, #4
 8002d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d34:	4b27      	ldr	r3, [pc, #156]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8002d40:	23c0      	movs	r3, #192	@ 0xc0
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d50:	2303      	movs	r3, #3
 8002d52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4825      	ldr	r0, [pc, #148]	@ (8002df0 <HAL_TIM_MspPostInit+0x1e8>)
 8002d5c:	f001 fe8a 	bl	8004a74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d60:	2340      	movs	r3, #64	@ 0x40
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d64:	2302      	movs	r3, #2
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002d70:	2303      	movs	r3, #3
 8002d72:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d78:	4619      	mov	r1, r3
 8002d7a:	481e      	ldr	r0, [pc, #120]	@ (8002df4 <HAL_TIM_MspPostInit+0x1ec>)
 8002d7c:	f001 fe7a 	bl	8004a74 <HAL_GPIO_Init>
}
 8002d80:	e022      	b.n	8002dc8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a1c      	ldr	r2, [pc, #112]	@ (8002df8 <HAL_TIM_MspPostInit+0x1f0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d11d      	bne.n	8002dc8 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	4b10      	ldr	r3, [pc, #64]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d94:	4a0f      	ldr	r2, [pc, #60]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002d96:	f043 0320 	orr.w	r3, r3, #32
 8002d9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002dd4 <HAL_TIM_MspPostInit+0x1cc>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002da8:	2340      	movs	r3, #64	@ 0x40
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dac:	2302      	movs	r3, #2
 8002dae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db0:	2301      	movs	r3, #1
 8002db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002db4:	2302      	movs	r3, #2
 8002db6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002db8:	2303      	movs	r3, #3
 8002dba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002dbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480e      	ldr	r0, [pc, #56]	@ (8002dfc <HAL_TIM_MspPostInit+0x1f4>)
 8002dc4:	f001 fe56 	bl	8004a74 <HAL_GPIO_Init>
}
 8002dc8:	bf00      	nop
 8002dca:	3738      	adds	r7, #56	@ 0x38
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40010000 	.word	0x40010000
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	40000800 	.word	0x40000800
 8002de0:	40020c00 	.word	0x40020c00
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40021c00 	.word	0x40021c00
 8002dec:	40010400 	.word	0x40010400
 8002df0:	40022000 	.word	0x40022000
 8002df4:	40020800 	.word	0x40020800
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40021400 	.word	0x40021400

08002e00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08e      	sub	sp, #56	@ 0x38
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a90      	ldr	r2, [pc, #576]	@ (8003060 <HAL_UART_MspInit+0x260>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	f040 80b2 	bne.w	8002f88 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002e24:	2300      	movs	r3, #0
 8002e26:	623b      	str	r3, [r7, #32]
 8002e28:	4b8e      	ldr	r3, [pc, #568]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e2c:	4a8d      	ldr	r2, [pc, #564]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002e2e:	f043 0310 	orr.w	r3, r3, #16
 8002e32:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e34:	4b8b      	ldr	r3, [pc, #556]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	f003 0310 	and.w	r3, r3, #16
 8002e3c:	623b      	str	r3, [r7, #32]
 8002e3e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e40:	2300      	movs	r3, #0
 8002e42:	61fb      	str	r3, [r7, #28]
 8002e44:	4b87      	ldr	r3, [pc, #540]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e48:	4a86      	ldr	r2, [pc, #536]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e50:	4b84      	ldr	r3, [pc, #528]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61bb      	str	r3, [r7, #24]
 8002e60:	4b80      	ldr	r3, [pc, #512]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e64:	4a7f      	ldr	r2, [pc, #508]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6c:	4b7d      	ldr	r3, [pc, #500]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e80:	2300      	movs	r3, #0
 8002e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e84:	2303      	movs	r3, #3
 8002e86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e88:	2307      	movs	r3, #7
 8002e8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e90:	4619      	mov	r1, r3
 8002e92:	4875      	ldr	r0, [pc, #468]	@ (8003068 <HAL_UART_MspInit+0x268>)
 8002e94:	f001 fdee 	bl	8004a74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002eaa:	2307      	movs	r3, #7
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eb2:	4619      	mov	r1, r3
 8002eb4:	486d      	ldr	r0, [pc, #436]	@ (800306c <HAL_UART_MspInit+0x26c>)
 8002eb6:	f001 fddd 	bl	8004a74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002eba:	4b6d      	ldr	r3, [pc, #436]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002ebc:	4a6d      	ldr	r2, [pc, #436]	@ (8003074 <HAL_UART_MspInit+0x274>)
 8002ebe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002ec0:	4b6b      	ldr	r3, [pc, #428]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002ec2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ec6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ec8:	4b69      	ldr	r3, [pc, #420]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ece:	4b68      	ldr	r3, [pc, #416]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ed4:	4b66      	ldr	r3, [pc, #408]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002eda:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002edc:	4b64      	ldr	r3, [pc, #400]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ee2:	4b63      	ldr	r3, [pc, #396]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002ee8:	4b61      	ldr	r3, [pc, #388]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002eee:	4b60      	ldr	r3, [pc, #384]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002ef0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ef4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ef6:	4b5e      	ldr	r3, [pc, #376]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002efc:	485c      	ldr	r0, [pc, #368]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002efe:	f001 f9b7 	bl	8004270 <HAL_DMA_Init>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002f08:	f7fe fdf6 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a58      	ldr	r2, [pc, #352]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002f10:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f12:	4a57      	ldr	r2, [pc, #348]	@ (8003070 <HAL_UART_MspInit+0x270>)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002f18:	4b57      	ldr	r3, [pc, #348]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f1a:	4a58      	ldr	r2, [pc, #352]	@ (800307c <HAL_UART_MspInit+0x27c>)
 8002f1c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002f1e:	4b56      	ldr	r3, [pc, #344]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f20:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002f24:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f26:	4b54      	ldr	r3, [pc, #336]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f2c:	4b52      	ldr	r3, [pc, #328]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f32:	4b51      	ldr	r3, [pc, #324]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f34:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f38:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f40:	4b4d      	ldr	r3, [pc, #308]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f42:	2200      	movs	r2, #0
 8002f44:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002f46:	4b4c      	ldr	r3, [pc, #304]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002f4c:	4b4a      	ldr	r3, [pc, #296]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f4e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f52:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f54:	4b48      	ldr	r3, [pc, #288]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002f5a:	4847      	ldr	r0, [pc, #284]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f5c:	f001 f988 	bl	8004270 <HAL_DMA_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8002f66:	f7fe fdc7 	bl	8001af8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a42      	ldr	r2, [pc, #264]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f70:	4a41      	ldr	r2, [pc, #260]	@ (8003078 <HAL_UART_MspInit+0x278>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002f76:	2200      	movs	r2, #0
 8002f78:	2105      	movs	r1, #5
 8002f7a:	2025      	movs	r0, #37	@ 0x25
 8002f7c:	f001 f941 	bl	8004202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002f80:	2025      	movs	r0, #37	@ 0x25
 8002f82:	f001 f95a 	bl	800423a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002f86:	e11c      	b.n	80031c2 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003080 <HAL_UART_MspInit+0x280>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d17e      	bne.n	8003090 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f92:	2300      	movs	r3, #0
 8002f94:	617b      	str	r3, [r7, #20]
 8002f96:	4b33      	ldr	r3, [pc, #204]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	4a32      	ldr	r2, [pc, #200]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fa2:	4b30      	ldr	r3, [pc, #192]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fbe:	4b29      	ldr	r3, [pc, #164]	@ (8003064 <HAL_UART_MspInit+0x264>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002fca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002fce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fd8:	2303      	movs	r3, #3
 8002fda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fdc:	2307      	movs	r3, #7
 8002fde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4827      	ldr	r0, [pc, #156]	@ (8003084 <HAL_UART_MspInit+0x284>)
 8002fe8:	f001 fd44 	bl	8004a74 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002fec:	4b26      	ldr	r3, [pc, #152]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8002fee:	4a27      	ldr	r2, [pc, #156]	@ (800308c <HAL_UART_MspInit+0x28c>)
 8002ff0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002ff2:	4b25      	ldr	r3, [pc, #148]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8002ff4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002ff8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ffa:	4b23      	ldr	r3, [pc, #140]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003000:	4b21      	ldr	r3, [pc, #132]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8003002:	2200      	movs	r2, #0
 8003004:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003006:	4b20      	ldr	r3, [pc, #128]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8003008:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800300c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800300e:	4b1e      	ldr	r3, [pc, #120]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8003010:	2200      	movs	r2, #0
 8003012:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003014:	4b1c      	ldr	r3, [pc, #112]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800301a:	4b1b      	ldr	r3, [pc, #108]	@ (8003088 <HAL_UART_MspInit+0x288>)
 800301c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003020:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003022:	4b19      	ldr	r3, [pc, #100]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8003024:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003028:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800302a:	4b17      	ldr	r3, [pc, #92]	@ (8003088 <HAL_UART_MspInit+0x288>)
 800302c:	2200      	movs	r2, #0
 800302e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003030:	4815      	ldr	r0, [pc, #84]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8003032:	f001 f91d 	bl	8004270 <HAL_DMA_Init>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <HAL_UART_MspInit+0x240>
      Error_Handler();
 800303c:	f7fe fd5c 	bl	8001af8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a11      	ldr	r2, [pc, #68]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8003044:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003046:	4a10      	ldr	r2, [pc, #64]	@ (8003088 <HAL_UART_MspInit+0x288>)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800304c:	2200      	movs	r2, #0
 800304e:	2105      	movs	r1, #5
 8003050:	2027      	movs	r0, #39	@ 0x27
 8003052:	f001 f8d6 	bl	8004202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003056:	2027      	movs	r0, #39	@ 0x27
 8003058:	f001 f8ef 	bl	800423a <HAL_NVIC_EnableIRQ>
}
 800305c:	e0b1      	b.n	80031c2 <HAL_UART_MspInit+0x3c2>
 800305e:	bf00      	nop
 8003060:	40011000 	.word	0x40011000
 8003064:	40023800 	.word	0x40023800
 8003068:	40020400 	.word	0x40020400
 800306c:	40020000 	.word	0x40020000
 8003070:	20000954 	.word	0x20000954
 8003074:	400264b8 	.word	0x400264b8
 8003078:	200009b4 	.word	0x200009b4
 800307c:	40026440 	.word	0x40026440
 8003080:	40004800 	.word	0x40004800
 8003084:	40020800 	.word	0x40020800
 8003088:	20000a14 	.word	0x20000a14
 800308c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a4d      	ldr	r2, [pc, #308]	@ (80031cc <HAL_UART_MspInit+0x3cc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	f040 8093 	bne.w	80031c2 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	4b4b      	ldr	r3, [pc, #300]	@ (80031d0 <HAL_UART_MspInit+0x3d0>)
 80030a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030a4:	4a4a      	ldr	r2, [pc, #296]	@ (80031d0 <HAL_UART_MspInit+0x3d0>)
 80030a6:	f043 0320 	orr.w	r3, r3, #32
 80030aa:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ac:	4b48      	ldr	r3, [pc, #288]	@ (80031d0 <HAL_UART_MspInit+0x3d0>)
 80030ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	60bb      	str	r3, [r7, #8]
 80030bc:	4b44      	ldr	r3, [pc, #272]	@ (80031d0 <HAL_UART_MspInit+0x3d0>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	4a43      	ldr	r2, [pc, #268]	@ (80031d0 <HAL_UART_MspInit+0x3d0>)
 80030c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80030c8:	4b41      	ldr	r3, [pc, #260]	@ (80031d0 <HAL_UART_MspInit+0x3d0>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030d0:	60bb      	str	r3, [r7, #8]
 80030d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 80030d4:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030da:	2302      	movs	r3, #2
 80030dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030de:	2300      	movs	r3, #0
 80030e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030e2:	2303      	movs	r3, #3
 80030e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80030e6:	2308      	movs	r3, #8
 80030e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80030ee:	4619      	mov	r1, r3
 80030f0:	4838      	ldr	r0, [pc, #224]	@ (80031d4 <HAL_UART_MspInit+0x3d4>)
 80030f2:	f001 fcbf 	bl	8004a74 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80030f6:	4b38      	ldr	r3, [pc, #224]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 80030f8:	4a38      	ldr	r2, [pc, #224]	@ (80031dc <HAL_UART_MspInit+0x3dc>)
 80030fa:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80030fc:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 80030fe:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003102:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003104:	4b34      	ldr	r3, [pc, #208]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 8003106:	2200      	movs	r2, #0
 8003108:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800310a:	4b33      	ldr	r3, [pc, #204]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 800310c:	2200      	movs	r2, #0
 800310e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003110:	4b31      	ldr	r3, [pc, #196]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 8003112:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003116:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003118:	4b2f      	ldr	r3, [pc, #188]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 800311a:	2200      	movs	r2, #0
 800311c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800311e:	4b2e      	ldr	r3, [pc, #184]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 8003120:	2200      	movs	r2, #0
 8003122:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8003124:	4b2c      	ldr	r3, [pc, #176]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 8003126:	2200      	movs	r2, #0
 8003128:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800312a:	4b2b      	ldr	r3, [pc, #172]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 800312c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003130:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003132:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 8003134:	2200      	movs	r2, #0
 8003136:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8003138:	4827      	ldr	r0, [pc, #156]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 800313a:	f001 f899 	bl	8004270 <HAL_DMA_Init>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8003144:	f7fe fcd8 	bl	8001af8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a23      	ldr	r2, [pc, #140]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 800314c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800314e:	4a22      	ldr	r2, [pc, #136]	@ (80031d8 <HAL_UART_MspInit+0x3d8>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8003154:	4b22      	ldr	r3, [pc, #136]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 8003156:	4a23      	ldr	r2, [pc, #140]	@ (80031e4 <HAL_UART_MspInit+0x3e4>)
 8003158:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 800315a:	4b21      	ldr	r3, [pc, #132]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 800315c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003160:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003162:	4b1f      	ldr	r3, [pc, #124]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 8003164:	2240      	movs	r2, #64	@ 0x40
 8003166:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003168:	4b1d      	ldr	r3, [pc, #116]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 800316e:	4b1c      	ldr	r3, [pc, #112]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 8003170:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003174:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003176:	4b1a      	ldr	r3, [pc, #104]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 8003178:	2200      	movs	r2, #0
 800317a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800317c:	4b18      	ldr	r3, [pc, #96]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 800317e:	2200      	movs	r2, #0
 8003180:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003182:	4b17      	ldr	r3, [pc, #92]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 8003184:	2200      	movs	r2, #0
 8003186:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003188:	4b15      	ldr	r3, [pc, #84]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 800318a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800318e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003190:	4b13      	ldr	r3, [pc, #76]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 8003192:	2200      	movs	r2, #0
 8003194:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003196:	4812      	ldr	r0, [pc, #72]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 8003198:	f001 f86a 	bl	8004270 <HAL_DMA_Init>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 80031a2:	f7fe fca9 	bl	8001af8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a0d      	ldr	r2, [pc, #52]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 80031aa:	639a      	str	r2, [r3, #56]	@ 0x38
 80031ac:	4a0c      	ldr	r2, [pc, #48]	@ (80031e0 <HAL_UART_MspInit+0x3e0>)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80031b2:	2200      	movs	r2, #0
 80031b4:	2105      	movs	r1, #5
 80031b6:	2047      	movs	r0, #71	@ 0x47
 80031b8:	f001 f823 	bl	8004202 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80031bc:	2047      	movs	r0, #71	@ 0x47
 80031be:	f001 f83c 	bl	800423a <HAL_NVIC_EnableIRQ>
}
 80031c2:	bf00      	nop
 80031c4:	3738      	adds	r7, #56	@ 0x38
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40011400 	.word	0x40011400
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40021800 	.word	0x40021800
 80031d8:	20000a74 	.word	0x20000a74
 80031dc:	40026428 	.word	0x40026428
 80031e0:	20000ad4 	.word	0x20000ad4
 80031e4:	400264a0 	.word	0x400264a0

080031e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80031ec:	f003 f8c0 	bl	8006370 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80031f0:	bf00      	nop
 80031f2:	e7fd      	b.n	80031f0 <NMI_Handler+0x8>

080031f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <HardFault_Handler+0x4>

080031fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003200:	bf00      	nop
 8003202:	e7fd      	b.n	8003200 <MemManage_Handler+0x4>

08003204 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003208:	bf00      	nop
 800320a:	e7fd      	b.n	8003208 <BusFault_Handler+0x4>

0800320c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003210:	bf00      	nop
 8003212:	e7fd      	b.n	8003210 <UsageFault_Handler+0x4>

08003214 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003226:	f000 f959 	bl	80034dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800322a:	f007 fbef 	bl	800aa0c <xTaskGetSchedulerState>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	d001      	beq.n	8003238 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003234:	f008 fac8 	bl	800b7c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003238:	bf00      	nop
 800323a:	bd80      	pop	{r7, pc}

0800323c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003240:	2008      	movs	r0, #8
 8003242:	f001 fdcd 	bl	8004de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8003246:	4802      	ldr	r0, [pc, #8]	@ (8003250 <EXTI3_IRQHandler+0x14>)
 8003248:	f7fd fdac 	bl	8000da4 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 800324c:	bf00      	nop
 800324e:	bd80      	pop	{r7, pc}
 8003250:	200004ec 	.word	0x200004ec

08003254 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8003258:	2010      	movs	r0, #16
 800325a:	f001 fdc1 	bl	8004de0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800325e:	bf00      	nop
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003268:	4802      	ldr	r0, [pc, #8]	@ (8003274 <DMA1_Stream1_IRQHandler+0x10>)
 800326a:	f001 f999 	bl	80045a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800326e:	bf00      	nop
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	20000a14 	.word	0x20000a14

08003278 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 800327c:	4802      	ldr	r0, [pc, #8]	@ (8003288 <DMA1_Stream2_IRQHandler+0x10>)
 800327e:	f001 f98f 	bl	80045a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003282:	bf00      	nop
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	200007bc 	.word	0x200007bc

0800328c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8003290:	4802      	ldr	r0, [pc, #8]	@ (800329c <DMA1_Stream4_IRQHandler+0x10>)
 8003292:	f001 f985 	bl	80045a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	2000081c 	.word	0x2000081c

080032a0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80032a4:	4802      	ldr	r0, [pc, #8]	@ (80032b0 <CAN1_RX0_IRQHandler+0x10>)
 80032a6:	f000 fca1 	bl	8003bec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	200004f8 	.word	0x200004f8

080032b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80032b8:	4802      	ldr	r0, [pc, #8]	@ (80032c4 <USART1_IRQHandler+0x10>)
 80032ba:	f004 fc55 	bl	8007b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80032be:	bf00      	nop
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	2000087c 	.word	0x2000087c

080032c8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80032cc:	4802      	ldr	r0, [pc, #8]	@ (80032d8 <DMA1_Stream7_IRQHandler+0x10>)
 80032ce:	f001 f967 	bl	80045a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	2000075c 	.word	0x2000075c

080032dc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80032e0:	4802      	ldr	r0, [pc, #8]	@ (80032ec <DMA2_Stream1_IRQHandler+0x10>)
 80032e2:	f001 f95d 	bl	80045a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000a74 	.word	0x20000a74

080032f0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032f4:	4802      	ldr	r0, [pc, #8]	@ (8003300 <DMA2_Stream2_IRQHandler+0x10>)
 80032f6:	f001 f953 	bl	80045a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80032fa:	bf00      	nop
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	200009b4 	.word	0x200009b4

08003304 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8003308:	4802      	ldr	r0, [pc, #8]	@ (8003314 <CAN2_RX0_IRQHandler+0x10>)
 800330a:	f000 fc6f 	bl	8003bec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	20000520 	.word	0x20000520

08003318 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800331c:	4802      	ldr	r0, [pc, #8]	@ (8003328 <DMA2_Stream6_IRQHandler+0x10>)
 800331e:	f001 f93f 	bl	80045a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003322:	bf00      	nop
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000ad4 	.word	0x20000ad4

0800332c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003330:	4802      	ldr	r0, [pc, #8]	@ (800333c <DMA2_Stream7_IRQHandler+0x10>)
 8003332:	f001 f935 	bl	80045a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003336:	bf00      	nop
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	20000954 	.word	0x20000954

08003340 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003344:	4802      	ldr	r0, [pc, #8]	@ (8003350 <USART6_IRQHandler+0x10>)
 8003346:	f004 fc0f 	bl	8007b68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800334a:	bf00      	nop
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	2000090c 	.word	0x2000090c

08003354 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800335c:	4a14      	ldr	r2, [pc, #80]	@ (80033b0 <_sbrk+0x5c>)
 800335e:	4b15      	ldr	r3, [pc, #84]	@ (80033b4 <_sbrk+0x60>)
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003368:	4b13      	ldr	r3, [pc, #76]	@ (80033b8 <_sbrk+0x64>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d102      	bne.n	8003376 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003370:	4b11      	ldr	r3, [pc, #68]	@ (80033b8 <_sbrk+0x64>)
 8003372:	4a12      	ldr	r2, [pc, #72]	@ (80033bc <_sbrk+0x68>)
 8003374:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003376:	4b10      	ldr	r3, [pc, #64]	@ (80033b8 <_sbrk+0x64>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d207      	bcs.n	8003394 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003384:	f008 fd1e 	bl	800bdc4 <__errno>
 8003388:	4603      	mov	r3, r0
 800338a:	220c      	movs	r2, #12
 800338c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800338e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003392:	e009      	b.n	80033a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003394:	4b08      	ldr	r3, [pc, #32]	@ (80033b8 <_sbrk+0x64>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800339a:	4b07      	ldr	r3, [pc, #28]	@ (80033b8 <_sbrk+0x64>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4413      	add	r3, r2
 80033a2:	4a05      	ldr	r2, [pc, #20]	@ (80033b8 <_sbrk+0x64>)
 80033a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80033a6:	68fb      	ldr	r3, [r7, #12]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20020000 	.word	0x20020000
 80033b4:	00000400 	.word	0x00000400
 80033b8:	20000bcc 	.word	0x20000bcc
 80033bc:	20005708 	.word	0x20005708

080033c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80033c4:	4b06      	ldr	r3, [pc, #24]	@ (80033e0 <SystemInit+0x20>)
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	4a05      	ldr	r2, [pc, #20]	@ (80033e0 <SystemInit+0x20>)
 80033cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80033d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80033d4:	bf00      	nop
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000ed00 	.word	0xe000ed00

080033e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80033e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800341c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80033e8:	f7ff ffea 	bl	80033c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80033ec:	480c      	ldr	r0, [pc, #48]	@ (8003420 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80033ee:	490d      	ldr	r1, [pc, #52]	@ (8003424 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80033f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003428 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80033f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033f4:	e002      	b.n	80033fc <LoopCopyDataInit>

080033f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033fa:	3304      	adds	r3, #4

080033fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003400:	d3f9      	bcc.n	80033f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003402:	4a0a      	ldr	r2, [pc, #40]	@ (800342c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003404:	4c0a      	ldr	r4, [pc, #40]	@ (8003430 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003408:	e001      	b.n	800340e <LoopFillZerobss>

0800340a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800340a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800340c:	3204      	adds	r2, #4

0800340e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800340e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003410:	d3fb      	bcc.n	800340a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003412:	f008 fcdd 	bl	800bdd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003416:	f7fd fd33 	bl	8000e80 <main>
  bx  lr    
 800341a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800341c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003420:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003424:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8003428:	0800c82c 	.word	0x0800c82c
  ldr r2, =_sbss
 800342c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8003430:	20005704 	.word	0x20005704

08003434 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003434:	e7fe      	b.n	8003434 <ADC_IRQHandler>
	...

08003438 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800343c:	4b0e      	ldr	r3, [pc, #56]	@ (8003478 <HAL_Init+0x40>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0d      	ldr	r2, [pc, #52]	@ (8003478 <HAL_Init+0x40>)
 8003442:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003446:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003448:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <HAL_Init+0x40>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a0a      	ldr	r2, [pc, #40]	@ (8003478 <HAL_Init+0x40>)
 800344e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003452:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003454:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <HAL_Init+0x40>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a07      	ldr	r2, [pc, #28]	@ (8003478 <HAL_Init+0x40>)
 800345a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003460:	2003      	movs	r0, #3
 8003462:	f000 fec3 	bl	80041ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003466:	200f      	movs	r0, #15
 8003468:	f000 f808 	bl	800347c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800346c:	f7ff f900 	bl	8002670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023c00 	.word	0x40023c00

0800347c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003484:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <HAL_InitTick+0x54>)
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b12      	ldr	r3, [pc, #72]	@ (80034d4 <HAL_InitTick+0x58>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	4619      	mov	r1, r3
 800348e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003492:	fbb3 f3f1 	udiv	r3, r3, r1
 8003496:	fbb2 f3f3 	udiv	r3, r2, r3
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fedb 	bl	8004256 <HAL_SYSTICK_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e00e      	b.n	80034c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d80a      	bhi.n	80034c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034b0:	2200      	movs	r2, #0
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034b8:	f000 fea3 	bl	8004202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034bc:	4a06      	ldr	r2, [pc, #24]	@ (80034d8 <HAL_InitTick+0x5c>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	e000      	b.n	80034c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	2000001c 	.word	0x2000001c
 80034d4:	20000024 	.word	0x20000024
 80034d8:	20000020 	.word	0x20000020

080034dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034e0:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <HAL_IncTick+0x20>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	4b06      	ldr	r3, [pc, #24]	@ (8003500 <HAL_IncTick+0x24>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4413      	add	r3, r2
 80034ec:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <HAL_IncTick+0x24>)
 80034ee:	6013      	str	r3, [r2, #0]
}
 80034f0:	bf00      	nop
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	20000024 	.word	0x20000024
 8003500:	20000bd0 	.word	0x20000bd0

08003504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return uwTick;
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <HAL_GetTick+0x14>)
 800350a:	681b      	ldr	r3, [r3, #0]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000bd0 	.word	0x20000bd0

0800351c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e0ed      	b.n	800370a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d102      	bne.n	8003540 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff f8c4 	bl	80026c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003550:	f7ff ffd8 	bl	8003504 <HAL_GetTick>
 8003554:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003556:	e012      	b.n	800357e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003558:	f7ff ffd4 	bl	8003504 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b0a      	cmp	r3, #10
 8003564:	d90b      	bls.n	800357e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2205      	movs	r2, #5
 8003576:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0c5      	b.n	800370a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d0e5      	beq.n	8003558 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0202 	bic.w	r2, r2, #2
 800359a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800359c:	f7ff ffb2 	bl	8003504 <HAL_GetTick>
 80035a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035a2:	e012      	b.n	80035ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035a4:	f7ff ffae 	bl	8003504 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b0a      	cmp	r3, #10
 80035b0:	d90b      	bls.n	80035ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2205      	movs	r2, #5
 80035c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e09f      	b.n	800370a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e5      	bne.n	80035a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	7e1b      	ldrb	r3, [r3, #24]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d108      	bne.n	80035f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	e007      	b.n	8003602 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003600:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	7e5b      	ldrb	r3, [r3, #25]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d108      	bne.n	800361c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	e007      	b.n	800362c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800362a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	7e9b      	ldrb	r3, [r3, #26]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d108      	bne.n	8003646 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f042 0220 	orr.w	r2, r2, #32
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	e007      	b.n	8003656 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0220 	bic.w	r2, r2, #32
 8003654:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7edb      	ldrb	r3, [r3, #27]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d108      	bne.n	8003670 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0210 	bic.w	r2, r2, #16
 800366c:	601a      	str	r2, [r3, #0]
 800366e:	e007      	b.n	8003680 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0210 	orr.w	r2, r2, #16
 800367e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7f1b      	ldrb	r3, [r3, #28]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d108      	bne.n	800369a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0208 	orr.w	r2, r2, #8
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e007      	b.n	80036aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0208 	bic.w	r2, r2, #8
 80036a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7f5b      	ldrb	r3, [r3, #29]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d108      	bne.n	80036c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f042 0204 	orr.w	r2, r2, #4
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e007      	b.n	80036d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0204 	bic.w	r2, r2, #4
 80036d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	ea42 0103 	orr.w	r1, r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	1e5a      	subs	r2, r3, #1
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003714:	b480      	push	{r7}
 8003716:	b087      	sub	sp, #28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800372a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d003      	beq.n	800373a <HAL_CAN_ConfigFilter+0x26>
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	2b02      	cmp	r3, #2
 8003736:	f040 80be 	bne.w	80038b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800373a:	4b65      	ldr	r3, [pc, #404]	@ (80038d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800373c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003744:	f043 0201 	orr.w	r2, r3, #1
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8003754:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	021b      	lsls	r3, r3, #8
 800376a:	431a      	orrs	r2, r3
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	f003 031f 	and.w	r3, r3, #31
 800377a:	2201      	movs	r2, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	43db      	mvns	r3, r3
 800378c:	401a      	ands	r2, r3
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d123      	bne.n	80037e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	43db      	mvns	r3, r3
 80037a6:	401a      	ands	r2, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80037be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	3248      	adds	r2, #72	@ 0x48
 80037c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80037d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80037da:	6979      	ldr	r1, [r7, #20]
 80037dc:	3348      	adds	r3, #72	@ 0x48
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	440b      	add	r3, r1
 80037e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d122      	bne.n	8003832 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	431a      	orrs	r2, r3
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800380c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	3248      	adds	r2, #72	@ 0x48
 8003812:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003826:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003828:	6979      	ldr	r1, [r7, #20]
 800382a:	3348      	adds	r3, #72	@ 0x48
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	440b      	add	r3, r1
 8003830:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d109      	bne.n	800384e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	43db      	mvns	r3, r3
 8003844:	401a      	ands	r2, r3
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800384c:	e007      	b.n	800385e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	431a      	orrs	r2, r3
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d109      	bne.n	800387a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	43db      	mvns	r3, r3
 8003870:	401a      	ands	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8003878:	e007      	b.n	800388a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	431a      	orrs	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	431a      	orrs	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80038a8:	f023 0201 	bic.w	r2, r3, #1
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e006      	b.n	80038c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	371c      	adds	r7, #28
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr
 80038d0:	40006400 	.word	0x40006400

080038d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d12e      	bne.n	8003946 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0201 	bic.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003900:	f7ff fe00 	bl	8003504 <HAL_GetTick>
 8003904:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003906:	e012      	b.n	800392e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003908:	f7ff fdfc 	bl	8003504 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b0a      	cmp	r3, #10
 8003914:	d90b      	bls.n	800392e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800391a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2205      	movs	r2, #5
 8003926:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e012      	b.n	8003954 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e006      	b.n	8003954 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3710      	adds	r7, #16
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003970:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003972:	7dfb      	ldrb	r3, [r7, #23]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d003      	beq.n	8003980 <HAL_CAN_GetRxMessage+0x24>
 8003978:	7dfb      	ldrb	r3, [r7, #23]
 800397a:	2b02      	cmp	r3, #2
 800397c:	f040 8103 	bne.w	8003b86 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10e      	bne.n	80039a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	f003 0303 	and.w	r3, r3, #3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d116      	bne.n	80039c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003998:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e0f7      	b.n	8003b94 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d107      	bne.n	80039c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e0e8      	b.n	8003b94 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	331b      	adds	r3, #27
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	4413      	add	r3, r2
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0204 	and.w	r2, r3, #4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10c      	bne.n	80039fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	331b      	adds	r3, #27
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	4413      	add	r3, r2
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0d5b      	lsrs	r3, r3, #21
 80039f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	601a      	str	r2, [r3, #0]
 80039f8:	e00b      	b.n	8003a12 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	331b      	adds	r3, #27
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	4413      	add	r3, r2
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	08db      	lsrs	r3, r3, #3
 8003a0a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	331b      	adds	r3, #27
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	4413      	add	r3, r2
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0202 	and.w	r2, r3, #2
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	331b      	adds	r3, #27
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4413      	add	r3, r2
 8003a34:	3304      	adds	r3, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2208      	movs	r2, #8
 8003a44:	611a      	str	r2, [r3, #16]
 8003a46:	e00b      	b.n	8003a60 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	331b      	adds	r3, #27
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 020f 	and.w	r2, r3, #15
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	331b      	adds	r3, #27
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	4413      	add	r3, r2
 8003a6c:	3304      	adds	r3, #4
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	0a1b      	lsrs	r3, r3, #8
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	331b      	adds	r3, #27
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	4413      	add	r3, r2
 8003a84:	3304      	adds	r3, #4
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	0c1b      	lsrs	r3, r3, #16
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	0a1a      	lsrs	r2, r3, #8
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	3301      	adds	r3, #1
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	0c1a      	lsrs	r2, r3, #16
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	3302      	adds	r3, #2
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	011b      	lsls	r3, r3, #4
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	0e1a      	lsrs	r2, r3, #24
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	3303      	adds	r3, #3
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	3304      	adds	r3, #4
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	0a1a      	lsrs	r2, r3, #8
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	3305      	adds	r3, #5
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	4413      	add	r3, r2
 8003b30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	0c1a      	lsrs	r2, r3, #16
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	3306      	adds	r3, #6
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	011b      	lsls	r3, r3, #4
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0e1a      	lsrs	r2, r3, #24
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	3307      	adds	r3, #7
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 0220 	orr.w	r2, r2, #32
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	e007      	b.n	8003b82 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f042 0220 	orr.w	r2, r2, #32
 8003b80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003b82:	2300      	movs	r3, #0
 8003b84:	e006      	b.n	8003b94 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b8a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
  }
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	371c      	adds	r7, #28
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bb0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003bb2:	7bfb      	ldrb	r3, [r7, #15]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d002      	beq.n	8003bbe <HAL_CAN_ActivateNotification+0x1e>
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d109      	bne.n	8003bd2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6959      	ldr	r1, [r3, #20]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	e006      	b.n	8003be0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
  }
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b08a      	sub	sp, #40	@ 0x28
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003c28:	6a3b      	ldr	r3, [r7, #32]
 8003c2a:	f003 0301 	and.w	r3, r3, #1
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d07c      	beq.n	8003d2c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d023      	beq.n	8003c84 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2201      	movs	r2, #1
 8003c42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f983 	bl	8003f5a <HAL_CAN_TxMailbox0CompleteCallback>
 8003c54:	e016      	b.n	8003c84 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d004      	beq.n	8003c6a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c68:	e00c      	b.n	8003c84 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	f003 0308 	and.w	r3, r3, #8
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d004      	beq.n	8003c7e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c7c:	e002      	b.n	8003c84 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f989 	bl	8003f96 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d024      	beq.n	8003cd8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f963 	bl	8003f6e <HAL_CAN_TxMailbox1CompleteCallback>
 8003ca8:	e016      	b.n	8003cd8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d004      	beq.n	8003cbe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbc:	e00c      	b.n	8003cd8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d004      	beq.n	8003cd2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd0:	e002      	b.n	8003cd8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 f969 	bl	8003faa <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d024      	beq.n	8003d2c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003cea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f943 	bl	8003f82 <HAL_CAN_TxMailbox2CompleteCallback>
 8003cfc:	e016      	b.n	8003d2c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d10:	e00c      	b.n	8003d2c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d004      	beq.n	8003d26 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d24:	e002      	b.n	8003d2c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f949 	bl	8003fbe <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003d2c:	6a3b      	ldr	r3, [r7, #32]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d00c      	beq.n	8003d50 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2210      	movs	r2, #16
 8003d4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	f003 0304 	and.w	r3, r3, #4
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d006      	beq.n	8003d72 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2208      	movs	r2, #8
 8003d6a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f930 	bl	8003fd2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003d72:	6a3b      	ldr	r3, [r7, #32]
 8003d74:	f003 0302 	and.w	r3, r3, #2
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d009      	beq.n	8003d90 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	f003 0303 	and.w	r3, r3, #3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fc fd6e 	bl	800086c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00c      	beq.n	8003db4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d007      	beq.n	8003db4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2210      	movs	r2, #16
 8003db2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	f003 0320 	and.w	r3, r3, #32
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d006      	beq.n	8003dd6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2208      	movs	r2, #8
 8003dce:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f912 	bl	8003ffa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	f003 0310 	and.w	r3, r3, #16
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d009      	beq.n	8003df4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 f8f9 	bl	8003fe6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	f003 0310 	and.w	r3, r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d006      	beq.n	8003e16 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f8fc 	bl	800400e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003e16:	6a3b      	ldr	r3, [r7, #32]
 8003e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00b      	beq.n	8003e38 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d006      	beq.n	8003e38 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2208      	movs	r2, #8
 8003e30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8f5 	bl	8004022 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d07b      	beq.n	8003f3a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f003 0304 	and.w	r3, r3, #4
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d072      	beq.n	8003f32 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e4c:	6a3b      	ldr	r3, [r7, #32]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d003      	beq.n	8003e68 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e62:	f043 0301 	orr.w	r3, r3, #1
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d008      	beq.n	8003e84 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	f043 0302 	orr.w	r3, r3, #2
 8003e82:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d003      	beq.n	8003ea0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	f043 0304 	orr.w	r3, r3, #4
 8003e9e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d043      	beq.n	8003f32 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d03e      	beq.n	8003f32 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003eba:	2b60      	cmp	r3, #96	@ 0x60
 8003ebc:	d02b      	beq.n	8003f16 <HAL_CAN_IRQHandler+0x32a>
 8003ebe:	2b60      	cmp	r3, #96	@ 0x60
 8003ec0:	d82e      	bhi.n	8003f20 <HAL_CAN_IRQHandler+0x334>
 8003ec2:	2b50      	cmp	r3, #80	@ 0x50
 8003ec4:	d022      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x320>
 8003ec6:	2b50      	cmp	r3, #80	@ 0x50
 8003ec8:	d82a      	bhi.n	8003f20 <HAL_CAN_IRQHandler+0x334>
 8003eca:	2b40      	cmp	r3, #64	@ 0x40
 8003ecc:	d019      	beq.n	8003f02 <HAL_CAN_IRQHandler+0x316>
 8003ece:	2b40      	cmp	r3, #64	@ 0x40
 8003ed0:	d826      	bhi.n	8003f20 <HAL_CAN_IRQHandler+0x334>
 8003ed2:	2b30      	cmp	r3, #48	@ 0x30
 8003ed4:	d010      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x30c>
 8003ed6:	2b30      	cmp	r3, #48	@ 0x30
 8003ed8:	d822      	bhi.n	8003f20 <HAL_CAN_IRQHandler+0x334>
 8003eda:	2b10      	cmp	r3, #16
 8003edc:	d002      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x2f8>
 8003ede:	2b20      	cmp	r3, #32
 8003ee0:	d005      	beq.n	8003eee <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003ee2:	e01d      	b.n	8003f20 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	f043 0308 	orr.w	r3, r3, #8
 8003eea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003eec:	e019      	b.n	8003f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ef0:	f043 0310 	orr.w	r3, r3, #16
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003ef6:	e014      	b.n	8003f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efa:	f043 0320 	orr.w	r3, r3, #32
 8003efe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f00:	e00f      	b.n	8003f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f0a:	e00a      	b.n	8003f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f12:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f14:	e005      	b.n	8003f22 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003f1e:	e000      	b.n	8003f22 <HAL_CAN_IRQHandler+0x336>
            break;
 8003f20:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	699a      	ldr	r2, [r3, #24]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003f30:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2204      	movs	r2, #4
 8003f38:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f872 	bl	8004036 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003f52:	bf00      	nop
 8003f54:	3728      	adds	r7, #40	@ 0x28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr

08003f82 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003f82:	b480      	push	{r7}
 8003f84:	b083      	sub	sp, #12
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003f8a:	bf00      	nop
 8003f8c:	370c      	adds	r7, #12
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr

08003f96 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003f96:	b480      	push	{r7}
 8003f98:	b083      	sub	sp, #12
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800405c:	4b0c      	ldr	r3, [pc, #48]	@ (8004090 <__NVIC_SetPriorityGrouping+0x44>)
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004068:	4013      	ands	r3, r2
 800406a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004074:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800407c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800407e:	4a04      	ldr	r2, [pc, #16]	@ (8004090 <__NVIC_SetPriorityGrouping+0x44>)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	60d3      	str	r3, [r2, #12]
}
 8004084:	bf00      	nop
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	e000ed00 	.word	0xe000ed00

08004094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004098:	4b04      	ldr	r3, [pc, #16]	@ (80040ac <__NVIC_GetPriorityGrouping+0x18>)
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	f003 0307 	and.w	r3, r3, #7
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	e000ed00 	.word	0xe000ed00

080040b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	4603      	mov	r3, r0
 80040b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	db0b      	blt.n	80040da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040c2:	79fb      	ldrb	r3, [r7, #7]
 80040c4:	f003 021f 	and.w	r2, r3, #31
 80040c8:	4907      	ldr	r1, [pc, #28]	@ (80040e8 <__NVIC_EnableIRQ+0x38>)
 80040ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ce:	095b      	lsrs	r3, r3, #5
 80040d0:	2001      	movs	r0, #1
 80040d2:	fa00 f202 	lsl.w	r2, r0, r2
 80040d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040da:	bf00      	nop
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	e000e100 	.word	0xe000e100

080040ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	6039      	str	r1, [r7, #0]
 80040f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	db0a      	blt.n	8004116 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	b2da      	uxtb	r2, r3
 8004104:	490c      	ldr	r1, [pc, #48]	@ (8004138 <__NVIC_SetPriority+0x4c>)
 8004106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800410a:	0112      	lsls	r2, r2, #4
 800410c:	b2d2      	uxtb	r2, r2
 800410e:	440b      	add	r3, r1
 8004110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004114:	e00a      	b.n	800412c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	b2da      	uxtb	r2, r3
 800411a:	4908      	ldr	r1, [pc, #32]	@ (800413c <__NVIC_SetPriority+0x50>)
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	f003 030f 	and.w	r3, r3, #15
 8004122:	3b04      	subs	r3, #4
 8004124:	0112      	lsls	r2, r2, #4
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	440b      	add	r3, r1
 800412a:	761a      	strb	r2, [r3, #24]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	e000e100 	.word	0xe000e100
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004140:	b480      	push	{r7}
 8004142:	b089      	sub	sp, #36	@ 0x24
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	f1c3 0307 	rsb	r3, r3, #7
 800415a:	2b04      	cmp	r3, #4
 800415c:	bf28      	it	cs
 800415e:	2304      	movcs	r3, #4
 8004160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	3304      	adds	r3, #4
 8004166:	2b06      	cmp	r3, #6
 8004168:	d902      	bls.n	8004170 <NVIC_EncodePriority+0x30>
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3b03      	subs	r3, #3
 800416e:	e000      	b.n	8004172 <NVIC_EncodePriority+0x32>
 8004170:	2300      	movs	r3, #0
 8004172:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	fa02 f303 	lsl.w	r3, r2, r3
 800417e:	43da      	mvns	r2, r3
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	401a      	ands	r2, r3
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004188:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	fa01 f303 	lsl.w	r3, r1, r3
 8004192:	43d9      	mvns	r1, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004198:	4313      	orrs	r3, r2
         );
}
 800419a:	4618      	mov	r0, r3
 800419c:	3724      	adds	r7, #36	@ 0x24
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041b8:	d301      	bcc.n	80041be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041ba:	2301      	movs	r3, #1
 80041bc:	e00f      	b.n	80041de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041be:	4a0a      	ldr	r2, [pc, #40]	@ (80041e8 <SysTick_Config+0x40>)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041c6:	210f      	movs	r1, #15
 80041c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80041cc:	f7ff ff8e 	bl	80040ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041d0:	4b05      	ldr	r3, [pc, #20]	@ (80041e8 <SysTick_Config+0x40>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041d6:	4b04      	ldr	r3, [pc, #16]	@ (80041e8 <SysTick_Config+0x40>)
 80041d8:	2207      	movs	r2, #7
 80041da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	e000e010 	.word	0xe000e010

080041ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff29 	bl	800404c <__NVIC_SetPriorityGrouping>
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af00      	add	r7, sp, #0
 8004208:	4603      	mov	r3, r0
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	607a      	str	r2, [r7, #4]
 800420e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004210:	2300      	movs	r3, #0
 8004212:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004214:	f7ff ff3e 	bl	8004094 <__NVIC_GetPriorityGrouping>
 8004218:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	6978      	ldr	r0, [r7, #20]
 8004220:	f7ff ff8e 	bl	8004140 <NVIC_EncodePriority>
 8004224:	4602      	mov	r2, r0
 8004226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800422a:	4611      	mov	r1, r2
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff ff5d 	bl	80040ec <__NVIC_SetPriority>
}
 8004232:	bf00      	nop
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	4603      	mov	r3, r0
 8004242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004248:	4618      	mov	r0, r3
 800424a:	f7ff ff31 	bl	80040b0 <__NVIC_EnableIRQ>
}
 800424e:	bf00      	nop
 8004250:	3708      	adds	r7, #8
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f7ff ffa2 	bl	80041a8 <SysTick_Config>
 8004264:	4603      	mov	r3, r0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
	...

08004270 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800427c:	f7ff f942 	bl	8003504 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e099      	b.n	80043c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ac:	e00f      	b.n	80042ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042ae:	f7ff f929 	bl	8003504 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b05      	cmp	r3, #5
 80042ba:	d908      	bls.n	80042ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2203      	movs	r2, #3
 80042c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e078      	b.n	80043c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e8      	bne.n	80042ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4b38      	ldr	r3, [pc, #224]	@ (80043c8 <HAL_DMA_Init+0x158>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80042fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004306:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004312:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a1b      	ldr	r3, [r3, #32]
 8004318:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	2b04      	cmp	r3, #4
 8004326:	d107      	bne.n	8004338 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004330:	4313      	orrs	r3, r2
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435e:	2b04      	cmp	r3, #4
 8004360:	d117      	bne.n	8004392 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	4313      	orrs	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00e      	beq.n	8004392 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fb01 	bl	800497c <DMA_CheckFifoParam>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d008      	beq.n	8004392 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2240      	movs	r2, #64	@ 0x40
 8004384:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800438e:	2301      	movs	r3, #1
 8004390:	e016      	b.n	80043c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fab8 	bl	8004910 <DMA_CalcBaseAndBitshift>
 80043a0:	4603      	mov	r3, r0
 80043a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a8:	223f      	movs	r2, #63	@ 0x3f
 80043aa:	409a      	lsls	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	f010803f 	.word	0xf010803f

080043cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	607a      	str	r2, [r7, #4]
 80043d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043ea:	2b01      	cmp	r3, #1
 80043ec:	d101      	bne.n	80043f2 <HAL_DMA_Start_IT+0x26>
 80043ee:	2302      	movs	r3, #2
 80043f0:	e040      	b.n	8004474 <HAL_DMA_Start_IT+0xa8>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d12f      	bne.n	8004466 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2202      	movs	r2, #2
 800440a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	68f8      	ldr	r0, [r7, #12]
 800441c:	f000 fa4a 	bl	80048b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004424:	223f      	movs	r2, #63	@ 0x3f
 8004426:	409a      	lsls	r2, r3
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0216 	orr.w	r2, r2, #22
 800443a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d007      	beq.n	8004454 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f042 0208 	orr.w	r2, r2, #8
 8004452:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0201 	orr.w	r2, r2, #1
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e005      	b.n	8004472 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800446e:	2302      	movs	r3, #2
 8004470:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004472:	7dfb      	ldrb	r3, [r7, #23]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3718      	adds	r7, #24
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800448a:	f7ff f83b 	bl	8003504 <HAL_GetTick>
 800448e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d008      	beq.n	80044ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2280      	movs	r2, #128	@ 0x80
 80044a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e052      	b.n	8004554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f022 0216 	bic.w	r2, r2, #22
 80044bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	695a      	ldr	r2, [r3, #20]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d103      	bne.n	80044de <HAL_DMA_Abort+0x62>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d007      	beq.n	80044ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0208 	bic.w	r2, r2, #8
 80044ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044fe:	e013      	b.n	8004528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004500:	f7ff f800 	bl	8003504 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b05      	cmp	r3, #5
 800450c:	d90c      	bls.n	8004528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2203      	movs	r2, #3
 8004518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e015      	b.n	8004554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d1e4      	bne.n	8004500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	223f      	movs	r2, #63	@ 0x3f
 800453c:	409a      	lsls	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d004      	beq.n	800457a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2280      	movs	r2, #128	@ 0x80
 8004574:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e00c      	b.n	8004594 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2205      	movs	r2, #5
 800457e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 0201 	bic.w	r2, r2, #1
 8004590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80045ac:	4b8e      	ldr	r3, [pc, #568]	@ (80047e8 <HAL_DMA_IRQHandler+0x248>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a8e      	ldr	r2, [pc, #568]	@ (80047ec <HAL_DMA_IRQHandler+0x24c>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	0a9b      	lsrs	r3, r3, #10
 80045b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ca:	2208      	movs	r2, #8
 80045cc:	409a      	lsls	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d01a      	beq.n	800460c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d013      	beq.n	800460c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0204 	bic.w	r2, r2, #4
 80045f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045f8:	2208      	movs	r2, #8
 80045fa:	409a      	lsls	r2, r3
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004610:	2201      	movs	r2, #1
 8004612:	409a      	lsls	r2, r3
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4013      	ands	r3, r2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d012      	beq.n	8004642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462e:	2201      	movs	r2, #1
 8004630:	409a      	lsls	r2, r3
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463a:	f043 0202 	orr.w	r2, r3, #2
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	2204      	movs	r2, #4
 8004648:	409a      	lsls	r2, r3
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4013      	ands	r3, r2
 800464e:	2b00      	cmp	r3, #0
 8004650:	d012      	beq.n	8004678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d00b      	beq.n	8004678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004664:	2204      	movs	r2, #4
 8004666:	409a      	lsls	r2, r3
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004670:	f043 0204 	orr.w	r2, r3, #4
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467c:	2210      	movs	r2, #16
 800467e:	409a      	lsls	r2, r3
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4013      	ands	r3, r2
 8004684:	2b00      	cmp	r3, #0
 8004686:	d043      	beq.n	8004710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d03c      	beq.n	8004710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469a:	2210      	movs	r2, #16
 800469c:	409a      	lsls	r2, r3
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d018      	beq.n	80046e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d108      	bne.n	80046d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d024      	beq.n	8004710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	4798      	blx	r3
 80046ce:	e01f      	b.n	8004710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d01b      	beq.n	8004710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	4798      	blx	r3
 80046e0:	e016      	b.n	8004710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d107      	bne.n	8004700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0208 	bic.w	r2, r2, #8
 80046fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004714:	2220      	movs	r2, #32
 8004716:	409a      	lsls	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 808f 	beq.w	8004840 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0310 	and.w	r3, r3, #16
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 8087 	beq.w	8004840 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004736:	2220      	movs	r2, #32
 8004738:	409a      	lsls	r2, r3
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b05      	cmp	r3, #5
 8004748:	d136      	bne.n	80047b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0216 	bic.w	r2, r2, #22
 8004758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	695a      	ldr	r2, [r3, #20]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	2b00      	cmp	r3, #0
 8004770:	d103      	bne.n	800477a <HAL_DMA_IRQHandler+0x1da>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004776:	2b00      	cmp	r3, #0
 8004778:	d007      	beq.n	800478a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0208 	bic.w	r2, r2, #8
 8004788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478e:	223f      	movs	r2, #63	@ 0x3f
 8004790:	409a      	lsls	r2, r3
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d07e      	beq.n	80048ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
        }
        return;
 80047b6:	e079      	b.n	80048ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d01d      	beq.n	8004802 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10d      	bne.n	80047f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d031      	beq.n	8004840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
 80047e4:	e02c      	b.n	8004840 <HAL_DMA_IRQHandler+0x2a0>
 80047e6:	bf00      	nop
 80047e8:	2000001c 	.word	0x2000001c
 80047ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d023      	beq.n	8004840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
 8004800:	e01e      	b.n	8004840 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10f      	bne.n	8004830 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0210 	bic.w	r2, r2, #16
 800481e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004844:	2b00      	cmp	r3, #0
 8004846:	d032      	beq.n	80048ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d022      	beq.n	800489a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2205      	movs	r2, #5
 8004858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0201 	bic.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	3301      	adds	r3, #1
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	429a      	cmp	r2, r3
 8004876:	d307      	bcc.n	8004888 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1f2      	bne.n	800486c <HAL_DMA_IRQHandler+0x2cc>
 8004886:	e000      	b.n	800488a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004888:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d005      	beq.n	80048ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	4798      	blx	r3
 80048aa:	e000      	b.n	80048ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80048ac:	bf00      	nop
    }
  }
}
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80048d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	2b40      	cmp	r3, #64	@ 0x40
 80048e0:	d108      	bne.n	80048f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80048f2:	e007      	b.n	8004904 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	60da      	str	r2, [r3, #12]
}
 8004904:	bf00      	nop
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004910:	b480      	push	{r7}
 8004912:	b085      	sub	sp, #20
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	b2db      	uxtb	r3, r3
 800491e:	3b10      	subs	r3, #16
 8004920:	4a14      	ldr	r2, [pc, #80]	@ (8004974 <DMA_CalcBaseAndBitshift+0x64>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	091b      	lsrs	r3, r3, #4
 8004928:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800492a:	4a13      	ldr	r2, [pc, #76]	@ (8004978 <DMA_CalcBaseAndBitshift+0x68>)
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	461a      	mov	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b03      	cmp	r3, #3
 800493c:	d909      	bls.n	8004952 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004946:	f023 0303 	bic.w	r3, r3, #3
 800494a:	1d1a      	adds	r2, r3, #4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004950:	e007      	b.n	8004962 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	aaaaaaab 	.word	0xaaaaaaab
 8004978:	0800c7e0 	.word	0x0800c7e0

0800497c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004984:	2300      	movs	r3, #0
 8004986:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d11f      	bne.n	80049d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	2b03      	cmp	r3, #3
 800499a:	d856      	bhi.n	8004a4a <DMA_CheckFifoParam+0xce>
 800499c:	a201      	add	r2, pc, #4	@ (adr r2, 80049a4 <DMA_CheckFifoParam+0x28>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049b5 	.word	0x080049b5
 80049a8:	080049c7 	.word	0x080049c7
 80049ac:	080049b5 	.word	0x080049b5
 80049b0:	08004a4b 	.word	0x08004a4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d046      	beq.n	8004a4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049c4:	e043      	b.n	8004a4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80049ce:	d140      	bne.n	8004a52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049d4:	e03d      	b.n	8004a52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	699b      	ldr	r3, [r3, #24]
 80049da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049de:	d121      	bne.n	8004a24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d837      	bhi.n	8004a56 <DMA_CheckFifoParam+0xda>
 80049e6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ec <DMA_CheckFifoParam+0x70>)
 80049e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ec:	080049fd 	.word	0x080049fd
 80049f0:	08004a03 	.word	0x08004a03
 80049f4:	080049fd 	.word	0x080049fd
 80049f8:	08004a15 	.word	0x08004a15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004a00:	e030      	b.n	8004a64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d025      	beq.n	8004a5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a12:	e022      	b.n	8004a5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a1c:	d11f      	bne.n	8004a5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a22:	e01c      	b.n	8004a5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d903      	bls.n	8004a32 <DMA_CheckFifoParam+0xb6>
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b03      	cmp	r3, #3
 8004a2e:	d003      	beq.n	8004a38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a30:	e018      	b.n	8004a64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	73fb      	strb	r3, [r7, #15]
      break;
 8004a36:	e015      	b.n	8004a64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00e      	beq.n	8004a62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	73fb      	strb	r3, [r7, #15]
      break;
 8004a48:	e00b      	b.n	8004a62 <DMA_CheckFifoParam+0xe6>
      break;
 8004a4a:	bf00      	nop
 8004a4c:	e00a      	b.n	8004a64 <DMA_CheckFifoParam+0xe8>
      break;
 8004a4e:	bf00      	nop
 8004a50:	e008      	b.n	8004a64 <DMA_CheckFifoParam+0xe8>
      break;
 8004a52:	bf00      	nop
 8004a54:	e006      	b.n	8004a64 <DMA_CheckFifoParam+0xe8>
      break;
 8004a56:	bf00      	nop
 8004a58:	e004      	b.n	8004a64 <DMA_CheckFifoParam+0xe8>
      break;
 8004a5a:	bf00      	nop
 8004a5c:	e002      	b.n	8004a64 <DMA_CheckFifoParam+0xe8>
      break;   
 8004a5e:	bf00      	nop
 8004a60:	e000      	b.n	8004a64 <DMA_CheckFifoParam+0xe8>
      break;
 8004a62:	bf00      	nop
    }
  } 
  
  return status; 
 8004a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop

08004a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b089      	sub	sp, #36	@ 0x24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a82:	2300      	movs	r3, #0
 8004a84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	61fb      	str	r3, [r7, #28]
 8004a8e:	e16b      	b.n	8004d68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a90:	2201      	movs	r2, #1
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	697a      	ldr	r2, [r7, #20]
 8004aa0:	4013      	ands	r3, r2
 8004aa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004aa4:	693a      	ldr	r2, [r7, #16]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	f040 815a 	bne.w	8004d62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d005      	beq.n	8004ac6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d130      	bne.n	8004b28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad6:	43db      	mvns	r3, r3
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	4013      	ands	r3, r2
 8004adc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004afc:	2201      	movs	r2, #1
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	43db      	mvns	r3, r3
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	091b      	lsrs	r3, r3, #4
 8004b12:	f003 0201 	and.w	r2, r3, #1
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	69ba      	ldr	r2, [r7, #24]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	69ba      	ldr	r2, [r7, #24]
 8004b26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	2b03      	cmp	r3, #3
 8004b32:	d017      	beq.n	8004b64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	2203      	movs	r2, #3
 8004b40:	fa02 f303 	lsl.w	r3, r2, r3
 8004b44:	43db      	mvns	r3, r3
 8004b46:	69ba      	ldr	r2, [r7, #24]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	005b      	lsls	r3, r3, #1
 8004b54:	fa02 f303 	lsl.w	r3, r2, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69ba      	ldr	r2, [r7, #24]
 8004b62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f003 0303 	and.w	r3, r3, #3
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	d123      	bne.n	8004bb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	08da      	lsrs	r2, r3, #3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	3208      	adds	r2, #8
 8004b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	220f      	movs	r2, #15
 8004b88:	fa02 f303 	lsl.w	r3, r2, r3
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4013      	ands	r3, r2
 8004b92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	69fb      	ldr	r3, [r7, #28]
 8004b9a:	f003 0307 	and.w	r3, r3, #7
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	69ba      	ldr	r2, [r7, #24]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	08da      	lsrs	r2, r3, #3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	3208      	adds	r2, #8
 8004bb2:	69b9      	ldr	r1, [r7, #24]
 8004bb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	2203      	movs	r2, #3
 8004bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f003 0203 	and.w	r2, r3, #3
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 80b4 	beq.w	8004d62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60fb      	str	r3, [r7, #12]
 8004bfe:	4b60      	ldr	r3, [pc, #384]	@ (8004d80 <HAL_GPIO_Init+0x30c>)
 8004c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c02:	4a5f      	ldr	r2, [pc, #380]	@ (8004d80 <HAL_GPIO_Init+0x30c>)
 8004c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c08:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8004d80 <HAL_GPIO_Init+0x30c>)
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c12:	60fb      	str	r3, [r7, #12]
 8004c14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c16:	4a5b      	ldr	r2, [pc, #364]	@ (8004d84 <HAL_GPIO_Init+0x310>)
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	089b      	lsrs	r3, r3, #2
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	43db      	mvns	r3, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4013      	ands	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a52      	ldr	r2, [pc, #328]	@ (8004d88 <HAL_GPIO_Init+0x314>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d02b      	beq.n	8004c9a <HAL_GPIO_Init+0x226>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a51      	ldr	r2, [pc, #324]	@ (8004d8c <HAL_GPIO_Init+0x318>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d025      	beq.n	8004c96 <HAL_GPIO_Init+0x222>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a50      	ldr	r2, [pc, #320]	@ (8004d90 <HAL_GPIO_Init+0x31c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d01f      	beq.n	8004c92 <HAL_GPIO_Init+0x21e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a4f      	ldr	r2, [pc, #316]	@ (8004d94 <HAL_GPIO_Init+0x320>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d019      	beq.n	8004c8e <HAL_GPIO_Init+0x21a>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4e      	ldr	r2, [pc, #312]	@ (8004d98 <HAL_GPIO_Init+0x324>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d013      	beq.n	8004c8a <HAL_GPIO_Init+0x216>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a4d      	ldr	r2, [pc, #308]	@ (8004d9c <HAL_GPIO_Init+0x328>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00d      	beq.n	8004c86 <HAL_GPIO_Init+0x212>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a4c      	ldr	r2, [pc, #304]	@ (8004da0 <HAL_GPIO_Init+0x32c>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <HAL_GPIO_Init+0x20e>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a4b      	ldr	r2, [pc, #300]	@ (8004da4 <HAL_GPIO_Init+0x330>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d101      	bne.n	8004c7e <HAL_GPIO_Init+0x20a>
 8004c7a:	2307      	movs	r3, #7
 8004c7c:	e00e      	b.n	8004c9c <HAL_GPIO_Init+0x228>
 8004c7e:	2308      	movs	r3, #8
 8004c80:	e00c      	b.n	8004c9c <HAL_GPIO_Init+0x228>
 8004c82:	2306      	movs	r3, #6
 8004c84:	e00a      	b.n	8004c9c <HAL_GPIO_Init+0x228>
 8004c86:	2305      	movs	r3, #5
 8004c88:	e008      	b.n	8004c9c <HAL_GPIO_Init+0x228>
 8004c8a:	2304      	movs	r3, #4
 8004c8c:	e006      	b.n	8004c9c <HAL_GPIO_Init+0x228>
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e004      	b.n	8004c9c <HAL_GPIO_Init+0x228>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e002      	b.n	8004c9c <HAL_GPIO_Init+0x228>
 8004c96:	2301      	movs	r3, #1
 8004c98:	e000      	b.n	8004c9c <HAL_GPIO_Init+0x228>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	f002 0203 	and.w	r2, r2, #3
 8004ca2:	0092      	lsls	r2, r2, #2
 8004ca4:	4093      	lsls	r3, r2
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cac:	4935      	ldr	r1, [pc, #212]	@ (8004d84 <HAL_GPIO_Init+0x310>)
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	089b      	lsrs	r3, r3, #2
 8004cb2:	3302      	adds	r3, #2
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cba:	4b3b      	ldr	r3, [pc, #236]	@ (8004da8 <HAL_GPIO_Init+0x334>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cde:	4a32      	ldr	r2, [pc, #200]	@ (8004da8 <HAL_GPIO_Init+0x334>)
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ce4:	4b30      	ldr	r3, [pc, #192]	@ (8004da8 <HAL_GPIO_Init+0x334>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	43db      	mvns	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d003      	beq.n	8004d08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d08:	4a27      	ldr	r2, [pc, #156]	@ (8004da8 <HAL_GPIO_Init+0x334>)
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d0e:	4b26      	ldr	r3, [pc, #152]	@ (8004da8 <HAL_GPIO_Init+0x334>)
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	43db      	mvns	r3, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d32:	4a1d      	ldr	r2, [pc, #116]	@ (8004da8 <HAL_GPIO_Init+0x334>)
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d38:	4b1b      	ldr	r3, [pc, #108]	@ (8004da8 <HAL_GPIO_Init+0x334>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	69ba      	ldr	r2, [r7, #24]
 8004d44:	4013      	ands	r3, r2
 8004d46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d5c:	4a12      	ldr	r2, [pc, #72]	@ (8004da8 <HAL_GPIO_Init+0x334>)
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3301      	adds	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	2b0f      	cmp	r3, #15
 8004d6c:	f67f ae90 	bls.w	8004a90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d70:	bf00      	nop
 8004d72:	bf00      	nop
 8004d74:	3724      	adds	r7, #36	@ 0x24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	40023800 	.word	0x40023800
 8004d84:	40013800 	.word	0x40013800
 8004d88:	40020000 	.word	0x40020000
 8004d8c:	40020400 	.word	0x40020400
 8004d90:	40020800 	.word	0x40020800
 8004d94:	40020c00 	.word	0x40020c00
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40021400 	.word	0x40021400
 8004da0:	40021800 	.word	0x40021800
 8004da4:	40021c00 	.word	0x40021c00
 8004da8:	40013c00 	.word	0x40013c00

08004dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	460b      	mov	r3, r1
 8004db6:	807b      	strh	r3, [r7, #2]
 8004db8:	4613      	mov	r3, r2
 8004dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dbc:	787b      	ldrb	r3, [r7, #1]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004dc2:	887a      	ldrh	r2, [r7, #2]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004dc8:	e003      	b.n	8004dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dca:	887b      	ldrh	r3, [r7, #2]
 8004dcc:	041a      	lsls	r2, r3, #16
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	619a      	str	r2, [r3, #24]
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr
	...

08004de0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	4603      	mov	r3, r0
 8004de8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004dea:	4b08      	ldr	r3, [pc, #32]	@ (8004e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004dec:	695a      	ldr	r2, [r3, #20]
 8004dee:	88fb      	ldrh	r3, [r7, #6]
 8004df0:	4013      	ands	r3, r2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d006      	beq.n	8004e04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004df6:	4a05      	ldr	r2, [pc, #20]	@ (8004e0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004df8:	88fb      	ldrh	r3, [r7, #6]
 8004dfa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004dfc:	88fb      	ldrh	r3, [r7, #6]
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fb ff9c 	bl	8000d3c <HAL_GPIO_EXTI_Callback>
  }
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	40013c00 	.word	0x40013c00

08004e10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d101      	bne.n	8004e22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e12b      	b.n	800507a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d106      	bne.n	8004e3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fd fcf6 	bl	8002828 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2224      	movs	r2, #36	@ 0x24
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0201 	bic.w	r2, r2, #1
 8004e52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e74:	f001 fa54 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 8004e78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4a81      	ldr	r2, [pc, #516]	@ (8005084 <HAL_I2C_Init+0x274>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d807      	bhi.n	8004e94 <HAL_I2C_Init+0x84>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a80      	ldr	r2, [pc, #512]	@ (8005088 <HAL_I2C_Init+0x278>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	bf94      	ite	ls
 8004e8c:	2301      	movls	r3, #1
 8004e8e:	2300      	movhi	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	e006      	b.n	8004ea2 <HAL_I2C_Init+0x92>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4a7d      	ldr	r2, [pc, #500]	@ (800508c <HAL_I2C_Init+0x27c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	bf94      	ite	ls
 8004e9c:	2301      	movls	r3, #1
 8004e9e:	2300      	movhi	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0e7      	b.n	800507a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a78      	ldr	r2, [pc, #480]	@ (8005090 <HAL_I2C_Init+0x280>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	0c9b      	lsrs	r3, r3, #18
 8004eb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68ba      	ldr	r2, [r7, #8]
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	4a6a      	ldr	r2, [pc, #424]	@ (8005084 <HAL_I2C_Init+0x274>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d802      	bhi.n	8004ee4 <HAL_I2C_Init+0xd4>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	e009      	b.n	8004ef8 <HAL_I2C_Init+0xe8>
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	4a69      	ldr	r2, [pc, #420]	@ (8005094 <HAL_I2C_Init+0x284>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	099b      	lsrs	r3, r3, #6
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6812      	ldr	r2, [r2, #0]
 8004efc:	430b      	orrs	r3, r1
 8004efe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	495c      	ldr	r1, [pc, #368]	@ (8005084 <HAL_I2C_Init+0x274>)
 8004f14:	428b      	cmp	r3, r1
 8004f16:	d819      	bhi.n	8004f4c <HAL_I2C_Init+0x13c>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	1e59      	subs	r1, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f26:	1c59      	adds	r1, r3, #1
 8004f28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f2c:	400b      	ands	r3, r1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_I2C_Init+0x138>
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	1e59      	subs	r1, r3, #1
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f40:	3301      	adds	r3, #1
 8004f42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f46:	e051      	b.n	8004fec <HAL_I2C_Init+0x1dc>
 8004f48:	2304      	movs	r3, #4
 8004f4a:	e04f      	b.n	8004fec <HAL_I2C_Init+0x1dc>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d111      	bne.n	8004f78 <HAL_I2C_Init+0x168>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1e58      	subs	r0, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6859      	ldr	r1, [r3, #4]
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	005b      	lsls	r3, r3, #1
 8004f60:	440b      	add	r3, r1
 8004f62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f66:	3301      	adds	r3, #1
 8004f68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	bf0c      	ite	eq
 8004f70:	2301      	moveq	r3, #1
 8004f72:	2300      	movne	r3, #0
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	e012      	b.n	8004f9e <HAL_I2C_Init+0x18e>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	1e58      	subs	r0, r3, #1
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6859      	ldr	r1, [r3, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	440b      	add	r3, r1
 8004f86:	0099      	lsls	r1, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f8e:	3301      	adds	r3, #1
 8004f90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	bf0c      	ite	eq
 8004f98:	2301      	moveq	r3, #1
 8004f9a:	2300      	movne	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d001      	beq.n	8004fa6 <HAL_I2C_Init+0x196>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e022      	b.n	8004fec <HAL_I2C_Init+0x1dc>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10e      	bne.n	8004fcc <HAL_I2C_Init+0x1bc>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1e58      	subs	r0, r3, #1
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6859      	ldr	r1, [r3, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	440b      	add	r3, r1
 8004fbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fc0:	3301      	adds	r3, #1
 8004fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fca:	e00f      	b.n	8004fec <HAL_I2C_Init+0x1dc>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	1e58      	subs	r0, r3, #1
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6859      	ldr	r1, [r3, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	0099      	lsls	r1, r3, #2
 8004fdc:	440b      	add	r3, r1
 8004fde:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fe8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	6809      	ldr	r1, [r1, #0]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69da      	ldr	r2, [r3, #28]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800501a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	6911      	ldr	r1, [r2, #16]
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	68d2      	ldr	r2, [r2, #12]
 8005026:	4311      	orrs	r1, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6812      	ldr	r2, [r2, #0]
 800502c:	430b      	orrs	r3, r1
 800502e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695a      	ldr	r2, [r3, #20]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f042 0201 	orr.w	r2, r2, #1
 800505a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	000186a0 	.word	0x000186a0
 8005088:	001e847f 	.word	0x001e847f
 800508c:	003d08ff 	.word	0x003d08ff
 8005090:	431bde83 	.word	0x431bde83
 8005094:	10624dd3 	.word	0x10624dd3

08005098 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08c      	sub	sp, #48	@ 0x30
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	4608      	mov	r0, r1
 80050a2:	4611      	mov	r1, r2
 80050a4:	461a      	mov	r2, r3
 80050a6:	4603      	mov	r3, r0
 80050a8:	817b      	strh	r3, [r7, #10]
 80050aa:	460b      	mov	r3, r1
 80050ac:	813b      	strh	r3, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050b2:	f7fe fa27 	bl	8003504 <HAL_GetTick>
 80050b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	2b20      	cmp	r3, #32
 80050c2:	f040 8214 	bne.w	80054ee <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	2319      	movs	r3, #25
 80050cc:	2201      	movs	r2, #1
 80050ce:	497b      	ldr	r1, [pc, #492]	@ (80052bc <HAL_I2C_Mem_Read+0x224>)
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 fafb 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80050dc:	2302      	movs	r3, #2
 80050de:	e207      	b.n	80054f0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_I2C_Mem_Read+0x56>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e200      	b.n	80054f0 <HAL_I2C_Mem_Read+0x458>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0301 	and.w	r3, r3, #1
 8005100:	2b01      	cmp	r3, #1
 8005102:	d007      	beq.n	8005114 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005122:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2222      	movs	r2, #34	@ 0x22
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2240      	movs	r2, #64	@ 0x40
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005144:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800514a:	b29a      	uxth	r2, r3
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	4a5b      	ldr	r2, [pc, #364]	@ (80052c0 <HAL_I2C_Mem_Read+0x228>)
 8005154:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005156:	88f8      	ldrh	r0, [r7, #6]
 8005158:	893a      	ldrh	r2, [r7, #8]
 800515a:	8979      	ldrh	r1, [r7, #10]
 800515c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515e:	9301      	str	r3, [sp, #4]
 8005160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	4603      	mov	r3, r0
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f000 f9c8 	bl	80054fc <I2C_RequestMemoryRead>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e1bc      	b.n	80054f0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800517a:	2b00      	cmp	r3, #0
 800517c:	d113      	bne.n	80051a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800517e:	2300      	movs	r3, #0
 8005180:	623b      	str	r3, [r7, #32]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	695b      	ldr	r3, [r3, #20]
 8005188:	623b      	str	r3, [r7, #32]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	623b      	str	r3, [r7, #32]
 8005192:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	e190      	b.n	80054c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d11b      	bne.n	80051e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051be:	2300      	movs	r3, #0
 80051c0:	61fb      	str	r3, [r7, #28]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	61fb      	str	r3, [r7, #28]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051e2:	601a      	str	r2, [r3, #0]
 80051e4:	e170      	b.n	80054c8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d11b      	bne.n	8005226 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800520c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800520e:	2300      	movs	r3, #0
 8005210:	61bb      	str	r3, [r7, #24]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699b      	ldr	r3, [r3, #24]
 8005220:	61bb      	str	r3, [r7, #24]
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	e150      	b.n	80054c8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	699b      	ldr	r3, [r3, #24]
 8005238:	617b      	str	r3, [r7, #20]
 800523a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800523c:	e144      	b.n	80054c8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005242:	2b03      	cmp	r3, #3
 8005244:	f200 80f1 	bhi.w	800542a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524c:	2b01      	cmp	r3, #1
 800524e:	d123      	bne.n	8005298 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005252:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 fb9b 	bl	8005990 <I2C_WaitOnRXNEFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d001      	beq.n	8005264 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e145      	b.n	80054f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691a      	ldr	r2, [r3, #16]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005276:	1c5a      	adds	r2, r3, #1
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005280:	3b01      	subs	r3, #1
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800528c:	b29b      	uxth	r3, r3
 800528e:	3b01      	subs	r3, #1
 8005290:	b29a      	uxth	r2, r3
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005296:	e117      	b.n	80054c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800529c:	2b02      	cmp	r3, #2
 800529e:	d14e      	bne.n	800533e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a6:	2200      	movs	r2, #0
 80052a8:	4906      	ldr	r1, [pc, #24]	@ (80052c4 <HAL_I2C_Mem_Read+0x22c>)
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 fa0e 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d008      	beq.n	80052c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e11a      	b.n	80054f0 <HAL_I2C_Mem_Read+0x458>
 80052ba:	bf00      	nop
 80052bc:	00100002 	.word	0x00100002
 80052c0:	ffff0000 	.word	0xffff0000
 80052c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691a      	ldr	r2, [r3, #16]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691a      	ldr	r2, [r3, #16]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	b2d2      	uxtb	r2, r2
 8005316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005326:	3b01      	subs	r3, #1
 8005328:	b29a      	uxth	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005332:	b29b      	uxth	r3, r3
 8005334:	3b01      	subs	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800533c:	e0c4      	b.n	80054c8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800533e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005340:	9300      	str	r3, [sp, #0]
 8005342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005344:	2200      	movs	r2, #0
 8005346:	496c      	ldr	r1, [pc, #432]	@ (80054f8 <HAL_I2C_Mem_Read+0x460>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f9bf 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e0cb      	b.n	80054f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005366:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005390:	b29b      	uxth	r3, r3
 8005392:	3b01      	subs	r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	2200      	movs	r2, #0
 80053a2:	4955      	ldr	r1, [pc, #340]	@ (80054f8 <HAL_I2C_Mem_Read+0x460>)
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 f991 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e09d      	b.n	80054f0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691a      	ldr	r2, [r3, #16]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d6:	1c5a      	adds	r2, r3, #1
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	3b01      	subs	r3, #1
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	1c5a      	adds	r2, r3, #1
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005412:	3b01      	subs	r3, #1
 8005414:	b29a      	uxth	r2, r3
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541e:	b29b      	uxth	r3, r3
 8005420:	3b01      	subs	r3, #1
 8005422:	b29a      	uxth	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005428:	e04e      	b.n	80054c8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800542a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800542c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 faae 	bl	8005990 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800543a:	2301      	movs	r3, #1
 800543c:	e058      	b.n	80054f0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691a      	ldr	r2, [r3, #16]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b04      	cmp	r3, #4
 800547c:	d124      	bne.n	80054c8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005482:	2b03      	cmp	r3, #3
 8005484:	d107      	bne.n	8005496 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005494:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691a      	ldr	r2, [r3, #16]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a8:	1c5a      	adds	r2, r3, #1
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054b2:	3b01      	subs	r3, #1
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f47f aeb6 	bne.w	800523e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	e000      	b.n	80054f0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
  }
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3728      	adds	r7, #40	@ 0x28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	00010004 	.word	0x00010004

080054fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	4608      	mov	r0, r1
 8005506:	4611      	mov	r1, r2
 8005508:	461a      	mov	r2, r3
 800550a:	4603      	mov	r3, r0
 800550c:	817b      	strh	r3, [r7, #10]
 800550e:	460b      	mov	r3, r1
 8005510:	813b      	strh	r3, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005524:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005534:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	9300      	str	r3, [sp, #0]
 800553a:	6a3b      	ldr	r3, [r7, #32]
 800553c:	2200      	movs	r2, #0
 800553e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f000 f8c2 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d00d      	beq.n	800556a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005558:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800555c:	d103      	bne.n	8005566 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e0aa      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800556a:	897b      	ldrh	r3, [r7, #10]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	461a      	mov	r2, r3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005578:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	4952      	ldr	r1, [pc, #328]	@ (80056c8 <I2C_RequestMemoryRead+0x1cc>)
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 f91d 	bl	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e097      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	695b      	ldr	r3, [r3, #20]
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699b      	ldr	r3, [r3, #24]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055a8:	6a39      	ldr	r1, [r7, #32]
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f9a8 	bl	8005900 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00d      	beq.n	80055d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d107      	bne.n	80055ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e076      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d105      	bne.n	80055e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055d8:	893b      	ldrh	r3, [r7, #8]
 80055da:	b2da      	uxtb	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	611a      	str	r2, [r3, #16]
 80055e2:	e021      	b.n	8005628 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055e4:	893b      	ldrh	r3, [r7, #8]
 80055e6:	0a1b      	lsrs	r3, r3, #8
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055f4:	6a39      	ldr	r1, [r7, #32]
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f000 f982 	bl	8005900 <I2C_WaitOnTXEFlagUntilTimeout>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d00d      	beq.n	800561e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	2b04      	cmp	r3, #4
 8005608:	d107      	bne.n	800561a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005618:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e050      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800561e:	893b      	ldrh	r3, [r7, #8]
 8005620:	b2da      	uxtb	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005628:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800562a:	6a39      	ldr	r1, [r7, #32]
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f000 f967 	bl	8005900 <I2C_WaitOnTXEFlagUntilTimeout>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d00d      	beq.n	8005654 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800563c:	2b04      	cmp	r3, #4
 800563e:	d107      	bne.n	8005650 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800564e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e035      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005662:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	2200      	movs	r2, #0
 800566c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f82b 	bl	80056cc <I2C_WaitOnFlagUntilTimeout>
 8005676:	4603      	mov	r3, r0
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005686:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800568a:	d103      	bne.n	8005694 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005694:	2303      	movs	r3, #3
 8005696:	e013      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005698:	897b      	ldrh	r3, [r7, #10]
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	b2da      	uxtb	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	4906      	ldr	r1, [pc, #24]	@ (80056c8 <I2C_RequestMemoryRead+0x1cc>)
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f886 	bl	80057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e000      	b.n	80056c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	00010002 	.word	0x00010002

080056cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056dc:	e048      	b.n	8005770 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056e4:	d044      	beq.n	8005770 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056e6:	f7fd ff0d 	bl	8003504 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	683a      	ldr	r2, [r7, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d302      	bcc.n	80056fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d139      	bne.n	8005770 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10d      	bne.n	8005722 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695b      	ldr	r3, [r3, #20]
 800570c:	43da      	mvns	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4013      	ands	r3, r2
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf0c      	ite	eq
 8005718:	2301      	moveq	r3, #1
 800571a:	2300      	movne	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	461a      	mov	r2, r3
 8005720:	e00c      	b.n	800573c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	43da      	mvns	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4013      	ands	r3, r2
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	429a      	cmp	r2, r3
 8005740:	d116      	bne.n	8005770 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575c:	f043 0220 	orr.w	r2, r3, #32
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800576c:	2301      	movs	r3, #1
 800576e:	e023      	b.n	80057b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	0c1b      	lsrs	r3, r3, #16
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b01      	cmp	r3, #1
 8005778:	d10d      	bne.n	8005796 <I2C_WaitOnFlagUntilTimeout+0xca>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	43da      	mvns	r2, r3
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	4013      	ands	r3, r2
 8005786:	b29b      	uxth	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf0c      	ite	eq
 800578c:	2301      	moveq	r3, #1
 800578e:	2300      	movne	r3, #0
 8005790:	b2db      	uxtb	r3, r3
 8005792:	461a      	mov	r2, r3
 8005794:	e00c      	b.n	80057b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	43da      	mvns	r2, r3
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4013      	ands	r3, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d093      	beq.n	80056de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b6:	2300      	movs	r3, #0
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3710      	adds	r7, #16
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80057ce:	e071      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057de:	d123      	bne.n	8005828 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2200      	movs	r2, #0
 80057fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2220      	movs	r2, #32
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005814:	f043 0204 	orr.w	r2, r3, #4
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e067      	b.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800582e:	d041      	beq.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005830:	f7fd fe68 	bl	8003504 <HAL_GetTick>
 8005834:	4602      	mov	r2, r0
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	429a      	cmp	r2, r3
 800583e:	d302      	bcc.n	8005846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d136      	bne.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	b2db      	uxtb	r3, r3
 800584c:	2b01      	cmp	r3, #1
 800584e:	d10c      	bne.n	800586a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	43da      	mvns	r2, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4013      	ands	r3, r2
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	bf14      	ite	ne
 8005862:	2301      	movne	r3, #1
 8005864:	2300      	moveq	r3, #0
 8005866:	b2db      	uxtb	r3, r3
 8005868:	e00b      	b.n	8005882 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	43da      	mvns	r2, r3
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	4013      	ands	r3, r2
 8005876:	b29b      	uxth	r3, r3
 8005878:	2b00      	cmp	r3, #0
 800587a:	bf14      	ite	ne
 800587c:	2301      	movne	r3, #1
 800587e:	2300      	moveq	r3, #0
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d016      	beq.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e021      	b.n	80058f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d10c      	bne.n	80058d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	43da      	mvns	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4013      	ands	r3, r2
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf14      	ite	ne
 80058d0:	2301      	movne	r3, #1
 80058d2:	2300      	moveq	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e00b      	b.n	80058f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	43da      	mvns	r2, r3
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4013      	ands	r3, r2
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf14      	ite	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	2300      	moveq	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f47f af6d 	bne.w	80057d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800590c:	e034      	b.n	8005978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f000 f89b 	bl	8005a4a <I2C_IsAcknowledgeFailed>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e034      	b.n	8005988 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005924:	d028      	beq.n	8005978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005926:	f7fd fded 	bl	8003504 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	68ba      	ldr	r2, [r7, #8]
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d11d      	bne.n	8005978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005946:	2b80      	cmp	r3, #128	@ 0x80
 8005948:	d016      	beq.n	8005978 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005964:	f043 0220 	orr.w	r2, r3, #32
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e007      	b.n	8005988 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695b      	ldr	r3, [r3, #20]
 800597e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005982:	2b80      	cmp	r3, #128	@ 0x80
 8005984:	d1c3      	bne.n	800590e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005986:	2300      	movs	r3, #0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800599c:	e049      	b.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d119      	bne.n	80059e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f06f 0210 	mvn.w	r2, #16
 80059b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2220      	movs	r2, #32
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e030      	b.n	8005a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059e0:	f7fd fd90 	bl	8003504 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d302      	bcc.n	80059f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d11d      	bne.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b40      	cmp	r3, #64	@ 0x40
 8005a02:	d016      	beq.n	8005a32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	f043 0220 	orr.w	r2, r3, #32
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e007      	b.n	8005a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a3c:	2b40      	cmp	r3, #64	@ 0x40
 8005a3e:	d1ae      	bne.n	800599e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a4a:	b480      	push	{r7}
 8005a4c:	b083      	sub	sp, #12
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	695b      	ldr	r3, [r3, #20]
 8005a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a60:	d11b      	bne.n	8005a9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	f043 0204 	orr.w	r2, r3, #4
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e000      	b.n	8005a9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b086      	sub	sp, #24
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e267      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 0301 	and.w	r3, r3, #1
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d075      	beq.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ac6:	4b88      	ldr	r3, [pc, #544]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 030c 	and.w	r3, r3, #12
 8005ace:	2b04      	cmp	r3, #4
 8005ad0:	d00c      	beq.n	8005aec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ad2:	4b85      	ldr	r3, [pc, #532]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d112      	bne.n	8005b04 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ade:	4b82      	ldr	r3, [pc, #520]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aea:	d10b      	bne.n	8005b04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aec:	4b7e      	ldr	r3, [pc, #504]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d05b      	beq.n	8005bb0 <HAL_RCC_OscConfig+0x108>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d157      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e242      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b0c:	d106      	bne.n	8005b1c <HAL_RCC_OscConfig+0x74>
 8005b0e:	4b76      	ldr	r3, [pc, #472]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a75      	ldr	r2, [pc, #468]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e01d      	b.n	8005b58 <HAL_RCC_OscConfig+0xb0>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b24:	d10c      	bne.n	8005b40 <HAL_RCC_OscConfig+0x98>
 8005b26:	4b70      	ldr	r3, [pc, #448]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a6f      	ldr	r2, [pc, #444]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b30:	6013      	str	r3, [r2, #0]
 8005b32:	4b6d      	ldr	r3, [pc, #436]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a6c      	ldr	r2, [pc, #432]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e00b      	b.n	8005b58 <HAL_RCC_OscConfig+0xb0>
 8005b40:	4b69      	ldr	r3, [pc, #420]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a68      	ldr	r2, [pc, #416]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b4a:	6013      	str	r3, [r2, #0]
 8005b4c:	4b66      	ldr	r3, [pc, #408]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a65      	ldr	r2, [pc, #404]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d013      	beq.n	8005b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b60:	f7fd fcd0 	bl	8003504 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b68:	f7fd fccc 	bl	8003504 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b64      	cmp	r3, #100	@ 0x64
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e207      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0xc0>
 8005b86:	e014      	b.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b88:	f7fd fcbc 	bl	8003504 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b90:	f7fd fcb8 	bl	8003504 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b64      	cmp	r3, #100	@ 0x64
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e1f3      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ba2:	4b51      	ldr	r3, [pc, #324]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0xe8>
 8005bae:	e000      	b.n	8005bb2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0302 	and.w	r3, r3, #2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d063      	beq.n	8005c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 030c 	and.w	r3, r3, #12
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00b      	beq.n	8005be2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bca:	4b47      	ldr	r3, [pc, #284]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005bd2:	2b08      	cmp	r3, #8
 8005bd4:	d11c      	bne.n	8005c10 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd6:	4b44      	ldr	r3, [pc, #272]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d116      	bne.n	8005c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005be2:	4b41      	ldr	r3, [pc, #260]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <HAL_RCC_OscConfig+0x152>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d001      	beq.n	8005bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e1c7      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	00db      	lsls	r3, r3, #3
 8005c08:	4937      	ldr	r1, [pc, #220]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c0e:	e03a      	b.n	8005c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d020      	beq.n	8005c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c18:	4b34      	ldr	r3, [pc, #208]	@ (8005cec <HAL_RCC_OscConfig+0x244>)
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1e:	f7fd fc71 	bl	8003504 <HAL_GetTick>
 8005c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c24:	e008      	b.n	8005c38 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c26:	f7fd fc6d 	bl	8003504 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d901      	bls.n	8005c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e1a8      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c38:	4b2b      	ldr	r3, [pc, #172]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0f0      	beq.n	8005c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c44:	4b28      	ldr	r3, [pc, #160]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	4925      	ldr	r1, [pc, #148]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	600b      	str	r3, [r1, #0]
 8005c58:	e015      	b.n	8005c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c5a:	4b24      	ldr	r3, [pc, #144]	@ (8005cec <HAL_RCC_OscConfig+0x244>)
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c60:	f7fd fc50 	bl	8003504 <HAL_GetTick>
 8005c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c66:	e008      	b.n	8005c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c68:	f7fd fc4c 	bl	8003504 <HAL_GetTick>
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	1ad3      	subs	r3, r2, r3
 8005c72:	2b02      	cmp	r3, #2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e187      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f0      	bne.n	8005c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0308 	and.w	r3, r3, #8
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d036      	beq.n	8005d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d016      	beq.n	8005cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c9a:	4b15      	ldr	r3, [pc, #84]	@ (8005cf0 <HAL_RCC_OscConfig+0x248>)
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ca0:	f7fd fc30 	bl	8003504 <HAL_GetTick>
 8005ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ca6:	e008      	b.n	8005cba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca8:	f7fd fc2c 	bl	8003504 <HAL_GetTick>
 8005cac:	4602      	mov	r2, r0
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	2b02      	cmp	r3, #2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e167      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cba:	4b0b      	ldr	r3, [pc, #44]	@ (8005ce8 <HAL_RCC_OscConfig+0x240>)
 8005cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d0f0      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x200>
 8005cc6:	e01b      	b.n	8005d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cc8:	4b09      	ldr	r3, [pc, #36]	@ (8005cf0 <HAL_RCC_OscConfig+0x248>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cce:	f7fd fc19 	bl	8003504 <HAL_GetTick>
 8005cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cd4:	e00e      	b.n	8005cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cd6:	f7fd fc15 	bl	8003504 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d907      	bls.n	8005cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e150      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	42470000 	.word	0x42470000
 8005cf0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf4:	4b88      	ldr	r3, [pc, #544]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cf8:	f003 0302 	and.w	r3, r3, #2
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d1ea      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8097 	beq.w	8005e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d12:	4b81      	ldr	r3, [pc, #516]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60bb      	str	r3, [r7, #8]
 8005d22:	4b7d      	ldr	r3, [pc, #500]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d26:	4a7c      	ldr	r2, [pc, #496]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d3e:	4b77      	ldr	r3, [pc, #476]	@ (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d118      	bne.n	8005d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d4a:	4b74      	ldr	r3, [pc, #464]	@ (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a73      	ldr	r2, [pc, #460]	@ (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d56:	f7fd fbd5 	bl	8003504 <HAL_GetTick>
 8005d5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d5c:	e008      	b.n	8005d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d5e:	f7fd fbd1 	bl	8003504 <HAL_GetTick>
 8005d62:	4602      	mov	r2, r0
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d901      	bls.n	8005d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d6c:	2303      	movs	r3, #3
 8005d6e:	e10c      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d70:	4b6a      	ldr	r3, [pc, #424]	@ (8005f1c <HAL_RCC_OscConfig+0x474>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f0      	beq.n	8005d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d106      	bne.n	8005d92 <HAL_RCC_OscConfig+0x2ea>
 8005d84:	4b64      	ldr	r3, [pc, #400]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d88:	4a63      	ldr	r2, [pc, #396]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d8a:	f043 0301 	orr.w	r3, r3, #1
 8005d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d90:	e01c      	b.n	8005dcc <HAL_RCC_OscConfig+0x324>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	2b05      	cmp	r3, #5
 8005d98:	d10c      	bne.n	8005db4 <HAL_RCC_OscConfig+0x30c>
 8005d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d9e:	4a5e      	ldr	r2, [pc, #376]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005da0:	f043 0304 	orr.w	r3, r3, #4
 8005da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005da6:	4b5c      	ldr	r3, [pc, #368]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005daa:	4a5b      	ldr	r2, [pc, #364]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dac:	f043 0301 	orr.w	r3, r3, #1
 8005db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005db2:	e00b      	b.n	8005dcc <HAL_RCC_OscConfig+0x324>
 8005db4:	4b58      	ldr	r3, [pc, #352]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db8:	4a57      	ldr	r2, [pc, #348]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dba:	f023 0301 	bic.w	r3, r3, #1
 8005dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dc0:	4b55      	ldr	r3, [pc, #340]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc4:	4a54      	ldr	r2, [pc, #336]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005dc6:	f023 0304 	bic.w	r3, r3, #4
 8005dca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d015      	beq.n	8005e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd4:	f7fd fb96 	bl	8003504 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dda:	e00a      	b.n	8005df2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ddc:	f7fd fb92 	bl	8003504 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e0cb      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df2:	4b49      	ldr	r3, [pc, #292]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0ee      	beq.n	8005ddc <HAL_RCC_OscConfig+0x334>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e00:	f7fd fb80 	bl	8003504 <HAL_GetTick>
 8005e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e06:	e00a      	b.n	8005e1e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e08:	f7fd fb7c 	bl	8003504 <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d901      	bls.n	8005e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	e0b5      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1ee      	bne.n	8005e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e2a:	7dfb      	ldrb	r3, [r7, #23]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d105      	bne.n	8005e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e30:	4b39      	ldr	r3, [pc, #228]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e34:	4a38      	ldr	r2, [pc, #224]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80a1 	beq.w	8005f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e46:	4b34      	ldr	r3, [pc, #208]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f003 030c 	and.w	r3, r3, #12
 8005e4e:	2b08      	cmp	r3, #8
 8005e50:	d05c      	beq.n	8005f0c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d141      	bne.n	8005ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e5a:	4b31      	ldr	r3, [pc, #196]	@ (8005f20 <HAL_RCC_OscConfig+0x478>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e60:	f7fd fb50 	bl	8003504 <HAL_GetTick>
 8005e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e66:	e008      	b.n	8005e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e68:	f7fd fb4c 	bl	8003504 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e087      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7a:	4b27      	ldr	r3, [pc, #156]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1f0      	bne.n	8005e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	69da      	ldr	r2, [r3, #28]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e94:	019b      	lsls	r3, r3, #6
 8005e96:	431a      	orrs	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e9c:	085b      	lsrs	r3, r3, #1
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	041b      	lsls	r3, r3, #16
 8005ea2:	431a      	orrs	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea8:	061b      	lsls	r3, r3, #24
 8005eaa:	491b      	ldr	r1, [pc, #108]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f20 <HAL_RCC_OscConfig+0x478>)
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eb6:	f7fd fb25 	bl	8003504 <HAL_GetTick>
 8005eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ebc:	e008      	b.n	8005ed0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ebe:	f7fd fb21 	bl	8003504 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	2b02      	cmp	r3, #2
 8005eca:	d901      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ecc:	2303      	movs	r3, #3
 8005ece:	e05c      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ed0:	4b11      	ldr	r3, [pc, #68]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d0f0      	beq.n	8005ebe <HAL_RCC_OscConfig+0x416>
 8005edc:	e054      	b.n	8005f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ede:	4b10      	ldr	r3, [pc, #64]	@ (8005f20 <HAL_RCC_OscConfig+0x478>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ee4:	f7fd fb0e 	bl	8003504 <HAL_GetTick>
 8005ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eea:	e008      	b.n	8005efe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eec:	f7fd fb0a 	bl	8003504 <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d901      	bls.n	8005efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	e045      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005efe:	4b06      	ldr	r3, [pc, #24]	@ (8005f18 <HAL_RCC_OscConfig+0x470>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1f0      	bne.n	8005eec <HAL_RCC_OscConfig+0x444>
 8005f0a:	e03d      	b.n	8005f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d107      	bne.n	8005f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e038      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
 8005f18:	40023800 	.word	0x40023800
 8005f1c:	40007000 	.word	0x40007000
 8005f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f24:	4b1b      	ldr	r3, [pc, #108]	@ (8005f94 <HAL_RCC_OscConfig+0x4ec>)
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d028      	beq.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d121      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d11a      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f54:	4013      	ands	r3, r2
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d111      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f6a:	085b      	lsrs	r3, r3, #1
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d107      	bne.n	8005f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d001      	beq.n	8005f88 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3718      	adds	r7, #24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40023800 	.word	0x40023800

08005f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e0cc      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fac:	4b68      	ldr	r3, [pc, #416]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0307 	and.w	r3, r3, #7
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d90c      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fba:	4b65      	ldr	r3, [pc, #404]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc2:	4b63      	ldr	r3, [pc, #396]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f003 0307 	and.w	r3, r3, #7
 8005fca:	683a      	ldr	r2, [r7, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d001      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e0b8      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0302 	and.w	r3, r3, #2
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d020      	beq.n	8006022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f003 0304 	and.w	r3, r3, #4
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d005      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fec:	4b59      	ldr	r3, [pc, #356]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	4a58      	ldr	r2, [pc, #352]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005ff6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d005      	beq.n	8006010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006004:	4b53      	ldr	r3, [pc, #332]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	4a52      	ldr	r2, [pc, #328]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800600a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800600e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006010:	4b50      	ldr	r3, [pc, #320]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	494d      	ldr	r1, [pc, #308]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800601e:	4313      	orrs	r3, r2
 8006020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d044      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d107      	bne.n	8006046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006036:	4b47      	ldr	r3, [pc, #284]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d119      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e07f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d003      	beq.n	8006056 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006052:	2b03      	cmp	r3, #3
 8006054:	d107      	bne.n	8006066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006056:	4b3f      	ldr	r3, [pc, #252]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d109      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e06f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006066:	4b3b      	ldr	r3, [pc, #236]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d101      	bne.n	8006076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e067      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006076:	4b37      	ldr	r3, [pc, #220]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	f023 0203 	bic.w	r2, r3, #3
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685b      	ldr	r3, [r3, #4]
 8006082:	4934      	ldr	r1, [pc, #208]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006084:	4313      	orrs	r3, r2
 8006086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006088:	f7fd fa3c 	bl	8003504 <HAL_GetTick>
 800608c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800608e:	e00a      	b.n	80060a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006090:	f7fd fa38 	bl	8003504 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800609e:	4293      	cmp	r3, r2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e04f      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 020c 	and.w	r2, r3, #12
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	009b      	lsls	r3, r3, #2
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d1eb      	bne.n	8006090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060b8:	4b25      	ldr	r3, [pc, #148]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	683a      	ldr	r2, [r7, #0]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d20c      	bcs.n	80060e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060c6:	4b22      	ldr	r3, [pc, #136]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	b2d2      	uxtb	r2, r2
 80060cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060ce:	4b20      	ldr	r3, [pc, #128]	@ (8006150 <HAL_RCC_ClockConfig+0x1b8>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0307 	and.w	r3, r3, #7
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d001      	beq.n	80060e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e032      	b.n	8006146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060ec:	4b19      	ldr	r3, [pc, #100]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060ee:	689b      	ldr	r3, [r3, #8]
 80060f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4916      	ldr	r1, [pc, #88]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	2b00      	cmp	r3, #0
 8006108:	d009      	beq.n	800611e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800610a:	4b12      	ldr	r3, [pc, #72]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	490e      	ldr	r1, [pc, #56]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	4313      	orrs	r3, r2
 800611c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800611e:	f000 f82d 	bl	800617c <HAL_RCC_GetSysClockFreq>
 8006122:	4602      	mov	r2, r0
 8006124:	4b0b      	ldr	r3, [pc, #44]	@ (8006154 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	091b      	lsrs	r3, r3, #4
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	490a      	ldr	r1, [pc, #40]	@ (8006158 <HAL_RCC_ClockConfig+0x1c0>)
 8006130:	5ccb      	ldrb	r3, [r1, r3]
 8006132:	fa22 f303 	lsr.w	r3, r2, r3
 8006136:	4a09      	ldr	r2, [pc, #36]	@ (800615c <HAL_RCC_ClockConfig+0x1c4>)
 8006138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800613a:	4b09      	ldr	r3, [pc, #36]	@ (8006160 <HAL_RCC_ClockConfig+0x1c8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4618      	mov	r0, r3
 8006140:	f7fd f99c 	bl	800347c <HAL_InitTick>

  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	40023c00 	.word	0x40023c00
 8006154:	40023800 	.word	0x40023800
 8006158:	0800c7c8 	.word	0x0800c7c8
 800615c:	2000001c 	.word	0x2000001c
 8006160:	20000020 	.word	0x20000020

08006164 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006164:	b480      	push	{r7}
 8006166:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006168:	4b03      	ldr	r3, [pc, #12]	@ (8006178 <HAL_RCC_EnableCSS+0x14>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]
}
 800616e:	bf00      	nop
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	4247004c 	.word	0x4247004c

0800617c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800617c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006180:	b090      	sub	sp, #64	@ 0x40
 8006182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006194:	4b59      	ldr	r3, [pc, #356]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x180>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f003 030c 	and.w	r3, r3, #12
 800619c:	2b08      	cmp	r3, #8
 800619e:	d00d      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x40>
 80061a0:	2b08      	cmp	r3, #8
 80061a2:	f200 80a1 	bhi.w	80062e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <HAL_RCC_GetSysClockFreq+0x34>
 80061aa:	2b04      	cmp	r3, #4
 80061ac:	d003      	beq.n	80061b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ae:	e09b      	b.n	80062e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061b0:	4b53      	ldr	r3, [pc, #332]	@ (8006300 <HAL_RCC_GetSysClockFreq+0x184>)
 80061b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061b4:	e09b      	b.n	80062ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061b6:	4b53      	ldr	r3, [pc, #332]	@ (8006304 <HAL_RCC_GetSysClockFreq+0x188>)
 80061b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80061ba:	e098      	b.n	80062ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061bc:	4b4f      	ldr	r3, [pc, #316]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x180>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061c6:	4b4d      	ldr	r3, [pc, #308]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x180>)
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d028      	beq.n	8006224 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061d2:	4b4a      	ldr	r3, [pc, #296]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x180>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	099b      	lsrs	r3, r3, #6
 80061d8:	2200      	movs	r2, #0
 80061da:	623b      	str	r3, [r7, #32]
 80061dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80061de:	6a3b      	ldr	r3, [r7, #32]
 80061e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80061e4:	2100      	movs	r1, #0
 80061e6:	4b47      	ldr	r3, [pc, #284]	@ (8006304 <HAL_RCC_GetSysClockFreq+0x188>)
 80061e8:	fb03 f201 	mul.w	r2, r3, r1
 80061ec:	2300      	movs	r3, #0
 80061ee:	fb00 f303 	mul.w	r3, r0, r3
 80061f2:	4413      	add	r3, r2
 80061f4:	4a43      	ldr	r2, [pc, #268]	@ (8006304 <HAL_RCC_GetSysClockFreq+0x188>)
 80061f6:	fba0 1202 	umull	r1, r2, r0, r2
 80061fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061fc:	460a      	mov	r2, r1
 80061fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006202:	4413      	add	r3, r2
 8006204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006208:	2200      	movs	r2, #0
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	61fa      	str	r2, [r7, #28]
 800620e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006212:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006216:	f7fa f833 	bl	8000280 <__aeabi_uldivmod>
 800621a:	4602      	mov	r2, r0
 800621c:	460b      	mov	r3, r1
 800621e:	4613      	mov	r3, r2
 8006220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006222:	e053      	b.n	80062cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006224:	4b35      	ldr	r3, [pc, #212]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x180>)
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	099b      	lsrs	r3, r3, #6
 800622a:	2200      	movs	r2, #0
 800622c:	613b      	str	r3, [r7, #16]
 800622e:	617a      	str	r2, [r7, #20]
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006236:	f04f 0b00 	mov.w	fp, #0
 800623a:	4652      	mov	r2, sl
 800623c:	465b      	mov	r3, fp
 800623e:	f04f 0000 	mov.w	r0, #0
 8006242:	f04f 0100 	mov.w	r1, #0
 8006246:	0159      	lsls	r1, r3, #5
 8006248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800624c:	0150      	lsls	r0, r2, #5
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	ebb2 080a 	subs.w	r8, r2, sl
 8006256:	eb63 090b 	sbc.w	r9, r3, fp
 800625a:	f04f 0200 	mov.w	r2, #0
 800625e:	f04f 0300 	mov.w	r3, #0
 8006262:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006266:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800626a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800626e:	ebb2 0408 	subs.w	r4, r2, r8
 8006272:	eb63 0509 	sbc.w	r5, r3, r9
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	00eb      	lsls	r3, r5, #3
 8006280:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006284:	00e2      	lsls	r2, r4, #3
 8006286:	4614      	mov	r4, r2
 8006288:	461d      	mov	r5, r3
 800628a:	eb14 030a 	adds.w	r3, r4, sl
 800628e:	603b      	str	r3, [r7, #0]
 8006290:	eb45 030b 	adc.w	r3, r5, fp
 8006294:	607b      	str	r3, [r7, #4]
 8006296:	f04f 0200 	mov.w	r2, #0
 800629a:	f04f 0300 	mov.w	r3, #0
 800629e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80062a2:	4629      	mov	r1, r5
 80062a4:	028b      	lsls	r3, r1, #10
 80062a6:	4621      	mov	r1, r4
 80062a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80062ac:	4621      	mov	r1, r4
 80062ae:	028a      	lsls	r2, r1, #10
 80062b0:	4610      	mov	r0, r2
 80062b2:	4619      	mov	r1, r3
 80062b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b6:	2200      	movs	r2, #0
 80062b8:	60bb      	str	r3, [r7, #8]
 80062ba:	60fa      	str	r2, [r7, #12]
 80062bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062c0:	f7f9 ffde 	bl	8000280 <__aeabi_uldivmod>
 80062c4:	4602      	mov	r2, r0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4613      	mov	r3, r2
 80062ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80062cc:	4b0b      	ldr	r3, [pc, #44]	@ (80062fc <HAL_RCC_GetSysClockFreq+0x180>)
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	0c1b      	lsrs	r3, r3, #16
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	3301      	adds	r3, #1
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80062dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062e6:	e002      	b.n	80062ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062e8:	4b05      	ldr	r3, [pc, #20]	@ (8006300 <HAL_RCC_GetSysClockFreq+0x184>)
 80062ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80062ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3740      	adds	r7, #64	@ 0x40
 80062f4:	46bd      	mov	sp, r7
 80062f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062fa:	bf00      	nop
 80062fc:	40023800 	.word	0x40023800
 8006300:	00f42400 	.word	0x00f42400
 8006304:	00b71b00 	.word	0x00b71b00

08006308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800630c:	4b03      	ldr	r3, [pc, #12]	@ (800631c <HAL_RCC_GetHCLKFreq+0x14>)
 800630e:	681b      	ldr	r3, [r3, #0]
}
 8006310:	4618      	mov	r0, r3
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	2000001c 	.word	0x2000001c

08006320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006324:	f7ff fff0 	bl	8006308 <HAL_RCC_GetHCLKFreq>
 8006328:	4602      	mov	r2, r0
 800632a:	4b05      	ldr	r3, [pc, #20]	@ (8006340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	0a9b      	lsrs	r3, r3, #10
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	4903      	ldr	r1, [pc, #12]	@ (8006344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006336:	5ccb      	ldrb	r3, [r1, r3]
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800633c:	4618      	mov	r0, r3
 800633e:	bd80      	pop	{r7, pc}
 8006340:	40023800 	.word	0x40023800
 8006344:	0800c7d8 	.word	0x0800c7d8

08006348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800634c:	f7ff ffdc 	bl	8006308 <HAL_RCC_GetHCLKFreq>
 8006350:	4602      	mov	r2, r0
 8006352:	4b05      	ldr	r3, [pc, #20]	@ (8006368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	0b5b      	lsrs	r3, r3, #13
 8006358:	f003 0307 	and.w	r3, r3, #7
 800635c:	4903      	ldr	r1, [pc, #12]	@ (800636c <HAL_RCC_GetPCLK2Freq+0x24>)
 800635e:	5ccb      	ldrb	r3, [r1, r3]
 8006360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006364:	4618      	mov	r0, r3
 8006366:	bd80      	pop	{r7, pc}
 8006368:	40023800 	.word	0x40023800
 800636c:	0800c7d8 	.word	0x0800c7d8

08006370 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006374:	4b06      	ldr	r3, [pc, #24]	@ (8006390 <HAL_RCC_NMI_IRQHandler+0x20>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637c:	2b80      	cmp	r3, #128	@ 0x80
 800637e:	d104      	bne.n	800638a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006380:	f000 f80a 	bl	8006398 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006384:	4b03      	ldr	r3, [pc, #12]	@ (8006394 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006386:	2280      	movs	r2, #128	@ 0x80
 8006388:	701a      	strb	r2, [r3, #0]
  }
}
 800638a:	bf00      	nop
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	40023800 	.word	0x40023800
 8006394:	4002380e 	.word	0x4002380e

08006398 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800639c:	bf00      	nop
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e07b      	b.n	80064b0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d108      	bne.n	80063d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063c8:	d009      	beq.n	80063de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	61da      	str	r2, [r3, #28]
 80063d0:	e005      	b.n	80063de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d106      	bne.n	80063fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f7fc fa7f 	bl	80028fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2202      	movs	r2, #2
 8006402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006414:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006426:	431a      	orrs	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006430:	431a      	orrs	r2, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	431a      	orrs	r2, r3
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	f003 0301 	and.w	r3, r3, #1
 8006444:	431a      	orrs	r2, r3
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006462:	ea42 0103 	orr.w	r1, r2, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	430a      	orrs	r2, r1
 8006474:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	0c1b      	lsrs	r3, r3, #16
 800647c:	f003 0104 	and.w	r1, r3, #4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006484:	f003 0210 	and.w	r2, r3, #16
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	430a      	orrs	r2, r1
 800648e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69da      	ldr	r2, [r3, #28]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800649e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3708      	adds	r7, #8
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	@ 0x28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	60f8      	str	r0, [r7, #12]
 80064c0:	60b9      	str	r1, [r7, #8]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064c6:	2301      	movs	r3, #1
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ca:	f7fd f81b 	bl	8003504 <HAL_GetTick>
 80064ce:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80064d6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80064de:	887b      	ldrh	r3, [r7, #2]
 80064e0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80064e2:	7ffb      	ldrb	r3, [r7, #31]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d00c      	beq.n	8006502 <HAL_SPI_TransmitReceive+0x4a>
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80064ee:	d106      	bne.n	80064fe <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d102      	bne.n	80064fe <HAL_SPI_TransmitReceive+0x46>
 80064f8:	7ffb      	ldrb	r3, [r7, #31]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d001      	beq.n	8006502 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80064fe:	2302      	movs	r3, #2
 8006500:	e17f      	b.n	8006802 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d005      	beq.n	8006514 <HAL_SPI_TransmitReceive+0x5c>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_SPI_TransmitReceive+0x5c>
 800650e:	887b      	ldrh	r3, [r7, #2]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d101      	bne.n	8006518 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	e174      	b.n	8006802 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800651e:	2b01      	cmp	r3, #1
 8006520:	d101      	bne.n	8006526 <HAL_SPI_TransmitReceive+0x6e>
 8006522:	2302      	movs	r3, #2
 8006524:	e16d      	b.n	8006802 <HAL_SPI_TransmitReceive+0x34a>
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2201      	movs	r2, #1
 800652a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006534:	b2db      	uxtb	r3, r3
 8006536:	2b04      	cmp	r3, #4
 8006538:	d003      	beq.n	8006542 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2205      	movs	r2, #5
 800653e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	887a      	ldrh	r2, [r7, #2]
 8006552:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	887a      	ldrh	r2, [r7, #2]
 8006558:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	887a      	ldrh	r2, [r7, #2]
 8006564:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	887a      	ldrh	r2, [r7, #2]
 800656a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d007      	beq.n	8006596 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006594:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800659e:	d17e      	bne.n	800669e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d002      	beq.n	80065ae <HAL_SPI_TransmitReceive+0xf6>
 80065a8:	8afb      	ldrh	r3, [r7, #22]
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d16c      	bne.n	8006688 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065b2:	881a      	ldrh	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065be:	1c9a      	adds	r2, r3, #2
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065d2:	e059      	b.n	8006688 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 0302 	and.w	r3, r3, #2
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d11b      	bne.n	800661a <HAL_SPI_TransmitReceive+0x162>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d016      	beq.n	800661a <HAL_SPI_TransmitReceive+0x162>
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	2b01      	cmp	r3, #1
 80065f0:	d113      	bne.n	800661a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f6:	881a      	ldrh	r2, [r3, #0]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006602:	1c9a      	adds	r2, r3, #2
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006616:	2300      	movs	r3, #0
 8006618:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	f003 0301 	and.w	r3, r3, #1
 8006624:	2b01      	cmp	r3, #1
 8006626:	d119      	bne.n	800665c <HAL_SPI_TransmitReceive+0x1a4>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800662c:	b29b      	uxth	r3, r3
 800662e:	2b00      	cmp	r3, #0
 8006630:	d014      	beq.n	800665c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663c:	b292      	uxth	r2, r2
 800663e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006644:	1c9a      	adds	r2, r3, #2
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800664e:	b29b      	uxth	r3, r3
 8006650:	3b01      	subs	r3, #1
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006658:	2301      	movs	r3, #1
 800665a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800665c:	f7fc ff52 	bl	8003504 <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006668:	429a      	cmp	r2, r3
 800666a:	d80d      	bhi.n	8006688 <HAL_SPI_TransmitReceive+0x1d0>
 800666c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006672:	d009      	beq.n	8006688 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e0bc      	b.n	8006802 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800668c:	b29b      	uxth	r3, r3
 800668e:	2b00      	cmp	r3, #0
 8006690:	d1a0      	bne.n	80065d4 <HAL_SPI_TransmitReceive+0x11c>
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006696:	b29b      	uxth	r3, r3
 8006698:	2b00      	cmp	r3, #0
 800669a:	d19b      	bne.n	80065d4 <HAL_SPI_TransmitReceive+0x11c>
 800669c:	e082      	b.n	80067a4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d002      	beq.n	80066ac <HAL_SPI_TransmitReceive+0x1f4>
 80066a6:	8afb      	ldrh	r3, [r7, #22]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d171      	bne.n	8006790 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	7812      	ldrb	r2, [r2, #0]
 80066b8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066d2:	e05d      	b.n	8006790 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d11c      	bne.n	800671c <HAL_SPI_TransmitReceive+0x264>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d017      	beq.n	800671c <HAL_SPI_TransmitReceive+0x264>
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d114      	bne.n	800671c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	330c      	adds	r3, #12
 80066fc:	7812      	ldrb	r2, [r2, #0]
 80066fe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800670e:	b29b      	uxth	r3, r3
 8006710:	3b01      	subs	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006718:	2300      	movs	r3, #0
 800671a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	f003 0301 	and.w	r3, r3, #1
 8006726:	2b01      	cmp	r3, #1
 8006728:	d119      	bne.n	800675e <HAL_SPI_TransmitReceive+0x2a6>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d014      	beq.n	800675e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673e:	b2d2      	uxtb	r2, r2
 8006740:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	1c5a      	adds	r2, r3, #1
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006750:	b29b      	uxth	r3, r3
 8006752:	3b01      	subs	r3, #1
 8006754:	b29a      	uxth	r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800675a:	2301      	movs	r3, #1
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800675e:	f7fc fed1 	bl	8003504 <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800676a:	429a      	cmp	r2, r3
 800676c:	d803      	bhi.n	8006776 <HAL_SPI_TransmitReceive+0x2be>
 800676e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006774:	d102      	bne.n	800677c <HAL_SPI_TransmitReceive+0x2c4>
 8006776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006778:	2b00      	cmp	r3, #0
 800677a:	d109      	bne.n	8006790 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e038      	b.n	8006802 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006794:	b29b      	uxth	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d19c      	bne.n	80066d4 <HAL_SPI_TransmitReceive+0x21c>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800679e:	b29b      	uxth	r3, r3
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d197      	bne.n	80066d4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067a4:	6a3a      	ldr	r2, [r7, #32]
 80067a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f8b7 	bl	800691c <SPI_EndRxTxTransaction>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2220      	movs	r2, #32
 80067b8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e01d      	b.n	8006802 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d10a      	bne.n	80067e4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ce:	2300      	movs	r3, #0
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	613b      	str	r3, [r7, #16]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	613b      	str	r3, [r7, #16]
 80067e2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2201      	movs	r2, #1
 80067e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006800:	2300      	movs	r3, #0
  }
}
 8006802:	4618      	mov	r0, r3
 8006804:	3728      	adds	r7, #40	@ 0x28
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b088      	sub	sp, #32
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	603b      	str	r3, [r7, #0]
 8006818:	4613      	mov	r3, r2
 800681a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800681c:	f7fc fe72 	bl	8003504 <HAL_GetTick>
 8006820:	4602      	mov	r2, r0
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	1a9b      	subs	r3, r3, r2
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	4413      	add	r3, r2
 800682a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800682c:	f7fc fe6a 	bl	8003504 <HAL_GetTick>
 8006830:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006832:	4b39      	ldr	r3, [pc, #228]	@ (8006918 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	015b      	lsls	r3, r3, #5
 8006838:	0d1b      	lsrs	r3, r3, #20
 800683a:	69fa      	ldr	r2, [r7, #28]
 800683c:	fb02 f303 	mul.w	r3, r2, r3
 8006840:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006842:	e054      	b.n	80068ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800684a:	d050      	beq.n	80068ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800684c:	f7fc fe5a 	bl	8003504 <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	69fa      	ldr	r2, [r7, #28]
 8006858:	429a      	cmp	r2, r3
 800685a:	d902      	bls.n	8006862 <SPI_WaitFlagStateUntilTimeout+0x56>
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d13d      	bne.n	80068de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006870:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800687a:	d111      	bne.n	80068a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006884:	d004      	beq.n	8006890 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800688e:	d107      	bne.n	80068a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800689e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068a8:	d10f      	bne.n	80068ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80068c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e017      	b.n	800690e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d101      	bne.n	80068e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068e4:	2300      	movs	r3, #0
 80068e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	689a      	ldr	r2, [r3, #8]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4013      	ands	r3, r2
 80068f8:	68ba      	ldr	r2, [r7, #8]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	bf0c      	ite	eq
 80068fe:	2301      	moveq	r3, #1
 8006900:	2300      	movne	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	461a      	mov	r2, r3
 8006906:	79fb      	ldrb	r3, [r7, #7]
 8006908:	429a      	cmp	r2, r3
 800690a:	d19b      	bne.n	8006844 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3720      	adds	r7, #32
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	2000001c 	.word	0x2000001c

0800691c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b088      	sub	sp, #32
 8006920:	af02      	add	r7, sp, #8
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	2201      	movs	r2, #1
 8006930:	2102      	movs	r1, #2
 8006932:	68f8      	ldr	r0, [r7, #12]
 8006934:	f7ff ff6a 	bl	800680c <SPI_WaitFlagStateUntilTimeout>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d007      	beq.n	800694e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006942:	f043 0220 	orr.w	r2, r3, #32
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e032      	b.n	80069b4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800694e:	4b1b      	ldr	r3, [pc, #108]	@ (80069bc <SPI_EndRxTxTransaction+0xa0>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1b      	ldr	r2, [pc, #108]	@ (80069c0 <SPI_EndRxTxTransaction+0xa4>)
 8006954:	fba2 2303 	umull	r2, r3, r2, r3
 8006958:	0d5b      	lsrs	r3, r3, #21
 800695a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800696c:	d112      	bne.n	8006994 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2200      	movs	r2, #0
 8006976:	2180      	movs	r1, #128	@ 0x80
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f7ff ff47 	bl	800680c <SPI_WaitFlagStateUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d016      	beq.n	80069b2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006988:	f043 0220 	orr.w	r2, r3, #32
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e00f      	b.n	80069b4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	3b01      	subs	r3, #1
 800699e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069aa:	2b80      	cmp	r3, #128	@ 0x80
 80069ac:	d0f2      	beq.n	8006994 <SPI_EndRxTxTransaction+0x78>
 80069ae:	e000      	b.n	80069b2 <SPI_EndRxTxTransaction+0x96>
        break;
 80069b0:	bf00      	nop
  }

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	2000001c 	.word	0x2000001c
 80069c0:	165e9f81 	.word	0x165e9f81

080069c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d101      	bne.n	80069d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
 80069d4:	e041      	b.n	8006a5a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d106      	bne.n	80069f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fc f8a2 	bl	8002b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	3304      	adds	r3, #4
 8006a00:	4619      	mov	r1, r3
 8006a02:	4610      	mov	r0, r2
 8006a04:	f000 fba8 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
	...

08006a64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d001      	beq.n	8006a7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	e046      	b.n	8006b0a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a23      	ldr	r2, [pc, #140]	@ (8006b18 <HAL_TIM_Base_Start+0xb4>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d022      	beq.n	8006ad4 <HAL_TIM_Base_Start+0x70>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a96:	d01d      	beq.n	8006ad4 <HAL_TIM_Base_Start+0x70>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8006b1c <HAL_TIM_Base_Start+0xb8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d018      	beq.n	8006ad4 <HAL_TIM_Base_Start+0x70>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b20 <HAL_TIM_Base_Start+0xbc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d013      	beq.n	8006ad4 <HAL_TIM_Base_Start+0x70>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1c      	ldr	r2, [pc, #112]	@ (8006b24 <HAL_TIM_Base_Start+0xc0>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00e      	beq.n	8006ad4 <HAL_TIM_Base_Start+0x70>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1b      	ldr	r2, [pc, #108]	@ (8006b28 <HAL_TIM_Base_Start+0xc4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d009      	beq.n	8006ad4 <HAL_TIM_Base_Start+0x70>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a19      	ldr	r2, [pc, #100]	@ (8006b2c <HAL_TIM_Base_Start+0xc8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d004      	beq.n	8006ad4 <HAL_TIM_Base_Start+0x70>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a18      	ldr	r2, [pc, #96]	@ (8006b30 <HAL_TIM_Base_Start+0xcc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d111      	bne.n	8006af8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	f003 0307 	and.w	r3, r3, #7
 8006ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2b06      	cmp	r3, #6
 8006ae4:	d010      	beq.n	8006b08 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f042 0201 	orr.w	r2, r2, #1
 8006af4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006af6:	e007      	b.n	8006b08 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	40010000 	.word	0x40010000
 8006b1c:	40000400 	.word	0x40000400
 8006b20:	40000800 	.word	0x40000800
 8006b24:	40000c00 	.word	0x40000c00
 8006b28:	40010400 	.word	0x40010400
 8006b2c:	40014000 	.word	0x40014000
 8006b30:	40001800 	.word	0x40001800

08006b34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d101      	bne.n	8006b46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	e041      	b.n	8006bca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d106      	bne.n	8006b60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7fb ff36 	bl	80029cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2202      	movs	r2, #2
 8006b64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	4619      	mov	r1, r3
 8006b72:	4610      	mov	r0, r2
 8006b74:	f000 faf0 	bl	8007158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2201      	movs	r2, #1
 8006b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2201      	movs	r2, #1
 8006b94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d109      	bne.n	8006bf8 <HAL_TIM_PWM_Start+0x24>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	bf14      	ite	ne
 8006bf0:	2301      	movne	r3, #1
 8006bf2:	2300      	moveq	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	e022      	b.n	8006c3e <HAL_TIM_PWM_Start+0x6a>
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d109      	bne.n	8006c12 <HAL_TIM_PWM_Start+0x3e>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	bf14      	ite	ne
 8006c0a:	2301      	movne	r3, #1
 8006c0c:	2300      	moveq	r3, #0
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	e015      	b.n	8006c3e <HAL_TIM_PWM_Start+0x6a>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d109      	bne.n	8006c2c <HAL_TIM_PWM_Start+0x58>
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c1e:	b2db      	uxtb	r3, r3
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	e008      	b.n	8006c3e <HAL_TIM_PWM_Start+0x6a>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	bf14      	ite	ne
 8006c38:	2301      	movne	r3, #1
 8006c3a:	2300      	moveq	r3, #0
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e07c      	b.n	8006d40 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_PWM_Start+0x82>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c54:	e013      	b.n	8006c7e <HAL_TIM_PWM_Start+0xaa>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b04      	cmp	r3, #4
 8006c5a:	d104      	bne.n	8006c66 <HAL_TIM_PWM_Start+0x92>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2202      	movs	r2, #2
 8006c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c64:	e00b      	b.n	8006c7e <HAL_TIM_PWM_Start+0xaa>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	2b08      	cmp	r3, #8
 8006c6a:	d104      	bne.n	8006c76 <HAL_TIM_PWM_Start+0xa2>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2202      	movs	r2, #2
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c74:	e003      	b.n	8006c7e <HAL_TIM_PWM_Start+0xaa>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2202      	movs	r2, #2
 8006c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2201      	movs	r2, #1
 8006c84:	6839      	ldr	r1, [r7, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 fd5c 	bl	8007744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a2d      	ldr	r2, [pc, #180]	@ (8006d48 <HAL_TIM_PWM_Start+0x174>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d004      	beq.n	8006ca0 <HAL_TIM_PWM_Start+0xcc>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a2c      	ldr	r2, [pc, #176]	@ (8006d4c <HAL_TIM_PWM_Start+0x178>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d101      	bne.n	8006ca4 <HAL_TIM_PWM_Start+0xd0>
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e000      	b.n	8006ca6 <HAL_TIM_PWM_Start+0xd2>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a22      	ldr	r2, [pc, #136]	@ (8006d48 <HAL_TIM_PWM_Start+0x174>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d022      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x136>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ccc:	d01d      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x136>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8006d50 <HAL_TIM_PWM_Start+0x17c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d018      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x136>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8006d54 <HAL_TIM_PWM_Start+0x180>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d013      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x136>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8006d58 <HAL_TIM_PWM_Start+0x184>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d00e      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x136>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a16      	ldr	r2, [pc, #88]	@ (8006d4c <HAL_TIM_PWM_Start+0x178>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x136>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a18      	ldr	r2, [pc, #96]	@ (8006d5c <HAL_TIM_PWM_Start+0x188>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d004      	beq.n	8006d0a <HAL_TIM_PWM_Start+0x136>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a16      	ldr	r2, [pc, #88]	@ (8006d60 <HAL_TIM_PWM_Start+0x18c>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d111      	bne.n	8006d2e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	f003 0307 	and.w	r3, r3, #7
 8006d14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2b06      	cmp	r3, #6
 8006d1a:	d010      	beq.n	8006d3e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f042 0201 	orr.w	r2, r2, #1
 8006d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2c:	e007      	b.n	8006d3e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f042 0201 	orr.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40010400 	.word	0x40010400
 8006d50:	40000400 	.word	0x40000400
 8006d54:	40000800 	.word	0x40000800
 8006d58:	40000c00 	.word	0x40000c00
 8006d5c:	40014000 	.word	0x40014000
 8006d60:	40001800 	.word	0x40001800

08006d64 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2200      	movs	r2, #0
 8006d74:	6839      	ldr	r1, [r7, #0]
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fce4 	bl	8007744 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a2e      	ldr	r2, [pc, #184]	@ (8006e3c <HAL_TIM_PWM_Stop+0xd8>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <HAL_TIM_PWM_Stop+0x2c>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a2d      	ldr	r2, [pc, #180]	@ (8006e40 <HAL_TIM_PWM_Stop+0xdc>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d101      	bne.n	8006d94 <HAL_TIM_PWM_Stop+0x30>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <HAL_TIM_PWM_Stop+0x32>
 8006d94:	2300      	movs	r3, #0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d017      	beq.n	8006dca <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6a1a      	ldr	r2, [r3, #32]
 8006da0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006da4:	4013      	ands	r3, r2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d10f      	bne.n	8006dca <HAL_TIM_PWM_Stop+0x66>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	6a1a      	ldr	r2, [r3, #32]
 8006db0:	f240 4344 	movw	r3, #1092	@ 0x444
 8006db4:	4013      	ands	r3, r2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d107      	bne.n	8006dca <HAL_TIM_PWM_Stop+0x66>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	6a1a      	ldr	r2, [r3, #32]
 8006dd0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d10f      	bne.n	8006dfa <HAL_TIM_PWM_Stop+0x96>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	6a1a      	ldr	r2, [r3, #32]
 8006de0:	f240 4344 	movw	r3, #1092	@ 0x444
 8006de4:	4013      	ands	r3, r2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d107      	bne.n	8006dfa <HAL_TIM_PWM_Stop+0x96>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f022 0201 	bic.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d104      	bne.n	8006e0a <HAL_TIM_PWM_Stop+0xa6>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e08:	e013      	b.n	8006e32 <HAL_TIM_PWM_Stop+0xce>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b04      	cmp	r3, #4
 8006e0e:	d104      	bne.n	8006e1a <HAL_TIM_PWM_Stop+0xb6>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e18:	e00b      	b.n	8006e32 <HAL_TIM_PWM_Stop+0xce>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d104      	bne.n	8006e2a <HAL_TIM_PWM_Stop+0xc6>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e28:	e003      	b.n	8006e32 <HAL_TIM_PWM_Stop+0xce>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2201      	movs	r2, #1
 8006e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	40010000 	.word	0x40010000
 8006e40:	40010400 	.word	0x40010400

08006e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	60f8      	str	r0, [r7, #12]
 8006e4c:	60b9      	str	r1, [r7, #8]
 8006e4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	d101      	bne.n	8006e62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e0ae      	b.n	8006fc0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2201      	movs	r2, #1
 8006e66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b0c      	cmp	r3, #12
 8006e6e:	f200 809f 	bhi.w	8006fb0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006e72:	a201      	add	r2, pc, #4	@ (adr r2, 8006e78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006ead 	.word	0x08006ead
 8006e7c:	08006fb1 	.word	0x08006fb1
 8006e80:	08006fb1 	.word	0x08006fb1
 8006e84:	08006fb1 	.word	0x08006fb1
 8006e88:	08006eed 	.word	0x08006eed
 8006e8c:	08006fb1 	.word	0x08006fb1
 8006e90:	08006fb1 	.word	0x08006fb1
 8006e94:	08006fb1 	.word	0x08006fb1
 8006e98:	08006f2f 	.word	0x08006f2f
 8006e9c:	08006fb1 	.word	0x08006fb1
 8006ea0:	08006fb1 	.word	0x08006fb1
 8006ea4:	08006fb1 	.word	0x08006fb1
 8006ea8:	08006f6f 	.word	0x08006f6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 f9fc 	bl	80072b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0208 	orr.w	r2, r2, #8
 8006ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0204 	bic.w	r2, r2, #4
 8006ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6999      	ldr	r1, [r3, #24]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	619a      	str	r2, [r3, #24]
      break;
 8006eea:	e064      	b.n	8006fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fa4c 	bl	8007390 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6999      	ldr	r1, [r3, #24]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	021a      	lsls	r2, r3, #8
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	619a      	str	r2, [r3, #24]
      break;
 8006f2c:	e043      	b.n	8006fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 faa1 	bl	800747c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0208 	orr.w	r2, r2, #8
 8006f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69da      	ldr	r2, [r3, #28]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0204 	bic.w	r2, r2, #4
 8006f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69d9      	ldr	r1, [r3, #28]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	61da      	str	r2, [r3, #28]
      break;
 8006f6c:	e023      	b.n	8006fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 faf5 	bl	8007564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69d9      	ldr	r1, [r3, #28]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	021a      	lsls	r2, r3, #8
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	61da      	str	r2, [r3, #28]
      break;
 8006fae:	e002      	b.n	8006fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_TIM_ConfigClockSource+0x1c>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e0b4      	b.n	800714e <HAL_TIM_ConfigClockSource+0x186>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007002:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800700a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800701c:	d03e      	beq.n	800709c <HAL_TIM_ConfigClockSource+0xd4>
 800701e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007022:	f200 8087 	bhi.w	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800702a:	f000 8086 	beq.w	800713a <HAL_TIM_ConfigClockSource+0x172>
 800702e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007032:	d87f      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007034:	2b70      	cmp	r3, #112	@ 0x70
 8007036:	d01a      	beq.n	800706e <HAL_TIM_ConfigClockSource+0xa6>
 8007038:	2b70      	cmp	r3, #112	@ 0x70
 800703a:	d87b      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 800703c:	2b60      	cmp	r3, #96	@ 0x60
 800703e:	d050      	beq.n	80070e2 <HAL_TIM_ConfigClockSource+0x11a>
 8007040:	2b60      	cmp	r3, #96	@ 0x60
 8007042:	d877      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007044:	2b50      	cmp	r3, #80	@ 0x50
 8007046:	d03c      	beq.n	80070c2 <HAL_TIM_ConfigClockSource+0xfa>
 8007048:	2b50      	cmp	r3, #80	@ 0x50
 800704a:	d873      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 800704c:	2b40      	cmp	r3, #64	@ 0x40
 800704e:	d058      	beq.n	8007102 <HAL_TIM_ConfigClockSource+0x13a>
 8007050:	2b40      	cmp	r3, #64	@ 0x40
 8007052:	d86f      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007054:	2b30      	cmp	r3, #48	@ 0x30
 8007056:	d064      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x15a>
 8007058:	2b30      	cmp	r3, #48	@ 0x30
 800705a:	d86b      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 800705c:	2b20      	cmp	r3, #32
 800705e:	d060      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x15a>
 8007060:	2b20      	cmp	r3, #32
 8007062:	d867      	bhi.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d05c      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x15a>
 8007068:	2b10      	cmp	r3, #16
 800706a:	d05a      	beq.n	8007122 <HAL_TIM_ConfigClockSource+0x15a>
 800706c:	e062      	b.n	8007134 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800707e:	f000 fb41 	bl	8007704 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007090:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	609a      	str	r2, [r3, #8]
      break;
 800709a:	e04f      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80070ac:	f000 fb2a 	bl	8007704 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070be:	609a      	str	r2, [r3, #8]
      break;
 80070c0:	e03c      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ce:	461a      	mov	r2, r3
 80070d0:	f000 fa9e 	bl	8007610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2150      	movs	r1, #80	@ 0x50
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 faf7 	bl	80076ce <TIM_ITRx_SetConfig>
      break;
 80070e0:	e02c      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ee:	461a      	mov	r2, r3
 80070f0:	f000 fabd 	bl	800766e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2160      	movs	r1, #96	@ 0x60
 80070fa:	4618      	mov	r0, r3
 80070fc:	f000 fae7 	bl	80076ce <TIM_ITRx_SetConfig>
      break;
 8007100:	e01c      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800710e:	461a      	mov	r2, r3
 8007110:	f000 fa7e 	bl	8007610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2140      	movs	r1, #64	@ 0x40
 800711a:	4618      	mov	r0, r3
 800711c:	f000 fad7 	bl	80076ce <TIM_ITRx_SetConfig>
      break;
 8007120:	e00c      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	4610      	mov	r0, r2
 800712e:	f000 face 	bl	80076ce <TIM_ITRx_SetConfig>
      break;
 8007132:	e003      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007134:	2301      	movs	r3, #1
 8007136:	73fb      	strb	r3, [r7, #15]
      break;
 8007138:	e000      	b.n	800713c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800713a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2201      	movs	r2, #1
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a46      	ldr	r2, [pc, #280]	@ (8007284 <TIM_Base_SetConfig+0x12c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d013      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007176:	d00f      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a43      	ldr	r2, [pc, #268]	@ (8007288 <TIM_Base_SetConfig+0x130>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d00b      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4a42      	ldr	r2, [pc, #264]	@ (800728c <TIM_Base_SetConfig+0x134>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d007      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a41      	ldr	r2, [pc, #260]	@ (8007290 <TIM_Base_SetConfig+0x138>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d003      	beq.n	8007198 <TIM_Base_SetConfig+0x40>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a40      	ldr	r2, [pc, #256]	@ (8007294 <TIM_Base_SetConfig+0x13c>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d108      	bne.n	80071aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800719e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a35      	ldr	r2, [pc, #212]	@ (8007284 <TIM_Base_SetConfig+0x12c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d02b      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b8:	d027      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a32      	ldr	r2, [pc, #200]	@ (8007288 <TIM_Base_SetConfig+0x130>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d023      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a31      	ldr	r2, [pc, #196]	@ (800728c <TIM_Base_SetConfig+0x134>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d01f      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a30      	ldr	r2, [pc, #192]	@ (8007290 <TIM_Base_SetConfig+0x138>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01b      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a2f      	ldr	r2, [pc, #188]	@ (8007294 <TIM_Base_SetConfig+0x13c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d017      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a2e      	ldr	r2, [pc, #184]	@ (8007298 <TIM_Base_SetConfig+0x140>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a2d      	ldr	r2, [pc, #180]	@ (800729c <TIM_Base_SetConfig+0x144>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00f      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a2c      	ldr	r2, [pc, #176]	@ (80072a0 <TIM_Base_SetConfig+0x148>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00b      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a2b      	ldr	r2, [pc, #172]	@ (80072a4 <TIM_Base_SetConfig+0x14c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d007      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a2a      	ldr	r2, [pc, #168]	@ (80072a8 <TIM_Base_SetConfig+0x150>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d003      	beq.n	800720a <TIM_Base_SetConfig+0xb2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a29      	ldr	r2, [pc, #164]	@ (80072ac <TIM_Base_SetConfig+0x154>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d108      	bne.n	800721c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007210:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	68db      	ldr	r3, [r3, #12]
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	4313      	orrs	r3, r2
 800721a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	4313      	orrs	r3, r2
 8007228:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689a      	ldr	r2, [r3, #8]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a10      	ldr	r2, [pc, #64]	@ (8007284 <TIM_Base_SetConfig+0x12c>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d003      	beq.n	8007250 <TIM_Base_SetConfig+0xf8>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a12      	ldr	r2, [pc, #72]	@ (8007294 <TIM_Base_SetConfig+0x13c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d103      	bne.n	8007258 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	691a      	ldr	r2, [r3, #16]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2201      	movs	r2, #1
 800725c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b01      	cmp	r3, #1
 8007268:	d105      	bne.n	8007276 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
 800726e:	f023 0201 	bic.w	r2, r3, #1
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	611a      	str	r2, [r3, #16]
  }
}
 8007276:	bf00      	nop
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	40010000 	.word	0x40010000
 8007288:	40000400 	.word	0x40000400
 800728c:	40000800 	.word	0x40000800
 8007290:	40000c00 	.word	0x40000c00
 8007294:	40010400 	.word	0x40010400
 8007298:	40014000 	.word	0x40014000
 800729c:	40014400 	.word	0x40014400
 80072a0:	40014800 	.word	0x40014800
 80072a4:	40001800 	.word	0x40001800
 80072a8:	40001c00 	.word	0x40001c00
 80072ac:	40002000 	.word	0x40002000

080072b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6a1b      	ldr	r3, [r3, #32]
 80072c4:	f023 0201 	bic.w	r2, r3, #1
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0303 	bic.w	r3, r3, #3
 80072e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f023 0302 	bic.w	r3, r3, #2
 80072f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	4313      	orrs	r3, r2
 8007302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a20      	ldr	r2, [pc, #128]	@ (8007388 <TIM_OC1_SetConfig+0xd8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d003      	beq.n	8007314 <TIM_OC1_SetConfig+0x64>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a1f      	ldr	r2, [pc, #124]	@ (800738c <TIM_OC1_SetConfig+0xdc>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d10c      	bne.n	800732e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	f023 0308 	bic.w	r3, r3, #8
 800731a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	68db      	ldr	r3, [r3, #12]
 8007320:	697a      	ldr	r2, [r7, #20]
 8007322:	4313      	orrs	r3, r2
 8007324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f023 0304 	bic.w	r3, r3, #4
 800732c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a15      	ldr	r2, [pc, #84]	@ (8007388 <TIM_OC1_SetConfig+0xd8>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d003      	beq.n	800733e <TIM_OC1_SetConfig+0x8e>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a14      	ldr	r2, [pc, #80]	@ (800738c <TIM_OC1_SetConfig+0xdc>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d111      	bne.n	8007362 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800734c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	695b      	ldr	r3, [r3, #20]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	693a      	ldr	r2, [r7, #16]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685a      	ldr	r2, [r3, #4]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	697a      	ldr	r2, [r7, #20]
 800737a:	621a      	str	r2, [r3, #32]
}
 800737c:	bf00      	nop
 800737e:	371c      	adds	r7, #28
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr
 8007388:	40010000 	.word	0x40010000
 800738c:	40010400 	.word	0x40010400

08007390 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a1b      	ldr	r3, [r3, #32]
 80073a4:	f023 0210 	bic.w	r2, r3, #16
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	021b      	lsls	r3, r3, #8
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f023 0320 	bic.w	r3, r3, #32
 80073da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	011b      	lsls	r3, r3, #4
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a22      	ldr	r2, [pc, #136]	@ (8007474 <TIM_OC2_SetConfig+0xe4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_OC2_SetConfig+0x68>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a21      	ldr	r2, [pc, #132]	@ (8007478 <TIM_OC2_SetConfig+0xe8>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d10d      	bne.n	8007414 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	697a      	ldr	r2, [r7, #20]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007412:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a17      	ldr	r2, [pc, #92]	@ (8007474 <TIM_OC2_SetConfig+0xe4>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d003      	beq.n	8007424 <TIM_OC2_SetConfig+0x94>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a16      	ldr	r2, [pc, #88]	@ (8007478 <TIM_OC2_SetConfig+0xe8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d113      	bne.n	800744c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800742a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007432:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	695b      	ldr	r3, [r3, #20]
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	693a      	ldr	r2, [r7, #16]
 800743c:	4313      	orrs	r3, r2
 800743e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	699b      	ldr	r3, [r3, #24]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	4313      	orrs	r3, r2
 800744a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	621a      	str	r2, [r3, #32]
}
 8007466:	bf00      	nop
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	40010000 	.word	0x40010000
 8007478:	40010400 	.word	0x40010400

0800747c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	69db      	ldr	r3, [r3, #28]
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0303 	bic.w	r3, r3, #3
 80074b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	021b      	lsls	r3, r3, #8
 80074cc:	697a      	ldr	r2, [r7, #20]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4a21      	ldr	r2, [pc, #132]	@ (800755c <TIM_OC3_SetConfig+0xe0>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d003      	beq.n	80074e2 <TIM_OC3_SetConfig+0x66>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a20      	ldr	r2, [pc, #128]	@ (8007560 <TIM_OC3_SetConfig+0xe4>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d10d      	bne.n	80074fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80074e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	021b      	lsls	r3, r3, #8
 80074f0:	697a      	ldr	r2, [r7, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80074fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a16      	ldr	r2, [pc, #88]	@ (800755c <TIM_OC3_SetConfig+0xe0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d003      	beq.n	800750e <TIM_OC3_SetConfig+0x92>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a15      	ldr	r2, [pc, #84]	@ (8007560 <TIM_OC3_SetConfig+0xe4>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d113      	bne.n	8007536 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007514:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800751c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	695b      	ldr	r3, [r3, #20]
 8007522:	011b      	lsls	r3, r3, #4
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	4313      	orrs	r3, r2
 8007528:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	011b      	lsls	r3, r3, #4
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	4313      	orrs	r3, r2
 8007534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	68fa      	ldr	r2, [r7, #12]
 8007540:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	697a      	ldr	r2, [r7, #20]
 800754e:	621a      	str	r2, [r3, #32]
}
 8007550:	bf00      	nop
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr
 800755c:	40010000 	.word	0x40010000
 8007560:	40010400 	.word	0x40010400

08007564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007564:	b480      	push	{r7}
 8007566:	b087      	sub	sp, #28
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	69db      	ldr	r3, [r3, #28]
 800758a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800759a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	031b      	lsls	r3, r3, #12
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a12      	ldr	r2, [pc, #72]	@ (8007608 <TIM_OC4_SetConfig+0xa4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_OC4_SetConfig+0x68>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a11      	ldr	r2, [pc, #68]	@ (800760c <TIM_OC4_SetConfig+0xa8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d109      	bne.n	80075e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	695b      	ldr	r3, [r3, #20]
 80075d8:	019b      	lsls	r3, r3, #6
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	621a      	str	r2, [r3, #32]
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr
 8007606:	bf00      	nop
 8007608:	40010000 	.word	0x40010000
 800760c:	40010400 	.word	0x40010400

08007610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	60f8      	str	r0, [r7, #12]
 8007618:	60b9      	str	r1, [r7, #8]
 800761a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	6a1b      	ldr	r3, [r3, #32]
 8007620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	f023 0201 	bic.w	r2, r3, #1
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800763a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	011b      	lsls	r3, r3, #4
 8007640:	693a      	ldr	r2, [r7, #16]
 8007642:	4313      	orrs	r3, r2
 8007644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f023 030a 	bic.w	r3, r3, #10
 800764c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	621a      	str	r2, [r3, #32]
}
 8007662:	bf00      	nop
 8007664:	371c      	adds	r7, #28
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800766e:	b480      	push	{r7}
 8007670:	b087      	sub	sp, #28
 8007672:	af00      	add	r7, sp, #0
 8007674:	60f8      	str	r0, [r7, #12]
 8007676:	60b9      	str	r1, [r7, #8]
 8007678:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	6a1b      	ldr	r3, [r3, #32]
 8007684:	f023 0210 	bic.w	r2, r3, #16
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	031b      	lsls	r3, r3, #12
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80076aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	011b      	lsls	r3, r3, #4
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	697a      	ldr	r2, [r7, #20]
 80076c0:	621a      	str	r2, [r3, #32]
}
 80076c2:	bf00      	nop
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr

080076ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b085      	sub	sp, #20
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f043 0307 	orr.w	r3, r3, #7
 80076f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	609a      	str	r2, [r3, #8]
}
 80076f8:	bf00      	nop
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr

08007704 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007704:	b480      	push	{r7}
 8007706:	b087      	sub	sp, #28
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
 8007710:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800771e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	021a      	lsls	r2, r3, #8
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	431a      	orrs	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	4313      	orrs	r3, r2
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	609a      	str	r2, [r3, #8]
}
 8007738:	bf00      	nop
 800773a:	371c      	adds	r7, #28
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f003 031f 	and.w	r3, r3, #31
 8007756:	2201      	movs	r2, #1
 8007758:	fa02 f303 	lsl.w	r3, r2, r3
 800775c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6a1a      	ldr	r2, [r3, #32]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	43db      	mvns	r3, r3
 8007766:	401a      	ands	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a1a      	ldr	r2, [r3, #32]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	f003 031f 	and.w	r3, r3, #31
 8007776:	6879      	ldr	r1, [r7, #4]
 8007778:	fa01 f303 	lsl.w	r3, r1, r3
 800777c:	431a      	orrs	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007790:	b480      	push	{r7}
 8007792:	b085      	sub	sp, #20
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e05a      	b.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a21      	ldr	r2, [pc, #132]	@ (800786c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d022      	beq.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077f4:	d01d      	beq.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a1d      	ldr	r2, [pc, #116]	@ (8007870 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d018      	beq.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a1b      	ldr	r2, [pc, #108]	@ (8007874 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d013      	beq.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	4a1a      	ldr	r2, [pc, #104]	@ (8007878 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007810:	4293      	cmp	r3, r2
 8007812:	d00e      	beq.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	4a18      	ldr	r2, [pc, #96]	@ (800787c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d009      	beq.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a17      	ldr	r2, [pc, #92]	@ (8007880 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d004      	beq.n	8007832 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a15      	ldr	r2, [pc, #84]	@ (8007884 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d10c      	bne.n	800784c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007838:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	68ba      	ldr	r2, [r7, #8]
 8007840:	4313      	orrs	r3, r2
 8007842:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68ba      	ldr	r2, [r7, #8]
 800784a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	40010000 	.word	0x40010000
 8007870:	40000400 	.word	0x40000400
 8007874:	40000800 	.word	0x40000800
 8007878:	40000c00 	.word	0x40000c00
 800787c:	40010400 	.word	0x40010400
 8007880:	40014000 	.word	0x40014000
 8007884:	40001800 	.word	0x40001800

08007888 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007888:	b480      	push	{r7}
 800788a:	b085      	sub	sp, #20
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007892:	2300      	movs	r3, #0
 8007894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800789c:	2b01      	cmp	r3, #1
 800789e:	d101      	bne.n	80078a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078a0:	2302      	movs	r3, #2
 80078a2:	e03d      	b.n	8007920 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	68db      	ldr	r3, [r3, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4313      	orrs	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	69db      	ldr	r3, [r3, #28]
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68fa      	ldr	r2, [r7, #12]
 8007914:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e042      	b.n	80079c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b00      	cmp	r3, #0
 8007948:	d106      	bne.n	8007958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f7fb fa54 	bl	8002e00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2224      	movs	r2, #36	@ 0x24
 800795c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68da      	ldr	r2, [r3, #12]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800796e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 ff77 	bl	8008864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	691a      	ldr	r2, [r3, #16]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	695a      	ldr	r2, [r3, #20]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80079a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2200      	movs	r2, #0
 80079aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2220      	movs	r2, #32
 80079b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079c2:	2300      	movs	r3, #0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08c      	sub	sp, #48	@ 0x30
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4613      	mov	r3, r2
 80079d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d156      	bne.n	8007a94 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d002      	beq.n	80079f2 <HAL_UART_Transmit_DMA+0x26>
 80079ec:	88fb      	ldrh	r3, [r7, #6]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d101      	bne.n	80079f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e04f      	b.n	8007a96 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	88fa      	ldrh	r2, [r7, #6]
 8007a00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	88fa      	ldrh	r2, [r7, #6]
 8007a06:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2221      	movs	r2, #33	@ 0x21
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1a:	4a21      	ldr	r2, [pc, #132]	@ (8007aa0 <HAL_UART_Transmit_DMA+0xd4>)
 8007a1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a22:	4a20      	ldr	r2, [pc, #128]	@ (8007aa4 <HAL_UART_Transmit_DMA+0xd8>)
 8007a24:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa8 <HAL_UART_Transmit_DMA+0xdc>)
 8007a2c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a32:	2200      	movs	r2, #0
 8007a34:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007a36:	f107 0308 	add.w	r3, r7, #8
 8007a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	461a      	mov	r2, r3
 8007a4c:	88fb      	ldrh	r3, [r7, #6]
 8007a4e:	f7fc fcbd 	bl	80043cc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a5a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	3314      	adds	r3, #20
 8007a62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3314      	adds	r3, #20
 8007a7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007a7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6a39      	ldr	r1, [r7, #32]
 8007a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e5      	bne.n	8007a5c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007a90:	2300      	movs	r3, #0
 8007a92:	e000      	b.n	8007a96 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007a94:	2302      	movs	r3, #2
  }
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3730      	adds	r7, #48	@ 0x30
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}
 8007a9e:	bf00      	nop
 8007aa0:	080080f1 	.word	0x080080f1
 8007aa4:	0800818b 	.word	0x0800818b
 8007aa8:	0800830f 	.word	0x0800830f

08007aac <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b08c      	sub	sp, #48	@ 0x30
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b20      	cmp	r3, #32
 8007ac4:	d14a      	bne.n	8007b5c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d002      	beq.n	8007ad2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007acc:	88fb      	ldrh	r3, [r7, #6]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d101      	bne.n	8007ad6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e043      	b.n	8007b5e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007ae2:	88fb      	ldrh	r3, [r7, #6]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	68b9      	ldr	r1, [r7, #8]
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 fc5b 	bl	80083a4 <UART_Start_Receive_DMA>
 8007aee:	4603      	mov	r3, r0
 8007af0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007af4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d12c      	bne.n	8007b56 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d125      	bne.n	8007b50 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	613b      	str	r3, [r7, #16]
 8007b18:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	330c      	adds	r3, #12
 8007b20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	617b      	str	r3, [r7, #20]
   return(result);
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	f043 0310 	orr.w	r3, r3, #16
 8007b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	330c      	adds	r3, #12
 8007b38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6a39      	ldr	r1, [r7, #32]
 8007b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e5      	bne.n	8007b1a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007b4e:	e002      	b.n	8007b56 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007b50:	2301      	movs	r3, #1
 8007b52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007b56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b5a:	e000      	b.n	8007b5e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007b5c:	2302      	movs	r3, #2
  }
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3730      	adds	r7, #48	@ 0x30
 8007b62:	46bd      	mov	sp, r7
 8007b64:	bd80      	pop	{r7, pc}
	...

08007b68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b0ba      	sub	sp, #232	@ 0xe8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b9e:	f003 030f 	and.w	r3, r3, #15
 8007ba2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007ba6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d10f      	bne.n	8007bce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb2:	f003 0320 	and.w	r3, r3, #32
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d009      	beq.n	8007bce <HAL_UART_IRQHandler+0x66>
 8007bba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fd8d 	bl	80086e6 <UART_Receive_IT>
      return;
 8007bcc:	e25b      	b.n	8008086 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007bce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80de 	beq.w	8007d94 <HAL_UART_IRQHandler+0x22c>
 8007bd8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d106      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 80d1 	beq.w	8007d94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <HAL_UART_IRQHandler+0xae>
 8007bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0e:	f043 0201 	orr.w	r2, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c1a:	f003 0304 	and.w	r3, r3, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00b      	beq.n	8007c3a <HAL_UART_IRQHandler+0xd2>
 8007c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d005      	beq.n	8007c3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c32:	f043 0202 	orr.w	r2, r3, #2
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c3e:	f003 0302 	and.w	r3, r3, #2
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00b      	beq.n	8007c5e <HAL_UART_IRQHandler+0xf6>
 8007c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c4a:	f003 0301 	and.w	r3, r3, #1
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d005      	beq.n	8007c5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c56:	f043 0204 	orr.w	r2, r3, #4
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c62:	f003 0308 	and.w	r3, r3, #8
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d011      	beq.n	8007c8e <HAL_UART_IRQHandler+0x126>
 8007c6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d105      	bne.n	8007c82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d005      	beq.n	8007c8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c86:	f043 0208 	orr.w	r2, r3, #8
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f000 81f2 	beq.w	800807c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x14e>
 8007ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d002      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 fd18 	bl	80086e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	695b      	ldr	r3, [r3, #20]
 8007cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cc0:	2b40      	cmp	r3, #64	@ 0x40
 8007cc2:	bf0c      	ite	eq
 8007cc4:	2301      	moveq	r3, #1
 8007cc6:	2300      	movne	r3, #0
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d103      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x17a>
 8007cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d04f      	beq.n	8007d82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fc20 	bl	8008528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf2:	2b40      	cmp	r3, #64	@ 0x40
 8007cf4:	d141      	bne.n	8007d7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	3314      	adds	r3, #20
 8007cfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007d0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3314      	adds	r3, #20
 8007d1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007d22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007d26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007d2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007d3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1d9      	bne.n	8007cf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d013      	beq.n	8007d72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d4e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f48 <HAL_UART_IRQHandler+0x3e0>)
 8007d50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fc fc00 	bl	800455c <HAL_DMA_Abort_IT>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d016      	beq.n	8007d90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d70:	e00e      	b.n	8007d90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 f9b2 	bl	80080dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d78:	e00a      	b.n	8007d90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 f9ae 	bl	80080dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d80:	e006      	b.n	8007d90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9aa 	bl	80080dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007d8e:	e175      	b.n	800807c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d90:	bf00      	nop
    return;
 8007d92:	e173      	b.n	800807c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	f040 814f 	bne.w	800803c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da2:	f003 0310 	and.w	r3, r3, #16
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f000 8148 	beq.w	800803c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007dac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 8141 	beq.w	800803c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007dba:	2300      	movs	r3, #0
 8007dbc:	60bb      	str	r3, [r7, #8]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	60bb      	str	r3, [r7, #8]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	60bb      	str	r3, [r7, #8]
 8007dce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dda:	2b40      	cmp	r3, #64	@ 0x40
 8007ddc:	f040 80b6 	bne.w	8007f4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007dec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	f000 8145 	beq.w	8008080 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007dfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007dfe:	429a      	cmp	r2, r3
 8007e00:	f080 813e 	bcs.w	8008080 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007e0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e10:	69db      	ldr	r3, [r3, #28]
 8007e12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007e16:	f000 8088 	beq.w	8007f2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	330c      	adds	r3, #12
 8007e20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	330c      	adds	r3, #12
 8007e42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007e46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007e4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007e52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1d9      	bne.n	8007e1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	3314      	adds	r3, #20
 8007e6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e70:	e853 3f00 	ldrex	r3, [r3]
 8007e74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007e76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007e78:	f023 0301 	bic.w	r3, r3, #1
 8007e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	3314      	adds	r3, #20
 8007e86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007e8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007e8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007e92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007e96:	e841 2300 	strex	r3, r2, [r1]
 8007e9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1e1      	bne.n	8007e66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	3314      	adds	r3, #20
 8007ea8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eaa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007eac:	e853 3f00 	ldrex	r3, [r3]
 8007eb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007eb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007eb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3314      	adds	r3, #20
 8007ec2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ec6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ecc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ece:	e841 2300 	strex	r3, r2, [r1]
 8007ed2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007ed4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1e3      	bne.n	8007ea2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2220      	movs	r2, #32
 8007ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ef2:	e853 3f00 	ldrex	r3, [r3]
 8007ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ef8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007efa:	f023 0310 	bic.w	r3, r3, #16
 8007efe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	330c      	adds	r3, #12
 8007f08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007f0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f14:	e841 2300 	strex	r3, r2, [r1]
 8007f18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1e3      	bne.n	8007ee8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fc faa9 	bl	800447c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	1ad3      	subs	r3, r2, r3
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f7f8 fddf 	bl	8000b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f46:	e09b      	b.n	8008080 <HAL_UART_IRQHandler+0x518>
 8007f48:	080085ef 	.word	0x080085ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	1ad3      	subs	r3, r2, r3
 8007f58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	f000 808e 	beq.w	8008084 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007f68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 8089 	beq.w	8008084 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	330c      	adds	r3, #12
 8007f78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	330c      	adds	r3, #12
 8007f92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007f96:	647a      	str	r2, [r7, #68]	@ 0x44
 8007f98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007f9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e3      	bne.n	8007f72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3314      	adds	r3, #20
 8007fb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb4:	e853 3f00 	ldrex	r3, [r3]
 8007fb8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fba:	6a3b      	ldr	r3, [r7, #32]
 8007fbc:	f023 0301 	bic.w	r3, r3, #1
 8007fc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3314      	adds	r3, #20
 8007fca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007fce:	633a      	str	r2, [r7, #48]	@ 0x30
 8007fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd6:	e841 2300 	strex	r3, r2, [r1]
 8007fda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d1e3      	bne.n	8007faa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2220      	movs	r2, #32
 8007fe6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2200      	movs	r2, #0
 8007fee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	330c      	adds	r3, #12
 8007ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	e853 3f00 	ldrex	r3, [r3]
 8007ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 0310 	bic.w	r3, r3, #16
 8008006:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	330c      	adds	r3, #12
 8008010:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008014:	61fa      	str	r2, [r7, #28]
 8008016:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008018:	69b9      	ldr	r1, [r7, #24]
 800801a:	69fa      	ldr	r2, [r7, #28]
 800801c:	e841 2300 	strex	r3, r2, [r1]
 8008020:	617b      	str	r3, [r7, #20]
   return(result);
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d1e3      	bne.n	8007ff0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2202      	movs	r2, #2
 800802c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800802e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f7f8 fd65 	bl	8000b04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800803a:	e023      	b.n	8008084 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800803c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008044:	2b00      	cmp	r3, #0
 8008046:	d009      	beq.n	800805c <HAL_UART_IRQHandler+0x4f4>
 8008048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800804c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008050:	2b00      	cmp	r3, #0
 8008052:	d003      	beq.n	800805c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f000 fade 	bl	8008616 <UART_Transmit_IT>
    return;
 800805a:	e014      	b.n	8008086 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800805c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00e      	beq.n	8008086 <HAL_UART_IRQHandler+0x51e>
 8008068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800806c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008070:	2b00      	cmp	r3, #0
 8008072:	d008      	beq.n	8008086 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fb1e 	bl	80086b6 <UART_EndTransmit_IT>
    return;
 800807a:	e004      	b.n	8008086 <HAL_UART_IRQHandler+0x51e>
    return;
 800807c:	bf00      	nop
 800807e:	e002      	b.n	8008086 <HAL_UART_IRQHandler+0x51e>
      return;
 8008080:	bf00      	nop
 8008082:	e000      	b.n	8008086 <HAL_UART_IRQHandler+0x51e>
      return;
 8008084:	bf00      	nop
  }
}
 8008086:	37e8      	adds	r7, #232	@ 0xe8
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80080a8:	bf00      	nop
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80080bc:	bf00      	nop
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr

080080c8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80080d0:	bf00      	nop
 80080d2:	370c      	adds	r7, #12
 80080d4:	46bd      	mov	sp, r7
 80080d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080da:	4770      	bx	lr

080080dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80080dc:	b480      	push	{r7}
 80080de:	b083      	sub	sp, #12
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b090      	sub	sp, #64	@ 0x40
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008108:	2b00      	cmp	r3, #0
 800810a:	d137      	bne.n	800817c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800810c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800810e:	2200      	movs	r2, #0
 8008110:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3314      	adds	r3, #20
 8008118:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800811a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811c:	e853 3f00 	ldrex	r3, [r3]
 8008120:	623b      	str	r3, [r7, #32]
   return(result);
 8008122:	6a3b      	ldr	r3, [r7, #32]
 8008124:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008128:	63bb      	str	r3, [r7, #56]	@ 0x38
 800812a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3314      	adds	r3, #20
 8008130:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008132:	633a      	str	r2, [r7, #48]	@ 0x30
 8008134:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008136:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800813a:	e841 2300 	strex	r3, r2, [r1]
 800813e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008142:	2b00      	cmp	r3, #0
 8008144:	d1e5      	bne.n	8008112 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008146:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	330c      	adds	r3, #12
 800814c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	e853 3f00 	ldrex	r3, [r3]
 8008154:	60fb      	str	r3, [r7, #12]
   return(result);
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800815c:	637b      	str	r3, [r7, #52]	@ 0x34
 800815e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008166:	61fa      	str	r2, [r7, #28]
 8008168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	69b9      	ldr	r1, [r7, #24]
 800816c:	69fa      	ldr	r2, [r7, #28]
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	617b      	str	r3, [r7, #20]
   return(result);
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e5      	bne.n	8008146 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800817a:	e002      	b.n	8008182 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800817c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800817e:	f7ff ff85 	bl	800808c <HAL_UART_TxCpltCallback>
}
 8008182:	bf00      	nop
 8008184:	3740      	adds	r7, #64	@ 0x40
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008196:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f7ff ff81 	bl	80080a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b09c      	sub	sp, #112	@ 0x70
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081b2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d172      	bne.n	80082a8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80081c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081c4:	2200      	movs	r2, #0
 80081c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80081c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	330c      	adds	r3, #12
 80081ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80081d2:	e853 3f00 	ldrex	r3, [r3]
 80081d6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80081d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80081da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80081e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	330c      	adds	r3, #12
 80081e6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80081e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80081ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081f0:	e841 2300 	strex	r3, r2, [r1]
 80081f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80081f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d1e5      	bne.n	80081c8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3314      	adds	r3, #20
 8008202:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800820c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800820e:	f023 0301 	bic.w	r3, r3, #1
 8008212:	667b      	str	r3, [r7, #100]	@ 0x64
 8008214:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	3314      	adds	r3, #20
 800821a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800821c:	647a      	str	r2, [r7, #68]	@ 0x44
 800821e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008224:	e841 2300 	strex	r3, r2, [r1]
 8008228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800822a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e5      	bne.n	80081fc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3314      	adds	r3, #20
 8008236:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800823a:	e853 3f00 	ldrex	r3, [r3]
 800823e:	623b      	str	r3, [r7, #32]
   return(result);
 8008240:	6a3b      	ldr	r3, [r7, #32]
 8008242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008246:	663b      	str	r3, [r7, #96]	@ 0x60
 8008248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3314      	adds	r3, #20
 800824e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008250:	633a      	str	r2, [r7, #48]	@ 0x30
 8008252:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008258:	e841 2300 	strex	r3, r2, [r1]
 800825c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800825e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e5      	bne.n	8008230 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008264:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008266:	2220      	movs	r2, #32
 8008268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800826c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800826e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008270:	2b01      	cmp	r3, #1
 8008272:	d119      	bne.n	80082a8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008274:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	330c      	adds	r3, #12
 800827a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	e853 3f00 	ldrex	r3, [r3]
 8008282:	60fb      	str	r3, [r7, #12]
   return(result);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f023 0310 	bic.w	r3, r3, #16
 800828a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800828c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	330c      	adds	r3, #12
 8008292:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008294:	61fa      	str	r2, [r7, #28]
 8008296:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008298:	69b9      	ldr	r1, [r7, #24]
 800829a:	69fa      	ldr	r2, [r7, #28]
 800829c:	e841 2300 	strex	r3, r2, [r1]
 80082a0:	617b      	str	r3, [r7, #20]
   return(result);
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d1e5      	bne.n	8008274 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082aa:	2200      	movs	r2, #0
 80082ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d106      	bne.n	80082c4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082ba:	4619      	mov	r1, r3
 80082bc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80082be:	f7f8 fc21 	bl	8000b04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082c2:	e002      	b.n	80082ca <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80082c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80082c6:	f7ff fef5 	bl	80080b4 <HAL_UART_RxCpltCallback>
}
 80082ca:	bf00      	nop
 80082cc:	3770      	adds	r7, #112	@ 0x70
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082de:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2201      	movs	r2, #1
 80082e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d108      	bne.n	8008300 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082f2:	085b      	lsrs	r3, r3, #1
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	4619      	mov	r1, r3
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f7f8 fc03 	bl	8000b04 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80082fe:	e002      	b.n	8008306 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff fee1 	bl	80080c8 <HAL_UART_RxHalfCpltCallback>
}
 8008306:	bf00      	nop
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b084      	sub	sp, #16
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832a:	2b80      	cmp	r3, #128	@ 0x80
 800832c:	bf0c      	ite	eq
 800832e:	2301      	moveq	r3, #1
 8008330:	2300      	movne	r3, #0
 8008332:	b2db      	uxtb	r3, r3
 8008334:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b21      	cmp	r3, #33	@ 0x21
 8008340:	d108      	bne.n	8008354 <UART_DMAError+0x46>
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d005      	beq.n	8008354 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	2200      	movs	r2, #0
 800834c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800834e:	68b8      	ldr	r0, [r7, #8]
 8008350:	f000 f8c2 	bl	80084d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	695b      	ldr	r3, [r3, #20]
 800835a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800835e:	2b40      	cmp	r3, #64	@ 0x40
 8008360:	bf0c      	ite	eq
 8008362:	2301      	moveq	r3, #1
 8008364:	2300      	movne	r3, #0
 8008366:	b2db      	uxtb	r3, r3
 8008368:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b22      	cmp	r3, #34	@ 0x22
 8008374:	d108      	bne.n	8008388 <UART_DMAError+0x7a>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d005      	beq.n	8008388 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008382:	68b8      	ldr	r0, [r7, #8]
 8008384:	f000 f8d0 	bl	8008528 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800838c:	f043 0210 	orr.w	r2, r3, #16
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008394:	68b8      	ldr	r0, [r7, #8]
 8008396:	f7ff fea1 	bl	80080dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800839a:	bf00      	nop
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b098      	sub	sp, #96	@ 0x60
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80083b2:	68ba      	ldr	r2, [r7, #8]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	88fa      	ldrh	r2, [r7, #6]
 80083bc:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2222      	movs	r2, #34	@ 0x22
 80083c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d0:	4a3e      	ldr	r2, [pc, #248]	@ (80084cc <UART_Start_Receive_DMA+0x128>)
 80083d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083d8:	4a3d      	ldr	r2, [pc, #244]	@ (80084d0 <UART_Start_Receive_DMA+0x12c>)
 80083da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e0:	4a3c      	ldr	r2, [pc, #240]	@ (80084d4 <UART_Start_Receive_DMA+0x130>)
 80083e2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e8:	2200      	movs	r2, #0
 80083ea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80083ec:	f107 0308 	add.w	r3, r7, #8
 80083f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	3304      	adds	r3, #4
 80083fc:	4619      	mov	r1, r3
 80083fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008400:	681a      	ldr	r2, [r3, #0]
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	f7fb ffe2 	bl	80043cc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008408:	2300      	movs	r3, #0
 800840a:	613b      	str	r3, [r7, #16]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	613b      	str	r3, [r7, #16]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d019      	beq.n	800845a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	330c      	adds	r3, #12
 800842c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800843c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	330c      	adds	r3, #12
 8008444:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008446:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008448:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800844c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008454:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e5      	bne.n	8008426 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3314      	adds	r3, #20
 8008460:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008464:	e853 3f00 	ldrex	r3, [r3]
 8008468:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800846a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846c:	f043 0301 	orr.w	r3, r3, #1
 8008470:	657b      	str	r3, [r7, #84]	@ 0x54
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	3314      	adds	r3, #20
 8008478:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800847a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800847c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800847e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008480:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008482:	e841 2300 	strex	r3, r2, [r1]
 8008486:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e5      	bne.n	800845a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	3314      	adds	r3, #20
 8008494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	69bb      	ldr	r3, [r7, #24]
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	617b      	str	r3, [r7, #20]
   return(result);
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	3314      	adds	r3, #20
 80084ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80084ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80084b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6a39      	ldr	r1, [r7, #32]
 80084b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e5      	bne.n	800848e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3760      	adds	r7, #96	@ 0x60
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	080081a7 	.word	0x080081a7
 80084d0:	080082d3 	.word	0x080082d3
 80084d4:	0800830f 	.word	0x0800830f

080084d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084d8:	b480      	push	{r7}
 80084da:	b089      	sub	sp, #36	@ 0x24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	330c      	adds	r3, #12
 80084e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	e853 3f00 	ldrex	r3, [r3]
 80084ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80084f6:	61fb      	str	r3, [r7, #28]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	330c      	adds	r3, #12
 80084fe:	69fa      	ldr	r2, [r7, #28]
 8008500:	61ba      	str	r2, [r7, #24]
 8008502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008504:	6979      	ldr	r1, [r7, #20]
 8008506:	69ba      	ldr	r2, [r7, #24]
 8008508:	e841 2300 	strex	r3, r2, [r1]
 800850c:	613b      	str	r3, [r7, #16]
   return(result);
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1e5      	bne.n	80084e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2220      	movs	r2, #32
 8008518:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800851c:	bf00      	nop
 800851e:	3724      	adds	r7, #36	@ 0x24
 8008520:	46bd      	mov	sp, r7
 8008522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008526:	4770      	bx	lr

08008528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008528:	b480      	push	{r7}
 800852a:	b095      	sub	sp, #84	@ 0x54
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	330c      	adds	r3, #12
 8008536:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800853a:	e853 3f00 	ldrex	r3, [r3]
 800853e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	330c      	adds	r3, #12
 800854e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008550:	643a      	str	r2, [r7, #64]	@ 0x40
 8008552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008554:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008556:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008558:	e841 2300 	strex	r3, r2, [r1]
 800855c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800855e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008560:	2b00      	cmp	r3, #0
 8008562:	d1e5      	bne.n	8008530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3314      	adds	r3, #20
 800856a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800856c:	6a3b      	ldr	r3, [r7, #32]
 800856e:	e853 3f00 	ldrex	r3, [r3]
 8008572:	61fb      	str	r3, [r7, #28]
   return(result);
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f023 0301 	bic.w	r3, r3, #1
 800857a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3314      	adds	r3, #20
 8008582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800858a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800858c:	e841 2300 	strex	r3, r2, [r1]
 8008590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1e5      	bne.n	8008564 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800859c:	2b01      	cmp	r3, #1
 800859e:	d119      	bne.n	80085d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	330c      	adds	r3, #12
 80085a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f023 0310 	bic.w	r3, r3, #16
 80085b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	330c      	adds	r3, #12
 80085be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085c0:	61ba      	str	r2, [r7, #24]
 80085c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	6979      	ldr	r1, [r7, #20]
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	613b      	str	r3, [r7, #16]
   return(result);
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e5      	bne.n	80085a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2220      	movs	r2, #32
 80085d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80085e2:	bf00      	nop
 80085e4:	3754      	adds	r7, #84	@ 0x54
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f7ff fd67 	bl	80080dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008616:	b480      	push	{r7}
 8008618:	b085      	sub	sp, #20
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b21      	cmp	r3, #33	@ 0x21
 8008628:	d13e      	bne.n	80086a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008632:	d114      	bne.n	800865e <UART_Transmit_IT+0x48>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	691b      	ldr	r3, [r3, #16]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d110      	bne.n	800865e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008650:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a1b      	ldr	r3, [r3, #32]
 8008656:	1c9a      	adds	r2, r3, #2
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	621a      	str	r2, [r3, #32]
 800865c:	e008      	b.n	8008670 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6a1b      	ldr	r3, [r3, #32]
 8008662:	1c59      	adds	r1, r3, #1
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6211      	str	r1, [r2, #32]
 8008668:	781a      	ldrb	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008674:	b29b      	uxth	r3, r3
 8008676:	3b01      	subs	r3, #1
 8008678:	b29b      	uxth	r3, r3
 800867a:	687a      	ldr	r2, [r7, #4]
 800867c:	4619      	mov	r1, r3
 800867e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008680:	2b00      	cmp	r3, #0
 8008682:	d10f      	bne.n	80086a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	68da      	ldr	r2, [r3, #12]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008692:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68da      	ldr	r2, [r3, #12]
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80086a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80086a4:	2300      	movs	r3, #0
 80086a6:	e000      	b.n	80086aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80086a8:	2302      	movs	r3, #2
  }
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3714      	adds	r7, #20
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68da      	ldr	r2, [r3, #12]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80086cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2220      	movs	r2, #32
 80086d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	f7ff fcd8 	bl	800808c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3708      	adds	r7, #8
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}

080086e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80086e6:	b580      	push	{r7, lr}
 80086e8:	b08c      	sub	sp, #48	@ 0x30
 80086ea:	af00      	add	r7, sp, #0
 80086ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b22      	cmp	r3, #34	@ 0x22
 80086f8:	f040 80ae 	bne.w	8008858 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008704:	d117      	bne.n	8008736 <UART_Receive_IT+0x50>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d113      	bne.n	8008736 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008716:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	b29b      	uxth	r3, r3
 8008720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008724:	b29a      	uxth	r2, r3
 8008726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008728:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872e:	1c9a      	adds	r2, r3, #2
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	629a      	str	r2, [r3, #40]	@ 0x28
 8008734:	e026      	b.n	8008784 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800873c:	2300      	movs	r3, #0
 800873e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008748:	d007      	beq.n	800875a <UART_Receive_IT+0x74>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d10a      	bne.n	8008768 <UART_Receive_IT+0x82>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d106      	bne.n	8008768 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	b2da      	uxtb	r2, r3
 8008762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	e008      	b.n	800877a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	b2db      	uxtb	r3, r3
 8008770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008774:	b2da      	uxtb	r2, r3
 8008776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008778:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800877e:	1c5a      	adds	r2, r3, #1
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008788:	b29b      	uxth	r3, r3
 800878a:	3b01      	subs	r3, #1
 800878c:	b29b      	uxth	r3, r3
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	4619      	mov	r1, r3
 8008792:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008794:	2b00      	cmp	r3, #0
 8008796:	d15d      	bne.n	8008854 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68da      	ldr	r2, [r3, #12]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f022 0220 	bic.w	r2, r2, #32
 80087a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80087b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	695a      	ldr	r2, [r3, #20]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0201 	bic.w	r2, r2, #1
 80087c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2220      	movs	r2, #32
 80087cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2200      	movs	r2, #0
 80087d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d135      	bne.n	800884a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	330c      	adds	r3, #12
 80087ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	613b      	str	r3, [r7, #16]
   return(result);
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f023 0310 	bic.w	r3, r3, #16
 80087fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	330c      	adds	r3, #12
 8008802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008804:	623a      	str	r2, [r7, #32]
 8008806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008808:	69f9      	ldr	r1, [r7, #28]
 800880a:	6a3a      	ldr	r2, [r7, #32]
 800880c:	e841 2300 	strex	r3, r2, [r1]
 8008810:	61bb      	str	r3, [r7, #24]
   return(result);
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d1e5      	bne.n	80087e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0310 	and.w	r3, r3, #16
 8008822:	2b10      	cmp	r3, #16
 8008824:	d10a      	bne.n	800883c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008826:	2300      	movs	r3, #0
 8008828:	60fb      	str	r3, [r7, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	60fb      	str	r3, [r7, #12]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	685b      	ldr	r3, [r3, #4]
 8008838:	60fb      	str	r3, [r7, #12]
 800883a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7f8 f95e 	bl	8000b04 <HAL_UARTEx_RxEventCallback>
 8008848:	e002      	b.n	8008850 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f7ff fc32 	bl	80080b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008850:	2300      	movs	r3, #0
 8008852:	e002      	b.n	800885a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	e000      	b.n	800885a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008858:	2302      	movs	r3, #2
  }
}
 800885a:	4618      	mov	r0, r3
 800885c:	3730      	adds	r7, #48	@ 0x30
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
	...

08008864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008868:	b0c0      	sub	sp, #256	@ 0x100
 800886a:	af00      	add	r7, sp, #0
 800886c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800887c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008880:	68d9      	ldr	r1, [r3, #12]
 8008882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	ea40 0301 	orr.w	r3, r0, r1
 800888c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800888e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008892:	689a      	ldr	r2, [r3, #8]
 8008894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	431a      	orrs	r2, r3
 800889c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a0:	695b      	ldr	r3, [r3, #20]
 80088a2:	431a      	orrs	r2, r3
 80088a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80088b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80088bc:	f021 010c 	bic.w	r1, r1, #12
 80088c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80088ca:	430b      	orrs	r3, r1
 80088cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80088ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	695b      	ldr	r3, [r3, #20]
 80088d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80088da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088de:	6999      	ldr	r1, [r3, #24]
 80088e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088e4:	681a      	ldr	r2, [r3, #0]
 80088e6:	ea40 0301 	orr.w	r3, r0, r1
 80088ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80088ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	4b8f      	ldr	r3, [pc, #572]	@ (8008b30 <UART_SetConfig+0x2cc>)
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d005      	beq.n	8008904 <UART_SetConfig+0xa0>
 80088f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088fc:	681a      	ldr	r2, [r3, #0]
 80088fe:	4b8d      	ldr	r3, [pc, #564]	@ (8008b34 <UART_SetConfig+0x2d0>)
 8008900:	429a      	cmp	r2, r3
 8008902:	d104      	bne.n	800890e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008904:	f7fd fd20 	bl	8006348 <HAL_RCC_GetPCLK2Freq>
 8008908:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800890c:	e003      	b.n	8008916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800890e:	f7fd fd07 	bl	8006320 <HAL_RCC_GetPCLK1Freq>
 8008912:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008920:	f040 810c 	bne.w	8008b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008928:	2200      	movs	r2, #0
 800892a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800892e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008936:	4622      	mov	r2, r4
 8008938:	462b      	mov	r3, r5
 800893a:	1891      	adds	r1, r2, r2
 800893c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800893e:	415b      	adcs	r3, r3
 8008940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008946:	4621      	mov	r1, r4
 8008948:	eb12 0801 	adds.w	r8, r2, r1
 800894c:	4629      	mov	r1, r5
 800894e:	eb43 0901 	adc.w	r9, r3, r1
 8008952:	f04f 0200 	mov.w	r2, #0
 8008956:	f04f 0300 	mov.w	r3, #0
 800895a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800895e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008966:	4690      	mov	r8, r2
 8008968:	4699      	mov	r9, r3
 800896a:	4623      	mov	r3, r4
 800896c:	eb18 0303 	adds.w	r3, r8, r3
 8008970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008974:	462b      	mov	r3, r5
 8008976:	eb49 0303 	adc.w	r3, r9, r3
 800897a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800897e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008982:	685b      	ldr	r3, [r3, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800898a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800898e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008992:	460b      	mov	r3, r1
 8008994:	18db      	adds	r3, r3, r3
 8008996:	653b      	str	r3, [r7, #80]	@ 0x50
 8008998:	4613      	mov	r3, r2
 800899a:	eb42 0303 	adc.w	r3, r2, r3
 800899e:	657b      	str	r3, [r7, #84]	@ 0x54
 80089a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80089a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80089a8:	f7f7 fc6a 	bl	8000280 <__aeabi_uldivmod>
 80089ac:	4602      	mov	r2, r0
 80089ae:	460b      	mov	r3, r1
 80089b0:	4b61      	ldr	r3, [pc, #388]	@ (8008b38 <UART_SetConfig+0x2d4>)
 80089b2:	fba3 2302 	umull	r2, r3, r3, r2
 80089b6:	095b      	lsrs	r3, r3, #5
 80089b8:	011c      	lsls	r4, r3, #4
 80089ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80089be:	2200      	movs	r2, #0
 80089c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80089c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80089c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80089cc:	4642      	mov	r2, r8
 80089ce:	464b      	mov	r3, r9
 80089d0:	1891      	adds	r1, r2, r2
 80089d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80089d4:	415b      	adcs	r3, r3
 80089d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80089d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80089dc:	4641      	mov	r1, r8
 80089de:	eb12 0a01 	adds.w	sl, r2, r1
 80089e2:	4649      	mov	r1, r9
 80089e4:	eb43 0b01 	adc.w	fp, r3, r1
 80089e8:	f04f 0200 	mov.w	r2, #0
 80089ec:	f04f 0300 	mov.w	r3, #0
 80089f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80089f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80089f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80089fc:	4692      	mov	sl, r2
 80089fe:	469b      	mov	fp, r3
 8008a00:	4643      	mov	r3, r8
 8008a02:	eb1a 0303 	adds.w	r3, sl, r3
 8008a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8008a10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008a20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008a28:	460b      	mov	r3, r1
 8008a2a:	18db      	adds	r3, r3, r3
 8008a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a2e:	4613      	mov	r3, r2
 8008a30:	eb42 0303 	adc.w	r3, r2, r3
 8008a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008a3e:	f7f7 fc1f 	bl	8000280 <__aeabi_uldivmod>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4611      	mov	r1, r2
 8008a48:	4b3b      	ldr	r3, [pc, #236]	@ (8008b38 <UART_SetConfig+0x2d4>)
 8008a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8008a4e:	095b      	lsrs	r3, r3, #5
 8008a50:	2264      	movs	r2, #100	@ 0x64
 8008a52:	fb02 f303 	mul.w	r3, r2, r3
 8008a56:	1acb      	subs	r3, r1, r3
 8008a58:	00db      	lsls	r3, r3, #3
 8008a5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008a5e:	4b36      	ldr	r3, [pc, #216]	@ (8008b38 <UART_SetConfig+0x2d4>)
 8008a60:	fba3 2302 	umull	r2, r3, r3, r2
 8008a64:	095b      	lsrs	r3, r3, #5
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008a6c:	441c      	add	r4, r3
 8008a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008a80:	4642      	mov	r2, r8
 8008a82:	464b      	mov	r3, r9
 8008a84:	1891      	adds	r1, r2, r2
 8008a86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008a88:	415b      	adcs	r3, r3
 8008a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008a90:	4641      	mov	r1, r8
 8008a92:	1851      	adds	r1, r2, r1
 8008a94:	6339      	str	r1, [r7, #48]	@ 0x30
 8008a96:	4649      	mov	r1, r9
 8008a98:	414b      	adcs	r3, r1
 8008a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a9c:	f04f 0200 	mov.w	r2, #0
 8008aa0:	f04f 0300 	mov.w	r3, #0
 8008aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008aa8:	4659      	mov	r1, fp
 8008aaa:	00cb      	lsls	r3, r1, #3
 8008aac:	4651      	mov	r1, sl
 8008aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ab2:	4651      	mov	r1, sl
 8008ab4:	00ca      	lsls	r2, r1, #3
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	4642      	mov	r2, r8
 8008abe:	189b      	adds	r3, r3, r2
 8008ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ac4:	464b      	mov	r3, r9
 8008ac6:	460a      	mov	r2, r1
 8008ac8:	eb42 0303 	adc.w	r3, r2, r3
 8008acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008adc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	18db      	adds	r3, r3, r3
 8008ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008aea:	4613      	mov	r3, r2
 8008aec:	eb42 0303 	adc.w	r3, r2, r3
 8008af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008afa:	f7f7 fbc1 	bl	8000280 <__aeabi_uldivmod>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4b0d      	ldr	r3, [pc, #52]	@ (8008b38 <UART_SetConfig+0x2d4>)
 8008b04:	fba3 1302 	umull	r1, r3, r3, r2
 8008b08:	095b      	lsrs	r3, r3, #5
 8008b0a:	2164      	movs	r1, #100	@ 0x64
 8008b0c:	fb01 f303 	mul.w	r3, r1, r3
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	3332      	adds	r3, #50	@ 0x32
 8008b16:	4a08      	ldr	r2, [pc, #32]	@ (8008b38 <UART_SetConfig+0x2d4>)
 8008b18:	fba2 2303 	umull	r2, r3, r2, r3
 8008b1c:	095b      	lsrs	r3, r3, #5
 8008b1e:	f003 0207 	and.w	r2, r3, #7
 8008b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4422      	add	r2, r4
 8008b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008b2c:	e106      	b.n	8008d3c <UART_SetConfig+0x4d8>
 8008b2e:	bf00      	nop
 8008b30:	40011000 	.word	0x40011000
 8008b34:	40011400 	.word	0x40011400
 8008b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b40:	2200      	movs	r2, #0
 8008b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008b46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008b4e:	4642      	mov	r2, r8
 8008b50:	464b      	mov	r3, r9
 8008b52:	1891      	adds	r1, r2, r2
 8008b54:	6239      	str	r1, [r7, #32]
 8008b56:	415b      	adcs	r3, r3
 8008b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b5e:	4641      	mov	r1, r8
 8008b60:	1854      	adds	r4, r2, r1
 8008b62:	4649      	mov	r1, r9
 8008b64:	eb43 0501 	adc.w	r5, r3, r1
 8008b68:	f04f 0200 	mov.w	r2, #0
 8008b6c:	f04f 0300 	mov.w	r3, #0
 8008b70:	00eb      	lsls	r3, r5, #3
 8008b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b76:	00e2      	lsls	r2, r4, #3
 8008b78:	4614      	mov	r4, r2
 8008b7a:	461d      	mov	r5, r3
 8008b7c:	4643      	mov	r3, r8
 8008b7e:	18e3      	adds	r3, r4, r3
 8008b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b84:	464b      	mov	r3, r9
 8008b86:	eb45 0303 	adc.w	r3, r5, r3
 8008b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	2200      	movs	r2, #0
 8008b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008b9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008baa:	4629      	mov	r1, r5
 8008bac:	008b      	lsls	r3, r1, #2
 8008bae:	4621      	mov	r1, r4
 8008bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	008a      	lsls	r2, r1, #2
 8008bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008bbc:	f7f7 fb60 	bl	8000280 <__aeabi_uldivmod>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	4b60      	ldr	r3, [pc, #384]	@ (8008d48 <UART_SetConfig+0x4e4>)
 8008bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8008bca:	095b      	lsrs	r3, r3, #5
 8008bcc:	011c      	lsls	r4, r3, #4
 8008bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008bd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008be0:	4642      	mov	r2, r8
 8008be2:	464b      	mov	r3, r9
 8008be4:	1891      	adds	r1, r2, r2
 8008be6:	61b9      	str	r1, [r7, #24]
 8008be8:	415b      	adcs	r3, r3
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008bf0:	4641      	mov	r1, r8
 8008bf2:	1851      	adds	r1, r2, r1
 8008bf4:	6139      	str	r1, [r7, #16]
 8008bf6:	4649      	mov	r1, r9
 8008bf8:	414b      	adcs	r3, r1
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	f04f 0200 	mov.w	r2, #0
 8008c00:	f04f 0300 	mov.w	r3, #0
 8008c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c08:	4659      	mov	r1, fp
 8008c0a:	00cb      	lsls	r3, r1, #3
 8008c0c:	4651      	mov	r1, sl
 8008c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c12:	4651      	mov	r1, sl
 8008c14:	00ca      	lsls	r2, r1, #3
 8008c16:	4610      	mov	r0, r2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	4642      	mov	r2, r8
 8008c1e:	189b      	adds	r3, r3, r2
 8008c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008c24:	464b      	mov	r3, r9
 8008c26:	460a      	mov	r2, r1
 8008c28:	eb42 0303 	adc.w	r3, r2, r3
 8008c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	2200      	movs	r2, #0
 8008c38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008c3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008c3c:	f04f 0200 	mov.w	r2, #0
 8008c40:	f04f 0300 	mov.w	r3, #0
 8008c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008c48:	4649      	mov	r1, r9
 8008c4a:	008b      	lsls	r3, r1, #2
 8008c4c:	4641      	mov	r1, r8
 8008c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c52:	4641      	mov	r1, r8
 8008c54:	008a      	lsls	r2, r1, #2
 8008c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008c5a:	f7f7 fb11 	bl	8000280 <__aeabi_uldivmod>
 8008c5e:	4602      	mov	r2, r0
 8008c60:	460b      	mov	r3, r1
 8008c62:	4611      	mov	r1, r2
 8008c64:	4b38      	ldr	r3, [pc, #224]	@ (8008d48 <UART_SetConfig+0x4e4>)
 8008c66:	fba3 2301 	umull	r2, r3, r3, r1
 8008c6a:	095b      	lsrs	r3, r3, #5
 8008c6c:	2264      	movs	r2, #100	@ 0x64
 8008c6e:	fb02 f303 	mul.w	r3, r2, r3
 8008c72:	1acb      	subs	r3, r1, r3
 8008c74:	011b      	lsls	r3, r3, #4
 8008c76:	3332      	adds	r3, #50	@ 0x32
 8008c78:	4a33      	ldr	r2, [pc, #204]	@ (8008d48 <UART_SetConfig+0x4e4>)
 8008c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c7e:	095b      	lsrs	r3, r3, #5
 8008c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008c84:	441c      	add	r4, r3
 8008c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8008c8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008c94:	4642      	mov	r2, r8
 8008c96:	464b      	mov	r3, r9
 8008c98:	1891      	adds	r1, r2, r2
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	415b      	adcs	r3, r3
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ca4:	4641      	mov	r1, r8
 8008ca6:	1851      	adds	r1, r2, r1
 8008ca8:	6039      	str	r1, [r7, #0]
 8008caa:	4649      	mov	r1, r9
 8008cac:	414b      	adcs	r3, r1
 8008cae:	607b      	str	r3, [r7, #4]
 8008cb0:	f04f 0200 	mov.w	r2, #0
 8008cb4:	f04f 0300 	mov.w	r3, #0
 8008cb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008cbc:	4659      	mov	r1, fp
 8008cbe:	00cb      	lsls	r3, r1, #3
 8008cc0:	4651      	mov	r1, sl
 8008cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cc6:	4651      	mov	r1, sl
 8008cc8:	00ca      	lsls	r2, r1, #3
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4603      	mov	r3, r0
 8008cd0:	4642      	mov	r2, r8
 8008cd2:	189b      	adds	r3, r3, r2
 8008cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cd6:	464b      	mov	r3, r9
 8008cd8:	460a      	mov	r2, r1
 8008cda:	eb42 0303 	adc.w	r3, r2, r3
 8008cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008cea:	667a      	str	r2, [r7, #100]	@ 0x64
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008cf8:	4649      	mov	r1, r9
 8008cfa:	008b      	lsls	r3, r1, #2
 8008cfc:	4641      	mov	r1, r8
 8008cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d02:	4641      	mov	r1, r8
 8008d04:	008a      	lsls	r2, r1, #2
 8008d06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008d0a:	f7f7 fab9 	bl	8000280 <__aeabi_uldivmod>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	4b0d      	ldr	r3, [pc, #52]	@ (8008d48 <UART_SetConfig+0x4e4>)
 8008d14:	fba3 1302 	umull	r1, r3, r3, r2
 8008d18:	095b      	lsrs	r3, r3, #5
 8008d1a:	2164      	movs	r1, #100	@ 0x64
 8008d1c:	fb01 f303 	mul.w	r3, r1, r3
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	011b      	lsls	r3, r3, #4
 8008d24:	3332      	adds	r3, #50	@ 0x32
 8008d26:	4a08      	ldr	r2, [pc, #32]	@ (8008d48 <UART_SetConfig+0x4e4>)
 8008d28:	fba2 2303 	umull	r2, r3, r2, r3
 8008d2c:	095b      	lsrs	r3, r3, #5
 8008d2e:	f003 020f 	and.w	r2, r3, #15
 8008d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4422      	add	r2, r4
 8008d3a:	609a      	str	r2, [r3, #8]
}
 8008d3c:	bf00      	nop
 8008d3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008d42:	46bd      	mov	sp, r7
 8008d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d48:	51eb851f 	.word	0x51eb851f

08008d4c <__NVIC_SetPriority>:
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	4603      	mov	r3, r0
 8008d54:	6039      	str	r1, [r7, #0]
 8008d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	db0a      	blt.n	8008d76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	b2da      	uxtb	r2, r3
 8008d64:	490c      	ldr	r1, [pc, #48]	@ (8008d98 <__NVIC_SetPriority+0x4c>)
 8008d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d6a:	0112      	lsls	r2, r2, #4
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	440b      	add	r3, r1
 8008d70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008d74:	e00a      	b.n	8008d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	4908      	ldr	r1, [pc, #32]	@ (8008d9c <__NVIC_SetPriority+0x50>)
 8008d7c:	79fb      	ldrb	r3, [r7, #7]
 8008d7e:	f003 030f 	and.w	r3, r3, #15
 8008d82:	3b04      	subs	r3, #4
 8008d84:	0112      	lsls	r2, r2, #4
 8008d86:	b2d2      	uxtb	r2, r2
 8008d88:	440b      	add	r3, r1
 8008d8a:	761a      	strb	r2, [r3, #24]
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr
 8008d98:	e000e100 	.word	0xe000e100
 8008d9c:	e000ed00 	.word	0xe000ed00

08008da0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008da4:	2100      	movs	r1, #0
 8008da6:	f06f 0004 	mvn.w	r0, #4
 8008daa:	f7ff ffcf 	bl	8008d4c <__NVIC_SetPriority>
#endif
}
 8008dae:	bf00      	nop
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dba:	f3ef 8305 	mrs	r3, IPSR
 8008dbe:	603b      	str	r3, [r7, #0]
  return(result);
 8008dc0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008dc6:	f06f 0305 	mvn.w	r3, #5
 8008dca:	607b      	str	r3, [r7, #4]
 8008dcc:	e00c      	b.n	8008de8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008dce:	4b0a      	ldr	r3, [pc, #40]	@ (8008df8 <osKernelInitialize+0x44>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d105      	bne.n	8008de2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008dd6:	4b08      	ldr	r3, [pc, #32]	@ (8008df8 <osKernelInitialize+0x44>)
 8008dd8:	2201      	movs	r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	607b      	str	r3, [r7, #4]
 8008de0:	e002      	b.n	8008de8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008de2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008de6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008de8:	687b      	ldr	r3, [r7, #4]
}
 8008dea:	4618      	mov	r0, r3
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	20000bd4 	.word	0x20000bd4

08008dfc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e02:	f3ef 8305 	mrs	r3, IPSR
 8008e06:	603b      	str	r3, [r7, #0]
  return(result);
 8008e08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008e0e:	f06f 0305 	mvn.w	r3, #5
 8008e12:	607b      	str	r3, [r7, #4]
 8008e14:	e010      	b.n	8008e38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008e16:	4b0b      	ldr	r3, [pc, #44]	@ (8008e44 <osKernelStart+0x48>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d109      	bne.n	8008e32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008e1e:	f7ff ffbf 	bl	8008da0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008e22:	4b08      	ldr	r3, [pc, #32]	@ (8008e44 <osKernelStart+0x48>)
 8008e24:	2202      	movs	r2, #2
 8008e26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008e28:	f001 f892 	bl	8009f50 <vTaskStartScheduler>
      stat = osOK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	607b      	str	r3, [r7, #4]
 8008e30:	e002      	b.n	8008e38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008e32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e38:	687b      	ldr	r3, [r7, #4]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20000bd4 	.word	0x20000bd4

08008e48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b08e      	sub	sp, #56	@ 0x38
 8008e4c:	af04      	add	r7, sp, #16
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008e54:	2300      	movs	r3, #0
 8008e56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e58:	f3ef 8305 	mrs	r3, IPSR
 8008e5c:	617b      	str	r3, [r7, #20]
  return(result);
 8008e5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d17e      	bne.n	8008f62 <osThreadNew+0x11a>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d07b      	beq.n	8008f62 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008e6a:	2380      	movs	r3, #128	@ 0x80
 8008e6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008e6e:	2318      	movs	r3, #24
 8008e70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008e72:	2300      	movs	r3, #0
 8008e74:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008e76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d045      	beq.n	8008f0e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d002      	beq.n	8008e90 <osThreadNew+0x48>
        name = attr->name;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d008      	beq.n	8008eb6 <osThreadNew+0x6e>
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	2b38      	cmp	r3, #56	@ 0x38
 8008ea8:	d805      	bhi.n	8008eb6 <osThreadNew+0x6e>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <osThreadNew+0x72>
        return (NULL);
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	e054      	b.n	8008f64 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	695b      	ldr	r3, [r3, #20]
 8008ec6:	089b      	lsrs	r3, r3, #2
 8008ec8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d00e      	beq.n	8008ef0 <osThreadNew+0xa8>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	2ba7      	cmp	r3, #167	@ 0xa7
 8008ed8:	d90a      	bls.n	8008ef0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d006      	beq.n	8008ef0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d002      	beq.n	8008ef0 <osThreadNew+0xa8>
        mem = 1;
 8008eea:	2301      	movs	r3, #1
 8008eec:	61bb      	str	r3, [r7, #24]
 8008eee:	e010      	b.n	8008f12 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10c      	bne.n	8008f12 <osThreadNew+0xca>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d108      	bne.n	8008f12 <osThreadNew+0xca>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	691b      	ldr	r3, [r3, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d104      	bne.n	8008f12 <osThreadNew+0xca>
          mem = 0;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	61bb      	str	r3, [r7, #24]
 8008f0c:	e001      	b.n	8008f12 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d110      	bne.n	8008f3a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008f20:	9202      	str	r2, [sp, #8]
 8008f22:	9301      	str	r3, [sp, #4]
 8008f24:	69fb      	ldr	r3, [r7, #28]
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	6a3a      	ldr	r2, [r7, #32]
 8008f2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 fe1a 	bl	8009b68 <xTaskCreateStatic>
 8008f34:	4603      	mov	r3, r0
 8008f36:	613b      	str	r3, [r7, #16]
 8008f38:	e013      	b.n	8008f62 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d110      	bne.n	8008f62 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	b29a      	uxth	r2, r3
 8008f44:	f107 0310 	add.w	r3, r7, #16
 8008f48:	9301      	str	r3, [sp, #4]
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008f52:	68f8      	ldr	r0, [r7, #12]
 8008f54:	f000 fe68 	bl	8009c28 <xTaskCreate>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d001      	beq.n	8008f62 <osThreadNew+0x11a>
            hTask = NULL;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008f62:	693b      	ldr	r3, [r7, #16]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3728      	adds	r7, #40	@ 0x28
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f74:	f3ef 8305 	mrs	r3, IPSR
 8008f78:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f7a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <osDelay+0x1c>
    stat = osErrorISR;
 8008f80:	f06f 0305 	mvn.w	r3, #5
 8008f84:	60fb      	str	r3, [r7, #12]
 8008f86:	e007      	b.n	8008f98 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 ffa6 	bl	8009ee4 <vTaskDelay>
    }
  }

  return (stat);
 8008f98:	68fb      	ldr	r3, [r7, #12]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	4a07      	ldr	r2, [pc, #28]	@ (8008fd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008fb4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	4a06      	ldr	r2, [pc, #24]	@ (8008fd4 <vApplicationGetIdleTaskMemory+0x30>)
 8008fba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2280      	movs	r2, #128	@ 0x80
 8008fc0:	601a      	str	r2, [r3, #0]
}
 8008fc2:	bf00      	nop
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr
 8008fce:	bf00      	nop
 8008fd0:	20000bd8 	.word	0x20000bd8
 8008fd4:	20000c80 	.word	0x20000c80

08008fd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008fd8:	b480      	push	{r7}
 8008fda:	b085      	sub	sp, #20
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	60f8      	str	r0, [r7, #12]
 8008fe0:	60b9      	str	r1, [r7, #8]
 8008fe2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4a07      	ldr	r2, [pc, #28]	@ (8009004 <vApplicationGetTimerTaskMemory+0x2c>)
 8008fe8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	4a06      	ldr	r2, [pc, #24]	@ (8009008 <vApplicationGetTimerTaskMemory+0x30>)
 8008fee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008ff6:	601a      	str	r2, [r3, #0]
}
 8008ff8:	bf00      	nop
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	20000e80 	.word	0x20000e80
 8009008:	20000f28 	.word	0x20000f28

0800900c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800900c:	b480      	push	{r7}
 800900e:	b083      	sub	sp, #12
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f103 0208 	add.w	r2, r3, #8
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f103 0208 	add.w	r2, r3, #8
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f103 0208 	add.w	r2, r3, #8
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800904c:	b480      	push	{r7}
 800904e:	b083      	sub	sp, #12
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr

08009066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009066:	b480      	push	{r7}
 8009068:	b085      	sub	sp, #20
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	68fa      	ldr	r2, [r7, #12]
 800907a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	689a      	ldr	r2, [r3, #8]
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	683a      	ldr	r2, [r7, #0]
 800908a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	1c5a      	adds	r2, r3, #1
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	601a      	str	r2, [r3, #0]
}
 80090a2:	bf00      	nop
 80090a4:	3714      	adds	r7, #20
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr

080090ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090ae:	b480      	push	{r7}
 80090b0:	b085      	sub	sp, #20
 80090b2:	af00      	add	r7, sp, #0
 80090b4:	6078      	str	r0, [r7, #4]
 80090b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090c4:	d103      	bne.n	80090ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	691b      	ldr	r3, [r3, #16]
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	e00c      	b.n	80090e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3308      	adds	r3, #8
 80090d2:	60fb      	str	r3, [r7, #12]
 80090d4:	e002      	b.n	80090dc <vListInsert+0x2e>
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	60fb      	str	r3, [r7, #12]
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68ba      	ldr	r2, [r7, #8]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d2f6      	bcs.n	80090d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	685a      	ldr	r2, [r3, #4]
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	683a      	ldr	r2, [r7, #0]
 8009102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	687a      	ldr	r2, [r7, #4]
 8009108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	601a      	str	r2, [r3, #0]
}
 8009114:	bf00      	nop
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	691b      	ldr	r3, [r3, #16]
 800912c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	6892      	ldr	r2, [r2, #8]
 8009136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	689b      	ldr	r3, [r3, #8]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	6852      	ldr	r2, [r2, #4]
 8009140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	429a      	cmp	r2, r3
 800914a:	d103      	bne.n	8009154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	1e5a      	subs	r2, r3, #1
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	681b      	ldr	r3, [r3, #0]
}
 8009168:	4618      	mov	r0, r3
 800916a:	3714      	adds	r7, #20
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d10b      	bne.n	80091a0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918c:	f383 8811 	msr	BASEPRI, r3
 8009190:	f3bf 8f6f 	isb	sy
 8009194:	f3bf 8f4f 	dsb	sy
 8009198:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800919a:	bf00      	nop
 800919c:	bf00      	nop
 800919e:	e7fd      	b.n	800919c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80091a0:	f002 fa82 	bl	800b6a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ac:	68f9      	ldr	r1, [r7, #12]
 80091ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091b0:	fb01 f303 	mul.w	r3, r1, r3
 80091b4:	441a      	add	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091d0:	3b01      	subs	r3, #1
 80091d2:	68f9      	ldr	r1, [r7, #12]
 80091d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80091d6:	fb01 f303 	mul.w	r3, r1, r3
 80091da:	441a      	add	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	22ff      	movs	r2, #255	@ 0xff
 80091e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	22ff      	movs	r2, #255	@ 0xff
 80091ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d114      	bne.n	8009220 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	691b      	ldr	r3, [r3, #16]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d01a      	beq.n	8009234 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	3310      	adds	r3, #16
 8009202:	4618      	mov	r0, r3
 8009204:	f001 fa3c 	bl	800a680 <xTaskRemoveFromEventList>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d012      	beq.n	8009234 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800920e:	4b0d      	ldr	r3, [pc, #52]	@ (8009244 <xQueueGenericReset+0xd0>)
 8009210:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009214:	601a      	str	r2, [r3, #0]
 8009216:	f3bf 8f4f 	dsb	sy
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	e009      	b.n	8009234 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	3310      	adds	r3, #16
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff fef1 	bl	800900c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3324      	adds	r3, #36	@ 0x24
 800922e:	4618      	mov	r0, r3
 8009230:	f7ff feec 	bl	800900c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009234:	f002 fa6a 	bl	800b70c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009238:	2301      	movs	r3, #1
}
 800923a:	4618      	mov	r0, r3
 800923c:	3710      	adds	r7, #16
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
 8009242:	bf00      	nop
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08e      	sub	sp, #56	@ 0x38
 800924c:	af02      	add	r7, sp, #8
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d10b      	bne.n	8009274 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800925c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009260:	f383 8811 	msr	BASEPRI, r3
 8009264:	f3bf 8f6f 	isb	sy
 8009268:	f3bf 8f4f 	dsb	sy
 800926c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800926e:	bf00      	nop
 8009270:	bf00      	nop
 8009272:	e7fd      	b.n	8009270 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d10b      	bne.n	8009292 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800927a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800927e:	f383 8811 	msr	BASEPRI, r3
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	f3bf 8f4f 	dsb	sy
 800928a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	e7fd      	b.n	800928e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d002      	beq.n	800929e <xQueueGenericCreateStatic+0x56>
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d001      	beq.n	80092a2 <xQueueGenericCreateStatic+0x5a>
 800929e:	2301      	movs	r3, #1
 80092a0:	e000      	b.n	80092a4 <xQueueGenericCreateStatic+0x5c>
 80092a2:	2300      	movs	r3, #0
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d10b      	bne.n	80092c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	623b      	str	r3, [r7, #32]
}
 80092ba:	bf00      	nop
 80092bc:	bf00      	nop
 80092be:	e7fd      	b.n	80092bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d102      	bne.n	80092cc <xQueueGenericCreateStatic+0x84>
 80092c6:	68bb      	ldr	r3, [r7, #8]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d101      	bne.n	80092d0 <xQueueGenericCreateStatic+0x88>
 80092cc:	2301      	movs	r3, #1
 80092ce:	e000      	b.n	80092d2 <xQueueGenericCreateStatic+0x8a>
 80092d0:	2300      	movs	r3, #0
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10b      	bne.n	80092ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80092d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092da:	f383 8811 	msr	BASEPRI, r3
 80092de:	f3bf 8f6f 	isb	sy
 80092e2:	f3bf 8f4f 	dsb	sy
 80092e6:	61fb      	str	r3, [r7, #28]
}
 80092e8:	bf00      	nop
 80092ea:	bf00      	nop
 80092ec:	e7fd      	b.n	80092ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80092ee:	2350      	movs	r3, #80	@ 0x50
 80092f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b50      	cmp	r3, #80	@ 0x50
 80092f6:	d00b      	beq.n	8009310 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80092f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092fc:	f383 8811 	msr	BASEPRI, r3
 8009300:	f3bf 8f6f 	isb	sy
 8009304:	f3bf 8f4f 	dsb	sy
 8009308:	61bb      	str	r3, [r7, #24]
}
 800930a:	bf00      	nop
 800930c:	bf00      	nop
 800930e:	e7fd      	b.n	800930c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009310:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00d      	beq.n	8009338 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800931c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800931e:	2201      	movs	r2, #1
 8009320:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009324:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932a:	9300      	str	r3, [sp, #0]
 800932c:	4613      	mov	r3, r2
 800932e:	687a      	ldr	r2, [r7, #4]
 8009330:	68b9      	ldr	r1, [r7, #8]
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f000 f805 	bl	8009342 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800933a:	4618      	mov	r0, r3
 800933c:	3730      	adds	r7, #48	@ 0x30
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}

08009342 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009342:	b580      	push	{r7, lr}
 8009344:	b084      	sub	sp, #16
 8009346:	af00      	add	r7, sp, #0
 8009348:	60f8      	str	r0, [r7, #12]
 800934a:	60b9      	str	r1, [r7, #8]
 800934c:	607a      	str	r2, [r7, #4]
 800934e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d103      	bne.n	800935e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	69ba      	ldr	r2, [r7, #24]
 800935a:	601a      	str	r2, [r3, #0]
 800935c:	e002      	b.n	8009364 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	687a      	ldr	r2, [r7, #4]
 8009362:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009370:	2101      	movs	r1, #1
 8009372:	69b8      	ldr	r0, [r7, #24]
 8009374:	f7ff fefe 	bl	8009174 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009378:	69bb      	ldr	r3, [r7, #24]
 800937a:	78fa      	ldrb	r2, [r7, #3]
 800937c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009380:	bf00      	nop
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b08e      	sub	sp, #56	@ 0x38
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009396:	2300      	movs	r3, #0
 8009398:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800939e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10b      	bne.n	80093bc <xQueueGenericSend+0x34>
	__asm volatile
 80093a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80093b6:	bf00      	nop
 80093b8:	bf00      	nop
 80093ba:	e7fd      	b.n	80093b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d103      	bne.n	80093ca <xQueueGenericSend+0x42>
 80093c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <xQueueGenericSend+0x46>
 80093ca:	2301      	movs	r3, #1
 80093cc:	e000      	b.n	80093d0 <xQueueGenericSend+0x48>
 80093ce:	2300      	movs	r3, #0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d10b      	bne.n	80093ec <xQueueGenericSend+0x64>
	__asm volatile
 80093d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d8:	f383 8811 	msr	BASEPRI, r3
 80093dc:	f3bf 8f6f 	isb	sy
 80093e0:	f3bf 8f4f 	dsb	sy
 80093e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80093e6:	bf00      	nop
 80093e8:	bf00      	nop
 80093ea:	e7fd      	b.n	80093e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b02      	cmp	r3, #2
 80093f0:	d103      	bne.n	80093fa <xQueueGenericSend+0x72>
 80093f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d101      	bne.n	80093fe <xQueueGenericSend+0x76>
 80093fa:	2301      	movs	r3, #1
 80093fc:	e000      	b.n	8009400 <xQueueGenericSend+0x78>
 80093fe:	2300      	movs	r3, #0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d10b      	bne.n	800941c <xQueueGenericSend+0x94>
	__asm volatile
 8009404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	623b      	str	r3, [r7, #32]
}
 8009416:	bf00      	nop
 8009418:	bf00      	nop
 800941a:	e7fd      	b.n	8009418 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800941c:	f001 faf6 	bl	800aa0c <xTaskGetSchedulerState>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d102      	bne.n	800942c <xQueueGenericSend+0xa4>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d101      	bne.n	8009430 <xQueueGenericSend+0xa8>
 800942c:	2301      	movs	r3, #1
 800942e:	e000      	b.n	8009432 <xQueueGenericSend+0xaa>
 8009430:	2300      	movs	r3, #0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d10b      	bne.n	800944e <xQueueGenericSend+0xc6>
	__asm volatile
 8009436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800943a:	f383 8811 	msr	BASEPRI, r3
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	61fb      	str	r3, [r7, #28]
}
 8009448:	bf00      	nop
 800944a:	bf00      	nop
 800944c:	e7fd      	b.n	800944a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800944e:	f002 f92b 	bl	800b6a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009454:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800945a:	429a      	cmp	r2, r3
 800945c:	d302      	bcc.n	8009464 <xQueueGenericSend+0xdc>
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	2b02      	cmp	r3, #2
 8009462:	d129      	bne.n	80094b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009464:	683a      	ldr	r2, [r7, #0]
 8009466:	68b9      	ldr	r1, [r7, #8]
 8009468:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800946a:	f000 fa0f 	bl	800988c <prvCopyDataToQueue>
 800946e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d010      	beq.n	800949a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947a:	3324      	adds	r3, #36	@ 0x24
 800947c:	4618      	mov	r0, r3
 800947e:	f001 f8ff 	bl	800a680 <xTaskRemoveFromEventList>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d013      	beq.n	80094b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009488:	4b3f      	ldr	r3, [pc, #252]	@ (8009588 <xQueueGenericSend+0x200>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	e00a      	b.n	80094b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800949a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949c:	2b00      	cmp	r3, #0
 800949e:	d007      	beq.n	80094b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80094a0:	4b39      	ldr	r3, [pc, #228]	@ (8009588 <xQueueGenericSend+0x200>)
 80094a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094a6:	601a      	str	r2, [r3, #0]
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80094b0:	f002 f92c 	bl	800b70c <vPortExitCritical>
				return pdPASS;
 80094b4:	2301      	movs	r3, #1
 80094b6:	e063      	b.n	8009580 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d103      	bne.n	80094c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80094be:	f002 f925 	bl	800b70c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80094c2:	2300      	movs	r3, #0
 80094c4:	e05c      	b.n	8009580 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80094c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d106      	bne.n	80094da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094cc:	f107 0314 	add.w	r3, r7, #20
 80094d0:	4618      	mov	r0, r3
 80094d2:	f001 f939 	bl	800a748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094d6:	2301      	movs	r3, #1
 80094d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094da:	f002 f917 	bl	800b70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094de:	f000 fda7 	bl	800a030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094e2:	f002 f8e1 	bl	800b6a8 <vPortEnterCritical>
 80094e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80094ec:	b25b      	sxtb	r3, r3
 80094ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80094f2:	d103      	bne.n	80094fc <xQueueGenericSend+0x174>
 80094f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80094fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009502:	b25b      	sxtb	r3, r3
 8009504:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009508:	d103      	bne.n	8009512 <xQueueGenericSend+0x18a>
 800950a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950c:	2200      	movs	r2, #0
 800950e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009512:	f002 f8fb 	bl	800b70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009516:	1d3a      	adds	r2, r7, #4
 8009518:	f107 0314 	add.w	r3, r7, #20
 800951c:	4611      	mov	r1, r2
 800951e:	4618      	mov	r0, r3
 8009520:	f001 f928 	bl	800a774 <xTaskCheckForTimeOut>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d124      	bne.n	8009574 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800952a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800952c:	f000 faa6 	bl	8009a7c <prvIsQueueFull>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d018      	beq.n	8009568 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009538:	3310      	adds	r3, #16
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	4611      	mov	r1, r2
 800953e:	4618      	mov	r0, r3
 8009540:	f001 f84c 	bl	800a5dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009544:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009546:	f000 fa31 	bl	80099ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800954a:	f000 fd7f 	bl	800a04c <xTaskResumeAll>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	f47f af7c 	bne.w	800944e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009556:	4b0c      	ldr	r3, [pc, #48]	@ (8009588 <xQueueGenericSend+0x200>)
 8009558:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	f3bf 8f4f 	dsb	sy
 8009562:	f3bf 8f6f 	isb	sy
 8009566:	e772      	b.n	800944e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800956a:	f000 fa1f 	bl	80099ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800956e:	f000 fd6d 	bl	800a04c <xTaskResumeAll>
 8009572:	e76c      	b.n	800944e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009576:	f000 fa19 	bl	80099ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800957a:	f000 fd67 	bl	800a04c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800957e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009580:	4618      	mov	r0, r3
 8009582:	3738      	adds	r7, #56	@ 0x38
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b090      	sub	sp, #64	@ 0x40
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800959e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10b      	bne.n	80095bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80095a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095a8:	f383 8811 	msr	BASEPRI, r3
 80095ac:	f3bf 8f6f 	isb	sy
 80095b0:	f3bf 8f4f 	dsb	sy
 80095b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80095b6:	bf00      	nop
 80095b8:	bf00      	nop
 80095ba:	e7fd      	b.n	80095b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d103      	bne.n	80095ca <xQueueGenericSendFromISR+0x3e>
 80095c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d101      	bne.n	80095ce <xQueueGenericSendFromISR+0x42>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e000      	b.n	80095d0 <xQueueGenericSendFromISR+0x44>
 80095ce:	2300      	movs	r3, #0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10b      	bne.n	80095ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80095e6:	bf00      	nop
 80095e8:	bf00      	nop
 80095ea:	e7fd      	b.n	80095e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095ec:	683b      	ldr	r3, [r7, #0]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d103      	bne.n	80095fa <xQueueGenericSendFromISR+0x6e>
 80095f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095f6:	2b01      	cmp	r3, #1
 80095f8:	d101      	bne.n	80095fe <xQueueGenericSendFromISR+0x72>
 80095fa:	2301      	movs	r3, #1
 80095fc:	e000      	b.n	8009600 <xQueueGenericSendFromISR+0x74>
 80095fe:	2300      	movs	r3, #0
 8009600:	2b00      	cmp	r3, #0
 8009602:	d10b      	bne.n	800961c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009608:	f383 8811 	msr	BASEPRI, r3
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f3bf 8f4f 	dsb	sy
 8009614:	623b      	str	r3, [r7, #32]
}
 8009616:	bf00      	nop
 8009618:	bf00      	nop
 800961a:	e7fd      	b.n	8009618 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800961c:	f002 f924 	bl	800b868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009620:	f3ef 8211 	mrs	r2, BASEPRI
 8009624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	61fa      	str	r2, [r7, #28]
 8009636:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009638:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800963a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800963c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800963e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009644:	429a      	cmp	r2, r3
 8009646:	d302      	bcc.n	800964e <xQueueGenericSendFromISR+0xc2>
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	2b02      	cmp	r3, #2
 800964c:	d12f      	bne.n	80096ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800964e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009650:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009654:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800965a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800965c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800965e:	683a      	ldr	r2, [r7, #0]
 8009660:	68b9      	ldr	r1, [r7, #8]
 8009662:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009664:	f000 f912 	bl	800988c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009668:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800966c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009670:	d112      	bne.n	8009698 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009676:	2b00      	cmp	r3, #0
 8009678:	d016      	beq.n	80096a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800967a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800967c:	3324      	adds	r3, #36	@ 0x24
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fffe 	bl	800a680 <xTaskRemoveFromEventList>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00e      	beq.n	80096a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d00b      	beq.n	80096a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2201      	movs	r2, #1
 8009694:	601a      	str	r2, [r3, #0]
 8009696:	e007      	b.n	80096a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009698:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800969c:	3301      	adds	r3, #1
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	b25a      	sxtb	r2, r3
 80096a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80096a8:	2301      	movs	r3, #1
 80096aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80096ac:	e001      	b.n	80096b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096ae:	2300      	movs	r3, #0
 80096b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80096b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80096bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3740      	adds	r7, #64	@ 0x40
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b08c      	sub	sp, #48	@ 0x30
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80096d4:	2300      	movs	r3, #0
 80096d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d10b      	bne.n	80096fa <xQueueReceive+0x32>
	__asm volatile
 80096e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096e6:	f383 8811 	msr	BASEPRI, r3
 80096ea:	f3bf 8f6f 	isb	sy
 80096ee:	f3bf 8f4f 	dsb	sy
 80096f2:	623b      	str	r3, [r7, #32]
}
 80096f4:	bf00      	nop
 80096f6:	bf00      	nop
 80096f8:	e7fd      	b.n	80096f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d103      	bne.n	8009708 <xQueueReceive+0x40>
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <xQueueReceive+0x44>
 8009708:	2301      	movs	r3, #1
 800970a:	e000      	b.n	800970e <xQueueReceive+0x46>
 800970c:	2300      	movs	r3, #0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <xQueueReceive+0x62>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	61fb      	str	r3, [r7, #28]
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	e7fd      	b.n	8009726 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800972a:	f001 f96f 	bl	800aa0c <xTaskGetSchedulerState>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d102      	bne.n	800973a <xQueueReceive+0x72>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d101      	bne.n	800973e <xQueueReceive+0x76>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <xQueueReceive+0x78>
 800973e:	2300      	movs	r3, #0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d10b      	bne.n	800975c <xQueueReceive+0x94>
	__asm volatile
 8009744:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009748:	f383 8811 	msr	BASEPRI, r3
 800974c:	f3bf 8f6f 	isb	sy
 8009750:	f3bf 8f4f 	dsb	sy
 8009754:	61bb      	str	r3, [r7, #24]
}
 8009756:	bf00      	nop
 8009758:	bf00      	nop
 800975a:	e7fd      	b.n	8009758 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800975c:	f001 ffa4 	bl	800b6a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009762:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009764:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009768:	2b00      	cmp	r3, #0
 800976a:	d01f      	beq.n	80097ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800976c:	68b9      	ldr	r1, [r7, #8]
 800976e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009770:	f000 f8f6 	bl	8009960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009776:	1e5a      	subs	r2, r3, #1
 8009778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800977c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800977e:	691b      	ldr	r3, [r3, #16]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d00f      	beq.n	80097a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009786:	3310      	adds	r3, #16
 8009788:	4618      	mov	r0, r3
 800978a:	f000 ff79 	bl	800a680 <xTaskRemoveFromEventList>
 800978e:	4603      	mov	r3, r0
 8009790:	2b00      	cmp	r3, #0
 8009792:	d007      	beq.n	80097a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009794:	4b3c      	ldr	r3, [pc, #240]	@ (8009888 <xQueueReceive+0x1c0>)
 8009796:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800979a:	601a      	str	r2, [r3, #0]
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097a4:	f001 ffb2 	bl	800b70c <vPortExitCritical>
				return pdPASS;
 80097a8:	2301      	movs	r3, #1
 80097aa:	e069      	b.n	8009880 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d103      	bne.n	80097ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097b2:	f001 ffab 	bl	800b70c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097b6:	2300      	movs	r3, #0
 80097b8:	e062      	b.n	8009880 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d106      	bne.n	80097ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097c0:	f107 0310 	add.w	r3, r7, #16
 80097c4:	4618      	mov	r0, r3
 80097c6:	f000 ffbf 	bl	800a748 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097ca:	2301      	movs	r3, #1
 80097cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097ce:	f001 ff9d 	bl	800b70c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097d2:	f000 fc2d 	bl	800a030 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097d6:	f001 ff67 	bl	800b6a8 <vPortEnterCritical>
 80097da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80097e0:	b25b      	sxtb	r3, r3
 80097e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097e6:	d103      	bne.n	80097f0 <xQueueReceive+0x128>
 80097e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ea:	2200      	movs	r2, #0
 80097ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80097f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097f6:	b25b      	sxtb	r3, r3
 80097f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80097fc:	d103      	bne.n	8009806 <xQueueReceive+0x13e>
 80097fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009800:	2200      	movs	r2, #0
 8009802:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009806:	f001 ff81 	bl	800b70c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800980a:	1d3a      	adds	r2, r7, #4
 800980c:	f107 0310 	add.w	r3, r7, #16
 8009810:	4611      	mov	r1, r2
 8009812:	4618      	mov	r0, r3
 8009814:	f000 ffae 	bl	800a774 <xTaskCheckForTimeOut>
 8009818:	4603      	mov	r3, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	d123      	bne.n	8009866 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800981e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009820:	f000 f916 	bl	8009a50 <prvIsQueueEmpty>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d017      	beq.n	800985a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800982a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982c:	3324      	adds	r3, #36	@ 0x24
 800982e:	687a      	ldr	r2, [r7, #4]
 8009830:	4611      	mov	r1, r2
 8009832:	4618      	mov	r0, r3
 8009834:	f000 fed2 	bl	800a5dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800983a:	f000 f8b7 	bl	80099ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800983e:	f000 fc05 	bl	800a04c <xTaskResumeAll>
 8009842:	4603      	mov	r3, r0
 8009844:	2b00      	cmp	r3, #0
 8009846:	d189      	bne.n	800975c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009848:	4b0f      	ldr	r3, [pc, #60]	@ (8009888 <xQueueReceive+0x1c0>)
 800984a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800984e:	601a      	str	r2, [r3, #0]
 8009850:	f3bf 8f4f 	dsb	sy
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	e780      	b.n	800975c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800985a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800985c:	f000 f8a6 	bl	80099ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009860:	f000 fbf4 	bl	800a04c <xTaskResumeAll>
 8009864:	e77a      	b.n	800975c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009868:	f000 f8a0 	bl	80099ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800986c:	f000 fbee 	bl	800a04c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009870:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009872:	f000 f8ed 	bl	8009a50 <prvIsQueueEmpty>
 8009876:	4603      	mov	r3, r0
 8009878:	2b00      	cmp	r3, #0
 800987a:	f43f af6f 	beq.w	800975c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800987e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009880:	4618      	mov	r0, r3
 8009882:	3730      	adds	r7, #48	@ 0x30
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b086      	sub	sp, #24
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009898:	2300      	movs	r3, #0
 800989a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d10d      	bne.n	80098c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d14d      	bne.n	800994e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f001 f8c6 	bl	800aa48 <xTaskPriorityDisinherit>
 80098bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	609a      	str	r2, [r3, #8]
 80098c4:	e043      	b.n	800994e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d119      	bne.n	8009900 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6858      	ldr	r0, [r3, #4]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d4:	461a      	mov	r2, r3
 80098d6:	68b9      	ldr	r1, [r7, #8]
 80098d8:	f002 faa0 	bl	800be1c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	685a      	ldr	r2, [r3, #4]
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e4:	441a      	add	r2, r3
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d32b      	bcc.n	800994e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	605a      	str	r2, [r3, #4]
 80098fe:	e026      	b.n	800994e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	68d8      	ldr	r0, [r3, #12]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009908:	461a      	mov	r2, r3
 800990a:	68b9      	ldr	r1, [r7, #8]
 800990c:	f002 fa86 	bl	800be1c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	68da      	ldr	r2, [r3, #12]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009918:	425b      	negs	r3, r3
 800991a:	441a      	add	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	68da      	ldr	r2, [r3, #12]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	429a      	cmp	r2, r3
 800992a:	d207      	bcs.n	800993c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	689a      	ldr	r2, [r3, #8]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009934:	425b      	negs	r3, r3
 8009936:	441a      	add	r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2b02      	cmp	r3, #2
 8009940:	d105      	bne.n	800994e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d002      	beq.n	800994e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	3b01      	subs	r3, #1
 800994c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8009956:	697b      	ldr	r3, [r7, #20]
}
 8009958:	4618      	mov	r0, r3
 800995a:	3718      	adds	r7, #24
 800995c:	46bd      	mov	sp, r7
 800995e:	bd80      	pop	{r7, pc}

08009960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b082      	sub	sp, #8
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800996e:	2b00      	cmp	r3, #0
 8009970:	d018      	beq.n	80099a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68da      	ldr	r2, [r3, #12]
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997a:	441a      	add	r2, r3
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	68da      	ldr	r2, [r3, #12]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	429a      	cmp	r2, r3
 800998a:	d303      	bcc.n	8009994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68d9      	ldr	r1, [r3, #12]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800999c:	461a      	mov	r2, r3
 800999e:	6838      	ldr	r0, [r7, #0]
 80099a0:	f002 fa3c 	bl	800be1c <memcpy>
	}
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80099b4:	f001 fe78 	bl	800b6a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099c0:	e011      	b.n	80099e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d012      	beq.n	80099f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	3324      	adds	r3, #36	@ 0x24
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 fe56 	bl	800a680 <xTaskRemoveFromEventList>
 80099d4:	4603      	mov	r3, r0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d001      	beq.n	80099de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80099da:	f000 ff2f 	bl	800a83c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
 80099e0:	3b01      	subs	r3, #1
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80099e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	dce9      	bgt.n	80099c2 <prvUnlockQueue+0x16>
 80099ee:	e000      	b.n	80099f2 <prvUnlockQueue+0x46>
					break;
 80099f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	22ff      	movs	r2, #255	@ 0xff
 80099f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80099fa:	f001 fe87 	bl	800b70c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80099fe:	f001 fe53 	bl	800b6a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009a08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a0a:	e011      	b.n	8009a30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d012      	beq.n	8009a3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	3310      	adds	r3, #16
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 fe31 	bl	800a680 <xTaskRemoveFromEventList>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d001      	beq.n	8009a28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009a24:	f000 ff0a 	bl	800a83c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009a30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	dce9      	bgt.n	8009a0c <prvUnlockQueue+0x60>
 8009a38:	e000      	b.n	8009a3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009a3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	22ff      	movs	r2, #255	@ 0xff
 8009a40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8009a44:	f001 fe62 	bl	800b70c <vPortExitCritical>
}
 8009a48:	bf00      	nop
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b084      	sub	sp, #16
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a58:	f001 fe26 	bl	800b6a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d102      	bne.n	8009a6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009a64:	2301      	movs	r3, #1
 8009a66:	60fb      	str	r3, [r7, #12]
 8009a68:	e001      	b.n	8009a6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a6e:	f001 fe4d 	bl	800b70c <vPortExitCritical>

	return xReturn;
 8009a72:	68fb      	ldr	r3, [r7, #12]
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}

08009a7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	b084      	sub	sp, #16
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009a84:	f001 fe10 	bl	800b6a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d102      	bne.n	8009a9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009a94:	2301      	movs	r3, #1
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	e001      	b.n	8009a9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009a9e:	f001 fe35 	bl	800b70c <vPortExitCritical>

	return xReturn;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3710      	adds	r7, #16
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009aac:	b480      	push	{r7}
 8009aae:	b085      	sub	sp, #20
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
 8009aba:	e014      	b.n	8009ae6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009abc:	4a0f      	ldr	r2, [pc, #60]	@ (8009afc <vQueueAddToRegistry+0x50>)
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d10b      	bne.n	8009ae0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009ac8:	490c      	ldr	r1, [pc, #48]	@ (8009afc <vQueueAddToRegistry+0x50>)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8009afc <vQueueAddToRegistry+0x50>)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	00db      	lsls	r3, r3, #3
 8009ad8:	4413      	add	r3, r2
 8009ada:	687a      	ldr	r2, [r7, #4]
 8009adc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009ade:	e006      	b.n	8009aee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3301      	adds	r3, #1
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b07      	cmp	r3, #7
 8009aea:	d9e7      	bls.n	8009abc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	3714      	adds	r7, #20
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr
 8009afa:	bf00      	nop
 8009afc:	20001328 	.word	0x20001328

08009b00 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b086      	sub	sp, #24
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	60f8      	str	r0, [r7, #12]
 8009b08:	60b9      	str	r1, [r7, #8]
 8009b0a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009b10:	f001 fdca 	bl	800b6a8 <vPortEnterCritical>
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009b1a:	b25b      	sxtb	r3, r3
 8009b1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b20:	d103      	bne.n	8009b2a <vQueueWaitForMessageRestricted+0x2a>
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2200      	movs	r2, #0
 8009b26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009b30:	b25b      	sxtb	r3, r3
 8009b32:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b36:	d103      	bne.n	8009b40 <vQueueWaitForMessageRestricted+0x40>
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b40:	f001 fde4 	bl	800b70c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009b4c:	697b      	ldr	r3, [r7, #20]
 8009b4e:	3324      	adds	r3, #36	@ 0x24
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	4618      	mov	r0, r3
 8009b56:	f000 fd67 	bl	800a628 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009b5a:	6978      	ldr	r0, [r7, #20]
 8009b5c:	f7ff ff26 	bl	80099ac <prvUnlockQueue>
	}
 8009b60:	bf00      	nop
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08e      	sub	sp, #56	@ 0x38
 8009b6c:	af04      	add	r7, sp, #16
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
 8009b74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10b      	bne.n	8009b94 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	623b      	str	r3, [r7, #32]
}
 8009b8e:	bf00      	nop
 8009b90:	bf00      	nop
 8009b92:	e7fd      	b.n	8009b90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10b      	bne.n	8009bb2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8009b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b9e:	f383 8811 	msr	BASEPRI, r3
 8009ba2:	f3bf 8f6f 	isb	sy
 8009ba6:	f3bf 8f4f 	dsb	sy
 8009baa:	61fb      	str	r3, [r7, #28]
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	e7fd      	b.n	8009bae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009bb2:	23a8      	movs	r3, #168	@ 0xa8
 8009bb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009bb6:	693b      	ldr	r3, [r7, #16]
 8009bb8:	2ba8      	cmp	r3, #168	@ 0xa8
 8009bba:	d00b      	beq.n	8009bd4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc0:	f383 8811 	msr	BASEPRI, r3
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	61bb      	str	r3, [r7, #24]
}
 8009bce:	bf00      	nop
 8009bd0:	bf00      	nop
 8009bd2:	e7fd      	b.n	8009bd0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009bd4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d01e      	beq.n	8009c1a <xTaskCreateStatic+0xb2>
 8009bdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d01b      	beq.n	8009c1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009bea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	9303      	str	r3, [sp, #12]
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfa:	9302      	str	r3, [sp, #8]
 8009bfc:	f107 0314 	add.w	r3, r7, #20
 8009c00:	9301      	str	r3, [sp, #4]
 8009c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c04:	9300      	str	r3, [sp, #0]
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	68b9      	ldr	r1, [r7, #8]
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f000 f851 	bl	8009cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009c14:	f000 f8f6 	bl	8009e04 <prvAddNewTaskToReadyList>
 8009c18:	e001      	b.n	8009c1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c1e:	697b      	ldr	r3, [r7, #20]
	}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3728      	adds	r7, #40	@ 0x28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08c      	sub	sp, #48	@ 0x30
 8009c2c:	af04      	add	r7, sp, #16
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	603b      	str	r3, [r7, #0]
 8009c34:	4613      	mov	r3, r2
 8009c36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009c38:	88fb      	ldrh	r3, [r7, #6]
 8009c3a:	009b      	lsls	r3, r3, #2
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f001 fe55 	bl	800b8ec <pvPortMalloc>
 8009c42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00e      	beq.n	8009c68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009c4a:	20a8      	movs	r0, #168	@ 0xa8
 8009c4c:	f001 fe4e 	bl	800b8ec <pvPortMalloc>
 8009c50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c52:	69fb      	ldr	r3, [r7, #28]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d003      	beq.n	8009c60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	697a      	ldr	r2, [r7, #20]
 8009c5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8009c5e:	e005      	b.n	8009c6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c60:	6978      	ldr	r0, [r7, #20]
 8009c62:	f001 ff11 	bl	800ba88 <vPortFree>
 8009c66:	e001      	b.n	8009c6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c6c:	69fb      	ldr	r3, [r7, #28]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d017      	beq.n	8009ca2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c72:	69fb      	ldr	r3, [r7, #28]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c7a:	88fa      	ldrh	r2, [r7, #6]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	9303      	str	r3, [sp, #12]
 8009c80:	69fb      	ldr	r3, [r7, #28]
 8009c82:	9302      	str	r3, [sp, #8]
 8009c84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	68b9      	ldr	r1, [r7, #8]
 8009c90:	68f8      	ldr	r0, [r7, #12]
 8009c92:	f000 f80f 	bl	8009cb4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c96:	69f8      	ldr	r0, [r7, #28]
 8009c98:	f000 f8b4 	bl	8009e04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	61bb      	str	r3, [r7, #24]
 8009ca0:	e002      	b.n	8009ca8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ca6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ca8:	69bb      	ldr	r3, [r7, #24]
	}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
	...

08009cb4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b088      	sub	sp, #32
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
 8009cc0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cc4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	461a      	mov	r2, r3
 8009ccc:	21a5      	movs	r1, #165	@ 0xa5
 8009cce:	f002 f81b 	bl	800bd08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	009b      	lsls	r3, r3, #2
 8009ce0:	4413      	add	r3, r2
 8009ce2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	f023 0307 	bic.w	r3, r3, #7
 8009cea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	f003 0307 	and.w	r3, r3, #7
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00b      	beq.n	8009d0e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	617b      	str	r3, [r7, #20]
}
 8009d08:	bf00      	nop
 8009d0a:	bf00      	nop
 8009d0c:	e7fd      	b.n	8009d0a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d01f      	beq.n	8009d54 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d14:	2300      	movs	r3, #0
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	e012      	b.n	8009d40 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d1a:	68ba      	ldr	r2, [r7, #8]
 8009d1c:	69fb      	ldr	r3, [r7, #28]
 8009d1e:	4413      	add	r3, r2
 8009d20:	7819      	ldrb	r1, [r3, #0]
 8009d22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d24:	69fb      	ldr	r3, [r7, #28]
 8009d26:	4413      	add	r3, r2
 8009d28:	3334      	adds	r3, #52	@ 0x34
 8009d2a:	460a      	mov	r2, r1
 8009d2c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	4413      	add	r3, r2
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d006      	beq.n	8009d48 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	61fb      	str	r3, [r7, #28]
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	2b0f      	cmp	r3, #15
 8009d44:	d9e9      	bls.n	8009d1a <prvInitialiseNewTask+0x66>
 8009d46:	e000      	b.n	8009d4a <prvInitialiseNewTask+0x96>
			{
				break;
 8009d48:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009d52:	e003      	b.n	8009d5c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5e:	2b37      	cmp	r3, #55	@ 0x37
 8009d60:	d901      	bls.n	8009d66 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d62:	2337      	movs	r3, #55	@ 0x37
 8009d64:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d70:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d74:	2200      	movs	r2, #0
 8009d76:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7a:	3304      	adds	r3, #4
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7ff f965 	bl	800904c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d84:	3318      	adds	r3, #24
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7ff f960 	bl	800904c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d90:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d94:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009da0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da4:	2200      	movs	r2, #0
 8009da6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	2200      	movs	r2, #0
 8009dae:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009db4:	3354      	adds	r3, #84	@ 0x54
 8009db6:	224c      	movs	r2, #76	@ 0x4c
 8009db8:	2100      	movs	r1, #0
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f001 ffa4 	bl	800bd08 <memset>
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc2:	4a0d      	ldr	r2, [pc, #52]	@ (8009df8 <prvInitialiseNewTask+0x144>)
 8009dc4:	659a      	str	r2, [r3, #88]	@ 0x58
 8009dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8009dfc <prvInitialiseNewTask+0x148>)
 8009dca:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dce:	4a0c      	ldr	r2, [pc, #48]	@ (8009e00 <prvInitialiseNewTask+0x14c>)
 8009dd0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009dd2:	683a      	ldr	r2, [r7, #0]
 8009dd4:	68f9      	ldr	r1, [r7, #12]
 8009dd6:	69b8      	ldr	r0, [r7, #24]
 8009dd8:	f001 fb36 	bl	800b448 <pxPortInitialiseStack>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d002      	beq.n	8009dee <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009dec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009dee:	bf00      	nop
 8009df0:	3720      	adds	r7, #32
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}
 8009df6:	bf00      	nop
 8009df8:	200055bc 	.word	0x200055bc
 8009dfc:	20005624 	.word	0x20005624
 8009e00:	2000568c 	.word	0x2000568c

08009e04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b082      	sub	sp, #8
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e0c:	f001 fc4c 	bl	800b6a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e10:	4b2d      	ldr	r3, [pc, #180]	@ (8009ec8 <prvAddNewTaskToReadyList+0xc4>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	3301      	adds	r3, #1
 8009e16:	4a2c      	ldr	r2, [pc, #176]	@ (8009ec8 <prvAddNewTaskToReadyList+0xc4>)
 8009e18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8009ecc <prvAddNewTaskToReadyList+0xc8>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d109      	bne.n	8009e36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e22:	4a2a      	ldr	r2, [pc, #168]	@ (8009ecc <prvAddNewTaskToReadyList+0xc8>)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e28:	4b27      	ldr	r3, [pc, #156]	@ (8009ec8 <prvAddNewTaskToReadyList+0xc4>)
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	2b01      	cmp	r3, #1
 8009e2e:	d110      	bne.n	8009e52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e30:	f000 fd28 	bl	800a884 <prvInitialiseTaskLists>
 8009e34:	e00d      	b.n	8009e52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e36:	4b26      	ldr	r3, [pc, #152]	@ (8009ed0 <prvAddNewTaskToReadyList+0xcc>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d109      	bne.n	8009e52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e3e:	4b23      	ldr	r3, [pc, #140]	@ (8009ecc <prvAddNewTaskToReadyList+0xc8>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d802      	bhi.n	8009e52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8009ecc <prvAddNewTaskToReadyList+0xc8>)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e52:	4b20      	ldr	r3, [pc, #128]	@ (8009ed4 <prvAddNewTaskToReadyList+0xd0>)
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	3301      	adds	r3, #1
 8009e58:	4a1e      	ldr	r2, [pc, #120]	@ (8009ed4 <prvAddNewTaskToReadyList+0xd0>)
 8009e5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009e5c:	4b1d      	ldr	r3, [pc, #116]	@ (8009ed4 <prvAddNewTaskToReadyList+0xd0>)
 8009e5e:	681a      	ldr	r2, [r3, #0]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e68:	4b1b      	ldr	r3, [pc, #108]	@ (8009ed8 <prvAddNewTaskToReadyList+0xd4>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d903      	bls.n	8009e78 <prvAddNewTaskToReadyList+0x74>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e74:	4a18      	ldr	r2, [pc, #96]	@ (8009ed8 <prvAddNewTaskToReadyList+0xd4>)
 8009e76:	6013      	str	r3, [r2, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e7c:	4613      	mov	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4413      	add	r3, r2
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4a15      	ldr	r2, [pc, #84]	@ (8009edc <prvAddNewTaskToReadyList+0xd8>)
 8009e86:	441a      	add	r2, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	3304      	adds	r3, #4
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	4610      	mov	r0, r2
 8009e90:	f7ff f8e9 	bl	8009066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e94:	f001 fc3a 	bl	800b70c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e98:	4b0d      	ldr	r3, [pc, #52]	@ (8009ed0 <prvAddNewTaskToReadyList+0xcc>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d00e      	beq.n	8009ebe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8009ecc <prvAddNewTaskToReadyList+0xc8>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d207      	bcs.n	8009ebe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009eae:	4b0c      	ldr	r3, [pc, #48]	@ (8009ee0 <prvAddNewTaskToReadyList+0xdc>)
 8009eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009eb4:	601a      	str	r2, [r3, #0]
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ebe:	bf00      	nop
 8009ec0:	3708      	adds	r7, #8
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	2000183c 	.word	0x2000183c
 8009ecc:	20001368 	.word	0x20001368
 8009ed0:	20001848 	.word	0x20001848
 8009ed4:	20001858 	.word	0x20001858
 8009ed8:	20001844 	.word	0x20001844
 8009edc:	2000136c 	.word	0x2000136c
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009eec:	2300      	movs	r3, #0
 8009eee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d018      	beq.n	8009f28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ef6:	4b14      	ldr	r3, [pc, #80]	@ (8009f48 <vTaskDelay+0x64>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00b      	beq.n	8009f16 <vTaskDelay+0x32>
	__asm volatile
 8009efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f02:	f383 8811 	msr	BASEPRI, r3
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	f3bf 8f4f 	dsb	sy
 8009f0e:	60bb      	str	r3, [r7, #8]
}
 8009f10:	bf00      	nop
 8009f12:	bf00      	nop
 8009f14:	e7fd      	b.n	8009f12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f16:	f000 f88b 	bl	800a030 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	f000 fee5 	bl	800acec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f22:	f000 f893 	bl	800a04c <xTaskResumeAll>
 8009f26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d107      	bne.n	8009f3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009f2e:	4b07      	ldr	r3, [pc, #28]	@ (8009f4c <vTaskDelay+0x68>)
 8009f30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	f3bf 8f4f 	dsb	sy
 8009f3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f3e:	bf00      	nop
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}
 8009f46:	bf00      	nop
 8009f48:	20001864 	.word	0x20001864
 8009f4c:	e000ed04 	.word	0xe000ed04

08009f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08a      	sub	sp, #40	@ 0x28
 8009f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009f56:	2300      	movs	r3, #0
 8009f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009f5e:	463a      	mov	r2, r7
 8009f60:	1d39      	adds	r1, r7, #4
 8009f62:	f107 0308 	add.w	r3, r7, #8
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7ff f81c 	bl	8008fa4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f6c:	6839      	ldr	r1, [r7, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	9202      	str	r2, [sp, #8]
 8009f74:	9301      	str	r3, [sp, #4]
 8009f76:	2300      	movs	r3, #0
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	460a      	mov	r2, r1
 8009f7e:	4924      	ldr	r1, [pc, #144]	@ (800a010 <vTaskStartScheduler+0xc0>)
 8009f80:	4824      	ldr	r0, [pc, #144]	@ (800a014 <vTaskStartScheduler+0xc4>)
 8009f82:	f7ff fdf1 	bl	8009b68 <xTaskCreateStatic>
 8009f86:	4603      	mov	r3, r0
 8009f88:	4a23      	ldr	r2, [pc, #140]	@ (800a018 <vTaskStartScheduler+0xc8>)
 8009f8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f8c:	4b22      	ldr	r3, [pc, #136]	@ (800a018 <vTaskStartScheduler+0xc8>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d002      	beq.n	8009f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f94:	2301      	movs	r3, #1
 8009f96:	617b      	str	r3, [r7, #20]
 8009f98:	e001      	b.n	8009f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d102      	bne.n	8009faa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009fa4:	f000 fef6 	bl	800ad94 <xTimerCreateTimerTask>
 8009fa8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009faa:	697b      	ldr	r3, [r7, #20]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d11b      	bne.n	8009fe8 <vTaskStartScheduler+0x98>
	__asm volatile
 8009fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb4:	f383 8811 	msr	BASEPRI, r3
 8009fb8:	f3bf 8f6f 	isb	sy
 8009fbc:	f3bf 8f4f 	dsb	sy
 8009fc0:	613b      	str	r3, [r7, #16]
}
 8009fc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fc4:	4b15      	ldr	r3, [pc, #84]	@ (800a01c <vTaskStartScheduler+0xcc>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	3354      	adds	r3, #84	@ 0x54
 8009fca:	4a15      	ldr	r2, [pc, #84]	@ (800a020 <vTaskStartScheduler+0xd0>)
 8009fcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fce:	4b15      	ldr	r3, [pc, #84]	@ (800a024 <vTaskStartScheduler+0xd4>)
 8009fd0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009fd6:	4b14      	ldr	r3, [pc, #80]	@ (800a028 <vTaskStartScheduler+0xd8>)
 8009fd8:	2201      	movs	r2, #1
 8009fda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fdc:	4b13      	ldr	r3, [pc, #76]	@ (800a02c <vTaskStartScheduler+0xdc>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fe2:	f001 fabd 	bl	800b560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fe6:	e00f      	b.n	800a008 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009fee:	d10b      	bne.n	800a008 <vTaskStartScheduler+0xb8>
	__asm volatile
 8009ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ff4:	f383 8811 	msr	BASEPRI, r3
 8009ff8:	f3bf 8f6f 	isb	sy
 8009ffc:	f3bf 8f4f 	dsb	sy
 800a000:	60fb      	str	r3, [r7, #12]
}
 800a002:	bf00      	nop
 800a004:	bf00      	nop
 800a006:	e7fd      	b.n	800a004 <vTaskStartScheduler+0xb4>
}
 800a008:	bf00      	nop
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	0800c714 	.word	0x0800c714
 800a014:	0800a855 	.word	0x0800a855
 800a018:	20001860 	.word	0x20001860
 800a01c:	20001368 	.word	0x20001368
 800a020:	2000002c 	.word	0x2000002c
 800a024:	2000185c 	.word	0x2000185c
 800a028:	20001848 	.word	0x20001848
 800a02c:	20001840 	.word	0x20001840

0800a030 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a030:	b480      	push	{r7}
 800a032:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a034:	4b04      	ldr	r3, [pc, #16]	@ (800a048 <vTaskSuspendAll+0x18>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	3301      	adds	r3, #1
 800a03a:	4a03      	ldr	r2, [pc, #12]	@ (800a048 <vTaskSuspendAll+0x18>)
 800a03c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a03e:	bf00      	nop
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr
 800a048:	20001864 	.word	0x20001864

0800a04c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a056:	2300      	movs	r3, #0
 800a058:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a05a:	4b42      	ldr	r3, [pc, #264]	@ (800a164 <xTaskResumeAll+0x118>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d10b      	bne.n	800a07a <xTaskResumeAll+0x2e>
	__asm volatile
 800a062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a066:	f383 8811 	msr	BASEPRI, r3
 800a06a:	f3bf 8f6f 	isb	sy
 800a06e:	f3bf 8f4f 	dsb	sy
 800a072:	603b      	str	r3, [r7, #0]
}
 800a074:	bf00      	nop
 800a076:	bf00      	nop
 800a078:	e7fd      	b.n	800a076 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a07a:	f001 fb15 	bl	800b6a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a07e:	4b39      	ldr	r3, [pc, #228]	@ (800a164 <xTaskResumeAll+0x118>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	3b01      	subs	r3, #1
 800a084:	4a37      	ldr	r2, [pc, #220]	@ (800a164 <xTaskResumeAll+0x118>)
 800a086:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a088:	4b36      	ldr	r3, [pc, #216]	@ (800a164 <xTaskResumeAll+0x118>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d162      	bne.n	800a156 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a090:	4b35      	ldr	r3, [pc, #212]	@ (800a168 <xTaskResumeAll+0x11c>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d05e      	beq.n	800a156 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a098:	e02f      	b.n	800a0fa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a09a:	4b34      	ldr	r3, [pc, #208]	@ (800a16c <xTaskResumeAll+0x120>)
 800a09c:	68db      	ldr	r3, [r3, #12]
 800a09e:	68db      	ldr	r3, [r3, #12]
 800a0a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	3318      	adds	r3, #24
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f7ff f83a 	bl	8009120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3304      	adds	r3, #4
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f7ff f835 	bl	8009120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ba:	4b2d      	ldr	r3, [pc, #180]	@ (800a170 <xTaskResumeAll+0x124>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d903      	bls.n	800a0ca <xTaskResumeAll+0x7e>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0c6:	4a2a      	ldr	r2, [pc, #168]	@ (800a170 <xTaskResumeAll+0x124>)
 800a0c8:	6013      	str	r3, [r2, #0]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	4413      	add	r3, r2
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4a27      	ldr	r2, [pc, #156]	@ (800a174 <xTaskResumeAll+0x128>)
 800a0d8:	441a      	add	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3304      	adds	r3, #4
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f7fe ffc0 	bl	8009066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ea:	4b23      	ldr	r3, [pc, #140]	@ (800a178 <xTaskResumeAll+0x12c>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f0:	429a      	cmp	r2, r3
 800a0f2:	d302      	bcc.n	800a0fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a0f4:	4b21      	ldr	r3, [pc, #132]	@ (800a17c <xTaskResumeAll+0x130>)
 800a0f6:	2201      	movs	r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0fa:	4b1c      	ldr	r3, [pc, #112]	@ (800a16c <xTaskResumeAll+0x120>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d1cb      	bne.n	800a09a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d001      	beq.n	800a10c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a108:	f000 fc60 	bl	800a9cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a10c:	4b1c      	ldr	r3, [pc, #112]	@ (800a180 <xTaskResumeAll+0x134>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d010      	beq.n	800a13a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a118:	f000 f940 	bl	800a39c <xTaskIncrementTick>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d002      	beq.n	800a128 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a122:	4b16      	ldr	r3, [pc, #88]	@ (800a17c <xTaskResumeAll+0x130>)
 800a124:	2201      	movs	r2, #1
 800a126:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1f1      	bne.n	800a118 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800a134:	4b12      	ldr	r3, [pc, #72]	@ (800a180 <xTaskResumeAll+0x134>)
 800a136:	2200      	movs	r2, #0
 800a138:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a13a:	4b10      	ldr	r3, [pc, #64]	@ (800a17c <xTaskResumeAll+0x130>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d009      	beq.n	800a156 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a142:	2301      	movs	r3, #1
 800a144:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a146:	4b0f      	ldr	r3, [pc, #60]	@ (800a184 <xTaskResumeAll+0x138>)
 800a148:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	f3bf 8f4f 	dsb	sy
 800a152:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a156:	f001 fad9 	bl	800b70c <vPortExitCritical>

	return xAlreadyYielded;
 800a15a:	68bb      	ldr	r3, [r7, #8]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3710      	adds	r7, #16
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}
 800a164:	20001864 	.word	0x20001864
 800a168:	2000183c 	.word	0x2000183c
 800a16c:	200017fc 	.word	0x200017fc
 800a170:	20001844 	.word	0x20001844
 800a174:	2000136c 	.word	0x2000136c
 800a178:	20001368 	.word	0x20001368
 800a17c:	20001850 	.word	0x20001850
 800a180:	2000184c 	.word	0x2000184c
 800a184:	e000ed04 	.word	0xe000ed04

0800a188 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a18e:	4b05      	ldr	r3, [pc, #20]	@ (800a1a4 <xTaskGetTickCount+0x1c>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a194:	687b      	ldr	r3, [r7, #4]
}
 800a196:	4618      	mov	r0, r3
 800a198:	370c      	adds	r7, #12
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr
 800a1a2:	bf00      	nop
 800a1a4:	20001840 	.word	0x20001840

0800a1a8 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b085      	sub	sp, #20
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d102      	bne.n	800a1bc <pcTaskGetName+0x14>
 800a1b6:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f0 <pcTaskGetName+0x48>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	e000      	b.n	800a1be <pcTaskGetName+0x16>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d10b      	bne.n	800a1de <pcTaskGetName+0x36>
	__asm volatile
 800a1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ca:	f383 8811 	msr	BASEPRI, r3
 800a1ce:	f3bf 8f6f 	isb	sy
 800a1d2:	f3bf 8f4f 	dsb	sy
 800a1d6:	60bb      	str	r3, [r7, #8]
}
 800a1d8:	bf00      	nop
 800a1da:	bf00      	nop
 800a1dc:	e7fd      	b.n	800a1da <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	3334      	adds	r3, #52	@ 0x34
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3714      	adds	r7, #20
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr
 800a1ee:	bf00      	nop
 800a1f0:	20001368 	.word	0x20001368

0800a1f4 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b08b      	sub	sp, #44	@ 0x2c
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800a1fe:	2300      	movs	r3, #0
 800a200:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d05b      	beq.n	800a2c2 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	61bb      	str	r3, [r7, #24]
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	685a      	ldr	r2, [r3, #4]
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	605a      	str	r2, [r3, #4]
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	69bb      	ldr	r3, [r7, #24]
 800a21e:	3308      	adds	r3, #8
 800a220:	429a      	cmp	r2, r3
 800a222:	d104      	bne.n	800a22e <prvSearchForNameWithinSingleList+0x3a>
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	685a      	ldr	r2, [r3, #4]
 800a22a:	69bb      	ldr	r3, [r7, #24]
 800a22c:	605a      	str	r2, [r3, #4]
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	68db      	ldr	r3, [r3, #12]
 800a234:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	613b      	str	r3, [r7, #16]
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	685a      	ldr	r2, [r3, #4]
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	605a      	str	r2, [r3, #4]
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	685a      	ldr	r2, [r3, #4]
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	3308      	adds	r3, #8
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d104      	bne.n	800a25a <prvSearchForNameWithinSingleList+0x66>
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	685b      	ldr	r3, [r3, #4]
 800a254:	685a      	ldr	r2, [r3, #4]
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	605a      	str	r2, [r3, #4]
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	685b      	ldr	r3, [r3, #4]
 800a25e:	68db      	ldr	r3, [r3, #12]
 800a260:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800a262:	2300      	movs	r3, #0
 800a264:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a266:	2300      	movs	r3, #0
 800a268:	623b      	str	r3, [r7, #32]
 800a26a:	e01c      	b.n	800a2a6 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800a26c:	68fa      	ldr	r2, [r7, #12]
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	4413      	add	r3, r2
 800a272:	3334      	adds	r3, #52	@ 0x34
 800a274:	781b      	ldrb	r3, [r3, #0]
 800a276:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800a278:	683a      	ldr	r2, [r7, #0]
 800a27a:	6a3b      	ldr	r3, [r7, #32]
 800a27c:	4413      	add	r3, r2
 800a27e:	781b      	ldrb	r3, [r3, #0]
 800a280:	7afa      	ldrb	r2, [r7, #11]
 800a282:	429a      	cmp	r2, r3
 800a284:	d002      	beq.n	800a28c <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800a286:	2301      	movs	r3, #1
 800a288:	61fb      	str	r3, [r7, #28]
 800a28a:	e006      	b.n	800a29a <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800a28c:	7afb      	ldrb	r3, [r7, #11]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d103      	bne.n	800a29a <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800a296:	2301      	movs	r3, #1
 800a298:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800a29a:	69fb      	ldr	r3, [r7, #28]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d106      	bne.n	800a2ae <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a2a0:	6a3b      	ldr	r3, [r7, #32]
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	623b      	str	r3, [r7, #32]
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	2b0f      	cmp	r3, #15
 800a2aa:	d9df      	bls.n	800a26c <prvSearchForNameWithinSingleList+0x78>
 800a2ac:	e000      	b.n	800a2b0 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800a2ae:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800a2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d104      	bne.n	800a2c0 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800a2b6:	68fa      	ldr	r2, [r7, #12]
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d1bb      	bne.n	800a236 <prvSearchForNameWithinSingleList+0x42>
 800a2be:	e000      	b.n	800a2c2 <prvSearchForNameWithinSingleList+0xce>
					break;
 800a2c0:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800a2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	372c      	adds	r7, #44	@ 0x2c
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b086      	sub	sp, #24
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800a2d8:	2338      	movs	r3, #56	@ 0x38
 800a2da:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7f5 ff77 	bl	80001d0 <strlen>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b0f      	cmp	r3, #15
 800a2e6:	d90b      	bls.n	800a300 <xTaskGetHandle+0x30>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	60fb      	str	r3, [r7, #12]
}
 800a2fa:	bf00      	nop
 800a2fc:	bf00      	nop
 800a2fe:	e7fd      	b.n	800a2fc <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800a300:	f7ff fe96 	bl	800a030 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	3b01      	subs	r3, #1
 800a308:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800a30a:	697a      	ldr	r2, [r7, #20]
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4a1c      	ldr	r2, [pc, #112]	@ (800a388 <xTaskGetHandle+0xb8>)
 800a316:	4413      	add	r3, r2
 800a318:	6879      	ldr	r1, [r7, #4]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f7ff ff6a 	bl	800a1f4 <prvSearchForNameWithinSingleList>
 800a320:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d103      	bne.n	800a330 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1ea      	bne.n	800a304 <xTaskGetHandle+0x34>
 800a32e:	e000      	b.n	800a332 <xTaskGetHandle+0x62>
					break;
 800a330:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d106      	bne.n	800a346 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800a338:	4b14      	ldr	r3, [pc, #80]	@ (800a38c <xTaskGetHandle+0xbc>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	6879      	ldr	r1, [r7, #4]
 800a33e:	4618      	mov	r0, r3
 800a340:	f7ff ff58 	bl	800a1f4 <prvSearchForNameWithinSingleList>
 800a344:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d106      	bne.n	800a35a <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800a34c:	4b10      	ldr	r3, [pc, #64]	@ (800a390 <xTaskGetHandle+0xc0>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	6879      	ldr	r1, [r7, #4]
 800a352:	4618      	mov	r0, r3
 800a354:	f7ff ff4e 	bl	800a1f4 <prvSearchForNameWithinSingleList>
 800a358:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d104      	bne.n	800a36a <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800a360:	6879      	ldr	r1, [r7, #4]
 800a362:	480c      	ldr	r0, [pc, #48]	@ (800a394 <xTaskGetHandle+0xc4>)
 800a364:	f7ff ff46 	bl	800a1f4 <prvSearchForNameWithinSingleList>
 800a368:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d104      	bne.n	800a37a <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800a370:	6879      	ldr	r1, [r7, #4]
 800a372:	4809      	ldr	r0, [pc, #36]	@ (800a398 <xTaskGetHandle+0xc8>)
 800a374:	f7ff ff3e 	bl	800a1f4 <prvSearchForNameWithinSingleList>
 800a378:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800a37a:	f7ff fe67 	bl	800a04c <xTaskResumeAll>

		return pxTCB;
 800a37e:	693b      	ldr	r3, [r7, #16]
	}
 800a380:	4618      	mov	r0, r3
 800a382:	3718      	adds	r7, #24
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	2000136c 	.word	0x2000136c
 800a38c:	200017f4 	.word	0x200017f4
 800a390:	200017f8 	.word	0x200017f8
 800a394:	20001828 	.word	0x20001828
 800a398:	20001810 	.word	0x20001810

0800a39c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a4e4 <xTaskIncrementTick+0x148>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	f040 8090 	bne.w	800a4d0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a3b0:	4b4d      	ldr	r3, [pc, #308]	@ (800a4e8 <xTaskIncrementTick+0x14c>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	3301      	adds	r3, #1
 800a3b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a3b8:	4a4b      	ldr	r2, [pc, #300]	@ (800a4e8 <xTaskIncrementTick+0x14c>)
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d121      	bne.n	800a408 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a3c4:	4b49      	ldr	r3, [pc, #292]	@ (800a4ec <xTaskIncrementTick+0x150>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00b      	beq.n	800a3e6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a3ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d2:	f383 8811 	msr	BASEPRI, r3
 800a3d6:	f3bf 8f6f 	isb	sy
 800a3da:	f3bf 8f4f 	dsb	sy
 800a3de:	603b      	str	r3, [r7, #0]
}
 800a3e0:	bf00      	nop
 800a3e2:	bf00      	nop
 800a3e4:	e7fd      	b.n	800a3e2 <xTaskIncrementTick+0x46>
 800a3e6:	4b41      	ldr	r3, [pc, #260]	@ (800a4ec <xTaskIncrementTick+0x150>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	4b40      	ldr	r3, [pc, #256]	@ (800a4f0 <xTaskIncrementTick+0x154>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a3e      	ldr	r2, [pc, #248]	@ (800a4ec <xTaskIncrementTick+0x150>)
 800a3f2:	6013      	str	r3, [r2, #0]
 800a3f4:	4a3e      	ldr	r2, [pc, #248]	@ (800a4f0 <xTaskIncrementTick+0x154>)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6013      	str	r3, [r2, #0]
 800a3fa:	4b3e      	ldr	r3, [pc, #248]	@ (800a4f4 <xTaskIncrementTick+0x158>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3301      	adds	r3, #1
 800a400:	4a3c      	ldr	r2, [pc, #240]	@ (800a4f4 <xTaskIncrementTick+0x158>)
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	f000 fae2 	bl	800a9cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a408:	4b3b      	ldr	r3, [pc, #236]	@ (800a4f8 <xTaskIncrementTick+0x15c>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	693a      	ldr	r2, [r7, #16]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d349      	bcc.n	800a4a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a412:	4b36      	ldr	r3, [pc, #216]	@ (800a4ec <xTaskIncrementTick+0x150>)
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d104      	bne.n	800a426 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a41c:	4b36      	ldr	r3, [pc, #216]	@ (800a4f8 <xTaskIncrementTick+0x15c>)
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a422:	601a      	str	r2, [r3, #0]
					break;
 800a424:	e03f      	b.n	800a4a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a426:	4b31      	ldr	r3, [pc, #196]	@ (800a4ec <xTaskIncrementTick+0x150>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68db      	ldr	r3, [r3, #12]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a436:	693a      	ldr	r2, [r7, #16]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d203      	bcs.n	800a446 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a43e:	4a2e      	ldr	r2, [pc, #184]	@ (800a4f8 <xTaskIncrementTick+0x15c>)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a444:	e02f      	b.n	800a4a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	3304      	adds	r3, #4
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fe68 	bl	8009120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a454:	2b00      	cmp	r3, #0
 800a456:	d004      	beq.n	800a462 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	3318      	adds	r3, #24
 800a45c:	4618      	mov	r0, r3
 800a45e:	f7fe fe5f 	bl	8009120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a466:	4b25      	ldr	r3, [pc, #148]	@ (800a4fc <xTaskIncrementTick+0x160>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d903      	bls.n	800a476 <xTaskIncrementTick+0xda>
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a472:	4a22      	ldr	r2, [pc, #136]	@ (800a4fc <xTaskIncrementTick+0x160>)
 800a474:	6013      	str	r3, [r2, #0]
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a47a:	4613      	mov	r3, r2
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	4413      	add	r3, r2
 800a480:	009b      	lsls	r3, r3, #2
 800a482:	4a1f      	ldr	r2, [pc, #124]	@ (800a500 <xTaskIncrementTick+0x164>)
 800a484:	441a      	add	r2, r3
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	3304      	adds	r3, #4
 800a48a:	4619      	mov	r1, r3
 800a48c:	4610      	mov	r0, r2
 800a48e:	f7fe fdea 	bl	8009066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a496:	4b1b      	ldr	r3, [pc, #108]	@ (800a504 <xTaskIncrementTick+0x168>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d3b8      	bcc.n	800a412 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4a4:	e7b5      	b.n	800a412 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a4a6:	4b17      	ldr	r3, [pc, #92]	@ (800a504 <xTaskIncrementTick+0x168>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a4ac:	4914      	ldr	r1, [pc, #80]	@ (800a500 <xTaskIncrementTick+0x164>)
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	4413      	add	r3, r2
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	440b      	add	r3, r1
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d901      	bls.n	800a4c2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a4c2:	4b11      	ldr	r3, [pc, #68]	@ (800a508 <xTaskIncrementTick+0x16c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d007      	beq.n	800a4da <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	617b      	str	r3, [r7, #20]
 800a4ce:	e004      	b.n	800a4da <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a4d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a50c <xTaskIncrementTick+0x170>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	4a0d      	ldr	r2, [pc, #52]	@ (800a50c <xTaskIncrementTick+0x170>)
 800a4d8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a4da:	697b      	ldr	r3, [r7, #20]
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3718      	adds	r7, #24
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}
 800a4e4:	20001864 	.word	0x20001864
 800a4e8:	20001840 	.word	0x20001840
 800a4ec:	200017f4 	.word	0x200017f4
 800a4f0:	200017f8 	.word	0x200017f8
 800a4f4:	20001854 	.word	0x20001854
 800a4f8:	2000185c 	.word	0x2000185c
 800a4fc:	20001844 	.word	0x20001844
 800a500:	2000136c 	.word	0x2000136c
 800a504:	20001368 	.word	0x20001368
 800a508:	20001850 	.word	0x20001850
 800a50c:	2000184c 	.word	0x2000184c

0800a510 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a516:	4b2b      	ldr	r3, [pc, #172]	@ (800a5c4 <vTaskSwitchContext+0xb4>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d003      	beq.n	800a526 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a51e:	4b2a      	ldr	r3, [pc, #168]	@ (800a5c8 <vTaskSwitchContext+0xb8>)
 800a520:	2201      	movs	r2, #1
 800a522:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a524:	e047      	b.n	800a5b6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800a526:	4b28      	ldr	r3, [pc, #160]	@ (800a5c8 <vTaskSwitchContext+0xb8>)
 800a528:	2200      	movs	r2, #0
 800a52a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a52c:	4b27      	ldr	r3, [pc, #156]	@ (800a5cc <vTaskSwitchContext+0xbc>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	60fb      	str	r3, [r7, #12]
 800a532:	e011      	b.n	800a558 <vTaskSwitchContext+0x48>
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d10b      	bne.n	800a552 <vTaskSwitchContext+0x42>
	__asm volatile
 800a53a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a53e:	f383 8811 	msr	BASEPRI, r3
 800a542:	f3bf 8f6f 	isb	sy
 800a546:	f3bf 8f4f 	dsb	sy
 800a54a:	607b      	str	r3, [r7, #4]
}
 800a54c:	bf00      	nop
 800a54e:	bf00      	nop
 800a550:	e7fd      	b.n	800a54e <vTaskSwitchContext+0x3e>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	3b01      	subs	r3, #1
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	491d      	ldr	r1, [pc, #116]	@ (800a5d0 <vTaskSwitchContext+0xc0>)
 800a55a:	68fa      	ldr	r2, [r7, #12]
 800a55c:	4613      	mov	r3, r2
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	440b      	add	r3, r1
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0e3      	beq.n	800a534 <vTaskSwitchContext+0x24>
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	4613      	mov	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	4a16      	ldr	r2, [pc, #88]	@ (800a5d0 <vTaskSwitchContext+0xc0>)
 800a578:	4413      	add	r3, r2
 800a57a:	60bb      	str	r3, [r7, #8]
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	685a      	ldr	r2, [r3, #4]
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	605a      	str	r2, [r3, #4]
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	3308      	adds	r3, #8
 800a58e:	429a      	cmp	r2, r3
 800a590:	d104      	bne.n	800a59c <vTaskSwitchContext+0x8c>
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	685a      	ldr	r2, [r3, #4]
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	605a      	str	r2, [r3, #4]
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	68db      	ldr	r3, [r3, #12]
 800a5a2:	4a0c      	ldr	r2, [pc, #48]	@ (800a5d4 <vTaskSwitchContext+0xc4>)
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	4a09      	ldr	r2, [pc, #36]	@ (800a5cc <vTaskSwitchContext+0xbc>)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a5ac:	4b09      	ldr	r3, [pc, #36]	@ (800a5d4 <vTaskSwitchContext+0xc4>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3354      	adds	r3, #84	@ 0x54
 800a5b2:	4a09      	ldr	r2, [pc, #36]	@ (800a5d8 <vTaskSwitchContext+0xc8>)
 800a5b4:	6013      	str	r3, [r2, #0]
}
 800a5b6:	bf00      	nop
 800a5b8:	3714      	adds	r7, #20
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	20001864 	.word	0x20001864
 800a5c8:	20001850 	.word	0x20001850
 800a5cc:	20001844 	.word	0x20001844
 800a5d0:	2000136c 	.word	0x2000136c
 800a5d4:	20001368 	.word	0x20001368
 800a5d8:	2000002c 	.word	0x2000002c

0800a5dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d10b      	bne.n	800a604 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	60fb      	str	r3, [r7, #12]
}
 800a5fe:	bf00      	nop
 800a600:	bf00      	nop
 800a602:	e7fd      	b.n	800a600 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a604:	4b07      	ldr	r3, [pc, #28]	@ (800a624 <vTaskPlaceOnEventList+0x48>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	3318      	adds	r3, #24
 800a60a:	4619      	mov	r1, r3
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f7fe fd4e 	bl	80090ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a612:	2101      	movs	r1, #1
 800a614:	6838      	ldr	r0, [r7, #0]
 800a616:	f000 fb69 	bl	800acec <prvAddCurrentTaskToDelayedList>
}
 800a61a:	bf00      	nop
 800a61c:	3710      	adds	r7, #16
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	20001368 	.word	0x20001368

0800a628 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b086      	sub	sp, #24
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10b      	bne.n	800a652 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	617b      	str	r3, [r7, #20]
}
 800a64c:	bf00      	nop
 800a64e:	bf00      	nop
 800a650:	e7fd      	b.n	800a64e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a652:	4b0a      	ldr	r3, [pc, #40]	@ (800a67c <vTaskPlaceOnEventListRestricted+0x54>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	3318      	adds	r3, #24
 800a658:	4619      	mov	r1, r3
 800a65a:	68f8      	ldr	r0, [r7, #12]
 800a65c:	f7fe fd03 	bl	8009066 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d002      	beq.n	800a66c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a66a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	68b8      	ldr	r0, [r7, #8]
 800a670:	f000 fb3c 	bl	800acec <prvAddCurrentTaskToDelayedList>
	}
 800a674:	bf00      	nop
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	20001368 	.word	0x20001368

0800a680 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d10b      	bne.n	800a6ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69a:	f383 8811 	msr	BASEPRI, r3
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f3bf 8f4f 	dsb	sy
 800a6a6:	60fb      	str	r3, [r7, #12]
}
 800a6a8:	bf00      	nop
 800a6aa:	bf00      	nop
 800a6ac:	e7fd      	b.n	800a6aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	3318      	adds	r3, #24
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fe fd34 	bl	8009120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a730 <xTaskRemoveFromEventList+0xb0>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d11d      	bne.n	800a6fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	3304      	adds	r3, #4
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f7fe fd2b 	bl	8009120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a6ca:	693b      	ldr	r3, [r7, #16]
 800a6cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6ce:	4b19      	ldr	r3, [pc, #100]	@ (800a734 <xTaskRemoveFromEventList+0xb4>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d903      	bls.n	800a6de <xTaskRemoveFromEventList+0x5e>
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6da:	4a16      	ldr	r2, [pc, #88]	@ (800a734 <xTaskRemoveFromEventList+0xb4>)
 800a6dc:	6013      	str	r3, [r2, #0]
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e2:	4613      	mov	r3, r2
 800a6e4:	009b      	lsls	r3, r3, #2
 800a6e6:	4413      	add	r3, r2
 800a6e8:	009b      	lsls	r3, r3, #2
 800a6ea:	4a13      	ldr	r2, [pc, #76]	@ (800a738 <xTaskRemoveFromEventList+0xb8>)
 800a6ec:	441a      	add	r2, r3
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	3304      	adds	r3, #4
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	f7fe fcb6 	bl	8009066 <vListInsertEnd>
 800a6fa:	e005      	b.n	800a708 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	3318      	adds	r3, #24
 800a700:	4619      	mov	r1, r3
 800a702:	480e      	ldr	r0, [pc, #56]	@ (800a73c <xTaskRemoveFromEventList+0xbc>)
 800a704:	f7fe fcaf 	bl	8009066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a70c:	4b0c      	ldr	r3, [pc, #48]	@ (800a740 <xTaskRemoveFromEventList+0xc0>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a712:	429a      	cmp	r2, r3
 800a714:	d905      	bls.n	800a722 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a716:	2301      	movs	r3, #1
 800a718:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a71a:	4b0a      	ldr	r3, [pc, #40]	@ (800a744 <xTaskRemoveFromEventList+0xc4>)
 800a71c:	2201      	movs	r2, #1
 800a71e:	601a      	str	r2, [r3, #0]
 800a720:	e001      	b.n	800a726 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a722:	2300      	movs	r3, #0
 800a724:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a726:	697b      	ldr	r3, [r7, #20]
}
 800a728:	4618      	mov	r0, r3
 800a72a:	3718      	adds	r7, #24
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	20001864 	.word	0x20001864
 800a734:	20001844 	.word	0x20001844
 800a738:	2000136c 	.word	0x2000136c
 800a73c:	200017fc 	.word	0x200017fc
 800a740:	20001368 	.word	0x20001368
 800a744:	20001850 	.word	0x20001850

0800a748 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a750:	4b06      	ldr	r3, [pc, #24]	@ (800a76c <vTaskInternalSetTimeOutState+0x24>)
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a758:	4b05      	ldr	r3, [pc, #20]	@ (800a770 <vTaskInternalSetTimeOutState+0x28>)
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	605a      	str	r2, [r3, #4]
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr
 800a76c:	20001854 	.word	0x20001854
 800a770:	20001840 	.word	0x20001840

0800a774 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b088      	sub	sp, #32
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
 800a77c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d10b      	bne.n	800a79c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	613b      	str	r3, [r7, #16]
}
 800a796:	bf00      	nop
 800a798:	bf00      	nop
 800a79a:	e7fd      	b.n	800a798 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d10b      	bne.n	800a7ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a7a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a6:	f383 8811 	msr	BASEPRI, r3
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	60fb      	str	r3, [r7, #12]
}
 800a7b4:	bf00      	nop
 800a7b6:	bf00      	nop
 800a7b8:	e7fd      	b.n	800a7b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a7ba:	f000 ff75 	bl	800b6a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a7be:	4b1d      	ldr	r3, [pc, #116]	@ (800a834 <xTaskCheckForTimeOut+0xc0>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	69ba      	ldr	r2, [r7, #24]
 800a7ca:	1ad3      	subs	r3, r2, r3
 800a7cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7d6:	d102      	bne.n	800a7de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	61fb      	str	r3, [r7, #28]
 800a7dc:	e023      	b.n	800a826 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	4b15      	ldr	r3, [pc, #84]	@ (800a838 <xTaskCheckForTimeOut+0xc4>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d007      	beq.n	800a7fa <xTaskCheckForTimeOut+0x86>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	69ba      	ldr	r2, [r7, #24]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d302      	bcc.n	800a7fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	61fb      	str	r3, [r7, #28]
 800a7f8:	e015      	b.n	800a826 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	697a      	ldr	r2, [r7, #20]
 800a800:	429a      	cmp	r2, r3
 800a802:	d20b      	bcs.n	800a81c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	681a      	ldr	r2, [r3, #0]
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	1ad2      	subs	r2, r2, r3
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff ff99 	bl	800a748 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a816:	2300      	movs	r3, #0
 800a818:	61fb      	str	r3, [r7, #28]
 800a81a:	e004      	b.n	800a826 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	2200      	movs	r2, #0
 800a820:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a822:	2301      	movs	r3, #1
 800a824:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a826:	f000 ff71 	bl	800b70c <vPortExitCritical>

	return xReturn;
 800a82a:	69fb      	ldr	r3, [r7, #28]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3720      	adds	r7, #32
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}
 800a834:	20001840 	.word	0x20001840
 800a838:	20001854 	.word	0x20001854

0800a83c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a83c:	b480      	push	{r7}
 800a83e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a840:	4b03      	ldr	r3, [pc, #12]	@ (800a850 <vTaskMissedYield+0x14>)
 800a842:	2201      	movs	r2, #1
 800a844:	601a      	str	r2, [r3, #0]
}
 800a846:	bf00      	nop
 800a848:	46bd      	mov	sp, r7
 800a84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84e:	4770      	bx	lr
 800a850:	20001850 	.word	0x20001850

0800a854 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b082      	sub	sp, #8
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a85c:	f000 f852 	bl	800a904 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a860:	4b06      	ldr	r3, [pc, #24]	@ (800a87c <prvIdleTask+0x28>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	2b01      	cmp	r3, #1
 800a866:	d9f9      	bls.n	800a85c <prvIdleTask+0x8>
			{
				taskYIELD();
 800a868:	4b05      	ldr	r3, [pc, #20]	@ (800a880 <prvIdleTask+0x2c>)
 800a86a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a86e:	601a      	str	r2, [r3, #0]
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a878:	e7f0      	b.n	800a85c <prvIdleTask+0x8>
 800a87a:	bf00      	nop
 800a87c:	2000136c 	.word	0x2000136c
 800a880:	e000ed04 	.word	0xe000ed04

0800a884 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b082      	sub	sp, #8
 800a888:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a88a:	2300      	movs	r3, #0
 800a88c:	607b      	str	r3, [r7, #4]
 800a88e:	e00c      	b.n	800a8aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	4613      	mov	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	4413      	add	r3, r2
 800a898:	009b      	lsls	r3, r3, #2
 800a89a:	4a12      	ldr	r2, [pc, #72]	@ (800a8e4 <prvInitialiseTaskLists+0x60>)
 800a89c:	4413      	add	r3, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7fe fbb4 	bl	800900c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	607b      	str	r3, [r7, #4]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b37      	cmp	r3, #55	@ 0x37
 800a8ae:	d9ef      	bls.n	800a890 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a8b0:	480d      	ldr	r0, [pc, #52]	@ (800a8e8 <prvInitialiseTaskLists+0x64>)
 800a8b2:	f7fe fbab 	bl	800900c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a8b6:	480d      	ldr	r0, [pc, #52]	@ (800a8ec <prvInitialiseTaskLists+0x68>)
 800a8b8:	f7fe fba8 	bl	800900c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a8bc:	480c      	ldr	r0, [pc, #48]	@ (800a8f0 <prvInitialiseTaskLists+0x6c>)
 800a8be:	f7fe fba5 	bl	800900c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a8c2:	480c      	ldr	r0, [pc, #48]	@ (800a8f4 <prvInitialiseTaskLists+0x70>)
 800a8c4:	f7fe fba2 	bl	800900c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a8c8:	480b      	ldr	r0, [pc, #44]	@ (800a8f8 <prvInitialiseTaskLists+0x74>)
 800a8ca:	f7fe fb9f 	bl	800900c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a8ce:	4b0b      	ldr	r3, [pc, #44]	@ (800a8fc <prvInitialiseTaskLists+0x78>)
 800a8d0:	4a05      	ldr	r2, [pc, #20]	@ (800a8e8 <prvInitialiseTaskLists+0x64>)
 800a8d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a8d4:	4b0a      	ldr	r3, [pc, #40]	@ (800a900 <prvInitialiseTaskLists+0x7c>)
 800a8d6:	4a05      	ldr	r2, [pc, #20]	@ (800a8ec <prvInitialiseTaskLists+0x68>)
 800a8d8:	601a      	str	r2, [r3, #0]
}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	2000136c 	.word	0x2000136c
 800a8e8:	200017cc 	.word	0x200017cc
 800a8ec:	200017e0 	.word	0x200017e0
 800a8f0:	200017fc 	.word	0x200017fc
 800a8f4:	20001810 	.word	0x20001810
 800a8f8:	20001828 	.word	0x20001828
 800a8fc:	200017f4 	.word	0x200017f4
 800a900:	200017f8 	.word	0x200017f8

0800a904 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b082      	sub	sp, #8
 800a908:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a90a:	e019      	b.n	800a940 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a90c:	f000 fecc 	bl	800b6a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a910:	4b10      	ldr	r3, [pc, #64]	@ (800a954 <prvCheckTasksWaitingTermination+0x50>)
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	3304      	adds	r3, #4
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fe fbff 	bl	8009120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a922:	4b0d      	ldr	r3, [pc, #52]	@ (800a958 <prvCheckTasksWaitingTermination+0x54>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3b01      	subs	r3, #1
 800a928:	4a0b      	ldr	r2, [pc, #44]	@ (800a958 <prvCheckTasksWaitingTermination+0x54>)
 800a92a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a92c:	4b0b      	ldr	r3, [pc, #44]	@ (800a95c <prvCheckTasksWaitingTermination+0x58>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	3b01      	subs	r3, #1
 800a932:	4a0a      	ldr	r2, [pc, #40]	@ (800a95c <prvCheckTasksWaitingTermination+0x58>)
 800a934:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a936:	f000 fee9 	bl	800b70c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f810 	bl	800a960 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a940:	4b06      	ldr	r3, [pc, #24]	@ (800a95c <prvCheckTasksWaitingTermination+0x58>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d1e1      	bne.n	800a90c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a948:	bf00      	nop
 800a94a:	bf00      	nop
 800a94c:	3708      	adds	r7, #8
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
 800a952:	bf00      	nop
 800a954:	20001810 	.word	0x20001810
 800a958:	2000183c 	.word	0x2000183c
 800a95c:	20001824 	.word	0x20001824

0800a960 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	3354      	adds	r3, #84	@ 0x54
 800a96c:	4618      	mov	r0, r3
 800a96e:	f001 f9d3 	bl	800bd18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d108      	bne.n	800a98e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a980:	4618      	mov	r0, r3
 800a982:	f001 f881 	bl	800ba88 <vPortFree>
				vPortFree( pxTCB );
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f001 f87e 	bl	800ba88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a98c:	e019      	b.n	800a9c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a994:	2b01      	cmp	r3, #1
 800a996:	d103      	bne.n	800a9a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f001 f875 	bl	800ba88 <vPortFree>
	}
 800a99e:	e010      	b.n	800a9c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	d00b      	beq.n	800a9c2 <prvDeleteTCB+0x62>
	__asm volatile
 800a9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9ae:	f383 8811 	msr	BASEPRI, r3
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	60fb      	str	r3, [r7, #12]
}
 800a9bc:	bf00      	nop
 800a9be:	bf00      	nop
 800a9c0:	e7fd      	b.n	800a9be <prvDeleteTCB+0x5e>
	}
 800a9c2:	bf00      	nop
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9d2:	4b0c      	ldr	r3, [pc, #48]	@ (800aa04 <prvResetNextTaskUnblockTime+0x38>)
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d104      	bne.n	800a9e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a9dc:	4b0a      	ldr	r3, [pc, #40]	@ (800aa08 <prvResetNextTaskUnblockTime+0x3c>)
 800a9de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a9e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a9e4:	e008      	b.n	800a9f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e6:	4b07      	ldr	r3, [pc, #28]	@ (800aa04 <prvResetNextTaskUnblockTime+0x38>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4a04      	ldr	r2, [pc, #16]	@ (800aa08 <prvResetNextTaskUnblockTime+0x3c>)
 800a9f6:	6013      	str	r3, [r2, #0]
}
 800a9f8:	bf00      	nop
 800a9fa:	370c      	adds	r7, #12
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa02:	4770      	bx	lr
 800aa04:	200017f4 	.word	0x200017f4
 800aa08:	2000185c 	.word	0x2000185c

0800aa0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aa12:	4b0b      	ldr	r3, [pc, #44]	@ (800aa40 <xTaskGetSchedulerState+0x34>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d102      	bne.n	800aa20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	607b      	str	r3, [r7, #4]
 800aa1e:	e008      	b.n	800aa32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa20:	4b08      	ldr	r3, [pc, #32]	@ (800aa44 <xTaskGetSchedulerState+0x38>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d102      	bne.n	800aa2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aa28:	2302      	movs	r3, #2
 800aa2a:	607b      	str	r3, [r7, #4]
 800aa2c:	e001      	b.n	800aa32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aa32:	687b      	ldr	r3, [r7, #4]
	}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr
 800aa40:	20001848 	.word	0x20001848
 800aa44:	20001864 	.word	0x20001864

0800aa48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aa54:	2300      	movs	r3, #0
 800aa56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d058      	beq.n	800ab10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aa5e:	4b2f      	ldr	r3, [pc, #188]	@ (800ab1c <xTaskPriorityDisinherit+0xd4>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d00b      	beq.n	800aa80 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800aa68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa6c:	f383 8811 	msr	BASEPRI, r3
 800aa70:	f3bf 8f6f 	isb	sy
 800aa74:	f3bf 8f4f 	dsb	sy
 800aa78:	60fb      	str	r3, [r7, #12]
}
 800aa7a:	bf00      	nop
 800aa7c:	bf00      	nop
 800aa7e:	e7fd      	b.n	800aa7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10b      	bne.n	800aaa0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800aa88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8c:	f383 8811 	msr	BASEPRI, r3
 800aa90:	f3bf 8f6f 	isb	sy
 800aa94:	f3bf 8f4f 	dsb	sy
 800aa98:	60bb      	str	r3, [r7, #8]
}
 800aa9a:	bf00      	nop
 800aa9c:	bf00      	nop
 800aa9e:	e7fd      	b.n	800aa9c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaa4:	1e5a      	subs	r2, r3, #1
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d02c      	beq.n	800ab10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d128      	bne.n	800ab10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	3304      	adds	r3, #4
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe fb2c 	bl	8009120 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aad4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aae0:	4b0f      	ldr	r3, [pc, #60]	@ (800ab20 <xTaskPriorityDisinherit+0xd8>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d903      	bls.n	800aaf0 <xTaskPriorityDisinherit+0xa8>
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaec:	4a0c      	ldr	r2, [pc, #48]	@ (800ab20 <xTaskPriorityDisinherit+0xd8>)
 800aaee:	6013      	str	r3, [r2, #0]
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf4:	4613      	mov	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	4413      	add	r3, r2
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4a09      	ldr	r2, [pc, #36]	@ (800ab24 <xTaskPriorityDisinherit+0xdc>)
 800aafe:	441a      	add	r2, r3
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	3304      	adds	r3, #4
 800ab04:	4619      	mov	r1, r3
 800ab06:	4610      	mov	r0, r2
 800ab08:	f7fe faad 	bl	8009066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ab10:	697b      	ldr	r3, [r7, #20]
	}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bd80      	pop	{r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	20001368 	.word	0x20001368
 800ab20:	20001844 	.word	0x20001844
 800ab24:	2000136c 	.word	0x2000136c

0800ab28 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ab32:	f000 fdb9 	bl	800b6a8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ab36:	4b20      	ldr	r3, [pc, #128]	@ (800abb8 <ulTaskNotifyTake+0x90>)
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d113      	bne.n	800ab6a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ab42:	4b1d      	ldr	r3, [pc, #116]	@ (800abb8 <ulTaskNotifyTake+0x90>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	2201      	movs	r2, #1
 800ab48:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00b      	beq.n	800ab6a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab52:	2101      	movs	r1, #1
 800ab54:	6838      	ldr	r0, [r7, #0]
 800ab56:	f000 f8c9 	bl	800acec <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ab5a:	4b18      	ldr	r3, [pc, #96]	@ (800abbc <ulTaskNotifyTake+0x94>)
 800ab5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	f3bf 8f4f 	dsb	sy
 800ab66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ab6a:	f000 fdcf 	bl	800b70c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ab6e:	f000 fd9b 	bl	800b6a8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ab72:	4b11      	ldr	r3, [pc, #68]	@ (800abb8 <ulTaskNotifyTake+0x90>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab7a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00e      	beq.n	800aba0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d005      	beq.n	800ab94 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ab88:	4b0b      	ldr	r3, [pc, #44]	@ (800abb8 <ulTaskNotifyTake+0x90>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800ab92:	e005      	b.n	800aba0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ab94:	4b08      	ldr	r3, [pc, #32]	@ (800abb8 <ulTaskNotifyTake+0x90>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	3a01      	subs	r2, #1
 800ab9c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aba0:	4b05      	ldr	r3, [pc, #20]	@ (800abb8 <ulTaskNotifyTake+0x90>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2200      	movs	r2, #0
 800aba6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800abaa:	f000 fdaf 	bl	800b70c <vPortExitCritical>

		return ulReturn;
 800abae:	68fb      	ldr	r3, [r7, #12]
	}
 800abb0:	4618      	mov	r0, r3
 800abb2:	3710      	adds	r7, #16
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	20001368 	.word	0x20001368
 800abbc:	e000ed04 	.word	0xe000ed04

0800abc0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b08a      	sub	sp, #40	@ 0x28
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
 800abc8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10b      	bne.n	800abe8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800abd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd4:	f383 8811 	msr	BASEPRI, r3
 800abd8:	f3bf 8f6f 	isb	sy
 800abdc:	f3bf 8f4f 	dsb	sy
 800abe0:	61bb      	str	r3, [r7, #24]
}
 800abe2:	bf00      	nop
 800abe4:	bf00      	nop
 800abe6:	e7fd      	b.n	800abe4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800abe8:	f000 fe3e 	bl	800b868 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800abf0:	f3ef 8211 	mrs	r2, BASEPRI
 800abf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abf8:	f383 8811 	msr	BASEPRI, r3
 800abfc:	f3bf 8f6f 	isb	sy
 800ac00:	f3bf 8f4f 	dsb	sy
 800ac04:	617a      	str	r2, [r7, #20]
 800ac06:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ac08:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac0a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ac0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ac12:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ac14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac16:	2202      	movs	r2, #2
 800ac18:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800ac1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac26:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ac2a:	7ffb      	ldrb	r3, [r7, #31]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d147      	bne.n	800acc0 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ac30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00b      	beq.n	800ac50 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	60fb      	str	r3, [r7, #12]
}
 800ac4a:	bf00      	nop
 800ac4c:	bf00      	nop
 800ac4e:	e7fd      	b.n	800ac4c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac50:	4b20      	ldr	r3, [pc, #128]	@ (800acd4 <vTaskNotifyGiveFromISR+0x114>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d11d      	bne.n	800ac94 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac5a:	3304      	adds	r3, #4
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fe fa5f 	bl	8009120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ac62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac66:	4b1c      	ldr	r3, [pc, #112]	@ (800acd8 <vTaskNotifyGiveFromISR+0x118>)
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d903      	bls.n	800ac76 <vTaskNotifyGiveFromISR+0xb6>
 800ac6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac72:	4a19      	ldr	r2, [pc, #100]	@ (800acd8 <vTaskNotifyGiveFromISR+0x118>)
 800ac74:	6013      	str	r3, [r2, #0]
 800ac76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac7a:	4613      	mov	r3, r2
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	4413      	add	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	4a16      	ldr	r2, [pc, #88]	@ (800acdc <vTaskNotifyGiveFromISR+0x11c>)
 800ac84:	441a      	add	r2, r3
 800ac86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac88:	3304      	adds	r3, #4
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	4610      	mov	r0, r2
 800ac8e:	f7fe f9ea 	bl	8009066 <vListInsertEnd>
 800ac92:	e005      	b.n	800aca0 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	3318      	adds	r3, #24
 800ac98:	4619      	mov	r1, r3
 800ac9a:	4811      	ldr	r0, [pc, #68]	@ (800ace0 <vTaskNotifyGiveFromISR+0x120>)
 800ac9c:	f7fe f9e3 	bl	8009066 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800aca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aca4:	4b0f      	ldr	r3, [pc, #60]	@ (800ace4 <vTaskNotifyGiveFromISR+0x124>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acaa:	429a      	cmp	r2, r3
 800acac:	d908      	bls.n	800acc0 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d002      	beq.n	800acba <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	2201      	movs	r2, #1
 800acb8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800acba:	4b0b      	ldr	r3, [pc, #44]	@ (800ace8 <vTaskNotifyGiveFromISR+0x128>)
 800acbc:	2201      	movs	r2, #1
 800acbe:	601a      	str	r2, [r3, #0]
 800acc0:	6a3b      	ldr	r3, [r7, #32]
 800acc2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f383 8811 	msr	BASEPRI, r3
}
 800acca:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800accc:	bf00      	nop
 800acce:	3728      	adds	r7, #40	@ 0x28
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	20001864 	.word	0x20001864
 800acd8:	20001844 	.word	0x20001844
 800acdc:	2000136c 	.word	0x2000136c
 800ace0:	200017fc 	.word	0x200017fc
 800ace4:	20001368 	.word	0x20001368
 800ace8:	20001850 	.word	0x20001850

0800acec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800acf6:	4b21      	ldr	r3, [pc, #132]	@ (800ad7c <prvAddCurrentTaskToDelayedList+0x90>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acfc:	4b20      	ldr	r3, [pc, #128]	@ (800ad80 <prvAddCurrentTaskToDelayedList+0x94>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	3304      	adds	r3, #4
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fe fa0c 	bl	8009120 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad0e:	d10a      	bne.n	800ad26 <prvAddCurrentTaskToDelayedList+0x3a>
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d007      	beq.n	800ad26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad16:	4b1a      	ldr	r3, [pc, #104]	@ (800ad80 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	3304      	adds	r3, #4
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	4819      	ldr	r0, [pc, #100]	@ (800ad84 <prvAddCurrentTaskToDelayedList+0x98>)
 800ad20:	f7fe f9a1 	bl	8009066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad24:	e026      	b.n	800ad74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ad2e:	4b14      	ldr	r3, [pc, #80]	@ (800ad80 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	68ba      	ldr	r2, [r7, #8]
 800ad34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	429a      	cmp	r2, r3
 800ad3c:	d209      	bcs.n	800ad52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad3e:	4b12      	ldr	r3, [pc, #72]	@ (800ad88 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	4b0f      	ldr	r3, [pc, #60]	@ (800ad80 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3304      	adds	r3, #4
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4610      	mov	r0, r2
 800ad4c:	f7fe f9af 	bl	80090ae <vListInsert>
}
 800ad50:	e010      	b.n	800ad74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad52:	4b0e      	ldr	r3, [pc, #56]	@ (800ad8c <prvAddCurrentTaskToDelayedList+0xa0>)
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	4b0a      	ldr	r3, [pc, #40]	@ (800ad80 <prvAddCurrentTaskToDelayedList+0x94>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	3304      	adds	r3, #4
 800ad5c:	4619      	mov	r1, r3
 800ad5e:	4610      	mov	r0, r2
 800ad60:	f7fe f9a5 	bl	80090ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ad64:	4b0a      	ldr	r3, [pc, #40]	@ (800ad90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	68ba      	ldr	r2, [r7, #8]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d202      	bcs.n	800ad74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ad6e:	4a08      	ldr	r2, [pc, #32]	@ (800ad90 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	6013      	str	r3, [r2, #0]
}
 800ad74:	bf00      	nop
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}
 800ad7c:	20001840 	.word	0x20001840
 800ad80:	20001368 	.word	0x20001368
 800ad84:	20001828 	.word	0x20001828
 800ad88:	200017f8 	.word	0x200017f8
 800ad8c:	200017f4 	.word	0x200017f4
 800ad90:	2000185c 	.word	0x2000185c

0800ad94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08a      	sub	sp, #40	@ 0x28
 800ad98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ad9e:	f000 fb13 	bl	800b3c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ada2:	4b1d      	ldr	r3, [pc, #116]	@ (800ae18 <xTimerCreateTimerTask+0x84>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d021      	beq.n	800adee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800adaa:	2300      	movs	r3, #0
 800adac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800adae:	2300      	movs	r3, #0
 800adb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800adb2:	1d3a      	adds	r2, r7, #4
 800adb4:	f107 0108 	add.w	r1, r7, #8
 800adb8:	f107 030c 	add.w	r3, r7, #12
 800adbc:	4618      	mov	r0, r3
 800adbe:	f7fe f90b 	bl	8008fd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	68fa      	ldr	r2, [r7, #12]
 800adc8:	9202      	str	r2, [sp, #8]
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	2302      	movs	r3, #2
 800adce:	9300      	str	r3, [sp, #0]
 800add0:	2300      	movs	r3, #0
 800add2:	460a      	mov	r2, r1
 800add4:	4911      	ldr	r1, [pc, #68]	@ (800ae1c <xTimerCreateTimerTask+0x88>)
 800add6:	4812      	ldr	r0, [pc, #72]	@ (800ae20 <xTimerCreateTimerTask+0x8c>)
 800add8:	f7fe fec6 	bl	8009b68 <xTaskCreateStatic>
 800addc:	4603      	mov	r3, r0
 800adde:	4a11      	ldr	r2, [pc, #68]	@ (800ae24 <xTimerCreateTimerTask+0x90>)
 800ade0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ade2:	4b10      	ldr	r3, [pc, #64]	@ (800ae24 <xTimerCreateTimerTask+0x90>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d001      	beq.n	800adee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800adea:	2301      	movs	r3, #1
 800adec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d10b      	bne.n	800ae0c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800adf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adf8:	f383 8811 	msr	BASEPRI, r3
 800adfc:	f3bf 8f6f 	isb	sy
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	613b      	str	r3, [r7, #16]
}
 800ae06:	bf00      	nop
 800ae08:	bf00      	nop
 800ae0a:	e7fd      	b.n	800ae08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ae0c:	697b      	ldr	r3, [r7, #20]
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3718      	adds	r7, #24
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}
 800ae16:	bf00      	nop
 800ae18:	20001898 	.word	0x20001898
 800ae1c:	0800c71c 	.word	0x0800c71c
 800ae20:	0800af61 	.word	0x0800af61
 800ae24:	2000189c 	.word	0x2000189c

0800ae28 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b08a      	sub	sp, #40	@ 0x28
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	60f8      	str	r0, [r7, #12]
 800ae30:	60b9      	str	r1, [r7, #8]
 800ae32:	607a      	str	r2, [r7, #4]
 800ae34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ae36:	2300      	movs	r3, #0
 800ae38:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10b      	bne.n	800ae58 <xTimerGenericCommand+0x30>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	623b      	str	r3, [r7, #32]
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	e7fd      	b.n	800ae54 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ae58:	4b19      	ldr	r3, [pc, #100]	@ (800aec0 <xTimerGenericCommand+0x98>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d02a      	beq.n	800aeb6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2b05      	cmp	r3, #5
 800ae70:	dc18      	bgt.n	800aea4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ae72:	f7ff fdcb 	bl	800aa0c <xTaskGetSchedulerState>
 800ae76:	4603      	mov	r3, r0
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d109      	bne.n	800ae90 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ae7c:	4b10      	ldr	r3, [pc, #64]	@ (800aec0 <xTimerGenericCommand+0x98>)
 800ae7e:	6818      	ldr	r0, [r3, #0]
 800ae80:	f107 0110 	add.w	r1, r7, #16
 800ae84:	2300      	movs	r3, #0
 800ae86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae88:	f7fe fa7e 	bl	8009388 <xQueueGenericSend>
 800ae8c:	6278      	str	r0, [r7, #36]	@ 0x24
 800ae8e:	e012      	b.n	800aeb6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ae90:	4b0b      	ldr	r3, [pc, #44]	@ (800aec0 <xTimerGenericCommand+0x98>)
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	f107 0110 	add.w	r1, r7, #16
 800ae98:	2300      	movs	r3, #0
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f7fe fa74 	bl	8009388 <xQueueGenericSend>
 800aea0:	6278      	str	r0, [r7, #36]	@ 0x24
 800aea2:	e008      	b.n	800aeb6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800aea4:	4b06      	ldr	r3, [pc, #24]	@ (800aec0 <xTimerGenericCommand+0x98>)
 800aea6:	6818      	ldr	r0, [r3, #0]
 800aea8:	f107 0110 	add.w	r1, r7, #16
 800aeac:	2300      	movs	r3, #0
 800aeae:	683a      	ldr	r2, [r7, #0]
 800aeb0:	f7fe fb6c 	bl	800958c <xQueueGenericSendFromISR>
 800aeb4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3728      	adds	r7, #40	@ 0x28
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}
 800aec0:	20001898 	.word	0x20001898

0800aec4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b088      	sub	sp, #32
 800aec8:	af02      	add	r7, sp, #8
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aece:	4b23      	ldr	r3, [pc, #140]	@ (800af5c <prvProcessExpiredTimer+0x98>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	3304      	adds	r3, #4
 800aedc:	4618      	mov	r0, r3
 800aede:	f7fe f91f 	bl	8009120 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d023      	beq.n	800af38 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	699a      	ldr	r2, [r3, #24]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	18d1      	adds	r1, r2, r3
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	6978      	ldr	r0, [r7, #20]
 800aefe:	f000 f8d5 	bl	800b0ac <prvInsertTimerInActiveList>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d020      	beq.n	800af4a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af08:	2300      	movs	r3, #0
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	2300      	movs	r3, #0
 800af0e:	687a      	ldr	r2, [r7, #4]
 800af10:	2100      	movs	r1, #0
 800af12:	6978      	ldr	r0, [r7, #20]
 800af14:	f7ff ff88 	bl	800ae28 <xTimerGenericCommand>
 800af18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d114      	bne.n	800af4a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800af20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	60fb      	str	r3, [r7, #12]
}
 800af32:	bf00      	nop
 800af34:	bf00      	nop
 800af36:	e7fd      	b.n	800af34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af3e:	f023 0301 	bic.w	r3, r3, #1
 800af42:	b2da      	uxtb	r2, r3
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	6a1b      	ldr	r3, [r3, #32]
 800af4e:	6978      	ldr	r0, [r7, #20]
 800af50:	4798      	blx	r3
}
 800af52:	bf00      	nop
 800af54:	3718      	adds	r7, #24
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}
 800af5a:	bf00      	nop
 800af5c:	20001890 	.word	0x20001890

0800af60 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af68:	f107 0308 	add.w	r3, r7, #8
 800af6c:	4618      	mov	r0, r3
 800af6e:	f000 f859 	bl	800b024 <prvGetNextExpireTime>
 800af72:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	4619      	mov	r1, r3
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f000 f805 	bl	800af88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800af7e:	f000 f8d7 	bl	800b130 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800af82:	bf00      	nop
 800af84:	e7f0      	b.n	800af68 <prvTimerTask+0x8>
	...

0800af88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]
 800af90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800af92:	f7ff f84d 	bl	800a030 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800af96:	f107 0308 	add.w	r3, r7, #8
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f866 	bl	800b06c <prvSampleTimeNow>
 800afa0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d130      	bne.n	800b00a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d10a      	bne.n	800afc4 <prvProcessTimerOrBlockTask+0x3c>
 800afae:	687a      	ldr	r2, [r7, #4]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d806      	bhi.n	800afc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800afb6:	f7ff f849 	bl	800a04c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800afba:	68f9      	ldr	r1, [r7, #12]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f7ff ff81 	bl	800aec4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800afc2:	e024      	b.n	800b00e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d008      	beq.n	800afdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800afca:	4b13      	ldr	r3, [pc, #76]	@ (800b018 <prvProcessTimerOrBlockTask+0x90>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d101      	bne.n	800afd8 <prvProcessTimerOrBlockTask+0x50>
 800afd4:	2301      	movs	r3, #1
 800afd6:	e000      	b.n	800afda <prvProcessTimerOrBlockTask+0x52>
 800afd8:	2300      	movs	r3, #0
 800afda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800afdc:	4b0f      	ldr	r3, [pc, #60]	@ (800b01c <prvProcessTimerOrBlockTask+0x94>)
 800afde:	6818      	ldr	r0, [r3, #0]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	1ad3      	subs	r3, r2, r3
 800afe6:	683a      	ldr	r2, [r7, #0]
 800afe8:	4619      	mov	r1, r3
 800afea:	f7fe fd89 	bl	8009b00 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800afee:	f7ff f82d 	bl	800a04c <xTaskResumeAll>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d10a      	bne.n	800b00e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800aff8:	4b09      	ldr	r3, [pc, #36]	@ (800b020 <prvProcessTimerOrBlockTask+0x98>)
 800affa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800affe:	601a      	str	r2, [r3, #0]
 800b000:	f3bf 8f4f 	dsb	sy
 800b004:	f3bf 8f6f 	isb	sy
}
 800b008:	e001      	b.n	800b00e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b00a:	f7ff f81f 	bl	800a04c <xTaskResumeAll>
}
 800b00e:	bf00      	nop
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20001894 	.word	0x20001894
 800b01c:	20001898 	.word	0x20001898
 800b020:	e000ed04 	.word	0xe000ed04

0800b024 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b02c:	4b0e      	ldr	r3, [pc, #56]	@ (800b068 <prvGetNextExpireTime+0x44>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <prvGetNextExpireTime+0x16>
 800b036:	2201      	movs	r2, #1
 800b038:	e000      	b.n	800b03c <prvGetNextExpireTime+0x18>
 800b03a:	2200      	movs	r2, #0
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d105      	bne.n	800b054 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b048:	4b07      	ldr	r3, [pc, #28]	@ (800b068 <prvGetNextExpireTime+0x44>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	60fb      	str	r3, [r7, #12]
 800b052:	e001      	b.n	800b058 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b054:	2300      	movs	r3, #0
 800b056:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b058:	68fb      	ldr	r3, [r7, #12]
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3714      	adds	r7, #20
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr
 800b066:	bf00      	nop
 800b068:	20001890 	.word	0x20001890

0800b06c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b084      	sub	sp, #16
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b074:	f7ff f888 	bl	800a188 <xTaskGetTickCount>
 800b078:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b07a:	4b0b      	ldr	r3, [pc, #44]	@ (800b0a8 <prvSampleTimeNow+0x3c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	429a      	cmp	r2, r3
 800b082:	d205      	bcs.n	800b090 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b084:	f000 f93a 	bl	800b2fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	e002      	b.n	800b096 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b096:	4a04      	ldr	r2, [pc, #16]	@ (800b0a8 <prvSampleTimeNow+0x3c>)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b09c:	68fb      	ldr	r3, [r7, #12]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3710      	adds	r7, #16
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	bf00      	nop
 800b0a8:	200018a0 	.word	0x200018a0

0800b0ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b086      	sub	sp, #24
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	68ba      	ldr	r2, [r7, #8]
 800b0c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	68fa      	ldr	r2, [r7, #12]
 800b0c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d812      	bhi.n	800b0f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	683b      	ldr	r3, [r7, #0]
 800b0d6:	1ad2      	subs	r2, r2, r3
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d302      	bcc.n	800b0e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	617b      	str	r3, [r7, #20]
 800b0e4:	e01b      	b.n	800b11e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b0e6:	4b10      	ldr	r3, [pc, #64]	@ (800b128 <prvInsertTimerInActiveList+0x7c>)
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3304      	adds	r3, #4
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f7fd ffdc 	bl	80090ae <vListInsert>
 800b0f6:	e012      	b.n	800b11e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b0f8:	687a      	ldr	r2, [r7, #4]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d206      	bcs.n	800b10e <prvInsertTimerInActiveList+0x62>
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	429a      	cmp	r2, r3
 800b106:	d302      	bcc.n	800b10e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	e007      	b.n	800b11e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b10e:	4b07      	ldr	r3, [pc, #28]	@ (800b12c <prvInsertTimerInActiveList+0x80>)
 800b110:	681a      	ldr	r2, [r3, #0]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	3304      	adds	r3, #4
 800b116:	4619      	mov	r1, r3
 800b118:	4610      	mov	r0, r2
 800b11a:	f7fd ffc8 	bl	80090ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b11e:	697b      	ldr	r3, [r7, #20]
}
 800b120:	4618      	mov	r0, r3
 800b122:	3718      	adds	r7, #24
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}
 800b128:	20001894 	.word	0x20001894
 800b12c:	20001890 	.word	0x20001890

0800b130 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b08e      	sub	sp, #56	@ 0x38
 800b134:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b136:	e0ce      	b.n	800b2d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	da19      	bge.n	800b172 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b13e:	1d3b      	adds	r3, r7, #4
 800b140:	3304      	adds	r3, #4
 800b142:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10b      	bne.n	800b162 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800b14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14e:	f383 8811 	msr	BASEPRI, r3
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	61fb      	str	r3, [r7, #28]
}
 800b15c:	bf00      	nop
 800b15e:	bf00      	nop
 800b160:	e7fd      	b.n	800b15e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b168:	6850      	ldr	r0, [r2, #4]
 800b16a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b16c:	6892      	ldr	r2, [r2, #8]
 800b16e:	4611      	mov	r1, r2
 800b170:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2b00      	cmp	r3, #0
 800b176:	f2c0 80ae 	blt.w	800b2d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b180:	695b      	ldr	r3, [r3, #20]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d004      	beq.n	800b190 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b188:	3304      	adds	r3, #4
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7fd ffc8 	bl	8009120 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b190:	463b      	mov	r3, r7
 800b192:	4618      	mov	r0, r3
 800b194:	f7ff ff6a 	bl	800b06c <prvSampleTimeNow>
 800b198:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b09      	cmp	r3, #9
 800b19e:	f200 8097 	bhi.w	800b2d0 <prvProcessReceivedCommands+0x1a0>
 800b1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a8 <prvProcessReceivedCommands+0x78>)
 800b1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a8:	0800b1d1 	.word	0x0800b1d1
 800b1ac:	0800b1d1 	.word	0x0800b1d1
 800b1b0:	0800b1d1 	.word	0x0800b1d1
 800b1b4:	0800b247 	.word	0x0800b247
 800b1b8:	0800b25b 	.word	0x0800b25b
 800b1bc:	0800b2a7 	.word	0x0800b2a7
 800b1c0:	0800b1d1 	.word	0x0800b1d1
 800b1c4:	0800b1d1 	.word	0x0800b1d1
 800b1c8:	0800b247 	.word	0x0800b247
 800b1cc:	0800b25b 	.word	0x0800b25b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b1d6:	f043 0301 	orr.w	r3, r3, #1
 800b1da:	b2da      	uxtb	r2, r3
 800b1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b1e2:	68ba      	ldr	r2, [r7, #8]
 800b1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	18d1      	adds	r1, r2, r3
 800b1ea:	68bb      	ldr	r3, [r7, #8]
 800b1ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b1ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1f0:	f7ff ff5c 	bl	800b0ac <prvInsertTimerInActiveList>
 800b1f4:	4603      	mov	r3, r0
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d06c      	beq.n	800b2d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fc:	6a1b      	ldr	r3, [r3, #32]
 800b1fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b200:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b204:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b208:	f003 0304 	and.w	r3, r3, #4
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d061      	beq.n	800b2d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b210:	68ba      	ldr	r2, [r7, #8]
 800b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	441a      	add	r2, r3
 800b218:	2300      	movs	r3, #0
 800b21a:	9300      	str	r3, [sp, #0]
 800b21c:	2300      	movs	r3, #0
 800b21e:	2100      	movs	r1, #0
 800b220:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b222:	f7ff fe01 	bl	800ae28 <xTimerGenericCommand>
 800b226:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b228:	6a3b      	ldr	r3, [r7, #32]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d152      	bne.n	800b2d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	61bb      	str	r3, [r7, #24]
}
 800b240:	bf00      	nop
 800b242:	bf00      	nop
 800b244:	e7fd      	b.n	800b242 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b248:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b24c:	f023 0301 	bic.w	r3, r3, #1
 800b250:	b2da      	uxtb	r2, r3
 800b252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b254:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b258:	e03d      	b.n	800b2d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b25c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b260:	f043 0301 	orr.w	r3, r3, #1
 800b264:	b2da      	uxtb	r2, r3
 800b266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b268:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b270:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d10b      	bne.n	800b292 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	617b      	str	r3, [r7, #20]
}
 800b28c:	bf00      	nop
 800b28e:	bf00      	nop
 800b290:	e7fd      	b.n	800b28e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b294:	699a      	ldr	r2, [r3, #24]
 800b296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b298:	18d1      	adds	r1, r2, r3
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b29e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2a0:	f7ff ff04 	bl	800b0ac <prvInsertTimerInActiveList>
					break;
 800b2a4:	e017      	b.n	800b2d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2ac:	f003 0302 	and.w	r3, r3, #2
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d103      	bne.n	800b2bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800b2b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b2b6:	f000 fbe7 	bl	800ba88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b2ba:	e00c      	b.n	800b2d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2c2:	f023 0301 	bic.w	r3, r3, #1
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800b2ce:	e002      	b.n	800b2d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800b2d0:	bf00      	nop
 800b2d2:	e000      	b.n	800b2d6 <prvProcessReceivedCommands+0x1a6>
					break;
 800b2d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b2d6:	4b08      	ldr	r3, [pc, #32]	@ (800b2f8 <prvProcessReceivedCommands+0x1c8>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	1d39      	adds	r1, r7, #4
 800b2dc:	2200      	movs	r2, #0
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7fe f9f2 	bl	80096c8 <xQueueReceive>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	f47f af26 	bne.w	800b138 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800b2ec:	bf00      	nop
 800b2ee:	bf00      	nop
 800b2f0:	3730      	adds	r7, #48	@ 0x30
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	20001898 	.word	0x20001898

0800b2fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b302:	e049      	b.n	800b398 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b304:	4b2e      	ldr	r3, [pc, #184]	@ (800b3c0 <prvSwitchTimerLists+0xc4>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68db      	ldr	r3, [r3, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b30e:	4b2c      	ldr	r3, [pc, #176]	@ (800b3c0 <prvSwitchTimerLists+0xc4>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	68db      	ldr	r3, [r3, #12]
 800b316:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	3304      	adds	r3, #4
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fd feff 	bl	8009120 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b330:	f003 0304 	and.w	r3, r3, #4
 800b334:	2b00      	cmp	r3, #0
 800b336:	d02f      	beq.n	800b398 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	699b      	ldr	r3, [r3, #24]
 800b33c:	693a      	ldr	r2, [r7, #16]
 800b33e:	4413      	add	r3, r2
 800b340:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	429a      	cmp	r2, r3
 800b348:	d90e      	bls.n	800b368 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	68ba      	ldr	r2, [r7, #8]
 800b34e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b356:	4b1a      	ldr	r3, [pc, #104]	@ (800b3c0 <prvSwitchTimerLists+0xc4>)
 800b358:	681a      	ldr	r2, [r3, #0]
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4619      	mov	r1, r3
 800b360:	4610      	mov	r0, r2
 800b362:	f7fd fea4 	bl	80090ae <vListInsert>
 800b366:	e017      	b.n	800b398 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b368:	2300      	movs	r3, #0
 800b36a:	9300      	str	r3, [sp, #0]
 800b36c:	2300      	movs	r3, #0
 800b36e:	693a      	ldr	r2, [r7, #16]
 800b370:	2100      	movs	r1, #0
 800b372:	68f8      	ldr	r0, [r7, #12]
 800b374:	f7ff fd58 	bl	800ae28 <xTimerGenericCommand>
 800b378:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10b      	bne.n	800b398 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	603b      	str	r3, [r7, #0]
}
 800b392:	bf00      	nop
 800b394:	bf00      	nop
 800b396:	e7fd      	b.n	800b394 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b398:	4b09      	ldr	r3, [pc, #36]	@ (800b3c0 <prvSwitchTimerLists+0xc4>)
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d1b0      	bne.n	800b304 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3a2:	4b07      	ldr	r3, [pc, #28]	@ (800b3c0 <prvSwitchTimerLists+0xc4>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3a8:	4b06      	ldr	r3, [pc, #24]	@ (800b3c4 <prvSwitchTimerLists+0xc8>)
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	4a04      	ldr	r2, [pc, #16]	@ (800b3c0 <prvSwitchTimerLists+0xc4>)
 800b3ae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3b0:	4a04      	ldr	r2, [pc, #16]	@ (800b3c4 <prvSwitchTimerLists+0xc8>)
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	6013      	str	r3, [r2, #0]
}
 800b3b6:	bf00      	nop
 800b3b8:	3718      	adds	r7, #24
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	20001890 	.word	0x20001890
 800b3c4:	20001894 	.word	0x20001894

0800b3c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b082      	sub	sp, #8
 800b3cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b3ce:	f000 f96b 	bl	800b6a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b3d2:	4b15      	ldr	r3, [pc, #84]	@ (800b428 <prvCheckForValidListAndQueue+0x60>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d120      	bne.n	800b41c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b3da:	4814      	ldr	r0, [pc, #80]	@ (800b42c <prvCheckForValidListAndQueue+0x64>)
 800b3dc:	f7fd fe16 	bl	800900c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b3e0:	4813      	ldr	r0, [pc, #76]	@ (800b430 <prvCheckForValidListAndQueue+0x68>)
 800b3e2:	f7fd fe13 	bl	800900c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b3e6:	4b13      	ldr	r3, [pc, #76]	@ (800b434 <prvCheckForValidListAndQueue+0x6c>)
 800b3e8:	4a10      	ldr	r2, [pc, #64]	@ (800b42c <prvCheckForValidListAndQueue+0x64>)
 800b3ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b3ec:	4b12      	ldr	r3, [pc, #72]	@ (800b438 <prvCheckForValidListAndQueue+0x70>)
 800b3ee:	4a10      	ldr	r2, [pc, #64]	@ (800b430 <prvCheckForValidListAndQueue+0x68>)
 800b3f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	9300      	str	r3, [sp, #0]
 800b3f6:	4b11      	ldr	r3, [pc, #68]	@ (800b43c <prvCheckForValidListAndQueue+0x74>)
 800b3f8:	4a11      	ldr	r2, [pc, #68]	@ (800b440 <prvCheckForValidListAndQueue+0x78>)
 800b3fa:	2110      	movs	r1, #16
 800b3fc:	200a      	movs	r0, #10
 800b3fe:	f7fd ff23 	bl	8009248 <xQueueGenericCreateStatic>
 800b402:	4603      	mov	r3, r0
 800b404:	4a08      	ldr	r2, [pc, #32]	@ (800b428 <prvCheckForValidListAndQueue+0x60>)
 800b406:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b408:	4b07      	ldr	r3, [pc, #28]	@ (800b428 <prvCheckForValidListAndQueue+0x60>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d005      	beq.n	800b41c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b410:	4b05      	ldr	r3, [pc, #20]	@ (800b428 <prvCheckForValidListAndQueue+0x60>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	490b      	ldr	r1, [pc, #44]	@ (800b444 <prvCheckForValidListAndQueue+0x7c>)
 800b416:	4618      	mov	r0, r3
 800b418:	f7fe fb48 	bl	8009aac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b41c:	f000 f976 	bl	800b70c <vPortExitCritical>
}
 800b420:	bf00      	nop
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20001898 	.word	0x20001898
 800b42c:	20001868 	.word	0x20001868
 800b430:	2000187c 	.word	0x2000187c
 800b434:	20001890 	.word	0x20001890
 800b438:	20001894 	.word	0x20001894
 800b43c:	20001944 	.word	0x20001944
 800b440:	200018a4 	.word	0x200018a4
 800b444:	0800c724 	.word	0x0800c724

0800b448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b448:	b480      	push	{r7}
 800b44a:	b085      	sub	sp, #20
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	60f8      	str	r0, [r7, #12]
 800b450:	60b9      	str	r1, [r7, #8]
 800b452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	3b04      	subs	r3, #4
 800b458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	3b04      	subs	r3, #4
 800b466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	f023 0201 	bic.w	r2, r3, #1
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	3b04      	subs	r3, #4
 800b476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b478:	4a0c      	ldr	r2, [pc, #48]	@ (800b4ac <pxPortInitialiseStack+0x64>)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	3b14      	subs	r3, #20
 800b482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	3b04      	subs	r3, #4
 800b48e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f06f 0202 	mvn.w	r2, #2
 800b496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3b20      	subs	r3, #32
 800b49c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b49e:	68fb      	ldr	r3, [r7, #12]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	0800b4b1 	.word	0x0800b4b1

0800b4b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b4ba:	4b13      	ldr	r3, [pc, #76]	@ (800b508 <prvTaskExitError+0x58>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4c2:	d00b      	beq.n	800b4dc <prvTaskExitError+0x2c>
	__asm volatile
 800b4c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4c8:	f383 8811 	msr	BASEPRI, r3
 800b4cc:	f3bf 8f6f 	isb	sy
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	60fb      	str	r3, [r7, #12]
}
 800b4d6:	bf00      	nop
 800b4d8:	bf00      	nop
 800b4da:	e7fd      	b.n	800b4d8 <prvTaskExitError+0x28>
	__asm volatile
 800b4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4e0:	f383 8811 	msr	BASEPRI, r3
 800b4e4:	f3bf 8f6f 	isb	sy
 800b4e8:	f3bf 8f4f 	dsb	sy
 800b4ec:	60bb      	str	r3, [r7, #8]
}
 800b4ee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b4f0:	bf00      	nop
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d0fc      	beq.n	800b4f2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	3714      	adds	r7, #20
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
 800b506:	bf00      	nop
 800b508:	20000028 	.word	0x20000028
 800b50c:	00000000 	.word	0x00000000

0800b510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b510:	4b07      	ldr	r3, [pc, #28]	@ (800b530 <pxCurrentTCBConst2>)
 800b512:	6819      	ldr	r1, [r3, #0]
 800b514:	6808      	ldr	r0, [r1, #0]
 800b516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b51a:	f380 8809 	msr	PSP, r0
 800b51e:	f3bf 8f6f 	isb	sy
 800b522:	f04f 0000 	mov.w	r0, #0
 800b526:	f380 8811 	msr	BASEPRI, r0
 800b52a:	4770      	bx	lr
 800b52c:	f3af 8000 	nop.w

0800b530 <pxCurrentTCBConst2>:
 800b530:	20001368 	.word	0x20001368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop

0800b538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b538:	4808      	ldr	r0, [pc, #32]	@ (800b55c <prvPortStartFirstTask+0x24>)
 800b53a:	6800      	ldr	r0, [r0, #0]
 800b53c:	6800      	ldr	r0, [r0, #0]
 800b53e:	f380 8808 	msr	MSP, r0
 800b542:	f04f 0000 	mov.w	r0, #0
 800b546:	f380 8814 	msr	CONTROL, r0
 800b54a:	b662      	cpsie	i
 800b54c:	b661      	cpsie	f
 800b54e:	f3bf 8f4f 	dsb	sy
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	df00      	svc	0
 800b558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b55a:	bf00      	nop
 800b55c:	e000ed08 	.word	0xe000ed08

0800b560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b566:	4b47      	ldr	r3, [pc, #284]	@ (800b684 <xPortStartScheduler+0x124>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a47      	ldr	r2, [pc, #284]	@ (800b688 <xPortStartScheduler+0x128>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d10b      	bne.n	800b588 <xPortStartScheduler+0x28>
	__asm volatile
 800b570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b574:	f383 8811 	msr	BASEPRI, r3
 800b578:	f3bf 8f6f 	isb	sy
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	613b      	str	r3, [r7, #16]
}
 800b582:	bf00      	nop
 800b584:	bf00      	nop
 800b586:	e7fd      	b.n	800b584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b588:	4b3e      	ldr	r3, [pc, #248]	@ (800b684 <xPortStartScheduler+0x124>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	4a3f      	ldr	r2, [pc, #252]	@ (800b68c <xPortStartScheduler+0x12c>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d10b      	bne.n	800b5aa <xPortStartScheduler+0x4a>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	60fb      	str	r3, [r7, #12]
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	e7fd      	b.n	800b5a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5aa:	4b39      	ldr	r3, [pc, #228]	@ (800b690 <xPortStartScheduler+0x130>)
 800b5ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ae:	697b      	ldr	r3, [r7, #20]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	b2db      	uxtb	r3, r3
 800b5b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	22ff      	movs	r2, #255	@ 0xff
 800b5ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	781b      	ldrb	r3, [r3, #0]
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5c4:	78fb      	ldrb	r3, [r7, #3]
 800b5c6:	b2db      	uxtb	r3, r3
 800b5c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b5cc:	b2da      	uxtb	r2, r3
 800b5ce:	4b31      	ldr	r3, [pc, #196]	@ (800b694 <xPortStartScheduler+0x134>)
 800b5d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5d2:	4b31      	ldr	r3, [pc, #196]	@ (800b698 <xPortStartScheduler+0x138>)
 800b5d4:	2207      	movs	r2, #7
 800b5d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5d8:	e009      	b.n	800b5ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b5da:	4b2f      	ldr	r3, [pc, #188]	@ (800b698 <xPortStartScheduler+0x138>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	4a2d      	ldr	r2, [pc, #180]	@ (800b698 <xPortStartScheduler+0x138>)
 800b5e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5e4:	78fb      	ldrb	r3, [r7, #3]
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	005b      	lsls	r3, r3, #1
 800b5ea:	b2db      	uxtb	r3, r3
 800b5ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5ee:	78fb      	ldrb	r3, [r7, #3]
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b5f6:	2b80      	cmp	r3, #128	@ 0x80
 800b5f8:	d0ef      	beq.n	800b5da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b5fa:	4b27      	ldr	r3, [pc, #156]	@ (800b698 <xPortStartScheduler+0x138>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f1c3 0307 	rsb	r3, r3, #7
 800b602:	2b04      	cmp	r3, #4
 800b604:	d00b      	beq.n	800b61e <xPortStartScheduler+0xbe>
	__asm volatile
 800b606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b60a:	f383 8811 	msr	BASEPRI, r3
 800b60e:	f3bf 8f6f 	isb	sy
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	60bb      	str	r3, [r7, #8]
}
 800b618:	bf00      	nop
 800b61a:	bf00      	nop
 800b61c:	e7fd      	b.n	800b61a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b61e:	4b1e      	ldr	r3, [pc, #120]	@ (800b698 <xPortStartScheduler+0x138>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	021b      	lsls	r3, r3, #8
 800b624:	4a1c      	ldr	r2, [pc, #112]	@ (800b698 <xPortStartScheduler+0x138>)
 800b626:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b628:	4b1b      	ldr	r3, [pc, #108]	@ (800b698 <xPortStartScheduler+0x138>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b630:	4a19      	ldr	r2, [pc, #100]	@ (800b698 <xPortStartScheduler+0x138>)
 800b632:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	b2da      	uxtb	r2, r3
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b63c:	4b17      	ldr	r3, [pc, #92]	@ (800b69c <xPortStartScheduler+0x13c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a16      	ldr	r2, [pc, #88]	@ (800b69c <xPortStartScheduler+0x13c>)
 800b642:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b646:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b648:	4b14      	ldr	r3, [pc, #80]	@ (800b69c <xPortStartScheduler+0x13c>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a13      	ldr	r2, [pc, #76]	@ (800b69c <xPortStartScheduler+0x13c>)
 800b64e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b652:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b654:	f000 f8da 	bl	800b80c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b658:	4b11      	ldr	r3, [pc, #68]	@ (800b6a0 <xPortStartScheduler+0x140>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b65e:	f000 f8f9 	bl	800b854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b662:	4b10      	ldr	r3, [pc, #64]	@ (800b6a4 <xPortStartScheduler+0x144>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a0f      	ldr	r2, [pc, #60]	@ (800b6a4 <xPortStartScheduler+0x144>)
 800b668:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b66c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b66e:	f7ff ff63 	bl	800b538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b672:	f7fe ff4d 	bl	800a510 <vTaskSwitchContext>
	prvTaskExitError();
 800b676:	f7ff ff1b 	bl	800b4b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b67a:	2300      	movs	r3, #0
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	3718      	adds	r7, #24
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	e000ed00 	.word	0xe000ed00
 800b688:	410fc271 	.word	0x410fc271
 800b68c:	410fc270 	.word	0x410fc270
 800b690:	e000e400 	.word	0xe000e400
 800b694:	20001994 	.word	0x20001994
 800b698:	20001998 	.word	0x20001998
 800b69c:	e000ed20 	.word	0xe000ed20
 800b6a0:	20000028 	.word	0x20000028
 800b6a4:	e000ef34 	.word	0xe000ef34

0800b6a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
	__asm volatile
 800b6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6b2:	f383 8811 	msr	BASEPRI, r3
 800b6b6:	f3bf 8f6f 	isb	sy
 800b6ba:	f3bf 8f4f 	dsb	sy
 800b6be:	607b      	str	r3, [r7, #4]
}
 800b6c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6c2:	4b10      	ldr	r3, [pc, #64]	@ (800b704 <vPortEnterCritical+0x5c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	3301      	adds	r3, #1
 800b6c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b704 <vPortEnterCritical+0x5c>)
 800b6ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6cc:	4b0d      	ldr	r3, [pc, #52]	@ (800b704 <vPortEnterCritical+0x5c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d110      	bne.n	800b6f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b708 <vPortEnterCritical+0x60>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00b      	beq.n	800b6f6 <vPortEnterCritical+0x4e>
	__asm volatile
 800b6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6e2:	f383 8811 	msr	BASEPRI, r3
 800b6e6:	f3bf 8f6f 	isb	sy
 800b6ea:	f3bf 8f4f 	dsb	sy
 800b6ee:	603b      	str	r3, [r7, #0]
}
 800b6f0:	bf00      	nop
 800b6f2:	bf00      	nop
 800b6f4:	e7fd      	b.n	800b6f2 <vPortEnterCritical+0x4a>
	}
}
 800b6f6:	bf00      	nop
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	20000028 	.word	0x20000028
 800b708:	e000ed04 	.word	0xe000ed04

0800b70c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b712:	4b12      	ldr	r3, [pc, #72]	@ (800b75c <vPortExitCritical+0x50>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d10b      	bne.n	800b732 <vPortExitCritical+0x26>
	__asm volatile
 800b71a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b71e:	f383 8811 	msr	BASEPRI, r3
 800b722:	f3bf 8f6f 	isb	sy
 800b726:	f3bf 8f4f 	dsb	sy
 800b72a:	607b      	str	r3, [r7, #4]
}
 800b72c:	bf00      	nop
 800b72e:	bf00      	nop
 800b730:	e7fd      	b.n	800b72e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b732:	4b0a      	ldr	r3, [pc, #40]	@ (800b75c <vPortExitCritical+0x50>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	3b01      	subs	r3, #1
 800b738:	4a08      	ldr	r2, [pc, #32]	@ (800b75c <vPortExitCritical+0x50>)
 800b73a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b73c:	4b07      	ldr	r3, [pc, #28]	@ (800b75c <vPortExitCritical+0x50>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d105      	bne.n	800b750 <vPortExitCritical+0x44>
 800b744:	2300      	movs	r3, #0
 800b746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	f383 8811 	msr	BASEPRI, r3
}
 800b74e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b750:	bf00      	nop
 800b752:	370c      	adds	r7, #12
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	20000028 	.word	0x20000028

0800b760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b760:	f3ef 8009 	mrs	r0, PSP
 800b764:	f3bf 8f6f 	isb	sy
 800b768:	4b15      	ldr	r3, [pc, #84]	@ (800b7c0 <pxCurrentTCBConst>)
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	f01e 0f10 	tst.w	lr, #16
 800b770:	bf08      	it	eq
 800b772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b77a:	6010      	str	r0, [r2, #0]
 800b77c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b780:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b784:	f380 8811 	msr	BASEPRI, r0
 800b788:	f3bf 8f4f 	dsb	sy
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f7fe febe 	bl	800a510 <vTaskSwitchContext>
 800b794:	f04f 0000 	mov.w	r0, #0
 800b798:	f380 8811 	msr	BASEPRI, r0
 800b79c:	bc09      	pop	{r0, r3}
 800b79e:	6819      	ldr	r1, [r3, #0]
 800b7a0:	6808      	ldr	r0, [r1, #0]
 800b7a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a6:	f01e 0f10 	tst.w	lr, #16
 800b7aa:	bf08      	it	eq
 800b7ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7b0:	f380 8809 	msr	PSP, r0
 800b7b4:	f3bf 8f6f 	isb	sy
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	f3af 8000 	nop.w

0800b7c0 <pxCurrentTCBConst>:
 800b7c0:	20001368 	.word	0x20001368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7c4:	bf00      	nop
 800b7c6:	bf00      	nop

0800b7c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b082      	sub	sp, #8
 800b7cc:	af00      	add	r7, sp, #0
	__asm volatile
 800b7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7d2:	f383 8811 	msr	BASEPRI, r3
 800b7d6:	f3bf 8f6f 	isb	sy
 800b7da:	f3bf 8f4f 	dsb	sy
 800b7de:	607b      	str	r3, [r7, #4]
}
 800b7e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7e2:	f7fe fddb 	bl	800a39c <xTaskIncrementTick>
 800b7e6:	4603      	mov	r3, r0
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d003      	beq.n	800b7f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b7ec:	4b06      	ldr	r3, [pc, #24]	@ (800b808 <xPortSysTickHandler+0x40>)
 800b7ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7f2:	601a      	str	r2, [r3, #0]
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	f383 8811 	msr	BASEPRI, r3
}
 800b7fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b800:	bf00      	nop
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	e000ed04 	.word	0xe000ed04

0800b80c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b80c:	b480      	push	{r7}
 800b80e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b810:	4b0b      	ldr	r3, [pc, #44]	@ (800b840 <vPortSetupTimerInterrupt+0x34>)
 800b812:	2200      	movs	r2, #0
 800b814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b816:	4b0b      	ldr	r3, [pc, #44]	@ (800b844 <vPortSetupTimerInterrupt+0x38>)
 800b818:	2200      	movs	r2, #0
 800b81a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b81c:	4b0a      	ldr	r3, [pc, #40]	@ (800b848 <vPortSetupTimerInterrupt+0x3c>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	4a0a      	ldr	r2, [pc, #40]	@ (800b84c <vPortSetupTimerInterrupt+0x40>)
 800b822:	fba2 2303 	umull	r2, r3, r2, r3
 800b826:	099b      	lsrs	r3, r3, #6
 800b828:	4a09      	ldr	r2, [pc, #36]	@ (800b850 <vPortSetupTimerInterrupt+0x44>)
 800b82a:	3b01      	subs	r3, #1
 800b82c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b82e:	4b04      	ldr	r3, [pc, #16]	@ (800b840 <vPortSetupTimerInterrupt+0x34>)
 800b830:	2207      	movs	r2, #7
 800b832:	601a      	str	r2, [r3, #0]
}
 800b834:	bf00      	nop
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop
 800b840:	e000e010 	.word	0xe000e010
 800b844:	e000e018 	.word	0xe000e018
 800b848:	2000001c 	.word	0x2000001c
 800b84c:	10624dd3 	.word	0x10624dd3
 800b850:	e000e014 	.word	0xe000e014

0800b854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b854:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b864 <vPortEnableVFP+0x10>
 800b858:	6801      	ldr	r1, [r0, #0]
 800b85a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b85e:	6001      	str	r1, [r0, #0]
 800b860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b862:	bf00      	nop
 800b864:	e000ed88 	.word	0xe000ed88

0800b868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b86e:	f3ef 8305 	mrs	r3, IPSR
 800b872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2b0f      	cmp	r3, #15
 800b878:	d915      	bls.n	800b8a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b87a:	4a18      	ldr	r2, [pc, #96]	@ (800b8dc <vPortValidateInterruptPriority+0x74>)
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	4413      	add	r3, r2
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b884:	4b16      	ldr	r3, [pc, #88]	@ (800b8e0 <vPortValidateInterruptPriority+0x78>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	7afa      	ldrb	r2, [r7, #11]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d20b      	bcs.n	800b8a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	607b      	str	r3, [r7, #4]
}
 800b8a0:	bf00      	nop
 800b8a2:	bf00      	nop
 800b8a4:	e7fd      	b.n	800b8a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8a6:	4b0f      	ldr	r3, [pc, #60]	@ (800b8e4 <vPortValidateInterruptPriority+0x7c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b8ae:	4b0e      	ldr	r3, [pc, #56]	@ (800b8e8 <vPortValidateInterruptPriority+0x80>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	429a      	cmp	r2, r3
 800b8b4:	d90b      	bls.n	800b8ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b8b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ba:	f383 8811 	msr	BASEPRI, r3
 800b8be:	f3bf 8f6f 	isb	sy
 800b8c2:	f3bf 8f4f 	dsb	sy
 800b8c6:	603b      	str	r3, [r7, #0]
}
 800b8c8:	bf00      	nop
 800b8ca:	bf00      	nop
 800b8cc:	e7fd      	b.n	800b8ca <vPortValidateInterruptPriority+0x62>
	}
 800b8ce:	bf00      	nop
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	e000e3f0 	.word	0xe000e3f0
 800b8e0:	20001994 	.word	0x20001994
 800b8e4:	e000ed0c 	.word	0xe000ed0c
 800b8e8:	20001998 	.word	0x20001998

0800b8ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b08a      	sub	sp, #40	@ 0x28
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b8f8:	f7fe fb9a 	bl	800a030 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b8fc:	4b5c      	ldr	r3, [pc, #368]	@ (800ba70 <pvPortMalloc+0x184>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d101      	bne.n	800b908 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b904:	f000 f924 	bl	800bb50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b908:	4b5a      	ldr	r3, [pc, #360]	@ (800ba74 <pvPortMalloc+0x188>)
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4013      	ands	r3, r2
 800b910:	2b00      	cmp	r3, #0
 800b912:	f040 8095 	bne.w	800ba40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d01e      	beq.n	800b95a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b91c:	2208      	movs	r2, #8
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	4413      	add	r3, r2
 800b922:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f003 0307 	and.w	r3, r3, #7
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d015      	beq.n	800b95a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f023 0307 	bic.w	r3, r3, #7
 800b934:	3308      	adds	r3, #8
 800b936:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f003 0307 	and.w	r3, r3, #7
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d00b      	beq.n	800b95a <pvPortMalloc+0x6e>
	__asm volatile
 800b942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b946:	f383 8811 	msr	BASEPRI, r3
 800b94a:	f3bf 8f6f 	isb	sy
 800b94e:	f3bf 8f4f 	dsb	sy
 800b952:	617b      	str	r3, [r7, #20]
}
 800b954:	bf00      	nop
 800b956:	bf00      	nop
 800b958:	e7fd      	b.n	800b956 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d06f      	beq.n	800ba40 <pvPortMalloc+0x154>
 800b960:	4b45      	ldr	r3, [pc, #276]	@ (800ba78 <pvPortMalloc+0x18c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	687a      	ldr	r2, [r7, #4]
 800b966:	429a      	cmp	r2, r3
 800b968:	d86a      	bhi.n	800ba40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b96a:	4b44      	ldr	r3, [pc, #272]	@ (800ba7c <pvPortMalloc+0x190>)
 800b96c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b96e:	4b43      	ldr	r3, [pc, #268]	@ (800ba7c <pvPortMalloc+0x190>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b974:	e004      	b.n	800b980 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b978:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b97a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b982:	685b      	ldr	r3, [r3, #4]
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	429a      	cmp	r2, r3
 800b988:	d903      	bls.n	800b992 <pvPortMalloc+0xa6>
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1f1      	bne.n	800b976 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b992:	4b37      	ldr	r3, [pc, #220]	@ (800ba70 <pvPortMalloc+0x184>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b998:	429a      	cmp	r2, r3
 800b99a:	d051      	beq.n	800ba40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b99c:	6a3b      	ldr	r3, [r7, #32]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2208      	movs	r2, #8
 800b9a2:	4413      	add	r3, r2
 800b9a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9a8:	681a      	ldr	r2, [r3, #0]
 800b9aa:	6a3b      	ldr	r3, [r7, #32]
 800b9ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9b0:	685a      	ldr	r2, [r3, #4]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	1ad2      	subs	r2, r2, r3
 800b9b6:	2308      	movs	r3, #8
 800b9b8:	005b      	lsls	r3, r3, #1
 800b9ba:	429a      	cmp	r2, r3
 800b9bc:	d920      	bls.n	800ba00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9c6:	69bb      	ldr	r3, [r7, #24]
 800b9c8:	f003 0307 	and.w	r3, r3, #7
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <pvPortMalloc+0xfc>
	__asm volatile
 800b9d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9d4:	f383 8811 	msr	BASEPRI, r3
 800b9d8:	f3bf 8f6f 	isb	sy
 800b9dc:	f3bf 8f4f 	dsb	sy
 800b9e0:	613b      	str	r3, [r7, #16]
}
 800b9e2:	bf00      	nop
 800b9e4:	bf00      	nop
 800b9e6:	e7fd      	b.n	800b9e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ea:	685a      	ldr	r2, [r3, #4]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	1ad2      	subs	r2, r2, r3
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b9f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f6:	687a      	ldr	r2, [r7, #4]
 800b9f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b9fa:	69b8      	ldr	r0, [r7, #24]
 800b9fc:	f000 f90a 	bl	800bc14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba00:	4b1d      	ldr	r3, [pc, #116]	@ (800ba78 <pvPortMalloc+0x18c>)
 800ba02:	681a      	ldr	r2, [r3, #0]
 800ba04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	4a1b      	ldr	r2, [pc, #108]	@ (800ba78 <pvPortMalloc+0x18c>)
 800ba0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba0e:	4b1a      	ldr	r3, [pc, #104]	@ (800ba78 <pvPortMalloc+0x18c>)
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	4b1b      	ldr	r3, [pc, #108]	@ (800ba80 <pvPortMalloc+0x194>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d203      	bcs.n	800ba22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba1a:	4b17      	ldr	r3, [pc, #92]	@ (800ba78 <pvPortMalloc+0x18c>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a18      	ldr	r2, [pc, #96]	@ (800ba80 <pvPortMalloc+0x194>)
 800ba20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba24:	685a      	ldr	r2, [r3, #4]
 800ba26:	4b13      	ldr	r3, [pc, #76]	@ (800ba74 <pvPortMalloc+0x188>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	431a      	orrs	r2, r3
 800ba2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba32:	2200      	movs	r2, #0
 800ba34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba36:	4b13      	ldr	r3, [pc, #76]	@ (800ba84 <pvPortMalloc+0x198>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	4a11      	ldr	r2, [pc, #68]	@ (800ba84 <pvPortMalloc+0x198>)
 800ba3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba40:	f7fe fb04 	bl	800a04c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba44:	69fb      	ldr	r3, [r7, #28]
 800ba46:	f003 0307 	and.w	r3, r3, #7
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d00b      	beq.n	800ba66 <pvPortMalloc+0x17a>
	__asm volatile
 800ba4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	60fb      	str	r3, [r7, #12]
}
 800ba60:	bf00      	nop
 800ba62:	bf00      	nop
 800ba64:	e7fd      	b.n	800ba62 <pvPortMalloc+0x176>
	return pvReturn;
 800ba66:	69fb      	ldr	r3, [r7, #28]
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3728      	adds	r7, #40	@ 0x28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}
 800ba70:	200055a4 	.word	0x200055a4
 800ba74:	200055b8 	.word	0x200055b8
 800ba78:	200055a8 	.word	0x200055a8
 800ba7c:	2000559c 	.word	0x2000559c
 800ba80:	200055ac 	.word	0x200055ac
 800ba84:	200055b0 	.word	0x200055b0

0800ba88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d04f      	beq.n	800bb3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ba9a:	2308      	movs	r3, #8
 800ba9c:	425b      	negs	r3, r3
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	4413      	add	r3, r2
 800baa2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	4b25      	ldr	r3, [pc, #148]	@ (800bb44 <vPortFree+0xbc>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	4013      	ands	r3, r2
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10b      	bne.n	800bace <vPortFree+0x46>
	__asm volatile
 800bab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baba:	f383 8811 	msr	BASEPRI, r3
 800babe:	f3bf 8f6f 	isb	sy
 800bac2:	f3bf 8f4f 	dsb	sy
 800bac6:	60fb      	str	r3, [r7, #12]
}
 800bac8:	bf00      	nop
 800baca:	bf00      	nop
 800bacc:	e7fd      	b.n	800baca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00b      	beq.n	800baee <vPortFree+0x66>
	__asm volatile
 800bad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bada:	f383 8811 	msr	BASEPRI, r3
 800bade:	f3bf 8f6f 	isb	sy
 800bae2:	f3bf 8f4f 	dsb	sy
 800bae6:	60bb      	str	r3, [r7, #8]
}
 800bae8:	bf00      	nop
 800baea:	bf00      	nop
 800baec:	e7fd      	b.n	800baea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800baee:	693b      	ldr	r3, [r7, #16]
 800baf0:	685a      	ldr	r2, [r3, #4]
 800baf2:	4b14      	ldr	r3, [pc, #80]	@ (800bb44 <vPortFree+0xbc>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4013      	ands	r3, r2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d01e      	beq.n	800bb3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d11a      	bne.n	800bb3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	685a      	ldr	r2, [r3, #4]
 800bb08:	4b0e      	ldr	r3, [pc, #56]	@ (800bb44 <vPortFree+0xbc>)
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	43db      	mvns	r3, r3
 800bb0e:	401a      	ands	r2, r3
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb14:	f7fe fa8c 	bl	800a030 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb48 <vPortFree+0xc0>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	4413      	add	r3, r2
 800bb22:	4a09      	ldr	r2, [pc, #36]	@ (800bb48 <vPortFree+0xc0>)
 800bb24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb26:	6938      	ldr	r0, [r7, #16]
 800bb28:	f000 f874 	bl	800bc14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb2c:	4b07      	ldr	r3, [pc, #28]	@ (800bb4c <vPortFree+0xc4>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	3301      	adds	r3, #1
 800bb32:	4a06      	ldr	r2, [pc, #24]	@ (800bb4c <vPortFree+0xc4>)
 800bb34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb36:	f7fe fa89 	bl	800a04c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb3a:	bf00      	nop
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}
 800bb42:	bf00      	nop
 800bb44:	200055b8 	.word	0x200055b8
 800bb48:	200055a8 	.word	0x200055a8
 800bb4c:	200055b4 	.word	0x200055b4

0800bb50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb50:	b480      	push	{r7}
 800bb52:	b085      	sub	sp, #20
 800bb54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb56:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bb5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb5c:	4b27      	ldr	r3, [pc, #156]	@ (800bbfc <prvHeapInit+0xac>)
 800bb5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f003 0307 	and.w	r3, r3, #7
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d00c      	beq.n	800bb84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3307      	adds	r3, #7
 800bb6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	f023 0307 	bic.w	r3, r3, #7
 800bb76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	1ad3      	subs	r3, r2, r3
 800bb7e:	4a1f      	ldr	r2, [pc, #124]	@ (800bbfc <prvHeapInit+0xac>)
 800bb80:	4413      	add	r3, r2
 800bb82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb88:	4a1d      	ldr	r2, [pc, #116]	@ (800bc00 <prvHeapInit+0xb0>)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb8e:	4b1c      	ldr	r3, [pc, #112]	@ (800bc00 <prvHeapInit+0xb0>)
 800bb90:	2200      	movs	r2, #0
 800bb92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	68ba      	ldr	r2, [r7, #8]
 800bb98:	4413      	add	r3, r2
 800bb9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bb9c:	2208      	movs	r2, #8
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	1a9b      	subs	r3, r3, r2
 800bba2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f023 0307 	bic.w	r3, r3, #7
 800bbaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	4a15      	ldr	r2, [pc, #84]	@ (800bc04 <prvHeapInit+0xb4>)
 800bbb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbb2:	4b14      	ldr	r3, [pc, #80]	@ (800bc04 <prvHeapInit+0xb4>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbba:	4b12      	ldr	r3, [pc, #72]	@ (800bc04 <prvHeapInit+0xb4>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	1ad2      	subs	r2, r2, r3
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbd0:	4b0c      	ldr	r3, [pc, #48]	@ (800bc04 <prvHeapInit+0xb4>)
 800bbd2:	681a      	ldr	r2, [r3, #0]
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	685b      	ldr	r3, [r3, #4]
 800bbdc:	4a0a      	ldr	r2, [pc, #40]	@ (800bc08 <prvHeapInit+0xb8>)
 800bbde:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	685b      	ldr	r3, [r3, #4]
 800bbe4:	4a09      	ldr	r2, [pc, #36]	@ (800bc0c <prvHeapInit+0xbc>)
 800bbe6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbe8:	4b09      	ldr	r3, [pc, #36]	@ (800bc10 <prvHeapInit+0xc0>)
 800bbea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bbee:	601a      	str	r2, [r3, #0]
}
 800bbf0:	bf00      	nop
 800bbf2:	3714      	adds	r7, #20
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfa:	4770      	bx	lr
 800bbfc:	2000199c 	.word	0x2000199c
 800bc00:	2000559c 	.word	0x2000559c
 800bc04:	200055a4 	.word	0x200055a4
 800bc08:	200055ac 	.word	0x200055ac
 800bc0c:	200055a8 	.word	0x200055a8
 800bc10:	200055b8 	.word	0x200055b8

0800bc14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc14:	b480      	push	{r7}
 800bc16:	b085      	sub	sp, #20
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc1c:	4b28      	ldr	r3, [pc, #160]	@ (800bcc0 <prvInsertBlockIntoFreeList+0xac>)
 800bc1e:	60fb      	str	r3, [r7, #12]
 800bc20:	e002      	b.n	800bc28 <prvInsertBlockIntoFreeList+0x14>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d8f7      	bhi.n	800bc22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d108      	bne.n	800bc56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	685b      	ldr	r3, [r3, #4]
 800bc4c:	441a      	add	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	685b      	ldr	r3, [r3, #4]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	441a      	add	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d118      	bne.n	800bc9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	4b15      	ldr	r3, [pc, #84]	@ (800bcc4 <prvInsertBlockIntoFreeList+0xb0>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d00d      	beq.n	800bc92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	685a      	ldr	r2, [r3, #4]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	441a      	add	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	681a      	ldr	r2, [r3, #0]
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	601a      	str	r2, [r3, #0]
 800bc90:	e008      	b.n	800bca4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc92:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc4 <prvInsertBlockIntoFreeList+0xb0>)
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	e003      	b.n	800bca4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	d002      	beq.n	800bcb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	687a      	ldr	r2, [r7, #4]
 800bcb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcb2:	bf00      	nop
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	2000559c 	.word	0x2000559c
 800bcc4:	200055a4 	.word	0x200055a4

0800bcc8 <_vsiprintf_r>:
 800bcc8:	b500      	push	{lr}
 800bcca:	b09b      	sub	sp, #108	@ 0x6c
 800bccc:	9100      	str	r1, [sp, #0]
 800bcce:	9104      	str	r1, [sp, #16]
 800bcd0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800bcd4:	9105      	str	r1, [sp, #20]
 800bcd6:	9102      	str	r1, [sp, #8]
 800bcd8:	4905      	ldr	r1, [pc, #20]	@ (800bcf0 <_vsiprintf_r+0x28>)
 800bcda:	9103      	str	r1, [sp, #12]
 800bcdc:	4669      	mov	r1, sp
 800bcde:	f000 f951 	bl	800bf84 <_svfiprintf_r>
 800bce2:	9b00      	ldr	r3, [sp, #0]
 800bce4:	2200      	movs	r2, #0
 800bce6:	701a      	strb	r2, [r3, #0]
 800bce8:	b01b      	add	sp, #108	@ 0x6c
 800bcea:	f85d fb04 	ldr.w	pc, [sp], #4
 800bcee:	bf00      	nop
 800bcf0:	ffff0208 	.word	0xffff0208

0800bcf4 <vsiprintf>:
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	460a      	mov	r2, r1
 800bcf8:	4601      	mov	r1, r0
 800bcfa:	4802      	ldr	r0, [pc, #8]	@ (800bd04 <vsiprintf+0x10>)
 800bcfc:	6800      	ldr	r0, [r0, #0]
 800bcfe:	f7ff bfe3 	b.w	800bcc8 <_vsiprintf_r>
 800bd02:	bf00      	nop
 800bd04:	2000002c 	.word	0x2000002c

0800bd08 <memset>:
 800bd08:	4402      	add	r2, r0
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	4293      	cmp	r3, r2
 800bd0e:	d100      	bne.n	800bd12 <memset+0xa>
 800bd10:	4770      	bx	lr
 800bd12:	f803 1b01 	strb.w	r1, [r3], #1
 800bd16:	e7f9      	b.n	800bd0c <memset+0x4>

0800bd18 <_reclaim_reent>:
 800bd18:	4b29      	ldr	r3, [pc, #164]	@ (800bdc0 <_reclaim_reent+0xa8>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4283      	cmp	r3, r0
 800bd1e:	b570      	push	{r4, r5, r6, lr}
 800bd20:	4604      	mov	r4, r0
 800bd22:	d04b      	beq.n	800bdbc <_reclaim_reent+0xa4>
 800bd24:	69c3      	ldr	r3, [r0, #28]
 800bd26:	b1ab      	cbz	r3, 800bd54 <_reclaim_reent+0x3c>
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	b16b      	cbz	r3, 800bd48 <_reclaim_reent+0x30>
 800bd2c:	2500      	movs	r5, #0
 800bd2e:	69e3      	ldr	r3, [r4, #28]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	5959      	ldr	r1, [r3, r5]
 800bd34:	2900      	cmp	r1, #0
 800bd36:	d13b      	bne.n	800bdb0 <_reclaim_reent+0x98>
 800bd38:	3504      	adds	r5, #4
 800bd3a:	2d80      	cmp	r5, #128	@ 0x80
 800bd3c:	d1f7      	bne.n	800bd2e <_reclaim_reent+0x16>
 800bd3e:	69e3      	ldr	r3, [r4, #28]
 800bd40:	4620      	mov	r0, r4
 800bd42:	68d9      	ldr	r1, [r3, #12]
 800bd44:	f000 f878 	bl	800be38 <_free_r>
 800bd48:	69e3      	ldr	r3, [r4, #28]
 800bd4a:	6819      	ldr	r1, [r3, #0]
 800bd4c:	b111      	cbz	r1, 800bd54 <_reclaim_reent+0x3c>
 800bd4e:	4620      	mov	r0, r4
 800bd50:	f000 f872 	bl	800be38 <_free_r>
 800bd54:	6961      	ldr	r1, [r4, #20]
 800bd56:	b111      	cbz	r1, 800bd5e <_reclaim_reent+0x46>
 800bd58:	4620      	mov	r0, r4
 800bd5a:	f000 f86d 	bl	800be38 <_free_r>
 800bd5e:	69e1      	ldr	r1, [r4, #28]
 800bd60:	b111      	cbz	r1, 800bd68 <_reclaim_reent+0x50>
 800bd62:	4620      	mov	r0, r4
 800bd64:	f000 f868 	bl	800be38 <_free_r>
 800bd68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800bd6a:	b111      	cbz	r1, 800bd72 <_reclaim_reent+0x5a>
 800bd6c:	4620      	mov	r0, r4
 800bd6e:	f000 f863 	bl	800be38 <_free_r>
 800bd72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd74:	b111      	cbz	r1, 800bd7c <_reclaim_reent+0x64>
 800bd76:	4620      	mov	r0, r4
 800bd78:	f000 f85e 	bl	800be38 <_free_r>
 800bd7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800bd7e:	b111      	cbz	r1, 800bd86 <_reclaim_reent+0x6e>
 800bd80:	4620      	mov	r0, r4
 800bd82:	f000 f859 	bl	800be38 <_free_r>
 800bd86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800bd88:	b111      	cbz	r1, 800bd90 <_reclaim_reent+0x78>
 800bd8a:	4620      	mov	r0, r4
 800bd8c:	f000 f854 	bl	800be38 <_free_r>
 800bd90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800bd92:	b111      	cbz	r1, 800bd9a <_reclaim_reent+0x82>
 800bd94:	4620      	mov	r0, r4
 800bd96:	f000 f84f 	bl	800be38 <_free_r>
 800bd9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800bd9c:	b111      	cbz	r1, 800bda4 <_reclaim_reent+0x8c>
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f000 f84a 	bl	800be38 <_free_r>
 800bda4:	6a23      	ldr	r3, [r4, #32]
 800bda6:	b14b      	cbz	r3, 800bdbc <_reclaim_reent+0xa4>
 800bda8:	4620      	mov	r0, r4
 800bdaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800bdae:	4718      	bx	r3
 800bdb0:	680e      	ldr	r6, [r1, #0]
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	f000 f840 	bl	800be38 <_free_r>
 800bdb8:	4631      	mov	r1, r6
 800bdba:	e7bb      	b.n	800bd34 <_reclaim_reent+0x1c>
 800bdbc:	bd70      	pop	{r4, r5, r6, pc}
 800bdbe:	bf00      	nop
 800bdc0:	2000002c 	.word	0x2000002c

0800bdc4 <__errno>:
 800bdc4:	4b01      	ldr	r3, [pc, #4]	@ (800bdcc <__errno+0x8>)
 800bdc6:	6818      	ldr	r0, [r3, #0]
 800bdc8:	4770      	bx	lr
 800bdca:	bf00      	nop
 800bdcc:	2000002c 	.word	0x2000002c

0800bdd0 <__libc_init_array>:
 800bdd0:	b570      	push	{r4, r5, r6, lr}
 800bdd2:	4d0d      	ldr	r5, [pc, #52]	@ (800be08 <__libc_init_array+0x38>)
 800bdd4:	4c0d      	ldr	r4, [pc, #52]	@ (800be0c <__libc_init_array+0x3c>)
 800bdd6:	1b64      	subs	r4, r4, r5
 800bdd8:	10a4      	asrs	r4, r4, #2
 800bdda:	2600      	movs	r6, #0
 800bddc:	42a6      	cmp	r6, r4
 800bdde:	d109      	bne.n	800bdf4 <__libc_init_array+0x24>
 800bde0:	4d0b      	ldr	r5, [pc, #44]	@ (800be10 <__libc_init_array+0x40>)
 800bde2:	4c0c      	ldr	r4, [pc, #48]	@ (800be14 <__libc_init_array+0x44>)
 800bde4:	f000 fc66 	bl	800c6b4 <_init>
 800bde8:	1b64      	subs	r4, r4, r5
 800bdea:	10a4      	asrs	r4, r4, #2
 800bdec:	2600      	movs	r6, #0
 800bdee:	42a6      	cmp	r6, r4
 800bdf0:	d105      	bne.n	800bdfe <__libc_init_array+0x2e>
 800bdf2:	bd70      	pop	{r4, r5, r6, pc}
 800bdf4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bdf8:	4798      	blx	r3
 800bdfa:	3601      	adds	r6, #1
 800bdfc:	e7ee      	b.n	800bddc <__libc_init_array+0xc>
 800bdfe:	f855 3b04 	ldr.w	r3, [r5], #4
 800be02:	4798      	blx	r3
 800be04:	3601      	adds	r6, #1
 800be06:	e7f2      	b.n	800bdee <__libc_init_array+0x1e>
 800be08:	0800c824 	.word	0x0800c824
 800be0c:	0800c824 	.word	0x0800c824
 800be10:	0800c824 	.word	0x0800c824
 800be14:	0800c828 	.word	0x0800c828

0800be18 <__retarget_lock_acquire_recursive>:
 800be18:	4770      	bx	lr

0800be1a <__retarget_lock_release_recursive>:
 800be1a:	4770      	bx	lr

0800be1c <memcpy>:
 800be1c:	440a      	add	r2, r1
 800be1e:	4291      	cmp	r1, r2
 800be20:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800be24:	d100      	bne.n	800be28 <memcpy+0xc>
 800be26:	4770      	bx	lr
 800be28:	b510      	push	{r4, lr}
 800be2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be32:	4291      	cmp	r1, r2
 800be34:	d1f9      	bne.n	800be2a <memcpy+0xe>
 800be36:	bd10      	pop	{r4, pc}

0800be38 <_free_r>:
 800be38:	b538      	push	{r3, r4, r5, lr}
 800be3a:	4605      	mov	r5, r0
 800be3c:	2900      	cmp	r1, #0
 800be3e:	d041      	beq.n	800bec4 <_free_r+0x8c>
 800be40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800be44:	1f0c      	subs	r4, r1, #4
 800be46:	2b00      	cmp	r3, #0
 800be48:	bfb8      	it	lt
 800be4a:	18e4      	addlt	r4, r4, r3
 800be4c:	f000 fbc6 	bl	800c5dc <__malloc_lock>
 800be50:	4a1d      	ldr	r2, [pc, #116]	@ (800bec8 <_free_r+0x90>)
 800be52:	6813      	ldr	r3, [r2, #0]
 800be54:	b933      	cbnz	r3, 800be64 <_free_r+0x2c>
 800be56:	6063      	str	r3, [r4, #4]
 800be58:	6014      	str	r4, [r2, #0]
 800be5a:	4628      	mov	r0, r5
 800be5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be60:	f000 bbc2 	b.w	800c5e8 <__malloc_unlock>
 800be64:	42a3      	cmp	r3, r4
 800be66:	d908      	bls.n	800be7a <_free_r+0x42>
 800be68:	6820      	ldr	r0, [r4, #0]
 800be6a:	1821      	adds	r1, r4, r0
 800be6c:	428b      	cmp	r3, r1
 800be6e:	bf01      	itttt	eq
 800be70:	6819      	ldreq	r1, [r3, #0]
 800be72:	685b      	ldreq	r3, [r3, #4]
 800be74:	1809      	addeq	r1, r1, r0
 800be76:	6021      	streq	r1, [r4, #0]
 800be78:	e7ed      	b.n	800be56 <_free_r+0x1e>
 800be7a:	461a      	mov	r2, r3
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	b10b      	cbz	r3, 800be84 <_free_r+0x4c>
 800be80:	42a3      	cmp	r3, r4
 800be82:	d9fa      	bls.n	800be7a <_free_r+0x42>
 800be84:	6811      	ldr	r1, [r2, #0]
 800be86:	1850      	adds	r0, r2, r1
 800be88:	42a0      	cmp	r0, r4
 800be8a:	d10b      	bne.n	800bea4 <_free_r+0x6c>
 800be8c:	6820      	ldr	r0, [r4, #0]
 800be8e:	4401      	add	r1, r0
 800be90:	1850      	adds	r0, r2, r1
 800be92:	4283      	cmp	r3, r0
 800be94:	6011      	str	r1, [r2, #0]
 800be96:	d1e0      	bne.n	800be5a <_free_r+0x22>
 800be98:	6818      	ldr	r0, [r3, #0]
 800be9a:	685b      	ldr	r3, [r3, #4]
 800be9c:	6053      	str	r3, [r2, #4]
 800be9e:	4408      	add	r0, r1
 800bea0:	6010      	str	r0, [r2, #0]
 800bea2:	e7da      	b.n	800be5a <_free_r+0x22>
 800bea4:	d902      	bls.n	800beac <_free_r+0x74>
 800bea6:	230c      	movs	r3, #12
 800bea8:	602b      	str	r3, [r5, #0]
 800beaa:	e7d6      	b.n	800be5a <_free_r+0x22>
 800beac:	6820      	ldr	r0, [r4, #0]
 800beae:	1821      	adds	r1, r4, r0
 800beb0:	428b      	cmp	r3, r1
 800beb2:	bf04      	itt	eq
 800beb4:	6819      	ldreq	r1, [r3, #0]
 800beb6:	685b      	ldreq	r3, [r3, #4]
 800beb8:	6063      	str	r3, [r4, #4]
 800beba:	bf04      	itt	eq
 800bebc:	1809      	addeq	r1, r1, r0
 800bebe:	6021      	streq	r1, [r4, #0]
 800bec0:	6054      	str	r4, [r2, #4]
 800bec2:	e7ca      	b.n	800be5a <_free_r+0x22>
 800bec4:	bd38      	pop	{r3, r4, r5, pc}
 800bec6:	bf00      	nop
 800bec8:	20005700 	.word	0x20005700

0800becc <__ssputs_r>:
 800becc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bed0:	688e      	ldr	r6, [r1, #8]
 800bed2:	461f      	mov	r7, r3
 800bed4:	42be      	cmp	r6, r7
 800bed6:	680b      	ldr	r3, [r1, #0]
 800bed8:	4682      	mov	sl, r0
 800beda:	460c      	mov	r4, r1
 800bedc:	4690      	mov	r8, r2
 800bede:	d82d      	bhi.n	800bf3c <__ssputs_r+0x70>
 800bee0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bee4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bee8:	d026      	beq.n	800bf38 <__ssputs_r+0x6c>
 800beea:	6965      	ldr	r5, [r4, #20]
 800beec:	6909      	ldr	r1, [r1, #16]
 800beee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bef2:	eba3 0901 	sub.w	r9, r3, r1
 800bef6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800befa:	1c7b      	adds	r3, r7, #1
 800befc:	444b      	add	r3, r9
 800befe:	106d      	asrs	r5, r5, #1
 800bf00:	429d      	cmp	r5, r3
 800bf02:	bf38      	it	cc
 800bf04:	461d      	movcc	r5, r3
 800bf06:	0553      	lsls	r3, r2, #21
 800bf08:	d527      	bpl.n	800bf5a <__ssputs_r+0x8e>
 800bf0a:	4629      	mov	r1, r5
 800bf0c:	f000 f958 	bl	800c1c0 <_malloc_r>
 800bf10:	4606      	mov	r6, r0
 800bf12:	b360      	cbz	r0, 800bf6e <__ssputs_r+0xa2>
 800bf14:	6921      	ldr	r1, [r4, #16]
 800bf16:	464a      	mov	r2, r9
 800bf18:	f7ff ff80 	bl	800be1c <memcpy>
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bf22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bf26:	81a3      	strh	r3, [r4, #12]
 800bf28:	6126      	str	r6, [r4, #16]
 800bf2a:	6165      	str	r5, [r4, #20]
 800bf2c:	444e      	add	r6, r9
 800bf2e:	eba5 0509 	sub.w	r5, r5, r9
 800bf32:	6026      	str	r6, [r4, #0]
 800bf34:	60a5      	str	r5, [r4, #8]
 800bf36:	463e      	mov	r6, r7
 800bf38:	42be      	cmp	r6, r7
 800bf3a:	d900      	bls.n	800bf3e <__ssputs_r+0x72>
 800bf3c:	463e      	mov	r6, r7
 800bf3e:	6820      	ldr	r0, [r4, #0]
 800bf40:	4632      	mov	r2, r6
 800bf42:	4641      	mov	r1, r8
 800bf44:	f000 fb84 	bl	800c650 <memmove>
 800bf48:	68a3      	ldr	r3, [r4, #8]
 800bf4a:	1b9b      	subs	r3, r3, r6
 800bf4c:	60a3      	str	r3, [r4, #8]
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	4433      	add	r3, r6
 800bf52:	6023      	str	r3, [r4, #0]
 800bf54:	2000      	movs	r0, #0
 800bf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf5a:	462a      	mov	r2, r5
 800bf5c:	f000 fb4a 	bl	800c5f4 <_realloc_r>
 800bf60:	4606      	mov	r6, r0
 800bf62:	2800      	cmp	r0, #0
 800bf64:	d1e0      	bne.n	800bf28 <__ssputs_r+0x5c>
 800bf66:	6921      	ldr	r1, [r4, #16]
 800bf68:	4650      	mov	r0, sl
 800bf6a:	f7ff ff65 	bl	800be38 <_free_r>
 800bf6e:	230c      	movs	r3, #12
 800bf70:	f8ca 3000 	str.w	r3, [sl]
 800bf74:	89a3      	ldrh	r3, [r4, #12]
 800bf76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf7a:	81a3      	strh	r3, [r4, #12]
 800bf7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf80:	e7e9      	b.n	800bf56 <__ssputs_r+0x8a>
	...

0800bf84 <_svfiprintf_r>:
 800bf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf88:	4698      	mov	r8, r3
 800bf8a:	898b      	ldrh	r3, [r1, #12]
 800bf8c:	061b      	lsls	r3, r3, #24
 800bf8e:	b09d      	sub	sp, #116	@ 0x74
 800bf90:	4607      	mov	r7, r0
 800bf92:	460d      	mov	r5, r1
 800bf94:	4614      	mov	r4, r2
 800bf96:	d510      	bpl.n	800bfba <_svfiprintf_r+0x36>
 800bf98:	690b      	ldr	r3, [r1, #16]
 800bf9a:	b973      	cbnz	r3, 800bfba <_svfiprintf_r+0x36>
 800bf9c:	2140      	movs	r1, #64	@ 0x40
 800bf9e:	f000 f90f 	bl	800c1c0 <_malloc_r>
 800bfa2:	6028      	str	r0, [r5, #0]
 800bfa4:	6128      	str	r0, [r5, #16]
 800bfa6:	b930      	cbnz	r0, 800bfb6 <_svfiprintf_r+0x32>
 800bfa8:	230c      	movs	r3, #12
 800bfaa:	603b      	str	r3, [r7, #0]
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfb0:	b01d      	add	sp, #116	@ 0x74
 800bfb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfb6:	2340      	movs	r3, #64	@ 0x40
 800bfb8:	616b      	str	r3, [r5, #20]
 800bfba:	2300      	movs	r3, #0
 800bfbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfbe:	2320      	movs	r3, #32
 800bfc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bfc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfc8:	2330      	movs	r3, #48	@ 0x30
 800bfca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c168 <_svfiprintf_r+0x1e4>
 800bfce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bfd2:	f04f 0901 	mov.w	r9, #1
 800bfd6:	4623      	mov	r3, r4
 800bfd8:	469a      	mov	sl, r3
 800bfda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfde:	b10a      	cbz	r2, 800bfe4 <_svfiprintf_r+0x60>
 800bfe0:	2a25      	cmp	r2, #37	@ 0x25
 800bfe2:	d1f9      	bne.n	800bfd8 <_svfiprintf_r+0x54>
 800bfe4:	ebba 0b04 	subs.w	fp, sl, r4
 800bfe8:	d00b      	beq.n	800c002 <_svfiprintf_r+0x7e>
 800bfea:	465b      	mov	r3, fp
 800bfec:	4622      	mov	r2, r4
 800bfee:	4629      	mov	r1, r5
 800bff0:	4638      	mov	r0, r7
 800bff2:	f7ff ff6b 	bl	800becc <__ssputs_r>
 800bff6:	3001      	adds	r0, #1
 800bff8:	f000 80a7 	beq.w	800c14a <_svfiprintf_r+0x1c6>
 800bffc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bffe:	445a      	add	r2, fp
 800c000:	9209      	str	r2, [sp, #36]	@ 0x24
 800c002:	f89a 3000 	ldrb.w	r3, [sl]
 800c006:	2b00      	cmp	r3, #0
 800c008:	f000 809f 	beq.w	800c14a <_svfiprintf_r+0x1c6>
 800c00c:	2300      	movs	r3, #0
 800c00e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c012:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c016:	f10a 0a01 	add.w	sl, sl, #1
 800c01a:	9304      	str	r3, [sp, #16]
 800c01c:	9307      	str	r3, [sp, #28]
 800c01e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c022:	931a      	str	r3, [sp, #104]	@ 0x68
 800c024:	4654      	mov	r4, sl
 800c026:	2205      	movs	r2, #5
 800c028:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c02c:	484e      	ldr	r0, [pc, #312]	@ (800c168 <_svfiprintf_r+0x1e4>)
 800c02e:	f7f4 f8d7 	bl	80001e0 <memchr>
 800c032:	9a04      	ldr	r2, [sp, #16]
 800c034:	b9d8      	cbnz	r0, 800c06e <_svfiprintf_r+0xea>
 800c036:	06d0      	lsls	r0, r2, #27
 800c038:	bf44      	itt	mi
 800c03a:	2320      	movmi	r3, #32
 800c03c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c040:	0711      	lsls	r1, r2, #28
 800c042:	bf44      	itt	mi
 800c044:	232b      	movmi	r3, #43	@ 0x2b
 800c046:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c04a:	f89a 3000 	ldrb.w	r3, [sl]
 800c04e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c050:	d015      	beq.n	800c07e <_svfiprintf_r+0xfa>
 800c052:	9a07      	ldr	r2, [sp, #28]
 800c054:	4654      	mov	r4, sl
 800c056:	2000      	movs	r0, #0
 800c058:	f04f 0c0a 	mov.w	ip, #10
 800c05c:	4621      	mov	r1, r4
 800c05e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c062:	3b30      	subs	r3, #48	@ 0x30
 800c064:	2b09      	cmp	r3, #9
 800c066:	d94b      	bls.n	800c100 <_svfiprintf_r+0x17c>
 800c068:	b1b0      	cbz	r0, 800c098 <_svfiprintf_r+0x114>
 800c06a:	9207      	str	r2, [sp, #28]
 800c06c:	e014      	b.n	800c098 <_svfiprintf_r+0x114>
 800c06e:	eba0 0308 	sub.w	r3, r0, r8
 800c072:	fa09 f303 	lsl.w	r3, r9, r3
 800c076:	4313      	orrs	r3, r2
 800c078:	9304      	str	r3, [sp, #16]
 800c07a:	46a2      	mov	sl, r4
 800c07c:	e7d2      	b.n	800c024 <_svfiprintf_r+0xa0>
 800c07e:	9b03      	ldr	r3, [sp, #12]
 800c080:	1d19      	adds	r1, r3, #4
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	9103      	str	r1, [sp, #12]
 800c086:	2b00      	cmp	r3, #0
 800c088:	bfbb      	ittet	lt
 800c08a:	425b      	neglt	r3, r3
 800c08c:	f042 0202 	orrlt.w	r2, r2, #2
 800c090:	9307      	strge	r3, [sp, #28]
 800c092:	9307      	strlt	r3, [sp, #28]
 800c094:	bfb8      	it	lt
 800c096:	9204      	strlt	r2, [sp, #16]
 800c098:	7823      	ldrb	r3, [r4, #0]
 800c09a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c09c:	d10a      	bne.n	800c0b4 <_svfiprintf_r+0x130>
 800c09e:	7863      	ldrb	r3, [r4, #1]
 800c0a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800c0a2:	d132      	bne.n	800c10a <_svfiprintf_r+0x186>
 800c0a4:	9b03      	ldr	r3, [sp, #12]
 800c0a6:	1d1a      	adds	r2, r3, #4
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	9203      	str	r2, [sp, #12]
 800c0ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c0b0:	3402      	adds	r4, #2
 800c0b2:	9305      	str	r3, [sp, #20]
 800c0b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c178 <_svfiprintf_r+0x1f4>
 800c0b8:	7821      	ldrb	r1, [r4, #0]
 800c0ba:	2203      	movs	r2, #3
 800c0bc:	4650      	mov	r0, sl
 800c0be:	f7f4 f88f 	bl	80001e0 <memchr>
 800c0c2:	b138      	cbz	r0, 800c0d4 <_svfiprintf_r+0x150>
 800c0c4:	9b04      	ldr	r3, [sp, #16]
 800c0c6:	eba0 000a 	sub.w	r0, r0, sl
 800c0ca:	2240      	movs	r2, #64	@ 0x40
 800c0cc:	4082      	lsls	r2, r0
 800c0ce:	4313      	orrs	r3, r2
 800c0d0:	3401      	adds	r4, #1
 800c0d2:	9304      	str	r3, [sp, #16]
 800c0d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0d8:	4824      	ldr	r0, [pc, #144]	@ (800c16c <_svfiprintf_r+0x1e8>)
 800c0da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c0de:	2206      	movs	r2, #6
 800c0e0:	f7f4 f87e 	bl	80001e0 <memchr>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d036      	beq.n	800c156 <_svfiprintf_r+0x1d2>
 800c0e8:	4b21      	ldr	r3, [pc, #132]	@ (800c170 <_svfiprintf_r+0x1ec>)
 800c0ea:	bb1b      	cbnz	r3, 800c134 <_svfiprintf_r+0x1b0>
 800c0ec:	9b03      	ldr	r3, [sp, #12]
 800c0ee:	3307      	adds	r3, #7
 800c0f0:	f023 0307 	bic.w	r3, r3, #7
 800c0f4:	3308      	adds	r3, #8
 800c0f6:	9303      	str	r3, [sp, #12]
 800c0f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0fa:	4433      	add	r3, r6
 800c0fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0fe:	e76a      	b.n	800bfd6 <_svfiprintf_r+0x52>
 800c100:	fb0c 3202 	mla	r2, ip, r2, r3
 800c104:	460c      	mov	r4, r1
 800c106:	2001      	movs	r0, #1
 800c108:	e7a8      	b.n	800c05c <_svfiprintf_r+0xd8>
 800c10a:	2300      	movs	r3, #0
 800c10c:	3401      	adds	r4, #1
 800c10e:	9305      	str	r3, [sp, #20]
 800c110:	4619      	mov	r1, r3
 800c112:	f04f 0c0a 	mov.w	ip, #10
 800c116:	4620      	mov	r0, r4
 800c118:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c11c:	3a30      	subs	r2, #48	@ 0x30
 800c11e:	2a09      	cmp	r2, #9
 800c120:	d903      	bls.n	800c12a <_svfiprintf_r+0x1a6>
 800c122:	2b00      	cmp	r3, #0
 800c124:	d0c6      	beq.n	800c0b4 <_svfiprintf_r+0x130>
 800c126:	9105      	str	r1, [sp, #20]
 800c128:	e7c4      	b.n	800c0b4 <_svfiprintf_r+0x130>
 800c12a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c12e:	4604      	mov	r4, r0
 800c130:	2301      	movs	r3, #1
 800c132:	e7f0      	b.n	800c116 <_svfiprintf_r+0x192>
 800c134:	ab03      	add	r3, sp, #12
 800c136:	9300      	str	r3, [sp, #0]
 800c138:	462a      	mov	r2, r5
 800c13a:	4b0e      	ldr	r3, [pc, #56]	@ (800c174 <_svfiprintf_r+0x1f0>)
 800c13c:	a904      	add	r1, sp, #16
 800c13e:	4638      	mov	r0, r7
 800c140:	f3af 8000 	nop.w
 800c144:	1c42      	adds	r2, r0, #1
 800c146:	4606      	mov	r6, r0
 800c148:	d1d6      	bne.n	800c0f8 <_svfiprintf_r+0x174>
 800c14a:	89ab      	ldrh	r3, [r5, #12]
 800c14c:	065b      	lsls	r3, r3, #25
 800c14e:	f53f af2d 	bmi.w	800bfac <_svfiprintf_r+0x28>
 800c152:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c154:	e72c      	b.n	800bfb0 <_svfiprintf_r+0x2c>
 800c156:	ab03      	add	r3, sp, #12
 800c158:	9300      	str	r3, [sp, #0]
 800c15a:	462a      	mov	r2, r5
 800c15c:	4b05      	ldr	r3, [pc, #20]	@ (800c174 <_svfiprintf_r+0x1f0>)
 800c15e:	a904      	add	r1, sp, #16
 800c160:	4638      	mov	r0, r7
 800c162:	f000 f91b 	bl	800c39c <_printf_i>
 800c166:	e7ed      	b.n	800c144 <_svfiprintf_r+0x1c0>
 800c168:	0800c7e8 	.word	0x0800c7e8
 800c16c:	0800c7f2 	.word	0x0800c7f2
 800c170:	00000000 	.word	0x00000000
 800c174:	0800becd 	.word	0x0800becd
 800c178:	0800c7ee 	.word	0x0800c7ee

0800c17c <sbrk_aligned>:
 800c17c:	b570      	push	{r4, r5, r6, lr}
 800c17e:	4e0f      	ldr	r6, [pc, #60]	@ (800c1bc <sbrk_aligned+0x40>)
 800c180:	460c      	mov	r4, r1
 800c182:	6831      	ldr	r1, [r6, #0]
 800c184:	4605      	mov	r5, r0
 800c186:	b911      	cbnz	r1, 800c18e <sbrk_aligned+0x12>
 800c188:	f000 fa7c 	bl	800c684 <_sbrk_r>
 800c18c:	6030      	str	r0, [r6, #0]
 800c18e:	4621      	mov	r1, r4
 800c190:	4628      	mov	r0, r5
 800c192:	f000 fa77 	bl	800c684 <_sbrk_r>
 800c196:	1c43      	adds	r3, r0, #1
 800c198:	d103      	bne.n	800c1a2 <sbrk_aligned+0x26>
 800c19a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c19e:	4620      	mov	r0, r4
 800c1a0:	bd70      	pop	{r4, r5, r6, pc}
 800c1a2:	1cc4      	adds	r4, r0, #3
 800c1a4:	f024 0403 	bic.w	r4, r4, #3
 800c1a8:	42a0      	cmp	r0, r4
 800c1aa:	d0f8      	beq.n	800c19e <sbrk_aligned+0x22>
 800c1ac:	1a21      	subs	r1, r4, r0
 800c1ae:	4628      	mov	r0, r5
 800c1b0:	f000 fa68 	bl	800c684 <_sbrk_r>
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d1f2      	bne.n	800c19e <sbrk_aligned+0x22>
 800c1b8:	e7ef      	b.n	800c19a <sbrk_aligned+0x1e>
 800c1ba:	bf00      	nop
 800c1bc:	200056fc 	.word	0x200056fc

0800c1c0 <_malloc_r>:
 800c1c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1c4:	1ccd      	adds	r5, r1, #3
 800c1c6:	f025 0503 	bic.w	r5, r5, #3
 800c1ca:	3508      	adds	r5, #8
 800c1cc:	2d0c      	cmp	r5, #12
 800c1ce:	bf38      	it	cc
 800c1d0:	250c      	movcc	r5, #12
 800c1d2:	2d00      	cmp	r5, #0
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	db01      	blt.n	800c1dc <_malloc_r+0x1c>
 800c1d8:	42a9      	cmp	r1, r5
 800c1da:	d904      	bls.n	800c1e6 <_malloc_r+0x26>
 800c1dc:	230c      	movs	r3, #12
 800c1de:	6033      	str	r3, [r6, #0]
 800c1e0:	2000      	movs	r0, #0
 800c1e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c2bc <_malloc_r+0xfc>
 800c1ea:	f000 f9f7 	bl	800c5dc <__malloc_lock>
 800c1ee:	f8d8 3000 	ldr.w	r3, [r8]
 800c1f2:	461c      	mov	r4, r3
 800c1f4:	bb44      	cbnz	r4, 800c248 <_malloc_r+0x88>
 800c1f6:	4629      	mov	r1, r5
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	f7ff ffbf 	bl	800c17c <sbrk_aligned>
 800c1fe:	1c43      	adds	r3, r0, #1
 800c200:	4604      	mov	r4, r0
 800c202:	d158      	bne.n	800c2b6 <_malloc_r+0xf6>
 800c204:	f8d8 4000 	ldr.w	r4, [r8]
 800c208:	4627      	mov	r7, r4
 800c20a:	2f00      	cmp	r7, #0
 800c20c:	d143      	bne.n	800c296 <_malloc_r+0xd6>
 800c20e:	2c00      	cmp	r4, #0
 800c210:	d04b      	beq.n	800c2aa <_malloc_r+0xea>
 800c212:	6823      	ldr	r3, [r4, #0]
 800c214:	4639      	mov	r1, r7
 800c216:	4630      	mov	r0, r6
 800c218:	eb04 0903 	add.w	r9, r4, r3
 800c21c:	f000 fa32 	bl	800c684 <_sbrk_r>
 800c220:	4581      	cmp	r9, r0
 800c222:	d142      	bne.n	800c2aa <_malloc_r+0xea>
 800c224:	6821      	ldr	r1, [r4, #0]
 800c226:	1a6d      	subs	r5, r5, r1
 800c228:	4629      	mov	r1, r5
 800c22a:	4630      	mov	r0, r6
 800c22c:	f7ff ffa6 	bl	800c17c <sbrk_aligned>
 800c230:	3001      	adds	r0, #1
 800c232:	d03a      	beq.n	800c2aa <_malloc_r+0xea>
 800c234:	6823      	ldr	r3, [r4, #0]
 800c236:	442b      	add	r3, r5
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	f8d8 3000 	ldr.w	r3, [r8]
 800c23e:	685a      	ldr	r2, [r3, #4]
 800c240:	bb62      	cbnz	r2, 800c29c <_malloc_r+0xdc>
 800c242:	f8c8 7000 	str.w	r7, [r8]
 800c246:	e00f      	b.n	800c268 <_malloc_r+0xa8>
 800c248:	6822      	ldr	r2, [r4, #0]
 800c24a:	1b52      	subs	r2, r2, r5
 800c24c:	d420      	bmi.n	800c290 <_malloc_r+0xd0>
 800c24e:	2a0b      	cmp	r2, #11
 800c250:	d917      	bls.n	800c282 <_malloc_r+0xc2>
 800c252:	1961      	adds	r1, r4, r5
 800c254:	42a3      	cmp	r3, r4
 800c256:	6025      	str	r5, [r4, #0]
 800c258:	bf18      	it	ne
 800c25a:	6059      	strne	r1, [r3, #4]
 800c25c:	6863      	ldr	r3, [r4, #4]
 800c25e:	bf08      	it	eq
 800c260:	f8c8 1000 	streq.w	r1, [r8]
 800c264:	5162      	str	r2, [r4, r5]
 800c266:	604b      	str	r3, [r1, #4]
 800c268:	4630      	mov	r0, r6
 800c26a:	f000 f9bd 	bl	800c5e8 <__malloc_unlock>
 800c26e:	f104 000b 	add.w	r0, r4, #11
 800c272:	1d23      	adds	r3, r4, #4
 800c274:	f020 0007 	bic.w	r0, r0, #7
 800c278:	1ac2      	subs	r2, r0, r3
 800c27a:	bf1c      	itt	ne
 800c27c:	1a1b      	subne	r3, r3, r0
 800c27e:	50a3      	strne	r3, [r4, r2]
 800c280:	e7af      	b.n	800c1e2 <_malloc_r+0x22>
 800c282:	6862      	ldr	r2, [r4, #4]
 800c284:	42a3      	cmp	r3, r4
 800c286:	bf0c      	ite	eq
 800c288:	f8c8 2000 	streq.w	r2, [r8]
 800c28c:	605a      	strne	r2, [r3, #4]
 800c28e:	e7eb      	b.n	800c268 <_malloc_r+0xa8>
 800c290:	4623      	mov	r3, r4
 800c292:	6864      	ldr	r4, [r4, #4]
 800c294:	e7ae      	b.n	800c1f4 <_malloc_r+0x34>
 800c296:	463c      	mov	r4, r7
 800c298:	687f      	ldr	r7, [r7, #4]
 800c29a:	e7b6      	b.n	800c20a <_malloc_r+0x4a>
 800c29c:	461a      	mov	r2, r3
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	42a3      	cmp	r3, r4
 800c2a2:	d1fb      	bne.n	800c29c <_malloc_r+0xdc>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	6053      	str	r3, [r2, #4]
 800c2a8:	e7de      	b.n	800c268 <_malloc_r+0xa8>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	6033      	str	r3, [r6, #0]
 800c2ae:	4630      	mov	r0, r6
 800c2b0:	f000 f99a 	bl	800c5e8 <__malloc_unlock>
 800c2b4:	e794      	b.n	800c1e0 <_malloc_r+0x20>
 800c2b6:	6005      	str	r5, [r0, #0]
 800c2b8:	e7d6      	b.n	800c268 <_malloc_r+0xa8>
 800c2ba:	bf00      	nop
 800c2bc:	20005700 	.word	0x20005700

0800c2c0 <_printf_common>:
 800c2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c4:	4616      	mov	r6, r2
 800c2c6:	4698      	mov	r8, r3
 800c2c8:	688a      	ldr	r2, [r1, #8]
 800c2ca:	690b      	ldr	r3, [r1, #16]
 800c2cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	bfb8      	it	lt
 800c2d4:	4613      	movlt	r3, r2
 800c2d6:	6033      	str	r3, [r6, #0]
 800c2d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c2dc:	4607      	mov	r7, r0
 800c2de:	460c      	mov	r4, r1
 800c2e0:	b10a      	cbz	r2, 800c2e6 <_printf_common+0x26>
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	6033      	str	r3, [r6, #0]
 800c2e6:	6823      	ldr	r3, [r4, #0]
 800c2e8:	0699      	lsls	r1, r3, #26
 800c2ea:	bf42      	ittt	mi
 800c2ec:	6833      	ldrmi	r3, [r6, #0]
 800c2ee:	3302      	addmi	r3, #2
 800c2f0:	6033      	strmi	r3, [r6, #0]
 800c2f2:	6825      	ldr	r5, [r4, #0]
 800c2f4:	f015 0506 	ands.w	r5, r5, #6
 800c2f8:	d106      	bne.n	800c308 <_printf_common+0x48>
 800c2fa:	f104 0a19 	add.w	sl, r4, #25
 800c2fe:	68e3      	ldr	r3, [r4, #12]
 800c300:	6832      	ldr	r2, [r6, #0]
 800c302:	1a9b      	subs	r3, r3, r2
 800c304:	42ab      	cmp	r3, r5
 800c306:	dc26      	bgt.n	800c356 <_printf_common+0x96>
 800c308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c30c:	6822      	ldr	r2, [r4, #0]
 800c30e:	3b00      	subs	r3, #0
 800c310:	bf18      	it	ne
 800c312:	2301      	movne	r3, #1
 800c314:	0692      	lsls	r2, r2, #26
 800c316:	d42b      	bmi.n	800c370 <_printf_common+0xb0>
 800c318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c31c:	4641      	mov	r1, r8
 800c31e:	4638      	mov	r0, r7
 800c320:	47c8      	blx	r9
 800c322:	3001      	adds	r0, #1
 800c324:	d01e      	beq.n	800c364 <_printf_common+0xa4>
 800c326:	6823      	ldr	r3, [r4, #0]
 800c328:	6922      	ldr	r2, [r4, #16]
 800c32a:	f003 0306 	and.w	r3, r3, #6
 800c32e:	2b04      	cmp	r3, #4
 800c330:	bf02      	ittt	eq
 800c332:	68e5      	ldreq	r5, [r4, #12]
 800c334:	6833      	ldreq	r3, [r6, #0]
 800c336:	1aed      	subeq	r5, r5, r3
 800c338:	68a3      	ldr	r3, [r4, #8]
 800c33a:	bf0c      	ite	eq
 800c33c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c340:	2500      	movne	r5, #0
 800c342:	4293      	cmp	r3, r2
 800c344:	bfc4      	itt	gt
 800c346:	1a9b      	subgt	r3, r3, r2
 800c348:	18ed      	addgt	r5, r5, r3
 800c34a:	2600      	movs	r6, #0
 800c34c:	341a      	adds	r4, #26
 800c34e:	42b5      	cmp	r5, r6
 800c350:	d11a      	bne.n	800c388 <_printf_common+0xc8>
 800c352:	2000      	movs	r0, #0
 800c354:	e008      	b.n	800c368 <_printf_common+0xa8>
 800c356:	2301      	movs	r3, #1
 800c358:	4652      	mov	r2, sl
 800c35a:	4641      	mov	r1, r8
 800c35c:	4638      	mov	r0, r7
 800c35e:	47c8      	blx	r9
 800c360:	3001      	adds	r0, #1
 800c362:	d103      	bne.n	800c36c <_printf_common+0xac>
 800c364:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c36c:	3501      	adds	r5, #1
 800c36e:	e7c6      	b.n	800c2fe <_printf_common+0x3e>
 800c370:	18e1      	adds	r1, r4, r3
 800c372:	1c5a      	adds	r2, r3, #1
 800c374:	2030      	movs	r0, #48	@ 0x30
 800c376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c37a:	4422      	add	r2, r4
 800c37c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c384:	3302      	adds	r3, #2
 800c386:	e7c7      	b.n	800c318 <_printf_common+0x58>
 800c388:	2301      	movs	r3, #1
 800c38a:	4622      	mov	r2, r4
 800c38c:	4641      	mov	r1, r8
 800c38e:	4638      	mov	r0, r7
 800c390:	47c8      	blx	r9
 800c392:	3001      	adds	r0, #1
 800c394:	d0e6      	beq.n	800c364 <_printf_common+0xa4>
 800c396:	3601      	adds	r6, #1
 800c398:	e7d9      	b.n	800c34e <_printf_common+0x8e>
	...

0800c39c <_printf_i>:
 800c39c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c3a0:	7e0f      	ldrb	r7, [r1, #24]
 800c3a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c3a4:	2f78      	cmp	r7, #120	@ 0x78
 800c3a6:	4691      	mov	r9, r2
 800c3a8:	4680      	mov	r8, r0
 800c3aa:	460c      	mov	r4, r1
 800c3ac:	469a      	mov	sl, r3
 800c3ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c3b2:	d807      	bhi.n	800c3c4 <_printf_i+0x28>
 800c3b4:	2f62      	cmp	r7, #98	@ 0x62
 800c3b6:	d80a      	bhi.n	800c3ce <_printf_i+0x32>
 800c3b8:	2f00      	cmp	r7, #0
 800c3ba:	f000 80d2 	beq.w	800c562 <_printf_i+0x1c6>
 800c3be:	2f58      	cmp	r7, #88	@ 0x58
 800c3c0:	f000 80b9 	beq.w	800c536 <_printf_i+0x19a>
 800c3c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c3c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c3cc:	e03a      	b.n	800c444 <_printf_i+0xa8>
 800c3ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c3d2:	2b15      	cmp	r3, #21
 800c3d4:	d8f6      	bhi.n	800c3c4 <_printf_i+0x28>
 800c3d6:	a101      	add	r1, pc, #4	@ (adr r1, 800c3dc <_printf_i+0x40>)
 800c3d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c3dc:	0800c435 	.word	0x0800c435
 800c3e0:	0800c449 	.word	0x0800c449
 800c3e4:	0800c3c5 	.word	0x0800c3c5
 800c3e8:	0800c3c5 	.word	0x0800c3c5
 800c3ec:	0800c3c5 	.word	0x0800c3c5
 800c3f0:	0800c3c5 	.word	0x0800c3c5
 800c3f4:	0800c449 	.word	0x0800c449
 800c3f8:	0800c3c5 	.word	0x0800c3c5
 800c3fc:	0800c3c5 	.word	0x0800c3c5
 800c400:	0800c3c5 	.word	0x0800c3c5
 800c404:	0800c3c5 	.word	0x0800c3c5
 800c408:	0800c549 	.word	0x0800c549
 800c40c:	0800c473 	.word	0x0800c473
 800c410:	0800c503 	.word	0x0800c503
 800c414:	0800c3c5 	.word	0x0800c3c5
 800c418:	0800c3c5 	.word	0x0800c3c5
 800c41c:	0800c56b 	.word	0x0800c56b
 800c420:	0800c3c5 	.word	0x0800c3c5
 800c424:	0800c473 	.word	0x0800c473
 800c428:	0800c3c5 	.word	0x0800c3c5
 800c42c:	0800c3c5 	.word	0x0800c3c5
 800c430:	0800c50b 	.word	0x0800c50b
 800c434:	6833      	ldr	r3, [r6, #0]
 800c436:	1d1a      	adds	r2, r3, #4
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	6032      	str	r2, [r6, #0]
 800c43c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c444:	2301      	movs	r3, #1
 800c446:	e09d      	b.n	800c584 <_printf_i+0x1e8>
 800c448:	6833      	ldr	r3, [r6, #0]
 800c44a:	6820      	ldr	r0, [r4, #0]
 800c44c:	1d19      	adds	r1, r3, #4
 800c44e:	6031      	str	r1, [r6, #0]
 800c450:	0606      	lsls	r6, r0, #24
 800c452:	d501      	bpl.n	800c458 <_printf_i+0xbc>
 800c454:	681d      	ldr	r5, [r3, #0]
 800c456:	e003      	b.n	800c460 <_printf_i+0xc4>
 800c458:	0645      	lsls	r5, r0, #25
 800c45a:	d5fb      	bpl.n	800c454 <_printf_i+0xb8>
 800c45c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c460:	2d00      	cmp	r5, #0
 800c462:	da03      	bge.n	800c46c <_printf_i+0xd0>
 800c464:	232d      	movs	r3, #45	@ 0x2d
 800c466:	426d      	negs	r5, r5
 800c468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c46c:	4859      	ldr	r0, [pc, #356]	@ (800c5d4 <_printf_i+0x238>)
 800c46e:	230a      	movs	r3, #10
 800c470:	e011      	b.n	800c496 <_printf_i+0xfa>
 800c472:	6821      	ldr	r1, [r4, #0]
 800c474:	6833      	ldr	r3, [r6, #0]
 800c476:	0608      	lsls	r0, r1, #24
 800c478:	f853 5b04 	ldr.w	r5, [r3], #4
 800c47c:	d402      	bmi.n	800c484 <_printf_i+0xe8>
 800c47e:	0649      	lsls	r1, r1, #25
 800c480:	bf48      	it	mi
 800c482:	b2ad      	uxthmi	r5, r5
 800c484:	2f6f      	cmp	r7, #111	@ 0x6f
 800c486:	4853      	ldr	r0, [pc, #332]	@ (800c5d4 <_printf_i+0x238>)
 800c488:	6033      	str	r3, [r6, #0]
 800c48a:	bf14      	ite	ne
 800c48c:	230a      	movne	r3, #10
 800c48e:	2308      	moveq	r3, #8
 800c490:	2100      	movs	r1, #0
 800c492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c496:	6866      	ldr	r6, [r4, #4]
 800c498:	60a6      	str	r6, [r4, #8]
 800c49a:	2e00      	cmp	r6, #0
 800c49c:	bfa2      	ittt	ge
 800c49e:	6821      	ldrge	r1, [r4, #0]
 800c4a0:	f021 0104 	bicge.w	r1, r1, #4
 800c4a4:	6021      	strge	r1, [r4, #0]
 800c4a6:	b90d      	cbnz	r5, 800c4ac <_printf_i+0x110>
 800c4a8:	2e00      	cmp	r6, #0
 800c4aa:	d04b      	beq.n	800c544 <_printf_i+0x1a8>
 800c4ac:	4616      	mov	r6, r2
 800c4ae:	fbb5 f1f3 	udiv	r1, r5, r3
 800c4b2:	fb03 5711 	mls	r7, r3, r1, r5
 800c4b6:	5dc7      	ldrb	r7, [r0, r7]
 800c4b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c4bc:	462f      	mov	r7, r5
 800c4be:	42bb      	cmp	r3, r7
 800c4c0:	460d      	mov	r5, r1
 800c4c2:	d9f4      	bls.n	800c4ae <_printf_i+0x112>
 800c4c4:	2b08      	cmp	r3, #8
 800c4c6:	d10b      	bne.n	800c4e0 <_printf_i+0x144>
 800c4c8:	6823      	ldr	r3, [r4, #0]
 800c4ca:	07df      	lsls	r7, r3, #31
 800c4cc:	d508      	bpl.n	800c4e0 <_printf_i+0x144>
 800c4ce:	6923      	ldr	r3, [r4, #16]
 800c4d0:	6861      	ldr	r1, [r4, #4]
 800c4d2:	4299      	cmp	r1, r3
 800c4d4:	bfde      	ittt	le
 800c4d6:	2330      	movle	r3, #48	@ 0x30
 800c4d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c4dc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c4e0:	1b92      	subs	r2, r2, r6
 800c4e2:	6122      	str	r2, [r4, #16]
 800c4e4:	f8cd a000 	str.w	sl, [sp]
 800c4e8:	464b      	mov	r3, r9
 800c4ea:	aa03      	add	r2, sp, #12
 800c4ec:	4621      	mov	r1, r4
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	f7ff fee6 	bl	800c2c0 <_printf_common>
 800c4f4:	3001      	adds	r0, #1
 800c4f6:	d14a      	bne.n	800c58e <_printf_i+0x1f2>
 800c4f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4fc:	b004      	add	sp, #16
 800c4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	f043 0320 	orr.w	r3, r3, #32
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	4833      	ldr	r0, [pc, #204]	@ (800c5d8 <_printf_i+0x23c>)
 800c50c:	2778      	movs	r7, #120	@ 0x78
 800c50e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c512:	6823      	ldr	r3, [r4, #0]
 800c514:	6831      	ldr	r1, [r6, #0]
 800c516:	061f      	lsls	r7, r3, #24
 800c518:	f851 5b04 	ldr.w	r5, [r1], #4
 800c51c:	d402      	bmi.n	800c524 <_printf_i+0x188>
 800c51e:	065f      	lsls	r7, r3, #25
 800c520:	bf48      	it	mi
 800c522:	b2ad      	uxthmi	r5, r5
 800c524:	6031      	str	r1, [r6, #0]
 800c526:	07d9      	lsls	r1, r3, #31
 800c528:	bf44      	itt	mi
 800c52a:	f043 0320 	orrmi.w	r3, r3, #32
 800c52e:	6023      	strmi	r3, [r4, #0]
 800c530:	b11d      	cbz	r5, 800c53a <_printf_i+0x19e>
 800c532:	2310      	movs	r3, #16
 800c534:	e7ac      	b.n	800c490 <_printf_i+0xf4>
 800c536:	4827      	ldr	r0, [pc, #156]	@ (800c5d4 <_printf_i+0x238>)
 800c538:	e7e9      	b.n	800c50e <_printf_i+0x172>
 800c53a:	6823      	ldr	r3, [r4, #0]
 800c53c:	f023 0320 	bic.w	r3, r3, #32
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	e7f6      	b.n	800c532 <_printf_i+0x196>
 800c544:	4616      	mov	r6, r2
 800c546:	e7bd      	b.n	800c4c4 <_printf_i+0x128>
 800c548:	6833      	ldr	r3, [r6, #0]
 800c54a:	6825      	ldr	r5, [r4, #0]
 800c54c:	6961      	ldr	r1, [r4, #20]
 800c54e:	1d18      	adds	r0, r3, #4
 800c550:	6030      	str	r0, [r6, #0]
 800c552:	062e      	lsls	r6, r5, #24
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	d501      	bpl.n	800c55c <_printf_i+0x1c0>
 800c558:	6019      	str	r1, [r3, #0]
 800c55a:	e002      	b.n	800c562 <_printf_i+0x1c6>
 800c55c:	0668      	lsls	r0, r5, #25
 800c55e:	d5fb      	bpl.n	800c558 <_printf_i+0x1bc>
 800c560:	8019      	strh	r1, [r3, #0]
 800c562:	2300      	movs	r3, #0
 800c564:	6123      	str	r3, [r4, #16]
 800c566:	4616      	mov	r6, r2
 800c568:	e7bc      	b.n	800c4e4 <_printf_i+0x148>
 800c56a:	6833      	ldr	r3, [r6, #0]
 800c56c:	1d1a      	adds	r2, r3, #4
 800c56e:	6032      	str	r2, [r6, #0]
 800c570:	681e      	ldr	r6, [r3, #0]
 800c572:	6862      	ldr	r2, [r4, #4]
 800c574:	2100      	movs	r1, #0
 800c576:	4630      	mov	r0, r6
 800c578:	f7f3 fe32 	bl	80001e0 <memchr>
 800c57c:	b108      	cbz	r0, 800c582 <_printf_i+0x1e6>
 800c57e:	1b80      	subs	r0, r0, r6
 800c580:	6060      	str	r0, [r4, #4]
 800c582:	6863      	ldr	r3, [r4, #4]
 800c584:	6123      	str	r3, [r4, #16]
 800c586:	2300      	movs	r3, #0
 800c588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c58c:	e7aa      	b.n	800c4e4 <_printf_i+0x148>
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	4632      	mov	r2, r6
 800c592:	4649      	mov	r1, r9
 800c594:	4640      	mov	r0, r8
 800c596:	47d0      	blx	sl
 800c598:	3001      	adds	r0, #1
 800c59a:	d0ad      	beq.n	800c4f8 <_printf_i+0x15c>
 800c59c:	6823      	ldr	r3, [r4, #0]
 800c59e:	079b      	lsls	r3, r3, #30
 800c5a0:	d413      	bmi.n	800c5ca <_printf_i+0x22e>
 800c5a2:	68e0      	ldr	r0, [r4, #12]
 800c5a4:	9b03      	ldr	r3, [sp, #12]
 800c5a6:	4298      	cmp	r0, r3
 800c5a8:	bfb8      	it	lt
 800c5aa:	4618      	movlt	r0, r3
 800c5ac:	e7a6      	b.n	800c4fc <_printf_i+0x160>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	4632      	mov	r2, r6
 800c5b2:	4649      	mov	r1, r9
 800c5b4:	4640      	mov	r0, r8
 800c5b6:	47d0      	blx	sl
 800c5b8:	3001      	adds	r0, #1
 800c5ba:	d09d      	beq.n	800c4f8 <_printf_i+0x15c>
 800c5bc:	3501      	adds	r5, #1
 800c5be:	68e3      	ldr	r3, [r4, #12]
 800c5c0:	9903      	ldr	r1, [sp, #12]
 800c5c2:	1a5b      	subs	r3, r3, r1
 800c5c4:	42ab      	cmp	r3, r5
 800c5c6:	dcf2      	bgt.n	800c5ae <_printf_i+0x212>
 800c5c8:	e7eb      	b.n	800c5a2 <_printf_i+0x206>
 800c5ca:	2500      	movs	r5, #0
 800c5cc:	f104 0619 	add.w	r6, r4, #25
 800c5d0:	e7f5      	b.n	800c5be <_printf_i+0x222>
 800c5d2:	bf00      	nop
 800c5d4:	0800c7f9 	.word	0x0800c7f9
 800c5d8:	0800c80a 	.word	0x0800c80a

0800c5dc <__malloc_lock>:
 800c5dc:	4801      	ldr	r0, [pc, #4]	@ (800c5e4 <__malloc_lock+0x8>)
 800c5de:	f7ff bc1b 	b.w	800be18 <__retarget_lock_acquire_recursive>
 800c5e2:	bf00      	nop
 800c5e4:	200056f8 	.word	0x200056f8

0800c5e8 <__malloc_unlock>:
 800c5e8:	4801      	ldr	r0, [pc, #4]	@ (800c5f0 <__malloc_unlock+0x8>)
 800c5ea:	f7ff bc16 	b.w	800be1a <__retarget_lock_release_recursive>
 800c5ee:	bf00      	nop
 800c5f0:	200056f8 	.word	0x200056f8

0800c5f4 <_realloc_r>:
 800c5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5f8:	4680      	mov	r8, r0
 800c5fa:	4615      	mov	r5, r2
 800c5fc:	460c      	mov	r4, r1
 800c5fe:	b921      	cbnz	r1, 800c60a <_realloc_r+0x16>
 800c600:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c604:	4611      	mov	r1, r2
 800c606:	f7ff bddb 	b.w	800c1c0 <_malloc_r>
 800c60a:	b92a      	cbnz	r2, 800c618 <_realloc_r+0x24>
 800c60c:	f7ff fc14 	bl	800be38 <_free_r>
 800c610:	2400      	movs	r4, #0
 800c612:	4620      	mov	r0, r4
 800c614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c618:	f000 f844 	bl	800c6a4 <_malloc_usable_size_r>
 800c61c:	4285      	cmp	r5, r0
 800c61e:	4606      	mov	r6, r0
 800c620:	d802      	bhi.n	800c628 <_realloc_r+0x34>
 800c622:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c626:	d8f4      	bhi.n	800c612 <_realloc_r+0x1e>
 800c628:	4629      	mov	r1, r5
 800c62a:	4640      	mov	r0, r8
 800c62c:	f7ff fdc8 	bl	800c1c0 <_malloc_r>
 800c630:	4607      	mov	r7, r0
 800c632:	2800      	cmp	r0, #0
 800c634:	d0ec      	beq.n	800c610 <_realloc_r+0x1c>
 800c636:	42b5      	cmp	r5, r6
 800c638:	462a      	mov	r2, r5
 800c63a:	4621      	mov	r1, r4
 800c63c:	bf28      	it	cs
 800c63e:	4632      	movcs	r2, r6
 800c640:	f7ff fbec 	bl	800be1c <memcpy>
 800c644:	4621      	mov	r1, r4
 800c646:	4640      	mov	r0, r8
 800c648:	f7ff fbf6 	bl	800be38 <_free_r>
 800c64c:	463c      	mov	r4, r7
 800c64e:	e7e0      	b.n	800c612 <_realloc_r+0x1e>

0800c650 <memmove>:
 800c650:	4288      	cmp	r0, r1
 800c652:	b510      	push	{r4, lr}
 800c654:	eb01 0402 	add.w	r4, r1, r2
 800c658:	d902      	bls.n	800c660 <memmove+0x10>
 800c65a:	4284      	cmp	r4, r0
 800c65c:	4623      	mov	r3, r4
 800c65e:	d807      	bhi.n	800c670 <memmove+0x20>
 800c660:	1e43      	subs	r3, r0, #1
 800c662:	42a1      	cmp	r1, r4
 800c664:	d008      	beq.n	800c678 <memmove+0x28>
 800c666:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c66a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c66e:	e7f8      	b.n	800c662 <memmove+0x12>
 800c670:	4402      	add	r2, r0
 800c672:	4601      	mov	r1, r0
 800c674:	428a      	cmp	r2, r1
 800c676:	d100      	bne.n	800c67a <memmove+0x2a>
 800c678:	bd10      	pop	{r4, pc}
 800c67a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c67e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c682:	e7f7      	b.n	800c674 <memmove+0x24>

0800c684 <_sbrk_r>:
 800c684:	b538      	push	{r3, r4, r5, lr}
 800c686:	4d06      	ldr	r5, [pc, #24]	@ (800c6a0 <_sbrk_r+0x1c>)
 800c688:	2300      	movs	r3, #0
 800c68a:	4604      	mov	r4, r0
 800c68c:	4608      	mov	r0, r1
 800c68e:	602b      	str	r3, [r5, #0]
 800c690:	f7f6 fe60 	bl	8003354 <_sbrk>
 800c694:	1c43      	adds	r3, r0, #1
 800c696:	d102      	bne.n	800c69e <_sbrk_r+0x1a>
 800c698:	682b      	ldr	r3, [r5, #0]
 800c69a:	b103      	cbz	r3, 800c69e <_sbrk_r+0x1a>
 800c69c:	6023      	str	r3, [r4, #0]
 800c69e:	bd38      	pop	{r3, r4, r5, pc}
 800c6a0:	200056f4 	.word	0x200056f4

0800c6a4 <_malloc_usable_size_r>:
 800c6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a8:	1f18      	subs	r0, r3, #4
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	bfbc      	itt	lt
 800c6ae:	580b      	ldrlt	r3, [r1, r0]
 800c6b0:	18c0      	addlt	r0, r0, r3
 800c6b2:	4770      	bx	lr

0800c6b4 <_init>:
 800c6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6b6:	bf00      	nop
 800c6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ba:	bc08      	pop	{r3}
 800c6bc:	469e      	mov	lr, r3
 800c6be:	4770      	bx	lr

0800c6c0 <_fini>:
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c2:	bf00      	nop
 800c6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c6:	bc08      	pop	{r3}
 800c6c8:	469e      	mov	lr, r3
 800c6ca:	4770      	bx	lr
