
SuperCapController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013ee0  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080141b0  080141b0  000151b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801433c  0801433c  0001533c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014344  08014344  00015344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014348  08014348  00015348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  0801434c  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000529c  24000064  080143b0  00016064  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24005300  080143b0  00016300  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00016064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002bbd2  00000000  00000000  00016092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004ab9  00000000  00000000  00041c64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002368  00000000  00000000  00046720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001bbd  00000000  00000000  00048a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039d8f  00000000  00000000  0004a645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c043  00000000  00000000  000843d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178fee  00000000  00000000  000b0417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00229405  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009f94  00000000  00000000  00229448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  002333dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08014198 	.word	0x08014198

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	08014198 	.word	0x08014198

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b988 	b.w	80006d8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	468e      	mov	lr, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	4688      	mov	r8, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d962      	bls.n	80004bc <__udivmoddi4+0xdc>
 80003f6:	fab2 f682 	clz	r6, r2
 80003fa:	b14e      	cbz	r6, 8000410 <__udivmoddi4+0x30>
 80003fc:	f1c6 0320 	rsb	r3, r6, #32
 8000400:	fa01 f806 	lsl.w	r8, r1, r6
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	40b7      	lsls	r7, r6
 800040a:	ea43 0808 	orr.w	r8, r3, r8
 800040e:	40b4      	lsls	r4, r6
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	fa1f fc87 	uxth.w	ip, r7
 8000418:	fbb8 f1fe 	udiv	r1, r8, lr
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fb01 f20c 	mul.w	r2, r1, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d909      	bls.n	8000442 <__udivmoddi4+0x62>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000434:	f080 80ea 	bcs.w	800060c <__udivmoddi4+0x22c>
 8000438:	429a      	cmp	r2, r3
 800043a:	f240 80e7 	bls.w	800060c <__udivmoddi4+0x22c>
 800043e:	3902      	subs	r1, #2
 8000440:	443b      	add	r3, r7
 8000442:	1a9a      	subs	r2, r3, r2
 8000444:	b2a3      	uxth	r3, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000452:	fb00 fc0c 	mul.w	ip, r0, ip
 8000456:	459c      	cmp	ip, r3
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0x8e>
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000460:	f080 80d6 	bcs.w	8000610 <__udivmoddi4+0x230>
 8000464:	459c      	cmp	ip, r3
 8000466:	f240 80d3 	bls.w	8000610 <__udivmoddi4+0x230>
 800046a:	443b      	add	r3, r7
 800046c:	3802      	subs	r0, #2
 800046e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000472:	eba3 030c 	sub.w	r3, r3, ip
 8000476:	2100      	movs	r1, #0
 8000478:	b11d      	cbz	r5, 8000482 <__udivmoddi4+0xa2>
 800047a:	40f3      	lsrs	r3, r6
 800047c:	2200      	movs	r2, #0
 800047e:	e9c5 3200 	strd	r3, r2, [r5]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d905      	bls.n	8000496 <__udivmoddi4+0xb6>
 800048a:	b10d      	cbz	r5, 8000490 <__udivmoddi4+0xb0>
 800048c:	e9c5 0100 	strd	r0, r1, [r5]
 8000490:	2100      	movs	r1, #0
 8000492:	4608      	mov	r0, r1
 8000494:	e7f5      	b.n	8000482 <__udivmoddi4+0xa2>
 8000496:	fab3 f183 	clz	r1, r3
 800049a:	2900      	cmp	r1, #0
 800049c:	d146      	bne.n	800052c <__udivmoddi4+0x14c>
 800049e:	4573      	cmp	r3, lr
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xc8>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 8105 	bhi.w	80006b2 <__udivmoddi4+0x2d2>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	4690      	mov	r8, r2
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e5      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004b6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ba:	e7e2      	b.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	2a00      	cmp	r2, #0
 80004be:	f000 8090 	beq.w	80005e2 <__udivmoddi4+0x202>
 80004c2:	fab2 f682 	clz	r6, r2
 80004c6:	2e00      	cmp	r6, #0
 80004c8:	f040 80a4 	bne.w	8000614 <__udivmoddi4+0x234>
 80004cc:	1a8a      	subs	r2, r1, r2
 80004ce:	0c03      	lsrs	r3, r0, #16
 80004d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004d4:	b280      	uxth	r0, r0
 80004d6:	b2bc      	uxth	r4, r7
 80004d8:	2101      	movs	r1, #1
 80004da:	fbb2 fcfe 	udiv	ip, r2, lr
 80004de:	fb0e 221c 	mls	r2, lr, ip, r2
 80004e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004e6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ea:	429a      	cmp	r2, r3
 80004ec:	d907      	bls.n	80004fe <__udivmoddi4+0x11e>
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004f4:	d202      	bcs.n	80004fc <__udivmoddi4+0x11c>
 80004f6:	429a      	cmp	r2, r3
 80004f8:	f200 80e0 	bhi.w	80006bc <__udivmoddi4+0x2dc>
 80004fc:	46c4      	mov	ip, r8
 80004fe:	1a9b      	subs	r3, r3, r2
 8000500:	fbb3 f2fe 	udiv	r2, r3, lr
 8000504:	fb0e 3312 	mls	r3, lr, r2, r3
 8000508:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800050c:	fb02 f404 	mul.w	r4, r2, r4
 8000510:	429c      	cmp	r4, r3
 8000512:	d907      	bls.n	8000524 <__udivmoddi4+0x144>
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800051a:	d202      	bcs.n	8000522 <__udivmoddi4+0x142>
 800051c:	429c      	cmp	r4, r3
 800051e:	f200 80ca 	bhi.w	80006b6 <__udivmoddi4+0x2d6>
 8000522:	4602      	mov	r2, r0
 8000524:	1b1b      	subs	r3, r3, r4
 8000526:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800052a:	e7a5      	b.n	8000478 <__udivmoddi4+0x98>
 800052c:	f1c1 0620 	rsb	r6, r1, #32
 8000530:	408b      	lsls	r3, r1
 8000532:	fa22 f706 	lsr.w	r7, r2, r6
 8000536:	431f      	orrs	r7, r3
 8000538:	fa0e f401 	lsl.w	r4, lr, r1
 800053c:	fa20 f306 	lsr.w	r3, r0, r6
 8000540:	fa2e fe06 	lsr.w	lr, lr, r6
 8000544:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000548:	4323      	orrs	r3, r4
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	fa1f fc87 	uxth.w	ip, r7
 8000552:	fbbe f0f9 	udiv	r0, lr, r9
 8000556:	0c1c      	lsrs	r4, r3, #16
 8000558:	fb09 ee10 	mls	lr, r9, r0, lr
 800055c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000560:	fb00 fe0c 	mul.w	lr, r0, ip
 8000564:	45a6      	cmp	lr, r4
 8000566:	fa02 f201 	lsl.w	r2, r2, r1
 800056a:	d909      	bls.n	8000580 <__udivmoddi4+0x1a0>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000572:	f080 809c 	bcs.w	80006ae <__udivmoddi4+0x2ce>
 8000576:	45a6      	cmp	lr, r4
 8000578:	f240 8099 	bls.w	80006ae <__udivmoddi4+0x2ce>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	eba4 040e 	sub.w	r4, r4, lr
 8000584:	fa1f fe83 	uxth.w	lr, r3
 8000588:	fbb4 f3f9 	udiv	r3, r4, r9
 800058c:	fb09 4413 	mls	r4, r9, r3, r4
 8000590:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000594:	fb03 fc0c 	mul.w	ip, r3, ip
 8000598:	45a4      	cmp	ip, r4
 800059a:	d908      	bls.n	80005ae <__udivmoddi4+0x1ce>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005a2:	f080 8082 	bcs.w	80006aa <__udivmoddi4+0x2ca>
 80005a6:	45a4      	cmp	ip, r4
 80005a8:	d97f      	bls.n	80006aa <__udivmoddi4+0x2ca>
 80005aa:	3b02      	subs	r3, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005b2:	eba4 040c 	sub.w	r4, r4, ip
 80005b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ba:	4564      	cmp	r4, ip
 80005bc:	4673      	mov	r3, lr
 80005be:	46e1      	mov	r9, ip
 80005c0:	d362      	bcc.n	8000688 <__udivmoddi4+0x2a8>
 80005c2:	d05f      	beq.n	8000684 <__udivmoddi4+0x2a4>
 80005c4:	b15d      	cbz	r5, 80005de <__udivmoddi4+0x1fe>
 80005c6:	ebb8 0203 	subs.w	r2, r8, r3
 80005ca:	eb64 0409 	sbc.w	r4, r4, r9
 80005ce:	fa04 f606 	lsl.w	r6, r4, r6
 80005d2:	fa22 f301 	lsr.w	r3, r2, r1
 80005d6:	431e      	orrs	r6, r3
 80005d8:	40cc      	lsrs	r4, r1
 80005da:	e9c5 6400 	strd	r6, r4, [r5]
 80005de:	2100      	movs	r1, #0
 80005e0:	e74f      	b.n	8000482 <__udivmoddi4+0xa2>
 80005e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005e6:	0c01      	lsrs	r1, r0, #16
 80005e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005ec:	b280      	uxth	r0, r0
 80005ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005f2:	463b      	mov	r3, r7
 80005f4:	4638      	mov	r0, r7
 80005f6:	463c      	mov	r4, r7
 80005f8:	46b8      	mov	r8, r7
 80005fa:	46be      	mov	lr, r7
 80005fc:	2620      	movs	r6, #32
 80005fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000602:	eba2 0208 	sub.w	r2, r2, r8
 8000606:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800060a:	e766      	b.n	80004da <__udivmoddi4+0xfa>
 800060c:	4601      	mov	r1, r0
 800060e:	e718      	b.n	8000442 <__udivmoddi4+0x62>
 8000610:	4610      	mov	r0, r2
 8000612:	e72c      	b.n	800046e <__udivmoddi4+0x8e>
 8000614:	f1c6 0220 	rsb	r2, r6, #32
 8000618:	fa2e f302 	lsr.w	r3, lr, r2
 800061c:	40b7      	lsls	r7, r6
 800061e:	40b1      	lsls	r1, r6
 8000620:	fa20 f202 	lsr.w	r2, r0, r2
 8000624:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000628:	430a      	orrs	r2, r1
 800062a:	fbb3 f8fe 	udiv	r8, r3, lr
 800062e:	b2bc      	uxth	r4, r7
 8000630:	fb0e 3318 	mls	r3, lr, r8, r3
 8000634:	0c11      	lsrs	r1, r2, #16
 8000636:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800063a:	fb08 f904 	mul.w	r9, r8, r4
 800063e:	40b0      	lsls	r0, r6
 8000640:	4589      	cmp	r9, r1
 8000642:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000646:	b280      	uxth	r0, r0
 8000648:	d93e      	bls.n	80006c8 <__udivmoddi4+0x2e8>
 800064a:	1879      	adds	r1, r7, r1
 800064c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000650:	d201      	bcs.n	8000656 <__udivmoddi4+0x276>
 8000652:	4589      	cmp	r9, r1
 8000654:	d81f      	bhi.n	8000696 <__udivmoddi4+0x2b6>
 8000656:	eba1 0109 	sub.w	r1, r1, r9
 800065a:	fbb1 f9fe 	udiv	r9, r1, lr
 800065e:	fb09 f804 	mul.w	r8, r9, r4
 8000662:	fb0e 1119 	mls	r1, lr, r9, r1
 8000666:	b292      	uxth	r2, r2
 8000668:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800066c:	4542      	cmp	r2, r8
 800066e:	d229      	bcs.n	80006c4 <__udivmoddi4+0x2e4>
 8000670:	18ba      	adds	r2, r7, r2
 8000672:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000676:	d2c4      	bcs.n	8000602 <__udivmoddi4+0x222>
 8000678:	4542      	cmp	r2, r8
 800067a:	d2c2      	bcs.n	8000602 <__udivmoddi4+0x222>
 800067c:	f1a9 0102 	sub.w	r1, r9, #2
 8000680:	443a      	add	r2, r7
 8000682:	e7be      	b.n	8000602 <__udivmoddi4+0x222>
 8000684:	45f0      	cmp	r8, lr
 8000686:	d29d      	bcs.n	80005c4 <__udivmoddi4+0x1e4>
 8000688:	ebbe 0302 	subs.w	r3, lr, r2
 800068c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000690:	3801      	subs	r0, #1
 8000692:	46e1      	mov	r9, ip
 8000694:	e796      	b.n	80005c4 <__udivmoddi4+0x1e4>
 8000696:	eba7 0909 	sub.w	r9, r7, r9
 800069a:	4449      	add	r1, r9
 800069c:	f1a8 0c02 	sub.w	ip, r8, #2
 80006a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a4:	fb09 f804 	mul.w	r8, r9, r4
 80006a8:	e7db      	b.n	8000662 <__udivmoddi4+0x282>
 80006aa:	4673      	mov	r3, lr
 80006ac:	e77f      	b.n	80005ae <__udivmoddi4+0x1ce>
 80006ae:	4650      	mov	r0, sl
 80006b0:	e766      	b.n	8000580 <__udivmoddi4+0x1a0>
 80006b2:	4608      	mov	r0, r1
 80006b4:	e6fd      	b.n	80004b2 <__udivmoddi4+0xd2>
 80006b6:	443b      	add	r3, r7
 80006b8:	3a02      	subs	r2, #2
 80006ba:	e733      	b.n	8000524 <__udivmoddi4+0x144>
 80006bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c0:	443b      	add	r3, r7
 80006c2:	e71c      	b.n	80004fe <__udivmoddi4+0x11e>
 80006c4:	4649      	mov	r1, r9
 80006c6:	e79c      	b.n	8000602 <__udivmoddi4+0x222>
 80006c8:	eba1 0109 	sub.w	r1, r1, r9
 80006cc:	46c4      	mov	ip, r8
 80006ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d2:	fb09 f804 	mul.w	r8, r9, r4
 80006d6:	e7c4      	b.n	8000662 <__udivmoddi4+0x282>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <bsp_can_init>:
uint16_t RC_mouse_val[5] = {0, 0, 0, 0, 0};
uint16_t RC_keys_val = 0;

static uint8_t CAN_MotorSendBuffer[8];

void bsp_can_init(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	//MX_FDCAN1_Init();
	//MX_FDCAN2_Init();
	//MX_FDCAN3_Init();
	can_filter_init();
 80006e0:	f000 f820 	bl	8000724 <can_filter_init>
	HAL_FDCAN_Start(&hfdcan1);
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <bsp_can_init+0x3c>)
 80006e6:	f009 fad0 	bl	8009c8a <HAL_FDCAN_Start>
	HAL_FDCAN_Start(&hfdcan2);
 80006ea:	480c      	ldr	r0, [pc, #48]	@ (800071c <bsp_can_init+0x40>)
 80006ec:	f009 facd 	bl	8009c8a <HAL_FDCAN_Start>
	HAL_FDCAN_Start(&hfdcan3);
 80006f0:	480b      	ldr	r0, [pc, #44]	@ (8000720 <bsp_can_init+0x44>)
 80006f2:	f009 faca 	bl	8009c8a <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2101      	movs	r1, #1
 80006fa:	4807      	ldr	r0, [pc, #28]	@ (8000718 <bsp_can_init+0x3c>)
 80006fc:	f009 fcb8 	bl	800a070 <HAL_FDCAN_ActivateNotification>
	//HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_BUS_OFF, 0);
	HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2101      	movs	r1, #1
 8000704:	4805      	ldr	r0, [pc, #20]	@ (800071c <bsp_can_init+0x40>)
 8000706:	f009 fcb3 	bl	800a070 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2101      	movs	r1, #1
 800070e:	4804      	ldr	r0, [pc, #16]	@ (8000720 <bsp_can_init+0x44>)
 8000710:	f009 fcae 	bl	800a070 <HAL_FDCAN_ActivateNotification>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2400096c 	.word	0x2400096c
 800071c:	24000a0c 	.word	0x24000a0c
 8000720:	24000aac 	.word	0x24000aac

08000724 <can_filter_init>:

void can_filter_init(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef fdcan_filter;
	fdcan_filter.IdType = FDCAN_STANDARD_ID;
 800072a:	2300      	movs	r3, #0
 800072c:	603b      	str	r3, [r7, #0]
	fdcan_filter.FilterIndex = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
	fdcan_filter.FilterType = FDCAN_FILTER_MASK;
 8000732:	2302      	movs	r3, #2
 8000734:	60bb      	str	r3, [r7, #8]
	fdcan_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000736:	2301      	movs	r3, #1
 8000738:	60fb      	str	r3, [r7, #12]
	fdcan_filter.FilterID1 = 0x00;
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
	fdcan_filter.FilterID2 = 0x00;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1,&fdcan_filter);
 8000742:	463b      	mov	r3, r7
 8000744:	4619      	mov	r1, r3
 8000746:	480a      	ldr	r0, [pc, #40]	@ (8000770 <can_filter_init+0x4c>)
 8000748:	f009 f9b0 	bl	8009aac <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1,FDCAN_REJECT,FDCAN_REJECT,FDCAN_REJECT_REMOTE,FDCAN_REJECT_REMOTE);
 800074c:	2301      	movs	r3, #1
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	2301      	movs	r3, #1
 8000752:	2202      	movs	r2, #2
 8000754:	2102      	movs	r1, #2
 8000756:	4806      	ldr	r0, [pc, #24]	@ (8000770 <can_filter_init+0x4c>)
 8000758:	f009 fa1e 	bl	8009b98 <HAL_FDCAN_ConfigGlobalFilter>
	HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO0, 1);
 800075c:	2201      	movs	r2, #1
 800075e:	2101      	movs	r1, #1
 8000760:	4803      	ldr	r0, [pc, #12]	@ (8000770 <can_filter_init+0x4c>)
 8000762:	f009 fa46 	bl	8009bf2 <HAL_FDCAN_ConfigFifoWatermark>
//	HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO1, 1);
	//HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_COMPLETE, FDCAN_TX_BUFFER0);
}
 8000766:	bf00      	nop
 8000768:	3720      	adds	r7, #32
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2400096c 	.word	0x2400096c

08000774 <CANFD_GetRxHeaderDataLength>:

uint8_t CANFD_GetRxHeaderDataLength(FDCAN_RxHeaderTypeDef header) {
 8000774:	b084      	sub	sp, #16
 8000776:	b480      	push	{r7}
 8000778:	b083      	sub	sp, #12
 800077a:	af00      	add	r7, sp, #0
 800077c:	f107 0c10 	add.w	ip, r7, #16
 8000780:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t len;
	if(header.DataLength<=FDCAN_DLC_BYTES_8)
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	2b08      	cmp	r3, #8
 8000788:	d801      	bhi.n	800078e <CANFD_GetRxHeaderDataLength+0x1a>
		len = header.DataLength;
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_12)
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	2b09      	cmp	r3, #9
 8000792:	d801      	bhi.n	8000798 <CANFD_GetRxHeaderDataLength+0x24>
		len = 12;
 8000794:	230c      	movs	r3, #12
 8000796:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_16)
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	2b0a      	cmp	r3, #10
 800079c:	d801      	bhi.n	80007a2 <CANFD_GetRxHeaderDataLength+0x2e>
		len = 16;
 800079e:	2310      	movs	r3, #16
 80007a0:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_20)
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	2b0b      	cmp	r3, #11
 80007a6:	d801      	bhi.n	80007ac <CANFD_GetRxHeaderDataLength+0x38>
		len = 20;
 80007a8:	2314      	movs	r3, #20
 80007aa:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_24)
 80007ac:	69fb      	ldr	r3, [r7, #28]
 80007ae:	2b0c      	cmp	r3, #12
 80007b0:	d801      	bhi.n	80007b6 <CANFD_GetRxHeaderDataLength+0x42>
		len = 24;
 80007b2:	2318      	movs	r3, #24
 80007b4:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_32)
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	2b0d      	cmp	r3, #13
 80007ba:	d801      	bhi.n	80007c0 <CANFD_GetRxHeaderDataLength+0x4c>
		len = 32;
 80007bc:	2320      	movs	r3, #32
 80007be:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_48)
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2b0e      	cmp	r3, #14
 80007c4:	d801      	bhi.n	80007ca <CANFD_GetRxHeaderDataLength+0x56>
		len = 48;
 80007c6:	2330      	movs	r3, #48	@ 0x30
 80007c8:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_64)
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	2b0f      	cmp	r3, #15
 80007ce:	d801      	bhi.n	80007d4 <CANFD_GetRxHeaderDataLength+0x60>
		len = 64;
 80007d0:	2340      	movs	r3, #64	@ 0x40
 80007d2:	71fb      	strb	r3, [r7, #7]
	return len;
 80007d4:	79fb      	ldrb	r3, [r7, #7]
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	b004      	add	sp, #16
 80007e2:	4770      	bx	lr

080007e4 <CANFD_GetTxHeaderDataLength>:

uint32_t CANFD_GetTxHeaderDataLength(uint32_t len) {
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	uint32_t length = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60fb      	str	r3, [r7, #12]
	if(len<=8)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2b08      	cmp	r3, #8
 80007f4:	d801      	bhi.n	80007fa <CANFD_GetTxHeaderDataLength+0x16>
		length = len;
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	60fb      	str	r3, [r7, #12]
	if(len==12)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2b0c      	cmp	r3, #12
 80007fe:	d101      	bne.n	8000804 <CANFD_GetTxHeaderDataLength+0x20>
		length = FDCAN_DLC_BYTES_12;
 8000800:	2309      	movs	r3, #9
 8000802:	60fb      	str	r3, [r7, #12]
	if(len==16)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2b10      	cmp	r3, #16
 8000808:	d101      	bne.n	800080e <CANFD_GetTxHeaderDataLength+0x2a>
		length = FDCAN_DLC_BYTES_16;
 800080a:	230a      	movs	r3, #10
 800080c:	60fb      	str	r3, [r7, #12]
	if(len==20)
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b14      	cmp	r3, #20
 8000812:	d101      	bne.n	8000818 <CANFD_GetTxHeaderDataLength+0x34>
		length = FDCAN_DLC_BYTES_20;
 8000814:	230b      	movs	r3, #11
 8000816:	60fb      	str	r3, [r7, #12]
	if(len==24)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	2b18      	cmp	r3, #24
 800081c:	d101      	bne.n	8000822 <CANFD_GetTxHeaderDataLength+0x3e>
		length = FDCAN_DLC_BYTES_24;
 800081e:	230c      	movs	r3, #12
 8000820:	60fb      	str	r3, [r7, #12]
	if(len==32)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2b20      	cmp	r3, #32
 8000826:	d101      	bne.n	800082c <CANFD_GetTxHeaderDataLength+0x48>
		length = FDCAN_DLC_BYTES_32;
 8000828:	230d      	movs	r3, #13
 800082a:	60fb      	str	r3, [r7, #12]
	if(len==48)
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b30      	cmp	r3, #48	@ 0x30
 8000830:	d101      	bne.n	8000836 <CANFD_GetTxHeaderDataLength+0x52>
		length = FDCAN_DLC_BYTES_48;
 8000832:	230e      	movs	r3, #14
 8000834:	60fb      	str	r3, [r7, #12]
	if(len==64)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b40      	cmp	r3, #64	@ 0x40
 800083a:	d101      	bne.n	8000840 <CANFD_GetTxHeaderDataLength+0x5c>
		length = FDCAN_DLC_BYTES_64;
 800083c:	230f      	movs	r3, #15
 800083e:	60fb      	str	r3, [r7, #12]
	return length;
 8000840:	68fb      	ldr	r3, [r7, #12]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3714      	adds	r7, #20
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <fdcanx_send_data>:

uint8_t fdcanx_send_data(hcan_t *hfdcan, uint16_t id, uint8_t *data, uint32_t len) {
 800084e:	b580      	push	{r7, lr}
 8000850:	b08e      	sub	sp, #56	@ 0x38
 8000852:	af00      	add	r7, sp, #0
 8000854:	60f8      	str	r0, [r7, #12]
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	460b      	mov	r3, r1
 800085c:	817b      	strh	r3, [r7, #10]
    FDCAN_TxHeaderTypeDef pTxHeader;
    pTxHeader.Identifier=id;
 800085e:	897b      	ldrh	r3, [r7, #10]
 8000860:	617b      	str	r3, [r7, #20]
    pTxHeader.IdType=FDCAN_STANDARD_ID;
 8000862:	2300      	movs	r3, #0
 8000864:	61bb      	str	r3, [r7, #24]
    pTxHeader.TxFrameType=FDCAN_DATA_FRAME;
 8000866:	2300      	movs	r3, #0
 8000868:	61fb      	str	r3, [r7, #28]
    pTxHeader.DataLength = CANFD_GetTxHeaderDataLength(len);
 800086a:	6838      	ldr	r0, [r7, #0]
 800086c:	f7ff ffba 	bl	80007e4 <CANFD_GetTxHeaderDataLength>
 8000870:	4603      	mov	r3, r0
 8000872:	623b      	str	r3, [r7, #32]
    pTxHeader.ErrorStateIndicator=FDCAN_ESI_ACTIVE;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
    pTxHeader.BitRateSwitch=FDCAN_BRS_ON;
 8000878:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800087c:	62bb      	str	r3, [r7, #40]	@ 0x28
    pTxHeader.FDFormat=FDCAN_FD_CAN;
 800087e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pTxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
 8000884:	2300      	movs	r3, #0
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
    pTxHeader.MessageMarker=0;
 8000888:	2300      	movs	r3, #0
 800088a:	637b      	str	r3, [r7, #52]	@ 0x34
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &pTxHeader, data);
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	4619      	mov	r1, r3
 8000894:	68f8      	ldr	r0, [r7, #12]
 8000896:	f009 fa23 	bl	8009ce0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800089a:	4603      	mov	r3, r0
}
 800089c:	4618      	mov	r0, r3
 800089e:	3738      	adds	r7, #56	@ 0x38
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <fdcanx_receive>:
    pTxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
    pTxHeader.MessageMarker=0;
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &pTxHeader, data);
}

uint8_t fdcanx_receive(hcan_t *hfdcan, uint32_t *rec_id, uint8_t *buf) {
 80008a4:	b5b0      	push	{r4, r5, r7, lr}
 80008a6:	b094      	sub	sp, #80	@ 0x50
 80008a8:	af06      	add	r7, sp, #24
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	FDCAN_RxHeaderTypeDef pRxHeader;
	// usart_printf("IM BEGGING UUUU\r\n");
	if(HAL_FDCAN_GetRxMessage(hfdcan ,FDCAN_RX_FIFO0, &pRxHeader, buf)==HAL_OK) {
 80008b0:	f107 0210 	add.w	r2, r7, #16
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2140      	movs	r1, #64	@ 0x40
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f009 fa6d 	bl	8009d98 <HAL_FDCAN_GetRxMessage>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d112      	bne.n	80008ea <fdcanx_receive+0x46>
		*rec_id = pRxHeader.Identifier;
 80008c4:	693a      	ldr	r2, [r7, #16]
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	601a      	str	r2, [r3, #0]
		return CANFD_GetRxHeaderDataLength(pRxHeader);
 80008ca:	466d      	mov	r5, sp
 80008cc:	f107 0420 	add.w	r4, r7, #32
 80008d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008e2:	f7ff ff47 	bl	8000774 <CANFD_GetRxHeaderDataLength>
 80008e6:	4603      	mov	r3, r0
 80008e8:	e000      	b.n	80008ec <fdcanx_receive+0x48>
	}
	return 0;
 80008ea:	2300      	movs	r3, #0
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3738      	adds	r7, #56	@ 0x38
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bdb0      	pop	{r4, r5, r7, pc}

080008f4 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08e      	sub	sp, #56	@ 0x38
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	6039      	str	r1, [r7, #0]
	uint8_t rx_data[8] = {0};
 80008fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
	uint32_t rec_id;
	uint8_t rxDecodeBuffer1[4] = {0};
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
	uint16_t rxDecodeBuffer2[4] = {0};
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
	fdcanx_receive(hfdcan, &rec_id, rx_data);
 8000916:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800091a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800091e:	4619      	mov	r1, r3
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff ffbf 	bl	80008a4 <fdcanx_receive>
	// usart_printf("%x\r\n", hfdcan);
	//usart_printf("CAN_Recv = %x %x %x %x %x %x %x %x\r\n", rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5], rx_data[6], rx_data[7]);
	if (hfdcan == &hfdcan1) {		// DJI motors
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4aa9      	ldr	r2, [pc, #676]	@ (8000bd0 <HAL_FDCAN_RxFifo0Callback+0x2dc>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d167      	bne.n	80009fe <HAL_FDCAN_RxFifo0Callback+0x10a>
		// usart_printf("PLEASEEEE :<\r\n");
		switch (rec_id) {
 800092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000930:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8000934:	d262      	bcs.n	80009fc <HAL_FDCAN_RxFifo0Callback+0x108>
 8000936:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800093a:	d819      	bhi.n	8000970 <HAL_FDCAN_RxFifo0Callback+0x7c>
 800093c:	2b7f      	cmp	r3, #127	@ 0x7f
 800093e:	d058      	beq.n	80009f2 <HAL_FDCAN_RxFifo0Callback+0xfe>
 8000940:	2b7f      	cmp	r3, #127	@ 0x7f
 8000942:	d35b      	bcc.n	80009fc <HAL_FDCAN_RxFifo0Callback+0x108>
 8000944:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000948:	d858      	bhi.n	80009fc <HAL_FDCAN_RxFifo0Callback+0x108>
 800094a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800094e:	d955      	bls.n	80009fc <HAL_FDCAN_RxFifo0Callback+0x108>
 8000950:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000954:	2b03      	cmp	r3, #3
 8000956:	d851      	bhi.n	80009fc <HAL_FDCAN_RxFifo0Callback+0x108>
 8000958:	a201      	add	r2, pc, #4	@ (adr r2, 8000960 <HAL_FDCAN_RxFifo0Callback+0x6c>)
 800095a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095e:	bf00      	nop
 8000960:	080009fd 	.word	0x080009fd
 8000964:	080009fd 	.word	0x080009fd
 8000968:	080009fd 	.word	0x080009fd
 800096c:	080009fd 	.word	0x080009fd
			case CAN_G2M3_ID:
			case CAN_G2M4_ID:
			case CAN_G3M1_ID:
			case CAN_G3M2_ID:
			case CAN_G3M3_ID: {
				uint8_t i = rec_id - CAN_G1M1_ID;  // get motor id
 8000970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000972:	b2db      	uxtb	r3, r3
 8000974:	3b01      	subs	r3, #1
 8000976:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
				get_motor_feedback(&motorFeedback[0][i], rx_data);
 800097a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800097e:	b21b      	sxth	r3, r3
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b21a      	sxth	r2, r3
 8000984:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000988:	b21b      	sxth	r3, r3
 800098a:	4313      	orrs	r3, r2
 800098c:	b21a      	sxth	r2, r3
 800098e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8000992:	b291      	uxth	r1, r2
 8000994:	4a8f      	ldr	r2, [pc, #572]	@ (8000bd4 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 8000996:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 800099a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800099e:	b21b      	sxth	r3, r3
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b219      	sxth	r1, r3
 80009a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80009ae:	430a      	orrs	r2, r1
 80009b0:	b211      	sxth	r1, r2
 80009b2:	4a88      	ldr	r2, [pc, #544]	@ (8000bd4 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	4413      	add	r3, r2
 80009b8:	460a      	mov	r2, r1
 80009ba:	805a      	strh	r2, [r3, #2]
 80009bc:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80009c0:	b21b      	sxth	r3, r3
 80009c2:	021b      	lsls	r3, r3, #8
 80009c4:	b219      	sxth	r1, r3
 80009c6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80009ca:	b21a      	sxth	r2, r3
 80009cc:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80009d0:	430a      	orrs	r2, r1
 80009d2:	b211      	sxth	r1, r2
 80009d4:	4a7f      	ldr	r2, [pc, #508]	@ (8000bd4 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	4413      	add	r3, r2
 80009da:	460a      	mov	r2, r1
 80009dc:	809a      	strh	r2, [r3, #4]
 80009de:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80009e2:	f897 1032 	ldrb.w	r1, [r7, #50]	@ 0x32
 80009e6:	4a7b      	ldr	r2, [pc, #492]	@ (8000bd4 <HAL_FDCAN_RxFifo0Callback+0x2e0>)
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	4413      	add	r3, r2
 80009ec:	460a      	mov	r2, r1
 80009ee:	719a      	strb	r2, [r3, #6]
				// usart_printf("balls\r\n");
				break;
 80009f0:	e005      	b.n	80009fe <HAL_FDCAN_RxFifo0Callback+0x10a>
			}
			case 0X7F:
				usart_printf("got something = %d\r\n", 0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	4878      	ldr	r0, [pc, #480]	@ (8000bd8 <HAL_FDCAN_RxFifo0Callback+0x2e4>)
 80009f6:	f000 fd5d 	bl	80014b4 <usart_printf>
				break;
 80009fa:	e000      	b.n	80009fe <HAL_FDCAN_RxFifo0Callback+0x10a>
				//memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
				break;
			}

			default: {
				break;
 80009fc:	bf00      	nop
			}
		}
	}
	if (hfdcan == &hfdcan2) {	//cybergear motors
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a76      	ldr	r2, [pc, #472]	@ (8000bdc <HAL_FDCAN_RxFifo0Callback+0x2e8>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d14a      	bne.n	8000a9c <HAL_FDCAN_RxFifo0Callback+0x1a8>

		rxDecodeBuffer1[0] = rec_id;				// [bit 0 - 15] Target Header ID
 8000a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		rxDecodeBuffer1[1] = rec_id >> 8;		// [bit 8 - 15] Motor ID
 8000a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a10:	0a1b      	lsrs	r3, r3, #8
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		rxDecodeBuffer1[2] = rec_id >> 16;		// [bit 16 - 23] Run Mode & Error Info
 8000a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a1a:	0c1b      	lsrs	r3, r3, #16
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		rxDecodeBuffer1[3] = rec_id >> 24;		// [bit 24 - 28] Communication Type
 8000a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a24:	0e1b      	lsrs	r3, r3, #24
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		rxDecodeBuffer2[0] = rx_data[0]<<8|rx_data[1];	// [byte 0 - 1] Angular Position (-4pi ~ 4pi)
 8000a2c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	021b      	lsls	r3, r3, #8
 8000a34:	b21a      	sxth	r2, r3
 8000a36:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	83bb      	strh	r3, [r7, #28]
		rxDecodeBuffer2[1] = rx_data[2]<<8|rx_data[3];	// [byte 2 - 3] Angular Velocity in Radians
 8000a44:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000a48:	b21b      	sxth	r3, r3
 8000a4a:	021b      	lsls	r3, r3, #8
 8000a4c:	b21a      	sxth	r2, r3
 8000a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	4313      	orrs	r3, r2
 8000a56:	b21b      	sxth	r3, r3
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	83fb      	strh	r3, [r7, #30]
		rxDecodeBuffer2[2] = rx_data[4]<<8|rx_data[5];	// [byte 4 - 5] Torque in Nm
 8000a5c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000a60:	b21b      	sxth	r3, r3
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	b21a      	sxth	r2, r3
 8000a66:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000a6a:	b21b      	sxth	r3, r3
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	b21b      	sxth	r3, r3
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	843b      	strh	r3, [r7, #32]
		rxDecodeBuffer2[3] = rx_data[6]<<8|rx_data[7];	// [byte 6 - 7] Temperature in x10C
 8000a74:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000a78:	b21b      	sxth	r3, r3
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b21b      	sxth	r3, r3
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	847b      	strh	r3, [r7, #34]	@ 0x22
		//usart_printf("CAN_Recv = %x %x %x %x %x %x %x %x\r\n", rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5], rx_data[6], rx_data[7]);
		//usart_printf("CAN_Recv = %d\r\n", rxDecodeBuffer2[0]);
		cybergear_rx_callback(rxDecodeBuffer1, rxDecodeBuffer2);
 8000a8c:	f107 021c 	add.w	r2, r7, #28
 8000a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fd46 	bl	8001528 <cybergear_rx_callback>
	}
	if (hfdcan == &hfdcan3) {	//b2b
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a50      	ldr	r2, [pc, #320]	@ (8000be0 <HAL_FDCAN_RxFifo0Callback+0x2ec>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	f040 8091 	bne.w	8000bc8 <HAL_FDCAN_RxFifo0Callback+0x2d4>
		switch (rec_id) {
 8000aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aa8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000aac:	2b04      	cmp	r3, #4
 8000aae:	f200 808a 	bhi.w	8000bc6 <HAL_FDCAN_RxFifo0Callback+0x2d2>
 8000ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ab8 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8000ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ab8:	08000bc7 	.word	0x08000bc7
 8000abc:	08000bc7 	.word	0x08000bc7
 8000ac0:	08000bc7 	.word	0x08000bc7
 8000ac4:	08000acd 	.word	0x08000acd
 8000ac8:	08000b7b 	.word	0x08000b7b
			case CAN_b2b_A_RC_Val_ID1: {
				// usart_printf("CAN_Recv = %x %x %x %x %x %x %x %x\r\n", rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5], rx_data[6], rx_data[7]);
				uint16_t Temparary[4] = {0, 0, 0, 0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]

				for (int8_t i = 0; i < 4; i++) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000adc:	e048      	b.n	8000b70 <HAL_FDCAN_RxFifo0Callback+0x27c>
					Temparary[i] = Temparary[i] + ((uint16_t)rx_data[2*i] << 0);
 8000ade:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	3338      	adds	r3, #56	@ 0x38
 8000ae6:	443b      	add	r3, r7
 8000ae8:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8000aec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000af0:	005b      	lsls	r3, r3, #1
 8000af2:	3338      	adds	r3, #56	@ 0x38
 8000af4:	443b      	add	r3, r7
 8000af6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000afa:	4619      	mov	r1, r3
 8000afc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000b00:	440a      	add	r2, r1
 8000b02:	b292      	uxth	r2, r2
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	3338      	adds	r3, #56	@ 0x38
 8000b08:	443b      	add	r3, r7
 8000b0a:	f823 2c24 	strh.w	r2, [r3, #-36]
					Temparary[i] = Temparary[i] + ((uint16_t)rx_data[(2*i)+1] << 8);
 8000b0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	3338      	adds	r3, #56	@ 0x38
 8000b16:	443b      	add	r3, r7
 8000b18:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8000b1c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	3301      	adds	r3, #1
 8000b24:	3338      	adds	r3, #56	@ 0x38
 8000b26:	443b      	add	r3, r7
 8000b28:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	b29a      	uxth	r2, r3
 8000b30:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000b34:	440a      	add	r2, r1
 8000b36:	b292      	uxth	r2, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	3338      	adds	r3, #56	@ 0x38
 8000b3c:	443b      	add	r3, r7
 8000b3e:	f823 2c24 	strh.w	r2, [r3, #-36]
					RCVAL[i] = ((int16_t)Temparary[i]) - 660;
 8000b42:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	3338      	adds	r3, #56	@ 0x38
 8000b4a:	443b      	add	r3, r7
 8000b4c:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8000b50:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8000b54:	b29a      	uxth	r2, r3
 8000b56:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000b5a:	b211      	sxth	r1, r2
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8000b5e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (int8_t i = 0; i < 4; i++) {
 8000b62:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	3301      	adds	r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000b70:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000b74:	2b03      	cmp	r3, #3
 8000b76:	ddb2      	ble.n	8000ade <HAL_FDCAN_RxFifo0Callback+0x1ea>
				}

				// usart_printf("%d %d %d %d\r\n", RCVAL[0], RCVAL[1], RCVAL[2], RCVAL[3]);
				break;
 8000b78:	e026      	b.n	8000bc8 <HAL_FDCAN_RxFifo0Callback+0x2d4>
			}
			case CAN_b2b_A_RC_Val_ID2: {
				uint16_t Temparary2[3] = {0, 0, 0};
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	81bb      	strh	r3, [r7, #12]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	81fb      	strh	r3, [r7, #14]
 8000b82:	2300      	movs	r3, #0
 8000b84:	823b      	strh	r3, [r7, #16]

				Temparary2[0] = (((uint16_t)rx_data[6] << 0) + ((uint16_t)rx_data[7] << 8));//-660;
 8000b86:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b29b      	uxth	r3, r3
 8000b94:	4413      	add	r3, r2
 8000b96:	b29b      	uxth	r3, r3
 8000b98:	81bb      	strh	r3, [r7, #12]
				Temparary2[1] = (uint16_t)rx_data[2] << 0;
 8000b9a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8000b9e:	81fb      	strh	r3, [r7, #14]
				Temparary2[2] = (uint16_t)rx_data[4] << 0;
 8000ba0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000ba4:	823b      	strh	r3, [r7, #16]

				//for (int8_t i = 0; i < 3; i++) {
				//	RCVAL[i+4] = ((int16_t)Temparary2[i]);
				//}
				RCVAL[4] = ((int16_t)Temparary2[0]) - 660;
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	f5a3 7325 	sub.w	r3, r3, #660	@ 0x294
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	b21a      	sxth	r2, r3
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8000be4 <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8000bb2:	811a      	strh	r2, [r3, #8]
				RCVAL[5] = ((int16_t)Temparary2[1]);
 8000bb4:	89fb      	ldrh	r3, [r7, #14]
 8000bb6:	b21a      	sxth	r2, r3
 8000bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000be4 <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8000bba:	815a      	strh	r2, [r3, #10]
				RCVAL[6] = ((int16_t)Temparary2[2]);
 8000bbc:	8a3b      	ldrh	r3, [r7, #16]
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	4b08      	ldr	r3, [pc, #32]	@ (8000be4 <HAL_FDCAN_RxFifo0Callback+0x2f0>)
 8000bc2:	819a      	strh	r2, [r3, #12]
				//usart_printf("num = %d \r\n", RCVAL[4]);
				break;
 8000bc4:	e000      	b.n	8000bc8 <HAL_FDCAN_RxFifo0Callback+0x2d4>
				//memcpy(&robot_status, &rx_data, 8);
				break;
			}

			default: {
				break;
 8000bc6:	bf00      	nop
			}
		}

	}
}
 8000bc8:	bf00      	nop
 8000bca:	3738      	adds	r7, #56	@ 0x38
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	2400096c 	.word	0x2400096c
 8000bd4:	240000c0 	.word	0x240000c0
 8000bd8:	080141b0 	.word	0x080141b0
 8000bdc:	24000a0c 	.word	0x24000a0c
 8000be0:	24000aac 	.word	0x24000aac
 8000be4:	24000080 	.word	0x24000080

08000be8 <getRCfakechannel>:

int16_t getRCfakechannel(uint8_t index) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
	return RCVAL[index];
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <getRCfakechannel+0x20>)
 8000bf6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	24000080 	.word	0x24000080

08000c0c <CAN_DriveMotor>:

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60b9      	str	r1, [r7, #8]
 8000c14:	4611      	mov	r1, r2
 8000c16:	461a      	mov	r2, r3
 8000c18:	4603      	mov	r3, r0
 8000c1a:	73fb      	strb	r3, [r7, #15]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	81bb      	strh	r3, [r7, #12]
 8000c20:	4613      	mov	r3, r2
 8000c22:	80fb      	strh	r3, [r7, #6]
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8000c24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c28:	121b      	asrs	r3, r3, #8
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b25      	ldr	r3, [pc, #148]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000c30:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8000c32:	89bb      	ldrh	r3, [r7, #12]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b23      	ldr	r3, [pc, #140]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000c38:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8000c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c3e:	121b      	asrs	r3, r3, #8
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000c46:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000c4e:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 8000c50:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000c54:	121b      	asrs	r3, r3, #8
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000c5c:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8000c5e:	8b3b      	ldrh	r3, [r7, #24]
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b18      	ldr	r3, [pc, #96]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000c64:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8000c66:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000c6a:	121b      	asrs	r3, r3, #8
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	b2da      	uxtb	r2, r3
 8000c70:	4b14      	ldr	r3, [pc, #80]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000c72:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8000c74:	8bbb      	ldrh	r3, [r7, #28]
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b12      	ldr	r3, [pc, #72]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000c7a:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d107      	bne.n	8000c92 <CAN_DriveMotor+0x86>
    	fdcanx_send_data(&hfdcan1, headerID, CAN_MotorSendBuffer, 8);
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	b299      	uxth	r1, r3
 8000c86:	2308      	movs	r3, #8
 8000c88:	4a0e      	ldr	r2, [pc, #56]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000c8a:	480f      	ldr	r0, [pc, #60]	@ (8000cc8 <CAN_DriveMotor+0xbc>)
 8000c8c:	f7ff fddf 	bl	800084e <fdcanx_send_data>
    	fdcanx_send_data(&hfdcan2, headerID, CAN_MotorSendBuffer, 8);
    } else if (bus == 3) {
    	fdcanx_send_data(&hfdcan3, headerID, CAN_MotorSendBuffer, 8);
    } else {      // do nothing
    }
}
 8000c90:	e014      	b.n	8000cbc <CAN_DriveMotor+0xb0>
    } else if (bus == 2) {
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2b02      	cmp	r3, #2
 8000c96:	d107      	bne.n	8000ca8 <CAN_DriveMotor+0x9c>
    	fdcanx_send_data(&hfdcan2, headerID, CAN_MotorSendBuffer, 8);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	b299      	uxth	r1, r3
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	4a09      	ldr	r2, [pc, #36]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000ca0:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <CAN_DriveMotor+0xc0>)
 8000ca2:	f7ff fdd4 	bl	800084e <fdcanx_send_data>
}
 8000ca6:	e009      	b.n	8000cbc <CAN_DriveMotor+0xb0>
    } else if (bus == 3) {
 8000ca8:	7bfb      	ldrb	r3, [r7, #15]
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d106      	bne.n	8000cbc <CAN_DriveMotor+0xb0>
    	fdcanx_send_data(&hfdcan3, headerID, CAN_MotorSendBuffer, 8);
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	b299      	uxth	r1, r3
 8000cb2:	2308      	movs	r3, #8
 8000cb4:	4a03      	ldr	r2, [pc, #12]	@ (8000cc4 <CAN_DriveMotor+0xb8>)
 8000cb6:	4806      	ldr	r0, [pc, #24]	@ (8000cd0 <CAN_DriveMotor+0xc4>)
 8000cb8:	f7ff fdc9 	bl	800084e <fdcanx_send_data>
}
 8000cbc:	bf00      	nop
 8000cbe:	3710      	adds	r7, #16
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	240002d0 	.word	0x240002d0
 8000cc8:	2400096c 	.word	0x2400096c
 8000ccc:	24000a0c 	.word	0x24000a0c
 8000cd0:	24000aac 	.word	0x24000aac

08000cd4 <CAN_setMotorCtrlVal>:

		}
	}
}

void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8000cd4:	b5b0      	push	{r4, r5, r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af02      	add	r7, sp, #8
 8000cda:	4604      	mov	r4, r0
 8000cdc:	4608      	mov	r0, r1
 8000cde:	4611      	mov	r1, r2
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	71fb      	strb	r3, [r7, #7]
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71bb      	strb	r3, [r7, #6]
 8000cea:	460b      	mov	r3, r1
 8000cec:	717b      	strb	r3, [r7, #5]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8000cf2:	79bb      	ldrb	r3, [r7, #6]
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	f000 8142 	beq.w	8000f7e <CAN_setMotorCtrlVal+0x2aa>
 8000cfa:	2b04      	cmp	r3, #4
 8000cfc:	f300 81e1 	bgt.w	80010c2 <CAN_setMotorCtrlVal+0x3ee>
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	dc02      	bgt.n	8000d0a <CAN_setMotorCtrlVal+0x36>
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	dc04      	bgt.n	8000d12 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8000d08:	e1db      	b.n	80010c2 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	f000 8097 	beq.w	8000e3e <CAN_setMotorCtrlVal+0x16a>
}
 8000d10:	e1d7      	b.n	80010c2 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000d12:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	dc02      	bgt.n	8000d20 <CAN_setMotorCtrlVal+0x4c>
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	dc05      	bgt.n	8000d2a <CAN_setMotorCtrlVal+0x56>
					break;
 8000d1e:	e08c      	b.n	8000e3a <CAN_setMotorCtrlVal+0x166>
 8000d20:	3b05      	subs	r3, #5
			switch(motorID) {
 8000d22:	2b03      	cmp	r3, #3
 8000d24:	f200 8089 	bhi.w	8000e3a <CAN_setMotorCtrlVal+0x166>
 8000d28:	e042      	b.n	8000db0 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	1e5a      	subs	r2, r3, #1
 8000d2e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d32:	1e59      	subs	r1, r3, #1
 8000d34:	48bd      	ldr	r0, [pc, #756]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009b      	lsls	r3, r3, #2
 8000d3e:	440b      	add	r3, r1
 8000d40:	887a      	ldrh	r2, [r7, #2]
 8000d42:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8000d46:	79fb      	ldrb	r3, [r7, #7]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	49b8      	ldr	r1, [pc, #736]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	00db      	lsls	r3, r3, #3
 8000d54:	440b      	add	r3, r1
 8000d56:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	1e5a      	subs	r2, r3, #1
 8000d5e:	49b3      	ldr	r1, [pc, #716]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	3302      	adds	r3, #2
 8000d6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	1e5a      	subs	r2, r3, #1
 8000d74:	49ad      	ldr	r1, [pc, #692]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000d76:	4613      	mov	r3, r2
 8000d78:	005b      	lsls	r3, r3, #1
 8000d7a:	4413      	add	r3, r2
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	440b      	add	r3, r1
 8000d80:	3304      	adds	r3, #4
 8000d82:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	1e5a      	subs	r2, r3, #1
 8000d8a:	48a8      	ldr	r0, [pc, #672]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	4403      	add	r3, r0
 8000d96:	3306      	adds	r3, #6
 8000d98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d9c:	79f8      	ldrb	r0, [r7, #7]
 8000d9e:	9301      	str	r3, [sp, #4]
 8000da0:	9100      	str	r1, [sp, #0]
 8000da2:	462b      	mov	r3, r5
 8000da4:	4622      	mov	r2, r4
 8000da6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000daa:	f7ff ff2f 	bl	8000c0c <CAN_DriveMotor>
					break;
 8000dae:	e045      	b.n	8000e3c <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8000db0:	79fb      	ldrb	r3, [r7, #7]
 8000db2:	1e5a      	subs	r2, r3, #1
 8000db4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000db8:	1f59      	subs	r1, r3, #5
 8000dba:	489c      	ldr	r0, [pc, #624]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	887a      	ldrh	r2, [r7, #2]
 8000dca:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	1e5a      	subs	r2, r3, #1
 8000dd2:	4996      	ldr	r1, [pc, #600]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	440b      	add	r3, r1
 8000dde:	3308      	adds	r3, #8
 8000de0:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	1e5a      	subs	r2, r3, #1
 8000de8:	4990      	ldr	r1, [pc, #576]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	440b      	add	r3, r1
 8000df4:	330a      	adds	r3, #10
 8000df6:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	498b      	ldr	r1, [pc, #556]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	00db      	lsls	r3, r3, #3
 8000e08:	440b      	add	r3, r1
 8000e0a:	330c      	adds	r3, #12
 8000e0c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	1e5a      	subs	r2, r3, #1
 8000e14:	4885      	ldr	r0, [pc, #532]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000e16:	4613      	mov	r3, r2
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	4413      	add	r3, r2
 8000e1c:	00db      	lsls	r3, r3, #3
 8000e1e:	4403      	add	r3, r0
 8000e20:	330e      	adds	r3, #14
 8000e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e26:	79f8      	ldrb	r0, [r7, #7]
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	9100      	str	r1, [sp, #0]
 8000e2c:	462b      	mov	r3, r5
 8000e2e:	4622      	mov	r2, r4
 8000e30:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000e34:	f7ff feea 	bl	8000c0c <CAN_DriveMotor>
					break;
 8000e38:	e000      	b.n	8000e3c <CAN_setMotorCtrlVal+0x168>
					break;
 8000e3a:	bf00      	nop
			break;
 8000e3c:	e141      	b.n	80010c2 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000e3e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e42:	2b08      	cmp	r3, #8
 8000e44:	f000 8097 	beq.w	8000f76 <CAN_setMotorCtrlVal+0x2a2>
 8000e48:	2b08      	cmp	r3, #8
 8000e4a:	f300 8096 	bgt.w	8000f7a <CAN_setMotorCtrlVal+0x2a6>
 8000e4e:	2b04      	cmp	r3, #4
 8000e50:	dc02      	bgt.n	8000e58 <CAN_setMotorCtrlVal+0x184>
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	dc05      	bgt.n	8000e62 <CAN_setMotorCtrlVal+0x18e>
					break;
 8000e56:	e090      	b.n	8000f7a <CAN_setMotorCtrlVal+0x2a6>
 8000e58:	3b05      	subs	r3, #5
			switch(motorID) {
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	f200 808d 	bhi.w	8000f7a <CAN_setMotorCtrlVal+0x2a6>
 8000e60:	e044      	b.n	8000eec <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	1e5a      	subs	r2, r3, #1
 8000e66:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e6a:	1e59      	subs	r1, r3, #1
 8000e6c:	486f      	ldr	r0, [pc, #444]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	440b      	add	r3, r1
 8000e78:	3304      	adds	r3, #4
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	4969      	ldr	r1, [pc, #420]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000e86:	4613      	mov	r3, r2
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	4413      	add	r3, r2
 8000e8c:	00db      	lsls	r3, r3, #3
 8000e8e:	440b      	add	r3, r1
 8000e90:	3308      	adds	r3, #8
 8000e92:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	1e5a      	subs	r2, r3, #1
 8000e9a:	4964      	ldr	r1, [pc, #400]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	4413      	add	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	440b      	add	r3, r1
 8000ea6:	330a      	adds	r3, #10
 8000ea8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	1e5a      	subs	r2, r3, #1
 8000eb0:	495e      	ldr	r1, [pc, #376]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	440b      	add	r3, r1
 8000ebc:	330c      	adds	r3, #12
 8000ebe:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	1e5a      	subs	r2, r3, #1
 8000ec6:	4859      	ldr	r0, [pc, #356]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000ec8:	4613      	mov	r3, r2
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	4413      	add	r3, r2
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	4403      	add	r3, r0
 8000ed2:	330e      	adds	r3, #14
 8000ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed8:	79f8      	ldrb	r0, [r7, #7]
 8000eda:	9301      	str	r3, [sp, #4]
 8000edc:	9100      	str	r1, [sp, #0]
 8000ede:	462b      	mov	r3, r5
 8000ee0:	4622      	mov	r2, r4
 8000ee2:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000ee6:	f7ff fe91 	bl	8000c0c <CAN_DriveMotor>
					break;
 8000eea:	e047      	b.n	8000f7c <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	1e5a      	subs	r2, r3, #1
 8000ef0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ef4:	1f59      	subs	r1, r3, #5
 8000ef6:	484d      	ldr	r0, [pc, #308]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000ef8:	4613      	mov	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	4413      	add	r3, r2
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	440b      	add	r3, r1
 8000f02:	3308      	adds	r3, #8
 8000f04:	887a      	ldrh	r2, [r7, #2]
 8000f06:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	4947      	ldr	r1, [pc, #284]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	440b      	add	r3, r1
 8000f1a:	3310      	adds	r3, #16
 8000f1c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	1e5a      	subs	r2, r3, #1
 8000f24:	4941      	ldr	r1, [pc, #260]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000f26:	4613      	mov	r3, r2
 8000f28:	005b      	lsls	r3, r3, #1
 8000f2a:	4413      	add	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	440b      	add	r3, r1
 8000f30:	3312      	adds	r3, #18
 8000f32:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	1e5a      	subs	r2, r3, #1
 8000f3a:	493c      	ldr	r1, [pc, #240]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	00db      	lsls	r3, r3, #3
 8000f44:	440b      	add	r3, r1
 8000f46:	3314      	adds	r3, #20
 8000f48:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	4836      	ldr	r0, [pc, #216]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000f52:	4613      	mov	r3, r2
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	4413      	add	r3, r2
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	4403      	add	r3, r0
 8000f5c:	3316      	adds	r3, #22
 8000f5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f62:	79f8      	ldrb	r0, [r7, #7]
 8000f64:	9301      	str	r3, [sp, #4]
 8000f66:	9100      	str	r1, [sp, #0]
 8000f68:	462b      	mov	r3, r5
 8000f6a:	4622      	mov	r2, r4
 8000f6c:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8000f70:	f7ff fe4c 	bl	8000c0c <CAN_DriveMotor>
					break;
 8000f74:	e002      	b.n	8000f7c <CAN_setMotorCtrlVal+0x2a8>
					break;
 8000f76:	bf00      	nop
 8000f78:	e0a3      	b.n	80010c2 <CAN_setMotorCtrlVal+0x3ee>
					break;
 8000f7a:	bf00      	nop
			break;
 8000f7c:	e0a1      	b.n	80010c2 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000f7e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f82:	2b08      	cmp	r3, #8
 8000f84:	f000 8099 	beq.w	80010ba <CAN_setMotorCtrlVal+0x3e6>
 8000f88:	2b08      	cmp	r3, #8
 8000f8a:	f300 8098 	bgt.w	80010be <CAN_setMotorCtrlVal+0x3ea>
 8000f8e:	2b04      	cmp	r3, #4
 8000f90:	dc02      	bgt.n	8000f98 <CAN_setMotorCtrlVal+0x2c4>
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	dc05      	bgt.n	8000fa2 <CAN_setMotorCtrlVal+0x2ce>
					break;
 8000f96:	e092      	b.n	80010be <CAN_setMotorCtrlVal+0x3ea>
 8000f98:	3b05      	subs	r3, #5
			switch(motorID) {
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	f200 808f 	bhi.w	80010be <CAN_setMotorCtrlVal+0x3ea>
 8000fa0:	e046      	b.n	8001030 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8000fa2:	79fb      	ldrb	r3, [r7, #7]
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000faa:	1e59      	subs	r1, r3, #1
 8000fac:	481f      	ldr	r0, [pc, #124]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	3304      	adds	r3, #4
 8000fba:	887a      	ldrh	r2, [r7, #2]
 8000fbc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000fc0:	79fb      	ldrb	r3, [r7, #7]
 8000fc2:	1e5a      	subs	r2, r3, #1
 8000fc4:	4919      	ldr	r1, [pc, #100]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	4413      	add	r3, r2
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	440b      	add	r3, r1
 8000fd0:	3308      	adds	r3, #8
 8000fd2:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	1e5a      	subs	r2, r3, #1
 8000fda:	4914      	ldr	r1, [pc, #80]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	440b      	add	r3, r1
 8000fe6:	330a      	adds	r3, #10
 8000fe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	1e5a      	subs	r2, r3, #1
 8000ff0:	490e      	ldr	r1, [pc, #56]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	440b      	add	r3, r1
 8000ffc:	330c      	adds	r3, #12
 8000ffe:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	1e5a      	subs	r2, r3, #1
 8001006:	4809      	ldr	r0, [pc, #36]	@ (800102c <CAN_setMotorCtrlVal+0x358>)
 8001008:	4613      	mov	r3, r2
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	4413      	add	r3, r2
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4403      	add	r3, r0
 8001012:	330e      	adds	r3, #14
 8001014:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001018:	79f8      	ldrb	r0, [r7, #7]
 800101a:	9301      	str	r3, [sp, #4]
 800101c:	9100      	str	r1, [sp, #0]
 800101e:	462b      	mov	r3, r5
 8001020:	4622      	mov	r2, r4
 8001022:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001026:	f7ff fdf1 	bl	8000c0c <CAN_DriveMotor>
					break;
 800102a:	e049      	b.n	80010c0 <CAN_setMotorCtrlVal+0x3ec>
 800102c:	24000090 	.word	0x24000090
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001038:	1f59      	subs	r1, r3, #5
 800103a:	4824      	ldr	r0, [pc, #144]	@ (80010cc <CAN_setMotorCtrlVal+0x3f8>)
 800103c:	4613      	mov	r3, r2
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	4413      	add	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	440b      	add	r3, r1
 8001046:	3308      	adds	r3, #8
 8001048:	887a      	ldrh	r2, [r7, #2]
 800104a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 800104e:	79fb      	ldrb	r3, [r7, #7]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	491e      	ldr	r1, [pc, #120]	@ (80010cc <CAN_setMotorCtrlVal+0x3f8>)
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	00db      	lsls	r3, r3, #3
 800105c:	440b      	add	r3, r1
 800105e:	3310      	adds	r3, #16
 8001060:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	1e5a      	subs	r2, r3, #1
 8001068:	4918      	ldr	r1, [pc, #96]	@ (80010cc <CAN_setMotorCtrlVal+0x3f8>)
 800106a:	4613      	mov	r3, r2
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	4413      	add	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	440b      	add	r3, r1
 8001074:	3312      	adds	r3, #18
 8001076:	f9b3 5000 	ldrsh.w	r5, [r3]
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	1e5a      	subs	r2, r3, #1
 800107e:	4913      	ldr	r1, [pc, #76]	@ (80010cc <CAN_setMotorCtrlVal+0x3f8>)
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	440b      	add	r3, r1
 800108a:	3314      	adds	r3, #20
 800108c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	1e5a      	subs	r2, r3, #1
 8001094:	480d      	ldr	r0, [pc, #52]	@ (80010cc <CAN_setMotorCtrlVal+0x3f8>)
 8001096:	4613      	mov	r3, r2
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4413      	add	r3, r2
 800109c:	00db      	lsls	r3, r3, #3
 800109e:	4403      	add	r3, r0
 80010a0:	3316      	adds	r3, #22
 80010a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a6:	79f8      	ldrb	r0, [r7, #7]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	9100      	str	r1, [sp, #0]
 80010ac:	462b      	mov	r3, r5
 80010ae:	4622      	mov	r2, r4
 80010b0:	f240 21fe 	movw	r1, #766	@ 0x2fe
 80010b4:	f7ff fdaa 	bl	8000c0c <CAN_DriveMotor>
					break;
 80010b8:	e002      	b.n	80010c0 <CAN_setMotorCtrlVal+0x3ec>
					break;
 80010ba:	bf00      	nop
 80010bc:	e000      	b.n	80010c0 <CAN_setMotorCtrlVal+0x3ec>
					break;
 80010be:	bf00      	nop
			break;
 80010c0:	bf00      	nop
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bdb0      	pop	{r4, r5, r7, pc}
 80010ca:	bf00      	nop
 80010cc:	24000090 	.word	0x24000090

080010d0 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d009      	beq.n	80010f6 <applyCtrlLimit+0x26>
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	dc29      	bgt.n	800113a <applyCtrlLimit+0x6a>
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	dc02      	bgt.n	80010f0 <applyCtrlLimit+0x20>
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	dc03      	bgt.n	80010f6 <applyCtrlLimit+0x26>
 80010ee:	e024      	b.n	800113a <applyCtrlLimit+0x6a>
 80010f0:	2b03      	cmp	r3, #3
 80010f2:	d00f      	beq.n	8001114 <applyCtrlLimit+0x44>
 80010f4:	e021      	b.n	800113a <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80010fc:	dd03      	ble.n	8001106 <applyCtrlLimit+0x36>
				val = 16384;
 80010fe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001102:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8001104:	e016      	b.n	8001134 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 800110c:	da12      	bge.n	8001134 <applyCtrlLimit+0x64>
				val = -16384;
 800110e:	4b0e      	ldr	r3, [pc, #56]	@ (8001148 <applyCtrlLimit+0x78>)
 8001110:	603b      	str	r3, [r7, #0]
			break;
 8001112:	e00f      	b.n	8001134 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800111a:	4293      	cmp	r3, r2
 800111c:	dd03      	ble.n	8001126 <applyCtrlLimit+0x56>
				val = 25000;
 800111e:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001122:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8001124:	e008      	b.n	8001138 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	4a08      	ldr	r2, [pc, #32]	@ (800114c <applyCtrlLimit+0x7c>)
 800112a:	4293      	cmp	r3, r2
 800112c:	da04      	bge.n	8001138 <applyCtrlLimit+0x68>
				val = -25000;
 800112e:	4b07      	ldr	r3, [pc, #28]	@ (800114c <applyCtrlLimit+0x7c>)
 8001130:	603b      	str	r3, [r7, #0]
			break;
 8001132:	e001      	b.n	8001138 <applyCtrlLimit+0x68>
			break;
 8001134:	bf00      	nop
 8001136:	e000      	b.n	800113a <applyCtrlLimit+0x6a>
			break;
 8001138:	bf00      	nop
		}
	}
	return val;
 800113a:	683b      	ldr	r3, [r7, #0]
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	ffffc000 	.word	0xffffc000
 800114c:	ffff9e58 	.word	0xffff9e58

08001150 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001150:	b590      	push	{r4, r7, lr}
 8001152:	b08b      	sub	sp, #44	@ 0x2c
 8001154:	af00      	add	r7, sp, #0
 8001156:	4604      	mov	r4, r0
 8001158:	4608      	mov	r0, r1
 800115a:	4611      	mov	r1, r2
 800115c:	461a      	mov	r2, r3
 800115e:	eef0 6a40 	vmov.f32	s13, s0
 8001162:	eeb0 7a60 	vmov.f32	s14, s1
 8001166:	eef0 7a41 	vmov.f32	s15, s2
 800116a:	4623      	mov	r3, r4
 800116c:	75fb      	strb	r3, [r7, #23]
 800116e:	4603      	mov	r3, r0
 8001170:	75bb      	strb	r3, [r7, #22]
 8001172:	460b      	mov	r3, r1
 8001174:	757b      	strb	r3, [r7, #21]
 8001176:	4613      	mov	r3, r2
 8001178:	827b      	strh	r3, [r7, #18]
 800117a:	edc7 6a01 	vstr	s13, [r7, #4]
 800117e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001182:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001186:	2300      	movs	r3, #0
 8001188:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 800118a:	7dfb      	ldrb	r3, [r7, #23]
 800118c:	3b01      	subs	r3, #1
 800118e:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8001190:	7dbb      	ldrb	r3, [r7, #22]
 8001192:	2b02      	cmp	r3, #2
 8001194:	dc02      	bgt.n	800119c <calcRPM_PID+0x4c>
 8001196:	2b00      	cmp	r3, #0
 8001198:	dc04      	bgt.n	80011a4 <calcRPM_PID+0x54>
 800119a:	e00d      	b.n	80011b8 <calcRPM_PID+0x68>
 800119c:	3b03      	subs	r3, #3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d80a      	bhi.n	80011b8 <calcRPM_PID+0x68>
 80011a2:	e004      	b.n	80011ae <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 80011a4:	7d7b      	ldrb	r3, [r7, #21]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011ac:	e009      	b.n	80011c2 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80011ae:	7d7b      	ldrb	r3, [r7, #21]
 80011b0:	3303      	adds	r3, #3
 80011b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011b6:	e004      	b.n	80011c2 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 80011b8:	7d7b      	ldrb	r3, [r7, #21]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80011c0:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 80011c2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80011c6:	7ffa      	ldrb	r2, [r7, #31]
 80011c8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80011cc:	4c70      	ldr	r4, [pc, #448]	@ (8001390 <calcRPM_PID+0x240>)
 80011ce:	4613      	mov	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	4413      	add	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	4403      	add	r3, r0
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4423      	add	r3, r4
 80011de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011e2:	7ffa      	ldrb	r2, [r7, #31]
 80011e4:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80011e8:	1ac9      	subs	r1, r1, r3
 80011ea:	4c6a      	ldr	r4, [pc, #424]	@ (8001394 <calcRPM_PID+0x244>)
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	4403      	add	r3, r0
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	4423      	add	r3, r4
 80011fc:	3304      	adds	r3, #4
 80011fe:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001200:	7ffa      	ldrb	r2, [r7, #31]
 8001202:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001206:	4863      	ldr	r0, [pc, #396]	@ (8001394 <calcRPM_PID+0x244>)
 8001208:	4613      	mov	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	4413      	add	r3, r2
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	440b      	add	r3, r1
 8001214:	011b      	lsls	r3, r3, #4
 8001216:	4403      	add	r3, r0
 8001218:	3308      	adds	r3, #8
 800121a:	6819      	ldr	r1, [r3, #0]
 800121c:	7ffa      	ldrb	r2, [r7, #31]
 800121e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001222:	4c5c      	ldr	r4, [pc, #368]	@ (8001394 <calcRPM_PID+0x244>)
 8001224:	4613      	mov	r3, r2
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	4413      	add	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	4403      	add	r3, r0
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	4423      	add	r3, r4
 8001234:	3304      	adds	r3, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	7ffa      	ldrb	r2, [r7, #31]
 800123a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800123e:	4419      	add	r1, r3
 8001240:	4c54      	ldr	r4, [pc, #336]	@ (8001394 <calcRPM_PID+0x244>)
 8001242:	4613      	mov	r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	4413      	add	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	4403      	add	r3, r0
 800124e:	011b      	lsls	r3, r3, #4
 8001250:	4423      	add	r3, r4
 8001252:	3308      	adds	r3, #8
 8001254:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8001256:	7ffa      	ldrb	r2, [r7, #31]
 8001258:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800125c:	484d      	ldr	r0, [pc, #308]	@ (8001394 <calcRPM_PID+0x244>)
 800125e:	4613      	mov	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	4413      	add	r3, r2
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	4413      	add	r3, r2
 8001268:	440b      	add	r3, r1
 800126a:	011b      	lsls	r3, r3, #4
 800126c:	4403      	add	r3, r0
 800126e:	6819      	ldr	r1, [r3, #0]
 8001270:	7ffa      	ldrb	r2, [r7, #31]
 8001272:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001276:	4c46      	ldr	r4, [pc, #280]	@ (8001390 <calcRPM_PID+0x240>)
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	4403      	add	r3, r0
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4423      	add	r3, r4
 8001288:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800128c:	7ffa      	ldrb	r2, [r7, #31]
 800128e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001292:	1ac9      	subs	r1, r1, r3
 8001294:	4c3f      	ldr	r4, [pc, #252]	@ (8001394 <calcRPM_PID+0x244>)
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	4403      	add	r3, r0
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4423      	add	r3, r4
 80012a6:	330c      	adds	r3, #12
 80012a8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 80012aa:	7ffa      	ldrb	r2, [r7, #31]
 80012ac:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80012b0:	4837      	ldr	r0, [pc, #220]	@ (8001390 <calcRPM_PID+0x240>)
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	440b      	add	r3, r1
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	4403      	add	r3, r0
 80012c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012c6:	7ffa      	ldrb	r2, [r7, #31]
 80012c8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80012cc:	461c      	mov	r4, r3
 80012ce:	4831      	ldr	r0, [pc, #196]	@ (8001394 <calcRPM_PID+0x244>)
 80012d0:	4613      	mov	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	4413      	add	r3, r2
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	4413      	add	r3, r2
 80012da:	440b      	add	r3, r1
 80012dc:	011b      	lsls	r3, r3, #4
 80012de:	4403      	add	r3, r0
 80012e0:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80012e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80012e6:	7ffa      	ldrb	r2, [r7, #31]
 80012e8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80012ec:	4829      	ldr	r0, [pc, #164]	@ (8001394 <calcRPM_PID+0x244>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4413      	add	r3, r2
 80012f8:	440b      	add	r3, r1
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	4403      	add	r3, r0
 80012fe:	3304      	adds	r3, #4
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	ee07 3a90 	vmov	s15, r3
 8001306:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800130a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800130e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001312:	7ffa      	ldrb	r2, [r7, #31]
 8001314:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001318:	481e      	ldr	r0, [pc, #120]	@ (8001394 <calcRPM_PID+0x244>)
 800131a:	4613      	mov	r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4413      	add	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	440b      	add	r3, r1
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4403      	add	r3, r0
 800132a:	3308      	adds	r3, #8
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800133a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800133e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001342:	7ffa      	ldrb	r2, [r7, #31]
 8001344:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001348:	4812      	ldr	r0, [pc, #72]	@ (8001394 <calcRPM_PID+0x244>)
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	4413      	add	r3, r2
 8001354:	440b      	add	r3, r1
 8001356:	011b      	lsls	r3, r3, #4
 8001358:	4403      	add	r3, r0
 800135a:	330c      	adds	r3, #12
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001366:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800136e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001372:	ee17 3a90 	vmov	r3, s15
 8001376:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001378:	7dbb      	ldrb	r3, [r7, #22]
 800137a:	6a39      	ldr	r1, [r7, #32]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fea7 	bl	80010d0 <applyCtrlLimit>
 8001382:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001384:	6a3b      	ldr	r3, [r7, #32]
}
 8001386:	4618      	mov	r0, r3
 8001388:	372c      	adds	r7, #44	@ 0x2c
 800138a:	46bd      	mov	sp, r7
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	bf00      	nop
 8001390:	240000c0 	.word	0x240000c0
 8001394:	24000170 	.word	0x24000170

08001398 <setMotorRPM>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001398:	b590      	push	{r4, r7, lr}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	4604      	mov	r4, r0
 80013a0:	4608      	mov	r0, r1
 80013a2:	4611      	mov	r1, r2
 80013a4:	461a      	mov	r2, r3
 80013a6:	eef0 6a40 	vmov.f32	s13, s0
 80013aa:	eeb0 7a60 	vmov.f32	s14, s1
 80013ae:	eef0 7a41 	vmov.f32	s15, s2
 80013b2:	4623      	mov	r3, r4
 80013b4:	75fb      	strb	r3, [r7, #23]
 80013b6:	4603      	mov	r3, r0
 80013b8:	75bb      	strb	r3, [r7, #22]
 80013ba:	460b      	mov	r3, r1
 80013bc:	757b      	strb	r3, [r7, #21]
 80013be:	4613      	mov	r3, r2
 80013c0:	827b      	strh	r3, [r7, #18]
 80013c2:	edc7 6a01 	vstr	s13, [r7, #4]
 80013c6:	ed87 7a02 	vstr	s14, [r7, #8]
 80013ca:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 80013ce:	edd7 6a01 	vldr	s13, [r7, #4]
 80013d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80013d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013da:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80013de:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80013e2:	7db9      	ldrb	r1, [r7, #22]
 80013e4:	7df8      	ldrb	r0, [r7, #23]
 80013e6:	eeb0 0a66 	vmov.f32	s0, s13
 80013ea:	eef0 0a47 	vmov.f32	s1, s14
 80013ee:	eeb0 1a67 	vmov.f32	s2, s15
 80013f2:	f7ff fead 	bl	8001150 <calcRPM_PID>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80013fe:	7db9      	ldrb	r1, [r7, #22]
 8001400:	7df8      	ldrb	r0, [r7, #23]
 8001402:	f7ff fc67 	bl	8000cd4 <CAN_setMotorCtrlVal>
}
 8001406:	bf00      	nop
 8001408:	371c      	adds	r7, #28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}
	...

08001410 <getMotorRPM>:
		}
	}
	return -1;
}

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
 800141a:	460b      	mov	r3, r1
 800141c:	71bb      	strb	r3, [r7, #6]
 800141e:	4613      	mov	r3, r2
 8001420:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8001422:	79bb      	ldrb	r3, [r7, #6]
 8001424:	2b02      	cmp	r3, #2
 8001426:	dc02      	bgt.n	800142e <getMotorRPM+0x1e>
 8001428:	2b00      	cmp	r3, #0
 800142a:	dc04      	bgt.n	8001436 <getMotorRPM+0x26>
 800142c:	e038      	b.n	80014a0 <getMotorRPM+0x90>
 800142e:	3b03      	subs	r3, #3
 8001430:	2b01      	cmp	r3, #1
 8001432:	d835      	bhi.n	80014a0 <getMotorRPM+0x90>
 8001434:	e018      	b.n	8001468 <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8001436:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800143a:	2b00      	cmp	r3, #0
 800143c:	dd2d      	ble.n	800149a <getMotorRPM+0x8a>
 800143e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001442:	2b08      	cmp	r3, #8
 8001444:	dc29      	bgt.n	800149a <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	1e5a      	subs	r2, r3, #1
 800144a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800144e:	1e59      	subs	r1, r3, #1
 8001450:	4817      	ldr	r0, [pc, #92]	@ (80014b0 <getMotorRPM+0xa0>)
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	440b      	add	r3, r1
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	4403      	add	r3, r0
 8001462:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001466:	e01d      	b.n	80014a4 <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8001468:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800146c:	2b00      	cmp	r3, #0
 800146e:	dd16      	ble.n	800149e <getMotorRPM+0x8e>
 8001470:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001474:	2b07      	cmp	r3, #7
 8001476:	dc12      	bgt.n	800149e <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	1e5a      	subs	r2, r3, #1
 800147c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001480:	1cd9      	adds	r1, r3, #3
 8001482:	480b      	ldr	r0, [pc, #44]	@ (80014b0 <getMotorRPM+0xa0>)
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4413      	add	r3, r2
 800148e:	440b      	add	r3, r1
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4403      	add	r3, r0
 8001494:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001498:	e004      	b.n	80014a4 <getMotorRPM+0x94>
			break;
 800149a:	bf00      	nop
 800149c:	e000      	b.n	80014a0 <getMotorRPM+0x90>
			}
			break;
 800149e:	bf00      	nop
		}
	}
	return -1;
 80014a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	240000c0 	.word	0x240000c0

080014b4 <usart_printf>:
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuff_2, 256);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuff_3, 256);
}

void usart_printf(const char *fmt,...)
{
 80014b4:	b40f      	push	{r0, r1, r2, r3}
 80014b6:	b580      	push	{r7, lr}
 80014b8:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80014ba:	f107 030c 	add.w	r3, r7, #12
 80014be:	4a0c      	ldr	r2, [pc, #48]	@ (80014f0 <usart_printf+0x3c>)
 80014c0:	6013      	str	r3, [r2, #0]

    //return length of string
    len = vsprintf((char *)tx_buf, fmt, ap);
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <usart_printf+0x3c>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	68b9      	ldr	r1, [r7, #8]
 80014c8:	480a      	ldr	r0, [pc, #40]	@ (80014f4 <usart_printf+0x40>)
 80014ca:	f012 f8e1 	bl	8013690 <vsiprintf>
 80014ce:	4603      	mov	r3, r0
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <usart_printf+0x44>)
 80014d4:	801a      	strh	r2, [r3, #0]

    va_end(ap);

    HAL_UART_Transmit_DMA(&huart3, tx_buf, len);
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <usart_printf+0x44>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4905      	ldr	r1, [pc, #20]	@ (80014f4 <usart_printf+0x40>)
 80014de:	4807      	ldr	r0, [pc, #28]	@ (80014fc <usart_printf+0x48>)
 80014e0:	f00e fcf8 	bl	800fed4 <HAL_UART_Transmit_DMA>

}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014ec:	b004      	add	sp, #16
 80014ee:	4770      	bx	lr
 80014f0:	240003d8 	.word	0x240003d8
 80014f4:	240003dc 	.word	0x240003dc
 80014f8:	240004dc 	.word	0x240004dc
 80014fc:	24000fdc 	.word	0x24000fdc

08001500 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuff_3, 256);
 800150c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001510:	4903      	ldr	r1, [pc, #12]	@ (8001520 <HAL_UARTEx_RxEventCallback+0x20>)
 8001512:	4804      	ldr	r0, [pc, #16]	@ (8001524 <HAL_UARTEx_RxEventCallback+0x24>)
 8001514:	f010 fd89 	bl	801202a <HAL_UARTEx_ReceiveToIdle_DMA>
	//usart_printf("data=%d \r\n", RxBuff_3[0]);
}
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	240002d8 	.word	0x240002d8
 8001524:	24000fdc 	.word	0x24000fdc

08001528 <cybergear_rx_callback>:
  * @brief          hal库CAN回调函数,接收电机数据
  * @param[in]      hcan:CAN句柄指针
  * @retval         none
  */

void cybergear_rx_callback(uint8_t rxBuffer1[4], uint16_t rxBuffer2[4]) {
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	uint8_t cybergear_rx_data[8] = {0};
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	2200      	movs	r2, #0
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	605a      	str	r2, [r3, #4]
	uint16_t cybergear_rec_id;
	uint8_t cybergear_rx_id = rxBuffer1[1];
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	785b      	ldrb	r3, [r3, #1]
 8001540:	75fb      	strb	r3, [r7, #23]
	float debug = 0;
 8001542:	f04f 0300 	mov.w	r3, #0
 8001546:	613b      	str	r3, [r7, #16]

	//fdcanx_receive(&hfdcan1, &cybergear_rec_id, cybergear_rx_data);
	//Motor_Can_ID=Get_Motor_ID(cybergear_rec_id);
	switch(cybergear_rx_id)                   //将对应ID电机信息提取至对应结构体
 8001548:	7dfb      	ldrb	r3, [r7, #23]
 800154a:	2b31      	cmp	r3, #49	@ 0x31
 800154c:	d019      	beq.n	8001582 <cybergear_rx_callback+0x5a>
 800154e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001550:	d14b      	bne.n	80015ea <cybergear_rx_callback+0xc2>
	    {
		case 0X7F:
				mi_motor[0].MCU_ID = rx_data[0];
 8001552:	4b28      	ldr	r3, [pc, #160]	@ (80015f4 <cybergear_rx_callback+0xcc>)
 8001554:	781a      	ldrb	r2, [r3, #0]
 8001556:	4b28      	ldr	r3, [pc, #160]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 8001558:	705a      	strb	r2, [r3, #1]
				mi_motor[0].Angle = rxBuffer2[0];   		 //todo: map 0~65535 to -4pi~4pi
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	881a      	ldrh	r2, [r3, #0]
 800155e:	4b26      	ldr	r3, [pc, #152]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 8001560:	805a      	strh	r2, [r3, #2]
				mi_motor[0].Speed = rxBuffer2[1]; 	 //todo: map 0~65535 to -30~30rad/s
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	885a      	ldrh	r2, [r3, #2]
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 8001568:	809a      	strh	r2, [r3, #4]
				mi_motor[0].Torque = rxBuffer2[2];  	 //todo: map 0~65535 to -12Nm~12Nm
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	889a      	ldrh	r2, [r3, #4]
 800156e:	4b22      	ldr	r3, [pc, #136]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 8001570:	80da      	strh	r2, [r3, #6]
				mi_motor[0].Temp = rxBuffer2[3];  					 //todo: map to x10 C
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	88da      	ldrh	r2, [r3, #6]
 8001576:	4b20      	ldr	r3, [pc, #128]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 8001578:	811a      	strh	r2, [r3, #8]
				mi_motor[0].error_code = rxBuffer1[2];
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	789a      	ldrb	r2, [r3, #2]
 800157e:	4b1e      	ldr	r3, [pc, #120]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 8001580:	741a      	strb	r2, [r3, #16]

		case 0x31:
				mi_motor[0].Angle = (rxBuffer2[0] - 32767);   		//todo: map 0~65535 to -4pi~4pi
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	881a      	ldrh	r2, [r3, #0]
 8001586:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <cybergear_rx_callback+0xd4>)
 8001588:	4413      	add	r3, r2
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b1a      	ldr	r3, [pc, #104]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 800158e:	805a      	strh	r2, [r3, #2]
				mi_motor[0].Speed = (rxBuffer2[1] - 32767)*30;    //todo: map 0~65535 to -30~30rad/s
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	3302      	adds	r3, #2
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	b29b      	uxth	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	0112      	lsls	r2, r2, #4
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b14      	ldr	r3, [pc, #80]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 80015a6:	809a      	strh	r2, [r3, #4]
				mi_motor[0].Torque = (rxBuffer2[2] - 32767)*12;   //todo: map 0~65535 to -12Nm~12Nm
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	3304      	adds	r3, #4
 80015ac:	881b      	ldrh	r3, [r3, #0]
 80015ae:	3301      	adds	r3, #1
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	0052      	lsls	r2, r2, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	4b0e      	ldr	r3, [pc, #56]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 80015be:	80da      	strh	r2, [r3, #6]
				mi_motor[0].Temp = rxBuffer2[3]/10;						//todo: map to x10 C
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	3306      	adds	r3, #6
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001600 <cybergear_rx_callback+0xd8>)
 80015c8:	fba2 2303 	umull	r2, r3, r2, r3
 80015cc:	08db      	lsrs	r3, r3, #3
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	4b09      	ldr	r3, [pc, #36]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 80015d2:	811a      	strh	r2, [r3, #8]
				mi_motor[0].error_code = rxBuffer1[2];
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	789a      	ldrb	r2, [r3, #2]
 80015d8:	4b07      	ldr	r3, [pc, #28]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 80015da:	741a      	strb	r2, [r3, #16]
				usart_printf("Recv in 0x31 = %d\r\n", mi_motor[0].Speed);
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <cybergear_rx_callback+0xd0>)
 80015de:	889b      	ldrh	r3, [r3, #4]
 80015e0:	4619      	mov	r1, r3
 80015e2:	4808      	ldr	r0, [pc, #32]	@ (8001604 <cybergear_rx_callback+0xdc>)
 80015e4:	f7ff ff66 	bl	80014b4 <usart_printf>
			break;
 80015e8:	e000      	b.n	80015ec <cybergear_rx_callback+0xc4>
		default:
			break;
 80015ea:	bf00      	nop
	}
}
 80015ec:	bf00      	nop
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	240004e0 	.word	0x240004e0
 80015f8:	240004e8 	.word	0x240004e8
 80015fc:	ffff8001 	.word	0xffff8001
 8001600:	cccccccd 	.word	0xcccccccd
 8001604:	080141c8 	.word	0x080141c8

08001608 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4a07      	ldr	r2, [pc, #28]	@ (8001634 <vApplicationGetIdleTaskMemory+0x2c>)
 8001618:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	4a06      	ldr	r2, [pc, #24]	@ (8001638 <vApplicationGetIdleTaskMemory+0x30>)
 800161e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2280      	movs	r2, #128	@ 0x80
 8001624:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	24000548 	.word	0x24000548
 8001638:	2400059c 	.word	0x2400059c

0800163c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800163c:	b5b0      	push	{r4, r5, r7, lr}
 800163e:	b08a      	sub	sp, #40	@ 0x28
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001642:	f003 f927 	bl	8004894 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001646:	f000 f8cf 	bl	80017e8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800164a:	f000 f93b 	bl	80018c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800164e:	f001 f915 	bl	800287c <MX_GPIO_Init>
  MX_DMA_Init();
 8001652:	f001 f8a3 	bl	800279c <MX_DMA_Init>
  MX_ADC1_Init();
 8001656:	f000 f967 	bl	8001928 <MX_ADC1_Init>
  MX_ADC2_Init();
 800165a:	f000 fa11 	bl	8001a80 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800165e:	f000 fa83 	bl	8001b68 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001662:	f000 fae5 	bl	8001c30 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8001666:	f000 fb49 	bl	8001cfc <MX_FDCAN3_Init>
  MX_I2C2_Init();
 800166a:	f000 fbad 	bl	8001dc8 <MX_I2C2_Init>
  MX_I2C4_Init();
 800166e:	f000 fbeb 	bl	8001e48 <MX_I2C4_Init>
  MX_OPAMP1_Init();
 8001672:	f000 fc29 	bl	8001ec8 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001676:	f000 fc49 	bl	8001f0c <MX_OPAMP2_Init>
  MX_TIM1_Init();
 800167a:	f000 fc67 	bl	8001f4c <MX_TIM1_Init>
  MX_TIM2_Init();
 800167e:	f000 fd35 	bl	80020ec <MX_TIM2_Init>
  MX_TIM3_Init();
 8001682:	f000 fda3 	bl	80021cc <MX_TIM3_Init>
  MX_TIM23_Init();
 8001686:	f000 fe1d 	bl	80022c4 <MX_TIM23_Init>
  MX_UART7_Init();
 800168a:	f000 feb5 	bl	80023f8 <MX_UART7_Init>
  MX_USART1_UART_Init();
 800168e:	f000 ff51 	bl	8002534 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001692:	f000 ff9b 	bl	80025cc <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001696:	f000 ffe5 	bl	8002664 <MX_USART3_UART_Init>
  MX_USART10_UART_Init();
 800169a:	f001 f82f 	bl	80026fc <MX_USART10_UART_Init>
  MX_UART8_Init();
 800169e:	f000 fefb 	bl	8002498 <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80016a2:	484c      	ldr	r0, [pc, #304]	@ (80017d4 <main+0x198>)
 80016a4:	f00d fa54 	bl	800eb50 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80016a8:	2100      	movs	r1, #0
 80016aa:	484a      	ldr	r0, [pc, #296]	@ (80017d4 <main+0x198>)
 80016ac:	f00d fb26 	bl	800ecfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80016b0:	2104      	movs	r1, #4
 80016b2:	4848      	ldr	r0, [pc, #288]	@ (80017d4 <main+0x198>)
 80016b4:	f00d fb22 	bl	800ecfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80016b8:	2108      	movs	r1, #8
 80016ba:	4846      	ldr	r0, [pc, #280]	@ (80017d4 <main+0x198>)
 80016bc:	f00d fb1e 	bl	800ecfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80016c0:	210c      	movs	r1, #12
 80016c2:	4844      	ldr	r0, [pc, #272]	@ (80017d4 <main+0x198>)
 80016c4:	f00d fb1a 	bl	800ecfc <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim23);
 80016c8:	4843      	ldr	r0, [pc, #268]	@ (80017d8 <main+0x19c>)
 80016ca:	f00d fa41 	bl	800eb50 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 80016ce:	2100      	movs	r1, #0
 80016d0:	4841      	ldr	r0, [pc, #260]	@ (80017d8 <main+0x19c>)
 80016d2:	f00d fb13 	bl	800ecfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_2);
 80016d6:	2104      	movs	r1, #4
 80016d8:	483f      	ldr	r0, [pc, #252]	@ (80017d8 <main+0x19c>)
 80016da:	f00d fb0f 	bl	800ecfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_3);
 80016de:	2108      	movs	r1, #8
 80016e0:	483d      	ldr	r0, [pc, #244]	@ (80017d8 <main+0x19c>)
 80016e2:	f00d fb0b 	bl	800ecfc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_4);
 80016e6:	210c      	movs	r1, #12
 80016e8:	483b      	ldr	r0, [pc, #236]	@ (80017d8 <main+0x19c>)
 80016ea:	f00d fb07 	bl	800ecfc <HAL_TIM_PWM_Start>
  uint16_t constant = 1000;
 80016ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t count = 100;
 80016f4:	2364      	movs	r3, #100	@ 0x64
 80016f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2104      	movs	r1, #4
 80016fc:	4837      	ldr	r0, [pc, #220]	@ (80017dc <main+0x1a0>)
 80016fe:	f009 fbe7 	bl	800aed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2108      	movs	r1, #8
 8001706:	4835      	ldr	r0, [pc, #212]	@ (80017dc <main+0x1a0>)
 8001708:	f009 fbe2 	bl	800aed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2110      	movs	r1, #16
 8001710:	4832      	ldr	r0, [pc, #200]	@ (80017dc <main+0x1a0>)
 8001712:	f009 fbdd 	bl	800aed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2120      	movs	r1, #32
 800171a:	4830      	ldr	r0, [pc, #192]	@ (80017dc <main+0x1a0>)
 800171c:	f009 fbd8 	bl	800aed0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2140      	movs	r1, #64	@ 0x40
 8001724:	482d      	ldr	r0, [pc, #180]	@ (80017dc <main+0x1a0>)
 8001726:	f009 fbd3 	bl	800aed0 <HAL_GPIO_WritePin>
  bsp_can_init();
 800172a:	f7fe ffd7 	bl	80006dc <bsp_can_init>
  //usart_Init();
  uint8_t CAN_Data = 125;
 800172e:	237d      	movs	r3, #125	@ 0x7d
 8001730:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t CAN_State = -1;
 8001734:	23ff      	movs	r3, #255	@ 0xff
 8001736:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 800173a:	4b29      	ldr	r3, [pc, #164]	@ (80017e0 <main+0x1a4>)
 800173c:	1d3c      	adds	r4, r7, #4
 800173e:	461d      	mov	r5, r3
 8001740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f010 fd2c 	bl	80121ae <osThreadCreate>
 8001756:	4603      	mov	r3, r0
 8001758:	4a22      	ldr	r2, [pc, #136]	@ (80017e4 <main+0x1a8>)
 800175a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800175c:	f010 fd20 	bl	80121a0 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, count);
 8001760:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <main+0x198>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001766:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, count);
 8001768:	4b1a      	ldr	r3, [pc, #104]	@ (80017d4 <main+0x198>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800176e:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, count);
 8001770:	4b18      	ldr	r3, [pc, #96]	@ (80017d4 <main+0x198>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001776:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, count);
 8001778:	4b16      	ldr	r3, [pc, #88]	@ (80017d4 <main+0x198>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800177e:	641a      	str	r2, [r3, #64]	@ 0x40

	  __HAL_TIM_SetCompare(&htim23, TIM_CHANNEL_1, constant);
 8001780:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <main+0x19c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001786:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SetCompare(&htim23, TIM_CHANNEL_2, constant);
 8001788:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <main+0x19c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800178e:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SetCompare(&htim23, TIM_CHANNEL_3, constant);
 8001790:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <main+0x19c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001796:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SetCompare(&htim23, TIM_CHANNEL_4, constant);
 8001798:	4b0f      	ldr	r3, [pc, #60]	@ (80017d8 <main+0x19c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800179e:	641a      	str	r2, [r3, #64]	@ 0x40
	  //count++;
	  if(count > 100) {
 80017a0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80017a2:	2b64      	cmp	r3, #100	@ 0x64
 80017a4:	d901      	bls.n	80017aa <main+0x16e>
		  count = 10;
 80017a6:	230a      	movs	r3, #10
 80017a8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);

	  //HAL_Delay(50);


	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 80017aa:	2104      	movs	r1, #4
 80017ac:	480b      	ldr	r0, [pc, #44]	@ (80017dc <main+0x1a0>)
 80017ae:	f009 fba8 	bl	800af02 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80017b2:	2108      	movs	r1, #8
 80017b4:	4809      	ldr	r0, [pc, #36]	@ (80017dc <main+0x1a0>)
 80017b6:	f009 fba4 	bl	800af02 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80017ba:	2110      	movs	r1, #16
 80017bc:	4807      	ldr	r0, [pc, #28]	@ (80017dc <main+0x1a0>)
 80017be:	f009 fba0 	bl	800af02 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 80017c2:	2120      	movs	r1, #32
 80017c4:	4805      	ldr	r0, [pc, #20]	@ (80017dc <main+0x1a0>)
 80017c6:	f009 fb9c 	bl	800af02 <HAL_GPIO_TogglePin>
	  //HAL_UART_Transmit(&huart2, "UART 2", 6, 100);
	  //HAL_UART_Transmit(&huart3, "UART 3", 6, 100); //use this for debugging
	  //CAN_State = fdcanx_send_data(&hfdcan1, 0x01, &CAN_Data, 8);
	  //usart_printf("CAN_State=%d \r\n", CAN_State);

	  HAL_Delay(500);
 80017ca:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017ce:	f003 f8f3 	bl	80049b8 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, count);
 80017d2:	e7c5      	b.n	8001760 <main+0x124>
 80017d4:	24000c5c 	.word	0x24000c5c
 80017d8:	24000d40 	.word	0x24000d40
 80017dc:	58021000 	.word	0x58021000
 80017e0:	080141e8 	.word	0x080141e8
 80017e4:	2400144c 	.word	0x2400144c

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b09c      	sub	sp, #112	@ 0x70
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017f2:	224c      	movs	r2, #76	@ 0x4c
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f011 ff54 	bl	80136a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2220      	movs	r2, #32
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f011 ff4e 	bl	80136a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001808:	2002      	movs	r0, #2
 800180a:	f009 fdc3 	bl	800b394 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b2b      	ldr	r3, [pc, #172]	@ (80018c0 <SystemClock_Config+0xd8>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	4a2a      	ldr	r2, [pc, #168]	@ (80018c0 <SystemClock_Config+0xd8>)
 8001818:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800181c:	6193      	str	r3, [r2, #24]
 800181e:	4b28      	ldr	r3, [pc, #160]	@ (80018c0 <SystemClock_Config+0xd8>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800182a:	bf00      	nop
 800182c:	4b24      	ldr	r3, [pc, #144]	@ (80018c0 <SystemClock_Config+0xd8>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001834:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001838:	d1f8      	bne.n	800182c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183a:	2301      	movs	r3, #1
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800183e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001844:	2302      	movs	r3, #2
 8001846:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001848:	2302      	movs	r3, #2
 800184a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800184c:	2301      	movs	r3, #1
 800184e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001850:	2340      	movs	r3, #64	@ 0x40
 8001852:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 3;
 8001854:	2303      	movs	r3, #3
 8001856:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001858:	2306      	movs	r3, #6
 800185a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800185c:	2302      	movs	r3, #2
 800185e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001860:	230c      	movs	r3, #12
 8001862:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001864:	2300      	movs	r3, #0
 8001866:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001870:	4618      	mov	r0, r3
 8001872:	f009 fdc9 	bl	800b408 <HAL_RCC_OscConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800187c:	f001 fd46 	bl	800330c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001880:	233f      	movs	r3, #63	@ 0x3f
 8001882:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001884:	2303      	movs	r3, #3
 8001886:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001888:	2300      	movs	r3, #0
 800188a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800188c:	2300      	movs	r3, #0
 800188e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001890:	2340      	movs	r3, #64	@ 0x40
 8001892:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001894:	2340      	movs	r3, #64	@ 0x40
 8001896:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001898:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800189c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800189e:	2340      	movs	r3, #64	@ 0x40
 80018a0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2103      	movs	r1, #3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f00a f988 	bl	800bbbc <HAL_RCC_ClockConfig>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80018b2:	f001 fd2b 	bl	800330c <Error_Handler>
  }
}
 80018b6:	bf00      	nop
 80018b8:	3770      	adds	r7, #112	@ 0x70
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	58024800 	.word	0x58024800

080018c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b0ae      	sub	sp, #184	@ 0xb8
 80018c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018ca:	463b      	mov	r3, r7
 80018cc:	22b8      	movs	r2, #184	@ 0xb8
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f011 fee7 	bl	80136a4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 80018d6:	f44f 2208 	mov.w	r2, #557056	@ 0x88000
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80018e2:	2301      	movs	r3, #1
 80018e4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 21;
 80018e6:	2315      	movs	r3, #21
 80018e8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80018ea:	2302      	movs	r3, #2
 80018ec:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80018ee:	2302      	movs	r3, #2
 80018f0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80018f2:	2302      	movs	r3, #2
 80018f4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80018f6:	23c0      	movs	r3, #192	@ 0xc0
 80018f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001902:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001906:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800190e:	463b      	mov	r3, r7
 8001910:	4618      	mov	r0, r3
 8001912:	f00a fcdf 	bl	800c2d4 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800191c:	f001 fcf6 	bl	800330c <Error_Handler>
  }
}
 8001920:	bf00      	nop
 8001922:	37b8      	adds	r7, #184	@ 0xb8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08c      	sub	sp, #48	@ 0x30
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800192e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800193a:	463b      	mov	r3, r7
 800193c:	2224      	movs	r2, #36	@ 0x24
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f011 feaf 	bl	80136a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001946:	4b48      	ldr	r3, [pc, #288]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001948:	4a48      	ldr	r2, [pc, #288]	@ (8001a6c <MX_ADC1_Init+0x144>)
 800194a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 800194c:	4b46      	ldr	r3, [pc, #280]	@ (8001a68 <MX_ADC1_Init+0x140>)
 800194e:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 8001952:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001954:	4b44      	ldr	r3, [pc, #272]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001956:	2200      	movs	r2, #0
 8001958:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800195a:	4b43      	ldr	r3, [pc, #268]	@ (8001a68 <MX_ADC1_Init+0x140>)
 800195c:	2201      	movs	r2, #1
 800195e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001960:	4b41      	ldr	r3, [pc, #260]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001962:	2204      	movs	r2, #4
 8001964:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001966:	4b40      	ldr	r3, [pc, #256]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001968:	2200      	movs	r2, #0
 800196a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800196c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a68 <MX_ADC1_Init+0x140>)
 800196e:	2201      	movs	r2, #1
 8001970:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001972:	4b3d      	ldr	r3, [pc, #244]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001974:	2204      	movs	r2, #4
 8001976:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001978:	4b3b      	ldr	r3, [pc, #236]	@ (8001a68 <MX_ADC1_Init+0x140>)
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001980:	4b39      	ldr	r3, [pc, #228]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001982:	2200      	movs	r2, #0
 8001984:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001986:	4b38      	ldr	r3, [pc, #224]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001988:	2200      	movs	r2, #0
 800198a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800198c:	4b36      	ldr	r3, [pc, #216]	@ (8001a68 <MX_ADC1_Init+0x140>)
 800198e:	2203      	movs	r2, #3
 8001990:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001992:	4b35      	ldr	r3, [pc, #212]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001994:	2200      	movs	r2, #0
 8001996:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001998:	4b33      	ldr	r3, [pc, #204]	@ (8001a68 <MX_ADC1_Init+0x140>)
 800199a:	2200      	movs	r2, #0
 800199c:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800199e:	4b32      	ldr	r3, [pc, #200]	@ (8001a68 <MX_ADC1_Init+0x140>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80019a6:	4b30      	ldr	r3, [pc, #192]	@ (8001a68 <MX_ADC1_Init+0x140>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019ac:	482e      	ldr	r0, [pc, #184]	@ (8001a68 <MX_ADC1_Init+0x140>)
 80019ae:	f003 fb19 	bl	8004fe4 <HAL_ADC_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80019b8:	f001 fca8 	bl	800330c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4828      	ldr	r0, [pc, #160]	@ (8001a68 <MX_ADC1_Init+0x140>)
 80019c8:	f004 fe68 	bl	800669c <HAL_ADCEx_MultiModeConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80019d2:	f001 fc9b 	bl	800330c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019d6:	4b26      	ldr	r3, [pc, #152]	@ (8001a70 <MX_ADC1_Init+0x148>)
 80019d8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019da:	2306      	movs	r3, #6
 80019dc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80019de:	2304      	movs	r3, #4
 80019e0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019e2:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80019e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019e8:	2304      	movs	r3, #4
 80019ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019f6:	463b      	mov	r3, r7
 80019f8:	4619      	mov	r1, r3
 80019fa:	481b      	ldr	r0, [pc, #108]	@ (8001a68 <MX_ADC1_Init+0x140>)
 80019fc:	f003 fdf4 	bl	80055e8 <HAL_ADC_ConfigChannel>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001a06:	f001 fc81 	bl	800330c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <MX_ADC1_Init+0x14c>)
 8001a0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a0e:	230c      	movs	r3, #12
 8001a10:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a12:	463b      	mov	r3, r7
 8001a14:	4619      	mov	r1, r3
 8001a16:	4814      	ldr	r0, [pc, #80]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001a18:	f003 fde6 	bl	80055e8 <HAL_ADC_ConfigChannel>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001a22:	f001 fc73 	bl	800330c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a26:	4b14      	ldr	r3, [pc, #80]	@ (8001a78 <MX_ADC1_Init+0x150>)
 8001a28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a2a:	2312      	movs	r3, #18
 8001a2c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a2e:	463b      	mov	r3, r7
 8001a30:	4619      	mov	r1, r3
 8001a32:	480d      	ldr	r0, [pc, #52]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001a34:	f003 fdd8 	bl	80055e8 <HAL_ADC_ConfigChannel>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001a3e:	f001 fc65 	bl	800330c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <MX_ADC1_Init+0x154>)
 8001a44:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a46:	2318      	movs	r3, #24
 8001a48:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a4a:	463b      	mov	r3, r7
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4806      	ldr	r0, [pc, #24]	@ (8001a68 <MX_ADC1_Init+0x140>)
 8001a50:	f003 fdca 	bl	80055e8 <HAL_ADC_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001a5a:	f001 fc57 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a5e:	bf00      	nop
 8001a60:	3730      	adds	r7, #48	@ 0x30
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2400079c 	.word	0x2400079c
 8001a6c:	40022000 	.word	0x40022000
 8001a70:	10c00010 	.word	0x10c00010
 8001a74:	08600004 	.word	0x08600004
 8001a78:	0c900008 	.word	0x0c900008
 8001a7c:	14f00020 	.word	0x14f00020

08001a80 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	@ 0x28
 8001a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a86:	1d3b      	adds	r3, r7, #4
 8001a88:	2224      	movs	r2, #36	@ 0x24
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f011 fe09 	bl	80136a4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001a92:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001a94:	4a32      	ldr	r2, [pc, #200]	@ (8001b60 <MX_ADC2_Init+0xe0>)
 8001a96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8001a98:	4b30      	ldr	r3, [pc, #192]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001a9a:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 8001a9e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aac:	4b2b      	ldr	r3, [pc, #172]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001aae:	2204      	movs	r2, #4
 8001ab0:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 8001abe:	4b27      	ldr	r3, [pc, #156]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001ac0:	2202      	movs	r2, #2
 8001ac2:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ac4:	4b25      	ldr	r3, [pc, #148]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001acc:	4b23      	ldr	r3, [pc, #140]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ad2:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001ad8:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001ada:	2203      	movs	r2, #3
 8001adc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ade:	4b1f      	ldr	r3, [pc, #124]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001af8:	4818      	ldr	r0, [pc, #96]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001afa:	f003 fa73 	bl	8004fe4 <HAL_ADC_Init>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001b04:	f001 fc02 	bl	800330c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_ADC2_Init+0xe4>)
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b0c:	2306      	movs	r3, #6
 8001b0e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001b10:	2303      	movs	r3, #3
 8001b12:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b14:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001b18:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480b      	ldr	r0, [pc, #44]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001b2e:	f003 fd5b 	bl	80055e8 <HAL_ADC_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8001b38:	f001 fbe8 	bl	800330c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b40:	1d3b      	adds	r3, r7, #4
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	@ (8001b5c <MX_ADC2_Init+0xdc>)
 8001b46:	f003 fd4f 	bl	80055e8 <HAL_ADC_ConfigChannel>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001b50:	f001 fbdc 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3728      	adds	r7, #40	@ 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2400080c 	.word	0x2400080c
 8001b60:	40022100 	.word	0x40022100
 8001b64:	08600004 	.word	0x08600004

08001b68 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b6c:	4b2e      	ldr	r3, [pc, #184]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001b6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001c2c <MX_FDCAN1_Init+0xc4>)
 8001b70:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b72:	4b2d      	ldr	r3, [pc, #180]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b78:	4b2b      	ldr	r3, [pc, #172]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b8a:	4b27      	ldr	r3, [pc, #156]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8001b90:	4b25      	ldr	r3, [pc, #148]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001b92:	2206      	movs	r2, #6
 8001b94:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 5;
 8001b96:	4b24      	ldr	r3, [pc, #144]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001b98:	2205      	movs	r2, #5
 8001b9a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001b9c:	4b22      	ldr	r3, [pc, #136]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001b9e:	220f      	movs	r2, #15
 8001ba0:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001ba2:	4b21      	ldr	r3, [pc, #132]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 6;
 8001ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001baa:	2206      	movs	r2, #6
 8001bac:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8001bae:	4b1e      	ldr	r3, [pc, #120]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001bba:	4b1b      	ldr	r3, [pc, #108]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bbc:	2205      	movs	r2, #5
 8001bbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001bc6:	4b18      	ldr	r3, [pc, #96]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001bcc:	4b16      	ldr	r3, [pc, #88]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8001bd2:	4b15      	ldr	r3, [pc, #84]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001bd8:	4b13      	ldr	r3, [pc, #76]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bda:	2204      	movs	r2, #4
 8001bdc:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 8001bde:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001be0:	2204      	movs	r2, #4
 8001be2:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001be4:	4b10      	ldr	r3, [pc, #64]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001be6:	2204      	movs	r2, #4
 8001be8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8001bea:	4b0f      	ldr	r3, [pc, #60]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bec:	2204      	movs	r2, #4
 8001bee:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001bf0:	4b0d      	ldr	r3, [pc, #52]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bf8:	2204      	movs	r2, #4
 8001bfa:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 8;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001bfe:	2208      	movs	r2, #8
 8001c00:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 8001c02:	4b09      	ldr	r3, [pc, #36]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001c04:	2208      	movs	r2, #8
 8001c06:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c08:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001c10:	2204      	movs	r2, #4
 8001c12:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c14:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <MX_FDCAN1_Init+0xc0>)
 8001c16:	f007 fd6b 	bl	80096f0 <HAL_FDCAN_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001c20:	f001 fb74 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2400096c 	.word	0x2400096c
 8001c2c:	4000a000 	.word	0x4000a000

08001c30 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001c34:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c36:	4a30      	ldr	r2, [pc, #192]	@ (8001cf8 <MX_FDCAN2_Init+0xc8>)
 8001c38:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001c40:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001c46:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001c4c:	4b29      	ldr	r3, [pc, #164]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001c52:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8001c58:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c5a:	2206      	movs	r2, #6
 8001c5c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 5;
 8001c5e:	4b25      	ldr	r3, [pc, #148]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c60:	2205      	movs	r2, #5
 8001c62:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 15;
 8001c64:	4b23      	ldr	r3, [pc, #140]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c66:	220f      	movs	r2, #15
 8001c68:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001c6a:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c6c:	2205      	movs	r2, #5
 8001c6e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 6;
 8001c70:	4b20      	ldr	r3, [pc, #128]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c72:	2206      	movs	r2, #6
 8001c74:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 5;
 8001c76:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c78:	2205      	movs	r2, #5
 8001c7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 15;
 8001c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c7e:	220f      	movs	r2, #15
 8001c80:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 5;
 8001c82:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c84:	2205      	movs	r2, #5
 8001c86:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0x406;
 8001c88:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c8a:	f240 4206 	movw	r2, #1030	@ 0x406
 8001c8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8001c90:	4b18      	ldr	r3, [pc, #96]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 4;
 8001c9c:	4b15      	ldr	r3, [pc, #84]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001ca2:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001ca4:	2204      	movs	r2, #4
 8001ca6:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 4;
 8001ca8:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001caa:	2204      	movs	r2, #4
 8001cac:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001cae:	4b11      	ldr	r3, [pc, #68]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001cb0:	2204      	movs	r2, #4
 8001cb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 4;
 8001cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001cb6:	2204      	movs	r2, #4
 8001cb8:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001cba:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001cbc:	2204      	movs	r2, #4
 8001cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 4;
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 8;
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001cc8:	2208      	movs	r2, #8
 8001cca:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 8;
 8001ccc:	4b09      	ldr	r3, [pc, #36]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001cce:	2208      	movs	r2, #8
 8001cd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001cd2:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001cd8:	4b06      	ldr	r3, [pc, #24]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001cda:	2204      	movs	r2, #4
 8001cdc:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001cde:	4805      	ldr	r0, [pc, #20]	@ (8001cf4 <MX_FDCAN2_Init+0xc4>)
 8001ce0:	f007 fd06 	bl	80096f0 <HAL_FDCAN_Init>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8001cea:	f001 fb0f 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	24000a0c 	.word	0x24000a0c
 8001cf8:	4000a400 	.word	0x4000a400

08001cfc <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d00:	4b2f      	ldr	r3, [pc, #188]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d02:	4a30      	ldr	r2, [pc, #192]	@ (8001dc4 <MX_FDCAN3_Init+0xc8>)
 8001d04:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d06:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d0c:	4b2c      	ldr	r3, [pc, #176]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d12:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d18:	4b29      	ldr	r3, [pc, #164]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8001d24:	4b26      	ldr	r3, [pc, #152]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d26:	2206      	movs	r2, #6
 8001d28:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 5;
 8001d2a:	4b25      	ldr	r3, [pc, #148]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d2c:	2205      	movs	r2, #5
 8001d2e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 8001d30:	4b23      	ldr	r3, [pc, #140]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d32:	220f      	movs	r2, #15
 8001d34:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8001d36:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d38:	2205      	movs	r2, #5
 8001d3a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 6;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d3e:	2206      	movs	r2, #6
 8001d40:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 5;
 8001d42:	4b1f      	ldr	r3, [pc, #124]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d44:	2205      	movs	r2, #5
 8001d46:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 15;
 8001d48:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 5;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d50:	2205      	movs	r2, #5
 8001d52:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0x812;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d56:	f640 0212 	movw	r2, #2066	@ 0x812
 8001d5a:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8001d5c:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001d62:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 4;
 8001d68:	4b15      	ldr	r3, [pc, #84]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001d6e:	4b14      	ldr	r3, [pc, #80]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d70:	2204      	movs	r2, #4
 8001d72:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 4;
 8001d74:	4b12      	ldr	r3, [pc, #72]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d76:	2204      	movs	r2, #4
 8001d78:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001d7a:	4b11      	ldr	r3, [pc, #68]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 4;
 8001d80:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d82:	2204      	movs	r2, #4
 8001d84:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d88:	2204      	movs	r2, #4
 8001d8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 4;
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d8e:	2204      	movs	r2, #4
 8001d90:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 8;
 8001d92:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d94:	2208      	movs	r2, #8
 8001d96:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 8;
 8001d98:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001d9a:	2208      	movs	r2, #8
 8001d9c:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001d9e:	4b08      	ldr	r3, [pc, #32]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001da6:	2204      	movs	r2, #4
 8001da8:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001daa:	4805      	ldr	r0, [pc, #20]	@ (8001dc0 <MX_FDCAN3_Init+0xc4>)
 8001dac:	f007 fca0 	bl	80096f0 <HAL_FDCAN_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 8001db6:	f001 faa9 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	24000aac 	.word	0x24000aac
 8001dc4:	4000d400 	.word	0x4000d400

08001dc8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001dcc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001dce:	4a1c      	ldr	r2, [pc, #112]	@ (8001e40 <MX_I2C2_Init+0x78>)
 8001dd0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e44 <MX_I2C2_Init+0x7c>)
 8001dd6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dd8:	4b18      	ldr	r3, [pc, #96]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001dde:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001de4:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dea:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dfc:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e02:	480e      	ldr	r0, [pc, #56]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001e04:	f009 f898 	bl	800af38 <HAL_I2C_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e0e:	f001 fa7d 	bl	800330c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e12:	2100      	movs	r1, #0
 8001e14:	4809      	ldr	r0, [pc, #36]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001e16:	f009 f92b 	bl	800b070 <HAL_I2CEx_ConfigAnalogFilter>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e20:	f001 fa74 	bl	800330c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e24:	2100      	movs	r1, #0
 8001e26:	4805      	ldr	r0, [pc, #20]	@ (8001e3c <MX_I2C2_Init+0x74>)
 8001e28:	f009 f96d 	bl	800b106 <HAL_I2CEx_ConfigDigitalFilter>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e32:	f001 fa6b 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	24000b4c 	.word	0x24000b4c
 8001e40:	40005800 	.word	0x40005800
 8001e44:	20a0c4df 	.word	0x20a0c4df

08001e48 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec0 <MX_I2C4_Init+0x78>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20A0C4DF;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e54:	4a1b      	ldr	r2, [pc, #108]	@ (8001ec4 <MX_I2C4_Init+0x7c>)
 8001e56:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001e58:	4b18      	ldr	r3, [pc, #96]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e64:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e70:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e76:	4b11      	ldr	r3, [pc, #68]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001e82:	480e      	ldr	r0, [pc, #56]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e84:	f009 f858 	bl	800af38 <HAL_I2C_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001e8e:	f001 fa3d 	bl	800330c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e92:	2100      	movs	r1, #0
 8001e94:	4809      	ldr	r0, [pc, #36]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001e96:	f009 f8eb 	bl	800b070 <HAL_I2CEx_ConfigAnalogFilter>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001ea0:	f001 fa34 	bl	800330c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <MX_I2C4_Init+0x74>)
 8001ea8:	f009 f92d 	bl	800b106 <HAL_I2CEx_ConfigDigitalFilter>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001eb2:	f001 fa2b 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	24000ba0 	.word	0x24000ba0
 8001ec0:	58001c00 	.word	0x58001c00
 8001ec4:	20a0c4df 	.word	0x20a0c4df

08001ec8 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <MX_OPAMP1_Init+0x3c>)
 8001ece:	4a0e      	ldr	r2, [pc, #56]	@ (8001f08 <MX_OPAMP1_Init+0x40>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_OPAMP1_Init+0x3c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8001f04 <MX_OPAMP1_Init+0x3c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_OPAMP1_Init+0x3c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	60da      	str	r2, [r3, #12]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001ee4:	4b07      	ldr	r3, [pc, #28]	@ (8001f04 <MX_OPAMP1_Init+0x3c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_OPAMP1_Init+0x3c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001ef0:	4804      	ldr	r0, [pc, #16]	@ (8001f04 <MX_OPAMP1_Init+0x3c>)
 8001ef2:	f009 f955 	bl	800b1a0 <HAL_OPAMP_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_OPAMP1_Init+0x38>
  {
    Error_Handler();
 8001efc:	f001 fa06 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001f00:	bf00      	nop
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	24000bf4 	.word	0x24000bf4
 8001f08:	40009000 	.word	0x40009000

08001f0c <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001f10:	4b0c      	ldr	r3, [pc, #48]	@ (8001f44 <MX_OPAMP2_Init+0x38>)
 8001f12:	4a0d      	ldr	r2, [pc, #52]	@ (8001f48 <MX_OPAMP2_Init+0x3c>)
 8001f14:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8001f16:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <MX_OPAMP2_Init+0x38>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <MX_OPAMP2_Init+0x38>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001f22:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <MX_OPAMP2_Init+0x38>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	605a      	str	r2, [r3, #4]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001f28:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <MX_OPAMP2_Init+0x38>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001f2e:	4805      	ldr	r0, [pc, #20]	@ (8001f44 <MX_OPAMP2_Init+0x38>)
 8001f30:	f009 f936 	bl	800b1a0 <HAL_OPAMP_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_OPAMP2_Init+0x32>
  {
    Error_Handler();
 8001f3a:	f001 f9e7 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	24000c28 	.word	0x24000c28
 8001f48:	40009010 	.word	0x40009010

08001f4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b09c      	sub	sp, #112	@ 0x70
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f52:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	615a      	str	r2, [r3, #20]
 8001f7e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	2234      	movs	r2, #52	@ 0x34
 8001f84:	2100      	movs	r1, #0
 8001f86:	4618      	mov	r0, r3
 8001f88:	f011 fb8c 	bl	80136a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f8c:	4b55      	ldr	r3, [pc, #340]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001f8e:	4a56      	ldr	r2, [pc, #344]	@ (80020e8 <MX_TIM1_Init+0x19c>)
 8001f90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 256-1;
 8001f92:	4b54      	ldr	r3, [pc, #336]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001f94:	22ff      	movs	r2, #255	@ 0xff
 8001f96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f98:	4b52      	ldr	r3, [pc, #328]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001f9e:	4b51      	ldr	r3, [pc, #324]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001fa0:	22c7      	movs	r2, #199	@ 0xc7
 8001fa2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa4:	4b4f      	ldr	r3, [pc, #316]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001faa:	4b4e      	ldr	r3, [pc, #312]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fb0:	4b4c      	ldr	r3, [pc, #304]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001fb2:	2280      	movs	r2, #128	@ 0x80
 8001fb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fb6:	484b      	ldr	r0, [pc, #300]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001fb8:	f00c fd72 	bl	800eaa0 <HAL_TIM_Base_Init>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001fc2:	f001 f9a3 	bl	800330c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fca:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fcc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4844      	ldr	r0, [pc, #272]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001fd4:	f00d f8c2 	bl	800f15c <HAL_TIM_ConfigClockSource>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001fde:	f001 f995 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001fe2:	4840      	ldr	r0, [pc, #256]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8001fe4:	f00c fe32 	bl	800ec4c <HAL_TIM_PWM_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001fee:	f001 f98d 	bl	800330c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ffe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002002:	4619      	mov	r1, r3
 8002004:	4837      	ldr	r0, [pc, #220]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8002006:	f00d fded 	bl	800fbe4 <HAL_TIMEx_MasterConfigSynchronization>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002010:	f001 f97c 	bl	800330c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002014:	2360      	movs	r3, #96	@ 0x60
 8002016:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 100-1;
 8002018:	2363      	movs	r3, #99	@ 0x63
 800201a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201c:	2300      	movs	r3, #0
 800201e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002020:	2300      	movs	r3, #0
 8002022:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002028:	2300      	movs	r3, #0
 800202a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002030:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002034:	2200      	movs	r2, #0
 8002036:	4619      	mov	r1, r3
 8002038:	482a      	ldr	r0, [pc, #168]	@ (80020e4 <MX_TIM1_Init+0x198>)
 800203a:	f00c ff7b 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002044:	f001 f962 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002048:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800204c:	2204      	movs	r2, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4824      	ldr	r0, [pc, #144]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8002052:	f00c ff6f 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 800205c:	f001 f956 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002060:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002064:	2208      	movs	r2, #8
 8002066:	4619      	mov	r1, r3
 8002068:	481e      	ldr	r0, [pc, #120]	@ (80020e4 <MX_TIM1_Init+0x198>)
 800206a:	f00c ff63 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002074:	f001 f94a 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002078:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800207c:	220c      	movs	r2, #12
 800207e:	4619      	mov	r1, r3
 8002080:	4818      	ldr	r0, [pc, #96]	@ (80020e4 <MX_TIM1_Init+0x198>)
 8002082:	f00c ff57 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800208c:	f001 f93e 	bl	800330c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002094:	2300      	movs	r3, #0
 8002096:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	@ (80020e4 <MX_TIM1_Init+0x198>)
 80020c6:	f00d fe29 	bl	800fd1c <HAL_TIMEx_ConfigBreakDeadTime>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80020d0:	f001 f91c 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020d4:	4803      	ldr	r0, [pc, #12]	@ (80020e4 <MX_TIM1_Init+0x198>)
 80020d6:	f001 fd85 	bl	8003be4 <HAL_TIM_MspPostInit>

}
 80020da:	bf00      	nop
 80020dc:	3770      	adds	r7, #112	@ 0x70
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	24000c5c 	.word	0x24000c5c
 80020e8:	40010000 	.word	0x40010000

080020ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08a      	sub	sp, #40	@ 0x28
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020fe:	463b      	mov	r3, r7
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
 800210c:	615a      	str	r2, [r3, #20]
 800210e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002110:	4b2d      	ldr	r3, [pc, #180]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 8002112:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002118:	4b2b      	ldr	r3, [pc, #172]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 800211a:	2200      	movs	r2, #0
 800211c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800211e:	4b2a      	ldr	r3, [pc, #168]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002124:	4b28      	ldr	r3, [pc, #160]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 8002126:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800212a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212c:	4b26      	ldr	r3, [pc, #152]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002132:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002138:	4823      	ldr	r0, [pc, #140]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 800213a:	f00c fd87 	bl	800ec4c <HAL_TIM_PWM_Init>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002144:	f001 f8e2 	bl	800330c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002148:	2300      	movs	r3, #0
 800214a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	481c      	ldr	r0, [pc, #112]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 8002158:	f00d fd44 	bl	800fbe4 <HAL_TIMEx_MasterConfigSynchronization>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002162:	f001 f8d3 	bl	800330c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002166:	2360      	movs	r3, #96	@ 0x60
 8002168:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800216a:	2300      	movs	r3, #0
 800216c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002176:	463b      	mov	r3, r7
 8002178:	2200      	movs	r2, #0
 800217a:	4619      	mov	r1, r3
 800217c:	4812      	ldr	r0, [pc, #72]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 800217e:	f00c fed9 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002188:	f001 f8c0 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	2204      	movs	r2, #4
 8002190:	4619      	mov	r1, r3
 8002192:	480d      	ldr	r0, [pc, #52]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 8002194:	f00c fece 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 800219e:	f001 f8b5 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021a2:	463b      	mov	r3, r7
 80021a4:	2208      	movs	r2, #8
 80021a6:	4619      	mov	r1, r3
 80021a8:	4807      	ldr	r0, [pc, #28]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 80021aa:	f00c fec3 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80021b4:	f001 f8aa 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021b8:	4803      	ldr	r0, [pc, #12]	@ (80021c8 <MX_TIM2_Init+0xdc>)
 80021ba:	f001 fd13 	bl	8003be4 <HAL_TIM_MspPostInit>

}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	@ 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	24000ca8 	.word	0x24000ca8

080021cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08a      	sub	sp, #40	@ 0x28
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021d2:	f107 031c 	add.w	r3, r7, #28
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021de:	463b      	mov	r3, r7
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
 80021e8:	60da      	str	r2, [r3, #12]
 80021ea:	611a      	str	r2, [r3, #16]
 80021ec:	615a      	str	r2, [r3, #20]
 80021ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021f0:	4b32      	ldr	r3, [pc, #200]	@ (80022bc <MX_TIM3_Init+0xf0>)
 80021f2:	4a33      	ldr	r2, [pc, #204]	@ (80022c0 <MX_TIM3_Init+0xf4>)
 80021f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021f6:	4b31      	ldr	r3, [pc, #196]	@ (80022bc <MX_TIM3_Init+0xf0>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021fc:	4b2f      	ldr	r3, [pc, #188]	@ (80022bc <MX_TIM3_Init+0xf0>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002202:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <MX_TIM3_Init+0xf0>)
 8002204:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002208:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800220a:	4b2c      	ldr	r3, [pc, #176]	@ (80022bc <MX_TIM3_Init+0xf0>)
 800220c:	2200      	movs	r2, #0
 800220e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002210:	4b2a      	ldr	r3, [pc, #168]	@ (80022bc <MX_TIM3_Init+0xf0>)
 8002212:	2200      	movs	r2, #0
 8002214:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002216:	4829      	ldr	r0, [pc, #164]	@ (80022bc <MX_TIM3_Init+0xf0>)
 8002218:	f00c fd18 	bl	800ec4c <HAL_TIM_PWM_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002222:	f001 f873 	bl	800330c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	4821      	ldr	r0, [pc, #132]	@ (80022bc <MX_TIM3_Init+0xf0>)
 8002236:	f00d fcd5 	bl	800fbe4 <HAL_TIMEx_MasterConfigSynchronization>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002240:	f001 f864 	bl	800330c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002244:	2360      	movs	r3, #96	@ 0x60
 8002246:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002254:	463b      	mov	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	4619      	mov	r1, r3
 800225a:	4818      	ldr	r0, [pc, #96]	@ (80022bc <MX_TIM3_Init+0xf0>)
 800225c:	f00c fe6a 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002266:	f001 f851 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800226a:	463b      	mov	r3, r7
 800226c:	2204      	movs	r2, #4
 800226e:	4619      	mov	r1, r3
 8002270:	4812      	ldr	r0, [pc, #72]	@ (80022bc <MX_TIM3_Init+0xf0>)
 8002272:	f00c fe5f 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 800227c:	f001 f846 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002280:	463b      	mov	r3, r7
 8002282:	2208      	movs	r2, #8
 8002284:	4619      	mov	r1, r3
 8002286:	480d      	ldr	r0, [pc, #52]	@ (80022bc <MX_TIM3_Init+0xf0>)
 8002288:	f00c fe54 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8002292:	f001 f83b 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002296:	463b      	mov	r3, r7
 8002298:	220c      	movs	r2, #12
 800229a:	4619      	mov	r1, r3
 800229c:	4807      	ldr	r0, [pc, #28]	@ (80022bc <MX_TIM3_Init+0xf0>)
 800229e:	f00c fe49 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80022a8:	f001 f830 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022ac:	4803      	ldr	r0, [pc, #12]	@ (80022bc <MX_TIM3_Init+0xf0>)
 80022ae:	f001 fc99 	bl	8003be4 <HAL_TIM_MspPostInit>

}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	@ 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	24000cf4 	.word	0x24000cf4
 80022c0:	40000400 	.word	0x40000400

080022c4 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b08e      	sub	sp, #56	@ 0x38
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	605a      	str	r2, [r3, #4]
 80022d4:	609a      	str	r2, [r3, #8]
 80022d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022d8:	f107 031c 	add.w	r3, r7, #28
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e4:	463b      	mov	r3, r7
 80022e6:	2200      	movs	r2, #0
 80022e8:	601a      	str	r2, [r3, #0]
 80022ea:	605a      	str	r2, [r3, #4]
 80022ec:	609a      	str	r2, [r3, #8]
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	611a      	str	r2, [r3, #16]
 80022f2:	615a      	str	r2, [r3, #20]
 80022f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 80022f6:	4b3e      	ldr	r3, [pc, #248]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 80022f8:	4a3e      	ldr	r2, [pc, #248]	@ (80023f4 <MX_TIM23_Init+0x130>)
 80022fa:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 256-1;
 80022fc:	4b3c      	ldr	r3, [pc, #240]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 80022fe:	22ff      	movs	r2, #255	@ 0xff
 8002300:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002302:	4b3b      	ldr	r3, [pc, #236]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 8002304:	2200      	movs	r2, #0
 8002306:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 20000-1;
 8002308:	4b39      	ldr	r3, [pc, #228]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 800230a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800230e:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002310:	4b37      	ldr	r3, [pc, #220]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 8002312:	2200      	movs	r2, #0
 8002314:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002316:	4b36      	ldr	r3, [pc, #216]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 8002318:	2280      	movs	r2, #128	@ 0x80
 800231a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800231c:	4834      	ldr	r0, [pc, #208]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 800231e:	f00c fbbf 	bl	800eaa0 <HAL_TIM_Base_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM23_Init+0x68>
  {
    Error_Handler();
 8002328:	f000 fff0 	bl	800330c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800232c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002330:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8002332:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002336:	4619      	mov	r1, r3
 8002338:	482d      	ldr	r0, [pc, #180]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 800233a:	f00c ff0f 	bl	800f15c <HAL_TIM_ConfigClockSource>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_TIM23_Init+0x84>
  {
    Error_Handler();
 8002344:	f000 ffe2 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 8002348:	4829      	ldr	r0, [pc, #164]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 800234a:	f00c fc7f 	bl	800ec4c <HAL_TIM_PWM_Init>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM23_Init+0x94>
  {
    Error_Handler();
 8002354:	f000 ffda 	bl	800330c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002360:	f107 031c 	add.w	r3, r7, #28
 8002364:	4619      	mov	r1, r3
 8002366:	4822      	ldr	r0, [pc, #136]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 8002368:	f00d fc3c 	bl	800fbe4 <HAL_TIMEx_MasterConfigSynchronization>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM23_Init+0xb2>
  {
    Error_Handler();
 8002372:	f000 ffcb 	bl	800330c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002376:	2360      	movs	r3, #96	@ 0x60
 8002378:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 800237a:	f240 33e7 	movw	r3, #999	@ 0x3e7
 800237e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002380:	2300      	movs	r3, #0
 8002382:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002384:	2300      	movs	r3, #0
 8002386:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002388:	463b      	mov	r3, r7
 800238a:	2200      	movs	r2, #0
 800238c:	4619      	mov	r1, r3
 800238e:	4818      	ldr	r0, [pc, #96]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 8002390:	f00c fdd0 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM23_Init+0xda>
  {
    Error_Handler();
 800239a:	f000 ffb7 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800239e:	463b      	mov	r3, r7
 80023a0:	2204      	movs	r2, #4
 80023a2:	4619      	mov	r1, r3
 80023a4:	4812      	ldr	r0, [pc, #72]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 80023a6:	f00c fdc5 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM23_Init+0xf0>
  {
    Error_Handler();
 80023b0:	f000 ffac 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023b4:	463b      	mov	r3, r7
 80023b6:	2208      	movs	r2, #8
 80023b8:	4619      	mov	r1, r3
 80023ba:	480d      	ldr	r0, [pc, #52]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 80023bc:	f00c fdba 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM23_Init+0x106>
  {
    Error_Handler();
 80023c6:	f000 ffa1 	bl	800330c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023ca:	463b      	mov	r3, r7
 80023cc:	220c      	movs	r2, #12
 80023ce:	4619      	mov	r1, r3
 80023d0:	4807      	ldr	r0, [pc, #28]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 80023d2:	f00c fdaf 	bl	800ef34 <HAL_TIM_PWM_ConfigChannel>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM23_Init+0x11c>
  {
    Error_Handler();
 80023dc:	f000 ff96 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 80023e0:	4803      	ldr	r0, [pc, #12]	@ (80023f0 <MX_TIM23_Init+0x12c>)
 80023e2:	f001 fbff 	bl	8003be4 <HAL_TIM_MspPostInit>

}
 80023e6:	bf00      	nop
 80023e8:	3738      	adds	r7, #56	@ 0x38
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	24000d40 	.word	0x24000d40
 80023f4:	4000e000 	.word	0x4000e000

080023f8 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80023fc:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <MX_UART7_Init+0x98>)
 80023fe:	4a25      	ldr	r2, [pc, #148]	@ (8002494 <MX_UART7_Init+0x9c>)
 8002400:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002402:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <MX_UART7_Init+0x98>)
 8002404:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002408:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800240a:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <MX_UART7_Init+0x98>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002410:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <MX_UART7_Init+0x98>)
 8002412:	2200      	movs	r2, #0
 8002414:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002416:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <MX_UART7_Init+0x98>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800241c:	4b1c      	ldr	r3, [pc, #112]	@ (8002490 <MX_UART7_Init+0x98>)
 800241e:	220c      	movs	r2, #12
 8002420:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002422:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <MX_UART7_Init+0x98>)
 8002424:	2200      	movs	r2, #0
 8002426:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <MX_UART7_Init+0x98>)
 800242a:	2200      	movs	r2, #0
 800242c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <MX_UART7_Init+0x98>)
 8002430:	2200      	movs	r2, #0
 8002432:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002434:	4b16      	ldr	r3, [pc, #88]	@ (8002490 <MX_UART7_Init+0x98>)
 8002436:	2200      	movs	r2, #0
 8002438:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800243a:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <MX_UART7_Init+0x98>)
 800243c:	2200      	movs	r2, #0
 800243e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002440:	2300      	movs	r3, #0
 8002442:	2200      	movs	r2, #0
 8002444:	2100      	movs	r1, #0
 8002446:	4812      	ldr	r0, [pc, #72]	@ (8002490 <MX_UART7_Init+0x98>)
 8002448:	f00f fcb2 	bl	8011db0 <HAL_RS485Ex_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_UART7_Init+0x5e>
  {
    Error_Handler();
 8002452:	f000 ff5b 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002456:	2100      	movs	r1, #0
 8002458:	480d      	ldr	r0, [pc, #52]	@ (8002490 <MX_UART7_Init+0x98>)
 800245a:	f00f fd6a 	bl	8011f32 <HAL_UARTEx_SetTxFifoThreshold>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_UART7_Init+0x70>
  {
    Error_Handler();
 8002464:	f000 ff52 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002468:	2100      	movs	r1, #0
 800246a:	4809      	ldr	r0, [pc, #36]	@ (8002490 <MX_UART7_Init+0x98>)
 800246c:	f00f fd9f 	bl	8011fae <HAL_UARTEx_SetRxFifoThreshold>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_UART7_Init+0x82>
  {
    Error_Handler();
 8002476:	f000 ff49 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800247a:	4805      	ldr	r0, [pc, #20]	@ (8002490 <MX_UART7_Init+0x98>)
 800247c:	f00f fd20 	bl	8011ec0 <HAL_UARTEx_DisableFifoMode>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_UART7_Init+0x92>
  {
    Error_Handler();
 8002486:	f000 ff41 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	24000d8c 	.word	0x24000d8c
 8002494:	40007800 	.word	0x40007800

08002498 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800249c:	4b22      	ldr	r3, [pc, #136]	@ (8002528 <MX_UART8_Init+0x90>)
 800249e:	4a23      	ldr	r2, [pc, #140]	@ (800252c <MX_UART8_Init+0x94>)
 80024a0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 100000;
 80024a2:	4b21      	ldr	r3, [pc, #132]	@ (8002528 <MX_UART8_Init+0x90>)
 80024a4:	4a22      	ldr	r2, [pc, #136]	@ (8002530 <MX_UART8_Init+0x98>)
 80024a6:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80024a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002528 <MX_UART8_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <MX_UART8_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 80024b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002528 <MX_UART8_Init+0x90>)
 80024b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ba:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80024bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002528 <MX_UART8_Init+0x90>)
 80024be:	220c      	movs	r2, #12
 80024c0:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024c2:	4b19      	ldr	r3, [pc, #100]	@ (8002528 <MX_UART8_Init+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80024c8:	4b17      	ldr	r3, [pc, #92]	@ (8002528 <MX_UART8_Init+0x90>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024ce:	4b16      	ldr	r3, [pc, #88]	@ (8002528 <MX_UART8_Init+0x90>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024d4:	4b14      	ldr	r3, [pc, #80]	@ (8002528 <MX_UART8_Init+0x90>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024da:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <MX_UART8_Init+0x90>)
 80024dc:	2200      	movs	r2, #0
 80024de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80024e0:	4811      	ldr	r0, [pc, #68]	@ (8002528 <MX_UART8_Init+0x90>)
 80024e2:	f00d fca7 	bl	800fe34 <HAL_UART_Init>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 80024ec:	f000 ff0e 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024f0:	2100      	movs	r1, #0
 80024f2:	480d      	ldr	r0, [pc, #52]	@ (8002528 <MX_UART8_Init+0x90>)
 80024f4:	f00f fd1d 	bl	8011f32 <HAL_UARTEx_SetTxFifoThreshold>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80024fe:	f000 ff05 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002502:	2100      	movs	r1, #0
 8002504:	4808      	ldr	r0, [pc, #32]	@ (8002528 <MX_UART8_Init+0x90>)
 8002506:	f00f fd52 	bl	8011fae <HAL_UARTEx_SetRxFifoThreshold>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002510:	f000 fefc 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002514:	4804      	ldr	r0, [pc, #16]	@ (8002528 <MX_UART8_Init+0x90>)
 8002516:	f00f fcd3 	bl	8011ec0 <HAL_UARTEx_DisableFifoMode>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002520:	f000 fef4 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	24000e20 	.word	0x24000e20
 800252c:	40007c00 	.word	0x40007c00
 8002530:	000186a0 	.word	0x000186a0

08002534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002538:	4b22      	ldr	r3, [pc, #136]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 800253a:	4a23      	ldr	r2, [pc, #140]	@ (80025c8 <MX_USART1_UART_Init+0x94>)
 800253c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800253e:	4b21      	ldr	r3, [pc, #132]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 8002540:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002546:	4b1f      	ldr	r3, [pc, #124]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800254c:	4b1d      	ldr	r3, [pc, #116]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002552:	4b1c      	ldr	r3, [pc, #112]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002558:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 800255a:	220c      	movs	r2, #12
 800255c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800255e:	4b19      	ldr	r3, [pc, #100]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 8002560:	2200      	movs	r2, #0
 8002562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002564:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 8002566:	2200      	movs	r2, #0
 8002568:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800256a:	4b16      	ldr	r3, [pc, #88]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 800256c:	2200      	movs	r2, #0
 800256e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002570:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 8002572:	2200      	movs	r2, #0
 8002574:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002576:	4b13      	ldr	r3, [pc, #76]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 8002578:	2200      	movs	r2, #0
 800257a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800257c:	4811      	ldr	r0, [pc, #68]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 800257e:	f00d fc59 	bl	800fe34 <HAL_UART_Init>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002588:	f000 fec0 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800258c:	2100      	movs	r1, #0
 800258e:	480d      	ldr	r0, [pc, #52]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 8002590:	f00f fccf 	bl	8011f32 <HAL_UARTEx_SetTxFifoThreshold>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800259a:	f000 feb7 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800259e:	2100      	movs	r1, #0
 80025a0:	4808      	ldr	r0, [pc, #32]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 80025a2:	f00f fd04 	bl	8011fae <HAL_UARTEx_SetRxFifoThreshold>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80025ac:	f000 feae 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025b0:	4804      	ldr	r0, [pc, #16]	@ (80025c4 <MX_USART1_UART_Init+0x90>)
 80025b2:	f00f fc85 	bl	8011ec0 <HAL_UARTEx_DisableFifoMode>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80025bc:	f000 fea6 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025c0:	bf00      	nop
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	24000eb4 	.word	0x24000eb4
 80025c8:	40011000 	.word	0x40011000

080025cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025d0:	4b22      	ldr	r3, [pc, #136]	@ (800265c <MX_USART2_UART_Init+0x90>)
 80025d2:	4a23      	ldr	r2, [pc, #140]	@ (8002660 <MX_USART2_UART_Init+0x94>)
 80025d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025d6:	4b21      	ldr	r3, [pc, #132]	@ (800265c <MX_USART2_UART_Init+0x90>)
 80025d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025de:	4b1f      	ldr	r3, [pc, #124]	@ (800265c <MX_USART2_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <MX_USART2_UART_Init+0x90>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025ea:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <MX_USART2_UART_Init+0x90>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025f0:	4b1a      	ldr	r3, [pc, #104]	@ (800265c <MX_USART2_UART_Init+0x90>)
 80025f2:	220c      	movs	r2, #12
 80025f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025f6:	4b19      	ldr	r3, [pc, #100]	@ (800265c <MX_USART2_UART_Init+0x90>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025fc:	4b17      	ldr	r3, [pc, #92]	@ (800265c <MX_USART2_UART_Init+0x90>)
 80025fe:	2200      	movs	r2, #0
 8002600:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002602:	4b16      	ldr	r3, [pc, #88]	@ (800265c <MX_USART2_UART_Init+0x90>)
 8002604:	2200      	movs	r2, #0
 8002606:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <MX_USART2_UART_Init+0x90>)
 800260a:	2200      	movs	r2, #0
 800260c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800260e:	4b13      	ldr	r3, [pc, #76]	@ (800265c <MX_USART2_UART_Init+0x90>)
 8002610:	2200      	movs	r2, #0
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002614:	4811      	ldr	r0, [pc, #68]	@ (800265c <MX_USART2_UART_Init+0x90>)
 8002616:	f00d fc0d 	bl	800fe34 <HAL_UART_Init>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d001      	beq.n	8002624 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002620:	f000 fe74 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002624:	2100      	movs	r1, #0
 8002626:	480d      	ldr	r0, [pc, #52]	@ (800265c <MX_USART2_UART_Init+0x90>)
 8002628:	f00f fc83 	bl	8011f32 <HAL_UARTEx_SetTxFifoThreshold>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002632:	f000 fe6b 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002636:	2100      	movs	r1, #0
 8002638:	4808      	ldr	r0, [pc, #32]	@ (800265c <MX_USART2_UART_Init+0x90>)
 800263a:	f00f fcb8 	bl	8011fae <HAL_UARTEx_SetRxFifoThreshold>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002644:	f000 fe62 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002648:	4804      	ldr	r0, [pc, #16]	@ (800265c <MX_USART2_UART_Init+0x90>)
 800264a:	f00f fc39 	bl	8011ec0 <HAL_UARTEx_DisableFifoMode>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002654:	f000 fe5a 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002658:	bf00      	nop
 800265a:	bd80      	pop	{r7, pc}
 800265c:	24000f48 	.word	0x24000f48
 8002660:	40004400 	.word	0x40004400

08002664 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002668:	4b22      	ldr	r3, [pc, #136]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 800266a:	4a23      	ldr	r2, [pc, #140]	@ (80026f8 <MX_USART3_UART_Init+0x94>)
 800266c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800266e:	4b21      	ldr	r3, [pc, #132]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 8002670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002674:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002676:	4b1f      	ldr	r3, [pc, #124]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800267c:	4b1d      	ldr	r3, [pc, #116]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 800267e:	2200      	movs	r2, #0
 8002680:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002682:	4b1c      	ldr	r3, [pc, #112]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002688:	4b1a      	ldr	r3, [pc, #104]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 800268a:	220c      	movs	r2, #12
 800268c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800268e:	4b19      	ldr	r3, [pc, #100]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002694:	4b17      	ldr	r3, [pc, #92]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 8002696:	2200      	movs	r2, #0
 8002698:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800269a:	4b16      	ldr	r3, [pc, #88]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 800269c:	2200      	movs	r2, #0
 800269e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026a0:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a6:	4b13      	ldr	r3, [pc, #76]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026ac:	4811      	ldr	r0, [pc, #68]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 80026ae:	f00d fbc1 	bl	800fe34 <HAL_UART_Init>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80026b8:	f000 fe28 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026bc:	2100      	movs	r1, #0
 80026be:	480d      	ldr	r0, [pc, #52]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 80026c0:	f00f fc37 	bl	8011f32 <HAL_UARTEx_SetTxFifoThreshold>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80026ca:	f000 fe1f 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026ce:	2100      	movs	r1, #0
 80026d0:	4808      	ldr	r0, [pc, #32]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 80026d2:	f00f fc6c 	bl	8011fae <HAL_UARTEx_SetRxFifoThreshold>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80026dc:	f000 fe16 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026e0:	4804      	ldr	r0, [pc, #16]	@ (80026f4 <MX_USART3_UART_Init+0x90>)
 80026e2:	f00f fbed 	bl	8011ec0 <HAL_UARTEx_DisableFifoMode>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80026ec:	f000 fe0e 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	24000fdc 	.word	0x24000fdc
 80026f8:	40004800 	.word	0x40004800

080026fc <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8002700:	4b24      	ldr	r3, [pc, #144]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002702:	4a25      	ldr	r2, [pc, #148]	@ (8002798 <MX_USART10_UART_Init+0x9c>)
 8002704:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8002706:	4b23      	ldr	r3, [pc, #140]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800270c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 800270e:	4b21      	ldr	r3, [pc, #132]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002710:	2200      	movs	r2, #0
 8002712:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8002714:	4b1f      	ldr	r3, [pc, #124]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002716:	2200      	movs	r2, #0
 8002718:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800271a:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 800271c:	2200      	movs	r2, #0
 800271e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002720:	4b1c      	ldr	r3, [pc, #112]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002722:	220c      	movs	r2, #12
 8002724:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002726:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 800272c:	4b19      	ldr	r3, [pc, #100]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 800272e:	2200      	movs	r2, #0
 8002730:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002732:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002734:	2200      	movs	r2, #0
 8002736:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002738:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 800273a:	2200      	movs	r2, #0
 800273c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002740:	2200      	movs	r2, #0
 8002742:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart10, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002744:	2300      	movs	r3, #0
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	4812      	ldr	r0, [pc, #72]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 800274c:	f00f fb30 	bl	8011db0 <HAL_RS485Ex_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_USART10_UART_Init+0x5e>
  {
    Error_Handler();
 8002756:	f000 fdd9 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800275a:	2100      	movs	r1, #0
 800275c:	480d      	ldr	r0, [pc, #52]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 800275e:	f00f fbe8 	bl	8011f32 <HAL_UARTEx_SetTxFifoThreshold>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d001      	beq.n	800276c <MX_USART10_UART_Init+0x70>
  {
    Error_Handler();
 8002768:	f000 fdd0 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800276c:	2100      	movs	r1, #0
 800276e:	4809      	ldr	r0, [pc, #36]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002770:	f00f fc1d 	bl	8011fae <HAL_UARTEx_SetRxFifoThreshold>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <MX_USART10_UART_Init+0x82>
  {
    Error_Handler();
 800277a:	f000 fdc7 	bl	800330c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 800277e:	4805      	ldr	r0, [pc, #20]	@ (8002794 <MX_USART10_UART_Init+0x98>)
 8002780:	f00f fb9e 	bl	8011ec0 <HAL_UARTEx_DisableFifoMode>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <MX_USART10_UART_Init+0x92>
  {
    Error_Handler();
 800278a:	f000 fdbf 	bl	800330c <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 800278e:	bf00      	nop
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	24001070 	.word	0x24001070
 8002798:	40011c00 	.word	0x40011c00

0800279c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027a2:	4b35      	ldr	r3, [pc, #212]	@ (8002878 <MX_DMA_Init+0xdc>)
 80027a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027a8:	4a33      	ldr	r2, [pc, #204]	@ (8002878 <MX_DMA_Init+0xdc>)
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80027b2:	4b31      	ldr	r3, [pc, #196]	@ (8002878 <MX_DMA_Init+0xdc>)
 80027b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	607b      	str	r3, [r7, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002878 <MX_DMA_Init+0xdc>)
 80027c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <MX_DMA_Init+0xdc>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80027d0:	4b29      	ldr	r3, [pc, #164]	@ (8002878 <MX_DMA_Init+0xdc>)
 80027d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2105      	movs	r1, #5
 80027e2:	200b      	movs	r0, #11
 80027e4:	f004 f917 	bl	8006a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027e8:	200b      	movs	r0, #11
 80027ea:	f004 f92e 	bl	8006a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80027ee:	2200      	movs	r2, #0
 80027f0:	2105      	movs	r1, #5
 80027f2:	200c      	movs	r0, #12
 80027f4:	f004 f90f 	bl	8006a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80027f8:	200c      	movs	r0, #12
 80027fa:	f004 f926 	bl	8006a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80027fe:	2200      	movs	r2, #0
 8002800:	2105      	movs	r1, #5
 8002802:	200d      	movs	r0, #13
 8002804:	f004 f907 	bl	8006a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002808:	200d      	movs	r0, #13
 800280a:	f004 f91e 	bl	8006a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800280e:	2200      	movs	r2, #0
 8002810:	2105      	movs	r1, #5
 8002812:	200e      	movs	r0, #14
 8002814:	f004 f8ff 	bl	8006a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002818:	200e      	movs	r0, #14
 800281a:	f004 f916 	bl	8006a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2105      	movs	r1, #5
 8002822:	200f      	movs	r0, #15
 8002824:	f004 f8f7 	bl	8006a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002828:	200f      	movs	r0, #15
 800282a:	f004 f90e 	bl	8006a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800282e:	2200      	movs	r2, #0
 8002830:	2105      	movs	r1, #5
 8002832:	2010      	movs	r0, #16
 8002834:	f004 f8ef 	bl	8006a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002838:	2010      	movs	r0, #16
 800283a:	f004 f906 	bl	8006a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800283e:	2200      	movs	r2, #0
 8002840:	2105      	movs	r1, #5
 8002842:	2011      	movs	r0, #17
 8002844:	f004 f8e7 	bl	8006a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002848:	2011      	movs	r0, #17
 800284a:	f004 f8fe 	bl	8006a4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2105      	movs	r1, #5
 8002852:	202f      	movs	r0, #47	@ 0x2f
 8002854:	f004 f8df 	bl	8006a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002858:	202f      	movs	r0, #47	@ 0x2f
 800285a:	f004 f8f6 	bl	8006a4a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 800285e:	2200      	movs	r2, #0
 8002860:	2105      	movs	r1, #5
 8002862:	2038      	movs	r0, #56	@ 0x38
 8002864:	f004 f8d7 	bl	8006a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002868:	2038      	movs	r0, #56	@ 0x38
 800286a:	f004 f8ee 	bl	8006a4a <HAL_NVIC_EnableIRQ>

}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	58024400 	.word	0x58024400

0800287c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08e      	sub	sp, #56	@ 0x38
 8002880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002882:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002886:	2200      	movs	r2, #0
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	609a      	str	r2, [r3, #8]
 800288e:	60da      	str	r2, [r3, #12]
 8002890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002892:	4b4d      	ldr	r3, [pc, #308]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 8002894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002898:	4a4b      	ldr	r2, [pc, #300]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 800289a:	f043 0310 	orr.w	r3, r3, #16
 800289e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028a2:	4b49      	ldr	r3, [pc, #292]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028b0:	4b45      	ldr	r3, [pc, #276]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b6:	4a44      	ldr	r2, [pc, #272]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028b8:	f043 0320 	orr.w	r3, r3, #32
 80028bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028c0:	4b41      	ldr	r3, [pc, #260]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028ce:	4b3e      	ldr	r3, [pc, #248]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028d4:	4a3c      	ldr	r2, [pc, #240]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028de:	4b3a      	ldr	r3, [pc, #232]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ec:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f2:	4a35      	ldr	r2, [pc, #212]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028fc:	4b32      	ldr	r3, [pc, #200]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 80028fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002902:	f003 0301 	and.w	r3, r3, #1
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800290a:	4b2f      	ldr	r3, [pc, #188]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 800290c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002910:	4a2d      	ldr	r2, [pc, #180]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800291a:	4b2b      	ldr	r3, [pc, #172]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 800291c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002928:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 800292a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800292e:	4a26      	ldr	r2, [pc, #152]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002938:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 800293a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002946:	4b20      	ldr	r3, [pc, #128]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 8002948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800294c:	4a1e      	ldr	r2, [pc, #120]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 800294e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002956:	4b1c      	ldr	r3, [pc, #112]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 8002958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800295c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002964:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 8002966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800296a:	4a17      	ldr	r2, [pc, #92]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002974:	4b14      	ldr	r3, [pc, #80]	@ (80029c8 <MX_GPIO_Init+0x14c>)
 8002976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297a:	f003 0308 	and.w	r3, r3, #8
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002982:	2200      	movs	r2, #0
 8002984:	217c      	movs	r1, #124	@ 0x7c
 8002986:	4811      	ldr	r0, [pc, #68]	@ (80029cc <MX_GPIO_Init+0x150>)
 8002988:	f008 faa2 	bl	800aed0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800298c:	237c      	movs	r3, #124	@ 0x7c
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002990:	2301      	movs	r3, #1
 8002992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002998:	2301      	movs	r3, #1
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800299c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a0:	4619      	mov	r1, r3
 80029a2:	480a      	ldr	r0, [pc, #40]	@ (80029cc <MX_GPIO_Init+0x150>)
 80029a4:	f008 f8ec 	bl	800ab80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80029a8:	2338      	movs	r3, #56	@ 0x38
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b8:	4619      	mov	r1, r3
 80029ba:	4805      	ldr	r0, [pc, #20]	@ (80029d0 <MX_GPIO_Init+0x154>)
 80029bc:	f008 f8e0 	bl	800ab80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029c0:	bf00      	nop
 80029c2:	3738      	adds	r7, #56	@ 0x38
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	58024400 	.word	0x58024400
 80029cc:	58021000 	.word	0x58021000
 80029d0:	58020000 	.word	0x58020000
 80029d4:	00000000 	.word	0x00000000

080029d8 <determiningTrigAngle>:

/* USER CODE BEGIN 4 */

float determiningTrigAngle (int16_t motorAngle[5]) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
	if (motorAngle[0] < 0 && motorAngle[1] < 0) {
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	da25      	bge.n	8002a36 <determiningTrigAngle+0x5e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	3302      	adds	r3, #2
 80029ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	da1f      	bge.n	8002a36 <determiningTrigAngle+0x5e>
		return (-M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fc:	ee07 3a90 	vmov	s15, r3
 8002a00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3302      	adds	r3, #2
 8002a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a0c:	ee07 3a90 	vmov	s15, r3
 8002a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a14:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a18:	eeb0 0a66 	vmov.f32	s0, s13
 8002a1c:	f011 fade 	bl	8013fdc <atanf>
 8002a20:	eef0 7a40 	vmov.f32	s15, s0
 8002a24:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a28:	ed9f 6b2d 	vldr	d6, [pc, #180]	@ 8002ae0 <determiningTrigAngle+0x108>
 8002a2c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002a30:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a34:	e04f      	b.n	8002ad6 <determiningTrigAngle+0xfe>
	} else if (motorAngle[0] >= 0 && motorAngle[1] < 0) {
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	db25      	blt.n	8002a8c <determiningTrigAngle+0xb4>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3302      	adds	r3, #2
 8002a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	da1f      	bge.n	8002a8c <determiningTrigAngle+0xb4>
		return (M_PI + atanf(((float)motorAngle[0])/((float)motorAngle[1])));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3302      	adds	r3, #2
 8002a5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002a6e:	eeb0 0a66 	vmov.f32	s0, s13
 8002a72:	f011 fab3 	bl	8013fdc <atanf>
 8002a76:	eef0 7a40 	vmov.f32	s15, s0
 8002a7a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a7e:	ed9f 6b18 	vldr	d6, [pc, #96]	@ 8002ae0 <determiningTrigAngle+0x108>
 8002a82:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002a86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002a8a:	e024      	b.n	8002ad6 <determiningTrigAngle+0xfe>
	} else if (motorAngle[0] == 0 && motorAngle[1] == 0) {
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d108      	bne.n	8002aa8 <determiningTrigAngle+0xd0>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3302      	adds	r3, #2
 8002a9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <determiningTrigAngle+0xd0>
		return 0;
 8002aa2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8002ae8 <determiningTrigAngle+0x110>
 8002aa6:	e016      	b.n	8002ad6 <determiningTrigAngle+0xfe>
	} else {
		return atanf(((float)motorAngle[0])/((float)motorAngle[1]));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3302      	adds	r3, #2
 8002aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abe:	ee07 3a90 	vmov	s15, r3
 8002ac2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002aca:	eeb0 0a66 	vmov.f32	s0, s13
 8002ace:	f011 fa85 	bl	8013fdc <atanf>
 8002ad2:	eef0 7a40 	vmov.f32	s15, s0
	}
}
 8002ad6:	eeb0 0a67 	vmov.f32	s0, s15
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	54442d18 	.word	0x54442d18
 8002ae4:	400921fb 	.word	0x400921fb
 8002ae8:	00000000 	.word	0x00000000

08002aec <swerveScaler>:
		newTargetRotationCounter = 1;
	}
    return ((destinationRotation + (8191*newTargetRotationCounter)) - currentRotation);
}

float swerveScaler (int16_t motorInfo[4][5]) {
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
	int16_t largestVal = 0;
 8002af4:	2300      	movs	r3, #0
 8002af6:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8002af8:	2300      	movs	r3, #0
 8002afa:	737b      	strb	r3, [r7, #13]
 8002afc:	e01f      	b.n	8002b3e <swerveScaler+0x52>
		if (motorInfo[i][2] > largestVal) {
 8002afe:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8002b02:	4613      	mov	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4413      	add	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002b14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	da0a      	bge.n	8002b32 <swerveScaler+0x46>
			largestVal = motorInfo[i][2];
 8002b1c:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	461a      	mov	r2, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	889b      	ldrh	r3, [r3, #4]
 8002b30:	81fb      	strh	r3, [r7, #14]
	for (int8_t i = 0; i < 4; i++) {
 8002b32:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	737b      	strb	r3, [r7, #13]
 8002b3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	dddb      	ble.n	8002afe <swerveScaler+0x12>
		}
	}

	// usart_printf("Hello %d there!\r\n", 5);
	if (largestVal <= maxValAllowed) {
 8002b46:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002b4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	dc02      	bgt.n	8002b58 <swerveScaler+0x6c>
		return 1;
 8002b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b56:	e00b      	b.n	8002b70 <swerveScaler+0x84>
	} else {
		return ((float)(maxValAllowed)/(float)(largestVal));
 8002b58:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8002b84 <swerveScaler+0x98>
 8002b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b64:	ee07 3a90 	vmov	s15, r3
 8002b68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
	}
}
 8002b70:	eef0 7a66 	vmov.f32	s15, s13
 8002b74:	eeb0 0a67 	vmov.f32	s0, s15
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	00000320 	.word	0x00000320

08002b88 <fondlerAutoReverse>:
int16_t PD (MotorType_ID motorType, int16_t *previousDelta, int16_t currentDelta, float kP, float kD) {

	return applyCtrlLimit(motorType, (currentDelta*kP + (*previousDelta - currentDelta)*kD));
}

void fondlerAutoReverse (int8_t allVars[5], int8_t RCSwitch, int8_t M2006IDX, int8_t reverseRotation, PID_preset_t indexerPreset) {
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6178      	str	r0, [r7, #20]
 8002b90:	4608      	mov	r0, r1
 8002b92:	4611      	mov	r1, r2
 8002b94:	461a      	mov	r2, r3
 8002b96:	eef0 6a40 	vmov.f32	s13, s0
 8002b9a:	eeb0 7a60 	vmov.f32	s14, s1
 8002b9e:	eef0 7a41 	vmov.f32	s15, s2
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	74fb      	strb	r3, [r7, #19]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	74bb      	strb	r3, [r7, #18]
 8002baa:	4613      	mov	r3, r2
 8002bac:	747b      	strb	r3, [r7, #17]
 8002bae:	edc7 6a01 	vstr	s13, [r7, #4]
 8002bb2:	ed87 7a02 	vstr	s14, [r7, #8]
 8002bb6:	edc7 7a03 	vstr	s15, [r7, #12]
	int16_t flywheelSpeed = getMotorRPM(Bus1, M3508, 1);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	f7fe fc26 	bl	8001410 <getMotorRPM>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	83fb      	strh	r3, [r7, #30]
    if ((/*(pc_control.left_button_down == 1) && */(flywheelSpeed > 7000) && (allVars[4] == 0)) || (RCSwitch == 1)) {
 8002bc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002bcc:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	dd05      	ble.n	8002be0 <fondlerAutoReverse+0x58>
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	f993 3000 	ldrsb.w	r3, [r3]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d004      	beq.n	8002bea <fondlerAutoReverse+0x62>
 8002be0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	f040 80c1 	bne.w	8002d6c <fondlerAutoReverse+0x1e4>
    	// setMotorRPM(Bus2, M2006, 6, (100), indexerPreset);
    	allVars[0] = 1;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2201      	movs	r2, #1
 8002bee:	701a      	strb	r2, [r3, #0]

		if (allVars[3] > 0 && allVars[2] == 0) {
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	3303      	adds	r3, #3
 8002bf4:	f993 3000 	ldrsb.w	r3, [r3]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	dd2f      	ble.n	8002c5c <fondlerAutoReverse+0xd4>
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	3302      	adds	r3, #2
 8002c00:	f993 3000 	ldrsb.w	r3, [r3]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d129      	bne.n	8002c5c <fondlerAutoReverse+0xd4>
			setMotorRPM(Bus1, M2006, M2006IDX, reverseRotation*15000, indexerPreset);
 8002c08:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	461a      	mov	r2, r3
 8002c10:	0152      	lsls	r2, r2, #5
 8002c12:	1ad2      	subs	r2, r2, r3
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	461a      	mov	r2, r3
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	b21b      	sxth	r3, r3
 8002c24:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c28:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c30:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8002c34:	eeb0 0a66 	vmov.f32	s0, s13
 8002c38:	eef0 0a47 	vmov.f32	s1, s14
 8002c3c:	eeb0 1a67 	vmov.f32	s2, s15
 8002c40:	2102      	movs	r1, #2
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7fe fba8 	bl	8001398 <setMotorRPM>
			allVars[3]--;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	3303      	adds	r3, #3
 8002c4c:	f993 2000 	ldrsb.w	r2, [r3]
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	3a01      	subs	r2, #1
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	b252      	sxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e086      	b.n	8002d6a <fondlerAutoReverse+0x1e2>
		} else {
			allVars[2] = 0;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3302      	adds	r3, #2
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
			usart_printf("BeansOutput1\r\n");
 8002c64:	4853      	ldr	r0, [pc, #332]	@ (8002db4 <fondlerAutoReverse+0x22c>)
 8002c66:	f7fe fc25 	bl	80014b4 <usart_printf>
			setMotorRPM(Bus1, M2006, M2006IDX, -270*16*reverseRotation, indexerPreset);
 8002c6a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	461a      	mov	r2, r3
 8002c72:	0112      	lsls	r2, r2, #4
 8002c74:	1ad2      	subs	r2, r2, r3
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	1ad2      	subs	r2, r2, r3
 8002c7a:	00d2      	lsls	r2, r2, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	015b      	lsls	r3, r3, #5
 8002c80:	b29b      	uxth	r3, r3
 8002c82:	b21b      	sxth	r3, r3
 8002c84:	edd7 6a01 	vldr	s13, [r7, #4]
 8002c88:	ed97 7a02 	vldr	s14, [r7, #8]
 8002c8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c90:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8002c94:	eeb0 0a66 	vmov.f32	s0, s13
 8002c98:	eef0 0a47 	vmov.f32	s1, s14
 8002c9c:	eeb0 1a67 	vmov.f32	s2, s15
 8002ca0:	2102      	movs	r1, #2
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f7fe fb78 	bl	8001398 <setMotorRPM>
			if (reverseRotation == 1) {
 8002ca8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d12e      	bne.n	8002d0e <fondlerAutoReverse+0x186>
				if (allVars[1] == 0 && getMotorRPM(Bus1, M2006, M2006IDX) <= -10) {
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f993 3000 	ldrsb.w	r3, [r3]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10f      	bne.n	8002cdc <fondlerAutoReverse+0x154>
 8002cbc:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	2102      	movs	r1, #2
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7fe fba3 	bl	8001410 <getMotorRPM>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f113 0f09 	cmn.w	r3, #9
 8002cd0:	da04      	bge.n	8002cdc <fondlerAutoReverse+0x154>
					allVars[1] = 1;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e046      	b.n	8002d6a <fondlerAutoReverse+0x1e2>
				} else if (getMotorRPM(Bus1, M2006, M2006IDX) > -1 && allVars[1] == 1) {         // jammed
 8002cdc:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	f7fe fb93 	bl	8001410 <getMotorRPM>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db5c      	blt.n	8002daa <fondlerAutoReverse+0x222>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d156      	bne.n	8002daa <fondlerAutoReverse+0x222>
					allVars[3] = 12;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	3303      	adds	r3, #3
 8002d00:	220c      	movs	r2, #12
 8002d02:	701a      	strb	r2, [r3, #0]
					allVars[1] = 0;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	3301      	adds	r3, #1
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
		if (allVars[3] > 0 && allVars[2] == 0) {
 8002d0c:	e04d      	b.n	8002daa <fondlerAutoReverse+0x222>
				}
			} else {
				if (allVars[1] == 0 && getMotorRPM(Bus1, M2006, M2006IDX) >= 10) {
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3301      	adds	r3, #1
 8002d12:	f993 3000 	ldrsb.w	r3, [r3]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10e      	bne.n	8002d38 <fondlerAutoReverse+0x1b0>
 8002d1a:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2102      	movs	r1, #2
 8002d22:	2001      	movs	r0, #1
 8002d24:	f7fe fb74 	bl	8001410 <getMotorRPM>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b09      	cmp	r3, #9
 8002d2c:	dd04      	ble.n	8002d38 <fondlerAutoReverse+0x1b0>
					allVars[1] = 1;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3301      	adds	r3, #1
 8002d32:	2201      	movs	r2, #1
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	e018      	b.n	8002d6a <fondlerAutoReverse+0x1e2>
				} else if (getMotorRPM(Bus1, M2006, M2006IDX) < 1 && allVars[1] == 1) {         // jammed
 8002d38:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	2102      	movs	r1, #2
 8002d40:	2001      	movs	r0, #1
 8002d42:	f7fe fb65 	bl	8001410 <getMotorRPM>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	dc2e      	bgt.n	8002daa <fondlerAutoReverse+0x222>
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	f993 3000 	ldrsb.w	r3, [r3]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d128      	bne.n	8002daa <fondlerAutoReverse+0x222>
					allVars[3] = 12;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	3303      	adds	r3, #3
 8002d5c:	220c      	movs	r2, #12
 8002d5e:	701a      	strb	r2, [r3, #0]
					allVars[1] = 0;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3301      	adds	r3, #1
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
		if (allVars[3] > 0 && allVars[2] == 0) {
 8002d68:	e01f      	b.n	8002daa <fondlerAutoReverse+0x222>
 8002d6a:	e01e      	b.n	8002daa <fondlerAutoReverse+0x222>
				}
			}
		}
    } else {
    	allVars[0] = 0;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
    	allVars[2] = 1;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	3302      	adds	r3, #2
 8002d76:	2201      	movs	r2, #1
 8002d78:	701a      	strb	r2, [r3, #0]
    	allVars[1] = 0;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
    	setMotorRPM(Bus1, M2006, M2006IDX, 0, indexerPreset);
 8002d82:	edd7 6a01 	vldr	s13, [r7, #4]
 8002d86:	ed97 7a02 	vldr	s14, [r7, #8]
 8002d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d8e:	f997 2012 	ldrsb.w	r2, [r7, #18]
 8002d92:	eeb0 0a66 	vmov.f32	s0, s13
 8002d96:	eef0 0a47 	vmov.f32	s1, s14
 8002d9a:	eeb0 1a67 	vmov.f32	s2, s15
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2102      	movs	r1, #2
 8002da2:	2001      	movs	r0, #1
 8002da4:	f7fe faf8 	bl	8001398 <setMotorRPM>
    }
}
 8002da8:	e000      	b.n	8002dac <fondlerAutoReverse+0x224>
		if (allVars[3] > 0 && allVars[2] == 0) {
 8002daa:	bf00      	nop
}
 8002dac:	bf00      	nop
 8002dae:	3720      	adds	r7, #32
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	08014204 	.word	0x08014204

08002db8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dbc:	b0b0      	sub	sp, #192	@ 0xc0
 8002dbe:	af04      	add	r7, sp, #16
 8002dc0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t CAN_Data[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
 8002dc2:	4ac6      	ldr	r2, [pc, #792]	@ (80030dc <StartDefaultTask+0x324>)
 8002dc4:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002dcc:	e883 0003 	stmia.w	r3, {r0, r1}
	uint32_t CAN_Extended_Header = 0xFFF0000;
 8002dd0:	4bc3      	ldr	r3, [pc, #780]	@ (80030e0 <StartDefaultTask+0x328>)
 8002dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
	uint8_t CAN_Extended_Data = 0x00;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
	uint8_t CAN_State = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
	uint16_t value_adc[] = {0, 0, 0, 0};
 8002de2:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
 8002dea:	605a      	str	r2, [r3, #4]
	uint16_t value_adc2[] = {0, 0};
 8002dec:	2300      	movs	r3, #0
 8002dee:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8002df2:	2300      	movs	r3, #0
 8002df4:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
	uint32_t voltage = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002dfe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002e02:	2100      	movs	r1, #0
 8002e04:	48b7      	ldr	r0, [pc, #732]	@ (80030e4 <StartDefaultTask+0x32c>)
 8002e06:	f003 fbe5 	bl	80065d4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002e0a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002e0e:	2100      	movs	r1, #0
 8002e10:	48b5      	ldr	r0, [pc, #724]	@ (80030e8 <StartDefaultTask+0x330>)
 8002e12:	f003 fbdf 	bl	80065d4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)value_adc, 4);
 8002e16:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	48b1      	ldr	r0, [pc, #708]	@ (80030e4 <StartDefaultTask+0x32c>)
 8002e20:	f002 fae8 	bl	80053f4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)value_adc2, 2);
 8002e24:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002e28:	2202      	movs	r2, #2
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	48ae      	ldr	r0, [pc, #696]	@ (80030e8 <StartDefaultTask+0x330>)
 8002e2e:	f002 fae1 	bl	80053f4 <HAL_ADC_Start_DMA>
	HAL_OPAMP_Start(&hopamp1);
 8002e32:	48ae      	ldr	r0, [pc, #696]	@ (80030ec <StartDefaultTask+0x334>)
 8002e34:	f008 fa7c 	bl	800b330 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 8002e38:	48ad      	ldr	r0, [pc, #692]	@ (80030f0 <StartDefaultTask+0x338>)
 8002e3a:	f008 fa79 	bl	800b330 <HAL_OPAMP_Start>
	// set_maxCurrent_cybergear(&mi_motor[0], 1);
	//set_refSpd_cybergear(&mi_motor[0], 1);
	osDelay(500);
	*/

	PID_preset_t test = {8.0, 0.0, 0.0};
 8002e3e:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 8002e42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002e44:	f04f 0300 	mov.w	r3, #0
 8002e48:	673b      	str	r3, [r7, #112]	@ 0x70
 8002e4a:	f04f 0300 	mov.w	r3, #0
 8002e4e:	677b      	str	r3, [r7, #116]	@ 0x74
	PID_preset_t test2 = {50.0, 0.0, 0.0};
 8002e50:	4ba8      	ldr	r3, [pc, #672]	@ (80030f4 <StartDefaultTask+0x33c>)
 8002e52:	663b      	str	r3, [r7, #96]	@ 0x60
 8002e54:	f04f 0300 	mov.w	r3, #0
 8002e58:	667b      	str	r3, [r7, #100]	@ 0x64
 8002e5a:	f04f 0300 	mov.w	r3, #0
 8002e5e:	66bb      	str	r3, [r7, #104]	@ 0x68

	//
	int16_t wheelPrev[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8002e60:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
		3   0

		2   1
	*/

	int8_t rotationVectors[4][2] =  {{1,  1},
 8002e6e:	4aa2      	ldr	r2, [pc, #648]	@ (80030f8 <StartDefaultTask+0x340>)
 8002e70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002e74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e78:	e883 0003 	stmia.w	r3, {r0, r1}
							 		 {-1,  1},
									 {-1,  -1},
									 {1, -1}};

	int16_t forwardsID[4] = {637, 7135, 6562, 2532};
 8002e7c:	4a9f      	ldr	r2, [pc, #636]	@ (80030fc <StartDefaultTask+0x344>)
 8002e7e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e82:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e86:	e883 0003 	stmia.w	r3, {r0, r1}

	// [MotorID][0 = MotorXVal, 1 = MotorYVal, 2 = MotorABSVal, 3 = MotorConvertedAngle], 4 = Reversal Of Motor
	int16_t motorInfo[4][5];
	int16_t DP[3] = {0, 0, 0};
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	823b      	strh	r3, [r7, #16]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	827b      	strh	r3, [r7, #18]
 8002e92:	2300      	movs	r3, #0
 8002e94:	82bb      	strh	r3, [r7, #20]
	int8_t noVelocity = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	int8_t fondlerVars[5] = {0, 0, 0, 0, 0};
 8002e9c:	f107 0308 	add.w	r3, r7, #8
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	711a      	strb	r2, [r3, #4]
  for(;;)
  {
	  // fdcanx_send_data(&hfdcan1, CAN_b2b_A_RC_Val_ID, CAN_Data, 8);
	  // setMotorRPM(Bus1, GM6020, 1, 20, test2);
	  // usart_printf("%d\r\n", getMotorRPM(Bus1, GM6020, 1));
	  usart_printf("%d %d %d %d %d %d %d\r\n", getRCfakechannel(0), getRCfakechannel(1), getRCfakechannel(2), getRCfakechannel(3), getRCfakechannel(4), getRCfakechannel(5), getRCfakechannel(6));
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	f7fd fe9e 	bl	8000be8 <getRCfakechannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	4698      	mov	r8, r3
 8002eb0:	2001      	movs	r0, #1
 8002eb2:	f7fd fe99 	bl	8000be8 <getRCfakechannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4699      	mov	r9, r3
 8002eba:	2002      	movs	r0, #2
 8002ebc:	f7fd fe94 	bl	8000be8 <getRCfakechannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	469a      	mov	sl, r3
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f7fd fe8f 	bl	8000be8 <getRCfakechannel>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	461c      	mov	r4, r3
 8002ece:	2004      	movs	r0, #4
 8002ed0:	f7fd fe8a 	bl	8000be8 <getRCfakechannel>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	461d      	mov	r5, r3
 8002ed8:	2005      	movs	r0, #5
 8002eda:	f7fd fe85 	bl	8000be8 <getRCfakechannel>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	461e      	mov	r6, r3
 8002ee2:	2006      	movs	r0, #6
 8002ee4:	f7fd fe80 	bl	8000be8 <getRCfakechannel>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	9303      	str	r3, [sp, #12]
 8002eec:	9602      	str	r6, [sp, #8]
 8002eee:	9501      	str	r5, [sp, #4]
 8002ef0:	9400      	str	r4, [sp, #0]
 8002ef2:	4653      	mov	r3, sl
 8002ef4:	464a      	mov	r2, r9
 8002ef6:	4641      	mov	r1, r8
 8002ef8:	4881      	ldr	r0, [pc, #516]	@ (8003100 <StartDefaultTask+0x348>)
 8002efa:	f7fe fadb 	bl	80014b4 <usart_printf>
		//fdcanx_send_data(&hfdcan1, 0x01, &CAN_Data, 8);
		//CAN_State = fdcanx_send_extended(&hfdcan2, CAN_Extended_Header, &CAN_Extended_Data, 8);
	  	//set_refSpd_cybergear(&mi_motor[0], 10);
	  //setMotorRPM(Bus1, M3508, 1, 2000, indexerPreset);

	  int16_t FB = 1*getRCfakechannel(0);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fd fe72 	bl	8000be8 <getRCfakechannel>
 8002f04:	4603      	mov	r3, r0
 8002f06:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
	  int16_t LR = -1*getRCfakechannel(1);
 8002f0a:	2001      	movs	r0, #1
 8002f0c:	f7fd fe6c 	bl	8000be8 <getRCfakechannel>
 8002f10:	4603      	mov	r3, r0
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	425b      	negs	r3, r3
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	  int16_t Rotate = -1*getRCfakechannel(3);
 8002f1c:	2003      	movs	r0, #3
 8002f1e:	f7fd fe63 	bl	8000be8 <getRCfakechannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	425b      	negs	r3, r3
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8

	  // int8_t altDrivingMode = getRCswitch(0);

	  if (FB == 0 && LR == 0 && Rotate == 0) {
 8002f2e:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	@ 0xac
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d114      	bne.n	8002f60 <StartDefaultTask+0x1a8>
 8002f36:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	@ 0xaa
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d110      	bne.n	8002f60 <StartDefaultTask+0x1a8>
 8002f3e:	f9b7 30a8 	ldrsh.w	r3, [r7, #168]	@ 0xa8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10c      	bne.n	8002f60 <StartDefaultTask+0x1a8>
		  FB = DP[0];
 8002f46:	8a3b      	ldrh	r3, [r7, #16]
 8002f48:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
	  	  LR = DP[1];
 8002f4c:	8a7b      	ldrh	r3, [r7, #18]
 8002f4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
	  	  Rotate = DP[2];
 8002f52:	8abb      	ldrh	r3, [r7, #20]
 8002f54:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
	  	  noVelocity = 1;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
 8002f5e:	e002      	b.n	8002f66 <StartDefaultTask+0x1ae>
	  } else {
		  noVelocity = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
	  }
	  DP[0] = FB;
 8002f66:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8002f6a:	823b      	strh	r3, [r7, #16]
	  DP[1] = LR;
 8002f6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8002f70:	827b      	strh	r3, [r7, #18]
	  DP[2] = Rotate;
 8002f72:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8002f76:	82bb      	strh	r3, [r7, #20]
// usart_printf("%d\r\n", altDrivingMode);
	  for (int8_t i = 0; i < 4; i++ ) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 8002f7e:	e09d      	b.n	80030bc <StartDefaultTask+0x304>
		  motorInfo[i][0] = LR + (Rotate * rotationVectors[i][0]);
 8002f80:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	33b0      	adds	r3, #176	@ 0xb0
 8002f88:	443b      	add	r3, r7
 8002f8a:	f913 3c68 	ldrsb.w	r3, [r3, #-104]
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8002f94:	fb12 f303 	smulbb	r3, r2, r3
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8002f9e:	4413      	add	r3, r2
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	f997 20a7 	ldrsb.w	r2, [r7, #167]	@ 0xa7
 8002fa6:	b219      	sxth	r1, r3
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	33b0      	adds	r3, #176	@ 0xb0
 8002fb2:	443b      	add	r3, r7
 8002fb4:	3b98      	subs	r3, #152	@ 0x98
 8002fb6:	460a      	mov	r2, r1
 8002fb8:	801a      	strh	r2, [r3, #0]
		  motorInfo[i][1] = FB + (Rotate * rotationVectors[i][1]);
 8002fba:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	33b0      	adds	r3, #176	@ 0xb0
 8002fc2:	443b      	add	r3, r7
 8002fc4:	f913 3c67 	ldrsb.w	r3, [r3, #-103]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	@ 0xa8
 8002fce:	fb12 f303 	smulbb	r3, r2, r3
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8002fd8:	4413      	add	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	f997 20a7 	ldrsb.w	r2, [r7, #167]	@ 0xa7
 8002fe0:	b219      	sxth	r1, r3
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	33b0      	adds	r3, #176	@ 0xb0
 8002fec:	443b      	add	r3, r7
 8002fee:	3b96      	subs	r3, #150	@ 0x96
 8002ff0:	460a      	mov	r2, r1
 8002ff2:	801a      	strh	r2, [r3, #0]
		  if (noVelocity == 0) {
 8002ff4:	f997 30af 	ldrsb.w	r3, [r7, #175]	@ 0xaf
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d14d      	bne.n	8003098 <StartDefaultTask+0x2e0>
			  motorInfo[i][2] = (int16_t)(sqrtf((float)((motorInfo[i][0]*motorInfo[i][0])+(motorInfo[i][1]*motorInfo[i][1]))));
 8002ffc:	f997 20a7 	ldrsb.w	r2, [r7, #167]	@ 0xa7
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	33b0      	adds	r3, #176	@ 0xb0
 800300a:	443b      	add	r3, r7
 800300c:	3b98      	subs	r3, #152	@ 0x98
 800300e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003012:	4619      	mov	r1, r3
 8003014:	f997 20a7 	ldrsb.w	r2, [r7, #167]	@ 0xa7
 8003018:	4613      	mov	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	4413      	add	r3, r2
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	33b0      	adds	r3, #176	@ 0xb0
 8003022:	443b      	add	r3, r7
 8003024:	3b98      	subs	r3, #152	@ 0x98
 8003026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800302a:	fb03 f101 	mul.w	r1, r3, r1
 800302e:	f997 20a7 	ldrsb.w	r2, [r7, #167]	@ 0xa7
 8003032:	4613      	mov	r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	4413      	add	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	33b0      	adds	r3, #176	@ 0xb0
 800303c:	443b      	add	r3, r7
 800303e:	3b96      	subs	r3, #150	@ 0x96
 8003040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003044:	4618      	mov	r0, r3
 8003046:	f997 20a7 	ldrsb.w	r2, [r7, #167]	@ 0xa7
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	33b0      	adds	r3, #176	@ 0xb0
 8003054:	443b      	add	r3, r7
 8003056:	3b96      	subs	r3, #150	@ 0x96
 8003058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800305c:	fb00 f303 	mul.w	r3, r0, r3
 8003060:	440b      	add	r3, r1
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306a:	eeb0 0a67 	vmov.f32	s0, s15
 800306e:	f010 ff97 	bl	8013fa0 <sqrtf>
 8003072:	eef0 7a40 	vmov.f32	s15, s0
 8003076:	f997 20a7 	ldrsb.w	r2, [r7, #167]	@ 0xa7
 800307a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800307e:	ee17 3a90 	vmov	r3, s15
 8003082:	b219      	sxth	r1, r3
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	33b0      	adds	r3, #176	@ 0xb0
 800308e:	443b      	add	r3, r7
 8003090:	3b94      	subs	r3, #148	@ 0x94
 8003092:	460a      	mov	r2, r1
 8003094:	801a      	strh	r2, [r3, #0]
 8003096:	e00a      	b.n	80030ae <StartDefaultTask+0x2f6>
		  } else {
			  motorInfo[i][2] = 0;
 8003098:	f997 20a7 	ldrsb.w	r2, [r7, #167]	@ 0xa7
 800309c:	4613      	mov	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	4413      	add	r3, r2
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	33b0      	adds	r3, #176	@ 0xb0
 80030a6:	443b      	add	r3, r7
 80030a8:	3b94      	subs	r3, #148	@ 0x94
 80030aa:	2200      	movs	r2, #0
 80030ac:	801a      	strh	r2, [r3, #0]
	  for (int8_t i = 0; i < 4; i++ ) {
 80030ae:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	3301      	adds	r3, #1
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
 80030bc:	f997 30a7 	ldrsb.w	r3, [r7, #167]	@ 0xa7
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	f77f af5d 	ble.w	8002f80 <StartDefaultTask+0x1c8>
		  }
	  }

	  float SScalerVal = swerveScaler(motorInfo);
 80030c6:	f107 0318 	add.w	r3, r7, #24
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fd0e 	bl	8002aec <swerveScaler>
 80030d0:	ed87 0a24 	vstr	s0, [r7, #144]	@ 0x90

	  // Swerve Motor
	  for (int8_t j = 0; j < 4; j++) {
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 80030da:	e094      	b.n	8003206 <StartDefaultTask+0x44e>
 80030dc:	0801422c 	.word	0x0801422c
 80030e0:	0fff0000 	.word	0x0fff0000
 80030e4:	2400079c 	.word	0x2400079c
 80030e8:	2400080c 	.word	0x2400080c
 80030ec:	24000bf4 	.word	0x24000bf4
 80030f0:	24000c28 	.word	0x24000c28
 80030f4:	42480000 	.word	0x42480000
 80030f8:	08014234 	.word	0x08014234
 80030fc:	0801423c 	.word	0x0801423c
 8003100:	08014214 	.word	0x08014214
		  // Scales Motor Speed Output
		  // 800*11.25 = 9000
		  motorInfo[j][2] = (float)motorInfo[j][2] * SScalerVal * 11.25;
 8003104:	f997 20a6 	ldrsb.w	r2, [r7, #166]	@ 0xa6
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	33b0      	adds	r3, #176	@ 0xb0
 8003112:	443b      	add	r3, r7
 8003114:	3b94      	subs	r3, #148	@ 0x94
 8003116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800311a:	ee07 3a90 	vmov	s15, r3
 800311e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003122:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8003126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800312a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800312e:	ed9f 6b70 	vldr	d6, [pc, #448]	@ 80032f0 <StartDefaultTask+0x538>
 8003132:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003136:	f997 20a6 	ldrsb.w	r2, [r7, #166]	@ 0xa6
 800313a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800313e:	ee17 3a90 	vmov	r3, s15
 8003142:	b219      	sxth	r1, r3
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	33b0      	adds	r3, #176	@ 0xb0
 800314e:	443b      	add	r3, r7
 8003150:	3b94      	subs	r3, #148	@ 0x94
 8003152:	460a      	mov	r2, r1
 8003154:	801a      	strh	r2, [r3, #0]

		  int16_t trigAng = (int16_t)(4095.5f*(determiningTrigAngle(motorInfo[j])/M_PI));
 8003156:	f997 20a6 	ldrsb.w	r2, [r7, #166]	@ 0xa6
 800315a:	f107 0118 	add.w	r1, r7, #24
 800315e:	4613      	mov	r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	440b      	add	r3, r1
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fc35 	bl	80029d8 <determiningTrigAngle>
 800316e:	eef0 7a40 	vmov.f32	s15, s0
 8003172:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8003176:	ed9f 5b60 	vldr	d5, [pc, #384]	@ 80032f8 <StartDefaultTask+0x540>
 800317a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800317e:	ed9f 6b60 	vldr	d6, [pc, #384]	@ 8003300 <StartDefaultTask+0x548>
 8003182:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003186:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800318a:	ee17 3a90 	vmov	r3, s15
 800318e:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e

		  int16_t tempAngle = trigAng+forwardsID[j];
 8003192:	f997 30a6 	ldrsb.w	r3, [r7, #166]	@ 0xa6
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	33b0      	adds	r3, #176	@ 0xb0
 800319a:	443b      	add	r3, r7
 800319c:	f933 3c70 	ldrsh.w	r3, [r3, #-112]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80031a6:	4413      	add	r3, r2
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
		  if (tempAngle > 8191) {
 80031ae:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 80031b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031b6:	db07      	blt.n	80031c8 <StartDefaultTask+0x410>
			  tempAngle = tempAngle-8191;
 80031b8:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80031bc:	4b52      	ldr	r3, [pc, #328]	@ (8003308 <StartDefaultTask+0x550>)
 80031be:	4413      	add	r3, r2
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
 80031c6:	e00b      	b.n	80031e0 <StartDefaultTask+0x428>
		  } else if (tempAngle < 0) {
 80031c8:	f9b7 30a4 	ldrsh.w	r3, [r7, #164]	@ 0xa4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	da07      	bge.n	80031e0 <StartDefaultTask+0x428>
			  tempAngle = tempAngle+8191;
 80031d0:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80031d4:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80031d8:	4413      	add	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
		  }
		  motorInfo[j][3] = tempAngle;
 80031e0:	f997 20a6 	ldrsb.w	r2, [r7, #166]	@ 0xa6
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	33b0      	adds	r3, #176	@ 0xb0
 80031ee:	443b      	add	r3, r7
 80031f0:	3b92      	subs	r3, #146	@ 0x92
 80031f2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80031f6:	801a      	strh	r2, [r3, #0]
	  for (int8_t j = 0; j < 4; j++) {
 80031f8:	f997 30a6 	ldrsb.w	r3, [r7, #166]	@ 0xa6
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	f887 30a6 	strb.w	r3, [r7, #166]	@ 0xa6
 8003206:	f997 30a6 	ldrsb.w	r3, [r7, #166]	@ 0xa6
 800320a:	2b03      	cmp	r3, #3
 800320c:	f77f af7a 	ble.w	8003104 <StartDefaultTask+0x34c>
	  }

	  // Drive Motor

	  for (int8_t k = 0; k < 4; k++) {
 8003210:	2300      	movs	r3, #0
 8003212:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 8003216:	e009      	b.n	800322c <StartDefaultTask+0x474>
		  // CAN_setMotorCtrlVal(Bus1, GM6020, k+1, PD(GM6020, &wheelPrev[k], wheelRotation (getRotorPosition(Bus1, GM6020, k+1), motorInfo[k][3]), 40, 30));
		  osDelay(1);
 8003218:	2001      	movs	r0, #1
 800321a:	f00f f814 	bl	8012246 <osDelay>
	  for (int8_t k = 0; k < 4; k++) {
 800321e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	b2db      	uxtb	r3, r3
 8003228:	f887 30a3 	strb.w	r3, [r7, #163]	@ 0xa3
 800322c:	f997 30a3 	ldrsb.w	r3, [r7, #163]	@ 0xa3
 8003230:	2b03      	cmp	r3, #3
 8003232:	ddf1      	ble.n	8003218 <StartDefaultTask+0x460>
		  } else {
			  // setMotorRPM(Bus1, M3508, k+1, motorInfo[k][2], test);
		  }
	  }
	  // setMotorRPM(Bus1, GM6020, 6, 100, test2);
	  osDelay(1);
 8003234:	2001      	movs	r0, #1
 8003236:	f00f f806 	bl	8012246 <osDelay>
	  // setMotorRPM(Bus1, GM6020, 5, getRCfakechannel(4), test2);//getRCfakechannel(4)
	  osDelay(1);
 800323a:	2001      	movs	r0, #1
 800323c:	f00f f803 	bl	8012246 <osDelay>
	  osDelay(1);
	  */
	  // uint16_t tempor = getRotorPosition(Bus1, GM6020, 1);
	  // usart_printf("%d\r\n", getRotorPosition(Bus1, GM6020, 1));
	  // setMotorRPM(Bus1, GM6020, 0, 10, test2);
	  if (getRCfakechannel(5) == 2) {
 8003240:	2005      	movs	r0, #5
 8003242:	f7fd fcd1 	bl	8000be8 <getRCfakechannel>
 8003246:	4603      	mov	r3, r0
 8003248:	2b02      	cmp	r3, #2
 800324a:	d127      	bne.n	800329c <StartDefaultTask+0x4e4>
		  fondlerAutoReverse (fondlerVars, 1, 1, -1, test);
 800324c:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8003250:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 8003254:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003258:	f107 0008 	add.w	r0, r7, #8
 800325c:	eeb0 0a66 	vmov.f32	s0, s13
 8003260:	eef0 0a47 	vmov.f32	s1, s14
 8003264:	eeb0 1a67 	vmov.f32	s2, s15
 8003268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800326c:	2201      	movs	r2, #1
 800326e:	2101      	movs	r1, #1
 8003270:	f7ff fc8a 	bl	8002b88 <fondlerAutoReverse>
		  setMotorRPM(Bus1, M2006, 1, 6000, test);
 8003274:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8003278:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 800327c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003280:	eeb0 0a66 	vmov.f32	s0, s13
 8003284:	eef0 0a47 	vmov.f32	s1, s14
 8003288:	eeb0 1a67 	vmov.f32	s2, s15
 800328c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8003290:	2201      	movs	r2, #1
 8003292:	2102      	movs	r1, #2
 8003294:	2001      	movs	r0, #1
 8003296:	f7fe f87f 	bl	8001398 <setMotorRPM>
 800329a:	e025      	b.n	80032e8 <StartDefaultTask+0x530>
	  } else {
		  fondlerAutoReverse (fondlerVars, 0, 1, -1, test);
 800329c:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80032a0:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80032a4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80032a8:	f107 0008 	add.w	r0, r7, #8
 80032ac:	eeb0 0a66 	vmov.f32	s0, s13
 80032b0:	eef0 0a47 	vmov.f32	s1, s14
 80032b4:	eeb0 1a67 	vmov.f32	s2, s15
 80032b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80032bc:	2201      	movs	r2, #1
 80032be:	2100      	movs	r1, #0
 80032c0:	f7ff fc62 	bl	8002b88 <fondlerAutoReverse>
		  setMotorRPM(Bus1, M2006, 1, 0, test);
 80032c4:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 80032c8:	ed97 7a1c 	vldr	s14, [r7, #112]	@ 0x70
 80032cc:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80032d0:	eeb0 0a66 	vmov.f32	s0, s13
 80032d4:	eef0 0a47 	vmov.f32	s1, s14
 80032d8:	eeb0 1a67 	vmov.f32	s2, s15
 80032dc:	2300      	movs	r3, #0
 80032de:	2201      	movs	r2, #1
 80032e0:	2102      	movs	r1, #2
 80032e2:	2001      	movs	r0, #1
 80032e4:	f7fe f858 	bl	8001398 <setMotorRPM>
	  }


	  // setMotorRPM(Bus1, M2006, 1, 6000, test);
		osDelay(1);
 80032e8:	2001      	movs	r0, #1
 80032ea:	f00e ffac 	bl	8012246 <osDelay>
  {
 80032ee:	e5da      	b.n	8002ea6 <StartDefaultTask+0xee>
 80032f0:	00000000 	.word	0x00000000
 80032f4:	40268000 	.word	0x40268000
 80032f8:	54442d18 	.word	0x54442d18
 80032fc:	400921fb 	.word	0x400921fb
 8003300:	00000000 	.word	0x00000000
 8003304:	40afff00 	.word	0x40afff00
 8003308:	ffffe001 	.word	0xffffe001

0800330c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800330c:	b480      	push	{r7}
 800330e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003310:	b672      	cpsid	i
}
 8003312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003314:	bf00      	nop
 8003316:	e7fd      	b.n	8003314 <Error_Handler+0x8>

08003318 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	4b0c      	ldr	r3, [pc, #48]	@ (8003350 <HAL_MspInit+0x38>)
 8003320:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003324:	4a0a      	ldr	r2, [pc, #40]	@ (8003350 <HAL_MspInit+0x38>)
 8003326:	f043 0302 	orr.w	r3, r3, #2
 800332a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800332e:	4b08      	ldr	r3, [pc, #32]	@ (8003350 <HAL_MspInit+0x38>)
 8003330:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	607b      	str	r3, [r7, #4]
 800333a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	210f      	movs	r1, #15
 8003340:	f06f 0001 	mvn.w	r0, #1
 8003344:	f003 fb67 	bl	8006a16 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	58024400 	.word	0x58024400

08003354 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b08e      	sub	sp, #56	@ 0x38
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800335c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]
 8003368:	60da      	str	r2, [r3, #12]
 800336a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a93      	ldr	r2, [pc, #588]	@ (80035c0 <HAL_ADC_MspInit+0x26c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	f040 80b6 	bne.w	80034e4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003378:	4b92      	ldr	r3, [pc, #584]	@ (80035c4 <HAL_ADC_MspInit+0x270>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	4a91      	ldr	r2, [pc, #580]	@ (80035c4 <HAL_ADC_MspInit+0x270>)
 8003380:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003382:	4b90      	ldr	r3, [pc, #576]	@ (80035c4 <HAL_ADC_MspInit+0x270>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10e      	bne.n	80033a8 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800338a:	4b8f      	ldr	r3, [pc, #572]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 800338c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003390:	4a8d      	ldr	r2, [pc, #564]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 8003392:	f043 0320 	orr.w	r3, r3, #32
 8003396:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800339a:	4b8b      	ldr	r3, [pc, #556]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 800339c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a8:	4b87      	ldr	r3, [pc, #540]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 80033aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ae:	4a86      	ldr	r2, [pc, #536]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033b8:	4b83      	ldr	r3, [pc, #524]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 80033ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
 80033c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033c6:	4b80      	ldr	r3, [pc, #512]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 80033c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033cc:	4a7e      	ldr	r2, [pc, #504]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 80033ce:	f043 0304 	orr.w	r3, r3, #4
 80033d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033d6:	4b7c      	ldr	r3, [pc, #496]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 80033d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	61bb      	str	r3, [r7, #24]
 80033e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e4:	4b78      	ldr	r3, [pc, #480]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 80033e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033ea:	4a77      	ldr	r2, [pc, #476]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 80033ec:	f043 0302 	orr.w	r3, r3, #2
 80033f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80033f4:	4b74      	ldr	r3, [pc, #464]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 80033f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80033fa:	f003 0302 	and.w	r3, r3, #2
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003402:	4b71      	ldr	r3, [pc, #452]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 8003404:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003408:	4a6f      	ldr	r2, [pc, #444]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 800340a:	f043 0320 	orr.w	r3, r3, #32
 800340e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003412:	4b6d      	ldr	r3, [pc, #436]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003418:	f003 0320 	and.w	r3, r3, #32
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = Iref_Pin;
 8003420:	2340      	movs	r3, #64	@ 0x40
 8003422:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003424:	2303      	movs	r3, #3
 8003426:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Iref_GPIO_Port, &GPIO_InitStruct);
 800342c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003430:	4619      	mov	r1, r3
 8003432:	4866      	ldr	r0, [pc, #408]	@ (80035cc <HAL_ADC_MspInit+0x278>)
 8003434:	f007 fba4 	bl	800ab80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Vbus_Pin;
 8003438:	2310      	movs	r3, #16
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800343c:	2303      	movs	r3, #3
 800343e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Vbus_GPIO_Port, &GPIO_InitStruct);
 8003444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003448:	4619      	mov	r1, r3
 800344a:	4861      	ldr	r0, [pc, #388]	@ (80035d0 <HAL_ADC_MspInit+0x27c>)
 800344c:	f007 fb98 	bl	800ab80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IbridgeA_Pin;
 8003450:	2302      	movs	r3, #2
 8003452:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003454:	2303      	movs	r3, #3
 8003456:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(IbridgeA_GPIO_Port, &GPIO_InitStruct);
 800345c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003460:	4619      	mov	r1, r3
 8003462:	485c      	ldr	r0, [pc, #368]	@ (80035d4 <HAL_ADC_MspInit+0x280>)
 8003464:	f007 fb8c 	bl	800ab80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IbridgeB_Pin;
 8003468:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800346c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800346e:	2303      	movs	r3, #3
 8003470:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(IbridgeB_GPIO_Port, &GPIO_InitStruct);
 8003476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800347a:	4619      	mov	r1, r3
 800347c:	4856      	ldr	r0, [pc, #344]	@ (80035d8 <HAL_ADC_MspInit+0x284>)
 800347e:	f007 fb7f 	bl	800ab80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream6;
 8003482:	4b56      	ldr	r3, [pc, #344]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 8003484:	4a56      	ldr	r2, [pc, #344]	@ (80035e0 <HAL_ADC_MspInit+0x28c>)
 8003486:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003488:	4b54      	ldr	r3, [pc, #336]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 800348a:	2209      	movs	r2, #9
 800348c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800348e:	4b53      	ldr	r3, [pc, #332]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 8003490:	2200      	movs	r2, #0
 8003492:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003494:	4b51      	ldr	r3, [pc, #324]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 8003496:	2200      	movs	r2, #0
 8003498:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800349a:	4b50      	ldr	r3, [pc, #320]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 800349c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80034a2:	4b4e      	ldr	r3, [pc, #312]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 80034a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80034aa:	4b4c      	ldr	r3, [pc, #304]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 80034ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80034b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034b2:	4b4a      	ldr	r3, [pc, #296]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 80034b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034ba:	4b48      	ldr	r3, [pc, #288]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 80034bc:	2200      	movs	r2, #0
 80034be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c0:	4b46      	ldr	r3, [pc, #280]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80034c6:	4845      	ldr	r0, [pc, #276]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 80034c8:	f003 fada 	bl	8006a80 <HAL_DMA_Init>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_ADC_MspInit+0x182>
    {
      Error_Handler();
 80034d2:	f7ff ff1b 	bl	800330c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a40      	ldr	r2, [pc, #256]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58
 80034dc:	4a3f      	ldr	r2, [pc, #252]	@ (80035dc <HAL_ADC_MspInit+0x288>)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80034e2:	e068      	b.n	80035b6 <HAL_ADC_MspInit+0x262>
  else if(hadc->Instance==ADC2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a3e      	ldr	r2, [pc, #248]	@ (80035e4 <HAL_ADC_MspInit+0x290>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d163      	bne.n	80035b6 <HAL_ADC_MspInit+0x262>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80034ee:	4b35      	ldr	r3, [pc, #212]	@ (80035c4 <HAL_ADC_MspInit+0x270>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3301      	adds	r3, #1
 80034f4:	4a33      	ldr	r2, [pc, #204]	@ (80035c4 <HAL_ADC_MspInit+0x270>)
 80034f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80034f8:	4b32      	ldr	r3, [pc, #200]	@ (80035c4 <HAL_ADC_MspInit+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d10e      	bne.n	800351e <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003500:	4b31      	ldr	r3, [pc, #196]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 8003502:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003506:	4a30      	ldr	r2, [pc, #192]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 8003508:	f043 0320 	orr.w	r3, r3, #32
 800350c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8003510:	4b2d      	ldr	r3, [pc, #180]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 8003512:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8003516:	f003 0320 	and.w	r3, r3, #32
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800351e:	4b2a      	ldr	r3, [pc, #168]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 8003520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003524:	4a28      	ldr	r2, [pc, #160]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 8003526:	f043 0320 	orr.w	r3, r3, #32
 800352a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800352e:	4b26      	ldr	r3, [pc, #152]	@ (80035c8 <HAL_ADC_MspInit+0x274>)
 8003530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	60bb      	str	r3, [r7, #8]
 800353a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Vcap_Pin;
 800353c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003540:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003542:	2303      	movs	r3, #3
 8003544:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003546:	2300      	movs	r3, #0
 8003548:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Vcap_GPIO_Port, &GPIO_InitStruct);
 800354a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800354e:	4619      	mov	r1, r3
 8003550:	4821      	ldr	r0, [pc, #132]	@ (80035d8 <HAL_ADC_MspInit+0x284>)
 8003552:	f007 fb15 	bl	800ab80 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream7;
 8003556:	4b24      	ldr	r3, [pc, #144]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 8003558:	4a24      	ldr	r2, [pc, #144]	@ (80035ec <HAL_ADC_MspInit+0x298>)
 800355a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800355c:	4b22      	ldr	r3, [pc, #136]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 800355e:	220a      	movs	r2, #10
 8003560:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003562:	4b21      	ldr	r3, [pc, #132]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 8003564:	2200      	movs	r2, #0
 8003566:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003568:	4b1f      	ldr	r3, [pc, #124]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 800356a:	2200      	movs	r2, #0
 800356c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800356e:	4b1e      	ldr	r3, [pc, #120]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 8003570:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003574:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003576:	4b1c      	ldr	r3, [pc, #112]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 8003578:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800357c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800357e:	4b1a      	ldr	r3, [pc, #104]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 8003580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003584:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8003586:	4b18      	ldr	r3, [pc, #96]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 8003588:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800358c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800358e:	4b16      	ldr	r3, [pc, #88]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 8003590:	2200      	movs	r2, #0
 8003592:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003594:	4b14      	ldr	r3, [pc, #80]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 8003596:	2200      	movs	r2, #0
 8003598:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800359a:	4813      	ldr	r0, [pc, #76]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 800359c:	f003 fa70 	bl	8006a80 <HAL_DMA_Init>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_ADC_MspInit+0x256>
      Error_Handler();
 80035a6:	f7ff feb1 	bl	800330c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0e      	ldr	r2, [pc, #56]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 80035ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80035b0:	4a0d      	ldr	r2, [pc, #52]	@ (80035e8 <HAL_ADC_MspInit+0x294>)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80035b6:	bf00      	nop
 80035b8:	3738      	adds	r7, #56	@ 0x38
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40022000 	.word	0x40022000
 80035c4:	24001450 	.word	0x24001450
 80035c8:	58024400 	.word	0x58024400
 80035cc:	58020000 	.word	0x58020000
 80035d0:	58020800 	.word	0x58020800
 80035d4:	58020400 	.word	0x58020400
 80035d8:	58021400 	.word	0x58021400
 80035dc:	2400087c 	.word	0x2400087c
 80035e0:	400200a0 	.word	0x400200a0
 80035e4:	40022100 	.word	0x40022100
 80035e8:	240008f4 	.word	0x240008f4
 80035ec:	400200b8 	.word	0x400200b8

080035f0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08e      	sub	sp, #56	@ 0x38
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035fc:	2200      	movs	r2, #0
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	609a      	str	r2, [r3, #8]
 8003604:	60da      	str	r2, [r3, #12]
 8003606:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a74      	ldr	r2, [pc, #464]	@ (80037e0 <HAL_FDCAN_MspInit+0x1f0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d148      	bne.n	80036a4 <HAL_FDCAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003612:	4b74      	ldr	r3, [pc, #464]	@ (80037e4 <HAL_FDCAN_MspInit+0x1f4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3301      	adds	r3, #1
 8003618:	4a72      	ldr	r2, [pc, #456]	@ (80037e4 <HAL_FDCAN_MspInit+0x1f4>)
 800361a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800361c:	4b71      	ldr	r3, [pc, #452]	@ (80037e4 <HAL_FDCAN_MspInit+0x1f4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d10e      	bne.n	8003642 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003624:	4b70      	ldr	r3, [pc, #448]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 8003626:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800362a:	4a6f      	ldr	r2, [pc, #444]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 800362c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003630:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003634:	4b6c      	ldr	r3, [pc, #432]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 8003636:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 800363a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800363e:	623b      	str	r3, [r7, #32]
 8003640:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003642:	4b69      	ldr	r3, [pc, #420]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 8003644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003648:	4a67      	ldr	r2, [pc, #412]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 800364a:	f043 0302 	orr.w	r3, r3, #2
 800364e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003652:	4b65      	ldr	r3, [pc, #404]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 8003654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	61fb      	str	r3, [r7, #28]
 800365e:	69fb      	ldr	r3, [r7, #28]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003660:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800366a:	2300      	movs	r3, #0
 800366c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800366e:	2300      	movs	r3, #0
 8003670:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003672:	2309      	movs	r3, #9
 8003674:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003676:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800367a:	4619      	mov	r1, r3
 800367c:	485b      	ldr	r0, [pc, #364]	@ (80037ec <HAL_FDCAN_MspInit+0x1fc>)
 800367e:	f007 fa7f 	bl	800ab80 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8003682:	2200      	movs	r2, #0
 8003684:	2105      	movs	r1, #5
 8003686:	2013      	movs	r0, #19
 8003688:	f003 f9c5 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800368c:	2013      	movs	r0, #19
 800368e:	f003 f9dc 	bl	8006a4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8003692:	2200      	movs	r2, #0
 8003694:	2105      	movs	r1, #5
 8003696:	2015      	movs	r0, #21
 8003698:	f003 f9bd 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800369c:	2015      	movs	r0, #21
 800369e:	f003 f9d4 	bl	8006a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80036a2:	e099      	b.n	80037d8 <HAL_FDCAN_MspInit+0x1e8>
  else if(hfdcan->Instance==FDCAN2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a51      	ldr	r2, [pc, #324]	@ (80037f0 <HAL_FDCAN_MspInit+0x200>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d147      	bne.n	800373e <HAL_FDCAN_MspInit+0x14e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80036ae:	4b4d      	ldr	r3, [pc, #308]	@ (80037e4 <HAL_FDCAN_MspInit+0x1f4>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	4a4b      	ldr	r2, [pc, #300]	@ (80037e4 <HAL_FDCAN_MspInit+0x1f4>)
 80036b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80036b8:	4b4a      	ldr	r3, [pc, #296]	@ (80037e4 <HAL_FDCAN_MspInit+0x1f4>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10e      	bne.n	80036de <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80036c0:	4b49      	ldr	r3, [pc, #292]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 80036c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80036c6:	4a48      	ldr	r2, [pc, #288]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 80036c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036cc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80036d0:	4b45      	ldr	r3, [pc, #276]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 80036d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80036d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036da:	61bb      	str	r3, [r7, #24]
 80036dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036de:	4b42      	ldr	r3, [pc, #264]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 80036e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036e4:	4a40      	ldr	r2, [pc, #256]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 80036e6:	f043 0302 	orr.w	r3, r3, #2
 80036ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80036ee:	4b3e      	ldr	r3, [pc, #248]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 80036f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80036fc:	2360      	movs	r3, #96	@ 0x60
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003700:	2302      	movs	r3, #2
 8003702:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003704:	2300      	movs	r3, #0
 8003706:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003708:	2300      	movs	r3, #0
 800370a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800370c:	2309      	movs	r3, #9
 800370e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003710:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003714:	4619      	mov	r1, r3
 8003716:	4835      	ldr	r0, [pc, #212]	@ (80037ec <HAL_FDCAN_MspInit+0x1fc>)
 8003718:	f007 fa32 	bl	800ab80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 800371c:	2200      	movs	r2, #0
 800371e:	2105      	movs	r1, #5
 8003720:	2014      	movs	r0, #20
 8003722:	f003 f978 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8003726:	2014      	movs	r0, #20
 8003728:	f003 f98f 	bl	8006a4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 5, 0);
 800372c:	2200      	movs	r2, #0
 800372e:	2105      	movs	r1, #5
 8003730:	2016      	movs	r0, #22
 8003732:	f003 f970 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8003736:	2016      	movs	r0, #22
 8003738:	f003 f987 	bl	8006a4a <HAL_NVIC_EnableIRQ>
}
 800373c:	e04c      	b.n	80037d8 <HAL_FDCAN_MspInit+0x1e8>
  else if(hfdcan->Instance==FDCAN3)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a2c      	ldr	r2, [pc, #176]	@ (80037f4 <HAL_FDCAN_MspInit+0x204>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d147      	bne.n	80037d8 <HAL_FDCAN_MspInit+0x1e8>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003748:	4b26      	ldr	r3, [pc, #152]	@ (80037e4 <HAL_FDCAN_MspInit+0x1f4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	4a25      	ldr	r2, [pc, #148]	@ (80037e4 <HAL_FDCAN_MspInit+0x1f4>)
 8003750:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003752:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <HAL_FDCAN_MspInit+0x1f4>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2b01      	cmp	r3, #1
 8003758:	d10e      	bne.n	8003778 <HAL_FDCAN_MspInit+0x188>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800375a:	4b23      	ldr	r3, [pc, #140]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 800375c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003760:	4a21      	ldr	r2, [pc, #132]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 8003762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003766:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800376a:	4b1f      	ldr	r3, [pc, #124]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 800376c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003774:	613b      	str	r3, [r7, #16]
 8003776:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 800377a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800377e:	4a1a      	ldr	r2, [pc, #104]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 8003780:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003784:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003788:	4b17      	ldr	r3, [pc, #92]	@ (80037e8 <HAL_FDCAN_MspInit+0x1f8>)
 800378a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800378e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003796:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379c:	2302      	movs	r3, #2
 800379e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a4:	2300      	movs	r3, #0
 80037a6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80037a8:	2302      	movs	r3, #2
 80037aa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80037ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80037b0:	4619      	mov	r1, r3
 80037b2:	4811      	ldr	r0, [pc, #68]	@ (80037f8 <HAL_FDCAN_MspInit+0x208>)
 80037b4:	f007 f9e4 	bl	800ab80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 5, 0);
 80037b8:	2200      	movs	r2, #0
 80037ba:	2105      	movs	r1, #5
 80037bc:	209f      	movs	r0, #159	@ 0x9f
 80037be:	f003 f92a 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 80037c2:	209f      	movs	r0, #159	@ 0x9f
 80037c4:	f003 f941 	bl	8006a4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 5, 0);
 80037c8:	2200      	movs	r2, #0
 80037ca:	2105      	movs	r1, #5
 80037cc:	20a0      	movs	r0, #160	@ 0xa0
 80037ce:	f003 f922 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 80037d2:	20a0      	movs	r0, #160	@ 0xa0
 80037d4:	f003 f939 	bl	8006a4a <HAL_NVIC_EnableIRQ>
}
 80037d8:	bf00      	nop
 80037da:	3738      	adds	r7, #56	@ 0x38
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	4000a000 	.word	0x4000a000
 80037e4:	24001454 	.word	0x24001454
 80037e8:	58024400 	.word	0x58024400
 80037ec:	58020400 	.word	0x58020400
 80037f0:	4000a400 	.word	0x4000a400
 80037f4:	4000d400 	.word	0x4000d400
 80037f8:	58021800 	.word	0x58021800

080037fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b0ba      	sub	sp, #232	@ 0xe8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003804:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	609a      	str	r2, [r3, #8]
 8003810:	60da      	str	r2, [r3, #12]
 8003812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003814:	f107 0318 	add.w	r3, r7, #24
 8003818:	22b8      	movs	r2, #184	@ 0xb8
 800381a:	2100      	movs	r1, #0
 800381c:	4618      	mov	r0, r3
 800381e:	f00f ff41 	bl	80136a4 <memset>
  if(hi2c->Instance==I2C2)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a4d      	ldr	r2, [pc, #308]	@ (800395c <HAL_I2C_MspInit+0x160>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d147      	bne.n	80038bc <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800382c:	f04f 0208 	mov.w	r2, #8
 8003830:	f04f 0300 	mov.w	r3, #0
 8003834:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003838:	2300      	movs	r3, #0
 800383a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800383e:	f107 0318 	add.w	r3, r7, #24
 8003842:	4618      	mov	r0, r3
 8003844:	f008 fd46 	bl	800c2d4 <HAL_RCCEx_PeriphCLKConfig>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800384e:	f7ff fd5d 	bl	800330c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003852:	4b43      	ldr	r3, [pc, #268]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 8003854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003858:	4a41      	ldr	r2, [pc, #260]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003862:	4b3f      	ldr	r3, [pc, #252]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 8003864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003870:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003874:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003878:	2312      	movs	r3, #18
 800387a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003884:	2300      	movs	r3, #0
 8003886:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800388a:	2304      	movs	r3, #4
 800388c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003890:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003894:	4619      	mov	r1, r3
 8003896:	4833      	ldr	r0, [pc, #204]	@ (8003964 <HAL_I2C_MspInit+0x168>)
 8003898:	f007 f972 	bl	800ab80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800389c:	4b30      	ldr	r3, [pc, #192]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 800389e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 80038a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80038a8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80038ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 80038ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80038ba:	e04b      	b.n	8003954 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C4)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a29      	ldr	r2, [pc, #164]	@ (8003968 <HAL_I2C_MspInit+0x16c>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d146      	bne.n	8003954 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80038c6:	f04f 0210 	mov.w	r2, #16
 80038ca:	f04f 0300 	mov.w	r3, #0
 80038ce:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80038d2:	2300      	movs	r3, #0
 80038d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038d8:	f107 0318 	add.w	r3, r7, #24
 80038dc:	4618      	mov	r0, r3
 80038de:	f008 fcf9 	bl	800c2d4 <HAL_RCCEx_PeriphCLKConfig>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80038e8:	f7ff fd10 	bl	800330c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80038ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 80038ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80038f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 80038f4:	f043 0320 	orr.w	r3, r3, #32
 80038f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80038fc:	4b18      	ldr	r3, [pc, #96]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 80038fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800390a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800390e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003912:	2312      	movs	r3, #18
 8003914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800391e:	2300      	movs	r3, #0
 8003920:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003924:	2304      	movs	r3, #4
 8003926:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800392a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800392e:	4619      	mov	r1, r3
 8003930:	480e      	ldr	r0, [pc, #56]	@ (800396c <HAL_I2C_MspInit+0x170>)
 8003932:	f007 f925 	bl	800ab80 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003936:	4b0a      	ldr	r3, [pc, #40]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 8003938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800393c:	4a08      	ldr	r2, [pc, #32]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 800393e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003942:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003946:	4b06      	ldr	r3, [pc, #24]	@ (8003960 <HAL_I2C_MspInit+0x164>)
 8003948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800394c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]
}
 8003954:	bf00      	nop
 8003956:	37e8      	adds	r7, #232	@ 0xe8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	40005800 	.word	0x40005800
 8003960:	58024400 	.word	0x58024400
 8003964:	58020400 	.word	0x58020400
 8003968:	58001c00 	.word	0x58001c00
 800396c:	58021400 	.word	0x58021400

08003970 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	@ 0x38
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	609a      	str	r2, [r3, #8]
 8003984:	60da      	str	r2, [r3, #12]
 8003986:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a54      	ldr	r2, [pc, #336]	@ (8003ae0 <HAL_OPAMP_MspInit+0x170>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d14e      	bne.n	8003a30 <HAL_OPAMP_MspInit+0xc0>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OPAMP_CLK_ENABLED++;
 8003992:	4b54      	ldr	r3, [pc, #336]	@ (8003ae4 <HAL_OPAMP_MspInit+0x174>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	4a52      	ldr	r2, [pc, #328]	@ (8003ae4 <HAL_OPAMP_MspInit+0x174>)
 800399a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 800399c:	4b51      	ldr	r3, [pc, #324]	@ (8003ae4 <HAL_OPAMP_MspInit+0x174>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d10e      	bne.n	80039c2 <HAL_OPAMP_MspInit+0x52>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 80039a4:	4b50      	ldr	r3, [pc, #320]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 80039a6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80039aa:	4a4f      	ldr	r2, [pc, #316]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 80039ac:	f043 0310 	orr.w	r3, r3, #16
 80039b0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80039b4:	4b4c      	ldr	r3, [pc, #304]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 80039b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80039ba:	f003 0310 	and.w	r3, r3, #16
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c2:	4b49      	ldr	r3, [pc, #292]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 80039c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039c8:	4a47      	ldr	r2, [pc, #284]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 80039ca:	f043 0304 	orr.w	r3, r3, #4
 80039ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039d2:	4b45      	ldr	r3, [pc, #276]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 80039d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039e0:	4b41      	ldr	r3, [pc, #260]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 80039e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039e6:	4a40      	ldr	r2, [pc, #256]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 80039e8:	f043 0302 	orr.w	r3, r3, #2
 80039ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80039f0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 80039f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    PC5     ------> OPAMP1_VINM
    PB0     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = Vbus_Pin|GPIO_PIN_5;
 80039fe:	2330      	movs	r3, #48	@ 0x30
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a02:	2303      	movs	r3, #3
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a06:	2300      	movs	r3, #0
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4836      	ldr	r0, [pc, #216]	@ (8003aec <HAL_OPAMP_MspInit+0x17c>)
 8003a12:	f007 f8b5 	bl	800ab80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003a16:	2301      	movs	r3, #1
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a26:	4619      	mov	r1, r3
 8003a28:	4831      	ldr	r0, [pc, #196]	@ (8003af0 <HAL_OPAMP_MspInit+0x180>)
 8003a2a:	f007 f8a9 	bl	800ab80 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 8003a2e:	e053      	b.n	8003ad8 <HAL_OPAMP_MspInit+0x168>
  else if(hopamp->Instance==OPAMP2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a2f      	ldr	r2, [pc, #188]	@ (8003af4 <HAL_OPAMP_MspInit+0x184>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d14e      	bne.n	8003ad8 <HAL_OPAMP_MspInit+0x168>
    HAL_RCC_OPAMP_CLK_ENABLED++;
 8003a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae4 <HAL_OPAMP_MspInit+0x174>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	4a28      	ldr	r2, [pc, #160]	@ (8003ae4 <HAL_OPAMP_MspInit+0x174>)
 8003a42:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 8003a44:	4b27      	ldr	r3, [pc, #156]	@ (8003ae4 <HAL_OPAMP_MspInit+0x174>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d10e      	bne.n	8003a6a <HAL_OPAMP_MspInit+0xfa>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 8003a4c:	4b26      	ldr	r3, [pc, #152]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 8003a4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003a52:	4a25      	ldr	r2, [pc, #148]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 8003a54:	f043 0310 	orr.w	r3, r3, #16
 8003a58:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003a5c:	4b22      	ldr	r3, [pc, #136]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 8003a5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003a62:	f003 0310 	and.w	r3, r3, #16
 8003a66:	617b      	str	r3, [r7, #20]
 8003a68:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 8003a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a70:	4a1d      	ldr	r2, [pc, #116]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 8003a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 8003a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a88:	4b17      	ldr	r3, [pc, #92]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 8003a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a8e:	4a16      	ldr	r2, [pc, #88]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 8003a90:	f043 0310 	orr.w	r3, r3, #16
 8003a94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003a98:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <HAL_OPAMP_MspInit+0x178>)
 8003a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003a9e:	f003 0310 	and.w	r3, r3, #16
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	480f      	ldr	r0, [pc, #60]	@ (8003af8 <HAL_OPAMP_MspInit+0x188>)
 8003aba:	f007 f861 	bl	800ab80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003abe:	f44f 7320 	mov.w	r3, #640	@ 0x280
 8003ac2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	480a      	ldr	r0, [pc, #40]	@ (8003afc <HAL_OPAMP_MspInit+0x18c>)
 8003ad4:	f007 f854 	bl	800ab80 <HAL_GPIO_Init>
}
 8003ad8:	bf00      	nop
 8003ada:	3738      	adds	r7, #56	@ 0x38
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40009000 	.word	0x40009000
 8003ae4:	24001458 	.word	0x24001458
 8003ae8:	58024400 	.word	0x58024400
 8003aec:	58020800 	.word	0x58020800
 8003af0:	58020400 	.word	0x58020400
 8003af4:	40009010 	.word	0x40009010
 8003af8:	58021800 	.word	0x58021800
 8003afc:	58021000 	.word	0x58021000

08003b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a16      	ldr	r2, [pc, #88]	@ (8003b68 <HAL_TIM_Base_MspInit+0x68>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d10f      	bne.n	8003b32 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b12:	4b16      	ldr	r3, [pc, #88]	@ (8003b6c <HAL_TIM_Base_MspInit+0x6c>)
 8003b14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b18:	4a14      	ldr	r2, [pc, #80]	@ (8003b6c <HAL_TIM_Base_MspInit+0x6c>)
 8003b1a:	f043 0301 	orr.w	r3, r3, #1
 8003b1e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003b22:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <HAL_TIM_Base_MspInit+0x6c>)
 8003b24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	60fb      	str	r3, [r7, #12]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8003b30:	e013      	b.n	8003b5a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM23)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a0e      	ldr	r2, [pc, #56]	@ (8003b70 <HAL_TIM_Base_MspInit+0x70>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d10e      	bne.n	8003b5a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_TIM_Base_MspInit+0x6c>)
 8003b3e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003b42:	4a0a      	ldr	r2, [pc, #40]	@ (8003b6c <HAL_TIM_Base_MspInit+0x6c>)
 8003b44:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b48:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8003b4c:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <HAL_TIM_Base_MspInit+0x6c>)
 8003b4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003b52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b56:	60bb      	str	r3, [r7, #8]
 8003b58:	68bb      	ldr	r3, [r7, #8]
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40010000 	.word	0x40010000
 8003b6c:	58024400 	.word	0x58024400
 8003b70:	4000e000 	.word	0x4000e000

08003b74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b84:	d10f      	bne.n	8003ba6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b86:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <HAL_TIM_PWM_MspInit+0x68>)
 8003b88:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b8c:	4a13      	ldr	r2, [pc, #76]	@ (8003bdc <HAL_TIM_PWM_MspInit+0x68>)
 8003b8e:	f043 0301 	orr.w	r3, r3, #1
 8003b92:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b96:	4b11      	ldr	r3, [pc, #68]	@ (8003bdc <HAL_TIM_PWM_MspInit+0x68>)
 8003b98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ba4:	e013      	b.n	8003bce <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a0d      	ldr	r2, [pc, #52]	@ (8003be0 <HAL_TIM_PWM_MspInit+0x6c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10e      	bne.n	8003bce <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <HAL_TIM_PWM_MspInit+0x68>)
 8003bb2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bb6:	4a09      	ldr	r2, [pc, #36]	@ (8003bdc <HAL_TIM_PWM_MspInit+0x68>)
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003bc0:	4b06      	ldr	r3, [pc, #24]	@ (8003bdc <HAL_TIM_PWM_MspInit+0x68>)
 8003bc2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	58024400 	.word	0x58024400
 8003be0:	40000400 	.word	0x40000400

08003be4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b08c      	sub	sp, #48	@ 0x30
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bec:	f107 031c 	add.w	r3, r7, #28
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
 8003bf8:	60da      	str	r2, [r3, #12]
 8003bfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a4b      	ldr	r2, [pc, #300]	@ (8003d30 <HAL_TIM_MspPostInit+0x14c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d120      	bne.n	8003c48 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c06:	4b4b      	ldr	r3, [pc, #300]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c0c:	4a49      	ldr	r2, [pc, #292]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003c0e:	f043 0301 	orr.w	r3, r3, #1
 8003c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c16:	4b47      	ldr	r3, [pc, #284]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c1c:	f003 0301 	and.w	r3, r3, #1
 8003c20:	61bb      	str	r3, [r7, #24]
 8003c22:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003c24:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c32:	2300      	movs	r3, #0
 8003c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c36:	2301      	movs	r3, #1
 8003c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3a:	f107 031c 	add.w	r3, r7, #28
 8003c3e:	4619      	mov	r1, r3
 8003c40:	483d      	ldr	r0, [pc, #244]	@ (8003d38 <HAL_TIM_MspPostInit+0x154>)
 8003c42:	f006 ff9d 	bl	800ab80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 8003c46:	e06e      	b.n	8003d26 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM2)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c50:	d11f      	bne.n	8003c92 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c52:	4b38      	ldr	r3, [pc, #224]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c58:	4a36      	ldr	r2, [pc, #216]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003c62:	4b34      	ldr	r3, [pc, #208]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003c70:	2307      	movs	r3, #7
 8003c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003c80:	2301      	movs	r3, #1
 8003c82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c84:	f107 031c 	add.w	r3, r7, #28
 8003c88:	4619      	mov	r1, r3
 8003c8a:	482b      	ldr	r0, [pc, #172]	@ (8003d38 <HAL_TIM_MspPostInit+0x154>)
 8003c8c:	f006 ff78 	bl	800ab80 <HAL_GPIO_Init>
}
 8003c90:	e049      	b.n	8003d26 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a29      	ldr	r2, [pc, #164]	@ (8003d3c <HAL_TIM_MspPostInit+0x158>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d120      	bne.n	8003cde <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c9c:	4b25      	ldr	r3, [pc, #148]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ca2:	4a24      	ldr	r2, [pc, #144]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003ca4:	f043 0304 	orr.w	r3, r3, #4
 8003ca8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cac:	4b21      	ldr	r3, [pc, #132]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003cae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003cba:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8003cbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ccc:	2302      	movs	r3, #2
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd0:	f107 031c 	add.w	r3, r7, #28
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	481a      	ldr	r0, [pc, #104]	@ (8003d40 <HAL_TIM_MspPostInit+0x15c>)
 8003cd8:	f006 ff52 	bl	800ab80 <HAL_GPIO_Init>
}
 8003cdc:	e023      	b.n	8003d26 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM23)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a18      	ldr	r2, [pc, #96]	@ (8003d44 <HAL_TIM_MspPostInit+0x160>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d11e      	bne.n	8003d26 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ce8:	4b12      	ldr	r3, [pc, #72]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cee:	4a11      	ldr	r2, [pc, #68]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003cf0:	f043 0320 	orr.w	r3, r3, #32
 8003cf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8003d34 <HAL_TIM_MspPostInit+0x150>)
 8003cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003d06:	230f      	movs	r3, #15
 8003d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d12:	2300      	movs	r3, #0
 8003d14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8003d16:	230d      	movs	r3, #13
 8003d18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d1a:	f107 031c 	add.w	r3, r7, #28
 8003d1e:	4619      	mov	r1, r3
 8003d20:	4809      	ldr	r0, [pc, #36]	@ (8003d48 <HAL_TIM_MspPostInit+0x164>)
 8003d22:	f006 ff2d 	bl	800ab80 <HAL_GPIO_Init>
}
 8003d26:	bf00      	nop
 8003d28:	3730      	adds	r7, #48	@ 0x30
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	58024400 	.word	0x58024400
 8003d38:	58020000 	.word	0x58020000
 8003d3c:	40000400 	.word	0x40000400
 8003d40:	58020800 	.word	0x58020800
 8003d44:	4000e000 	.word	0x4000e000
 8003d48:	58021400 	.word	0x58021400

08003d4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b0c2      	sub	sp, #264	@ 0x108
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d5a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003d70:	22b8      	movs	r2, #184	@ 0xb8
 8003d72:	2100      	movs	r1, #0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f00f fc95 	bl	80136a4 <memset>
  if(huart->Instance==UART7)
 8003d7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003d7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a6d      	ldr	r2, [pc, #436]	@ (8003f3c <HAL_UART_MspInit+0x1f0>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d147      	bne.n	8003e1c <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003d8c:	f04f 0202 	mov.w	r2, #2
 8003d90:	f04f 0300 	mov.w	r3, #0
 8003d94:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d9e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003da2:	4618      	mov	r0, r3
 8003da4:	f008 fa96 	bl	800c2d4 <HAL_RCCEx_PeriphCLKConfig>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 8003dae:	f7ff faad 	bl	800330c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8003db2:	4b63      	ldr	r3, [pc, #396]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003db4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003db8:	4a61      	ldr	r2, [pc, #388]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003dba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003dbe:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003dc8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dd0:	4b5b      	ldr	r3, [pc, #364]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003dd8:	f043 0320 	orr.w	r3, r3, #32
 8003ddc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003de0:	4b57      	ldr	r3, [pc, #348]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30
 8003dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    PF8     ------> UART7_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8003dee:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003df2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003df6:	2302      	movs	r3, #2
 8003df8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e02:	2300      	movs	r3, #0
 8003e04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003e08:	2307      	movs	r3, #7
 8003e0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003e0e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003e12:	4619      	mov	r1, r3
 8003e14:	484b      	ldr	r0, [pc, #300]	@ (8003f44 <HAL_UART_MspInit+0x1f8>)
 8003e16:	f006 feb3 	bl	800ab80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 8003e1a:	e366      	b.n	80044ea <HAL_UART_MspInit+0x79e>
  else if(huart->Instance==UART8)
 8003e1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003e20:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a47      	ldr	r2, [pc, #284]	@ (8003f48 <HAL_UART_MspInit+0x1fc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	f040 8094 	bne.w	8003f58 <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003e30:	f04f 0202 	mov.w	r2, #2
 8003e34:	f04f 0300 	mov.w	r3, #0
 8003e38:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003e42:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003e46:	4618      	mov	r0, r3
 8003e48:	f008 fa44 	bl	800c2d4 <HAL_RCCEx_PeriphCLKConfig>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d001      	beq.n	8003e56 <HAL_UART_MspInit+0x10a>
      Error_Handler();
 8003e52:	f7ff fa5b 	bl	800330c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003e56:	4b3a      	ldr	r3, [pc, #232]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003e58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e5c:	4a38      	ldr	r2, [pc, #224]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003e5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e62:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003e66:	4b36      	ldr	r3, [pc, #216]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003e6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003e70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e74:	4b32      	ldr	r3, [pc, #200]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e7a:	4a31      	ldr	r2, [pc, #196]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003e7c:	f043 0310 	orr.w	r3, r3, #16
 8003e80:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003e84:	4b2e      	ldr	r3, [pc, #184]	@ (8003f40 <HAL_UART_MspInit+0x1f4>)
 8003e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003e92:	2303      	movs	r3, #3
 8003e94:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e98:	2302      	movs	r3, #2
 8003e9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8003eaa:	2308      	movs	r3, #8
 8003eac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eb0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4825      	ldr	r0, [pc, #148]	@ (8003f4c <HAL_UART_MspInit+0x200>)
 8003eb8:	f006 fe62 	bl	800ab80 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA2_Stream0;
 8003ebc:	4b24      	ldr	r3, [pc, #144]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003ebe:	4a25      	ldr	r2, [pc, #148]	@ (8003f54 <HAL_UART_MspInit+0x208>)
 8003ec0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 8003ec2:	4b23      	ldr	r3, [pc, #140]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003ec4:	2251      	movs	r2, #81	@ 0x51
 8003ec6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ec8:	4b21      	ldr	r3, [pc, #132]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ece:	4b20      	ldr	r3, [pc, #128]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003ed6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eda:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003edc:	4b1c      	ldr	r3, [pc, #112]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8003ee8:	4b19      	ldr	r3, [pc, #100]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003eee:	4b18      	ldr	r3, [pc, #96]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003ef0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003ef4:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ef6:	4b16      	ldr	r3, [pc, #88]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8003efc:	4814      	ldr	r0, [pc, #80]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003efe:	f002 fdbf 	bl	8006a80 <HAL_DMA_Init>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8003f08:	f7ff fa00 	bl	800330c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8003f0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f10:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a0e      	ldr	r2, [pc, #56]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003f18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8003f50 <HAL_UART_MspInit+0x204>)
 8003f1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	2105      	movs	r1, #5
 8003f2e:	2053      	movs	r0, #83	@ 0x53
 8003f30:	f002 fd71 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8003f34:	2053      	movs	r0, #83	@ 0x53
 8003f36:	f002 fd88 	bl	8006a4a <HAL_NVIC_EnableIRQ>
}
 8003f3a:	e2d6      	b.n	80044ea <HAL_UART_MspInit+0x79e>
 8003f3c:	40007800 	.word	0x40007800
 8003f40:	58024400 	.word	0x58024400
 8003f44:	58021400 	.word	0x58021400
 8003f48:	40007c00 	.word	0x40007c00
 8003f4c:	58021000 	.word	0x58021000
 8003f50:	24001104 	.word	0x24001104
 8003f54:	40020410 	.word	0x40020410
  else if(huart->Instance==USART1)
 8003f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003f5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a60      	ldr	r2, [pc, #384]	@ (80040e8 <HAL_UART_MspInit+0x39c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	f040 80cc 	bne.w	8004104 <HAL_UART_MspInit+0x3b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003f6c:	f04f 0201 	mov.w	r2, #1
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003f7e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003f82:	4618      	mov	r0, r3
 8003f84:	f008 f9a6 	bl	800c2d4 <HAL_RCCEx_PeriphCLKConfig>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_UART_MspInit+0x246>
      Error_Handler();
 8003f8e:	f7ff f9bd 	bl	800330c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003f92:	4b56      	ldr	r3, [pc, #344]	@ (80040ec <HAL_UART_MspInit+0x3a0>)
 8003f94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003f98:	4a54      	ldr	r2, [pc, #336]	@ (80040ec <HAL_UART_MspInit+0x3a0>)
 8003f9a:	f043 0310 	orr.w	r3, r3, #16
 8003f9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003fa2:	4b52      	ldr	r3, [pc, #328]	@ (80040ec <HAL_UART_MspInit+0x3a0>)
 8003fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003fa8:	f003 0310 	and.w	r3, r3, #16
 8003fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb0:	4b4e      	ldr	r3, [pc, #312]	@ (80040ec <HAL_UART_MspInit+0x3a0>)
 8003fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fb6:	4a4d      	ldr	r2, [pc, #308]	@ (80040ec <HAL_UART_MspInit+0x3a0>)
 8003fb8:	f043 0302 	orr.w	r3, r3, #2
 8003fbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003fc0:	4b4a      	ldr	r3, [pc, #296]	@ (80040ec <HAL_UART_MspInit+0x3a0>)
 8003fc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	623b      	str	r3, [r7, #32]
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003fce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8003fd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd6:	2302      	movs	r3, #2
 8003fd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fee:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	483e      	ldr	r0, [pc, #248]	@ (80040f0 <HAL_UART_MspInit+0x3a4>)
 8003ff6:	f006 fdc3 	bl	800ab80 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003ffa:	4b3e      	ldr	r3, [pc, #248]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 8003ffc:	4a3e      	ldr	r2, [pc, #248]	@ (80040f8 <HAL_UART_MspInit+0x3ac>)
 8003ffe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8004000:	4b3c      	ldr	r3, [pc, #240]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 8004002:	222a      	movs	r2, #42	@ 0x2a
 8004004:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004006:	4b3b      	ldr	r3, [pc, #236]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 8004008:	2240      	movs	r2, #64	@ 0x40
 800400a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800400c:	4b39      	ldr	r3, [pc, #228]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004012:	4b38      	ldr	r3, [pc, #224]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 8004014:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004018:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800401a:	4b36      	ldr	r3, [pc, #216]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 800401c:	2200      	movs	r2, #0
 800401e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004020:	4b34      	ldr	r3, [pc, #208]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 8004022:	2200      	movs	r2, #0
 8004024:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004026:	4b33      	ldr	r3, [pc, #204]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 8004028:	2200      	movs	r2, #0
 800402a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800402c:	4b31      	ldr	r3, [pc, #196]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 800402e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004032:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004034:	4b2f      	ldr	r3, [pc, #188]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 8004036:	2200      	movs	r2, #0
 8004038:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800403a:	482e      	ldr	r0, [pc, #184]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 800403c:	f002 fd20 	bl	8006a80 <HAL_DMA_Init>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 8004046:	f7ff f961 	bl	800330c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800404a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800404e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a27      	ldr	r2, [pc, #156]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 8004056:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004058:	4a26      	ldr	r2, [pc, #152]	@ (80040f4 <HAL_UART_MspInit+0x3a8>)
 800405a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800405e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8004066:	4b25      	ldr	r3, [pc, #148]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 8004068:	4a25      	ldr	r2, [pc, #148]	@ (8004100 <HAL_UART_MspInit+0x3b4>)
 800406a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800406c:	4b23      	ldr	r3, [pc, #140]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 800406e:	2229      	movs	r2, #41	@ 0x29
 8004070:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004072:	4b22      	ldr	r3, [pc, #136]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 8004074:	2200      	movs	r2, #0
 8004076:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004078:	4b20      	ldr	r3, [pc, #128]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 800407a:	2200      	movs	r2, #0
 800407c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800407e:	4b1f      	ldr	r3, [pc, #124]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 8004080:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004084:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004086:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 8004088:	2200      	movs	r2, #0
 800408a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800408c:	4b1b      	ldr	r3, [pc, #108]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 800408e:	2200      	movs	r2, #0
 8004090:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004092:	4b1a      	ldr	r3, [pc, #104]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 8004094:	2200      	movs	r2, #0
 8004096:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004098:	4b18      	ldr	r3, [pc, #96]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 800409a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800409e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040a0:	4b16      	ldr	r3, [pc, #88]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 80040a2:	2200      	movs	r2, #0
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80040a6:	4815      	ldr	r0, [pc, #84]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 80040a8:	f002 fcea 	bl	8006a80 <HAL_DMA_Init>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_UART_MspInit+0x36a>
      Error_Handler();
 80040b2:	f7ff f92b 	bl	800330c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80040b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a0e      	ldr	r2, [pc, #56]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 80040c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80040c6:	4a0d      	ldr	r2, [pc, #52]	@ (80040fc <HAL_UART_MspInit+0x3b0>)
 80040c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80040cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80040d4:	2200      	movs	r2, #0
 80040d6:	2105      	movs	r1, #5
 80040d8:	2025      	movs	r0, #37	@ 0x25
 80040da:	f002 fc9c 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80040de:	2025      	movs	r0, #37	@ 0x25
 80040e0:	f002 fcb3 	bl	8006a4a <HAL_NVIC_EnableIRQ>
}
 80040e4:	e201      	b.n	80044ea <HAL_UART_MspInit+0x79e>
 80040e6:	bf00      	nop
 80040e8:	40011000 	.word	0x40011000
 80040ec:	58024400 	.word	0x58024400
 80040f0:	58020400 	.word	0x58020400
 80040f4:	2400117c 	.word	0x2400117c
 80040f8:	40020040 	.word	0x40020040
 80040fc:	240011f4 	.word	0x240011f4
 8004100:	40020058 	.word	0x40020058
  else if(huart->Instance==USART2)
 8004104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004108:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a5f      	ldr	r2, [pc, #380]	@ (8004290 <HAL_UART_MspInit+0x544>)
 8004112:	4293      	cmp	r3, r2
 8004114:	f040 80ca 	bne.w	80042ac <HAL_UART_MspInit+0x560>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004118:	f04f 0202 	mov.w	r2, #2
 800411c:	f04f 0300 	mov.w	r3, #0
 8004120:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004124:	2300      	movs	r3, #0
 8004126:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800412a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800412e:	4618      	mov	r0, r3
 8004130:	f008 f8d0 	bl	800c2d4 <HAL_RCCEx_PeriphCLKConfig>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 800413a:	f7ff f8e7 	bl	800330c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800413e:	4b55      	ldr	r3, [pc, #340]	@ (8004294 <HAL_UART_MspInit+0x548>)
 8004140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004144:	4a53      	ldr	r2, [pc, #332]	@ (8004294 <HAL_UART_MspInit+0x548>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800414e:	4b51      	ldr	r3, [pc, #324]	@ (8004294 <HAL_UART_MspInit+0x548>)
 8004150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004154:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004158:	61fb      	str	r3, [r7, #28]
 800415a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800415c:	4b4d      	ldr	r3, [pc, #308]	@ (8004294 <HAL_UART_MspInit+0x548>)
 800415e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004162:	4a4c      	ldr	r2, [pc, #304]	@ (8004294 <HAL_UART_MspInit+0x548>)
 8004164:	f043 0308 	orr.w	r3, r3, #8
 8004168:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800416c:	4b49      	ldr	r3, [pc, #292]	@ (8004294 <HAL_UART_MspInit+0x548>)
 800416e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	61bb      	str	r3, [r7, #24]
 8004178:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800417a:	2360      	movs	r3, #96	@ 0x60
 800417c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004180:	2302      	movs	r3, #2
 8004182:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004186:	2300      	movs	r3, #0
 8004188:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800418c:	2300      	movs	r3, #0
 800418e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004192:	2307      	movs	r3, #7
 8004194:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004198:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 800419c:	4619      	mov	r1, r3
 800419e:	483e      	ldr	r0, [pc, #248]	@ (8004298 <HAL_UART_MspInit+0x54c>)
 80041a0:	f006 fcee 	bl	800ab80 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream1;
 80041a4:	4b3d      	ldr	r3, [pc, #244]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041a6:	4a3e      	ldr	r2, [pc, #248]	@ (80042a0 <HAL_UART_MspInit+0x554>)
 80041a8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80041aa:	4b3c      	ldr	r3, [pc, #240]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041ac:	222c      	movs	r2, #44	@ 0x2c
 80041ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80041b0:	4b3a      	ldr	r3, [pc, #232]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041b2:	2240      	movs	r2, #64	@ 0x40
 80041b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041b6:	4b39      	ldr	r3, [pc, #228]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041b8:	2200      	movs	r2, #0
 80041ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80041bc:	4b37      	ldr	r3, [pc, #220]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041c4:	4b35      	ldr	r3, [pc, #212]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041ca:	4b34      	ldr	r3, [pc, #208]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80041d0:	4b32      	ldr	r3, [pc, #200]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80041d6:	4b31      	ldr	r3, [pc, #196]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041d8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80041dc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041de:	4b2f      	ldr	r3, [pc, #188]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80041e4:	482d      	ldr	r0, [pc, #180]	@ (800429c <HAL_UART_MspInit+0x550>)
 80041e6:	f002 fc4b 	bl	8006a80 <HAL_DMA_Init>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <HAL_UART_MspInit+0x4a8>
      Error_Handler();
 80041f0:	f7ff f88c 	bl	800330c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80041f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80041f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a27      	ldr	r2, [pc, #156]	@ (800429c <HAL_UART_MspInit+0x550>)
 8004200:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004202:	4a26      	ldr	r2, [pc, #152]	@ (800429c <HAL_UART_MspInit+0x550>)
 8004204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream4;
 8004210:	4b24      	ldr	r3, [pc, #144]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 8004212:	4a25      	ldr	r2, [pc, #148]	@ (80042a8 <HAL_UART_MspInit+0x55c>)
 8004214:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004216:	4b23      	ldr	r3, [pc, #140]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 8004218:	222b      	movs	r2, #43	@ 0x2b
 800421a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800421c:	4b21      	ldr	r3, [pc, #132]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004222:	4b20      	ldr	r3, [pc, #128]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 8004224:	2200      	movs	r2, #0
 8004226:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004228:	4b1e      	ldr	r3, [pc, #120]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 800422a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800422e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004230:	4b1c      	ldr	r3, [pc, #112]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 8004232:	2200      	movs	r2, #0
 8004234:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004236:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 8004238:	2200      	movs	r2, #0
 800423a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800423c:	4b19      	ldr	r3, [pc, #100]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 800423e:	2200      	movs	r2, #0
 8004240:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004242:	4b18      	ldr	r3, [pc, #96]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 8004244:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004248:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800424a:	4b16      	ldr	r3, [pc, #88]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 800424c:	2200      	movs	r2, #0
 800424e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004250:	4814      	ldr	r0, [pc, #80]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 8004252:	f002 fc15 	bl	8006a80 <HAL_DMA_Init>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <HAL_UART_MspInit+0x514>
      Error_Handler();
 800425c:	f7ff f856 	bl	800330c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004264:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a0e      	ldr	r2, [pc, #56]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 800426c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8004270:	4a0c      	ldr	r2, [pc, #48]	@ (80042a4 <HAL_UART_MspInit+0x558>)
 8004272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004276:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800427e:	2200      	movs	r2, #0
 8004280:	2105      	movs	r1, #5
 8004282:	2026      	movs	r0, #38	@ 0x26
 8004284:	f002 fbc7 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004288:	2026      	movs	r0, #38	@ 0x26
 800428a:	f002 fbde 	bl	8006a4a <HAL_NVIC_EnableIRQ>
}
 800428e:	e12c      	b.n	80044ea <HAL_UART_MspInit+0x79e>
 8004290:	40004400 	.word	0x40004400
 8004294:	58024400 	.word	0x58024400
 8004298:	58020c00 	.word	0x58020c00
 800429c:	2400126c 	.word	0x2400126c
 80042a0:	40020028 	.word	0x40020028
 80042a4:	240012e4 	.word	0x240012e4
 80042a8:	40020070 	.word	0x40020070
  else if(huart->Instance==USART3)
 80042ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80042b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a8e      	ldr	r2, [pc, #568]	@ (80044f4 <HAL_UART_MspInit+0x7a8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	f040 80bd 	bne.w	800443a <HAL_UART_MspInit+0x6ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80042c0:	f04f 0202 	mov.w	r2, #2
 80042c4:	f04f 0300 	mov.w	r3, #0
 80042c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80042cc:	2300      	movs	r3, #0
 80042ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80042d6:	4618      	mov	r0, r3
 80042d8:	f007 fffc 	bl	800c2d4 <HAL_RCCEx_PeriphCLKConfig>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d001      	beq.n	80042e6 <HAL_UART_MspInit+0x59a>
      Error_Handler();
 80042e2:	f7ff f813 	bl	800330c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80042e6:	4b84      	ldr	r3, [pc, #528]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 80042e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042ec:	4a82      	ldr	r2, [pc, #520]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 80042ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042f2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80042f6:	4b80      	ldr	r3, [pc, #512]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 80042f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80042fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004304:	4b7c      	ldr	r3, [pc, #496]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 8004306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800430a:	4a7b      	ldr	r2, [pc, #492]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004314:	4b78      	ldr	r3, [pc, #480]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 8004316:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	613b      	str	r3, [r7, #16]
 8004320:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004322:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004326:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432a:	2302      	movs	r3, #2
 800432c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004336:	2300      	movs	r3, #0
 8004338:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800433c:	2307      	movs	r3, #7
 800433e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004342:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8004346:	4619      	mov	r1, r3
 8004348:	486c      	ldr	r0, [pc, #432]	@ (80044fc <HAL_UART_MspInit+0x7b0>)
 800434a:	f006 fc19 	bl	800ab80 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream0;
 800434e:	4b6c      	ldr	r3, [pc, #432]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 8004350:	4a6c      	ldr	r2, [pc, #432]	@ (8004504 <HAL_UART_MspInit+0x7b8>)
 8004352:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8004354:	4b6a      	ldr	r3, [pc, #424]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 8004356:	222e      	movs	r2, #46	@ 0x2e
 8004358:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800435a:	4b69      	ldr	r3, [pc, #420]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 800435c:	2240      	movs	r2, #64	@ 0x40
 800435e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004360:	4b67      	ldr	r3, [pc, #412]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 8004362:	2200      	movs	r2, #0
 8004364:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004366:	4b66      	ldr	r3, [pc, #408]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 8004368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800436c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800436e:	4b64      	ldr	r3, [pc, #400]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 8004370:	2200      	movs	r2, #0
 8004372:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004374:	4b62      	ldr	r3, [pc, #392]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 8004376:	2200      	movs	r2, #0
 8004378:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800437a:	4b61      	ldr	r3, [pc, #388]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 800437c:	2200      	movs	r2, #0
 800437e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004380:	4b5f      	ldr	r3, [pc, #380]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 8004382:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004386:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004388:	4b5d      	ldr	r3, [pc, #372]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 800438a:	2200      	movs	r2, #0
 800438c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800438e:	485c      	ldr	r0, [pc, #368]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 8004390:	f002 fb76 	bl	8006a80 <HAL_DMA_Init>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_UART_MspInit+0x652>
      Error_Handler();
 800439a:	f7fe ffb7 	bl	800330c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800439e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a55      	ldr	r2, [pc, #340]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 80043aa:	67da      	str	r2, [r3, #124]	@ 0x7c
 80043ac:	4a54      	ldr	r2, [pc, #336]	@ (8004500 <HAL_UART_MspInit+0x7b4>)
 80043ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80043b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream5;
 80043ba:	4b53      	ldr	r3, [pc, #332]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043bc:	4a53      	ldr	r2, [pc, #332]	@ (800450c <HAL_UART_MspInit+0x7c0>)
 80043be:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80043c0:	4b51      	ldr	r3, [pc, #324]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043c2:	222d      	movs	r2, #45	@ 0x2d
 80043c4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043c6:	4b50      	ldr	r3, [pc, #320]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043cc:	4b4e      	ldr	r3, [pc, #312]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043d2:	4b4d      	ldr	r3, [pc, #308]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043d8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043da:	4b4b      	ldr	r3, [pc, #300]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043dc:	2200      	movs	r2, #0
 80043de:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043e0:	4b49      	ldr	r3, [pc, #292]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80043e6:	4b48      	ldr	r3, [pc, #288]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043ec:	4b46      	ldr	r3, [pc, #280]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80043f2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043f4:	4b44      	ldr	r3, [pc, #272]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80043fa:	4843      	ldr	r0, [pc, #268]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 80043fc:	f002 fb40 	bl	8006a80 <HAL_DMA_Init>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d001      	beq.n	800440a <HAL_UART_MspInit+0x6be>
      Error_Handler();
 8004406:	f7fe ff81 	bl	800330c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800440a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800440e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a3c      	ldr	r2, [pc, #240]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 8004416:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800441a:	4a3b      	ldr	r2, [pc, #236]	@ (8004508 <HAL_UART_MspInit+0x7bc>)
 800441c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8004420:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004428:	2200      	movs	r2, #0
 800442a:	2105      	movs	r1, #5
 800442c:	2027      	movs	r0, #39	@ 0x27
 800442e:	f002 faf2 	bl	8006a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004432:	2027      	movs	r0, #39	@ 0x27
 8004434:	f002 fb09 	bl	8006a4a <HAL_NVIC_EnableIRQ>
}
 8004438:	e057      	b.n	80044ea <HAL_UART_MspInit+0x79e>
  else if(huart->Instance==USART10)
 800443a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800443e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a32      	ldr	r2, [pc, #200]	@ (8004510 <HAL_UART_MspInit+0x7c4>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d14e      	bne.n	80044ea <HAL_UART_MspInit+0x79e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 800444c:	f04f 0201 	mov.w	r2, #1
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800445e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004462:	4618      	mov	r0, r3
 8004464:	f007 ff36 	bl	800c2d4 <HAL_RCCEx_PeriphCLKConfig>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_UART_MspInit+0x726>
      Error_Handler();
 800446e:	f7fe ff4d 	bl	800330c <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8004472:	4b21      	ldr	r3, [pc, #132]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 8004474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004478:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 800447a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800447e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004482:	4b1d      	ldr	r3, [pc, #116]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 8004484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448c:	60fb      	str	r3, [r7, #12]
 800448e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004490:	4b19      	ldr	r3, [pc, #100]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 8004492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004496:	4a18      	ldr	r2, [pc, #96]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 8004498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800449c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80044a0:	4b15      	ldr	r3, [pc, #84]	@ (80044f8 <HAL_UART_MspInit+0x7ac>)
 80044a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80044a6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 80044aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80044b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80044bc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 80044be:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 80044c2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c6:	2302      	movs	r3, #2
 80044c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044d2:	2300      	movs	r3, #0
 80044d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 80044d8:	2304      	movs	r3, #4
 80044da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80044de:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80044e2:	4619      	mov	r1, r3
 80044e4:	480b      	ldr	r0, [pc, #44]	@ (8004514 <HAL_UART_MspInit+0x7c8>)
 80044e6:	f006 fb4b 	bl	800ab80 <HAL_GPIO_Init>
}
 80044ea:	bf00      	nop
 80044ec:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40004800 	.word	0x40004800
 80044f8:	58024400 	.word	0x58024400
 80044fc:	58020800 	.word	0x58020800
 8004500:	2400135c 	.word	0x2400135c
 8004504:	40020010 	.word	0x40020010
 8004508:	240013d4 	.word	0x240013d4
 800450c:	40020088 	.word	0x40020088
 8004510:	40011c00 	.word	0x40011c00
 8004514:	58021800 	.word	0x58021800

08004518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <NMI_Handler+0x4>

08004520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <HardFault_Handler+0x4>

08004528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <MemManage_Handler+0x4>

08004530 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <BusFault_Handler+0x4>

08004538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <UsageFault_Handler+0x4>

08004540 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800454e:	b580      	push	{r7, lr}
 8004550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004552:	f000 fa11 	bl	8004978 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004556:	f00e fc05 	bl	8012d64 <xTaskGetSchedulerState>
 800455a:	4603      	mov	r3, r0
 800455c:	2b01      	cmp	r3, #1
 800455e:	d001      	beq.n	8004564 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004560:	f00e fe42 	bl	80131e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004564:	bf00      	nop
 8004566:	bd80      	pop	{r7, pc}

08004568 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800456c:	4802      	ldr	r0, [pc, #8]	@ (8004578 <DMA1_Stream0_IRQHandler+0x10>)
 800456e:	f003 fdad 	bl	80080cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	2400135c 	.word	0x2400135c

0800457c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004580:	4802      	ldr	r0, [pc, #8]	@ (800458c <DMA1_Stream1_IRQHandler+0x10>)
 8004582:	f003 fda3 	bl	80080cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004586:	bf00      	nop
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	2400126c 	.word	0x2400126c

08004590 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004594:	4802      	ldr	r0, [pc, #8]	@ (80045a0 <DMA1_Stream2_IRQHandler+0x10>)
 8004596:	f003 fd99 	bl	80080cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	2400117c 	.word	0x2400117c

080045a4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80045a8:	4802      	ldr	r0, [pc, #8]	@ (80045b4 <DMA1_Stream3_IRQHandler+0x10>)
 80045aa:	f003 fd8f 	bl	80080cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	240011f4 	.word	0x240011f4

080045b8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80045bc:	4802      	ldr	r0, [pc, #8]	@ (80045c8 <DMA1_Stream4_IRQHandler+0x10>)
 80045be:	f003 fd85 	bl	80080cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	240012e4 	.word	0x240012e4

080045cc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80045d0:	4802      	ldr	r0, [pc, #8]	@ (80045dc <DMA1_Stream5_IRQHandler+0x10>)
 80045d2:	f003 fd7b 	bl	80080cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	240013d4 	.word	0x240013d4

080045e0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045e4:	4802      	ldr	r0, [pc, #8]	@ (80045f0 <DMA1_Stream6_IRQHandler+0x10>)
 80045e6:	f003 fd71 	bl	80080cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	2400087c 	.word	0x2400087c

080045f4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80045f8:	4802      	ldr	r0, [pc, #8]	@ (8004604 <FDCAN1_IT0_IRQHandler+0x10>)
 80045fa:	f005 fdb3 	bl	800a164 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	2400096c 	.word	0x2400096c

08004608 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 800460c:	4802      	ldr	r0, [pc, #8]	@ (8004618 <FDCAN2_IT0_IRQHandler+0x10>)
 800460e:	f005 fda9 	bl	800a164 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	24000a0c 	.word	0x24000a0c

0800461c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004620:	4802      	ldr	r0, [pc, #8]	@ (800462c <FDCAN1_IT1_IRQHandler+0x10>)
 8004622:	f005 fd9f 	bl	800a164 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2400096c 	.word	0x2400096c

08004630 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8004634:	4802      	ldr	r0, [pc, #8]	@ (8004640 <FDCAN2_IT1_IRQHandler+0x10>)
 8004636:	f005 fd95 	bl	800a164 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	24000a0c 	.word	0x24000a0c

08004644 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004648:	4802      	ldr	r0, [pc, #8]	@ (8004654 <USART1_IRQHandler+0x10>)
 800464a:	f00b fcc3 	bl	800ffd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	24000eb4 	.word	0x24000eb4

08004658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800465c:	4802      	ldr	r0, [pc, #8]	@ (8004668 <USART2_IRQHandler+0x10>)
 800465e:	f00b fcb9 	bl	800ffd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	24000f48 	.word	0x24000f48

0800466c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004670:	4802      	ldr	r0, [pc, #8]	@ (800467c <USART3_IRQHandler+0x10>)
 8004672:	f00b fcaf 	bl	800ffd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	24000fdc 	.word	0x24000fdc

08004680 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004684:	4802      	ldr	r0, [pc, #8]	@ (8004690 <DMA1_Stream7_IRQHandler+0x10>)
 8004686:	f003 fd21 	bl	80080cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	240008f4 	.word	0x240008f4

08004694 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8004698:	4802      	ldr	r0, [pc, #8]	@ (80046a4 <DMA2_Stream0_IRQHandler+0x10>)
 800469a:	f003 fd17 	bl	80080cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	24001104 	.word	0x24001104

080046a8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80046ac:	4802      	ldr	r0, [pc, #8]	@ (80046b8 <UART8_IRQHandler+0x10>)
 80046ae:	f00b fc91 	bl	800ffd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80046b2:	bf00      	nop
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	24000e20 	.word	0x24000e20

080046bc <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80046c0:	4802      	ldr	r0, [pc, #8]	@ (80046cc <FDCAN3_IT0_IRQHandler+0x10>)
 80046c2:	f005 fd4f 	bl	800a164 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	24000aac 	.word	0x24000aac

080046d0 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 80046d4:	4802      	ldr	r0, [pc, #8]	@ (80046e0 <FDCAN3_IT1_IRQHandler+0x10>)
 80046d6:	f005 fd45 	bl	800a164 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 80046da:	bf00      	nop
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	24000aac 	.word	0x24000aac

080046e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046ec:	4a14      	ldr	r2, [pc, #80]	@ (8004740 <_sbrk+0x5c>)
 80046ee:	4b15      	ldr	r3, [pc, #84]	@ (8004744 <_sbrk+0x60>)
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046f8:	4b13      	ldr	r3, [pc, #76]	@ (8004748 <_sbrk+0x64>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d102      	bne.n	8004706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004700:	4b11      	ldr	r3, [pc, #68]	@ (8004748 <_sbrk+0x64>)
 8004702:	4a12      	ldr	r2, [pc, #72]	@ (800474c <_sbrk+0x68>)
 8004704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004706:	4b10      	ldr	r3, [pc, #64]	@ (8004748 <_sbrk+0x64>)
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4413      	add	r3, r2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	429a      	cmp	r2, r3
 8004712:	d207      	bcs.n	8004724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004714:	f00e ffce 	bl	80136b4 <__errno>
 8004718:	4603      	mov	r3, r0
 800471a:	220c      	movs	r2, #12
 800471c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800471e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004722:	e009      	b.n	8004738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004724:	4b08      	ldr	r3, [pc, #32]	@ (8004748 <_sbrk+0x64>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800472a:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <_sbrk+0x64>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4413      	add	r3, r2
 8004732:	4a05      	ldr	r2, [pc, #20]	@ (8004748 <_sbrk+0x64>)
 8004734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004736:	68fb      	ldr	r3, [r7, #12]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	24050000 	.word	0x24050000
 8004744:	00000400 	.word	0x00000400
 8004748:	2400145c 	.word	0x2400145c
 800474c:	24005300 	.word	0x24005300

08004750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004754:	4b32      	ldr	r3, [pc, #200]	@ (8004820 <SystemInit+0xd0>)
 8004756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800475a:	4a31      	ldr	r2, [pc, #196]	@ (8004820 <SystemInit+0xd0>)
 800475c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004760:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004764:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <SystemInit+0xd4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	2b06      	cmp	r3, #6
 800476e:	d807      	bhi.n	8004780 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004770:	4b2c      	ldr	r3, [pc, #176]	@ (8004824 <SystemInit+0xd4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f023 030f 	bic.w	r3, r3, #15
 8004778:	4a2a      	ldr	r2, [pc, #168]	@ (8004824 <SystemInit+0xd4>)
 800477a:	f043 0307 	orr.w	r3, r3, #7
 800477e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004780:	4b29      	ldr	r3, [pc, #164]	@ (8004828 <SystemInit+0xd8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a28      	ldr	r2, [pc, #160]	@ (8004828 <SystemInit+0xd8>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800478c:	4b26      	ldr	r3, [pc, #152]	@ (8004828 <SystemInit+0xd8>)
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004792:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <SystemInit+0xd8>)
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	4924      	ldr	r1, [pc, #144]	@ (8004828 <SystemInit+0xd8>)
 8004798:	4b24      	ldr	r3, [pc, #144]	@ (800482c <SystemInit+0xdc>)
 800479a:	4013      	ands	r3, r2
 800479c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800479e:	4b21      	ldr	r3, [pc, #132]	@ (8004824 <SystemInit+0xd4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d007      	beq.n	80047ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80047aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004824 <SystemInit+0xd4>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f023 030f 	bic.w	r3, r3, #15
 80047b2:	4a1c      	ldr	r2, [pc, #112]	@ (8004824 <SystemInit+0xd4>)
 80047b4:	f043 0307 	orr.w	r3, r3, #7
 80047b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80047ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004828 <SystemInit+0xd8>)
 80047bc:	2200      	movs	r2, #0
 80047be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80047c0:	4b19      	ldr	r3, [pc, #100]	@ (8004828 <SystemInit+0xd8>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80047c6:	4b18      	ldr	r3, [pc, #96]	@ (8004828 <SystemInit+0xd8>)
 80047c8:	2200      	movs	r2, #0
 80047ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80047cc:	4b16      	ldr	r3, [pc, #88]	@ (8004828 <SystemInit+0xd8>)
 80047ce:	4a18      	ldr	r2, [pc, #96]	@ (8004830 <SystemInit+0xe0>)
 80047d0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80047d2:	4b15      	ldr	r3, [pc, #84]	@ (8004828 <SystemInit+0xd8>)
 80047d4:	4a17      	ldr	r2, [pc, #92]	@ (8004834 <SystemInit+0xe4>)
 80047d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80047d8:	4b13      	ldr	r3, [pc, #76]	@ (8004828 <SystemInit+0xd8>)
 80047da:	4a17      	ldr	r2, [pc, #92]	@ (8004838 <SystemInit+0xe8>)
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80047de:	4b12      	ldr	r3, [pc, #72]	@ (8004828 <SystemInit+0xd8>)
 80047e0:	2200      	movs	r2, #0
 80047e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80047e4:	4b10      	ldr	r3, [pc, #64]	@ (8004828 <SystemInit+0xd8>)
 80047e6:	4a14      	ldr	r2, [pc, #80]	@ (8004838 <SystemInit+0xe8>)
 80047e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80047ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004828 <SystemInit+0xd8>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80047f0:	4b0d      	ldr	r3, [pc, #52]	@ (8004828 <SystemInit+0xd8>)
 80047f2:	4a11      	ldr	r2, [pc, #68]	@ (8004838 <SystemInit+0xe8>)
 80047f4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80047f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004828 <SystemInit+0xd8>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80047fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004828 <SystemInit+0xd8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a09      	ldr	r2, [pc, #36]	@ (8004828 <SystemInit+0xd8>)
 8004802:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004806:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004808:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <SystemInit+0xd8>)
 800480a:	2200      	movs	r2, #0
 800480c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800480e:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <SystemInit+0xec>)
 8004810:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004814:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	e000ed00 	.word	0xe000ed00
 8004824:	52002000 	.word	0x52002000
 8004828:	58024400 	.word	0x58024400
 800482c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004830:	02020200 	.word	0x02020200
 8004834:	01ff0000 	.word	0x01ff0000
 8004838:	01010280 	.word	0x01010280
 800483c:	52004000 	.word	0x52004000

08004840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004878 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004844:	f7ff ff84 	bl	8004750 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004848:	480c      	ldr	r0, [pc, #48]	@ (800487c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800484a:	490d      	ldr	r1, [pc, #52]	@ (8004880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800484c:	4a0d      	ldr	r2, [pc, #52]	@ (8004884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800484e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004850:	e002      	b.n	8004858 <LoopCopyDataInit>

08004852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004856:	3304      	adds	r3, #4

08004858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800485a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800485c:	d3f9      	bcc.n	8004852 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800485e:	4a0a      	ldr	r2, [pc, #40]	@ (8004888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004860:	4c0a      	ldr	r4, [pc, #40]	@ (800488c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004864:	e001      	b.n	800486a <LoopFillZerobss>

08004866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004868:	3204      	adds	r2, #4

0800486a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800486a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800486c:	d3fb      	bcc.n	8004866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800486e:	f00e ff27 	bl	80136c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004872:	f7fc fee3 	bl	800163c <main>
  bx  lr
 8004876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004878:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800487c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004880:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8004884:	0801434c 	.word	0x0801434c
  ldr r2, =_sbss
 8004888:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800488c:	24005300 	.word	0x24005300

08004890 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004890:	e7fe      	b.n	8004890 <ADC3_IRQHandler>
	...

08004894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800489a:	2003      	movs	r0, #3
 800489c:	f002 f8b0 	bl	8006a00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80048a0:	f007 fb42 	bl	800bf28 <HAL_RCC_GetSysClockFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b15      	ldr	r3, [pc, #84]	@ (80048fc <HAL_Init+0x68>)
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	0a1b      	lsrs	r3, r3, #8
 80048ac:	f003 030f 	and.w	r3, r3, #15
 80048b0:	4913      	ldr	r1, [pc, #76]	@ (8004900 <HAL_Init+0x6c>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	fa22 f303 	lsr.w	r3, r2, r3
 80048bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048be:	4b0f      	ldr	r3, [pc, #60]	@ (80048fc <HAL_Init+0x68>)
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	f003 030f 	and.w	r3, r3, #15
 80048c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004900 <HAL_Init+0x6c>)
 80048c8:	5cd3      	ldrb	r3, [r2, r3]
 80048ca:	f003 031f 	and.w	r3, r3, #31
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
 80048d4:	4a0b      	ldr	r2, [pc, #44]	@ (8004904 <HAL_Init+0x70>)
 80048d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048d8:	4a0b      	ldr	r2, [pc, #44]	@ (8004908 <HAL_Init+0x74>)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80048de:	200f      	movs	r0, #15
 80048e0:	f000 f814 	bl	800490c <HAL_InitTick>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e002      	b.n	80048f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80048ee:	f7fe fd13 	bl	8003318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3708      	adds	r7, #8
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	58024400 	.word	0x58024400
 8004900:	08014298 	.word	0x08014298
 8004904:	24000004 	.word	0x24000004
 8004908:	24000000 	.word	0x24000000

0800490c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004914:	4b15      	ldr	r3, [pc, #84]	@ (800496c <HAL_InitTick+0x60>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e021      	b.n	8004964 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004920:	4b13      	ldr	r3, [pc, #76]	@ (8004970 <HAL_InitTick+0x64>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b11      	ldr	r3, [pc, #68]	@ (800496c <HAL_InitTick+0x60>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	4619      	mov	r1, r3
 800492a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800492e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004932:	fbb2 f3f3 	udiv	r3, r2, r3
 8004936:	4618      	mov	r0, r3
 8004938:	f002 f895 	bl	8006a66 <HAL_SYSTICK_Config>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e00e      	b.n	8004964 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b0f      	cmp	r3, #15
 800494a:	d80a      	bhi.n	8004962 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800494c:	2200      	movs	r2, #0
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004954:	f002 f85f 	bl	8006a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004958:	4a06      	ldr	r2, [pc, #24]	@ (8004974 <HAL_InitTick+0x68>)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800495e:	2300      	movs	r3, #0
 8004960:	e000      	b.n	8004964 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	2400000c 	.word	0x2400000c
 8004970:	24000000 	.word	0x24000000
 8004974:	24000008 	.word	0x24000008

08004978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004978:	b480      	push	{r7}
 800497a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800497c:	4b06      	ldr	r3, [pc, #24]	@ (8004998 <HAL_IncTick+0x20>)
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	461a      	mov	r2, r3
 8004982:	4b06      	ldr	r3, [pc, #24]	@ (800499c <HAL_IncTick+0x24>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4413      	add	r3, r2
 8004988:	4a04      	ldr	r2, [pc, #16]	@ (800499c <HAL_IncTick+0x24>)
 800498a:	6013      	str	r3, [r2, #0]
}
 800498c:	bf00      	nop
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	2400000c 	.word	0x2400000c
 800499c:	24001460 	.word	0x24001460

080049a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0
  return uwTick;
 80049a4:	4b03      	ldr	r3, [pc, #12]	@ (80049b4 <HAL_GetTick+0x14>)
 80049a6:	681b      	ldr	r3, [r3, #0]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	24001460 	.word	0x24001460

080049b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049c0:	f7ff ffee 	bl	80049a0 <HAL_GetTick>
 80049c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049d0:	d005      	beq.n	80049de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049d2:	4b0a      	ldr	r3, [pc, #40]	@ (80049fc <HAL_Delay+0x44>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	461a      	mov	r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049de:	bf00      	nop
 80049e0:	f7ff ffde 	bl	80049a0 <HAL_GetTick>
 80049e4:	4602      	mov	r2, r0
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d8f7      	bhi.n	80049e0 <HAL_Delay+0x28>
  {
  }
}
 80049f0:	bf00      	nop
 80049f2:	bf00      	nop
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	2400000c 	.word	0x2400000c

08004a00 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	609a      	str	r2, [r3, #8]
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004a26:	b480      	push	{r7}
 8004a28:	b083      	sub	sp, #12
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
 8004a2e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	431a      	orrs	r2, r3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	609a      	str	r2, [r3, #8]
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	370c      	adds	r7, #12
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b087      	sub	sp, #28
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	3360      	adds	r3, #96	@ 0x60
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4a10      	ldr	r2, [pc, #64]	@ (8004ac8 <LL_ADC_SetOffset+0x60>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d10b      	bne.n	8004aa4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004aa2:	e00b      	b.n	8004abc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	431a      	orrs	r2, r3
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	601a      	str	r2, [r3, #0]
}
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	58026000 	.word	0x58026000

08004acc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3360      	adds	r3, #96	@ 0x60
 8004ada:	461a      	mov	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	4413      	add	r3, r2
 8004ae2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	f003 031f 	and.w	r3, r3, #31
 8004b12:	6879      	ldr	r1, [r7, #4]
 8004b14:	fa01 f303 	lsl.w	r3, r1, r3
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	611a      	str	r2, [r3, #16]
}
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b6c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d00e      	beq.n	8004b5e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3360      	adds	r3, #96	@ 0x60
 8004b44:	461a      	mov	r2, r3
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	601a      	str	r2, [r3, #0]
  }
}
 8004b5e:	bf00      	nop
 8004b60:	371c      	adds	r7, #28
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	58026000 	.word	0x58026000

08004b70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b087      	sub	sp, #28
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb0 <LL_ADC_SetOffsetSaturation+0x40>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d10e      	bne.n	8004ba2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3360      	adds	r3, #96	@ 0x60
 8004b88:	461a      	mov	r2, r3
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	431a      	orrs	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	371c      	adds	r7, #28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	58026000 	.word	0x58026000

08004bb4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf4 <LL_ADC_SetOffsetSign+0x40>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d10e      	bne.n	8004be6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	3360      	adds	r3, #96	@ 0x60
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4413      	add	r3, r2
 8004bd4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	58026000 	.word	0x58026000

08004bf8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b087      	sub	sp, #28
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3360      	adds	r3, #96	@ 0x60
 8004c08:	461a      	mov	r2, r3
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a0c      	ldr	r2, [pc, #48]	@ (8004c48 <LL_ADC_SetOffsetState+0x50>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d108      	bne.n	8004c2c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8004c1a:	697b      	ldr	r3, [r7, #20]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	431a      	orrs	r2, r3
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8004c2a:	e007      	b.n	8004c3c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	431a      	orrs	r2, r3
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	601a      	str	r2, [r3, #0]
}
 8004c3c:	bf00      	nop
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr
 8004c48:	58026000 	.word	0x58026000

08004c4c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d101      	bne.n	8004c64 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004c60:	2301      	movs	r3, #1
 8004c62:	e000      	b.n	8004c66 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b087      	sub	sp, #28
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	60f8      	str	r0, [r7, #12]
 8004c7a:	60b9      	str	r1, [r7, #8]
 8004c7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	3330      	adds	r3, #48	@ 0x30
 8004c82:	461a      	mov	r2, r3
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	0a1b      	lsrs	r3, r3, #8
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	f003 030c 	and.w	r3, r3, #12
 8004c8e:	4413      	add	r3, r2
 8004c90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f003 031f 	and.w	r3, r3, #31
 8004c9c:	211f      	movs	r1, #31
 8004c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	401a      	ands	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	0e9b      	lsrs	r3, r3, #26
 8004caa:	f003 011f 	and.w	r1, r3, #31
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f003 031f 	and.w	r3, r3, #31
 8004cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f023 0203 	bic.w	r2, r3, #3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	60da      	str	r2, [r3, #12]
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f043 0201 	orr.w	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	60da      	str	r2, [r3, #12]
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a08      	ldr	r2, [pc, #32]	@ (8004d40 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d107      	bne.n	8004d32 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f023 0203 	bic.w	r2, r3, #3
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60da      	str	r2, [r3, #12]
  }
}
 8004d32:	bf00      	nop
 8004d34:	370c      	adds	r7, #12
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	58026000 	.word	0x58026000

08004d44 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3314      	adds	r3, #20
 8004d54:	461a      	mov	r2, r3
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0e5b      	lsrs	r3, r3, #25
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	f003 0304 	and.w	r3, r3, #4
 8004d60:	4413      	add	r3, r2
 8004d62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	0d1b      	lsrs	r3, r3, #20
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	2107      	movs	r1, #7
 8004d72:	fa01 f303 	lsl.w	r3, r1, r3
 8004d76:	43db      	mvns	r3, r3
 8004d78:	401a      	ands	r2, r3
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	0d1b      	lsrs	r3, r3, #20
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	6879      	ldr	r1, [r7, #4]
 8004d84:	fa01 f303 	lsl.w	r3, r1, r3
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004d8e:	bf00      	nop
 8004d90:	371c      	adds	r7, #28
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
	...

08004d9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4a1a      	ldr	r2, [pc, #104]	@ (8004e14 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d115      	bne.n	8004ddc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dbc:	43db      	mvns	r3, r3
 8004dbe:	401a      	ands	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f003 0318 	and.w	r3, r3, #24
 8004dc6:	4914      	ldr	r1, [pc, #80]	@ (8004e18 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004dc8:	40d9      	lsrs	r1, r3
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	400b      	ands	r3, r1
 8004dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8004dda:	e014      	b.n	8004e06 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de8:	43db      	mvns	r3, r3
 8004dea:	401a      	ands	r2, r3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f003 0318 	and.w	r3, r3, #24
 8004df2:	4909      	ldr	r1, [pc, #36]	@ (8004e18 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004df4:	40d9      	lsrs	r1, r3
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	400b      	ands	r3, r1
 8004dfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	58026000 	.word	0x58026000
 8004e18:	000fffff 	.word	0x000fffff

08004e1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f003 031f 	and.w	r3, r3, #31
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	689a      	ldr	r2, [r3, #8]
 8004e44:	4b04      	ldr	r3, [pc, #16]	@ (8004e58 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004e46:	4013      	ands	r3, r2
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6093      	str	r3, [r2, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	370c      	adds	r7, #12
 8004e50:	46bd      	mov	sp, r7
 8004e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e56:	4770      	bx	lr
 8004e58:	5fffffc0 	.word	0x5fffffc0

08004e5c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b083      	sub	sp, #12
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e70:	d101      	bne.n	8004e76 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <LL_ADC_EnableInternalRegulator+0x24>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	6fffffc0 	.word	0x6fffffc0

08004eac <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ebc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ec0:	d101      	bne.n	8004ec6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e000      	b.n	8004ec8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	689a      	ldr	r2, [r3, #8]
 8004ee0:	4b05      	ldr	r3, [pc, #20]	@ (8004ef8 <LL_ADC_Enable+0x24>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	f043 0201 	orr.w	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr
 8004ef8:	7fffffc0 	.word	0x7fffffc0

08004efc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689a      	ldr	r2, [r3, #8]
 8004f08:	4b05      	ldr	r3, [pc, #20]	@ (8004f20 <LL_ADC_Disable+0x24>)
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	f043 0202 	orr.w	r2, r3, #2
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	7fffffc0 	.word	0x7fffffc0

08004f24 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d101      	bne.n	8004f3c <LL_ADC_IsEnabled+0x18>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e000      	b.n	8004f3e <LL_ADC_IsEnabled+0x1a>
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	370c      	adds	r7, #12
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d101      	bne.n	8004f62 <LL_ADC_IsDisableOngoing+0x18>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <LL_ADC_IsDisableOngoing+0x1a>
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b083      	sub	sp, #12
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	4b05      	ldr	r3, [pc, #20]	@ (8004f94 <LL_ADC_REG_StartConversion+0x24>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	f043 0204 	orr.w	r2, r3, #4
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004f88:	bf00      	nop
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	7fffffc0 	.word	0x7fffffc0

08004f98 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b083      	sub	sp, #12
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b04      	cmp	r3, #4
 8004faa:	d101      	bne.n	8004fb0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 0308 	and.w	r3, r3, #8
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d101      	bne.n	8004fd6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004fd6:	2300      	movs	r3, #0
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004fe4:	b590      	push	{r4, r7, lr}
 8004fe6:	b089      	sub	sp, #36	@ 0x24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fec:	2300      	movs	r3, #0
 8004fee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d101      	bne.n	8004ffe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e1ee      	b.n	80053dc <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005008:	2b00      	cmp	r3, #0
 800500a:	d109      	bne.n	8005020 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f7fe f9a1 	bl	8003354 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff ff19 	bl	8004e5c <LL_ADC_IsDeepPowerDownEnabled>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4618      	mov	r0, r3
 8005036:	f7ff feff 	bl	8004e38 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7ff ff34 	bl	8004eac <LL_ADC_IsInternalRegulatorEnabled>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d114      	bne.n	8005074 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f7ff ff18 	bl	8004e84 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005054:	4b8e      	ldr	r3, [pc, #568]	@ (8005290 <HAL_ADC_Init+0x2ac>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	099b      	lsrs	r3, r3, #6
 800505a:	4a8e      	ldr	r2, [pc, #568]	@ (8005294 <HAL_ADC_Init+0x2b0>)
 800505c:	fba2 2303 	umull	r2, r3, r2, r3
 8005060:	099b      	lsrs	r3, r3, #6
 8005062:	3301      	adds	r3, #1
 8005064:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005066:	e002      	b.n	800506e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	3b01      	subs	r3, #1
 800506c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d1f9      	bne.n	8005068 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff ff17 	bl	8004eac <LL_ADC_IsInternalRegulatorEnabled>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d10d      	bne.n	80050a0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005088:	f043 0210 	orr.w	r2, r3, #16
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005094:	f043 0201 	orr.w	r2, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff ff77 	bl	8004f98 <LL_ADC_REG_IsConversionOngoing>
 80050aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b0:	f003 0310 	and.w	r3, r3, #16
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f040 8188 	bne.w	80053ca <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 8184 	bne.w	80053ca <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80050ca:	f043 0202 	orr.w	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff ff24 	bl	8004f24 <LL_ADC_IsEnabled>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d136      	bne.n	8005150 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a6c      	ldr	r2, [pc, #432]	@ (8005298 <HAL_ADC_Init+0x2b4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d004      	beq.n	80050f6 <HAL_ADC_Init+0x112>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a6a      	ldr	r2, [pc, #424]	@ (800529c <HAL_ADC_Init+0x2b8>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d10e      	bne.n	8005114 <HAL_ADC_Init+0x130>
 80050f6:	4868      	ldr	r0, [pc, #416]	@ (8005298 <HAL_ADC_Init+0x2b4>)
 80050f8:	f7ff ff14 	bl	8004f24 <LL_ADC_IsEnabled>
 80050fc:	4604      	mov	r4, r0
 80050fe:	4867      	ldr	r0, [pc, #412]	@ (800529c <HAL_ADC_Init+0x2b8>)
 8005100:	f7ff ff10 	bl	8004f24 <LL_ADC_IsEnabled>
 8005104:	4603      	mov	r3, r0
 8005106:	4323      	orrs	r3, r4
 8005108:	2b00      	cmp	r3, #0
 800510a:	bf0c      	ite	eq
 800510c:	2301      	moveq	r3, #1
 800510e:	2300      	movne	r3, #0
 8005110:	b2db      	uxtb	r3, r3
 8005112:	e008      	b.n	8005126 <HAL_ADC_Init+0x142>
 8005114:	4862      	ldr	r0, [pc, #392]	@ (80052a0 <HAL_ADC_Init+0x2bc>)
 8005116:	f7ff ff05 	bl	8004f24 <LL_ADC_IsEnabled>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	bf0c      	ite	eq
 8005120:	2301      	moveq	r3, #1
 8005122:	2300      	movne	r3, #0
 8005124:	b2db      	uxtb	r3, r3
 8005126:	2b00      	cmp	r3, #0
 8005128:	d012      	beq.n	8005150 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a5a      	ldr	r2, [pc, #360]	@ (8005298 <HAL_ADC_Init+0x2b4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d004      	beq.n	800513e <HAL_ADC_Init+0x15a>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a58      	ldr	r2, [pc, #352]	@ (800529c <HAL_ADC_Init+0x2b8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d101      	bne.n	8005142 <HAL_ADC_Init+0x15e>
 800513e:	4a59      	ldr	r2, [pc, #356]	@ (80052a4 <HAL_ADC_Init+0x2c0>)
 8005140:	e000      	b.n	8005144 <HAL_ADC_Init+0x160>
 8005142:	4a59      	ldr	r2, [pc, #356]	@ (80052a8 <HAL_ADC_Init+0x2c4>)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4619      	mov	r1, r3
 800514a:	4610      	mov	r0, r2
 800514c:	f7ff fc58 	bl	8004a00 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a52      	ldr	r2, [pc, #328]	@ (80052a0 <HAL_ADC_Init+0x2bc>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d129      	bne.n	80051ae <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	7e5b      	ldrb	r3, [r3, #25]
 800515e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8005164:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800516a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d013      	beq.n	800519c <HAL_ADC_Init+0x1b8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	d00d      	beq.n	8005198 <HAL_ADC_Init+0x1b4>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b1c      	cmp	r3, #28
 8005182:	d007      	beq.n	8005194 <HAL_ADC_Init+0x1b0>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	2b18      	cmp	r3, #24
 800518a:	d101      	bne.n	8005190 <HAL_ADC_Init+0x1ac>
 800518c:	2318      	movs	r3, #24
 800518e:	e006      	b.n	800519e <HAL_ADC_Init+0x1ba>
 8005190:	2300      	movs	r3, #0
 8005192:	e004      	b.n	800519e <HAL_ADC_Init+0x1ba>
 8005194:	2310      	movs	r3, #16
 8005196:	e002      	b.n	800519e <HAL_ADC_Init+0x1ba>
 8005198:	2308      	movs	r3, #8
 800519a:	e000      	b.n	800519e <HAL_ADC_Init+0x1ba>
 800519c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800519e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051a6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80051a8:	4313      	orrs	r3, r2
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	e00e      	b.n	80051cc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	7e5b      	ldrb	r3, [r3, #25]
 80051b2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051b8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80051be:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051c6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80051c8:	4313      	orrs	r3, r2
 80051ca:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d106      	bne.n	80051e4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051da:	3b01      	subs	r3, #1
 80051dc:	045b      	lsls	r3, r3, #17
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d009      	beq.n	8005200 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80051fa:	69ba      	ldr	r2, [r7, #24]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a26      	ldr	r2, [pc, #152]	@ (80052a0 <HAL_ADC_Init+0x2bc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d115      	bne.n	8005236 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68da      	ldr	r2, [r3, #12]
 8005210:	4b26      	ldr	r3, [pc, #152]	@ (80052ac <HAL_ADC_Init+0x2c8>)
 8005212:	4013      	ands	r3, r2
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	430b      	orrs	r3, r1
 800521c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	611a      	str	r2, [r3, #16]
 8005234:	e009      	b.n	800524a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	4b1c      	ldr	r3, [pc, #112]	@ (80052b0 <HAL_ADC_Init+0x2cc>)
 800523e:	4013      	ands	r3, r2
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6812      	ldr	r2, [r2, #0]
 8005244:	69b9      	ldr	r1, [r7, #24]
 8005246:	430b      	orrs	r3, r1
 8005248:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fea2 	bl	8004f98 <LL_ADC_REG_IsConversionOngoing>
 8005254:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7ff feaf 	bl	8004fbe <LL_ADC_INJ_IsConversionOngoing>
 8005260:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	f040 808e 	bne.w	8005386 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f040 808a 	bne.w	8005386 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a0a      	ldr	r2, [pc, #40]	@ (80052a0 <HAL_ADC_Init+0x2bc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d11b      	bne.n	80052b4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	7e1b      	ldrb	r3, [r3, #24]
 8005280:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005288:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800528a:	4313      	orrs	r3, r2
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	e018      	b.n	80052c2 <HAL_ADC_Init+0x2de>
 8005290:	24000000 	.word	0x24000000
 8005294:	053e2d63 	.word	0x053e2d63
 8005298:	40022000 	.word	0x40022000
 800529c:	40022100 	.word	0x40022100
 80052a0:	58026000 	.word	0x58026000
 80052a4:	40022300 	.word	0x40022300
 80052a8:	58026300 	.word	0x58026300
 80052ac:	fff04007 	.word	0xfff04007
 80052b0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	7e1b      	ldrb	r3, [r3, #24]
 80052b8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68da      	ldr	r2, [r3, #12]
 80052c8:	4b46      	ldr	r3, [pc, #280]	@ (80053e4 <HAL_ADC_Init+0x400>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	687a      	ldr	r2, [r7, #4]
 80052ce:	6812      	ldr	r2, [r2, #0]
 80052d0:	69b9      	ldr	r1, [r7, #24]
 80052d2:	430b      	orrs	r3, r1
 80052d4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d137      	bne.n	8005350 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a3f      	ldr	r2, [pc, #252]	@ (80053e8 <HAL_ADC_Init+0x404>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d116      	bne.n	800531e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	4b3d      	ldr	r3, [pc, #244]	@ (80053ec <HAL_ADC_Init+0x408>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005302:	4311      	orrs	r1, r2
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005308:	4311      	orrs	r1, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800530e:	430a      	orrs	r2, r1
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f042 0201 	orr.w	r2, r2, #1
 800531a:	611a      	str	r2, [r3, #16]
 800531c:	e020      	b.n	8005360 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	4b32      	ldr	r3, [pc, #200]	@ (80053f0 <HAL_ADC_Init+0x40c>)
 8005326:	4013      	ands	r3, r2
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800532c:	3a01      	subs	r2, #1
 800532e:	0411      	lsls	r1, r2, #16
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005334:	4311      	orrs	r1, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800533a:	4311      	orrs	r1, r2
 800533c:	687a      	ldr	r2, [r7, #4]
 800533e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005340:	430a      	orrs	r2, r1
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	611a      	str	r2, [r3, #16]
 800534e:	e007      	b.n	8005360 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0201 	bic.w	r2, r2, #1
 800535e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a1b      	ldr	r2, [pc, #108]	@ (80053e8 <HAL_ADC_Init+0x404>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d002      	beq.n	8005386 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 ffdf 	bl	8006344 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b01      	cmp	r3, #1
 800538c:	d10c      	bne.n	80053a8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005394:	f023 010f 	bic.w	r1, r3, #15
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	1e5a      	subs	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	430a      	orrs	r2, r1
 80053a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80053a6:	e007      	b.n	80053b8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 020f 	bic.w	r2, r2, #15
 80053b6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053bc:	f023 0303 	bic.w	r3, r3, #3
 80053c0:	f043 0201 	orr.w	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	661a      	str	r2, [r3, #96]	@ 0x60
 80053c8:	e007      	b.n	80053da <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053ce:	f043 0210 	orr.w	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80053da:	7ffb      	ldrb	r3, [r7, #31]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3724      	adds	r7, #36	@ 0x24
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd90      	pop	{r4, r7, pc}
 80053e4:	ffffbffc 	.word	0xffffbffc
 80053e8:	58026000 	.word	0x58026000
 80053ec:	fc00f81f 	.word	0xfc00f81f
 80053f0:	fc00f81e 	.word	0xfc00f81e

080053f4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a60      	ldr	r2, [pc, #384]	@ (8005588 <HAL_ADC_Start_DMA+0x194>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <HAL_ADC_Start_DMA+0x20>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a5f      	ldr	r2, [pc, #380]	@ (800558c <HAL_ADC_Start_DMA+0x198>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d101      	bne.n	8005418 <HAL_ADC_Start_DMA+0x24>
 8005414:	4b5e      	ldr	r3, [pc, #376]	@ (8005590 <HAL_ADC_Start_DMA+0x19c>)
 8005416:	e000      	b.n	800541a <HAL_ADC_Start_DMA+0x26>
 8005418:	4b5e      	ldr	r3, [pc, #376]	@ (8005594 <HAL_ADC_Start_DMA+0x1a0>)
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fcfe 	bl	8004e1c <LL_ADC_GetMultimode>
 8005420:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4618      	mov	r0, r3
 8005428:	f7ff fdb6 	bl	8004f98 <LL_ADC_REG_IsConversionOngoing>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	f040 80a2 	bne.w	8005578 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800543a:	2b01      	cmp	r3, #1
 800543c:	d101      	bne.n	8005442 <HAL_ADC_Start_DMA+0x4e>
 800543e:	2302      	movs	r3, #2
 8005440:	e09d      	b.n	800557e <HAL_ADC_Start_DMA+0x18a>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d006      	beq.n	800545e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	2b05      	cmp	r3, #5
 8005454:	d003      	beq.n	800545e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	2b09      	cmp	r3, #9
 800545a:	f040 8086 	bne.w	800556a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 fdf2 	bl	8006048 <ADC_Enable>
 8005464:	4603      	mov	r3, r0
 8005466:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005468:	7dfb      	ldrb	r3, [r7, #23]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d178      	bne.n	8005560 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005472:	4b49      	ldr	r3, [pc, #292]	@ (8005598 <HAL_ADC_Start_DMA+0x1a4>)
 8005474:	4013      	ands	r3, r2
 8005476:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a42      	ldr	r2, [pc, #264]	@ (800558c <HAL_ADC_Start_DMA+0x198>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d002      	beq.n	800548e <HAL_ADC_Start_DMA+0x9a>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	e000      	b.n	8005490 <HAL_ADC_Start_DMA+0x9c>
 800548e:	4b3e      	ldr	r3, [pc, #248]	@ (8005588 <HAL_ADC_Start_DMA+0x194>)
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	4293      	cmp	r3, r2
 8005496:	d002      	beq.n	800549e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d105      	bne.n	80054aa <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d006      	beq.n	80054c4 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054ba:	f023 0206 	bic.w	r2, r3, #6
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	665a      	str	r2, [r3, #100]	@ 0x64
 80054c2:	e002      	b.n	80054ca <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054ce:	4a33      	ldr	r2, [pc, #204]	@ (800559c <HAL_ADC_Start_DMA+0x1a8>)
 80054d0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d6:	4a32      	ldr	r2, [pc, #200]	@ (80055a0 <HAL_ADC_Start_DMA+0x1ac>)
 80054d8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054de:	4a31      	ldr	r2, [pc, #196]	@ (80055a4 <HAL_ADC_Start_DMA+0x1b0>)
 80054e0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	221c      	movs	r2, #28
 80054e8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0210 	orr.w	r2, r2, #16
 8005500:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a28      	ldr	r2, [pc, #160]	@ (80055a8 <HAL_ADC_Start_DMA+0x1b4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d10f      	bne.n	800552c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4619      	mov	r1, r3
 800551a:	4610      	mov	r0, r2
 800551c:	f7ff fbf8 	bl	8004d10 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f7ff fbe3 	bl	8004cf0 <LL_ADC_EnableDMAReq>
 800552a:	e007      	b.n	800553c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005534:	4619      	mov	r1, r3
 8005536:	4610      	mov	r0, r2
 8005538:	f7ff fbc7 	bl	8004cca <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3340      	adds	r3, #64	@ 0x40
 8005546:	4619      	mov	r1, r3
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f001 fdf0 	bl	8007130 <HAL_DMA_Start_IT>
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff fd09 	bl	8004f70 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800555e:	e00d      	b.n	800557c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2200      	movs	r2, #0
 8005564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8005568:	e008      	b.n	800557c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8005576:	e001      	b.n	800557c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005578:	2302      	movs	r3, #2
 800557a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800557c:	7dfb      	ldrb	r3, [r7, #23]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	40022000 	.word	0x40022000
 800558c:	40022100 	.word	0x40022100
 8005590:	40022300 	.word	0x40022300
 8005594:	58026300 	.word	0x58026300
 8005598:	fffff0fe 	.word	0xfffff0fe
 800559c:	0800621b 	.word	0x0800621b
 80055a0:	080062f3 	.word	0x080062f3
 80055a4:	0800630f 	.word	0x0800630f
 80055a8:	58026000 	.word	0x58026000

080055ac <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80055e8:	b590      	push	{r4, r7, lr}
 80055ea:	b0b9      	sub	sp, #228	@ 0xe4
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80055f8:	2300      	movs	r3, #0
 80055fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005602:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	4aab      	ldr	r2, [pc, #684]	@ (80058b8 <HAL_ADC_ConfigChannel+0x2d0>)
 800560a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005612:	2b01      	cmp	r3, #1
 8005614:	d102      	bne.n	800561c <HAL_ADC_ConfigChannel+0x34>
 8005616:	2302      	movs	r3, #2
 8005618:	f000 bcfe 	b.w	8006018 <HAL_ADC_ConfigChannel+0xa30>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f7ff fcb5 	bl	8004f98 <LL_ADC_REG_IsConversionOngoing>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 84e2 	bne.w	8005ffa <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	db38      	blt.n	80056b0 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a9e      	ldr	r2, [pc, #632]	@ (80058bc <HAL_ADC_ConfigChannel+0x2d4>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d033      	beq.n	80056b0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005650:	2b00      	cmp	r3, #0
 8005652:	d108      	bne.n	8005666 <HAL_ADC_ConfigChannel+0x7e>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	0e9b      	lsrs	r3, r3, #26
 800565a:	f003 031f 	and.w	r3, r3, #31
 800565e:	2201      	movs	r2, #1
 8005660:	fa02 f303 	lsl.w	r3, r2, r3
 8005664:	e01d      	b.n	80056a2 <HAL_ADC_ConfigChannel+0xba>
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800566e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005672:	fa93 f3a3 	rbit	r3, r3
 8005676:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800567a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800567e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005682:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005686:	2b00      	cmp	r3, #0
 8005688:	d101      	bne.n	800568e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 800568a:	2320      	movs	r3, #32
 800568c:	e004      	b.n	8005698 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 800568e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005692:	fab3 f383 	clz	r3, r3
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2201      	movs	r2, #1
 800569e:	fa02 f303 	lsl.w	r3, r2, r3
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	69d1      	ldr	r1, [r2, #28]
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	430b      	orrs	r3, r1
 80056ae:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6818      	ldr	r0, [r3, #0]
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	6859      	ldr	r1, [r3, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	461a      	mov	r2, r3
 80056be:	f7ff fad8 	bl	8004c72 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fc66 	bl	8004f98 <LL_ADC_REG_IsConversionOngoing>
 80056cc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7ff fc72 	bl	8004fbe <LL_ADC_INJ_IsConversionOngoing>
 80056da:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80056de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 8270 	bne.w	8005bc8 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80056e8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f040 826b 	bne.w	8005bc8 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6819      	ldr	r1, [r3, #0]
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	461a      	mov	r2, r3
 8005700:	f7ff fb20 	bl	8004d44 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a6c      	ldr	r2, [pc, #432]	@ (80058bc <HAL_ADC_ConfigChannel+0x2d4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d10d      	bne.n	800572a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	695a      	ldr	r2, [r3, #20]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	08db      	lsrs	r3, r3, #3
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	005b      	lsls	r3, r3, #1
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005728:	e032      	b.n	8005790 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800572a:	4b65      	ldr	r3, [pc, #404]	@ (80058c0 <HAL_ADC_ConfigChannel+0x2d8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005736:	d10b      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x168>
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	695a      	ldr	r2, [r3, #20]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	089b      	lsrs	r3, r3, #2
 8005744:	f003 0307 	and.w	r3, r3, #7
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	e01d      	b.n	800578c <HAL_ADC_ConfigChannel+0x1a4>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f003 0310 	and.w	r3, r3, #16
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <HAL_ADC_ConfigChannel+0x18e>
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695a      	ldr	r2, [r3, #20]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	089b      	lsrs	r3, r3, #2
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	005b      	lsls	r3, r3, #1
 8005770:	fa02 f303 	lsl.w	r3, r2, r3
 8005774:	e00a      	b.n	800578c <HAL_ADC_ConfigChannel+0x1a4>
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	089b      	lsrs	r3, r3, #2
 8005782:	f003 0304 	and.w	r3, r3, #4
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	fa02 f303 	lsl.w	r3, r2, r3
 800578c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	691b      	ldr	r3, [r3, #16]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d048      	beq.n	800582a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6818      	ldr	r0, [r3, #0]
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	6919      	ldr	r1, [r3, #16]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057a8:	f7ff f95e 	bl	8004a68 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a42      	ldr	r2, [pc, #264]	@ (80058bc <HAL_ADC_ConfigChannel+0x2d4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d119      	bne.n	80057ea <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6818      	ldr	r0, [r3, #0]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6919      	ldr	r1, [r3, #16]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	69db      	ldr	r3, [r3, #28]
 80057c2:	461a      	mov	r2, r3
 80057c4:	f7ff f9f6 	bl	8004bb4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	6919      	ldr	r1, [r3, #16]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d102      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x1f8>
 80057da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057de:	e000      	b.n	80057e2 <HAL_ADC_ConfigChannel+0x1fa>
 80057e0:	2300      	movs	r3, #0
 80057e2:	461a      	mov	r2, r3
 80057e4:	f7ff f9c4 	bl	8004b70 <LL_ADC_SetOffsetSaturation>
 80057e8:	e1ee      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6919      	ldr	r1, [r3, #16]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d102      	bne.n	8005802 <HAL_ADC_ConfigChannel+0x21a>
 80057fc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005800:	e000      	b.n	8005804 <HAL_ADC_ConfigChannel+0x21c>
 8005802:	2300      	movs	r3, #0
 8005804:	461a      	mov	r2, r3
 8005806:	f7ff f991 	bl	8004b2c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6818      	ldr	r0, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	6919      	ldr	r1, [r3, #16]
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	7e1b      	ldrb	r3, [r3, #24]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d102      	bne.n	8005820 <HAL_ADC_ConfigChannel+0x238>
 800581a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800581e:	e000      	b.n	8005822 <HAL_ADC_ConfigChannel+0x23a>
 8005820:	2300      	movs	r3, #0
 8005822:	461a      	mov	r2, r3
 8005824:	f7ff f968 	bl	8004af8 <LL_ADC_SetDataRightShift>
 8005828:	e1ce      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a23      	ldr	r2, [pc, #140]	@ (80058bc <HAL_ADC_ConfigChannel+0x2d4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	f040 8181 	bne.w	8005b38 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2100      	movs	r1, #0
 800583c:	4618      	mov	r0, r3
 800583e:	f7ff f945 	bl	8004acc <LL_ADC_GetOffsetChannel>
 8005842:	4603      	mov	r3, r0
 8005844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10a      	bne.n	8005862 <HAL_ADC_ConfigChannel+0x27a>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2100      	movs	r1, #0
 8005852:	4618      	mov	r0, r3
 8005854:	f7ff f93a 	bl	8004acc <LL_ADC_GetOffsetChannel>
 8005858:	4603      	mov	r3, r0
 800585a:	0e9b      	lsrs	r3, r3, #26
 800585c:	f003 021f 	and.w	r2, r3, #31
 8005860:	e01e      	b.n	80058a0 <HAL_ADC_ConfigChannel+0x2b8>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2100      	movs	r1, #0
 8005868:	4618      	mov	r0, r3
 800586a:	f7ff f92f 	bl	8004acc <LL_ADC_GetOffsetChannel>
 800586e:	4603      	mov	r3, r0
 8005870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005878:	fa93 f3a3 	rbit	r3, r3
 800587c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005880:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005884:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  if (value == 0U)
 8005888:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 8005890:	2320      	movs	r3, #32
 8005892:	e004      	b.n	800589e <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 8005894:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005898:	fab3 f383 	clz	r3, r3
 800589c:	b2db      	uxtb	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10b      	bne.n	80058c4 <HAL_ADC_ConfigChannel+0x2dc>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	0e9b      	lsrs	r3, r3, #26
 80058b2:	f003 031f 	and.w	r3, r3, #31
 80058b6:	e01e      	b.n	80058f6 <HAL_ADC_ConfigChannel+0x30e>
 80058b8:	47ff0000 	.word	0x47ff0000
 80058bc:	58026000 	.word	0x58026000
 80058c0:	5c001000 	.word	0x5c001000
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80058d0:	fa93 f3a3 	rbit	r3, r3
 80058d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80058d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80058dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80058e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80058e8:	2320      	movs	r3, #32
 80058ea:	e004      	b.n	80058f6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80058ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80058f0:	fab3 f383 	clz	r3, r3
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d106      	bne.n	8005908 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2200      	movs	r2, #0
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f7ff f978 	bl	8004bf8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2101      	movs	r1, #1
 800590e:	4618      	mov	r0, r3
 8005910:	f7ff f8dc 	bl	8004acc <LL_ADC_GetOffsetChannel>
 8005914:	4603      	mov	r3, r0
 8005916:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <HAL_ADC_ConfigChannel+0x34c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2101      	movs	r1, #1
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff f8d1 	bl	8004acc <LL_ADC_GetOffsetChannel>
 800592a:	4603      	mov	r3, r0
 800592c:	0e9b      	lsrs	r3, r3, #26
 800592e:	f003 021f 	and.w	r2, r3, #31
 8005932:	e01e      	b.n	8005972 <HAL_ADC_ConfigChannel+0x38a>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2101      	movs	r1, #1
 800593a:	4618      	mov	r0, r3
 800593c:	f7ff f8c6 	bl	8004acc <LL_ADC_GetOffsetChannel>
 8005940:	4603      	mov	r3, r0
 8005942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005946:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800594a:	fa93 f3a3 	rbit	r3, r3
 800594e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005952:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005956:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800595a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8005962:	2320      	movs	r3, #32
 8005964:	e004      	b.n	8005970 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8005966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800596a:	fab3 f383 	clz	r3, r3
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800597a:	2b00      	cmp	r3, #0
 800597c:	d105      	bne.n	800598a <HAL_ADC_ConfigChannel+0x3a2>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	0e9b      	lsrs	r3, r3, #26
 8005984:	f003 031f 	and.w	r3, r3, #31
 8005988:	e018      	b.n	80059bc <HAL_ADC_ConfigChannel+0x3d4>
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005992:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005996:	fa93 f3a3 	rbit	r3, r3
 800599a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800599e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80059a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80059a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80059ae:	2320      	movs	r3, #32
 80059b0:	e004      	b.n	80059bc <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80059b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059b6:	fab3 f383 	clz	r3, r3
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	429a      	cmp	r2, r3
 80059be:	d106      	bne.n	80059ce <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2200      	movs	r2, #0
 80059c6:	2101      	movs	r1, #1
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff f915 	bl	8004bf8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2102      	movs	r1, #2
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff f879 	bl	8004acc <LL_ADC_GetOffsetChannel>
 80059da:	4603      	mov	r3, r0
 80059dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <HAL_ADC_ConfigChannel+0x412>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2102      	movs	r1, #2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7ff f86e 	bl	8004acc <LL_ADC_GetOffsetChannel>
 80059f0:	4603      	mov	r3, r0
 80059f2:	0e9b      	lsrs	r3, r3, #26
 80059f4:	f003 021f 	and.w	r2, r3, #31
 80059f8:	e01e      	b.n	8005a38 <HAL_ADC_ConfigChannel+0x450>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2102      	movs	r1, #2
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7ff f863 	bl	8004acc <LL_ADC_GetOffsetChannel>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a10:	fa93 f3a3 	rbit	r3, r3
 8005a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005a18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005a1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d101      	bne.n	8005a2c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8005a28:	2320      	movs	r3, #32
 8005a2a:	e004      	b.n	8005a36 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 8005a2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a30:	fab3 f383 	clz	r3, r3
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	461a      	mov	r2, r3
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <HAL_ADC_ConfigChannel+0x468>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	0e9b      	lsrs	r3, r3, #26
 8005a4a:	f003 031f 	and.w	r3, r3, #31
 8005a4e:	e014      	b.n	8005a7a <HAL_ADC_ConfigChannel+0x492>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005a58:	fa93 f3a3 	rbit	r3, r3
 8005a5c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8005a5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005a64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d101      	bne.n	8005a70 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005a6c:	2320      	movs	r3, #32
 8005a6e:	e004      	b.n	8005a7a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005a70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005a74:	fab3 f383 	clz	r3, r3
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d106      	bne.n	8005a8c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2200      	movs	r2, #0
 8005a84:	2102      	movs	r1, #2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff f8b6 	bl	8004bf8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2103      	movs	r1, #3
 8005a92:	4618      	mov	r0, r3
 8005a94:	f7ff f81a 	bl	8004acc <LL_ADC_GetOffsetChannel>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d10a      	bne.n	8005ab8 <HAL_ADC_ConfigChannel+0x4d0>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff f80f 	bl	8004acc <LL_ADC_GetOffsetChannel>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	0e9b      	lsrs	r3, r3, #26
 8005ab2:	f003 021f 	and.w	r2, r3, #31
 8005ab6:	e017      	b.n	8005ae8 <HAL_ADC_ConfigChannel+0x500>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2103      	movs	r1, #3
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff f804 	bl	8004acc <LL_ADC_GetOffsetChannel>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ac8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005aca:	fa93 f3a3 	rbit	r3, r3
 8005ace:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ad2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8005ad4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 8005ada:	2320      	movs	r3, #32
 8005adc:	e003      	b.n	8005ae6 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 8005ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005ae0:	fab3 f383 	clz	r3, r3
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d105      	bne.n	8005b00 <HAL_ADC_ConfigChannel+0x518>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	0e9b      	lsrs	r3, r3, #26
 8005afa:	f003 031f 	and.w	r3, r3, #31
 8005afe:	e011      	b.n	8005b24 <HAL_ADC_ConfigChannel+0x53c>
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b08:	fa93 f3a3 	rbit	r3, r3
 8005b0c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8005b0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b10:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005b12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8005b18:	2320      	movs	r3, #32
 8005b1a:	e003      	b.n	8005b24 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 8005b1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005b1e:	fab3 f383 	clz	r3, r3
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d14f      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	2103      	movs	r1, #3
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff f861 	bl	8004bf8 <LL_ADC_SetOffsetState>
 8005b36:	e047      	b.n	8005bc8 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	069b      	lsls	r3, r3, #26
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d107      	bne.n	8005b5c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005b5a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	069b      	lsls	r3, r3, #26
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d107      	bne.n	8005b80 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005b7e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	069b      	lsls	r3, r3, #26
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d107      	bne.n	8005ba4 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005ba2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005baa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	069b      	lsls	r3, r3, #26
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d107      	bne.n	8005bc8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8005bc6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f7ff f9a9 	bl	8004f24 <LL_ADC_IsEnabled>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f040 8219 	bne.w	800600c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6819      	ldr	r1, [r3, #0]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	461a      	mov	r2, r3
 8005be8:	f7ff f8d8 	bl	8004d9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	4aa1      	ldr	r2, [pc, #644]	@ (8005e78 <HAL_ADC_ConfigChannel+0x890>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	f040 812e 	bne.w	8005e54 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <HAL_ADC_ConfigChannel+0x638>
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	0e9b      	lsrs	r3, r3, #26
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f003 031f 	and.w	r3, r3, #31
 8005c14:	2b09      	cmp	r3, #9
 8005c16:	bf94      	ite	ls
 8005c18:	2301      	movls	r3, #1
 8005c1a:	2300      	movhi	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e019      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x66c>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c28:	fa93 f3a3 	rbit	r3, r3
 8005c2c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8005c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005c32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d101      	bne.n	8005c3c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005c38:	2320      	movs	r3, #32
 8005c3a:	e003      	b.n	8005c44 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8005c3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c3e:	fab3 f383 	clz	r3, r3
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	3301      	adds	r3, #1
 8005c46:	f003 031f 	and.w	r3, r3, #31
 8005c4a:	2b09      	cmp	r3, #9
 8005c4c:	bf94      	ite	ls
 8005c4e:	2301      	movls	r3, #1
 8005c50:	2300      	movhi	r3, #0
 8005c52:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d079      	beq.n	8005d4c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d107      	bne.n	8005c74 <HAL_ADC_ConfigChannel+0x68c>
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	0e9b      	lsrs	r3, r3, #26
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	069b      	lsls	r3, r3, #26
 8005c6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005c72:	e015      	b.n	8005ca0 <HAL_ADC_ConfigChannel+0x6b8>
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c7c:	fa93 f3a3 	rbit	r3, r3
 8005c80:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005c82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c84:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d101      	bne.n	8005c90 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8005c8c:	2320      	movs	r3, #32
 8005c8e:	e003      	b.n	8005c98 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 8005c90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c92:	fab3 f383 	clz	r3, r3
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	3301      	adds	r3, #1
 8005c9a:	069b      	lsls	r3, r3, #26
 8005c9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d109      	bne.n	8005cc0 <HAL_ADC_ConfigChannel+0x6d8>
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	0e9b      	lsrs	r3, r3, #26
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	f003 031f 	and.w	r3, r3, #31
 8005cb8:	2101      	movs	r1, #1
 8005cba:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbe:	e017      	b.n	8005cf0 <HAL_ADC_ConfigChannel+0x708>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cc8:	fa93 f3a3 	rbit	r3, r3
 8005ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8005cce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cd0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8005cd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8005cd8:	2320      	movs	r3, #32
 8005cda:	e003      	b.n	8005ce4 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 8005cdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cde:	fab3 f383 	clz	r3, r3
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	f003 031f 	and.w	r3, r3, #31
 8005cea:	2101      	movs	r1, #1
 8005cec:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf0:	ea42 0103 	orr.w	r1, r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10a      	bne.n	8005d16 <HAL_ADC_ConfigChannel+0x72e>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	0e9b      	lsrs	r3, r3, #26
 8005d06:	3301      	adds	r3, #1
 8005d08:	f003 021f 	and.w	r2, r3, #31
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	005b      	lsls	r3, r3, #1
 8005d10:	4413      	add	r3, r2
 8005d12:	051b      	lsls	r3, r3, #20
 8005d14:	e018      	b.n	8005d48 <HAL_ADC_ConfigChannel+0x760>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1e:	fa93 f3a3 	rbit	r3, r3
 8005d22:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d26:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 8005d2e:	2320      	movs	r3, #32
 8005d30:	e003      	b.n	8005d3a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8005d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d34:	fab3 f383 	clz	r3, r3
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	f003 021f 	and.w	r2, r3, #31
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d48:	430b      	orrs	r3, r1
 8005d4a:	e07e      	b.n	8005e4a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d107      	bne.n	8005d68 <HAL_ADC_ConfigChannel+0x780>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	0e9b      	lsrs	r3, r3, #26
 8005d5e:	3301      	adds	r3, #1
 8005d60:	069b      	lsls	r3, r3, #26
 8005d62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d66:	e015      	b.n	8005d94 <HAL_ADC_ConfigChannel+0x7ac>
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d70:	fa93 f3a3 	rbit	r3, r3
 8005d74:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8005d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8005d80:	2320      	movs	r3, #32
 8005d82:	e003      	b.n	8005d8c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8005d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d86:	fab3 f383 	clz	r3, r3
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	069b      	lsls	r3, r3, #26
 8005d90:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d109      	bne.n	8005db4 <HAL_ADC_ConfigChannel+0x7cc>
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	0e9b      	lsrs	r3, r3, #26
 8005da6:	3301      	adds	r3, #1
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	2101      	movs	r1, #1
 8005dae:	fa01 f303 	lsl.w	r3, r1, r3
 8005db2:	e017      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x7fc>
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	fa93 f3a3 	rbit	r3, r3
 8005dc0:	61bb      	str	r3, [r7, #24]
  return result;
 8005dc2:	69bb      	ldr	r3, [r7, #24]
 8005dc4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 8005dcc:	2320      	movs	r3, #32
 8005dce:	e003      	b.n	8005dd8 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 8005dd0:	6a3b      	ldr	r3, [r7, #32]
 8005dd2:	fab3 f383 	clz	r3, r3
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	3301      	adds	r3, #1
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2101      	movs	r1, #1
 8005de0:	fa01 f303 	lsl.w	r3, r1, r3
 8005de4:	ea42 0103 	orr.w	r1, r2, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10d      	bne.n	8005e10 <HAL_ADC_ConfigChannel+0x828>
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	0e9b      	lsrs	r3, r3, #26
 8005dfa:	3301      	adds	r3, #1
 8005dfc:	f003 021f 	and.w	r2, r3, #31
 8005e00:	4613      	mov	r3, r2
 8005e02:	005b      	lsls	r3, r3, #1
 8005e04:	4413      	add	r3, r2
 8005e06:	3b1e      	subs	r3, #30
 8005e08:	051b      	lsls	r3, r3, #20
 8005e0a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e0e:	e01b      	b.n	8005e48 <HAL_ADC_ConfigChannel+0x860>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	fa93 f3a3 	rbit	r3, r3
 8005e1c:	60fb      	str	r3, [r7, #12]
  return result;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005e28:	2320      	movs	r3, #32
 8005e2a:	e003      	b.n	8005e34 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	fab3 f383 	clz	r3, r3
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	3301      	adds	r3, #1
 8005e36:	f003 021f 	and.w	r2, r3, #31
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	4413      	add	r3, r2
 8005e40:	3b1e      	subs	r3, #30
 8005e42:	051b      	lsls	r3, r3, #20
 8005e44:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e48:	430b      	orrs	r3, r1
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	6892      	ldr	r2, [r2, #8]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	f7fe ff78 	bl	8004d44 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f280 80d7 	bge.w	800600c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a06      	ldr	r2, [pc, #24]	@ (8005e7c <HAL_ADC_ConfigChannel+0x894>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d004      	beq.n	8005e72 <HAL_ADC_ConfigChannel+0x88a>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a04      	ldr	r2, [pc, #16]	@ (8005e80 <HAL_ADC_ConfigChannel+0x898>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d10a      	bne.n	8005e88 <HAL_ADC_ConfigChannel+0x8a0>
 8005e72:	4b04      	ldr	r3, [pc, #16]	@ (8005e84 <HAL_ADC_ConfigChannel+0x89c>)
 8005e74:	e009      	b.n	8005e8a <HAL_ADC_ConfigChannel+0x8a2>
 8005e76:	bf00      	nop
 8005e78:	47ff0000 	.word	0x47ff0000
 8005e7c:	40022000 	.word	0x40022000
 8005e80:	40022100 	.word	0x40022100
 8005e84:	40022300 	.word	0x40022300
 8005e88:	4b65      	ldr	r3, [pc, #404]	@ (8006020 <HAL_ADC_ConfigChannel+0xa38>)
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe fdde 	bl	8004a4c <LL_ADC_GetCommonPathInternalCh>
 8005e90:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a62      	ldr	r2, [pc, #392]	@ (8006024 <HAL_ADC_ConfigChannel+0xa3c>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d004      	beq.n	8005ea8 <HAL_ADC_ConfigChannel+0x8c0>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a61      	ldr	r2, [pc, #388]	@ (8006028 <HAL_ADC_ConfigChannel+0xa40>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d10e      	bne.n	8005ec6 <HAL_ADC_ConfigChannel+0x8de>
 8005ea8:	485e      	ldr	r0, [pc, #376]	@ (8006024 <HAL_ADC_ConfigChannel+0xa3c>)
 8005eaa:	f7ff f83b 	bl	8004f24 <LL_ADC_IsEnabled>
 8005eae:	4604      	mov	r4, r0
 8005eb0:	485d      	ldr	r0, [pc, #372]	@ (8006028 <HAL_ADC_ConfigChannel+0xa40>)
 8005eb2:	f7ff f837 	bl	8004f24 <LL_ADC_IsEnabled>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4323      	orrs	r3, r4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	e008      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x8f0>
 8005ec6:	4859      	ldr	r0, [pc, #356]	@ (800602c <HAL_ADC_ConfigChannel+0xa44>)
 8005ec8:	f7ff f82c 	bl	8004f24 <LL_ADC_IsEnabled>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bf0c      	ite	eq
 8005ed2:	2301      	moveq	r3, #1
 8005ed4:	2300      	movne	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	f000 8084 	beq.w	8005fe6 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a53      	ldr	r2, [pc, #332]	@ (8006030 <HAL_ADC_ConfigChannel+0xa48>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d132      	bne.n	8005f4e <HAL_ADC_ConfigChannel+0x966>
 8005ee8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d12c      	bne.n	8005f4e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a4c      	ldr	r2, [pc, #304]	@ (800602c <HAL_ADC_ConfigChannel+0xa44>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	f040 8086 	bne.w	800600c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a47      	ldr	r2, [pc, #284]	@ (8006024 <HAL_ADC_ConfigChannel+0xa3c>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d004      	beq.n	8005f14 <HAL_ADC_ConfigChannel+0x92c>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a46      	ldr	r2, [pc, #280]	@ (8006028 <HAL_ADC_ConfigChannel+0xa40>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d101      	bne.n	8005f18 <HAL_ADC_ConfigChannel+0x930>
 8005f14:	4a47      	ldr	r2, [pc, #284]	@ (8006034 <HAL_ADC_ConfigChannel+0xa4c>)
 8005f16:	e000      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x932>
 8005f18:	4a41      	ldr	r2, [pc, #260]	@ (8006020 <HAL_ADC_ConfigChannel+0xa38>)
 8005f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f1e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f22:	4619      	mov	r1, r3
 8005f24:	4610      	mov	r0, r2
 8005f26:	f7fe fd7e 	bl	8004a26 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f2a:	4b43      	ldr	r3, [pc, #268]	@ (8006038 <HAL_ADC_ConfigChannel+0xa50>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	099b      	lsrs	r3, r3, #6
 8005f30:	4a42      	ldr	r2, [pc, #264]	@ (800603c <HAL_ADC_ConfigChannel+0xa54>)
 8005f32:	fba2 2303 	umull	r2, r3, r2, r3
 8005f36:	099b      	lsrs	r3, r3, #6
 8005f38:	3301      	adds	r3, #1
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005f3e:	e002      	b.n	8005f46 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f9      	bne.n	8005f40 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f4c:	e05e      	b.n	800600c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a3b      	ldr	r2, [pc, #236]	@ (8006040 <HAL_ADC_ConfigChannel+0xa58>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d120      	bne.n	8005f9a <HAL_ADC_ConfigChannel+0x9b2>
 8005f58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d11a      	bne.n	8005f9a <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a30      	ldr	r2, [pc, #192]	@ (800602c <HAL_ADC_ConfigChannel+0xa44>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d14e      	bne.n	800600c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a2c      	ldr	r2, [pc, #176]	@ (8006024 <HAL_ADC_ConfigChannel+0xa3c>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d004      	beq.n	8005f82 <HAL_ADC_ConfigChannel+0x99a>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a2a      	ldr	r2, [pc, #168]	@ (8006028 <HAL_ADC_ConfigChannel+0xa40>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d101      	bne.n	8005f86 <HAL_ADC_ConfigChannel+0x99e>
 8005f82:	4a2c      	ldr	r2, [pc, #176]	@ (8006034 <HAL_ADC_ConfigChannel+0xa4c>)
 8005f84:	e000      	b.n	8005f88 <HAL_ADC_ConfigChannel+0x9a0>
 8005f86:	4a26      	ldr	r2, [pc, #152]	@ (8006020 <HAL_ADC_ConfigChannel+0xa38>)
 8005f88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f7fe fd47 	bl	8004a26 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005f98:	e038      	b.n	800600c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a29      	ldr	r2, [pc, #164]	@ (8006044 <HAL_ADC_ConfigChannel+0xa5c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d133      	bne.n	800600c <HAL_ADC_ConfigChannel+0xa24>
 8005fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fa8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d12d      	bne.n	800600c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a1d      	ldr	r2, [pc, #116]	@ (800602c <HAL_ADC_ConfigChannel+0xa44>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d128      	bne.n	800600c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a19      	ldr	r2, [pc, #100]	@ (8006024 <HAL_ADC_ConfigChannel+0xa3c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d004      	beq.n	8005fce <HAL_ADC_ConfigChannel+0x9e6>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a17      	ldr	r2, [pc, #92]	@ (8006028 <HAL_ADC_ConfigChannel+0xa40>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d101      	bne.n	8005fd2 <HAL_ADC_ConfigChannel+0x9ea>
 8005fce:	4a19      	ldr	r2, [pc, #100]	@ (8006034 <HAL_ADC_ConfigChannel+0xa4c>)
 8005fd0:	e000      	b.n	8005fd4 <HAL_ADC_ConfigChannel+0x9ec>
 8005fd2:	4a13      	ldr	r2, [pc, #76]	@ (8006020 <HAL_ADC_ConfigChannel+0xa38>)
 8005fd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fd8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f7fe fd21 	bl	8004a26 <LL_ADC_SetCommonPathInternalCh>
 8005fe4:	e012      	b.n	800600c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fea:	f043 0220 	orr.w	r2, r3, #32
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005ff8:	e008      	b.n	800600c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ffe:	f043 0220 	orr.w	r2, r3, #32
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8006014:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8006018:	4618      	mov	r0, r3
 800601a:	37e4      	adds	r7, #228	@ 0xe4
 800601c:	46bd      	mov	sp, r7
 800601e:	bd90      	pop	{r4, r7, pc}
 8006020:	58026300 	.word	0x58026300
 8006024:	40022000 	.word	0x40022000
 8006028:	40022100 	.word	0x40022100
 800602c:	58026000 	.word	0x58026000
 8006030:	c7520000 	.word	0xc7520000
 8006034:	40022300 	.word	0x40022300
 8006038:	24000000 	.word	0x24000000
 800603c:	053e2d63 	.word	0x053e2d63
 8006040:	c3210000 	.word	0xc3210000
 8006044:	cb840000 	.word	0xcb840000

08006048 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f7fe ff65 	bl	8004f24 <LL_ADC_IsEnabled>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d16e      	bne.n	800613e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689a      	ldr	r2, [r3, #8]
 8006066:	4b38      	ldr	r3, [pc, #224]	@ (8006148 <ADC_Enable+0x100>)
 8006068:	4013      	ands	r3, r2
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00d      	beq.n	800608a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006072:	f043 0210 	orr.w	r2, r3, #16
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800607e:	f043 0201 	orr.w	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e05a      	b.n	8006140 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe ff20 	bl	8004ed4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006094:	f7fe fc84 	bl	80049a0 <HAL_GetTick>
 8006098:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a2b      	ldr	r2, [pc, #172]	@ (800614c <ADC_Enable+0x104>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d004      	beq.n	80060ae <ADC_Enable+0x66>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a29      	ldr	r2, [pc, #164]	@ (8006150 <ADC_Enable+0x108>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <ADC_Enable+0x6a>
 80060ae:	4b29      	ldr	r3, [pc, #164]	@ (8006154 <ADC_Enable+0x10c>)
 80060b0:	e000      	b.n	80060b4 <ADC_Enable+0x6c>
 80060b2:	4b29      	ldr	r3, [pc, #164]	@ (8006158 <ADC_Enable+0x110>)
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe feb1 	bl	8004e1c <LL_ADC_GetMultimode>
 80060ba:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a23      	ldr	r2, [pc, #140]	@ (8006150 <ADC_Enable+0x108>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d002      	beq.n	80060cc <ADC_Enable+0x84>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	e000      	b.n	80060ce <ADC_Enable+0x86>
 80060cc:	4b1f      	ldr	r3, [pc, #124]	@ (800614c <ADC_Enable+0x104>)
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	6812      	ldr	r2, [r2, #0]
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d02c      	beq.n	8006130 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d130      	bne.n	800613e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060dc:	e028      	b.n	8006130 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe ff1e 	bl	8004f24 <LL_ADC_IsEnabled>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe feee 	bl	8004ed4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80060f8:	f7fe fc52 	bl	80049a0 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d914      	bls.n	8006130 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b01      	cmp	r3, #1
 8006112:	d00d      	beq.n	8006130 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006118:	f043 0210 	orr.w	r2, r3, #16
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006124:	f043 0201 	orr.w	r2, r3, #1
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e007      	b.n	8006140 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b01      	cmp	r3, #1
 800613c:	d1cf      	bne.n	80060de <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	8000003f 	.word	0x8000003f
 800614c:	40022000 	.word	0x40022000
 8006150:	40022100 	.word	0x40022100
 8006154:	40022300 	.word	0x40022300
 8006158:	58026300 	.word	0x58026300

0800615c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7fe feee 	bl	8004f4a <LL_ADC_IsDisableOngoing>
 800616e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4618      	mov	r0, r3
 8006176:	f7fe fed5 	bl	8004f24 <LL_ADC_IsEnabled>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d047      	beq.n	8006210 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d144      	bne.n	8006210 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 030d 	and.w	r3, r3, #13
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10c      	bne.n	80061ae <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f7fe feaf 	bl	8004efc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2203      	movs	r2, #3
 80061a4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80061a6:	f7fe fbfb 	bl	80049a0 <HAL_GetTick>
 80061aa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80061ac:	e029      	b.n	8006202 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061b2:	f043 0210 	orr.w	r2, r3, #16
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061be:	f043 0201 	orr.w	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e023      	b.n	8006212 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80061ca:	f7fe fbe9 	bl	80049a0 <HAL_GetTick>
 80061ce:	4602      	mov	r2, r0
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d914      	bls.n	8006202 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f003 0301 	and.w	r3, r3, #1
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d00d      	beq.n	8006202 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061ea:	f043 0210 	orr.w	r2, r3, #16
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80061f6:	f043 0201 	orr.w	r2, r3, #1
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e007      	b.n	8006212 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1dc      	bne.n	80061ca <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006226:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800622c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006230:	2b00      	cmp	r3, #0
 8006232:	d14b      	bne.n	80062cc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006238:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0308 	and.w	r3, r3, #8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d021      	beq.n	8006292 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7fe fcfa 	bl	8004c4c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d032      	beq.n	80062c4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d12b      	bne.n	80062c4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006280:	2b00      	cmp	r3, #0
 8006282:	d11f      	bne.n	80062c4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006288:	f043 0201 	orr.w	r2, r3, #1
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	661a      	str	r2, [r3, #96]	@ 0x60
 8006290:	e018      	b.n	80062c4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f003 0303 	and.w	r3, r3, #3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d111      	bne.n	80062c4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d105      	bne.n	80062c4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062bc:	f043 0201 	orr.w	r2, r3, #1
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff f971 	bl	80055ac <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80062ca:	e00e      	b.n	80062ea <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff f97b 	bl	80055d4 <HAL_ADC_ErrorCallback>
}
 80062de:	e004      	b.n	80062ea <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b084      	sub	sp, #16
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006300:	68f8      	ldr	r0, [r7, #12]
 8006302:	f7ff f95d 	bl	80055c0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800631a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006320:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800632c:	f043 0204 	orr.w	r2, r3, #4
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f7ff f94d 	bl	80055d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
	...

08006344 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a6c      	ldr	r2, [pc, #432]	@ (8006504 <ADC_ConfigureBoostMode+0x1c0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d004      	beq.n	8006360 <ADC_ConfigureBoostMode+0x1c>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a6b      	ldr	r2, [pc, #428]	@ (8006508 <ADC_ConfigureBoostMode+0x1c4>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d109      	bne.n	8006374 <ADC_ConfigureBoostMode+0x30>
 8006360:	4b6a      	ldr	r3, [pc, #424]	@ (800650c <ADC_ConfigureBoostMode+0x1c8>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006368:	2b00      	cmp	r3, #0
 800636a:	bf14      	ite	ne
 800636c:	2301      	movne	r3, #1
 800636e:	2300      	moveq	r3, #0
 8006370:	b2db      	uxtb	r3, r3
 8006372:	e008      	b.n	8006386 <ADC_ConfigureBoostMode+0x42>
 8006374:	4b66      	ldr	r3, [pc, #408]	@ (8006510 <ADC_ConfigureBoostMode+0x1cc>)
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800637c:	2b00      	cmp	r3, #0
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	2b00      	cmp	r3, #0
 8006388:	d01c      	beq.n	80063c4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800638a:	f005 ff47 	bl	800c21c <HAL_RCC_GetHCLKFreq>
 800638e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006398:	d010      	beq.n	80063bc <ADC_ConfigureBoostMode+0x78>
 800639a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800639e:	d873      	bhi.n	8006488 <ADC_ConfigureBoostMode+0x144>
 80063a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063a4:	d002      	beq.n	80063ac <ADC_ConfigureBoostMode+0x68>
 80063a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80063aa:	d16d      	bne.n	8006488 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	0c1b      	lsrs	r3, r3, #16
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80063b8:	60fb      	str	r3, [r7, #12]
        break;
 80063ba:	e068      	b.n	800648e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	089b      	lsrs	r3, r3, #2
 80063c0:	60fb      	str	r3, [r7, #12]
        break;
 80063c2:	e064      	b.n	800648e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80063c4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80063c8:	f04f 0100 	mov.w	r1, #0
 80063cc:	f007 f922 	bl	800d614 <HAL_RCCEx_GetPeriphCLKFreq>
 80063d0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80063da:	d051      	beq.n	8006480 <ADC_ConfigureBoostMode+0x13c>
 80063dc:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80063e0:	d854      	bhi.n	800648c <ADC_ConfigureBoostMode+0x148>
 80063e2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80063e6:	d047      	beq.n	8006478 <ADC_ConfigureBoostMode+0x134>
 80063e8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80063ec:	d84e      	bhi.n	800648c <ADC_ConfigureBoostMode+0x148>
 80063ee:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80063f2:	d03d      	beq.n	8006470 <ADC_ConfigureBoostMode+0x12c>
 80063f4:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80063f8:	d848      	bhi.n	800648c <ADC_ConfigureBoostMode+0x148>
 80063fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063fe:	d033      	beq.n	8006468 <ADC_ConfigureBoostMode+0x124>
 8006400:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006404:	d842      	bhi.n	800648c <ADC_ConfigureBoostMode+0x148>
 8006406:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800640a:	d029      	beq.n	8006460 <ADC_ConfigureBoostMode+0x11c>
 800640c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8006410:	d83c      	bhi.n	800648c <ADC_ConfigureBoostMode+0x148>
 8006412:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8006416:	d01a      	beq.n	800644e <ADC_ConfigureBoostMode+0x10a>
 8006418:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800641c:	d836      	bhi.n	800648c <ADC_ConfigureBoostMode+0x148>
 800641e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006422:	d014      	beq.n	800644e <ADC_ConfigureBoostMode+0x10a>
 8006424:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8006428:	d830      	bhi.n	800648c <ADC_ConfigureBoostMode+0x148>
 800642a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800642e:	d00e      	beq.n	800644e <ADC_ConfigureBoostMode+0x10a>
 8006430:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006434:	d82a      	bhi.n	800648c <ADC_ConfigureBoostMode+0x148>
 8006436:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800643a:	d008      	beq.n	800644e <ADC_ConfigureBoostMode+0x10a>
 800643c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006440:	d824      	bhi.n	800648c <ADC_ConfigureBoostMode+0x148>
 8006442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006446:	d002      	beq.n	800644e <ADC_ConfigureBoostMode+0x10a>
 8006448:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800644c:	d11e      	bne.n	800648c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	0c9b      	lsrs	r3, r3, #18
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	fbb2 f3f3 	udiv	r3, r2, r3
 800645c:	60fb      	str	r3, [r7, #12]
        break;
 800645e:	e016      	b.n	800648e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	091b      	lsrs	r3, r3, #4
 8006464:	60fb      	str	r3, [r7, #12]
        break;
 8006466:	e012      	b.n	800648e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	095b      	lsrs	r3, r3, #5
 800646c:	60fb      	str	r3, [r7, #12]
        break;
 800646e:	e00e      	b.n	800648e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	099b      	lsrs	r3, r3, #6
 8006474:	60fb      	str	r3, [r7, #12]
        break;
 8006476:	e00a      	b.n	800648e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	09db      	lsrs	r3, r3, #7
 800647c:	60fb      	str	r3, [r7, #12]
        break;
 800647e:	e006      	b.n	800648e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	0a1b      	lsrs	r3, r3, #8
 8006484:	60fb      	str	r3, [r7, #12]
        break;
 8006486:	e002      	b.n	800648e <ADC_ConfigureBoostMode+0x14a>
        break;
 8006488:	bf00      	nop
 800648a:	e000      	b.n	800648e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800648c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	085b      	lsrs	r3, r3, #1
 8006492:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	4a1f      	ldr	r2, [pc, #124]	@ (8006514 <ADC_ConfigureBoostMode+0x1d0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d808      	bhi.n	80064ae <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064aa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80064ac:	e025      	b.n	80064fa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	4a19      	ldr	r2, [pc, #100]	@ (8006518 <ADC_ConfigureBoostMode+0x1d4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d80a      	bhi.n	80064cc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80064c8:	609a      	str	r2, [r3, #8]
}
 80064ca:	e016      	b.n	80064fa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4a13      	ldr	r2, [pc, #76]	@ (800651c <ADC_ConfigureBoostMode+0x1d8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d80a      	bhi.n	80064ea <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064e6:	609a      	str	r2, [r3, #8]
}
 80064e8:	e007      	b.n	80064fa <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80064f8:	609a      	str	r2, [r3, #8]
}
 80064fa:	bf00      	nop
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	40022000 	.word	0x40022000
 8006508:	40022100 	.word	0x40022100
 800650c:	40022300 	.word	0x40022300
 8006510:	58026300 	.word	0x58026300
 8006514:	005f5e10 	.word	0x005f5e10
 8006518:	00bebc20 	.word	0x00bebc20
 800651c:	017d7840 	.word	0x017d7840

08006520 <LL_ADC_IsEnabled>:
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b01      	cmp	r3, #1
 8006532:	d101      	bne.n	8006538 <LL_ADC_IsEnabled+0x18>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <LL_ADC_IsEnabled+0x1a>
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <LL_ADC_StartCalibration>:
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	4b09      	ldr	r3, [pc, #36]	@ (8006580 <LL_ADC_StartCalibration+0x38>)
 800655a:	4013      	ands	r3, r2
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006568:	430a      	orrs	r2, r1
 800656a:	4313      	orrs	r3, r2
 800656c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	609a      	str	r2, [r3, #8]
}
 8006574:	bf00      	nop
 8006576:	3714      	adds	r7, #20
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	3ffeffc0 	.word	0x3ffeffc0

08006584 <LL_ADC_IsCalibrationOnGoing>:
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	689b      	ldr	r3, [r3, #8]
 8006590:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006594:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006598:	d101      	bne.n	800659e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800659a:	2301      	movs	r3, #1
 800659c:	e000      	b.n	80065a0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <LL_ADC_REG_IsConversionOngoing>:
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f003 0304 	and.w	r3, r3, #4
 80065bc:	2b04      	cmp	r3, #4
 80065be:	d101      	bne.n	80065c4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80065c0:	2301      	movs	r3, #1
 80065c2:	e000      	b.n	80065c6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
	...

080065d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d101      	bne.n	80065f2 <HAL_ADCEx_Calibration_Start+0x1e>
 80065ee:	2302      	movs	r3, #2
 80065f0:	e04c      	b.n	800668c <HAL_ADCEx_Calibration_Start+0xb8>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f7ff fdae 	bl	800615c <ADC_Disable>
 8006600:	4603      	mov	r3, r0
 8006602:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8006604:	7dfb      	ldrb	r3, [r7, #23]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d135      	bne.n	8006676 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800660e:	4b21      	ldr	r3, [pc, #132]	@ (8006694 <HAL_ADCEx_Calibration_Start+0xc0>)
 8006610:	4013      	ands	r3, r2
 8006612:	f043 0202 	orr.w	r2, r3, #2
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	68b9      	ldr	r1, [r7, #8]
 8006622:	4618      	mov	r0, r3
 8006624:	f7ff ff90 	bl	8006548 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006628:	e014      	b.n	8006654 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	3301      	adds	r3, #1
 800662e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4a19      	ldr	r2, [pc, #100]	@ (8006698 <HAL_ADCEx_Calibration_Start+0xc4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d30d      	bcc.n	8006654 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800663c:	f023 0312 	bic.w	r3, r3, #18
 8006640:	f043 0210 	orr.w	r2, r3, #16
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8006650:	2301      	movs	r3, #1
 8006652:	e01b      	b.n	800668c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f7ff ff93 	bl	8006584 <LL_ADC_IsCalibrationOnGoing>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1e2      	bne.n	800662a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006668:	f023 0303 	bic.w	r3, r3, #3
 800666c:	f043 0201 	orr.w	r2, r3, #1
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	661a      	str	r2, [r3, #96]	@ 0x60
 8006674:	e005      	b.n	8006682 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800667a:	f043 0210 	orr.w	r2, r3, #16
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3718      	adds	r7, #24
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	ffffeefd 	.word	0xffffeefd
 8006698:	25c3f800 	.word	0x25c3f800

0800669c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b0a3      	sub	sp, #140	@ 0x8c
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e0c1      	b.n	800683e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80066c2:	2300      	movs	r3, #0
 80066c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80066c6:	2300      	movs	r3, #0
 80066c8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a5e      	ldr	r2, [pc, #376]	@ (8006848 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d102      	bne.n	80066da <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80066d4:	4b5d      	ldr	r3, [pc, #372]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	e001      	b.n	80066de <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10b      	bne.n	80066fc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0a0      	b.n	800683e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7ff ff54 	bl	80065ac <LL_ADC_REG_IsConversionOngoing>
 8006704:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4618      	mov	r0, r3
 800670e:	f7ff ff4d 	bl	80065ac <LL_ADC_REG_IsConversionOngoing>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	f040 8081 	bne.w	800681c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800671a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800671e:	2b00      	cmp	r3, #0
 8006720:	d17c      	bne.n	800681c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a48      	ldr	r2, [pc, #288]	@ (8006848 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a46      	ldr	r2, [pc, #280]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d101      	bne.n	800673a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006736:	4b46      	ldr	r3, [pc, #280]	@ (8006850 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8006738:	e000      	b.n	800673c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800673a:	4b46      	ldr	r3, [pc, #280]	@ (8006854 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800673c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d039      	beq.n	80067ba <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8006746:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	431a      	orrs	r2, r3
 8006754:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006756:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a3a      	ldr	r2, [pc, #232]	@ (8006848 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d004      	beq.n	800676c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a39      	ldr	r2, [pc, #228]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d10e      	bne.n	800678a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 800676c:	4836      	ldr	r0, [pc, #216]	@ (8006848 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800676e:	f7ff fed7 	bl	8006520 <LL_ADC_IsEnabled>
 8006772:	4604      	mov	r4, r0
 8006774:	4835      	ldr	r0, [pc, #212]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8006776:	f7ff fed3 	bl	8006520 <LL_ADC_IsEnabled>
 800677a:	4603      	mov	r3, r0
 800677c:	4323      	orrs	r3, r4
 800677e:	2b00      	cmp	r3, #0
 8006780:	bf0c      	ite	eq
 8006782:	2301      	moveq	r3, #1
 8006784:	2300      	movne	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	e008      	b.n	800679c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800678a:	4833      	ldr	r0, [pc, #204]	@ (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800678c:	f7ff fec8 	bl	8006520 <LL_ADC_IsEnabled>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	bf0c      	ite	eq
 8006796:	2301      	moveq	r3, #1
 8006798:	2300      	movne	r3, #0
 800679a:	b2db      	uxtb	r3, r3
 800679c:	2b00      	cmp	r3, #0
 800679e:	d047      	beq.n	8006830 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80067a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067a2:	689a      	ldr	r2, [r3, #8]
 80067a4:	4b2d      	ldr	r3, [pc, #180]	@ (800685c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	6811      	ldr	r1, [r2, #0]
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	6892      	ldr	r2, [r2, #8]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	431a      	orrs	r2, r3
 80067b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067b6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067b8:	e03a      	b.n	8006830 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80067ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80067c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80067c4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006848 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d004      	beq.n	80067da <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a1d      	ldr	r2, [pc, #116]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d10e      	bne.n	80067f8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80067da:	481b      	ldr	r0, [pc, #108]	@ (8006848 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80067dc:	f7ff fea0 	bl	8006520 <LL_ADC_IsEnabled>
 80067e0:	4604      	mov	r4, r0
 80067e2:	481a      	ldr	r0, [pc, #104]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80067e4:	f7ff fe9c 	bl	8006520 <LL_ADC_IsEnabled>
 80067e8:	4603      	mov	r3, r0
 80067ea:	4323      	orrs	r3, r4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e008      	b.n	800680a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80067f8:	4817      	ldr	r0, [pc, #92]	@ (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80067fa:	f7ff fe91 	bl	8006520 <LL_ADC_IsEnabled>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	bf0c      	ite	eq
 8006804:	2301      	moveq	r3, #1
 8006806:	2300      	movne	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d010      	beq.n	8006830 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800680e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	4b12      	ldr	r3, [pc, #72]	@ (800685c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006814:	4013      	ands	r3, r2
 8006816:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006818:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800681a:	e009      	b.n	8006830 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006820:	f043 0220 	orr.w	r2, r3, #32
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800682e:	e000      	b.n	8006832 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006830:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800683a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800683e:	4618      	mov	r0, r3
 8006840:	378c      	adds	r7, #140	@ 0x8c
 8006842:	46bd      	mov	sp, r7
 8006844:	bd90      	pop	{r4, r7, pc}
 8006846:	bf00      	nop
 8006848:	40022000 	.word	0x40022000
 800684c:	40022100 	.word	0x40022100
 8006850:	40022300 	.word	0x40022300
 8006854:	58026300 	.word	0x58026300
 8006858:	58026000 	.word	0x58026000
 800685c:	fffff0e0 	.word	0xfffff0e0

08006860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f003 0307 	and.w	r3, r3, #7
 800686e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006870:	4b0b      	ldr	r3, [pc, #44]	@ (80068a0 <__NVIC_SetPriorityGrouping+0x40>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006876:	68ba      	ldr	r2, [r7, #8]
 8006878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800687c:	4013      	ands	r3, r2
 800687e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006888:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <__NVIC_SetPriorityGrouping+0x44>)
 800688a:	4313      	orrs	r3, r2
 800688c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800688e:	4a04      	ldr	r2, [pc, #16]	@ (80068a0 <__NVIC_SetPriorityGrouping+0x40>)
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	60d3      	str	r3, [r2, #12]
}
 8006894:	bf00      	nop
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	e000ed00 	.word	0xe000ed00
 80068a4:	05fa0000 	.word	0x05fa0000

080068a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068ac:	4b04      	ldr	r3, [pc, #16]	@ (80068c0 <__NVIC_GetPriorityGrouping+0x18>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	0a1b      	lsrs	r3, r3, #8
 80068b2:	f003 0307 	and.w	r3, r3, #7
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr
 80068c0:	e000ed00 	.word	0xe000ed00

080068c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	4603      	mov	r3, r0
 80068cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80068ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	db0b      	blt.n	80068ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80068d6:	88fb      	ldrh	r3, [r7, #6]
 80068d8:	f003 021f 	and.w	r2, r3, #31
 80068dc:	4907      	ldr	r1, [pc, #28]	@ (80068fc <__NVIC_EnableIRQ+0x38>)
 80068de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	2001      	movs	r0, #1
 80068e6:	fa00 f202 	lsl.w	r2, r0, r2
 80068ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	e000e100 	.word	0xe000e100

08006900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	6039      	str	r1, [r7, #0]
 800690a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800690c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006910:	2b00      	cmp	r3, #0
 8006912:	db0a      	blt.n	800692a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	490c      	ldr	r1, [pc, #48]	@ (800694c <__NVIC_SetPriority+0x4c>)
 800691a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800691e:	0112      	lsls	r2, r2, #4
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	440b      	add	r3, r1
 8006924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006928:	e00a      	b.n	8006940 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	b2da      	uxtb	r2, r3
 800692e:	4908      	ldr	r1, [pc, #32]	@ (8006950 <__NVIC_SetPriority+0x50>)
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	f003 030f 	and.w	r3, r3, #15
 8006936:	3b04      	subs	r3, #4
 8006938:	0112      	lsls	r2, r2, #4
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	440b      	add	r3, r1
 800693e:	761a      	strb	r2, [r3, #24]
}
 8006940:	bf00      	nop
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	e000e100 	.word	0xe000e100
 8006950:	e000ed00 	.word	0xe000ed00

08006954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006954:	b480      	push	{r7}
 8006956:	b089      	sub	sp, #36	@ 0x24
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f003 0307 	and.w	r3, r3, #7
 8006966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f1c3 0307 	rsb	r3, r3, #7
 800696e:	2b04      	cmp	r3, #4
 8006970:	bf28      	it	cs
 8006972:	2304      	movcs	r3, #4
 8006974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	3304      	adds	r3, #4
 800697a:	2b06      	cmp	r3, #6
 800697c:	d902      	bls.n	8006984 <NVIC_EncodePriority+0x30>
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3b03      	subs	r3, #3
 8006982:	e000      	b.n	8006986 <NVIC_EncodePriority+0x32>
 8006984:	2300      	movs	r3, #0
 8006986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006988:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	43da      	mvns	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	401a      	ands	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800699c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	fa01 f303 	lsl.w	r3, r1, r3
 80069a6:	43d9      	mvns	r1, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069ac:	4313      	orrs	r3, r2
         );
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3724      	adds	r7, #36	@ 0x24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b082      	sub	sp, #8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	3b01      	subs	r3, #1
 80069c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069cc:	d301      	bcc.n	80069d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069ce:	2301      	movs	r3, #1
 80069d0:	e00f      	b.n	80069f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069d2:	4a0a      	ldr	r2, [pc, #40]	@ (80069fc <SysTick_Config+0x40>)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	3b01      	subs	r3, #1
 80069d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80069da:	210f      	movs	r1, #15
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80069e0:	f7ff ff8e 	bl	8006900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069e4:	4b05      	ldr	r3, [pc, #20]	@ (80069fc <SysTick_Config+0x40>)
 80069e6:	2200      	movs	r2, #0
 80069e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069ea:	4b04      	ldr	r3, [pc, #16]	@ (80069fc <SysTick_Config+0x40>)
 80069ec:	2207      	movs	r2, #7
 80069ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	e000e010 	.word	0xe000e010

08006a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ff29 	bl	8006860 <__NVIC_SetPriorityGrouping>
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b086      	sub	sp, #24
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	607a      	str	r2, [r7, #4]
 8006a22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006a24:	f7ff ff40 	bl	80068a8 <__NVIC_GetPriorityGrouping>
 8006a28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68b9      	ldr	r1, [r7, #8]
 8006a2e:	6978      	ldr	r0, [r7, #20]
 8006a30:	f7ff ff90 	bl	8006954 <NVIC_EncodePriority>
 8006a34:	4602      	mov	r2, r0
 8006a36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f7ff ff5f 	bl	8006900 <__NVIC_SetPriority>
}
 8006a42:	bf00      	nop
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b082      	sub	sp, #8
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	4603      	mov	r3, r0
 8006a52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff ff33 	bl	80068c4 <__NVIC_EnableIRQ>
}
 8006a5e:	bf00      	nop
 8006a60:	3708      	adds	r7, #8
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f7ff ffa4 	bl	80069bc <SysTick_Config>
 8006a74:	4603      	mov	r3, r0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3708      	adds	r7, #8
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
	...

08006a80 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006a88:	f7fd ff8a 	bl	80049a0 <HAL_GetTick>
 8006a8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e312      	b.n	80070be <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a66      	ldr	r2, [pc, #408]	@ (8006c38 <HAL_DMA_Init+0x1b8>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d04a      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a65      	ldr	r2, [pc, #404]	@ (8006c3c <HAL_DMA_Init+0x1bc>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d045      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a63      	ldr	r2, [pc, #396]	@ (8006c40 <HAL_DMA_Init+0x1c0>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d040      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a62      	ldr	r2, [pc, #392]	@ (8006c44 <HAL_DMA_Init+0x1c4>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d03b      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a60      	ldr	r2, [pc, #384]	@ (8006c48 <HAL_DMA_Init+0x1c8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d036      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a5f      	ldr	r2, [pc, #380]	@ (8006c4c <HAL_DMA_Init+0x1cc>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d031      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a5d      	ldr	r2, [pc, #372]	@ (8006c50 <HAL_DMA_Init+0x1d0>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d02c      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a5c      	ldr	r2, [pc, #368]	@ (8006c54 <HAL_DMA_Init+0x1d4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d027      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a5a      	ldr	r2, [pc, #360]	@ (8006c58 <HAL_DMA_Init+0x1d8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d022      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a59      	ldr	r2, [pc, #356]	@ (8006c5c <HAL_DMA_Init+0x1dc>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d01d      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a57      	ldr	r2, [pc, #348]	@ (8006c60 <HAL_DMA_Init+0x1e0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d018      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a56      	ldr	r2, [pc, #344]	@ (8006c64 <HAL_DMA_Init+0x1e4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d013      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a54      	ldr	r2, [pc, #336]	@ (8006c68 <HAL_DMA_Init+0x1e8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d00e      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a53      	ldr	r2, [pc, #332]	@ (8006c6c <HAL_DMA_Init+0x1ec>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d009      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a51      	ldr	r2, [pc, #324]	@ (8006c70 <HAL_DMA_Init+0x1f0>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d004      	beq.n	8006b38 <HAL_DMA_Init+0xb8>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a50      	ldr	r2, [pc, #320]	@ (8006c74 <HAL_DMA_Init+0x1f4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d101      	bne.n	8006b3c <HAL_DMA_Init+0xbc>
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e000      	b.n	8006b3e <HAL_DMA_Init+0xbe>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	f000 813c 	beq.w	8006dbc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a37      	ldr	r2, [pc, #220]	@ (8006c38 <HAL_DMA_Init+0x1b8>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d04a      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a36      	ldr	r2, [pc, #216]	@ (8006c3c <HAL_DMA_Init+0x1bc>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d045      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a34      	ldr	r2, [pc, #208]	@ (8006c40 <HAL_DMA_Init+0x1c0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d040      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a33      	ldr	r2, [pc, #204]	@ (8006c44 <HAL_DMA_Init+0x1c4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d03b      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a31      	ldr	r2, [pc, #196]	@ (8006c48 <HAL_DMA_Init+0x1c8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d036      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a30      	ldr	r2, [pc, #192]	@ (8006c4c <HAL_DMA_Init+0x1cc>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d031      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a2e      	ldr	r2, [pc, #184]	@ (8006c50 <HAL_DMA_Init+0x1d0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d02c      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a2d      	ldr	r2, [pc, #180]	@ (8006c54 <HAL_DMA_Init+0x1d4>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d027      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8006c58 <HAL_DMA_Init+0x1d8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d022      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c5c <HAL_DMA_Init+0x1dc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d01d      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a28      	ldr	r2, [pc, #160]	@ (8006c60 <HAL_DMA_Init+0x1e0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d018      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a27      	ldr	r2, [pc, #156]	@ (8006c64 <HAL_DMA_Init+0x1e4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d013      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a25      	ldr	r2, [pc, #148]	@ (8006c68 <HAL_DMA_Init+0x1e8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00e      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a24      	ldr	r2, [pc, #144]	@ (8006c6c <HAL_DMA_Init+0x1ec>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a22      	ldr	r2, [pc, #136]	@ (8006c70 <HAL_DMA_Init+0x1f0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <HAL_DMA_Init+0x174>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a21      	ldr	r2, [pc, #132]	@ (8006c74 <HAL_DMA_Init+0x1f4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d108      	bne.n	8006c06 <HAL_DMA_Init+0x186>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f022 0201 	bic.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
 8006c04:	e007      	b.n	8006c16 <HAL_DMA_Init+0x196>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 0201 	bic.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c16:	e02f      	b.n	8006c78 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c18:	f7fd fec2 	bl	80049a0 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b05      	cmp	r3, #5
 8006c24:	d928      	bls.n	8006c78 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2220      	movs	r2, #32
 8006c2a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2203      	movs	r2, #3
 8006c30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e242      	b.n	80070be <HAL_DMA_Init+0x63e>
 8006c38:	40020010 	.word	0x40020010
 8006c3c:	40020028 	.word	0x40020028
 8006c40:	40020040 	.word	0x40020040
 8006c44:	40020058 	.word	0x40020058
 8006c48:	40020070 	.word	0x40020070
 8006c4c:	40020088 	.word	0x40020088
 8006c50:	400200a0 	.word	0x400200a0
 8006c54:	400200b8 	.word	0x400200b8
 8006c58:	40020410 	.word	0x40020410
 8006c5c:	40020428 	.word	0x40020428
 8006c60:	40020440 	.word	0x40020440
 8006c64:	40020458 	.word	0x40020458
 8006c68:	40020470 	.word	0x40020470
 8006c6c:	40020488 	.word	0x40020488
 8006c70:	400204a0 	.word	0x400204a0
 8006c74:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1c8      	bne.n	8006c18 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4b83      	ldr	r3, [pc, #524]	@ (8006ea0 <HAL_DMA_Init+0x420>)
 8006c92:	4013      	ands	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006c9e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	691b      	ldr	r3, [r3, #16]
 8006ca4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006caa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	699b      	ldr	r3, [r3, #24]
 8006cb0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006cb6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a1b      	ldr	r3, [r3, #32]
 8006cbc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8006cbe:	697a      	ldr	r2, [r7, #20]
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cc8:	2b04      	cmp	r3, #4
 8006cca:	d107      	bne.n	8006cdc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2b28      	cmp	r3, #40	@ 0x28
 8006ce2:	d903      	bls.n	8006cec <HAL_DMA_Init+0x26c>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	2b2e      	cmp	r3, #46	@ 0x2e
 8006cea:	d91f      	bls.n	8006d2c <HAL_DMA_Init+0x2ac>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cf2:	d903      	bls.n	8006cfc <HAL_DMA_Init+0x27c>
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b42      	cmp	r3, #66	@ 0x42
 8006cfa:	d917      	bls.n	8006d2c <HAL_DMA_Init+0x2ac>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	2b46      	cmp	r3, #70	@ 0x46
 8006d02:	d903      	bls.n	8006d0c <HAL_DMA_Init+0x28c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	2b48      	cmp	r3, #72	@ 0x48
 8006d0a:	d90f      	bls.n	8006d2c <HAL_DMA_Init+0x2ac>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d12:	d903      	bls.n	8006d1c <HAL_DMA_Init+0x29c>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b52      	cmp	r3, #82	@ 0x52
 8006d1a:	d907      	bls.n	8006d2c <HAL_DMA_Init+0x2ac>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b73      	cmp	r3, #115	@ 0x73
 8006d22:	d905      	bls.n	8006d30 <HAL_DMA_Init+0x2b0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	2b77      	cmp	r3, #119	@ 0x77
 8006d2a:	d801      	bhi.n	8006d30 <HAL_DMA_Init+0x2b0>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	e000      	b.n	8006d32 <HAL_DMA_Init+0x2b2>
 8006d30:	2300      	movs	r3, #0
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d003      	beq.n	8006d3e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d3c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f023 0307 	bic.w	r3, r3, #7
 8006d54:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d5a:	697a      	ldr	r2, [r7, #20]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d64:	2b04      	cmp	r3, #4
 8006d66:	d117      	bne.n	8006d98 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6c:	697a      	ldr	r2, [r7, #20]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00e      	beq.n	8006d98 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f002 fb2e 	bl	80093dc <DMA_CheckFifoParam>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2240      	movs	r2, #64	@ 0x40
 8006d8a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e192      	b.n	80070be <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f002 fa69 	bl	8009278 <DMA_CalcBaseAndBitshift>
 8006da6:	4603      	mov	r3, r0
 8006da8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dae:	f003 031f 	and.w	r3, r3, #31
 8006db2:	223f      	movs	r2, #63	@ 0x3f
 8006db4:	409a      	lsls	r2, r3
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	609a      	str	r2, [r3, #8]
 8006dba:	e0c8      	b.n	8006f4e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a38      	ldr	r2, [pc, #224]	@ (8006ea4 <HAL_DMA_Init+0x424>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d022      	beq.n	8006e0c <HAL_DMA_Init+0x38c>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a37      	ldr	r2, [pc, #220]	@ (8006ea8 <HAL_DMA_Init+0x428>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d01d      	beq.n	8006e0c <HAL_DMA_Init+0x38c>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a35      	ldr	r2, [pc, #212]	@ (8006eac <HAL_DMA_Init+0x42c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d018      	beq.n	8006e0c <HAL_DMA_Init+0x38c>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a34      	ldr	r2, [pc, #208]	@ (8006eb0 <HAL_DMA_Init+0x430>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d013      	beq.n	8006e0c <HAL_DMA_Init+0x38c>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a32      	ldr	r2, [pc, #200]	@ (8006eb4 <HAL_DMA_Init+0x434>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d00e      	beq.n	8006e0c <HAL_DMA_Init+0x38c>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a31      	ldr	r2, [pc, #196]	@ (8006eb8 <HAL_DMA_Init+0x438>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d009      	beq.n	8006e0c <HAL_DMA_Init+0x38c>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a2f      	ldr	r2, [pc, #188]	@ (8006ebc <HAL_DMA_Init+0x43c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d004      	beq.n	8006e0c <HAL_DMA_Init+0x38c>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2e      	ldr	r2, [pc, #184]	@ (8006ec0 <HAL_DMA_Init+0x440>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d101      	bne.n	8006e10 <HAL_DMA_Init+0x390>
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e000      	b.n	8006e12 <HAL_DMA_Init+0x392>
 8006e10:	2300      	movs	r3, #0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	f000 8092 	beq.w	8006f3c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a21      	ldr	r2, [pc, #132]	@ (8006ea4 <HAL_DMA_Init+0x424>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d021      	beq.n	8006e66 <HAL_DMA_Init+0x3e6>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a20      	ldr	r2, [pc, #128]	@ (8006ea8 <HAL_DMA_Init+0x428>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d01c      	beq.n	8006e66 <HAL_DMA_Init+0x3e6>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1e      	ldr	r2, [pc, #120]	@ (8006eac <HAL_DMA_Init+0x42c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d017      	beq.n	8006e66 <HAL_DMA_Init+0x3e6>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006eb0 <HAL_DMA_Init+0x430>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d012      	beq.n	8006e66 <HAL_DMA_Init+0x3e6>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1b      	ldr	r2, [pc, #108]	@ (8006eb4 <HAL_DMA_Init+0x434>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d00d      	beq.n	8006e66 <HAL_DMA_Init+0x3e6>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006eb8 <HAL_DMA_Init+0x438>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d008      	beq.n	8006e66 <HAL_DMA_Init+0x3e6>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a18      	ldr	r2, [pc, #96]	@ (8006ebc <HAL_DMA_Init+0x43c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d003      	beq.n	8006e66 <HAL_DMA_Init+0x3e6>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a17      	ldr	r2, [pc, #92]	@ (8006ec0 <HAL_DMA_Init+0x440>)
 8006e64:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2202      	movs	r2, #2
 8006e6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4b10      	ldr	r3, [pc, #64]	@ (8006ec4 <HAL_DMA_Init+0x444>)
 8006e82:	4013      	ands	r3, r2
 8006e84:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	2b40      	cmp	r3, #64	@ 0x40
 8006e8c:	d01c      	beq.n	8006ec8 <HAL_DMA_Init+0x448>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	2b80      	cmp	r3, #128	@ 0x80
 8006e94:	d102      	bne.n	8006e9c <HAL_DMA_Init+0x41c>
 8006e96:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006e9a:	e016      	b.n	8006eca <HAL_DMA_Init+0x44a>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e014      	b.n	8006eca <HAL_DMA_Init+0x44a>
 8006ea0:	fe10803f 	.word	0xfe10803f
 8006ea4:	58025408 	.word	0x58025408
 8006ea8:	5802541c 	.word	0x5802541c
 8006eac:	58025430 	.word	0x58025430
 8006eb0:	58025444 	.word	0x58025444
 8006eb4:	58025458 	.word	0x58025458
 8006eb8:	5802546c 	.word	0x5802546c
 8006ebc:	58025480 	.word	0x58025480
 8006ec0:	58025494 	.word	0x58025494
 8006ec4:	fffe000f 	.word	0xfffe000f
 8006ec8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	68d2      	ldr	r2, [r2, #12]
 8006ece:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006ed0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006ed8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006ee0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006ee8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	69db      	ldr	r3, [r3, #28]
 8006eee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006ef0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006ef8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006efa:	697a      	ldr	r2, [r7, #20]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	4b6e      	ldr	r3, [pc, #440]	@ (80070c8 <HAL_DMA_Init+0x648>)
 8006f10:	4413      	add	r3, r2
 8006f12:	4a6e      	ldr	r2, [pc, #440]	@ (80070cc <HAL_DMA_Init+0x64c>)
 8006f14:	fba2 2303 	umull	r2, r3, r2, r3
 8006f18:	091b      	lsrs	r3, r3, #4
 8006f1a:	009a      	lsls	r2, r3, #2
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f002 f9a9 	bl	8009278 <DMA_CalcBaseAndBitshift>
 8006f26:	4603      	mov	r3, r0
 8006f28:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f2e:	f003 031f 	and.w	r3, r3, #31
 8006f32:	2201      	movs	r2, #1
 8006f34:	409a      	lsls	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	605a      	str	r2, [r3, #4]
 8006f3a:	e008      	b.n	8006f4e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2240      	movs	r2, #64	@ 0x40
 8006f40:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2203      	movs	r2, #3
 8006f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e0b7      	b.n	80070be <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a5f      	ldr	r2, [pc, #380]	@ (80070d0 <HAL_DMA_Init+0x650>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d072      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80070d4 <HAL_DMA_Init+0x654>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d06d      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a5c      	ldr	r2, [pc, #368]	@ (80070d8 <HAL_DMA_Init+0x658>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d068      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a5a      	ldr	r2, [pc, #360]	@ (80070dc <HAL_DMA_Init+0x65c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d063      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a59      	ldr	r2, [pc, #356]	@ (80070e0 <HAL_DMA_Init+0x660>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d05e      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a57      	ldr	r2, [pc, #348]	@ (80070e4 <HAL_DMA_Init+0x664>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d059      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a56      	ldr	r2, [pc, #344]	@ (80070e8 <HAL_DMA_Init+0x668>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d054      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a54      	ldr	r2, [pc, #336]	@ (80070ec <HAL_DMA_Init+0x66c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d04f      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a53      	ldr	r2, [pc, #332]	@ (80070f0 <HAL_DMA_Init+0x670>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d04a      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a51      	ldr	r2, [pc, #324]	@ (80070f4 <HAL_DMA_Init+0x674>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d045      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a50      	ldr	r2, [pc, #320]	@ (80070f8 <HAL_DMA_Init+0x678>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d040      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a4e      	ldr	r2, [pc, #312]	@ (80070fc <HAL_DMA_Init+0x67c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d03b      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a4d      	ldr	r2, [pc, #308]	@ (8007100 <HAL_DMA_Init+0x680>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d036      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a4b      	ldr	r2, [pc, #300]	@ (8007104 <HAL_DMA_Init+0x684>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d031      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a4a      	ldr	r2, [pc, #296]	@ (8007108 <HAL_DMA_Init+0x688>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d02c      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a48      	ldr	r2, [pc, #288]	@ (800710c <HAL_DMA_Init+0x68c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d027      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a47      	ldr	r2, [pc, #284]	@ (8007110 <HAL_DMA_Init+0x690>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d022      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a45      	ldr	r2, [pc, #276]	@ (8007114 <HAL_DMA_Init+0x694>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d01d      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	4a44      	ldr	r2, [pc, #272]	@ (8007118 <HAL_DMA_Init+0x698>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d018      	beq.n	800703e <HAL_DMA_Init+0x5be>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a42      	ldr	r2, [pc, #264]	@ (800711c <HAL_DMA_Init+0x69c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d013      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a41      	ldr	r2, [pc, #260]	@ (8007120 <HAL_DMA_Init+0x6a0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d00e      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a3f      	ldr	r2, [pc, #252]	@ (8007124 <HAL_DMA_Init+0x6a4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d009      	beq.n	800703e <HAL_DMA_Init+0x5be>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a3e      	ldr	r2, [pc, #248]	@ (8007128 <HAL_DMA_Init+0x6a8>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d004      	beq.n	800703e <HAL_DMA_Init+0x5be>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a3c      	ldr	r2, [pc, #240]	@ (800712c <HAL_DMA_Init+0x6ac>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d101      	bne.n	8007042 <HAL_DMA_Init+0x5c2>
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <HAL_DMA_Init+0x5c4>
 8007042:	2300      	movs	r3, #0
 8007044:	2b00      	cmp	r3, #0
 8007046:	d032      	beq.n	80070ae <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f002 fa43 	bl	80094d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	2b80      	cmp	r3, #128	@ 0x80
 8007054:	d102      	bne.n	800705c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685a      	ldr	r2, [r3, #4]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800706c:	687a      	ldr	r2, [r7, #4]
 800706e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007070:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d010      	beq.n	800709c <HAL_DMA_Init+0x61c>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b08      	cmp	r3, #8
 8007080:	d80c      	bhi.n	800709c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f002 fac0 	bl	8009608 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800708c:	2200      	movs	r2, #0
 800708e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	e008      	b.n	80070ae <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2200      	movs	r2, #0
 80070a6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2201      	movs	r2, #1
 80070b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80070bc:	2300      	movs	r3, #0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3718      	adds	r7, #24
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	a7fdabf8 	.word	0xa7fdabf8
 80070cc:	cccccccd 	.word	0xcccccccd
 80070d0:	40020010 	.word	0x40020010
 80070d4:	40020028 	.word	0x40020028
 80070d8:	40020040 	.word	0x40020040
 80070dc:	40020058 	.word	0x40020058
 80070e0:	40020070 	.word	0x40020070
 80070e4:	40020088 	.word	0x40020088
 80070e8:	400200a0 	.word	0x400200a0
 80070ec:	400200b8 	.word	0x400200b8
 80070f0:	40020410 	.word	0x40020410
 80070f4:	40020428 	.word	0x40020428
 80070f8:	40020440 	.word	0x40020440
 80070fc:	40020458 	.word	0x40020458
 8007100:	40020470 	.word	0x40020470
 8007104:	40020488 	.word	0x40020488
 8007108:	400204a0 	.word	0x400204a0
 800710c:	400204b8 	.word	0x400204b8
 8007110:	58025408 	.word	0x58025408
 8007114:	5802541c 	.word	0x5802541c
 8007118:	58025430 	.word	0x58025430
 800711c:	58025444 	.word	0x58025444
 8007120:	58025458 	.word	0x58025458
 8007124:	5802546c 	.word	0x5802546c
 8007128:	58025480 	.word	0x58025480
 800712c:	58025494 	.word	0x58025494

08007130 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	60b9      	str	r1, [r7, #8]
 800713a:	607a      	str	r2, [r7, #4]
 800713c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e226      	b.n	800759a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007152:	2b01      	cmp	r3, #1
 8007154:	d101      	bne.n	800715a <HAL_DMA_Start_IT+0x2a>
 8007156:	2302      	movs	r3, #2
 8007158:	e21f      	b.n	800759a <HAL_DMA_Start_IT+0x46a>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2201      	movs	r2, #1
 800715e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007168:	b2db      	uxtb	r3, r3
 800716a:	2b01      	cmp	r3, #1
 800716c:	f040 820a 	bne.w	8007584 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a68      	ldr	r2, [pc, #416]	@ (8007324 <HAL_DMA_Start_IT+0x1f4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d04a      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a66      	ldr	r2, [pc, #408]	@ (8007328 <HAL_DMA_Start_IT+0x1f8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d045      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a65      	ldr	r2, [pc, #404]	@ (800732c <HAL_DMA_Start_IT+0x1fc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d040      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a63      	ldr	r2, [pc, #396]	@ (8007330 <HAL_DMA_Start_IT+0x200>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d03b      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a62      	ldr	r2, [pc, #392]	@ (8007334 <HAL_DMA_Start_IT+0x204>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d036      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a60      	ldr	r2, [pc, #384]	@ (8007338 <HAL_DMA_Start_IT+0x208>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d031      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a5f      	ldr	r2, [pc, #380]	@ (800733c <HAL_DMA_Start_IT+0x20c>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d02c      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a5d      	ldr	r2, [pc, #372]	@ (8007340 <HAL_DMA_Start_IT+0x210>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d027      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a5c      	ldr	r2, [pc, #368]	@ (8007344 <HAL_DMA_Start_IT+0x214>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d022      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a5a      	ldr	r2, [pc, #360]	@ (8007348 <HAL_DMA_Start_IT+0x218>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01d      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a59      	ldr	r2, [pc, #356]	@ (800734c <HAL_DMA_Start_IT+0x21c>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d018      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a57      	ldr	r2, [pc, #348]	@ (8007350 <HAL_DMA_Start_IT+0x220>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d013      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a56      	ldr	r2, [pc, #344]	@ (8007354 <HAL_DMA_Start_IT+0x224>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00e      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a54      	ldr	r2, [pc, #336]	@ (8007358 <HAL_DMA_Start_IT+0x228>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a53      	ldr	r2, [pc, #332]	@ (800735c <HAL_DMA_Start_IT+0x22c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <HAL_DMA_Start_IT+0xee>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a51      	ldr	r2, [pc, #324]	@ (8007360 <HAL_DMA_Start_IT+0x230>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d108      	bne.n	8007230 <HAL_DMA_Start_IT+0x100>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f022 0201 	bic.w	r2, r2, #1
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	e007      	b.n	8007240 <HAL_DMA_Start_IT+0x110>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f022 0201 	bic.w	r2, r2, #1
 800723e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	68f8      	ldr	r0, [r7, #12]
 8007248:	f001 fe6a 	bl	8008f20 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a34      	ldr	r2, [pc, #208]	@ (8007324 <HAL_DMA_Start_IT+0x1f4>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d04a      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a33      	ldr	r2, [pc, #204]	@ (8007328 <HAL_DMA_Start_IT+0x1f8>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d045      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a31      	ldr	r2, [pc, #196]	@ (800732c <HAL_DMA_Start_IT+0x1fc>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d040      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a30      	ldr	r2, [pc, #192]	@ (8007330 <HAL_DMA_Start_IT+0x200>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d03b      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a2e      	ldr	r2, [pc, #184]	@ (8007334 <HAL_DMA_Start_IT+0x204>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d036      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a2d      	ldr	r2, [pc, #180]	@ (8007338 <HAL_DMA_Start_IT+0x208>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d031      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a2b      	ldr	r2, [pc, #172]	@ (800733c <HAL_DMA_Start_IT+0x20c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d02c      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2a      	ldr	r2, [pc, #168]	@ (8007340 <HAL_DMA_Start_IT+0x210>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d027      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a28      	ldr	r2, [pc, #160]	@ (8007344 <HAL_DMA_Start_IT+0x214>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d022      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a27      	ldr	r2, [pc, #156]	@ (8007348 <HAL_DMA_Start_IT+0x218>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d01d      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a25      	ldr	r2, [pc, #148]	@ (800734c <HAL_DMA_Start_IT+0x21c>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d018      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a24      	ldr	r2, [pc, #144]	@ (8007350 <HAL_DMA_Start_IT+0x220>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d013      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a22      	ldr	r2, [pc, #136]	@ (8007354 <HAL_DMA_Start_IT+0x224>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00e      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a21      	ldr	r2, [pc, #132]	@ (8007358 <HAL_DMA_Start_IT+0x228>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d009      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a1f      	ldr	r2, [pc, #124]	@ (800735c <HAL_DMA_Start_IT+0x22c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d004      	beq.n	80072ec <HAL_DMA_Start_IT+0x1bc>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007360 <HAL_DMA_Start_IT+0x230>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d101      	bne.n	80072f0 <HAL_DMA_Start_IT+0x1c0>
 80072ec:	2301      	movs	r3, #1
 80072ee:	e000      	b.n	80072f2 <HAL_DMA_Start_IT+0x1c2>
 80072f0:	2300      	movs	r3, #0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d036      	beq.n	8007364 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f023 021e 	bic.w	r2, r3, #30
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 0216 	orr.w	r2, r2, #22
 8007308:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800730e:	2b00      	cmp	r3, #0
 8007310:	d03e      	beq.n	8007390 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f042 0208 	orr.w	r2, r2, #8
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e035      	b.n	8007390 <HAL_DMA_Start_IT+0x260>
 8007324:	40020010 	.word	0x40020010
 8007328:	40020028 	.word	0x40020028
 800732c:	40020040 	.word	0x40020040
 8007330:	40020058 	.word	0x40020058
 8007334:	40020070 	.word	0x40020070
 8007338:	40020088 	.word	0x40020088
 800733c:	400200a0 	.word	0x400200a0
 8007340:	400200b8 	.word	0x400200b8
 8007344:	40020410 	.word	0x40020410
 8007348:	40020428 	.word	0x40020428
 800734c:	40020440 	.word	0x40020440
 8007350:	40020458 	.word	0x40020458
 8007354:	40020470 	.word	0x40020470
 8007358:	40020488 	.word	0x40020488
 800735c:	400204a0 	.word	0x400204a0
 8007360:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f023 020e 	bic.w	r2, r3, #14
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 020a 	orr.w	r2, r2, #10
 8007376:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800737c:	2b00      	cmp	r3, #0
 800737e:	d007      	beq.n	8007390 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681a      	ldr	r2, [r3, #0]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f042 0204 	orr.w	r2, r2, #4
 800738e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a83      	ldr	r2, [pc, #524]	@ (80075a4 <HAL_DMA_Start_IT+0x474>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d072      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a82      	ldr	r2, [pc, #520]	@ (80075a8 <HAL_DMA_Start_IT+0x478>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d06d      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a80      	ldr	r2, [pc, #512]	@ (80075ac <HAL_DMA_Start_IT+0x47c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d068      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a7f      	ldr	r2, [pc, #508]	@ (80075b0 <HAL_DMA_Start_IT+0x480>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d063      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a7d      	ldr	r2, [pc, #500]	@ (80075b4 <HAL_DMA_Start_IT+0x484>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d05e      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a7c      	ldr	r2, [pc, #496]	@ (80075b8 <HAL_DMA_Start_IT+0x488>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d059      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a7a      	ldr	r2, [pc, #488]	@ (80075bc <HAL_DMA_Start_IT+0x48c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d054      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a79      	ldr	r2, [pc, #484]	@ (80075c0 <HAL_DMA_Start_IT+0x490>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d04f      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a77      	ldr	r2, [pc, #476]	@ (80075c4 <HAL_DMA_Start_IT+0x494>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d04a      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a76      	ldr	r2, [pc, #472]	@ (80075c8 <HAL_DMA_Start_IT+0x498>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d045      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a74      	ldr	r2, [pc, #464]	@ (80075cc <HAL_DMA_Start_IT+0x49c>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d040      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a73      	ldr	r2, [pc, #460]	@ (80075d0 <HAL_DMA_Start_IT+0x4a0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d03b      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a71      	ldr	r2, [pc, #452]	@ (80075d4 <HAL_DMA_Start_IT+0x4a4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d036      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a70      	ldr	r2, [pc, #448]	@ (80075d8 <HAL_DMA_Start_IT+0x4a8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d031      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a6e      	ldr	r2, [pc, #440]	@ (80075dc <HAL_DMA_Start_IT+0x4ac>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d02c      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a6d      	ldr	r2, [pc, #436]	@ (80075e0 <HAL_DMA_Start_IT+0x4b0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d027      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a6b      	ldr	r2, [pc, #428]	@ (80075e4 <HAL_DMA_Start_IT+0x4b4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d022      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a6a      	ldr	r2, [pc, #424]	@ (80075e8 <HAL_DMA_Start_IT+0x4b8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d01d      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a68      	ldr	r2, [pc, #416]	@ (80075ec <HAL_DMA_Start_IT+0x4bc>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d018      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a67      	ldr	r2, [pc, #412]	@ (80075f0 <HAL_DMA_Start_IT+0x4c0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d013      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a65      	ldr	r2, [pc, #404]	@ (80075f4 <HAL_DMA_Start_IT+0x4c4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d00e      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a64      	ldr	r2, [pc, #400]	@ (80075f8 <HAL_DMA_Start_IT+0x4c8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d009      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a62      	ldr	r2, [pc, #392]	@ (80075fc <HAL_DMA_Start_IT+0x4cc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d004      	beq.n	8007480 <HAL_DMA_Start_IT+0x350>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a61      	ldr	r2, [pc, #388]	@ (8007600 <HAL_DMA_Start_IT+0x4d0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d101      	bne.n	8007484 <HAL_DMA_Start_IT+0x354>
 8007480:	2301      	movs	r3, #1
 8007482:	e000      	b.n	8007486 <HAL_DMA_Start_IT+0x356>
 8007484:	2300      	movs	r3, #0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d01a      	beq.n	80074c0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d007      	beq.n	80074a8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074a6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d007      	beq.n	80074c0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074be:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a37      	ldr	r2, [pc, #220]	@ (80075a4 <HAL_DMA_Start_IT+0x474>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d04a      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a36      	ldr	r2, [pc, #216]	@ (80075a8 <HAL_DMA_Start_IT+0x478>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d045      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a34      	ldr	r2, [pc, #208]	@ (80075ac <HAL_DMA_Start_IT+0x47c>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d040      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a33      	ldr	r2, [pc, #204]	@ (80075b0 <HAL_DMA_Start_IT+0x480>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d03b      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a31      	ldr	r2, [pc, #196]	@ (80075b4 <HAL_DMA_Start_IT+0x484>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d036      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a30      	ldr	r2, [pc, #192]	@ (80075b8 <HAL_DMA_Start_IT+0x488>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d031      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a2e      	ldr	r2, [pc, #184]	@ (80075bc <HAL_DMA_Start_IT+0x48c>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d02c      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a2d      	ldr	r2, [pc, #180]	@ (80075c0 <HAL_DMA_Start_IT+0x490>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d027      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a2b      	ldr	r2, [pc, #172]	@ (80075c4 <HAL_DMA_Start_IT+0x494>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d022      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a2a      	ldr	r2, [pc, #168]	@ (80075c8 <HAL_DMA_Start_IT+0x498>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d01d      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a28      	ldr	r2, [pc, #160]	@ (80075cc <HAL_DMA_Start_IT+0x49c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d018      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a27      	ldr	r2, [pc, #156]	@ (80075d0 <HAL_DMA_Start_IT+0x4a0>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d013      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a25      	ldr	r2, [pc, #148]	@ (80075d4 <HAL_DMA_Start_IT+0x4a4>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00e      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a24      	ldr	r2, [pc, #144]	@ (80075d8 <HAL_DMA_Start_IT+0x4a8>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d009      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a22      	ldr	r2, [pc, #136]	@ (80075dc <HAL_DMA_Start_IT+0x4ac>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d004      	beq.n	8007560 <HAL_DMA_Start_IT+0x430>
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a21      	ldr	r2, [pc, #132]	@ (80075e0 <HAL_DMA_Start_IT+0x4b0>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d108      	bne.n	8007572 <HAL_DMA_Start_IT+0x442>
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f042 0201 	orr.w	r2, r2, #1
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	e012      	b.n	8007598 <HAL_DMA_Start_IT+0x468>
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f042 0201 	orr.w	r2, r2, #1
 8007580:	601a      	str	r2, [r3, #0]
 8007582:	e009      	b.n	8007598 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800758a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2200      	movs	r2, #0
 8007590:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007598:	7dfb      	ldrb	r3, [r7, #23]
}
 800759a:	4618      	mov	r0, r3
 800759c:	3718      	adds	r7, #24
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	40020010 	.word	0x40020010
 80075a8:	40020028 	.word	0x40020028
 80075ac:	40020040 	.word	0x40020040
 80075b0:	40020058 	.word	0x40020058
 80075b4:	40020070 	.word	0x40020070
 80075b8:	40020088 	.word	0x40020088
 80075bc:	400200a0 	.word	0x400200a0
 80075c0:	400200b8 	.word	0x400200b8
 80075c4:	40020410 	.word	0x40020410
 80075c8:	40020428 	.word	0x40020428
 80075cc:	40020440 	.word	0x40020440
 80075d0:	40020458 	.word	0x40020458
 80075d4:	40020470 	.word	0x40020470
 80075d8:	40020488 	.word	0x40020488
 80075dc:	400204a0 	.word	0x400204a0
 80075e0:	400204b8 	.word	0x400204b8
 80075e4:	58025408 	.word	0x58025408
 80075e8:	5802541c 	.word	0x5802541c
 80075ec:	58025430 	.word	0x58025430
 80075f0:	58025444 	.word	0x58025444
 80075f4:	58025458 	.word	0x58025458
 80075f8:	5802546c 	.word	0x5802546c
 80075fc:	58025480 	.word	0x58025480
 8007600:	58025494 	.word	0x58025494

08007604 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800760c:	f7fd f9c8 	bl	80049a0 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007618:	2301      	movs	r3, #1
 800761a:	e2dc      	b.n	8007bd6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007622:	b2db      	uxtb	r3, r3
 8007624:	2b02      	cmp	r3, #2
 8007626:	d008      	beq.n	800763a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2280      	movs	r2, #128	@ 0x80
 800762c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e2cd      	b.n	8007bd6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a76      	ldr	r2, [pc, #472]	@ (8007818 <HAL_DMA_Abort+0x214>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d04a      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a74      	ldr	r2, [pc, #464]	@ (800781c <HAL_DMA_Abort+0x218>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d045      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a73      	ldr	r2, [pc, #460]	@ (8007820 <HAL_DMA_Abort+0x21c>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d040      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a71      	ldr	r2, [pc, #452]	@ (8007824 <HAL_DMA_Abort+0x220>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d03b      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a70      	ldr	r2, [pc, #448]	@ (8007828 <HAL_DMA_Abort+0x224>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d036      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a6e      	ldr	r2, [pc, #440]	@ (800782c <HAL_DMA_Abort+0x228>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d031      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a6d      	ldr	r2, [pc, #436]	@ (8007830 <HAL_DMA_Abort+0x22c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d02c      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a6b      	ldr	r2, [pc, #428]	@ (8007834 <HAL_DMA_Abort+0x230>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d027      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a6a      	ldr	r2, [pc, #424]	@ (8007838 <HAL_DMA_Abort+0x234>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d022      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a68      	ldr	r2, [pc, #416]	@ (800783c <HAL_DMA_Abort+0x238>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d01d      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a67      	ldr	r2, [pc, #412]	@ (8007840 <HAL_DMA_Abort+0x23c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d018      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a65      	ldr	r2, [pc, #404]	@ (8007844 <HAL_DMA_Abort+0x240>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a64      	ldr	r2, [pc, #400]	@ (8007848 <HAL_DMA_Abort+0x244>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00e      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a62      	ldr	r2, [pc, #392]	@ (800784c <HAL_DMA_Abort+0x248>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d009      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a61      	ldr	r2, [pc, #388]	@ (8007850 <HAL_DMA_Abort+0x24c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d004      	beq.n	80076da <HAL_DMA_Abort+0xd6>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a5f      	ldr	r2, [pc, #380]	@ (8007854 <HAL_DMA_Abort+0x250>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d101      	bne.n	80076de <HAL_DMA_Abort+0xda>
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <HAL_DMA_Abort+0xdc>
 80076de:	2300      	movs	r3, #0
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d013      	beq.n	800770c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f022 021e 	bic.w	r2, r2, #30
 80076f2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695a      	ldr	r2, [r3, #20]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007702:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	617b      	str	r3, [r7, #20]
 800770a:	e00a      	b.n	8007722 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f022 020e 	bic.w	r2, r2, #14
 800771a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a3c      	ldr	r2, [pc, #240]	@ (8007818 <HAL_DMA_Abort+0x214>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d072      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a3a      	ldr	r2, [pc, #232]	@ (800781c <HAL_DMA_Abort+0x218>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d06d      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a39      	ldr	r2, [pc, #228]	@ (8007820 <HAL_DMA_Abort+0x21c>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d068      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a37      	ldr	r2, [pc, #220]	@ (8007824 <HAL_DMA_Abort+0x220>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d063      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a36      	ldr	r2, [pc, #216]	@ (8007828 <HAL_DMA_Abort+0x224>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d05e      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a34      	ldr	r2, [pc, #208]	@ (800782c <HAL_DMA_Abort+0x228>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d059      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a33      	ldr	r2, [pc, #204]	@ (8007830 <HAL_DMA_Abort+0x22c>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d054      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a31      	ldr	r2, [pc, #196]	@ (8007834 <HAL_DMA_Abort+0x230>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d04f      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a30      	ldr	r2, [pc, #192]	@ (8007838 <HAL_DMA_Abort+0x234>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d04a      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a2e      	ldr	r2, [pc, #184]	@ (800783c <HAL_DMA_Abort+0x238>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d045      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a2d      	ldr	r2, [pc, #180]	@ (8007840 <HAL_DMA_Abort+0x23c>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d040      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a2b      	ldr	r2, [pc, #172]	@ (8007844 <HAL_DMA_Abort+0x240>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d03b      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a2a      	ldr	r2, [pc, #168]	@ (8007848 <HAL_DMA_Abort+0x244>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d036      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a28      	ldr	r2, [pc, #160]	@ (800784c <HAL_DMA_Abort+0x248>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d031      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a27      	ldr	r2, [pc, #156]	@ (8007850 <HAL_DMA_Abort+0x24c>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d02c      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a25      	ldr	r2, [pc, #148]	@ (8007854 <HAL_DMA_Abort+0x250>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d027      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a24      	ldr	r2, [pc, #144]	@ (8007858 <HAL_DMA_Abort+0x254>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d022      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a22      	ldr	r2, [pc, #136]	@ (800785c <HAL_DMA_Abort+0x258>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d01d      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a21      	ldr	r2, [pc, #132]	@ (8007860 <HAL_DMA_Abort+0x25c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d018      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a1f      	ldr	r2, [pc, #124]	@ (8007864 <HAL_DMA_Abort+0x260>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d013      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007868 <HAL_DMA_Abort+0x264>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00e      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a1c      	ldr	r2, [pc, #112]	@ (800786c <HAL_DMA_Abort+0x268>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d009      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a1b      	ldr	r2, [pc, #108]	@ (8007870 <HAL_DMA_Abort+0x26c>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d004      	beq.n	8007812 <HAL_DMA_Abort+0x20e>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a19      	ldr	r2, [pc, #100]	@ (8007874 <HAL_DMA_Abort+0x270>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d132      	bne.n	8007878 <HAL_DMA_Abort+0x274>
 8007812:	2301      	movs	r3, #1
 8007814:	e031      	b.n	800787a <HAL_DMA_Abort+0x276>
 8007816:	bf00      	nop
 8007818:	40020010 	.word	0x40020010
 800781c:	40020028 	.word	0x40020028
 8007820:	40020040 	.word	0x40020040
 8007824:	40020058 	.word	0x40020058
 8007828:	40020070 	.word	0x40020070
 800782c:	40020088 	.word	0x40020088
 8007830:	400200a0 	.word	0x400200a0
 8007834:	400200b8 	.word	0x400200b8
 8007838:	40020410 	.word	0x40020410
 800783c:	40020428 	.word	0x40020428
 8007840:	40020440 	.word	0x40020440
 8007844:	40020458 	.word	0x40020458
 8007848:	40020470 	.word	0x40020470
 800784c:	40020488 	.word	0x40020488
 8007850:	400204a0 	.word	0x400204a0
 8007854:	400204b8 	.word	0x400204b8
 8007858:	58025408 	.word	0x58025408
 800785c:	5802541c 	.word	0x5802541c
 8007860:	58025430 	.word	0x58025430
 8007864:	58025444 	.word	0x58025444
 8007868:	58025458 	.word	0x58025458
 800786c:	5802546c 	.word	0x5802546c
 8007870:	58025480 	.word	0x58025480
 8007874:	58025494 	.word	0x58025494
 8007878:	2300      	movs	r3, #0
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007888:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800788c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a6d      	ldr	r2, [pc, #436]	@ (8007a48 <HAL_DMA_Abort+0x444>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d04a      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a6b      	ldr	r2, [pc, #428]	@ (8007a4c <HAL_DMA_Abort+0x448>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d045      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a6a      	ldr	r2, [pc, #424]	@ (8007a50 <HAL_DMA_Abort+0x44c>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d040      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a68      	ldr	r2, [pc, #416]	@ (8007a54 <HAL_DMA_Abort+0x450>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d03b      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a67      	ldr	r2, [pc, #412]	@ (8007a58 <HAL_DMA_Abort+0x454>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d036      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a65      	ldr	r2, [pc, #404]	@ (8007a5c <HAL_DMA_Abort+0x458>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d031      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a64      	ldr	r2, [pc, #400]	@ (8007a60 <HAL_DMA_Abort+0x45c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d02c      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4a62      	ldr	r2, [pc, #392]	@ (8007a64 <HAL_DMA_Abort+0x460>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d027      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a61      	ldr	r2, [pc, #388]	@ (8007a68 <HAL_DMA_Abort+0x464>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d022      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a5f      	ldr	r2, [pc, #380]	@ (8007a6c <HAL_DMA_Abort+0x468>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d01d      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a5e      	ldr	r2, [pc, #376]	@ (8007a70 <HAL_DMA_Abort+0x46c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d018      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a5c      	ldr	r2, [pc, #368]	@ (8007a74 <HAL_DMA_Abort+0x470>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d013      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a5b      	ldr	r2, [pc, #364]	@ (8007a78 <HAL_DMA_Abort+0x474>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d00e      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a59      	ldr	r2, [pc, #356]	@ (8007a7c <HAL_DMA_Abort+0x478>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d009      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a58      	ldr	r2, [pc, #352]	@ (8007a80 <HAL_DMA_Abort+0x47c>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d004      	beq.n	800792e <HAL_DMA_Abort+0x32a>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a56      	ldr	r2, [pc, #344]	@ (8007a84 <HAL_DMA_Abort+0x480>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d108      	bne.n	8007940 <HAL_DMA_Abort+0x33c>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f022 0201 	bic.w	r2, r2, #1
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e007      	b.n	8007950 <HAL_DMA_Abort+0x34c>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0201 	bic.w	r2, r2, #1
 800794e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007950:	e013      	b.n	800797a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007952:	f7fd f825 	bl	80049a0 <HAL_GetTick>
 8007956:	4602      	mov	r2, r0
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	1ad3      	subs	r3, r2, r3
 800795c:	2b05      	cmp	r3, #5
 800795e:	d90c      	bls.n	800797a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2203      	movs	r2, #3
 800796a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e12d      	b.n	8007bd6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1e5      	bne.n	8007952 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a2f      	ldr	r2, [pc, #188]	@ (8007a48 <HAL_DMA_Abort+0x444>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d04a      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a2d      	ldr	r2, [pc, #180]	@ (8007a4c <HAL_DMA_Abort+0x448>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d045      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a2c      	ldr	r2, [pc, #176]	@ (8007a50 <HAL_DMA_Abort+0x44c>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d040      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a2a      	ldr	r2, [pc, #168]	@ (8007a54 <HAL_DMA_Abort+0x450>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d03b      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a29      	ldr	r2, [pc, #164]	@ (8007a58 <HAL_DMA_Abort+0x454>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d036      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a27      	ldr	r2, [pc, #156]	@ (8007a5c <HAL_DMA_Abort+0x458>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d031      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a26      	ldr	r2, [pc, #152]	@ (8007a60 <HAL_DMA_Abort+0x45c>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d02c      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a24      	ldr	r2, [pc, #144]	@ (8007a64 <HAL_DMA_Abort+0x460>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d027      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a23      	ldr	r2, [pc, #140]	@ (8007a68 <HAL_DMA_Abort+0x464>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d022      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a21      	ldr	r2, [pc, #132]	@ (8007a6c <HAL_DMA_Abort+0x468>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d01d      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a20      	ldr	r2, [pc, #128]	@ (8007a70 <HAL_DMA_Abort+0x46c>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d018      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a1e      	ldr	r2, [pc, #120]	@ (8007a74 <HAL_DMA_Abort+0x470>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d013      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a1d      	ldr	r2, [pc, #116]	@ (8007a78 <HAL_DMA_Abort+0x474>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d00e      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a1b      	ldr	r2, [pc, #108]	@ (8007a7c <HAL_DMA_Abort+0x478>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d009      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a1a      	ldr	r2, [pc, #104]	@ (8007a80 <HAL_DMA_Abort+0x47c>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d004      	beq.n	8007a26 <HAL_DMA_Abort+0x422>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a18      	ldr	r2, [pc, #96]	@ (8007a84 <HAL_DMA_Abort+0x480>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d101      	bne.n	8007a2a <HAL_DMA_Abort+0x426>
 8007a26:	2301      	movs	r3, #1
 8007a28:	e000      	b.n	8007a2c <HAL_DMA_Abort+0x428>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d02b      	beq.n	8007a88 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a34:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a3a:	f003 031f 	and.w	r3, r3, #31
 8007a3e:	223f      	movs	r2, #63	@ 0x3f
 8007a40:	409a      	lsls	r2, r3
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	609a      	str	r2, [r3, #8]
 8007a46:	e02a      	b.n	8007a9e <HAL_DMA_Abort+0x49a>
 8007a48:	40020010 	.word	0x40020010
 8007a4c:	40020028 	.word	0x40020028
 8007a50:	40020040 	.word	0x40020040
 8007a54:	40020058 	.word	0x40020058
 8007a58:	40020070 	.word	0x40020070
 8007a5c:	40020088 	.word	0x40020088
 8007a60:	400200a0 	.word	0x400200a0
 8007a64:	400200b8 	.word	0x400200b8
 8007a68:	40020410 	.word	0x40020410
 8007a6c:	40020428 	.word	0x40020428
 8007a70:	40020440 	.word	0x40020440
 8007a74:	40020458 	.word	0x40020458
 8007a78:	40020470 	.word	0x40020470
 8007a7c:	40020488 	.word	0x40020488
 8007a80:	400204a0 	.word	0x400204a0
 8007a84:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a8c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a92:	f003 031f 	and.w	r3, r3, #31
 8007a96:	2201      	movs	r2, #1
 8007a98:	409a      	lsls	r2, r3
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a4f      	ldr	r2, [pc, #316]	@ (8007be0 <HAL_DMA_Abort+0x5dc>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d072      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a4d      	ldr	r2, [pc, #308]	@ (8007be4 <HAL_DMA_Abort+0x5e0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d06d      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8007be8 <HAL_DMA_Abort+0x5e4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d068      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8007bec <HAL_DMA_Abort+0x5e8>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d063      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a49      	ldr	r2, [pc, #292]	@ (8007bf0 <HAL_DMA_Abort+0x5ec>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d05e      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a47      	ldr	r2, [pc, #284]	@ (8007bf4 <HAL_DMA_Abort+0x5f0>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d059      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a46      	ldr	r2, [pc, #280]	@ (8007bf8 <HAL_DMA_Abort+0x5f4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d054      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a44      	ldr	r2, [pc, #272]	@ (8007bfc <HAL_DMA_Abort+0x5f8>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d04f      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a43      	ldr	r2, [pc, #268]	@ (8007c00 <HAL_DMA_Abort+0x5fc>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d04a      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a41      	ldr	r2, [pc, #260]	@ (8007c04 <HAL_DMA_Abort+0x600>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d045      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a40      	ldr	r2, [pc, #256]	@ (8007c08 <HAL_DMA_Abort+0x604>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d040      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a3e      	ldr	r2, [pc, #248]	@ (8007c0c <HAL_DMA_Abort+0x608>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d03b      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8007c10 <HAL_DMA_Abort+0x60c>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d036      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a3b      	ldr	r2, [pc, #236]	@ (8007c14 <HAL_DMA_Abort+0x610>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d031      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a3a      	ldr	r2, [pc, #232]	@ (8007c18 <HAL_DMA_Abort+0x614>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d02c      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a38      	ldr	r2, [pc, #224]	@ (8007c1c <HAL_DMA_Abort+0x618>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d027      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a37      	ldr	r2, [pc, #220]	@ (8007c20 <HAL_DMA_Abort+0x61c>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d022      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a35      	ldr	r2, [pc, #212]	@ (8007c24 <HAL_DMA_Abort+0x620>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d01d      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a34      	ldr	r2, [pc, #208]	@ (8007c28 <HAL_DMA_Abort+0x624>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d018      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a32      	ldr	r2, [pc, #200]	@ (8007c2c <HAL_DMA_Abort+0x628>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d013      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a31      	ldr	r2, [pc, #196]	@ (8007c30 <HAL_DMA_Abort+0x62c>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00e      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a2f      	ldr	r2, [pc, #188]	@ (8007c34 <HAL_DMA_Abort+0x630>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d009      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a2e      	ldr	r2, [pc, #184]	@ (8007c38 <HAL_DMA_Abort+0x634>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d004      	beq.n	8007b8e <HAL_DMA_Abort+0x58a>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a2c      	ldr	r2, [pc, #176]	@ (8007c3c <HAL_DMA_Abort+0x638>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d101      	bne.n	8007b92 <HAL_DMA_Abort+0x58e>
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e000      	b.n	8007b94 <HAL_DMA_Abort+0x590>
 8007b92:	2300      	movs	r3, #0
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d015      	beq.n	8007bc4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b9c:	687a      	ldr	r2, [r7, #4]
 8007b9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8007ba0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00c      	beq.n	8007bc4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007bb8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8007bc2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40020010 	.word	0x40020010
 8007be4:	40020028 	.word	0x40020028
 8007be8:	40020040 	.word	0x40020040
 8007bec:	40020058 	.word	0x40020058
 8007bf0:	40020070 	.word	0x40020070
 8007bf4:	40020088 	.word	0x40020088
 8007bf8:	400200a0 	.word	0x400200a0
 8007bfc:	400200b8 	.word	0x400200b8
 8007c00:	40020410 	.word	0x40020410
 8007c04:	40020428 	.word	0x40020428
 8007c08:	40020440 	.word	0x40020440
 8007c0c:	40020458 	.word	0x40020458
 8007c10:	40020470 	.word	0x40020470
 8007c14:	40020488 	.word	0x40020488
 8007c18:	400204a0 	.word	0x400204a0
 8007c1c:	400204b8 	.word	0x400204b8
 8007c20:	58025408 	.word	0x58025408
 8007c24:	5802541c 	.word	0x5802541c
 8007c28:	58025430 	.word	0x58025430
 8007c2c:	58025444 	.word	0x58025444
 8007c30:	58025458 	.word	0x58025458
 8007c34:	5802546c 	.word	0x5802546c
 8007c38:	58025480 	.word	0x58025480
 8007c3c:	58025494 	.word	0x58025494

08007c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d101      	bne.n	8007c52 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	e237      	b.n	80080c2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007c58:	b2db      	uxtb	r3, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d004      	beq.n	8007c68 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2280      	movs	r2, #128	@ 0x80
 8007c62:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e22c      	b.n	80080c2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a5c      	ldr	r2, [pc, #368]	@ (8007de0 <HAL_DMA_Abort_IT+0x1a0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d04a      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a5b      	ldr	r2, [pc, #364]	@ (8007de4 <HAL_DMA_Abort_IT+0x1a4>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d045      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a59      	ldr	r2, [pc, #356]	@ (8007de8 <HAL_DMA_Abort_IT+0x1a8>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d040      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a58      	ldr	r2, [pc, #352]	@ (8007dec <HAL_DMA_Abort_IT+0x1ac>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d03b      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a56      	ldr	r2, [pc, #344]	@ (8007df0 <HAL_DMA_Abort_IT+0x1b0>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d036      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a55      	ldr	r2, [pc, #340]	@ (8007df4 <HAL_DMA_Abort_IT+0x1b4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d031      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a53      	ldr	r2, [pc, #332]	@ (8007df8 <HAL_DMA_Abort_IT+0x1b8>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d02c      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a52      	ldr	r2, [pc, #328]	@ (8007dfc <HAL_DMA_Abort_IT+0x1bc>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d027      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a50      	ldr	r2, [pc, #320]	@ (8007e00 <HAL_DMA_Abort_IT+0x1c0>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d022      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a4f      	ldr	r2, [pc, #316]	@ (8007e04 <HAL_DMA_Abort_IT+0x1c4>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d01d      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a4d      	ldr	r2, [pc, #308]	@ (8007e08 <HAL_DMA_Abort_IT+0x1c8>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d018      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a4c      	ldr	r2, [pc, #304]	@ (8007e0c <HAL_DMA_Abort_IT+0x1cc>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d013      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8007e10 <HAL_DMA_Abort_IT+0x1d0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d00e      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4a49      	ldr	r2, [pc, #292]	@ (8007e14 <HAL_DMA_Abort_IT+0x1d4>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d009      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4a47      	ldr	r2, [pc, #284]	@ (8007e18 <HAL_DMA_Abort_IT+0x1d8>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d004      	beq.n	8007d08 <HAL_DMA_Abort_IT+0xc8>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a46      	ldr	r2, [pc, #280]	@ (8007e1c <HAL_DMA_Abort_IT+0x1dc>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d101      	bne.n	8007d0c <HAL_DMA_Abort_IT+0xcc>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <HAL_DMA_Abort_IT+0xce>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 8086 	beq.w	8007e20 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2204      	movs	r2, #4
 8007d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a2f      	ldr	r2, [pc, #188]	@ (8007de0 <HAL_DMA_Abort_IT+0x1a0>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d04a      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8007de4 <HAL_DMA_Abort_IT+0x1a4>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d045      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4a2c      	ldr	r2, [pc, #176]	@ (8007de8 <HAL_DMA_Abort_IT+0x1a8>)
 8007d36:	4293      	cmp	r3, r2
 8007d38:	d040      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8007dec <HAL_DMA_Abort_IT+0x1ac>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d03b      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a29      	ldr	r2, [pc, #164]	@ (8007df0 <HAL_DMA_Abort_IT+0x1b0>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d036      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a28      	ldr	r2, [pc, #160]	@ (8007df4 <HAL_DMA_Abort_IT+0x1b4>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d031      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a26      	ldr	r2, [pc, #152]	@ (8007df8 <HAL_DMA_Abort_IT+0x1b8>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d02c      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a25      	ldr	r2, [pc, #148]	@ (8007dfc <HAL_DMA_Abort_IT+0x1bc>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d027      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a23      	ldr	r2, [pc, #140]	@ (8007e00 <HAL_DMA_Abort_IT+0x1c0>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d022      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4a22      	ldr	r2, [pc, #136]	@ (8007e04 <HAL_DMA_Abort_IT+0x1c4>)
 8007d7c:	4293      	cmp	r3, r2
 8007d7e:	d01d      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a20      	ldr	r2, [pc, #128]	@ (8007e08 <HAL_DMA_Abort_IT+0x1c8>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d018      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007e0c <HAL_DMA_Abort_IT+0x1cc>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d013      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a1d      	ldr	r2, [pc, #116]	@ (8007e10 <HAL_DMA_Abort_IT+0x1d0>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d00e      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a1c      	ldr	r2, [pc, #112]	@ (8007e14 <HAL_DMA_Abort_IT+0x1d4>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d009      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a1a      	ldr	r2, [pc, #104]	@ (8007e18 <HAL_DMA_Abort_IT+0x1d8>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d004      	beq.n	8007dbc <HAL_DMA_Abort_IT+0x17c>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a19      	ldr	r2, [pc, #100]	@ (8007e1c <HAL_DMA_Abort_IT+0x1dc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d108      	bne.n	8007dce <HAL_DMA_Abort_IT+0x18e>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0201 	bic.w	r2, r2, #1
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	e178      	b.n	80080c0 <HAL_DMA_Abort_IT+0x480>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
 8007dde:	e16f      	b.n	80080c0 <HAL_DMA_Abort_IT+0x480>
 8007de0:	40020010 	.word	0x40020010
 8007de4:	40020028 	.word	0x40020028
 8007de8:	40020040 	.word	0x40020040
 8007dec:	40020058 	.word	0x40020058
 8007df0:	40020070 	.word	0x40020070
 8007df4:	40020088 	.word	0x40020088
 8007df8:	400200a0 	.word	0x400200a0
 8007dfc:	400200b8 	.word	0x400200b8
 8007e00:	40020410 	.word	0x40020410
 8007e04:	40020428 	.word	0x40020428
 8007e08:	40020440 	.word	0x40020440
 8007e0c:	40020458 	.word	0x40020458
 8007e10:	40020470 	.word	0x40020470
 8007e14:	40020488 	.word	0x40020488
 8007e18:	400204a0 	.word	0x400204a0
 8007e1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f022 020e 	bic.w	r2, r2, #14
 8007e2e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a6c      	ldr	r2, [pc, #432]	@ (8007fe8 <HAL_DMA_Abort_IT+0x3a8>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d04a      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a6b      	ldr	r2, [pc, #428]	@ (8007fec <HAL_DMA_Abort_IT+0x3ac>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d045      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a69      	ldr	r2, [pc, #420]	@ (8007ff0 <HAL_DMA_Abort_IT+0x3b0>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d040      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a68      	ldr	r2, [pc, #416]	@ (8007ff4 <HAL_DMA_Abort_IT+0x3b4>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d03b      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a66      	ldr	r2, [pc, #408]	@ (8007ff8 <HAL_DMA_Abort_IT+0x3b8>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d036      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a65      	ldr	r2, [pc, #404]	@ (8007ffc <HAL_DMA_Abort_IT+0x3bc>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d031      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a63      	ldr	r2, [pc, #396]	@ (8008000 <HAL_DMA_Abort_IT+0x3c0>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d02c      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a62      	ldr	r2, [pc, #392]	@ (8008004 <HAL_DMA_Abort_IT+0x3c4>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d027      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a60      	ldr	r2, [pc, #384]	@ (8008008 <HAL_DMA_Abort_IT+0x3c8>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d022      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a5f      	ldr	r2, [pc, #380]	@ (800800c <HAL_DMA_Abort_IT+0x3cc>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d01d      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a5d      	ldr	r2, [pc, #372]	@ (8008010 <HAL_DMA_Abort_IT+0x3d0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d018      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8008014 <HAL_DMA_Abort_IT+0x3d4>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d013      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a5a      	ldr	r2, [pc, #360]	@ (8008018 <HAL_DMA_Abort_IT+0x3d8>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d00e      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a59      	ldr	r2, [pc, #356]	@ (800801c <HAL_DMA_Abort_IT+0x3dc>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d009      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a57      	ldr	r2, [pc, #348]	@ (8008020 <HAL_DMA_Abort_IT+0x3e0>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d004      	beq.n	8007ed0 <HAL_DMA_Abort_IT+0x290>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a56      	ldr	r2, [pc, #344]	@ (8008024 <HAL_DMA_Abort_IT+0x3e4>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d108      	bne.n	8007ee2 <HAL_DMA_Abort_IT+0x2a2>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0201 	bic.w	r2, r2, #1
 8007ede:	601a      	str	r2, [r3, #0]
 8007ee0:	e007      	b.n	8007ef2 <HAL_DMA_Abort_IT+0x2b2>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0201 	bic.w	r2, r2, #1
 8007ef0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a3c      	ldr	r2, [pc, #240]	@ (8007fe8 <HAL_DMA_Abort_IT+0x3a8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d072      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4a3a      	ldr	r2, [pc, #232]	@ (8007fec <HAL_DMA_Abort_IT+0x3ac>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d06d      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a39      	ldr	r2, [pc, #228]	@ (8007ff0 <HAL_DMA_Abort_IT+0x3b0>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d068      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a37      	ldr	r2, [pc, #220]	@ (8007ff4 <HAL_DMA_Abort_IT+0x3b4>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d063      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a36      	ldr	r2, [pc, #216]	@ (8007ff8 <HAL_DMA_Abort_IT+0x3b8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d05e      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a34      	ldr	r2, [pc, #208]	@ (8007ffc <HAL_DMA_Abort_IT+0x3bc>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d059      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a33      	ldr	r2, [pc, #204]	@ (8008000 <HAL_DMA_Abort_IT+0x3c0>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d054      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a31      	ldr	r2, [pc, #196]	@ (8008004 <HAL_DMA_Abort_IT+0x3c4>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d04f      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a30      	ldr	r2, [pc, #192]	@ (8008008 <HAL_DMA_Abort_IT+0x3c8>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d04a      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a2e      	ldr	r2, [pc, #184]	@ (800800c <HAL_DMA_Abort_IT+0x3cc>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d045      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	4a2d      	ldr	r2, [pc, #180]	@ (8008010 <HAL_DMA_Abort_IT+0x3d0>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d040      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a2b      	ldr	r2, [pc, #172]	@ (8008014 <HAL_DMA_Abort_IT+0x3d4>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d03b      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8008018 <HAL_DMA_Abort_IT+0x3d8>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d036      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	4a28      	ldr	r2, [pc, #160]	@ (800801c <HAL_DMA_Abort_IT+0x3dc>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d031      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a27      	ldr	r2, [pc, #156]	@ (8008020 <HAL_DMA_Abort_IT+0x3e0>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d02c      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a25      	ldr	r2, [pc, #148]	@ (8008024 <HAL_DMA_Abort_IT+0x3e4>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d027      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a24      	ldr	r2, [pc, #144]	@ (8008028 <HAL_DMA_Abort_IT+0x3e8>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d022      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a22      	ldr	r2, [pc, #136]	@ (800802c <HAL_DMA_Abort_IT+0x3ec>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d01d      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4a21      	ldr	r2, [pc, #132]	@ (8008030 <HAL_DMA_Abort_IT+0x3f0>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d018      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8008034 <HAL_DMA_Abort_IT+0x3f4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d013      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8008038 <HAL_DMA_Abort_IT+0x3f8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00e      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800803c <HAL_DMA_Abort_IT+0x3fc>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d009      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8008040 <HAL_DMA_Abort_IT+0x400>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d004      	beq.n	8007fe2 <HAL_DMA_Abort_IT+0x3a2>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a19      	ldr	r2, [pc, #100]	@ (8008044 <HAL_DMA_Abort_IT+0x404>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d132      	bne.n	8008048 <HAL_DMA_Abort_IT+0x408>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e031      	b.n	800804a <HAL_DMA_Abort_IT+0x40a>
 8007fe6:	bf00      	nop
 8007fe8:	40020010 	.word	0x40020010
 8007fec:	40020028 	.word	0x40020028
 8007ff0:	40020040 	.word	0x40020040
 8007ff4:	40020058 	.word	0x40020058
 8007ff8:	40020070 	.word	0x40020070
 8007ffc:	40020088 	.word	0x40020088
 8008000:	400200a0 	.word	0x400200a0
 8008004:	400200b8 	.word	0x400200b8
 8008008:	40020410 	.word	0x40020410
 800800c:	40020428 	.word	0x40020428
 8008010:	40020440 	.word	0x40020440
 8008014:	40020458 	.word	0x40020458
 8008018:	40020470 	.word	0x40020470
 800801c:	40020488 	.word	0x40020488
 8008020:	400204a0 	.word	0x400204a0
 8008024:	400204b8 	.word	0x400204b8
 8008028:	58025408 	.word	0x58025408
 800802c:	5802541c 	.word	0x5802541c
 8008030:	58025430 	.word	0x58025430
 8008034:	58025444 	.word	0x58025444
 8008038:	58025458 	.word	0x58025458
 800803c:	5802546c 	.word	0x5802546c
 8008040:	58025480 	.word	0x58025480
 8008044:	58025494 	.word	0x58025494
 8008048:	2300      	movs	r3, #0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d028      	beq.n	80080a0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008058:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800805c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008062:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008068:	f003 031f 	and.w	r3, r3, #31
 800806c:	2201      	movs	r2, #1
 800806e:	409a      	lsls	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800807c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00c      	beq.n	80080a0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800808a:	681a      	ldr	r2, [r3, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008090:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008094:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800809e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d003      	beq.n	80080c0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3710      	adds	r7, #16
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop

080080cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b08a      	sub	sp, #40	@ 0x28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80080d8:	4b67      	ldr	r3, [pc, #412]	@ (8008278 <HAL_DMA_IRQHandler+0x1ac>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a67      	ldr	r2, [pc, #412]	@ (800827c <HAL_DMA_IRQHandler+0x1b0>)
 80080de:	fba2 2303 	umull	r2, r3, r2, r3
 80080e2:	0a9b      	lsrs	r3, r3, #10
 80080e4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80080f2:	6a3b      	ldr	r3, [r7, #32]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a5f      	ldr	r2, [pc, #380]	@ (8008280 <HAL_DMA_IRQHandler+0x1b4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d04a      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a5d      	ldr	r2, [pc, #372]	@ (8008284 <HAL_DMA_IRQHandler+0x1b8>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d045      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a5c      	ldr	r2, [pc, #368]	@ (8008288 <HAL_DMA_IRQHandler+0x1bc>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d040      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a5a      	ldr	r2, [pc, #360]	@ (800828c <HAL_DMA_IRQHandler+0x1c0>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d03b      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a59      	ldr	r2, [pc, #356]	@ (8008290 <HAL_DMA_IRQHandler+0x1c4>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d036      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a57      	ldr	r2, [pc, #348]	@ (8008294 <HAL_DMA_IRQHandler+0x1c8>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d031      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a56      	ldr	r2, [pc, #344]	@ (8008298 <HAL_DMA_IRQHandler+0x1cc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d02c      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a54      	ldr	r2, [pc, #336]	@ (800829c <HAL_DMA_IRQHandler+0x1d0>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d027      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a53      	ldr	r2, [pc, #332]	@ (80082a0 <HAL_DMA_IRQHandler+0x1d4>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d022      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a51      	ldr	r2, [pc, #324]	@ (80082a4 <HAL_DMA_IRQHandler+0x1d8>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d01d      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a50      	ldr	r2, [pc, #320]	@ (80082a8 <HAL_DMA_IRQHandler+0x1dc>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d018      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a4e      	ldr	r2, [pc, #312]	@ (80082ac <HAL_DMA_IRQHandler+0x1e0>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d013      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a4d      	ldr	r2, [pc, #308]	@ (80082b0 <HAL_DMA_IRQHandler+0x1e4>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d00e      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a4b      	ldr	r2, [pc, #300]	@ (80082b4 <HAL_DMA_IRQHandler+0x1e8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d009      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a4a      	ldr	r2, [pc, #296]	@ (80082b8 <HAL_DMA_IRQHandler+0x1ec>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d004      	beq.n	800819e <HAL_DMA_IRQHandler+0xd2>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a48      	ldr	r2, [pc, #288]	@ (80082bc <HAL_DMA_IRQHandler+0x1f0>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d101      	bne.n	80081a2 <HAL_DMA_IRQHandler+0xd6>
 800819e:	2301      	movs	r3, #1
 80081a0:	e000      	b.n	80081a4 <HAL_DMA_IRQHandler+0xd8>
 80081a2:	2300      	movs	r3, #0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f000 842b 	beq.w	8008a00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80081ae:	f003 031f 	and.w	r3, r3, #31
 80081b2:	2208      	movs	r2, #8
 80081b4:	409a      	lsls	r2, r3
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	4013      	ands	r3, r2
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 80a2 	beq.w	8008304 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a2e      	ldr	r2, [pc, #184]	@ (8008280 <HAL_DMA_IRQHandler+0x1b4>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d04a      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a2d      	ldr	r2, [pc, #180]	@ (8008284 <HAL_DMA_IRQHandler+0x1b8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d045      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a2b      	ldr	r2, [pc, #172]	@ (8008288 <HAL_DMA_IRQHandler+0x1bc>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d040      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a2a      	ldr	r2, [pc, #168]	@ (800828c <HAL_DMA_IRQHandler+0x1c0>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d03b      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a28      	ldr	r2, [pc, #160]	@ (8008290 <HAL_DMA_IRQHandler+0x1c4>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d036      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a27      	ldr	r2, [pc, #156]	@ (8008294 <HAL_DMA_IRQHandler+0x1c8>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d031      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a25      	ldr	r2, [pc, #148]	@ (8008298 <HAL_DMA_IRQHandler+0x1cc>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d02c      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a24      	ldr	r2, [pc, #144]	@ (800829c <HAL_DMA_IRQHandler+0x1d0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d027      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a22      	ldr	r2, [pc, #136]	@ (80082a0 <HAL_DMA_IRQHandler+0x1d4>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d022      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a21      	ldr	r2, [pc, #132]	@ (80082a4 <HAL_DMA_IRQHandler+0x1d8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d01d      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a1f      	ldr	r2, [pc, #124]	@ (80082a8 <HAL_DMA_IRQHandler+0x1dc>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d018      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a1e      	ldr	r2, [pc, #120]	@ (80082ac <HAL_DMA_IRQHandler+0x1e0>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d013      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a1c      	ldr	r2, [pc, #112]	@ (80082b0 <HAL_DMA_IRQHandler+0x1e4>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00e      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a1b      	ldr	r2, [pc, #108]	@ (80082b4 <HAL_DMA_IRQHandler+0x1e8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d009      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a19      	ldr	r2, [pc, #100]	@ (80082b8 <HAL_DMA_IRQHandler+0x1ec>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <HAL_DMA_IRQHandler+0x194>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a18      	ldr	r2, [pc, #96]	@ (80082bc <HAL_DMA_IRQHandler+0x1f0>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d12f      	bne.n	80082c0 <HAL_DMA_IRQHandler+0x1f4>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 0304 	and.w	r3, r3, #4
 800826a:	2b00      	cmp	r3, #0
 800826c:	bf14      	ite	ne
 800826e:	2301      	movne	r3, #1
 8008270:	2300      	moveq	r3, #0
 8008272:	b2db      	uxtb	r3, r3
 8008274:	e02e      	b.n	80082d4 <HAL_DMA_IRQHandler+0x208>
 8008276:	bf00      	nop
 8008278:	24000000 	.word	0x24000000
 800827c:	1b4e81b5 	.word	0x1b4e81b5
 8008280:	40020010 	.word	0x40020010
 8008284:	40020028 	.word	0x40020028
 8008288:	40020040 	.word	0x40020040
 800828c:	40020058 	.word	0x40020058
 8008290:	40020070 	.word	0x40020070
 8008294:	40020088 	.word	0x40020088
 8008298:	400200a0 	.word	0x400200a0
 800829c:	400200b8 	.word	0x400200b8
 80082a0:	40020410 	.word	0x40020410
 80082a4:	40020428 	.word	0x40020428
 80082a8:	40020440 	.word	0x40020440
 80082ac:	40020458 	.word	0x40020458
 80082b0:	40020470 	.word	0x40020470
 80082b4:	40020488 	.word	0x40020488
 80082b8:	400204a0 	.word	0x400204a0
 80082bc:	400204b8 	.word	0x400204b8
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0308 	and.w	r3, r3, #8
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	bf14      	ite	ne
 80082ce:	2301      	movne	r3, #1
 80082d0:	2300      	moveq	r3, #0
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d015      	beq.n	8008304 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f022 0204 	bic.w	r2, r2, #4
 80082e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80082ec:	f003 031f 	and.w	r3, r3, #31
 80082f0:	2208      	movs	r2, #8
 80082f2:	409a      	lsls	r2, r3
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082fc:	f043 0201 	orr.w	r2, r3, #1
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008308:	f003 031f 	and.w	r3, r3, #31
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	fa22 f303 	lsr.w	r3, r2, r3
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d06e      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a69      	ldr	r2, [pc, #420]	@ (80084c4 <HAL_DMA_IRQHandler+0x3f8>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d04a      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a67      	ldr	r2, [pc, #412]	@ (80084c8 <HAL_DMA_IRQHandler+0x3fc>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d045      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a66      	ldr	r2, [pc, #408]	@ (80084cc <HAL_DMA_IRQHandler+0x400>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d040      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a64      	ldr	r2, [pc, #400]	@ (80084d0 <HAL_DMA_IRQHandler+0x404>)
 800833e:	4293      	cmp	r3, r2
 8008340:	d03b      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a63      	ldr	r2, [pc, #396]	@ (80084d4 <HAL_DMA_IRQHandler+0x408>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d036      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a61      	ldr	r2, [pc, #388]	@ (80084d8 <HAL_DMA_IRQHandler+0x40c>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d031      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4a60      	ldr	r2, [pc, #384]	@ (80084dc <HAL_DMA_IRQHandler+0x410>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d02c      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4a5e      	ldr	r2, [pc, #376]	@ (80084e0 <HAL_DMA_IRQHandler+0x414>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d027      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4a5d      	ldr	r2, [pc, #372]	@ (80084e4 <HAL_DMA_IRQHandler+0x418>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d022      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a5b      	ldr	r2, [pc, #364]	@ (80084e8 <HAL_DMA_IRQHandler+0x41c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d01d      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a5a      	ldr	r2, [pc, #360]	@ (80084ec <HAL_DMA_IRQHandler+0x420>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d018      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a58      	ldr	r2, [pc, #352]	@ (80084f0 <HAL_DMA_IRQHandler+0x424>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d013      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a57      	ldr	r2, [pc, #348]	@ (80084f4 <HAL_DMA_IRQHandler+0x428>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d00e      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a55      	ldr	r2, [pc, #340]	@ (80084f8 <HAL_DMA_IRQHandler+0x42c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d009      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a54      	ldr	r2, [pc, #336]	@ (80084fc <HAL_DMA_IRQHandler+0x430>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d004      	beq.n	80083ba <HAL_DMA_IRQHandler+0x2ee>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a52      	ldr	r2, [pc, #328]	@ (8008500 <HAL_DMA_IRQHandler+0x434>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d10a      	bne.n	80083d0 <HAL_DMA_IRQHandler+0x304>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	bf14      	ite	ne
 80083c8:	2301      	movne	r3, #1
 80083ca:	2300      	moveq	r3, #0
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	e003      	b.n	80083d8 <HAL_DMA_IRQHandler+0x30c>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2300      	movs	r3, #0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d00d      	beq.n	80083f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083e0:	f003 031f 	and.w	r3, r3, #31
 80083e4:	2201      	movs	r2, #1
 80083e6:	409a      	lsls	r2, r3
 80083e8:	6a3b      	ldr	r3, [r7, #32]
 80083ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f0:	f043 0202 	orr.w	r2, r3, #2
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083fc:	f003 031f 	and.w	r3, r3, #31
 8008400:	2204      	movs	r2, #4
 8008402:	409a      	lsls	r2, r3
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	4013      	ands	r3, r2
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 808f 	beq.w	800852c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a2c      	ldr	r2, [pc, #176]	@ (80084c4 <HAL_DMA_IRQHandler+0x3f8>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d04a      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a2a      	ldr	r2, [pc, #168]	@ (80084c8 <HAL_DMA_IRQHandler+0x3fc>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d045      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a29      	ldr	r2, [pc, #164]	@ (80084cc <HAL_DMA_IRQHandler+0x400>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d040      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a27      	ldr	r2, [pc, #156]	@ (80084d0 <HAL_DMA_IRQHandler+0x404>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d03b      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a26      	ldr	r2, [pc, #152]	@ (80084d4 <HAL_DMA_IRQHandler+0x408>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d036      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a24      	ldr	r2, [pc, #144]	@ (80084d8 <HAL_DMA_IRQHandler+0x40c>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d031      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a23      	ldr	r2, [pc, #140]	@ (80084dc <HAL_DMA_IRQHandler+0x410>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d02c      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a21      	ldr	r2, [pc, #132]	@ (80084e0 <HAL_DMA_IRQHandler+0x414>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d027      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a20      	ldr	r2, [pc, #128]	@ (80084e4 <HAL_DMA_IRQHandler+0x418>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d022      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a1e      	ldr	r2, [pc, #120]	@ (80084e8 <HAL_DMA_IRQHandler+0x41c>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d01d      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a1d      	ldr	r2, [pc, #116]	@ (80084ec <HAL_DMA_IRQHandler+0x420>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d018      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a1b      	ldr	r2, [pc, #108]	@ (80084f0 <HAL_DMA_IRQHandler+0x424>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d013      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a1a      	ldr	r2, [pc, #104]	@ (80084f4 <HAL_DMA_IRQHandler+0x428>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d00e      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a18      	ldr	r2, [pc, #96]	@ (80084f8 <HAL_DMA_IRQHandler+0x42c>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d009      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a17      	ldr	r2, [pc, #92]	@ (80084fc <HAL_DMA_IRQHandler+0x430>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d004      	beq.n	80084ae <HAL_DMA_IRQHandler+0x3e2>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a15      	ldr	r2, [pc, #84]	@ (8008500 <HAL_DMA_IRQHandler+0x434>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d12a      	bne.n	8008504 <HAL_DMA_IRQHandler+0x438>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0302 	and.w	r3, r3, #2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	bf14      	ite	ne
 80084bc:	2301      	movne	r3, #1
 80084be:	2300      	moveq	r3, #0
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	e023      	b.n	800850c <HAL_DMA_IRQHandler+0x440>
 80084c4:	40020010 	.word	0x40020010
 80084c8:	40020028 	.word	0x40020028
 80084cc:	40020040 	.word	0x40020040
 80084d0:	40020058 	.word	0x40020058
 80084d4:	40020070 	.word	0x40020070
 80084d8:	40020088 	.word	0x40020088
 80084dc:	400200a0 	.word	0x400200a0
 80084e0:	400200b8 	.word	0x400200b8
 80084e4:	40020410 	.word	0x40020410
 80084e8:	40020428 	.word	0x40020428
 80084ec:	40020440 	.word	0x40020440
 80084f0:	40020458 	.word	0x40020458
 80084f4:	40020470 	.word	0x40020470
 80084f8:	40020488 	.word	0x40020488
 80084fc:	400204a0 	.word	0x400204a0
 8008500:	400204b8 	.word	0x400204b8
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2300      	movs	r3, #0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00d      	beq.n	800852c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008514:	f003 031f 	and.w	r3, r3, #31
 8008518:	2204      	movs	r2, #4
 800851a:	409a      	lsls	r2, r3
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008524:	f043 0204 	orr.w	r2, r3, #4
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008530:	f003 031f 	and.w	r3, r3, #31
 8008534:	2210      	movs	r2, #16
 8008536:	409a      	lsls	r2, r3
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	4013      	ands	r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	f000 80a6 	beq.w	800868e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a85      	ldr	r2, [pc, #532]	@ (800875c <HAL_DMA_IRQHandler+0x690>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d04a      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a83      	ldr	r2, [pc, #524]	@ (8008760 <HAL_DMA_IRQHandler+0x694>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d045      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a82      	ldr	r2, [pc, #520]	@ (8008764 <HAL_DMA_IRQHandler+0x698>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d040      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a80      	ldr	r2, [pc, #512]	@ (8008768 <HAL_DMA_IRQHandler+0x69c>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d03b      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a7f      	ldr	r2, [pc, #508]	@ (800876c <HAL_DMA_IRQHandler+0x6a0>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d036      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a7d      	ldr	r2, [pc, #500]	@ (8008770 <HAL_DMA_IRQHandler+0x6a4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d031      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a7c      	ldr	r2, [pc, #496]	@ (8008774 <HAL_DMA_IRQHandler+0x6a8>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d02c      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a7a      	ldr	r2, [pc, #488]	@ (8008778 <HAL_DMA_IRQHandler+0x6ac>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d027      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a79      	ldr	r2, [pc, #484]	@ (800877c <HAL_DMA_IRQHandler+0x6b0>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d022      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a77      	ldr	r2, [pc, #476]	@ (8008780 <HAL_DMA_IRQHandler+0x6b4>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d01d      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a76      	ldr	r2, [pc, #472]	@ (8008784 <HAL_DMA_IRQHandler+0x6b8>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d018      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a74      	ldr	r2, [pc, #464]	@ (8008788 <HAL_DMA_IRQHandler+0x6bc>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d013      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a73      	ldr	r2, [pc, #460]	@ (800878c <HAL_DMA_IRQHandler+0x6c0>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d00e      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a71      	ldr	r2, [pc, #452]	@ (8008790 <HAL_DMA_IRQHandler+0x6c4>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d009      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a70      	ldr	r2, [pc, #448]	@ (8008794 <HAL_DMA_IRQHandler+0x6c8>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d004      	beq.n	80085e2 <HAL_DMA_IRQHandler+0x516>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a6e      	ldr	r2, [pc, #440]	@ (8008798 <HAL_DMA_IRQHandler+0x6cc>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d10a      	bne.n	80085f8 <HAL_DMA_IRQHandler+0x52c>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0308 	and.w	r3, r3, #8
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	bf14      	ite	ne
 80085f0:	2301      	movne	r3, #1
 80085f2:	2300      	moveq	r3, #0
 80085f4:	b2db      	uxtb	r3, r3
 80085f6:	e009      	b.n	800860c <HAL_DMA_IRQHandler+0x540>
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f003 0304 	and.w	r3, r3, #4
 8008602:	2b00      	cmp	r3, #0
 8008604:	bf14      	ite	ne
 8008606:	2301      	movne	r3, #1
 8008608:	2300      	moveq	r3, #0
 800860a:	b2db      	uxtb	r3, r3
 800860c:	2b00      	cmp	r3, #0
 800860e:	d03e      	beq.n	800868e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008614:	f003 031f 	and.w	r3, r3, #31
 8008618:	2210      	movs	r2, #16
 800861a:	409a      	lsls	r2, r3
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d018      	beq.n	8008660 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008638:	2b00      	cmp	r3, #0
 800863a:	d108      	bne.n	800864e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008640:	2b00      	cmp	r3, #0
 8008642:	d024      	beq.n	800868e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	4798      	blx	r3
 800864c:	e01f      	b.n	800868e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01b      	beq.n	800868e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	4798      	blx	r3
 800865e:	e016      	b.n	800868e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800866a:	2b00      	cmp	r3, #0
 800866c:	d107      	bne.n	800867e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f022 0208 	bic.w	r2, r2, #8
 800867c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008692:	f003 031f 	and.w	r3, r3, #31
 8008696:	2220      	movs	r2, #32
 8008698:	409a      	lsls	r2, r3
 800869a:	69bb      	ldr	r3, [r7, #24]
 800869c:	4013      	ands	r3, r2
 800869e:	2b00      	cmp	r3, #0
 80086a0:	f000 8110 	beq.w	80088c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a2c      	ldr	r2, [pc, #176]	@ (800875c <HAL_DMA_IRQHandler+0x690>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d04a      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a2b      	ldr	r2, [pc, #172]	@ (8008760 <HAL_DMA_IRQHandler+0x694>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d045      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a29      	ldr	r2, [pc, #164]	@ (8008764 <HAL_DMA_IRQHandler+0x698>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d040      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a28      	ldr	r2, [pc, #160]	@ (8008768 <HAL_DMA_IRQHandler+0x69c>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d03b      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a26      	ldr	r2, [pc, #152]	@ (800876c <HAL_DMA_IRQHandler+0x6a0>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d036      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a25      	ldr	r2, [pc, #148]	@ (8008770 <HAL_DMA_IRQHandler+0x6a4>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d031      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a23      	ldr	r2, [pc, #140]	@ (8008774 <HAL_DMA_IRQHandler+0x6a8>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d02c      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a22      	ldr	r2, [pc, #136]	@ (8008778 <HAL_DMA_IRQHandler+0x6ac>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d027      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a20      	ldr	r2, [pc, #128]	@ (800877c <HAL_DMA_IRQHandler+0x6b0>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d022      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1f      	ldr	r2, [pc, #124]	@ (8008780 <HAL_DMA_IRQHandler+0x6b4>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d01d      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a1d      	ldr	r2, [pc, #116]	@ (8008784 <HAL_DMA_IRQHandler+0x6b8>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d018      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a1c      	ldr	r2, [pc, #112]	@ (8008788 <HAL_DMA_IRQHandler+0x6bc>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d013      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a1a      	ldr	r2, [pc, #104]	@ (800878c <HAL_DMA_IRQHandler+0x6c0>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d00e      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a19      	ldr	r2, [pc, #100]	@ (8008790 <HAL_DMA_IRQHandler+0x6c4>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d009      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	4a17      	ldr	r2, [pc, #92]	@ (8008794 <HAL_DMA_IRQHandler+0x6c8>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d004      	beq.n	8008744 <HAL_DMA_IRQHandler+0x678>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4a16      	ldr	r2, [pc, #88]	@ (8008798 <HAL_DMA_IRQHandler+0x6cc>)
 8008740:	4293      	cmp	r3, r2
 8008742:	d12b      	bne.n	800879c <HAL_DMA_IRQHandler+0x6d0>
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0310 	and.w	r3, r3, #16
 800874e:	2b00      	cmp	r3, #0
 8008750:	bf14      	ite	ne
 8008752:	2301      	movne	r3, #1
 8008754:	2300      	moveq	r3, #0
 8008756:	b2db      	uxtb	r3, r3
 8008758:	e02a      	b.n	80087b0 <HAL_DMA_IRQHandler+0x6e4>
 800875a:	bf00      	nop
 800875c:	40020010 	.word	0x40020010
 8008760:	40020028 	.word	0x40020028
 8008764:	40020040 	.word	0x40020040
 8008768:	40020058 	.word	0x40020058
 800876c:	40020070 	.word	0x40020070
 8008770:	40020088 	.word	0x40020088
 8008774:	400200a0 	.word	0x400200a0
 8008778:	400200b8 	.word	0x400200b8
 800877c:	40020410 	.word	0x40020410
 8008780:	40020428 	.word	0x40020428
 8008784:	40020440 	.word	0x40020440
 8008788:	40020458 	.word	0x40020458
 800878c:	40020470 	.word	0x40020470
 8008790:	40020488 	.word	0x40020488
 8008794:	400204a0 	.word	0x400204a0
 8008798:	400204b8 	.word	0x400204b8
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	bf14      	ite	ne
 80087aa:	2301      	movne	r3, #1
 80087ac:	2300      	moveq	r3, #0
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 8087 	beq.w	80088c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80087ba:	f003 031f 	and.w	r3, r3, #31
 80087be:	2220      	movs	r2, #32
 80087c0:	409a      	lsls	r2, r3
 80087c2:	6a3b      	ldr	r3, [r7, #32]
 80087c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	2b04      	cmp	r3, #4
 80087d0:	d139      	bne.n	8008846 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0216 	bic.w	r2, r2, #22
 80087e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	695a      	ldr	r2, [r3, #20]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80087f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d103      	bne.n	8008802 <HAL_DMA_IRQHandler+0x736>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d007      	beq.n	8008812 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0208 	bic.w	r2, r2, #8
 8008810:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008816:	f003 031f 	and.w	r3, r3, #31
 800881a:	223f      	movs	r2, #63	@ 0x3f
 800881c:	409a      	lsls	r2, r3
 800881e:	6a3b      	ldr	r3, [r7, #32]
 8008820:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008836:	2b00      	cmp	r3, #0
 8008838:	f000 834a 	beq.w	8008ed0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	4798      	blx	r3
          }
          return;
 8008844:	e344      	b.n	8008ed0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d018      	beq.n	8008886 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d108      	bne.n	8008874 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008866:	2b00      	cmp	r3, #0
 8008868:	d02c      	beq.n	80088c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	4798      	blx	r3
 8008872:	e027      	b.n	80088c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008878:	2b00      	cmp	r3, #0
 800887a:	d023      	beq.n	80088c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	4798      	blx	r3
 8008884:	e01e      	b.n	80088c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10f      	bne.n	80088b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f022 0210 	bic.w	r2, r2, #16
 80088a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d003      	beq.n	80088c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 8306 	beq.w	8008eda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088d2:	f003 0301 	and.w	r3, r3, #1
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	f000 8088 	beq.w	80089ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2204      	movs	r2, #4
 80088e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	4a7a      	ldr	r2, [pc, #488]	@ (8008ad4 <HAL_DMA_IRQHandler+0xa08>)
 80088ea:	4293      	cmp	r3, r2
 80088ec:	d04a      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a79      	ldr	r2, [pc, #484]	@ (8008ad8 <HAL_DMA_IRQHandler+0xa0c>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d045      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a77      	ldr	r2, [pc, #476]	@ (8008adc <HAL_DMA_IRQHandler+0xa10>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d040      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a76      	ldr	r2, [pc, #472]	@ (8008ae0 <HAL_DMA_IRQHandler+0xa14>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d03b      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a74      	ldr	r2, [pc, #464]	@ (8008ae4 <HAL_DMA_IRQHandler+0xa18>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d036      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a73      	ldr	r2, [pc, #460]	@ (8008ae8 <HAL_DMA_IRQHandler+0xa1c>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d031      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a71      	ldr	r2, [pc, #452]	@ (8008aec <HAL_DMA_IRQHandler+0xa20>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d02c      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a70      	ldr	r2, [pc, #448]	@ (8008af0 <HAL_DMA_IRQHandler+0xa24>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d027      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a6e      	ldr	r2, [pc, #440]	@ (8008af4 <HAL_DMA_IRQHandler+0xa28>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d022      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a6d      	ldr	r2, [pc, #436]	@ (8008af8 <HAL_DMA_IRQHandler+0xa2c>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d01d      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a6b      	ldr	r2, [pc, #428]	@ (8008afc <HAL_DMA_IRQHandler+0xa30>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d018      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a6a      	ldr	r2, [pc, #424]	@ (8008b00 <HAL_DMA_IRQHandler+0xa34>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d013      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a68      	ldr	r2, [pc, #416]	@ (8008b04 <HAL_DMA_IRQHandler+0xa38>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00e      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a67      	ldr	r2, [pc, #412]	@ (8008b08 <HAL_DMA_IRQHandler+0xa3c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d009      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a65      	ldr	r2, [pc, #404]	@ (8008b0c <HAL_DMA_IRQHandler+0xa40>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d004      	beq.n	8008984 <HAL_DMA_IRQHandler+0x8b8>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a64      	ldr	r2, [pc, #400]	@ (8008b10 <HAL_DMA_IRQHandler+0xa44>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d108      	bne.n	8008996 <HAL_DMA_IRQHandler+0x8ca>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0201 	bic.w	r2, r2, #1
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	e007      	b.n	80089a6 <HAL_DMA_IRQHandler+0x8da>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 0201 	bic.w	r2, r2, #1
 80089a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	3301      	adds	r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d307      	bcc.n	80089c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 0301 	and.w	r3, r3, #1
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d1f2      	bne.n	80089a6 <HAL_DMA_IRQHandler+0x8da>
 80089c0:	e000      	b.n	80089c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80089c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2203      	movs	r2, #3
 80089d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80089da:	e003      	b.n	80089e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8272 	beq.w	8008eda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	4798      	blx	r3
 80089fe:	e26c      	b.n	8008eda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a43      	ldr	r2, [pc, #268]	@ (8008b14 <HAL_DMA_IRQHandler+0xa48>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d022      	beq.n	8008a50 <HAL_DMA_IRQHandler+0x984>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a42      	ldr	r2, [pc, #264]	@ (8008b18 <HAL_DMA_IRQHandler+0xa4c>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d01d      	beq.n	8008a50 <HAL_DMA_IRQHandler+0x984>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a40      	ldr	r2, [pc, #256]	@ (8008b1c <HAL_DMA_IRQHandler+0xa50>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d018      	beq.n	8008a50 <HAL_DMA_IRQHandler+0x984>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	4a3f      	ldr	r2, [pc, #252]	@ (8008b20 <HAL_DMA_IRQHandler+0xa54>)
 8008a24:	4293      	cmp	r3, r2
 8008a26:	d013      	beq.n	8008a50 <HAL_DMA_IRQHandler+0x984>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a3d      	ldr	r2, [pc, #244]	@ (8008b24 <HAL_DMA_IRQHandler+0xa58>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00e      	beq.n	8008a50 <HAL_DMA_IRQHandler+0x984>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a3c      	ldr	r2, [pc, #240]	@ (8008b28 <HAL_DMA_IRQHandler+0xa5c>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d009      	beq.n	8008a50 <HAL_DMA_IRQHandler+0x984>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a3a      	ldr	r2, [pc, #232]	@ (8008b2c <HAL_DMA_IRQHandler+0xa60>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d004      	beq.n	8008a50 <HAL_DMA_IRQHandler+0x984>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a39      	ldr	r2, [pc, #228]	@ (8008b30 <HAL_DMA_IRQHandler+0xa64>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d101      	bne.n	8008a54 <HAL_DMA_IRQHandler+0x988>
 8008a50:	2301      	movs	r3, #1
 8008a52:	e000      	b.n	8008a56 <HAL_DMA_IRQHandler+0x98a>
 8008a54:	2300      	movs	r3, #0
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f000 823f 	beq.w	8008eda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a68:	f003 031f 	and.w	r3, r3, #31
 8008a6c:	2204      	movs	r2, #4
 8008a6e:	409a      	lsls	r2, r3
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	4013      	ands	r3, r2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f000 80cd 	beq.w	8008c14 <HAL_DMA_IRQHandler+0xb48>
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 80c7 	beq.w	8008c14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a8a:	f003 031f 	and.w	r3, r3, #31
 8008a8e:	2204      	movs	r2, #4
 8008a90:	409a      	lsls	r2, r3
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d049      	beq.n	8008b34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d109      	bne.n	8008abe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	f000 8210 	beq.w	8008ed4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008abc:	e20a      	b.n	8008ed4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f000 8206 	beq.w	8008ed4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ad0:	e200      	b.n	8008ed4 <HAL_DMA_IRQHandler+0xe08>
 8008ad2:	bf00      	nop
 8008ad4:	40020010 	.word	0x40020010
 8008ad8:	40020028 	.word	0x40020028
 8008adc:	40020040 	.word	0x40020040
 8008ae0:	40020058 	.word	0x40020058
 8008ae4:	40020070 	.word	0x40020070
 8008ae8:	40020088 	.word	0x40020088
 8008aec:	400200a0 	.word	0x400200a0
 8008af0:	400200b8 	.word	0x400200b8
 8008af4:	40020410 	.word	0x40020410
 8008af8:	40020428 	.word	0x40020428
 8008afc:	40020440 	.word	0x40020440
 8008b00:	40020458 	.word	0x40020458
 8008b04:	40020470 	.word	0x40020470
 8008b08:	40020488 	.word	0x40020488
 8008b0c:	400204a0 	.word	0x400204a0
 8008b10:	400204b8 	.word	0x400204b8
 8008b14:	58025408 	.word	0x58025408
 8008b18:	5802541c 	.word	0x5802541c
 8008b1c:	58025430 	.word	0x58025430
 8008b20:	58025444 	.word	0x58025444
 8008b24:	58025458 	.word	0x58025458
 8008b28:	5802546c 	.word	0x5802546c
 8008b2c:	58025480 	.word	0x58025480
 8008b30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d160      	bne.n	8008c00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a7f      	ldr	r2, [pc, #508]	@ (8008d40 <HAL_DMA_IRQHandler+0xc74>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d04a      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a7d      	ldr	r2, [pc, #500]	@ (8008d44 <HAL_DMA_IRQHandler+0xc78>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d045      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a7c      	ldr	r2, [pc, #496]	@ (8008d48 <HAL_DMA_IRQHandler+0xc7c>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d040      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a7a      	ldr	r2, [pc, #488]	@ (8008d4c <HAL_DMA_IRQHandler+0xc80>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d03b      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a79      	ldr	r2, [pc, #484]	@ (8008d50 <HAL_DMA_IRQHandler+0xc84>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d036      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a77      	ldr	r2, [pc, #476]	@ (8008d54 <HAL_DMA_IRQHandler+0xc88>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d031      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a76      	ldr	r2, [pc, #472]	@ (8008d58 <HAL_DMA_IRQHandler+0xc8c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d02c      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a74      	ldr	r2, [pc, #464]	@ (8008d5c <HAL_DMA_IRQHandler+0xc90>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d027      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	4a73      	ldr	r2, [pc, #460]	@ (8008d60 <HAL_DMA_IRQHandler+0xc94>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d022      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a71      	ldr	r2, [pc, #452]	@ (8008d64 <HAL_DMA_IRQHandler+0xc98>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d01d      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a70      	ldr	r2, [pc, #448]	@ (8008d68 <HAL_DMA_IRQHandler+0xc9c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d018      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a6e      	ldr	r2, [pc, #440]	@ (8008d6c <HAL_DMA_IRQHandler+0xca0>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d013      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a6d      	ldr	r2, [pc, #436]	@ (8008d70 <HAL_DMA_IRQHandler+0xca4>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d00e      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a6b      	ldr	r2, [pc, #428]	@ (8008d74 <HAL_DMA_IRQHandler+0xca8>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d009      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4a6a      	ldr	r2, [pc, #424]	@ (8008d78 <HAL_DMA_IRQHandler+0xcac>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d004      	beq.n	8008bde <HAL_DMA_IRQHandler+0xb12>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	4a68      	ldr	r2, [pc, #416]	@ (8008d7c <HAL_DMA_IRQHandler+0xcb0>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d108      	bne.n	8008bf0 <HAL_DMA_IRQHandler+0xb24>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f022 0208 	bic.w	r2, r2, #8
 8008bec:	601a      	str	r2, [r3, #0]
 8008bee:	e007      	b.n	8008c00 <HAL_DMA_IRQHandler+0xb34>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f022 0204 	bic.w	r2, r2, #4
 8008bfe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 8165 	beq.w	8008ed4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c12:	e15f      	b.n	8008ed4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c18:	f003 031f 	and.w	r3, r3, #31
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	409a      	lsls	r2, r3
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	4013      	ands	r3, r2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 80c5 	beq.w	8008db4 <HAL_DMA_IRQHandler+0xce8>
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	f003 0302 	and.w	r3, r3, #2
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	f000 80bf 	beq.w	8008db4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c3a:	f003 031f 	and.w	r3, r3, #31
 8008c3e:	2202      	movs	r2, #2
 8008c40:	409a      	lsls	r2, r3
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d018      	beq.n	8008c82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d109      	bne.n	8008c6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	f000 813a 	beq.w	8008ed8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c6c:	e134      	b.n	8008ed8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 8130 	beq.w	8008ed8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008c80:	e12a      	b.n	8008ed8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	f003 0320 	and.w	r3, r3, #32
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f040 8089 	bne.w	8008da0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a2b      	ldr	r2, [pc, #172]	@ (8008d40 <HAL_DMA_IRQHandler+0xc74>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d04a      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a29      	ldr	r2, [pc, #164]	@ (8008d44 <HAL_DMA_IRQHandler+0xc78>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d045      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a28      	ldr	r2, [pc, #160]	@ (8008d48 <HAL_DMA_IRQHandler+0xc7c>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d040      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a26      	ldr	r2, [pc, #152]	@ (8008d4c <HAL_DMA_IRQHandler+0xc80>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d03b      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a25      	ldr	r2, [pc, #148]	@ (8008d50 <HAL_DMA_IRQHandler+0xc84>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d036      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a23      	ldr	r2, [pc, #140]	@ (8008d54 <HAL_DMA_IRQHandler+0xc88>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d031      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a22      	ldr	r2, [pc, #136]	@ (8008d58 <HAL_DMA_IRQHandler+0xc8c>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d02c      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a20      	ldr	r2, [pc, #128]	@ (8008d5c <HAL_DMA_IRQHandler+0xc90>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d027      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8008d60 <HAL_DMA_IRQHandler+0xc94>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d022      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a1d      	ldr	r2, [pc, #116]	@ (8008d64 <HAL_DMA_IRQHandler+0xc98>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d01d      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8008d68 <HAL_DMA_IRQHandler+0xc9c>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d018      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a1a      	ldr	r2, [pc, #104]	@ (8008d6c <HAL_DMA_IRQHandler+0xca0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d013      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a19      	ldr	r2, [pc, #100]	@ (8008d70 <HAL_DMA_IRQHandler+0xca4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d00e      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a17      	ldr	r2, [pc, #92]	@ (8008d74 <HAL_DMA_IRQHandler+0xca8>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d009      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a16      	ldr	r2, [pc, #88]	@ (8008d78 <HAL_DMA_IRQHandler+0xcac>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d004      	beq.n	8008d2e <HAL_DMA_IRQHandler+0xc62>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a14      	ldr	r2, [pc, #80]	@ (8008d7c <HAL_DMA_IRQHandler+0xcb0>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d128      	bne.n	8008d80 <HAL_DMA_IRQHandler+0xcb4>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	681a      	ldr	r2, [r3, #0]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f022 0214 	bic.w	r2, r2, #20
 8008d3c:	601a      	str	r2, [r3, #0]
 8008d3e:	e027      	b.n	8008d90 <HAL_DMA_IRQHandler+0xcc4>
 8008d40:	40020010 	.word	0x40020010
 8008d44:	40020028 	.word	0x40020028
 8008d48:	40020040 	.word	0x40020040
 8008d4c:	40020058 	.word	0x40020058
 8008d50:	40020070 	.word	0x40020070
 8008d54:	40020088 	.word	0x40020088
 8008d58:	400200a0 	.word	0x400200a0
 8008d5c:	400200b8 	.word	0x400200b8
 8008d60:	40020410 	.word	0x40020410
 8008d64:	40020428 	.word	0x40020428
 8008d68:	40020440 	.word	0x40020440
 8008d6c:	40020458 	.word	0x40020458
 8008d70:	40020470 	.word	0x40020470
 8008d74:	40020488 	.word	0x40020488
 8008d78:	400204a0 	.word	0x400204a0
 8008d7c:	400204b8 	.word	0x400204b8
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	681a      	ldr	r2, [r3, #0]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f022 020a 	bic.w	r2, r2, #10
 8008d8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f000 8097 	beq.w	8008ed8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008db2:	e091      	b.n	8008ed8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008db8:	f003 031f 	and.w	r3, r3, #31
 8008dbc:	2208      	movs	r2, #8
 8008dbe:	409a      	lsls	r2, r3
 8008dc0:	697b      	ldr	r3, [r7, #20]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	f000 8088 	beq.w	8008eda <HAL_DMA_IRQHandler+0xe0e>
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f003 0308 	and.w	r3, r3, #8
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 8082 	beq.w	8008eda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a41      	ldr	r2, [pc, #260]	@ (8008ee0 <HAL_DMA_IRQHandler+0xe14>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d04a      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a3f      	ldr	r2, [pc, #252]	@ (8008ee4 <HAL_DMA_IRQHandler+0xe18>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d045      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a3e      	ldr	r2, [pc, #248]	@ (8008ee8 <HAL_DMA_IRQHandler+0xe1c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d040      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a3c      	ldr	r2, [pc, #240]	@ (8008eec <HAL_DMA_IRQHandler+0xe20>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d03b      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a3b      	ldr	r2, [pc, #236]	@ (8008ef0 <HAL_DMA_IRQHandler+0xe24>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d036      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	4a39      	ldr	r2, [pc, #228]	@ (8008ef4 <HAL_DMA_IRQHandler+0xe28>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d031      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4a38      	ldr	r2, [pc, #224]	@ (8008ef8 <HAL_DMA_IRQHandler+0xe2c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d02c      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a36      	ldr	r2, [pc, #216]	@ (8008efc <HAL_DMA_IRQHandler+0xe30>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d027      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a35      	ldr	r2, [pc, #212]	@ (8008f00 <HAL_DMA_IRQHandler+0xe34>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d022      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a33      	ldr	r2, [pc, #204]	@ (8008f04 <HAL_DMA_IRQHandler+0xe38>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d01d      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a32      	ldr	r2, [pc, #200]	@ (8008f08 <HAL_DMA_IRQHandler+0xe3c>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d018      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a30      	ldr	r2, [pc, #192]	@ (8008f0c <HAL_DMA_IRQHandler+0xe40>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d013      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a2f      	ldr	r2, [pc, #188]	@ (8008f10 <HAL_DMA_IRQHandler+0xe44>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d00e      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a2d      	ldr	r2, [pc, #180]	@ (8008f14 <HAL_DMA_IRQHandler+0xe48>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d009      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a2c      	ldr	r2, [pc, #176]	@ (8008f18 <HAL_DMA_IRQHandler+0xe4c>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d004      	beq.n	8008e76 <HAL_DMA_IRQHandler+0xdaa>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a2a      	ldr	r2, [pc, #168]	@ (8008f1c <HAL_DMA_IRQHandler+0xe50>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d108      	bne.n	8008e88 <HAL_DMA_IRQHandler+0xdbc>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f022 021c 	bic.w	r2, r2, #28
 8008e84:	601a      	str	r2, [r3, #0]
 8008e86:	e007      	b.n	8008e98 <HAL_DMA_IRQHandler+0xdcc>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 020e 	bic.w	r2, r2, #14
 8008e96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008e9c:	f003 031f 	and.w	r3, r3, #31
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	409a      	lsls	r2, r3
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d009      	beq.n	8008eda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	4798      	blx	r3
 8008ece:	e004      	b.n	8008eda <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008ed0:	bf00      	nop
 8008ed2:	e002      	b.n	8008eda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ed4:	bf00      	nop
 8008ed6:	e000      	b.n	8008eda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008ed8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008eda:	3728      	adds	r7, #40	@ 0x28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	40020010 	.word	0x40020010
 8008ee4:	40020028 	.word	0x40020028
 8008ee8:	40020040 	.word	0x40020040
 8008eec:	40020058 	.word	0x40020058
 8008ef0:	40020070 	.word	0x40020070
 8008ef4:	40020088 	.word	0x40020088
 8008ef8:	400200a0 	.word	0x400200a0
 8008efc:	400200b8 	.word	0x400200b8
 8008f00:	40020410 	.word	0x40020410
 8008f04:	40020428 	.word	0x40020428
 8008f08:	40020440 	.word	0x40020440
 8008f0c:	40020458 	.word	0x40020458
 8008f10:	40020470 	.word	0x40020470
 8008f14:	40020488 	.word	0x40020488
 8008f18:	400204a0 	.word	0x400204a0
 8008f1c:	400204b8 	.word	0x400204b8

08008f20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
 8008f2c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f32:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f38:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a7f      	ldr	r2, [pc, #508]	@ (800913c <DMA_SetConfig+0x21c>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d072      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a7d      	ldr	r2, [pc, #500]	@ (8009140 <DMA_SetConfig+0x220>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d06d      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a7c      	ldr	r2, [pc, #496]	@ (8009144 <DMA_SetConfig+0x224>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d068      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a7a      	ldr	r2, [pc, #488]	@ (8009148 <DMA_SetConfig+0x228>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d063      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a79      	ldr	r2, [pc, #484]	@ (800914c <DMA_SetConfig+0x22c>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d05e      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a77      	ldr	r2, [pc, #476]	@ (8009150 <DMA_SetConfig+0x230>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d059      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a76      	ldr	r2, [pc, #472]	@ (8009154 <DMA_SetConfig+0x234>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d054      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a74      	ldr	r2, [pc, #464]	@ (8009158 <DMA_SetConfig+0x238>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d04f      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a73      	ldr	r2, [pc, #460]	@ (800915c <DMA_SetConfig+0x23c>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d04a      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a71      	ldr	r2, [pc, #452]	@ (8009160 <DMA_SetConfig+0x240>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d045      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a70      	ldr	r2, [pc, #448]	@ (8009164 <DMA_SetConfig+0x244>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d040      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a6e      	ldr	r2, [pc, #440]	@ (8009168 <DMA_SetConfig+0x248>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d03b      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a6d      	ldr	r2, [pc, #436]	@ (800916c <DMA_SetConfig+0x24c>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d036      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a6b      	ldr	r2, [pc, #428]	@ (8009170 <DMA_SetConfig+0x250>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d031      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a6a      	ldr	r2, [pc, #424]	@ (8009174 <DMA_SetConfig+0x254>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d02c      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a68      	ldr	r2, [pc, #416]	@ (8009178 <DMA_SetConfig+0x258>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d027      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a67      	ldr	r2, [pc, #412]	@ (800917c <DMA_SetConfig+0x25c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d022      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a65      	ldr	r2, [pc, #404]	@ (8009180 <DMA_SetConfig+0x260>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d01d      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a64      	ldr	r2, [pc, #400]	@ (8009184 <DMA_SetConfig+0x264>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d018      	beq.n	800902a <DMA_SetConfig+0x10a>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a62      	ldr	r2, [pc, #392]	@ (8009188 <DMA_SetConfig+0x268>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d013      	beq.n	800902a <DMA_SetConfig+0x10a>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a61      	ldr	r2, [pc, #388]	@ (800918c <DMA_SetConfig+0x26c>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00e      	beq.n	800902a <DMA_SetConfig+0x10a>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a5f      	ldr	r2, [pc, #380]	@ (8009190 <DMA_SetConfig+0x270>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d009      	beq.n	800902a <DMA_SetConfig+0x10a>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a5e      	ldr	r2, [pc, #376]	@ (8009194 <DMA_SetConfig+0x274>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d004      	beq.n	800902a <DMA_SetConfig+0x10a>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a5c      	ldr	r2, [pc, #368]	@ (8009198 <DMA_SetConfig+0x278>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d101      	bne.n	800902e <DMA_SetConfig+0x10e>
 800902a:	2301      	movs	r3, #1
 800902c:	e000      	b.n	8009030 <DMA_SetConfig+0x110>
 800902e:	2300      	movs	r3, #0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00d      	beq.n	8009050 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800903c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009042:	2b00      	cmp	r3, #0
 8009044:	d004      	beq.n	8009050 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800904e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4a39      	ldr	r2, [pc, #228]	@ (800913c <DMA_SetConfig+0x21c>)
 8009056:	4293      	cmp	r3, r2
 8009058:	d04a      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4a38      	ldr	r2, [pc, #224]	@ (8009140 <DMA_SetConfig+0x220>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d045      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a36      	ldr	r2, [pc, #216]	@ (8009144 <DMA_SetConfig+0x224>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d040      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a35      	ldr	r2, [pc, #212]	@ (8009148 <DMA_SetConfig+0x228>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d03b      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4a33      	ldr	r2, [pc, #204]	@ (800914c <DMA_SetConfig+0x22c>)
 800907e:	4293      	cmp	r3, r2
 8009080:	d036      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a32      	ldr	r2, [pc, #200]	@ (8009150 <DMA_SetConfig+0x230>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d031      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	4a30      	ldr	r2, [pc, #192]	@ (8009154 <DMA_SetConfig+0x234>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d02c      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a2f      	ldr	r2, [pc, #188]	@ (8009158 <DMA_SetConfig+0x238>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d027      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a2d      	ldr	r2, [pc, #180]	@ (800915c <DMA_SetConfig+0x23c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d022      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a2c      	ldr	r2, [pc, #176]	@ (8009160 <DMA_SetConfig+0x240>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d01d      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a2a      	ldr	r2, [pc, #168]	@ (8009164 <DMA_SetConfig+0x244>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d018      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a29      	ldr	r2, [pc, #164]	@ (8009168 <DMA_SetConfig+0x248>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d013      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a27      	ldr	r2, [pc, #156]	@ (800916c <DMA_SetConfig+0x24c>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d00e      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a26      	ldr	r2, [pc, #152]	@ (8009170 <DMA_SetConfig+0x250>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d009      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a24      	ldr	r2, [pc, #144]	@ (8009174 <DMA_SetConfig+0x254>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d004      	beq.n	80090f0 <DMA_SetConfig+0x1d0>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a23      	ldr	r2, [pc, #140]	@ (8009178 <DMA_SetConfig+0x258>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d101      	bne.n	80090f4 <DMA_SetConfig+0x1d4>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e000      	b.n	80090f6 <DMA_SetConfig+0x1d6>
 80090f4:	2300      	movs	r3, #0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d059      	beq.n	80091ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80090fe:	f003 031f 	and.w	r3, r3, #31
 8009102:	223f      	movs	r2, #63	@ 0x3f
 8009104:	409a      	lsls	r2, r3
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8009118:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	683a      	ldr	r2, [r7, #0]
 8009120:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	2b40      	cmp	r3, #64	@ 0x40
 8009128:	d138      	bne.n	800919c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	68ba      	ldr	r2, [r7, #8]
 8009138:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800913a:	e086      	b.n	800924a <DMA_SetConfig+0x32a>
 800913c:	40020010 	.word	0x40020010
 8009140:	40020028 	.word	0x40020028
 8009144:	40020040 	.word	0x40020040
 8009148:	40020058 	.word	0x40020058
 800914c:	40020070 	.word	0x40020070
 8009150:	40020088 	.word	0x40020088
 8009154:	400200a0 	.word	0x400200a0
 8009158:	400200b8 	.word	0x400200b8
 800915c:	40020410 	.word	0x40020410
 8009160:	40020428 	.word	0x40020428
 8009164:	40020440 	.word	0x40020440
 8009168:	40020458 	.word	0x40020458
 800916c:	40020470 	.word	0x40020470
 8009170:	40020488 	.word	0x40020488
 8009174:	400204a0 	.word	0x400204a0
 8009178:	400204b8 	.word	0x400204b8
 800917c:	58025408 	.word	0x58025408
 8009180:	5802541c 	.word	0x5802541c
 8009184:	58025430 	.word	0x58025430
 8009188:	58025444 	.word	0x58025444
 800918c:	58025458 	.word	0x58025458
 8009190:	5802546c 	.word	0x5802546c
 8009194:	58025480 	.word	0x58025480
 8009198:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68ba      	ldr	r2, [r7, #8]
 80091a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	60da      	str	r2, [r3, #12]
}
 80091ac:	e04d      	b.n	800924a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4a29      	ldr	r2, [pc, #164]	@ (8009258 <DMA_SetConfig+0x338>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d022      	beq.n	80091fe <DMA_SetConfig+0x2de>
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a27      	ldr	r2, [pc, #156]	@ (800925c <DMA_SetConfig+0x33c>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d01d      	beq.n	80091fe <DMA_SetConfig+0x2de>
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a26      	ldr	r2, [pc, #152]	@ (8009260 <DMA_SetConfig+0x340>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d018      	beq.n	80091fe <DMA_SetConfig+0x2de>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a24      	ldr	r2, [pc, #144]	@ (8009264 <DMA_SetConfig+0x344>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d013      	beq.n	80091fe <DMA_SetConfig+0x2de>
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a23      	ldr	r2, [pc, #140]	@ (8009268 <DMA_SetConfig+0x348>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d00e      	beq.n	80091fe <DMA_SetConfig+0x2de>
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a21      	ldr	r2, [pc, #132]	@ (800926c <DMA_SetConfig+0x34c>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d009      	beq.n	80091fe <DMA_SetConfig+0x2de>
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a20      	ldr	r2, [pc, #128]	@ (8009270 <DMA_SetConfig+0x350>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d004      	beq.n	80091fe <DMA_SetConfig+0x2de>
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a1e      	ldr	r2, [pc, #120]	@ (8009274 <DMA_SetConfig+0x354>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d101      	bne.n	8009202 <DMA_SetConfig+0x2e2>
 80091fe:	2301      	movs	r3, #1
 8009200:	e000      	b.n	8009204 <DMA_SetConfig+0x2e4>
 8009202:	2300      	movs	r3, #0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d020      	beq.n	800924a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800920c:	f003 031f 	and.w	r3, r3, #31
 8009210:	2201      	movs	r2, #1
 8009212:	409a      	lsls	r2, r3
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2b40      	cmp	r3, #64	@ 0x40
 8009226:	d108      	bne.n	800923a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68ba      	ldr	r2, [r7, #8]
 8009236:	60da      	str	r2, [r3, #12]
}
 8009238:	e007      	b.n	800924a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68ba      	ldr	r2, [r7, #8]
 8009240:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	60da      	str	r2, [r3, #12]
}
 800924a:	bf00      	nop
 800924c:	371c      	adds	r7, #28
 800924e:	46bd      	mov	sp, r7
 8009250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009254:	4770      	bx	lr
 8009256:	bf00      	nop
 8009258:	58025408 	.word	0x58025408
 800925c:	5802541c 	.word	0x5802541c
 8009260:	58025430 	.word	0x58025430
 8009264:	58025444 	.word	0x58025444
 8009268:	58025458 	.word	0x58025458
 800926c:	5802546c 	.word	0x5802546c
 8009270:	58025480 	.word	0x58025480
 8009274:	58025494 	.word	0x58025494

08009278 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a42      	ldr	r2, [pc, #264]	@ (8009390 <DMA_CalcBaseAndBitshift+0x118>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d04a      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a41      	ldr	r2, [pc, #260]	@ (8009394 <DMA_CalcBaseAndBitshift+0x11c>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d045      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a3f      	ldr	r2, [pc, #252]	@ (8009398 <DMA_CalcBaseAndBitshift+0x120>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d040      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a3e      	ldr	r2, [pc, #248]	@ (800939c <DMA_CalcBaseAndBitshift+0x124>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d03b      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a3c      	ldr	r2, [pc, #240]	@ (80093a0 <DMA_CalcBaseAndBitshift+0x128>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d036      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a3b      	ldr	r2, [pc, #236]	@ (80093a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d031      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a39      	ldr	r2, [pc, #228]	@ (80093a8 <DMA_CalcBaseAndBitshift+0x130>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d02c      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a38      	ldr	r2, [pc, #224]	@ (80093ac <DMA_CalcBaseAndBitshift+0x134>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d027      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	4a36      	ldr	r2, [pc, #216]	@ (80093b0 <DMA_CalcBaseAndBitshift+0x138>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d022      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a35      	ldr	r2, [pc, #212]	@ (80093b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d01d      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a33      	ldr	r2, [pc, #204]	@ (80093b8 <DMA_CalcBaseAndBitshift+0x140>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d018      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a32      	ldr	r2, [pc, #200]	@ (80093bc <DMA_CalcBaseAndBitshift+0x144>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d013      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4a30      	ldr	r2, [pc, #192]	@ (80093c0 <DMA_CalcBaseAndBitshift+0x148>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d00e      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a2f      	ldr	r2, [pc, #188]	@ (80093c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8009308:	4293      	cmp	r3, r2
 800930a:	d009      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a2d      	ldr	r2, [pc, #180]	@ (80093c8 <DMA_CalcBaseAndBitshift+0x150>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d004      	beq.n	8009320 <DMA_CalcBaseAndBitshift+0xa8>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a2c      	ldr	r2, [pc, #176]	@ (80093cc <DMA_CalcBaseAndBitshift+0x154>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d101      	bne.n	8009324 <DMA_CalcBaseAndBitshift+0xac>
 8009320:	2301      	movs	r3, #1
 8009322:	e000      	b.n	8009326 <DMA_CalcBaseAndBitshift+0xae>
 8009324:	2300      	movs	r3, #0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d024      	beq.n	8009374 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	3b10      	subs	r3, #16
 8009332:	4a27      	ldr	r2, [pc, #156]	@ (80093d0 <DMA_CalcBaseAndBitshift+0x158>)
 8009334:	fba2 2303 	umull	r2, r3, r2, r3
 8009338:	091b      	lsrs	r3, r3, #4
 800933a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f003 0307 	and.w	r3, r3, #7
 8009342:	4a24      	ldr	r2, [pc, #144]	@ (80093d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8009344:	5cd3      	ldrb	r3, [r2, r3]
 8009346:	461a      	mov	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2b03      	cmp	r3, #3
 8009350:	d908      	bls.n	8009364 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	461a      	mov	r2, r3
 8009358:	4b1f      	ldr	r3, [pc, #124]	@ (80093d8 <DMA_CalcBaseAndBitshift+0x160>)
 800935a:	4013      	ands	r3, r2
 800935c:	1d1a      	adds	r2, r3, #4
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	659a      	str	r2, [r3, #88]	@ 0x58
 8009362:	e00d      	b.n	8009380 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	461a      	mov	r2, r3
 800936a:	4b1b      	ldr	r3, [pc, #108]	@ (80093d8 <DMA_CalcBaseAndBitshift+0x160>)
 800936c:	4013      	ands	r3, r2
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	6593      	str	r3, [r2, #88]	@ 0x58
 8009372:	e005      	b.n	8009380 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr
 8009390:	40020010 	.word	0x40020010
 8009394:	40020028 	.word	0x40020028
 8009398:	40020040 	.word	0x40020040
 800939c:	40020058 	.word	0x40020058
 80093a0:	40020070 	.word	0x40020070
 80093a4:	40020088 	.word	0x40020088
 80093a8:	400200a0 	.word	0x400200a0
 80093ac:	400200b8 	.word	0x400200b8
 80093b0:	40020410 	.word	0x40020410
 80093b4:	40020428 	.word	0x40020428
 80093b8:	40020440 	.word	0x40020440
 80093bc:	40020458 	.word	0x40020458
 80093c0:	40020470 	.word	0x40020470
 80093c4:	40020488 	.word	0x40020488
 80093c8:	400204a0 	.word	0x400204a0
 80093cc:	400204b8 	.word	0x400204b8
 80093d0:	aaaaaaab 	.word	0xaaaaaaab
 80093d4:	080142a8 	.word	0x080142a8
 80093d8:	fffffc00 	.word	0xfffffc00

080093dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093e4:	2300      	movs	r3, #0
 80093e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	699b      	ldr	r3, [r3, #24]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d120      	bne.n	8009432 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d858      	bhi.n	80094aa <DMA_CheckFifoParam+0xce>
 80093f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009400 <DMA_CheckFifoParam+0x24>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	08009411 	.word	0x08009411
 8009404:	08009423 	.word	0x08009423
 8009408:	08009411 	.word	0x08009411
 800940c:	080094ab 	.word	0x080094ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d048      	beq.n	80094ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009420:	e045      	b.n	80094ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009426:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800942a:	d142      	bne.n	80094b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009430:	e03f      	b.n	80094b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	699b      	ldr	r3, [r3, #24]
 8009436:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800943a:	d123      	bne.n	8009484 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009440:	2b03      	cmp	r3, #3
 8009442:	d838      	bhi.n	80094b6 <DMA_CheckFifoParam+0xda>
 8009444:	a201      	add	r2, pc, #4	@ (adr r2, 800944c <DMA_CheckFifoParam+0x70>)
 8009446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944a:	bf00      	nop
 800944c:	0800945d 	.word	0x0800945d
 8009450:	08009463 	.word	0x08009463
 8009454:	0800945d 	.word	0x0800945d
 8009458:	08009475 	.word	0x08009475
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	73fb      	strb	r3, [r7, #15]
        break;
 8009460:	e030      	b.n	80094c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009466:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800946a:	2b00      	cmp	r3, #0
 800946c:	d025      	beq.n	80094ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800946e:	2301      	movs	r3, #1
 8009470:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009472:	e022      	b.n	80094ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009478:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800947c:	d11f      	bne.n	80094be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009482:	e01c      	b.n	80094be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009488:	2b02      	cmp	r3, #2
 800948a:	d902      	bls.n	8009492 <DMA_CheckFifoParam+0xb6>
 800948c:	2b03      	cmp	r3, #3
 800948e:	d003      	beq.n	8009498 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009490:	e018      	b.n	80094c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	73fb      	strb	r3, [r7, #15]
        break;
 8009496:	e015      	b.n	80094c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800949c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d00e      	beq.n	80094c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	73fb      	strb	r3, [r7, #15]
    break;
 80094a8:	e00b      	b.n	80094c2 <DMA_CheckFifoParam+0xe6>
        break;
 80094aa:	bf00      	nop
 80094ac:	e00a      	b.n	80094c4 <DMA_CheckFifoParam+0xe8>
        break;
 80094ae:	bf00      	nop
 80094b0:	e008      	b.n	80094c4 <DMA_CheckFifoParam+0xe8>
        break;
 80094b2:	bf00      	nop
 80094b4:	e006      	b.n	80094c4 <DMA_CheckFifoParam+0xe8>
        break;
 80094b6:	bf00      	nop
 80094b8:	e004      	b.n	80094c4 <DMA_CheckFifoParam+0xe8>
        break;
 80094ba:	bf00      	nop
 80094bc:	e002      	b.n	80094c4 <DMA_CheckFifoParam+0xe8>
        break;
 80094be:	bf00      	nop
 80094c0:	e000      	b.n	80094c4 <DMA_CheckFifoParam+0xe8>
    break;
 80094c2:	bf00      	nop
    }
  }

  return status;
 80094c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3714      	adds	r7, #20
 80094ca:	46bd      	mov	sp, r7
 80094cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d0:	4770      	bx	lr
 80094d2:	bf00      	nop

080094d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a38      	ldr	r2, [pc, #224]	@ (80095c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d022      	beq.n	8009532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a36      	ldr	r2, [pc, #216]	@ (80095cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d01d      	beq.n	8009532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a35      	ldr	r2, [pc, #212]	@ (80095d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d018      	beq.n	8009532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a33      	ldr	r2, [pc, #204]	@ (80095d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d013      	beq.n	8009532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a32      	ldr	r2, [pc, #200]	@ (80095d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d00e      	beq.n	8009532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a30      	ldr	r2, [pc, #192]	@ (80095dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d009      	beq.n	8009532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a2f      	ldr	r2, [pc, #188]	@ (80095e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d004      	beq.n	8009532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a2d      	ldr	r2, [pc, #180]	@ (80095e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d101      	bne.n	8009536 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009532:	2301      	movs	r3, #1
 8009534:	e000      	b.n	8009538 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009536:	2300      	movs	r3, #0
 8009538:	2b00      	cmp	r3, #0
 800953a:	d01a      	beq.n	8009572 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	b2db      	uxtb	r3, r3
 8009542:	3b08      	subs	r3, #8
 8009544:	4a28      	ldr	r2, [pc, #160]	@ (80095e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009546:	fba2 2303 	umull	r2, r3, r2, r3
 800954a:	091b      	lsrs	r3, r3, #4
 800954c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4b26      	ldr	r3, [pc, #152]	@ (80095ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	461a      	mov	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a24      	ldr	r2, [pc, #144]	@ (80095f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009560:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	f003 031f 	and.w	r3, r3, #31
 8009568:	2201      	movs	r2, #1
 800956a:	409a      	lsls	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009570:	e024      	b.n	80095bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	3b10      	subs	r3, #16
 800957a:	4a1e      	ldr	r2, [pc, #120]	@ (80095f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800957c:	fba2 2303 	umull	r2, r3, r2, r3
 8009580:	091b      	lsrs	r3, r3, #4
 8009582:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	4a1c      	ldr	r2, [pc, #112]	@ (80095f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009588:	4293      	cmp	r3, r2
 800958a:	d806      	bhi.n	800959a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	4a1b      	ldr	r2, [pc, #108]	@ (80095fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d902      	bls.n	800959a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3308      	adds	r3, #8
 8009598:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800959a:	68fa      	ldr	r2, [r7, #12]
 800959c:	4b18      	ldr	r3, [pc, #96]	@ (8009600 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800959e:	4413      	add	r3, r2
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	461a      	mov	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a16      	ldr	r2, [pc, #88]	@ (8009604 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80095ac:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	f003 031f 	and.w	r3, r3, #31
 80095b4:	2201      	movs	r2, #1
 80095b6:	409a      	lsls	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80095bc:	bf00      	nop
 80095be:	3714      	adds	r7, #20
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	58025408 	.word	0x58025408
 80095cc:	5802541c 	.word	0x5802541c
 80095d0:	58025430 	.word	0x58025430
 80095d4:	58025444 	.word	0x58025444
 80095d8:	58025458 	.word	0x58025458
 80095dc:	5802546c 	.word	0x5802546c
 80095e0:	58025480 	.word	0x58025480
 80095e4:	58025494 	.word	0x58025494
 80095e8:	cccccccd 	.word	0xcccccccd
 80095ec:	16009600 	.word	0x16009600
 80095f0:	58025880 	.word	0x58025880
 80095f4:	aaaaaaab 	.word	0xaaaaaaab
 80095f8:	400204b8 	.word	0x400204b8
 80095fc:	4002040f 	.word	0x4002040f
 8009600:	10008200 	.word	0x10008200
 8009604:	40020880 	.word	0x40020880

08009608 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009608:	b480      	push	{r7}
 800960a:	b085      	sub	sp, #20
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	b2db      	uxtb	r3, r3
 8009616:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d04a      	beq.n	80096b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2b08      	cmp	r3, #8
 8009622:	d847      	bhi.n	80096b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a25      	ldr	r2, [pc, #148]	@ (80096c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d022      	beq.n	8009674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a24      	ldr	r2, [pc, #144]	@ (80096c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d01d      	beq.n	8009674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a22      	ldr	r2, [pc, #136]	@ (80096c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d018      	beq.n	8009674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a21      	ldr	r2, [pc, #132]	@ (80096cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d013      	beq.n	8009674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a1f      	ldr	r2, [pc, #124]	@ (80096d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d00e      	beq.n	8009674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a1e      	ldr	r2, [pc, #120]	@ (80096d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d009      	beq.n	8009674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a1c      	ldr	r2, [pc, #112]	@ (80096d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d004      	beq.n	8009674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a1b      	ldr	r2, [pc, #108]	@ (80096dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d101      	bne.n	8009678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009674:	2301      	movs	r3, #1
 8009676:	e000      	b.n	800967a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009678:	2300      	movs	r3, #0
 800967a:	2b00      	cmp	r3, #0
 800967c:	d00a      	beq.n	8009694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	4b17      	ldr	r3, [pc, #92]	@ (80096e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009682:	4413      	add	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	461a      	mov	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	4a15      	ldr	r2, [pc, #84]	@ (80096e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009690:	671a      	str	r2, [r3, #112]	@ 0x70
 8009692:	e009      	b.n	80096a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	4b14      	ldr	r3, [pc, #80]	@ (80096e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009698:	4413      	add	r3, r2
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	461a      	mov	r2, r3
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	4a11      	ldr	r2, [pc, #68]	@ (80096ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80096a6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3b01      	subs	r3, #1
 80096ac:	2201      	movs	r2, #1
 80096ae:	409a      	lsls	r2, r3
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80096b4:	bf00      	nop
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr
 80096c0:	58025408 	.word	0x58025408
 80096c4:	5802541c 	.word	0x5802541c
 80096c8:	58025430 	.word	0x58025430
 80096cc:	58025444 	.word	0x58025444
 80096d0:	58025458 	.word	0x58025458
 80096d4:	5802546c 	.word	0x5802546c
 80096d8:	58025480 	.word	0x58025480
 80096dc:	58025494 	.word	0x58025494
 80096e0:	1600963f 	.word	0x1600963f
 80096e4:	58025940 	.word	0x58025940
 80096e8:	1000823f 	.word	0x1000823f
 80096ec:	40020940 	.word	0x40020940

080096f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b098      	sub	sp, #96	@ 0x60
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80096f8:	4a84      	ldr	r2, [pc, #528]	@ (800990c <HAL_FDCAN_Init+0x21c>)
 80096fa:	f107 030c 	add.w	r3, r7, #12
 80096fe:	4611      	mov	r1, r2
 8009700:	224c      	movs	r2, #76	@ 0x4c
 8009702:	4618      	mov	r0, r3
 8009704:	f00a f802 	bl	801370c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d101      	bne.n	8009712 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800970e:	2301      	movs	r3, #1
 8009710:	e1c6      	b.n	8009aa0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	4a7e      	ldr	r2, [pc, #504]	@ (8009910 <HAL_FDCAN_Init+0x220>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d106      	bne.n	800972a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8009724:	461a      	mov	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009730:	b2db      	uxtb	r3, r3
 8009732:	2b00      	cmp	r3, #0
 8009734:	d106      	bne.n	8009744 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f7f9 ff56 	bl	80035f0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	699a      	ldr	r2, [r3, #24]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0210 	bic.w	r2, r2, #16
 8009752:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009754:	f7fb f924 	bl	80049a0 <HAL_GetTick>
 8009758:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800975a:	e014      	b.n	8009786 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800975c:	f7fb f920 	bl	80049a0 <HAL_GetTick>
 8009760:	4602      	mov	r2, r0
 8009762:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009764:	1ad3      	subs	r3, r2, r3
 8009766:	2b0a      	cmp	r3, #10
 8009768:	d90d      	bls.n	8009786 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009770:	f043 0201 	orr.w	r2, r3, #1
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2203      	movs	r2, #3
 800977e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e18c      	b.n	8009aa0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	699b      	ldr	r3, [r3, #24]
 800978c:	f003 0308 	and.w	r3, r3, #8
 8009790:	2b08      	cmp	r3, #8
 8009792:	d0e3      	beq.n	800975c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	699a      	ldr	r2, [r3, #24]
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	f042 0201 	orr.w	r2, r2, #1
 80097a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80097a4:	f7fb f8fc 	bl	80049a0 <HAL_GetTick>
 80097a8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80097aa:	e014      	b.n	80097d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80097ac:	f7fb f8f8 	bl	80049a0 <HAL_GetTick>
 80097b0:	4602      	mov	r2, r0
 80097b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	2b0a      	cmp	r3, #10
 80097b8:	d90d      	bls.n	80097d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097c0:	f043 0201 	orr.w	r2, r3, #1
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2203      	movs	r2, #3
 80097ce:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e164      	b.n	8009aa0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	699b      	ldr	r3, [r3, #24]
 80097dc:	f003 0301 	and.w	r3, r3, #1
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d0e3      	beq.n	80097ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699a      	ldr	r2, [r3, #24]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f042 0202 	orr.w	r2, r2, #2
 80097f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	7c1b      	ldrb	r3, [r3, #16]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d108      	bne.n	800980e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	699a      	ldr	r2, [r3, #24]
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800980a:	619a      	str	r2, [r3, #24]
 800980c:	e007      	b.n	800981e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	699a      	ldr	r2, [r3, #24]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800981c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	7c5b      	ldrb	r3, [r3, #17]
 8009822:	2b01      	cmp	r3, #1
 8009824:	d108      	bne.n	8009838 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	699a      	ldr	r2, [r3, #24]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009834:	619a      	str	r2, [r3, #24]
 8009836:	e007      	b.n	8009848 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	699a      	ldr	r2, [r3, #24]
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009846:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7c9b      	ldrb	r3, [r3, #18]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d108      	bne.n	8009862 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	699a      	ldr	r2, [r3, #24]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800985e:	619a      	str	r2, [r3, #24]
 8009860:	e007      	b.n	8009872 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	699a      	ldr	r2, [r3, #24]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009870:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	699b      	ldr	r3, [r3, #24]
 8009878:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	689a      	ldr	r2, [r3, #8]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8009896:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	691a      	ldr	r2, [r3, #16]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f022 0210 	bic.w	r2, r2, #16
 80098a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d108      	bne.n	80098c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	699a      	ldr	r2, [r3, #24]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f042 0204 	orr.w	r2, r2, #4
 80098be:	619a      	str	r2, [r3, #24]
 80098c0:	e030      	b.n	8009924 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d02c      	beq.n	8009924 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	2b02      	cmp	r3, #2
 80098d0:	d020      	beq.n	8009914 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	699a      	ldr	r2, [r3, #24]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80098e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	691a      	ldr	r2, [r3, #16]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f042 0210 	orr.w	r2, r2, #16
 80098f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	2b03      	cmp	r3, #3
 80098f8:	d114      	bne.n	8009924 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	699a      	ldr	r2, [r3, #24]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f042 0220 	orr.w	r2, r2, #32
 8009908:	619a      	str	r2, [r3, #24]
 800990a:	e00b      	b.n	8009924 <HAL_FDCAN_Init+0x234>
 800990c:	08014244 	.word	0x08014244
 8009910:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	699a      	ldr	r2, [r3, #24]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0220 	orr.w	r2, r2, #32
 8009922:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	699b      	ldr	r3, [r3, #24]
 8009928:	3b01      	subs	r3, #1
 800992a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	69db      	ldr	r3, [r3, #28]
 8009930:	3b01      	subs	r3, #1
 8009932:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009934:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800993c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	3b01      	subs	r3, #1
 8009946:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800994c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800994e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009958:	d115      	bne.n	8009986 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800995e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009964:	3b01      	subs	r3, #1
 8009966:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009968:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800996e:	3b01      	subs	r3, #1
 8009970:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009972:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800997a:	3b01      	subs	r3, #1
 800997c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009982:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009984:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	430a      	orrs	r2, r1
 80099a0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80099ac:	4413      	add	r3, r2
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d011      	beq.n	80099d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80099ba:	f023 0107 	bic.w	r1, r3, #7
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	3360      	adds	r3, #96	@ 0x60
 80099c6:	443b      	add	r3, r7
 80099c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	430a      	orrs	r2, r1
 80099d2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d011      	beq.n	8009a02 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80099e6:	f023 0107 	bic.w	r1, r3, #7
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	3360      	adds	r3, #96	@ 0x60
 80099f2:	443b      	add	r3, r7
 80099f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	430a      	orrs	r2, r1
 80099fe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d012      	beq.n	8009a30 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009a12:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a1a:	009b      	lsls	r3, r3, #2
 8009a1c:	3360      	adds	r3, #96	@ 0x60
 8009a1e:	443b      	add	r3, r7
 8009a20:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009a24:	011a      	lsls	r2, r3, #4
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	430a      	orrs	r2, r1
 8009a2c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d012      	beq.n	8009a5e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009a40:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	3360      	adds	r3, #96	@ 0x60
 8009a4c:	443b      	add	r3, r7
 8009a4e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009a52:	021a      	lsls	r2, r3, #8
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	4a11      	ldr	r2, [pc, #68]	@ (8009aa8 <HAL_FDCAN_Init+0x3b8>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d107      	bne.n	8009a78 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	689a      	ldr	r2, [r3, #8]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f022 0203 	bic.w	r2, r2, #3
 8009a76:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 fe71 	bl	800a778 <FDCAN_CalcultateRamBlockAddresses>
 8009a96:	4603      	mov	r3, r0
 8009a98:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 8009a9c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3760      	adds	r7, #96	@ 0x60
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	4000a000 	.word	0x4000a000

08009aac <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009abc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d002      	beq.n	8009aca <HAL_FDCAN_ConfigFilter+0x1e>
 8009ac4:	7bfb      	ldrb	r3, [r7, #15]
 8009ac6:	2b02      	cmp	r3, #2
 8009ac8:	d157      	bne.n	8009b7a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d12b      	bne.n	8009b2a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	2b07      	cmp	r3, #7
 8009ad8:	d10d      	bne.n	8009af6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	69db      	ldr	r3, [r3, #28]
 8009ae4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8009ae6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8009aec:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8009aee:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8009af2:	617b      	str	r3, [r7, #20]
 8009af4:	e00e      	b.n	8009b14 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8009b02:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	691b      	ldr	r3, [r3, #16]
 8009b08:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8009b0a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8009b10:	4313      	orrs	r3, r2
 8009b12:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009b18:	683b      	ldr	r3, [r7, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	e025      	b.n	8009b76 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	68db      	ldr	r3, [r3, #12]
 8009b2e:	075a      	lsls	r2, r3, #29
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	68db      	ldr	r3, [r3, #12]
 8009b3c:	2b07      	cmp	r3, #7
 8009b3e:	d103      	bne.n	8009b48 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	699b      	ldr	r3, [r3, #24]
 8009b44:	613b      	str	r3, [r7, #16]
 8009b46:	e006      	b.n	8009b56 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	079a      	lsls	r2, r3, #30
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	695b      	ldr	r3, [r3, #20]
 8009b52:	4313      	orrs	r3, r2
 8009b54:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	00db      	lsls	r3, r3, #3
 8009b60:	4413      	add	r3, r2
 8009b62:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	3304      	adds	r3, #4
 8009b6e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	693a      	ldr	r2, [r7, #16]
 8009b74:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	e008      	b.n	8009b8c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b80:	f043 0202 	orr.w	r2, r3, #2
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
  }
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	371c      	adds	r7, #28
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d110      	bne.n	8009bd4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8009bba:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8009bc0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8009bc8:	69ba      	ldr	r2, [r7, #24]
 8009bca:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8009bcc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	e008      	b.n	8009be6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009bda:	f043 0204 	orr.w	r2, r3, #4
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
  }
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3714      	adds	r7, #20
 8009bea:	46bd      	mov	sp, r7
 8009bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf0:	4770      	bx	lr

08009bf2 <HAL_FDCAN_ConfigFifoWatermark>:
  *           - 0 and 32, if FIFO is FDCAN_CFG_TX_EVENT_FIFO
  *           - 0 and 64, if FIFO is FDCAN_CFG_RX_FIFO0 or FDCAN_CFG_RX_FIFO1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFifoWatermark(FDCAN_HandleTypeDef *hfdcan, uint32_t FIFO, uint32_t Watermark)
{
 8009bf2:	b480      	push	{r7}
 8009bf4:	b085      	sub	sp, #20
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	60f8      	str	r0, [r7, #12]
 8009bfa:	60b9      	str	r1, [r7, #8]
 8009bfc:	607a      	str	r2, [r7, #4]
  else /* (FIFO == FDCAN_CFG_RX_FIFO0) || (FIFO == FDCAN_CFG_RX_FIFO1) */
  {
    assert_param(IS_FDCAN_MAX_VALUE(Watermark, 64U));
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d130      	bne.n	8009c6c <HAL_FDCAN_ConfigFifoWatermark+0x7a>
  {
    /* Set the level for FIFO watermark interrupt */
    if (FIFO == FDCAN_CFG_TX_EVENT_FIFO)
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10d      	bne.n	8009c2c <HAL_FDCAN_ConfigFifoWatermark+0x3a>
    {
      MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFWM, (Watermark << FDCAN_TXEFC_EFWM_Pos));
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009c18:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	061a      	lsls	r2, r3, #24
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	430a      	orrs	r2, r1
 8009c26:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8009c2a:	e01d      	b.n	8009c68 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else if (FIFO == FDCAN_CFG_RX_FIFO0)
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d10d      	bne.n	8009c4e <HAL_FDCAN_ConfigFifoWatermark+0x5c>
    {
      MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0WM, (Watermark << FDCAN_RXF0C_F0WM_Pos));
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c3a:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	061a      	lsls	r2, r3, #24
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	430a      	orrs	r2, r1
 8009c48:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8009c4c:	e00c      	b.n	8009c68 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else /* FIFO == FDCAN_CFG_RX_FIFO1 */
    {
      MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1WM, (Watermark << FDCAN_RXF1C_F1WM_Pos));
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009c56:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	061a      	lsls	r2, r3, #24
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	430a      	orrs	r2, r1
 8009c64:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    }

    /* Return function status */
    return HAL_OK;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	e008      	b.n	8009c7e <HAL_FDCAN_ConfigFifoWatermark+0x8c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c72:	f043 0204 	orr.w	r2, r3, #4
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009c7c:	2301      	movs	r3, #1
  }
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3714      	adds	r7, #20
 8009c82:	46bd      	mov	sp, r7
 8009c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c88:	4770      	bx	lr

08009c8a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8009c8a:	b480      	push	{r7}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d111      	bne.n	8009cc2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2202      	movs	r2, #2
 8009ca2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	699a      	ldr	r2, [r3, #24]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f022 0201 	bic.w	r2, r2, #1
 8009cb4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	e008      	b.n	8009cd4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009cc8:	f043 0204 	orr.w	r2, r3, #4
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009cd2:	2301      	movs	r3, #1
  }
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	370c      	adds	r7, #12
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009cf2:	b2db      	uxtb	r3, r3
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d141      	bne.n	8009d7c <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009d00:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d109      	bne.n	8009d1c <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d0e:	f043 0220 	orr.w	r2, r3, #32
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e038      	b.n	8009d8e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009d24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d009      	beq.n	8009d40 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d32:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	e026      	b.n	8009d8e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009d48:	0c1b      	lsrs	r3, r3, #16
 8009d4a:	f003 031f 	and.w	r3, r3, #31
 8009d4e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	68b9      	ldr	r1, [r7, #8]
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 fe94 	bl	800aa84 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2101      	movs	r1, #1
 8009d62:	697a      	ldr	r2, [r7, #20]
 8009d64:	fa01 f202 	lsl.w	r2, r1, r2
 8009d68:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	409a      	lsls	r2, r3
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8009d78:	2300      	movs	r3, #0
 8009d7a:	e008      	b.n	8009d8e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009d82:	f043 0208 	orr.w	r2, r3, #8
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
  }
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3718      	adds	r7, #24
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
	...

08009d98 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b08b      	sub	sp, #44	@ 0x2c
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	60f8      	str	r0, [r7, #12]
 8009da0:	60b9      	str	r1, [r7, #8]
 8009da2:	607a      	str	r2, [r7, #4]
 8009da4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009db0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8009db2:	7efb      	ldrb	r3, [r7, #27]
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	f040 8149 	bne.w	800a04c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009dba:	68bb      	ldr	r3, [r7, #8]
 8009dbc:	2b40      	cmp	r3, #64	@ 0x40
 8009dbe:	d14c      	bne.n	8009e5a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009dc8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d109      	bne.n	8009de4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009dd6:	f043 0220 	orr.w	r2, r3, #32
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009de0:	2301      	movs	r3, #1
 8009de2:	e13c      	b.n	800a05e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009dec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d109      	bne.n	8009e08 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009dfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009e04:	2301      	movs	r3, #1
 8009e06:	e12a      	b.n	800a05e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e10:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009e18:	d10a      	bne.n	8009e30 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e2a:	d101      	bne.n	8009e30 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e38:	0a1b      	lsrs	r3, r3, #8
 8009e3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009e3e:	69fa      	ldr	r2, [r7, #28]
 8009e40:	4413      	add	r3, r2
 8009e42:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e4c:	69f9      	ldr	r1, [r7, #28]
 8009e4e:	fb01 f303 	mul.w	r3, r1, r3
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	4413      	add	r3, r2
 8009e56:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e58:	e068      	b.n	8009f2c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	2b41      	cmp	r3, #65	@ 0x41
 8009e5e:	d14c      	bne.n	8009efa <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009e68:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d109      	bne.n	8009e84 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e76:	f043 0220 	orr.w	r2, r3, #32
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009e80:	2301      	movs	r3, #1
 8009e82:	e0ec      	b.n	800a05e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009e8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d109      	bne.n	8009ea8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e9a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e0da      	b.n	800a05e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009eb0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009eb8:	d10a      	bne.n	8009ed0 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009ec2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009eca:	d101      	bne.n	8009ed0 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009ed8:	0a1b      	lsrs	r3, r3, #8
 8009eda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009ede:	69fa      	ldr	r2, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eec:	69f9      	ldr	r1, [r7, #28]
 8009eee:	fb01 f303 	mul.w	r3, r1, r3
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4413      	add	r3, r2
 8009ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ef8:	e018      	b.n	8009f2c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d309      	bcc.n	8009f18 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009f0a:	f043 0220 	orr.w	r2, r3, #32
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009f14:	2301      	movs	r3, #1
 8009f16:	e0a2      	b.n	800a05e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f20:	68b9      	ldr	r1, [r7, #8]
 8009f22:	fb01 f303 	mul.w	r3, r1, r3
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8009f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d107      	bne.n	8009f50 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8009f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	0c9b      	lsrs	r3, r3, #18
 8009f46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	e005      	b.n	8009f5c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8009f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8009f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f76:	3304      	adds	r3, #4
 8009f78:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8009f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	0c1b      	lsrs	r3, r3, #16
 8009f8a:	f003 020f 	and.w	r2, r3, #15
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8009faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	0e1b      	lsrs	r3, r3, #24
 8009fb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	0fda      	lsrs	r2, r3, #31
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8009fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fca:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009fcc:	2300      	movs	r3, #0
 8009fce:	623b      	str	r3, [r7, #32]
 8009fd0:	e00a      	b.n	8009fe8 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009fd2:	697a      	ldr	r2, [r7, #20]
 8009fd4:	6a3b      	ldr	r3, [r7, #32]
 8009fd6:	441a      	add	r2, r3
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	440b      	add	r3, r1
 8009fde:	7812      	ldrb	r2, [r2, #0]
 8009fe0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8009fe2:	6a3b      	ldr	r3, [r7, #32]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	623b      	str	r3, [r7, #32]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	4a1f      	ldr	r2, [pc, #124]	@ (800a06c <HAL_FDCAN_GetRxMessage+0x2d4>)
 8009fee:	5cd3      	ldrb	r3, [r2, r3]
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	6a3b      	ldr	r3, [r7, #32]
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d3ec      	bcc.n	8009fd2 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b40      	cmp	r3, #64	@ 0x40
 8009ffc:	d105      	bne.n	800a00a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	69fa      	ldr	r2, [r7, #28]
 800a004:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 800a008:	e01e      	b.n	800a048 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	2b41      	cmp	r3, #65	@ 0x41
 800a00e:	d105      	bne.n	800a01c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	69fa      	ldr	r2, [r7, #28]
 800a016:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800a01a:	e015      	b.n	800a048 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b1f      	cmp	r3, #31
 800a020:	d808      	bhi.n	800a034 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2101      	movs	r1, #1
 800a028:	68ba      	ldr	r2, [r7, #8]
 800a02a:	fa01 f202 	lsl.w	r2, r1, r2
 800a02e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800a032:	e009      	b.n	800a048 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	f003 021f 	and.w	r2, r3, #31
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2101      	movs	r1, #1
 800a040:	fa01 f202 	lsl.w	r2, r1, r2
 800a044:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	e008      	b.n	800a05e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a052:	f043 0208 	orr.w	r2, r3, #8
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
  }
}
 800a05e:	4618      	mov	r0, r3
 800a060:	372c      	adds	r7, #44	@ 0x2c
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	080142b0 	.word	0x080142b0

0800a070 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800a070:	b480      	push	{r7}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800a082:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d002      	beq.n	800a090 <HAL_FDCAN_ActivateNotification+0x20>
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d155      	bne.n	800a13c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	4013      	ands	r3, r2
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d108      	bne.n	800a0b0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f042 0201 	orr.w	r2, r2, #1
 800a0ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0ae:	e014      	b.n	800a0da <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	68ba      	ldr	r2, [r7, #8]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	d108      	bne.n	800a0d2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f042 0202 	orr.w	r2, r2, #2
 800a0ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a0d0:	e003      	b.n	800a0da <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	2203      	movs	r2, #3
 800a0d8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d009      	beq.n	800a0f8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d009      	beq.n	800a116 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	430a      	orrs	r2, r1
 800a112:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a11c:	68ba      	ldr	r2, [r7, #8]
 800a11e:	4b0f      	ldr	r3, [pc, #60]	@ (800a15c <HAL_FDCAN_ActivateNotification+0xec>)
 800a120:	4013      	ands	r3, r2
 800a122:	68fa      	ldr	r2, [r7, #12]
 800a124:	6812      	ldr	r2, [r2, #0]
 800a126:	430b      	orrs	r3, r1
 800a128:	6553      	str	r3, [r2, #84]	@ 0x54
 800a12a:	4b0d      	ldr	r3, [pc, #52]	@ (800a160 <HAL_FDCAN_ActivateNotification+0xf0>)
 800a12c:	695a      	ldr	r2, [r3, #20]
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	0f9b      	lsrs	r3, r3, #30
 800a132:	490b      	ldr	r1, [pc, #44]	@ (800a160 <HAL_FDCAN_ActivateNotification+0xf0>)
 800a134:	4313      	orrs	r3, r2
 800a136:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 800a138:	2300      	movs	r3, #0
 800a13a:	e008      	b.n	800a14e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a142:	f043 0202 	orr.w	r2, r3, #2
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
  }
}
 800a14e:	4618      	mov	r0, r3
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop
 800a15c:	3fcfffff 	.word	0x3fcfffff
 800a160:	4000a800 	.word	0x4000a800

0800a164 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b096      	sub	sp, #88	@ 0x58
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800a16c:	4b9a      	ldr	r3, [pc, #616]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	079b      	lsls	r3, r3, #30
 800a172:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800a174:	4b98      	ldr	r3, [pc, #608]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a176:	695b      	ldr	r3, [r3, #20]
 800a178:	079b      	lsls	r3, r3, #30
 800a17a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a17c:	4013      	ands	r3, r2
 800a17e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a186:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800a18a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a192:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a194:	4013      	ands	r3, r2
 800a196:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a19e:	f003 030f 	and.w	r3, r3, #15
 800a1a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a1ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a1c4:	4013      	ands	r3, r2
 800a1c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1ce:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 800a1d2:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a1dc:	4013      	ands	r3, r2
 800a1de:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1e6:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 800a1ea:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1f4:	4013      	ands	r3, r2
 800a1f6:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a206:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800a208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a20a:	0a1b      	lsrs	r3, r3, #8
 800a20c:	f003 0301 	and.w	r3, r3, #1
 800a210:	2b00      	cmp	r3, #0
 800a212:	d010      	beq.n	800a236 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 800a214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a216:	0a1b      	lsrs	r3, r3, #8
 800a218:	f003 0301 	and.w	r3, r3, #1
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d00a      	beq.n	800a236 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a228:	651a      	str	r2, [r3, #80]	@ 0x50
 800a22a:	4b6b      	ldr	r3, [pc, #428]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a22c:	2200      	movs	r2, #0
 800a22e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800a230:	6878      	ldr	r0, [r7, #4]
 800a232:	f000 fa54 	bl	800a6de <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800a236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a238:	0a9b      	lsrs	r3, r3, #10
 800a23a:	f003 0301 	and.w	r3, r3, #1
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d01d      	beq.n	800a27e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800a242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a244:	0a9b      	lsrs	r3, r3, #10
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d017      	beq.n	800a27e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800a256:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800a260:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a262:	4013      	ands	r3, r2
 800a264:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a26e:	651a      	str	r2, [r3, #80]	@ 0x50
 800a270:	4b59      	ldr	r3, [pc, #356]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a272:	2200      	movs	r2, #0
 800a274:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800a276:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa07 	bl	800a68c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800a27e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a280:	2b00      	cmp	r3, #0
 800a282:	d00d      	beq.n	800a2a0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a28a:	4b54      	ldr	r3, [pc, #336]	@ (800a3dc <HAL_FDCAN_IRQHandler+0x278>)
 800a28c:	400b      	ands	r3, r1
 800a28e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a290:	4a51      	ldr	r2, [pc, #324]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a294:	0f9b      	lsrs	r3, r3, #30
 800a296:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800a298:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a29a:	6878      	ldr	r0, [r7, #4]
 800a29c:	f000 f9c0 	bl	800a620 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800a2a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00d      	beq.n	800a2c2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a2ac:	4b4b      	ldr	r3, [pc, #300]	@ (800a3dc <HAL_FDCAN_IRQHandler+0x278>)
 800a2ae:	400b      	ands	r3, r1
 800a2b0:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2b2:	4a49      	ldr	r2, [pc, #292]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a2b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2b6:	0f9b      	lsrs	r3, r3, #30
 800a2b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800a2ba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 f9ba 	bl	800a636 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800a2c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d00d      	beq.n	800a2e4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a2ce:	4b43      	ldr	r3, [pc, #268]	@ (800a3dc <HAL_FDCAN_IRQHandler+0x278>)
 800a2d0:	400b      	ands	r3, r1
 800a2d2:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2d4:	4a40      	ldr	r2, [pc, #256]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a2d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2d8:	0f9b      	lsrs	r3, r3, #30
 800a2da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800a2dc:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f7f6 fb08 	bl	80008f4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800a2e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d00d      	beq.n	800a306 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a2f0:	4b3a      	ldr	r3, [pc, #232]	@ (800a3dc <HAL_FDCAN_IRQHandler+0x278>)
 800a2f2:	400b      	ands	r3, r1
 800a2f4:	6513      	str	r3, [r2, #80]	@ 0x50
 800a2f6:	4a38      	ldr	r2, [pc, #224]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a2f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2fa:	0f9b      	lsrs	r3, r3, #30
 800a2fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800a2fe:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f9a3 	bl	800a64c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800a306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a308:	0adb      	lsrs	r3, r3, #11
 800a30a:	f003 0301 	and.w	r3, r3, #1
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d010      	beq.n	800a334 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800a312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a314:	0adb      	lsrs	r3, r3, #11
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00a      	beq.n	800a334 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a326:	651a      	str	r2, [r3, #80]	@ 0x50
 800a328:	4b2b      	ldr	r3, [pc, #172]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f997 	bl	800a662 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 800a334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a336:	0a5b      	lsrs	r3, r3, #9
 800a338:	f003 0301 	and.w	r3, r3, #1
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d01d      	beq.n	800a37c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800a340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a342:	0a5b      	lsrs	r3, r3, #9
 800a344:	f003 0301 	and.w	r3, r3, #1
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d017      	beq.n	800a37c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800a354:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800a35e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a360:	4013      	ands	r3, r2
 800a362:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a36c:	651a      	str	r2, [r3, #80]	@ 0x50
 800a36e:	4b1a      	ldr	r3, [pc, #104]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a370:	2200      	movs	r2, #0
 800a372:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800a374:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f97d 	bl	800a676 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800a37c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a37e:	0cdb      	lsrs	r3, r3, #19
 800a380:	f003 0301 	and.w	r3, r3, #1
 800a384:	2b00      	cmp	r3, #0
 800a386:	d010      	beq.n	800a3aa <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 800a388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38a:	0cdb      	lsrs	r3, r3, #19
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b00      	cmp	r3, #0
 800a392:	d00a      	beq.n	800a3aa <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800a39c:	651a      	str	r2, [r3, #80]	@ 0x50
 800a39e:	4b0e      	ldr	r3, [pc, #56]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f97c 	bl	800a6a2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800a3aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ac:	0c1b      	lsrs	r3, r3, #16
 800a3ae:	f003 0301 	and.w	r3, r3, #1
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d016      	beq.n	800a3e4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b8:	0c1b      	lsrs	r3, r3, #16
 800a3ba:	f003 0301 	and.w	r3, r3, #1
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d010      	beq.n	800a3e4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a3ca:	651a      	str	r2, [r3, #80]	@ 0x50
 800a3cc:	4b02      	ldr	r3, [pc, #8]	@ (800a3d8 <HAL_FDCAN_IRQHandler+0x274>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	e004      	b.n	800a3e0 <HAL_FDCAN_IRQHandler+0x27c>
 800a3d6:	bf00      	nop
 800a3d8:	4000a800 	.word	0x4000a800
 800a3dc:	3fcfffff 	.word	0x3fcfffff
 800a3e0:	f000 f969 	bl	800a6b6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800a3e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3e6:	0c9b      	lsrs	r3, r3, #18
 800a3e8:	f003 0301 	and.w	r3, r3, #1
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d010      	beq.n	800a412 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f2:	0c9b      	lsrs	r3, r3, #18
 800a3f4:	f003 0301 	and.w	r3, r3, #1
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00a      	beq.n	800a412 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800a404:	651a      	str	r2, [r3, #80]	@ 0x50
 800a406:	4b83      	ldr	r3, [pc, #524]	@ (800a614 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a408:	2200      	movs	r2, #0
 800a40a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 f95c 	bl	800a6ca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800a412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a414:	0c5b      	lsrs	r3, r3, #17
 800a416:	f003 0301 	and.w	r3, r3, #1
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d015      	beq.n	800a44a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800a41e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a420:	0c5b      	lsrs	r3, r3, #17
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	2b00      	cmp	r3, #0
 800a428:	d00f      	beq.n	800a44a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800a432:	651a      	str	r2, [r3, #80]	@ 0x50
 800a434:	4b77      	ldr	r3, [pc, #476]	@ (800a614 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a436:	2200      	movs	r2, #0
 800a438:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a440:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800a44a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d00d      	beq.n	800a46c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a456:	4b70      	ldr	r3, [pc, #448]	@ (800a618 <HAL_FDCAN_IRQHandler+0x4b4>)
 800a458:	400b      	ands	r3, r1
 800a45a:	6513      	str	r3, [r2, #80]	@ 0x50
 800a45c:	4a6d      	ldr	r2, [pc, #436]	@ (800a614 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a45e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a460:	0f9b      	lsrs	r3, r3, #30
 800a462:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800a464:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f94d 	bl	800a706 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800a46c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d011      	beq.n	800a496 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681a      	ldr	r2, [r3, #0]
 800a476:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a478:	4b67      	ldr	r3, [pc, #412]	@ (800a618 <HAL_FDCAN_IRQHandler+0x4b4>)
 800a47a:	400b      	ands	r3, r1
 800a47c:	6513      	str	r3, [r2, #80]	@ 0x50
 800a47e:	4a65      	ldr	r2, [pc, #404]	@ (800a614 <HAL_FDCAN_IRQHandler+0x4b0>)
 800a480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a482:	0f9b      	lsrs	r3, r3, #30
 800a484:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800a48c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a48e:	431a      	orrs	r2, r3
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a60      	ldr	r2, [pc, #384]	@ (800a61c <HAL_FDCAN_IRQHandler+0x4b8>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	f040 80ac 	bne.w	800a5fa <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f003 0303 	and.w	r3, r3, #3
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 80a4 	beq.w	800a5fa <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	6a1b      	ldr	r3, [r3, #32]
 800a4b8:	f003 030f 	and.w	r3, r3, #15
 800a4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	6a1b      	ldr	r3, [r3, #32]
 800a4d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4de:	4013      	ands	r3, r2
 800a4e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	6a1b      	ldr	r3, [r3, #32]
 800a4e8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800a4ec:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 800a504:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a50c:	6a3a      	ldr	r2, [r7, #32]
 800a50e:	4013      	ands	r3, r2
 800a510:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	6a1b      	ldr	r3, [r3, #32]
 800a518:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 800a51c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a524:	69fa      	ldr	r2, [r7, #28]
 800a526:	4013      	ands	r3, r2
 800a528:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a530:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	6a1b      	ldr	r3, [r3, #32]
 800a538:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800a53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d007      	beq.n	800a550 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a546:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800a548:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f8e6 	bl	800a71c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800a550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d007      	beq.n	800a566 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a55c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800a55e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	f000 f8e6 	bl	800a732 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	099b      	lsrs	r3, r3, #6
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d01a      	beq.n	800a5a8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	099b      	lsrs	r3, r3, #6
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d014      	beq.n	800a5a8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	685b      	ldr	r3, [r3, #4]
 800a582:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a584:	0c1b      	lsrs	r3, r3, #16
 800a586:	b29b      	uxth	r3, r3
 800a588:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a590:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a594:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	2240      	movs	r2, #64	@ 0x40
 800a59c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800a59e:	68fa      	ldr	r2, [r7, #12]
 800a5a0:	6939      	ldr	r1, [r7, #16]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 f8d0 	bl	800a748 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800a5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d007      	beq.n	800a5be <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5b4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800a5b6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 f8d1 	bl	800a760 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800a5be:	6a3b      	ldr	r3, [r7, #32]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d00b      	beq.n	800a5dc <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	6a3a      	ldr	r2, [r7, #32]
 800a5ca:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800a5d2:	6a3b      	ldr	r3, [r7, #32]
 800a5d4:	431a      	orrs	r2, r3
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d00b      	beq.n	800a5fa <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	69fa      	ldr	r2, [r7, #28]
 800a5e8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	431a      	orrs	r2, r3
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f874 	bl	800a6f2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800a60a:	bf00      	nop
 800a60c:	3758      	adds	r7, #88	@ 0x58
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	4000a800 	.word	0x4000a800
 800a618:	3fcfffff 	.word	0x3fcfffff
 800a61c:	4000a000 	.word	0x4000a000

0800a620 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
 800a628:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800a62a:	bf00      	nop
 800a62c:	370c      	adds	r7, #12
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr

0800a636 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800a636:	b480      	push	{r7}
 800a638:	b083      	sub	sp, #12
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800a656:	bf00      	nop
 800a658:	370c      	adds	r7, #12
 800a65a:	46bd      	mov	sp, r7
 800a65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a660:	4770      	bx	lr

0800a662 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
 800a67e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800a680:	bf00      	nop
 800a682:	370c      	adds	r7, #12
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
 800a694:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800a6aa:	bf00      	nop
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800a6d2:	bf00      	nop
 800a6d4:	370c      	adds	r7, #12
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6dc:	4770      	bx	lr

0800a6de <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a6de:	b480      	push	{r7}
 800a6e0:	b083      	sub	sp, #12
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800a6e6:	bf00      	nop
 800a6e8:	370c      	adds	r7, #12
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	b083      	sub	sp, #12
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800a6fa:	bf00      	nop
 800a6fc:	370c      	adds	r7, #12
 800a6fe:	46bd      	mov	sp, r7
 800a700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a704:	4770      	bx	lr

0800a706 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800a706:	b480      	push	{r7}
 800a708:	b083      	sub	sp, #12
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	6078      	str	r0, [r7, #4]
 800a70e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800a726:	bf00      	nop
 800a728:	370c      	adds	r7, #12
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr

0800a732 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800a732:	b480      	push	{r7}
 800a734:	b083      	sub	sp, #12
 800a736:	af00      	add	r7, sp, #0
 800a738:	6078      	str	r0, [r7, #4]
 800a73a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800a73c:	bf00      	nop
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800a76a:	bf00      	nop
 800a76c:	370c      	adds	r7, #12
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
	...

0800a778 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a784:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a78e:	4ba7      	ldr	r3, [pc, #668]	@ (800aa2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a790:	4013      	ands	r3, r2
 800a792:	68ba      	ldr	r2, [r7, #8]
 800a794:	0091      	lsls	r1, r2, #2
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	6812      	ldr	r2, [r2, #0]
 800a79a:	430b      	orrs	r3, r1
 800a79c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a7a8:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7b0:	041a      	lsls	r2, r3, #16
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	430a      	orrs	r2, r1
 800a7b8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7c0:	68ba      	ldr	r2, [r7, #8]
 800a7c2:	4413      	add	r3, r2
 800a7c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a7ce:	4b97      	ldr	r3, [pc, #604]	@ (800aa2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a7d0:	4013      	ands	r3, r2
 800a7d2:	68ba      	ldr	r2, [r7, #8]
 800a7d4:	0091      	lsls	r1, r2, #2
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	6812      	ldr	r2, [r2, #0]
 800a7da:	430b      	orrs	r3, r1
 800a7dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7e8:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7f0:	041a      	lsls	r2, r3, #16
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	430a      	orrs	r2, r1
 800a7f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	4413      	add	r3, r2
 800a806:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800a810:	4b86      	ldr	r3, [pc, #536]	@ (800aa2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a812:	4013      	ands	r3, r2
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	0091      	lsls	r1, r2, #2
 800a818:	687a      	ldr	r2, [r7, #4]
 800a81a:	6812      	ldr	r2, [r2, #0]
 800a81c:	430b      	orrs	r3, r1
 800a81e:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a82a:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a832:	041a      	lsls	r2, r3, #16
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	430a      	orrs	r2, r1
 800a83a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a842:	687a      	ldr	r2, [r7, #4]
 800a844:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a846:	fb02 f303 	mul.w	r3, r2, r3
 800a84a:	68ba      	ldr	r2, [r7, #8]
 800a84c:	4413      	add	r3, r2
 800a84e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a858:	4b74      	ldr	r3, [pc, #464]	@ (800aa2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a85a:	4013      	ands	r3, r2
 800a85c:	68ba      	ldr	r2, [r7, #8]
 800a85e:	0091      	lsls	r1, r2, #2
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	6812      	ldr	r2, [r2, #0]
 800a864:	430b      	orrs	r3, r1
 800a866:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a872:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a87a:	041a      	lsls	r2, r3, #16
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	430a      	orrs	r2, r1
 800a882:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a88e:	fb02 f303 	mul.w	r3, r2, r3
 800a892:	68ba      	ldr	r2, [r7, #8]
 800a894:	4413      	add	r3, r2
 800a896:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800a8a0:	4b62      	ldr	r3, [pc, #392]	@ (800aa2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	68ba      	ldr	r2, [r7, #8]
 800a8a6:	0091      	lsls	r1, r2, #2
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	6812      	ldr	r2, [r2, #0]
 800a8ac:	430b      	orrs	r3, r1
 800a8ae:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a8ba:	fb02 f303 	mul.w	r3, r2, r3
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800a8cc:	4b57      	ldr	r3, [pc, #348]	@ (800aa2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	68ba      	ldr	r2, [r7, #8]
 800a8d2:	0091      	lsls	r1, r2, #2
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	6812      	ldr	r2, [r2, #0]
 800a8d8:	430b      	orrs	r3, r1
 800a8da:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a8e6:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8ee:	041a      	lsls	r2, r3, #16
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	4413      	add	r3, r2
 800a904:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800a90e:	4b47      	ldr	r3, [pc, #284]	@ (800aa2c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a910:	4013      	ands	r3, r2
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	0091      	lsls	r1, r2, #2
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	6812      	ldr	r2, [r2, #0]
 800a91a:	430b      	orrs	r3, r1
 800a91c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a928:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a930:	041a      	lsls	r2, r3, #16
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	430a      	orrs	r2, r1
 800a938:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a944:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a94c:	061a      	lsls	r2, r3, #24
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	430a      	orrs	r2, r1
 800a954:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a95c:	4b34      	ldr	r3, [pc, #208]	@ (800aa30 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800a95e:	4413      	add	r3, r2
 800a960:	009a      	lsls	r2, r3, #2
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	441a      	add	r2, r3
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a97e:	00db      	lsls	r3, r3, #3
 800a980:	441a      	add	r2, r3
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a98e:	6879      	ldr	r1, [r7, #4]
 800a990:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800a992:	fb01 f303 	mul.w	r3, r1, r3
 800a996:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a998:	441a      	add	r2, r3
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9a6:	6879      	ldr	r1, [r7, #4]
 800a9a8:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800a9aa:	fb01 f303 	mul.w	r3, r1, r3
 800a9ae:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a9b0:	441a      	add	r2, r3
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9be:	6879      	ldr	r1, [r7, #4]
 800a9c0:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800a9c2:	fb01 f303 	mul.w	r3, r1, r3
 800a9c6:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a9c8:	441a      	add	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	441a      	add	r2, r3
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9ee:	6879      	ldr	r1, [r7, #4]
 800a9f0:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a9f2:	fb01 f303 	mul.w	r3, r1, r3
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	441a      	add	r2, r3
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800aa0a:	6879      	ldr	r1, [r7, #4]
 800aa0c:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800aa0e:	fb01 f303 	mul.w	r3, r1, r3
 800aa12:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800aa14:	441a      	add	r2, r3
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa22:	4a04      	ldr	r2, [pc, #16]	@ (800aa34 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800aa24:	4293      	cmp	r3, r2
 800aa26:	d915      	bls.n	800aa54 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800aa28:	e006      	b.n	800aa38 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800aa2a:	bf00      	nop
 800aa2c:	ffff0003 	.word	0xffff0003
 800aa30:	10002b00 	.word	0x10002b00
 800aa34:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800aa3e:	f043 0220 	orr.w	r2, r3, #32
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2203      	movs	r2, #3
 800aa4c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800aa50:	2301      	movs	r3, #1
 800aa52:	e010      	b.n	800aa76 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa58:	60fb      	str	r3, [r7, #12]
 800aa5a:	e005      	b.n	800aa68 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3304      	adds	r3, #4
 800aa66:	60fb      	str	r3, [r7, #12]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800aa6e:	68fa      	ldr	r2, [r7, #12]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d3f3      	bcc.n	800aa5c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800aa74:	2300      	movs	r3, #0
}
 800aa76:	4618      	mov	r0, r3
 800aa78:	3714      	adds	r7, #20
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr
 800aa82:	bf00      	nop

0800aa84 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800aa84:	b480      	push	{r7}
 800aa86:	b089      	sub	sp, #36	@ 0x24
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	60f8      	str	r0, [r7, #12]
 800aa8c:	60b9      	str	r1, [r7, #8]
 800aa8e:	607a      	str	r2, [r7, #4]
 800aa90:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	685b      	ldr	r3, [r3, #4]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10a      	bne.n	800aab0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800aaa2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800aaaa:	4313      	orrs	r3, r2
 800aaac:	61fb      	str	r3, [r7, #28]
 800aaae:	e00a      	b.n	800aac6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800aab8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800aabe:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800aac0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aac4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800aad0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800aad6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800aadc:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	68db      	ldr	r3, [r3, #12]
 800aae2:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800aae4:	4313      	orrs	r3, r2
 800aae6:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	fb01 f303 	mul.w	r3, r1, r3
 800aaf8:	009b      	lsls	r3, r3, #2
 800aafa:	4413      	add	r3, r2
 800aafc:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	69fa      	ldr	r2, [r7, #28]
 800ab02:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800ab04:	69bb      	ldr	r3, [r7, #24]
 800ab06:	3304      	adds	r3, #4
 800ab08:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800ab0a:	69bb      	ldr	r3, [r7, #24]
 800ab0c:	693a      	ldr	r2, [r7, #16]
 800ab0e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800ab10:	69bb      	ldr	r3, [r7, #24]
 800ab12:	3304      	adds	r3, #4
 800ab14:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800ab16:	2300      	movs	r3, #0
 800ab18:	617b      	str	r3, [r7, #20]
 800ab1a:	e020      	b.n	800ab5e <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	3303      	adds	r3, #3
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	4413      	add	r3, r2
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	3302      	adds	r3, #2
 800ab2c:	6879      	ldr	r1, [r7, #4]
 800ab2e:	440b      	add	r3, r1
 800ab30:	781b      	ldrb	r3, [r3, #0]
 800ab32:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800ab34:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	3301      	adds	r3, #1
 800ab3a:	6879      	ldr	r1, [r7, #4]
 800ab3c:	440b      	add	r3, r1
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800ab42:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800ab44:	6879      	ldr	r1, [r7, #4]
 800ab46:	697a      	ldr	r2, [r7, #20]
 800ab48:	440a      	add	r2, r1
 800ab4a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800ab4c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	3304      	adds	r3, #4
 800ab56:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	3304      	adds	r3, #4
 800ab5c:	617b      	str	r3, [r7, #20]
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	68db      	ldr	r3, [r3, #12]
 800ab62:	4a06      	ldr	r2, [pc, #24]	@ (800ab7c <FDCAN_CopyMessageToRAM+0xf8>)
 800ab64:	5cd3      	ldrb	r3, [r2, r3]
 800ab66:	461a      	mov	r2, r3
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d3d6      	bcc.n	800ab1c <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800ab6e:	bf00      	nop
 800ab70:	bf00      	nop
 800ab72:	3724      	adds	r7, #36	@ 0x24
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	080142b0 	.word	0x080142b0

0800ab80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b089      	sub	sp, #36	@ 0x24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800ab8e:	4b86      	ldr	r3, [pc, #536]	@ (800ada8 <HAL_GPIO_Init+0x228>)
 800ab90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ab92:	e18c      	b.n	800aeae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	2101      	movs	r1, #1
 800ab9a:	69fb      	ldr	r3, [r7, #28]
 800ab9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aba0:	4013      	ands	r3, r2
 800aba2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	f000 817e 	beq.w	800aea8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	685b      	ldr	r3, [r3, #4]
 800abb0:	f003 0303 	and.w	r3, r3, #3
 800abb4:	2b01      	cmp	r3, #1
 800abb6:	d005      	beq.n	800abc4 <HAL_GPIO_Init+0x44>
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f003 0303 	and.w	r3, r3, #3
 800abc0:	2b02      	cmp	r3, #2
 800abc2:	d130      	bne.n	800ac26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	005b      	lsls	r3, r3, #1
 800abce:	2203      	movs	r2, #3
 800abd0:	fa02 f303 	lsl.w	r3, r2, r3
 800abd4:	43db      	mvns	r3, r3
 800abd6:	69ba      	ldr	r2, [r7, #24]
 800abd8:	4013      	ands	r3, r2
 800abda:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	68da      	ldr	r2, [r3, #12]
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	005b      	lsls	r3, r3, #1
 800abe4:	fa02 f303 	lsl.w	r3, r2, r3
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	4313      	orrs	r3, r2
 800abec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	69ba      	ldr	r2, [r7, #24]
 800abf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	685b      	ldr	r3, [r3, #4]
 800abf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800abfa:	2201      	movs	r2, #1
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ac02:	43db      	mvns	r3, r3
 800ac04:	69ba      	ldr	r2, [r7, #24]
 800ac06:	4013      	ands	r3, r2
 800ac08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	091b      	lsrs	r3, r3, #4
 800ac10:	f003 0201 	and.w	r2, r3, #1
 800ac14:	69fb      	ldr	r3, [r7, #28]
 800ac16:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1a:	69ba      	ldr	r2, [r7, #24]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	69ba      	ldr	r2, [r7, #24]
 800ac24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	685b      	ldr	r3, [r3, #4]
 800ac2a:	f003 0303 	and.w	r3, r3, #3
 800ac2e:	2b03      	cmp	r3, #3
 800ac30:	d017      	beq.n	800ac62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	68db      	ldr	r3, [r3, #12]
 800ac36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	2203      	movs	r2, #3
 800ac3e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac42:	43db      	mvns	r3, r3
 800ac44:	69ba      	ldr	r2, [r7, #24]
 800ac46:	4013      	ands	r3, r2
 800ac48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac4a:	683b      	ldr	r3, [r7, #0]
 800ac4c:	689a      	ldr	r2, [r3, #8]
 800ac4e:	69fb      	ldr	r3, [r7, #28]
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	fa02 f303 	lsl.w	r3, r2, r3
 800ac56:	69ba      	ldr	r2, [r7, #24]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	69ba      	ldr	r2, [r7, #24]
 800ac60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	f003 0303 	and.w	r3, r3, #3
 800ac6a:	2b02      	cmp	r3, #2
 800ac6c:	d123      	bne.n	800acb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	08da      	lsrs	r2, r3, #3
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	3208      	adds	r2, #8
 800ac76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	f003 0307 	and.w	r3, r3, #7
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	220f      	movs	r2, #15
 800ac86:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8a:	43db      	mvns	r3, r3
 800ac8c:	69ba      	ldr	r2, [r7, #24]
 800ac8e:	4013      	ands	r3, r2
 800ac90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	691a      	ldr	r2, [r3, #16]
 800ac96:	69fb      	ldr	r3, [r7, #28]
 800ac98:	f003 0307 	and.w	r3, r3, #7
 800ac9c:	009b      	lsls	r3, r3, #2
 800ac9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aca2:	69ba      	ldr	r2, [r7, #24]
 800aca4:	4313      	orrs	r3, r2
 800aca6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aca8:	69fb      	ldr	r3, [r7, #28]
 800acaa:	08da      	lsrs	r2, r3, #3
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3208      	adds	r2, #8
 800acb0:	69b9      	ldr	r1, [r7, #24]
 800acb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	005b      	lsls	r3, r3, #1
 800acc0:	2203      	movs	r2, #3
 800acc2:	fa02 f303 	lsl.w	r3, r2, r3
 800acc6:	43db      	mvns	r3, r3
 800acc8:	69ba      	ldr	r2, [r7, #24]
 800acca:	4013      	ands	r3, r2
 800accc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800acce:	683b      	ldr	r3, [r7, #0]
 800acd0:	685b      	ldr	r3, [r3, #4]
 800acd2:	f003 0203 	and.w	r2, r3, #3
 800acd6:	69fb      	ldr	r3, [r7, #28]
 800acd8:	005b      	lsls	r3, r3, #1
 800acda:	fa02 f303 	lsl.w	r3, r2, r3
 800acde:	69ba      	ldr	r2, [r7, #24]
 800ace0:	4313      	orrs	r3, r2
 800ace2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	69ba      	ldr	r2, [r7, #24]
 800ace8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f000 80d8 	beq.w	800aea8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acf8:	4b2c      	ldr	r3, [pc, #176]	@ (800adac <HAL_GPIO_Init+0x22c>)
 800acfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800acfe:	4a2b      	ldr	r2, [pc, #172]	@ (800adac <HAL_GPIO_Init+0x22c>)
 800ad00:	f043 0302 	orr.w	r3, r3, #2
 800ad04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800ad08:	4b28      	ldr	r3, [pc, #160]	@ (800adac <HAL_GPIO_Init+0x22c>)
 800ad0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ad0e:	f003 0302 	and.w	r3, r3, #2
 800ad12:	60fb      	str	r3, [r7, #12]
 800ad14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ad16:	4a26      	ldr	r2, [pc, #152]	@ (800adb0 <HAL_GPIO_Init+0x230>)
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	089b      	lsrs	r3, r3, #2
 800ad1c:	3302      	adds	r3, #2
 800ad1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ad24:	69fb      	ldr	r3, [r7, #28]
 800ad26:	f003 0303 	and.w	r3, r3, #3
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	220f      	movs	r2, #15
 800ad2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ad32:	43db      	mvns	r3, r3
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	4013      	ands	r3, r2
 800ad38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	4a1d      	ldr	r2, [pc, #116]	@ (800adb4 <HAL_GPIO_Init+0x234>)
 800ad3e:	4293      	cmp	r3, r2
 800ad40:	d04a      	beq.n	800add8 <HAL_GPIO_Init+0x258>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	4a1c      	ldr	r2, [pc, #112]	@ (800adb8 <HAL_GPIO_Init+0x238>)
 800ad46:	4293      	cmp	r3, r2
 800ad48:	d02b      	beq.n	800ada2 <HAL_GPIO_Init+0x222>
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	4a1b      	ldr	r2, [pc, #108]	@ (800adbc <HAL_GPIO_Init+0x23c>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d025      	beq.n	800ad9e <HAL_GPIO_Init+0x21e>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	4a1a      	ldr	r2, [pc, #104]	@ (800adc0 <HAL_GPIO_Init+0x240>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d01f      	beq.n	800ad9a <HAL_GPIO_Init+0x21a>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	4a19      	ldr	r2, [pc, #100]	@ (800adc4 <HAL_GPIO_Init+0x244>)
 800ad5e:	4293      	cmp	r3, r2
 800ad60:	d019      	beq.n	800ad96 <HAL_GPIO_Init+0x216>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	4a18      	ldr	r2, [pc, #96]	@ (800adc8 <HAL_GPIO_Init+0x248>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d013      	beq.n	800ad92 <HAL_GPIO_Init+0x212>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	4a17      	ldr	r2, [pc, #92]	@ (800adcc <HAL_GPIO_Init+0x24c>)
 800ad6e:	4293      	cmp	r3, r2
 800ad70:	d00d      	beq.n	800ad8e <HAL_GPIO_Init+0x20e>
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	4a16      	ldr	r2, [pc, #88]	@ (800add0 <HAL_GPIO_Init+0x250>)
 800ad76:	4293      	cmp	r3, r2
 800ad78:	d007      	beq.n	800ad8a <HAL_GPIO_Init+0x20a>
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4a15      	ldr	r2, [pc, #84]	@ (800add4 <HAL_GPIO_Init+0x254>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d101      	bne.n	800ad86 <HAL_GPIO_Init+0x206>
 800ad82:	2309      	movs	r3, #9
 800ad84:	e029      	b.n	800adda <HAL_GPIO_Init+0x25a>
 800ad86:	230a      	movs	r3, #10
 800ad88:	e027      	b.n	800adda <HAL_GPIO_Init+0x25a>
 800ad8a:	2307      	movs	r3, #7
 800ad8c:	e025      	b.n	800adda <HAL_GPIO_Init+0x25a>
 800ad8e:	2306      	movs	r3, #6
 800ad90:	e023      	b.n	800adda <HAL_GPIO_Init+0x25a>
 800ad92:	2305      	movs	r3, #5
 800ad94:	e021      	b.n	800adda <HAL_GPIO_Init+0x25a>
 800ad96:	2304      	movs	r3, #4
 800ad98:	e01f      	b.n	800adda <HAL_GPIO_Init+0x25a>
 800ad9a:	2303      	movs	r3, #3
 800ad9c:	e01d      	b.n	800adda <HAL_GPIO_Init+0x25a>
 800ad9e:	2302      	movs	r3, #2
 800ada0:	e01b      	b.n	800adda <HAL_GPIO_Init+0x25a>
 800ada2:	2301      	movs	r3, #1
 800ada4:	e019      	b.n	800adda <HAL_GPIO_Init+0x25a>
 800ada6:	bf00      	nop
 800ada8:	58000080 	.word	0x58000080
 800adac:	58024400 	.word	0x58024400
 800adb0:	58000400 	.word	0x58000400
 800adb4:	58020000 	.word	0x58020000
 800adb8:	58020400 	.word	0x58020400
 800adbc:	58020800 	.word	0x58020800
 800adc0:	58020c00 	.word	0x58020c00
 800adc4:	58021000 	.word	0x58021000
 800adc8:	58021400 	.word	0x58021400
 800adcc:	58021800 	.word	0x58021800
 800add0:	58021c00 	.word	0x58021c00
 800add4:	58022400 	.word	0x58022400
 800add8:	2300      	movs	r3, #0
 800adda:	69fa      	ldr	r2, [r7, #28]
 800addc:	f002 0203 	and.w	r2, r2, #3
 800ade0:	0092      	lsls	r2, r2, #2
 800ade2:	4093      	lsls	r3, r2
 800ade4:	69ba      	ldr	r2, [r7, #24]
 800ade6:	4313      	orrs	r3, r2
 800ade8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800adea:	4938      	ldr	r1, [pc, #224]	@ (800aecc <HAL_GPIO_Init+0x34c>)
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	089b      	lsrs	r3, r3, #2
 800adf0:	3302      	adds	r3, #2
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800adf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	43db      	mvns	r3, r3
 800ae04:	69ba      	ldr	r2, [r7, #24]
 800ae06:	4013      	ands	r3, r2
 800ae08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d003      	beq.n	800ae1e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800ae16:	69ba      	ldr	r2, [r7, #24]
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ae1e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae22:	69bb      	ldr	r3, [r7, #24]
 800ae24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ae26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae2a:	685b      	ldr	r3, [r3, #4]
 800ae2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	43db      	mvns	r3, r3
 800ae32:	69ba      	ldr	r2, [r7, #24]
 800ae34:	4013      	ands	r3, r2
 800ae36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d003      	beq.n	800ae4c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800ae44:	69ba      	ldr	r2, [r7, #24]
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	4313      	orrs	r3, r2
 800ae4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ae4c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ae5a:	693b      	ldr	r3, [r7, #16]
 800ae5c:	43db      	mvns	r3, r3
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	4013      	ands	r3, r2
 800ae62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	685b      	ldr	r3, [r3, #4]
 800ae68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d003      	beq.n	800ae78 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800ae70:	69ba      	ldr	r2, [r7, #24]
 800ae72:	693b      	ldr	r3, [r7, #16]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	69ba      	ldr	r2, [r7, #24]
 800ae7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	43db      	mvns	r3, r3
 800ae88:	69ba      	ldr	r2, [r7, #24]
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d003      	beq.n	800aea2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	69ba      	ldr	r2, [r7, #24]
 800aea6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800aea8:	69fb      	ldr	r3, [r7, #28]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	f47f ae6b 	bne.w	800ab94 <HAL_GPIO_Init+0x14>
  }
}
 800aebe:	bf00      	nop
 800aec0:	bf00      	nop
 800aec2:	3724      	adds	r7, #36	@ 0x24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeca:	4770      	bx	lr
 800aecc:	58000400 	.word	0x58000400

0800aed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	460b      	mov	r3, r1
 800aeda:	807b      	strh	r3, [r7, #2]
 800aedc:	4613      	mov	r3, r2
 800aede:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aee0:	787b      	ldrb	r3, [r7, #1]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d003      	beq.n	800aeee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aee6:	887a      	ldrh	r2, [r7, #2]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800aeec:	e003      	b.n	800aef6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800aeee:	887b      	ldrh	r3, [r7, #2]
 800aef0:	041a      	lsls	r2, r3, #16
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	619a      	str	r2, [r3, #24]
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800af02:	b480      	push	{r7}
 800af04:	b085      	sub	sp, #20
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
 800af0a:	460b      	mov	r3, r1
 800af0c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800af14:	887a      	ldrh	r2, [r7, #2]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	4013      	ands	r3, r2
 800af1a:	041a      	lsls	r2, r3, #16
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	43d9      	mvns	r1, r3
 800af20:	887b      	ldrh	r3, [r7, #2]
 800af22:	400b      	ands	r3, r1
 800af24:	431a      	orrs	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	619a      	str	r2, [r3, #24]
}
 800af2a:	bf00      	nop
 800af2c:	3714      	adds	r7, #20
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr
	...

0800af38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af38:	b580      	push	{r7, lr}
 800af3a:	b082      	sub	sp, #8
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af46:	2301      	movs	r3, #1
 800af48:	e08b      	b.n	800b062 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d106      	bne.n	800af64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7f8 fc4c 	bl	80037fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2224      	movs	r2, #36	@ 0x24
 800af68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f022 0201 	bic.w	r2, r2, #1
 800af7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685a      	ldr	r2, [r3, #4]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800af88:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	689a      	ldr	r2, [r3, #8]
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800af98:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68db      	ldr	r3, [r3, #12]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d107      	bne.n	800afb2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	689a      	ldr	r2, [r3, #8]
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800afae:	609a      	str	r2, [r3, #8]
 800afb0:	e006      	b.n	800afc0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689a      	ldr	r2, [r3, #8]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800afbe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	2b02      	cmp	r3, #2
 800afc6:	d108      	bne.n	800afda <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	685a      	ldr	r2, [r3, #4]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afd6:	605a      	str	r2, [r3, #4]
 800afd8:	e007      	b.n	800afea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800afe8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	6859      	ldr	r1, [r3, #4]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	4b1d      	ldr	r3, [pc, #116]	@ (800b06c <HAL_I2C_Init+0x134>)
 800aff6:	430b      	orrs	r3, r1
 800aff8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	68da      	ldr	r2, [r3, #12]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b008:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	691a      	ldr	r2, [r3, #16]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	699b      	ldr	r3, [r3, #24]
 800b01a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	430a      	orrs	r2, r1
 800b022:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	69d9      	ldr	r1, [r3, #28]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a1a      	ldr	r2, [r3, #32]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	430a      	orrs	r2, r1
 800b032:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f042 0201 	orr.w	r2, r2, #1
 800b042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2220      	movs	r2, #32
 800b04e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2200      	movs	r2, #0
 800b056:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3708      	adds	r7, #8
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}
 800b06a:	bf00      	nop
 800b06c:	02008000 	.word	0x02008000

0800b070 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b070:	b480      	push	{r7}
 800b072:	b083      	sub	sp, #12
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b20      	cmp	r3, #32
 800b084:	d138      	bne.n	800b0f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d101      	bne.n	800b094 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b090:	2302      	movs	r3, #2
 800b092:	e032      	b.n	800b0fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2201      	movs	r2, #1
 800b098:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2224      	movs	r2, #36	@ 0x24
 800b0a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f022 0201 	bic.w	r2, r2, #1
 800b0b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	681a      	ldr	r2, [r3, #0]
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b0c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	6819      	ldr	r1, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	683a      	ldr	r2, [r7, #0]
 800b0d0:	430a      	orrs	r2, r1
 800b0d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	681a      	ldr	r2, [r3, #0]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f042 0201 	orr.w	r2, r2, #1
 800b0e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2220      	movs	r2, #32
 800b0e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e000      	b.n	800b0fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b0f8:	2302      	movs	r3, #2
  }
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	370c      	adds	r7, #12
 800b0fe:	46bd      	mov	sp, r7
 800b100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b104:	4770      	bx	lr

0800b106 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b106:	b480      	push	{r7}
 800b108:	b085      	sub	sp, #20
 800b10a:	af00      	add	r7, sp, #0
 800b10c:	6078      	str	r0, [r7, #4]
 800b10e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b116:	b2db      	uxtb	r3, r3
 800b118:	2b20      	cmp	r3, #32
 800b11a:	d139      	bne.n	800b190 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b122:	2b01      	cmp	r3, #1
 800b124:	d101      	bne.n	800b12a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b126:	2302      	movs	r3, #2
 800b128:	e033      	b.n	800b192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2201      	movs	r2, #1
 800b12e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2224      	movs	r2, #36	@ 0x24
 800b136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f022 0201 	bic.w	r2, r2, #1
 800b148:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b158:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	021b      	lsls	r3, r3, #8
 800b15e:	68fa      	ldr	r2, [r7, #12]
 800b160:	4313      	orrs	r3, r2
 800b162:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	68fa      	ldr	r2, [r7, #12]
 800b16a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f042 0201 	orr.w	r2, r2, #1
 800b17a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2220      	movs	r2, #32
 800b180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b18c:	2300      	movs	r3, #0
 800b18e:	e000      	b.n	800b192 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b190:	2302      	movs	r3, #2
  }
}
 800b192:	4618      	mov	r0, r3
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
	...

0800b1a0 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e0b1      	b.n	800b31a <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b1bc:	b2db      	uxtb	r3, r3
 800b1be:	2b05      	cmp	r3, #5
 800b1c0:	d101      	bne.n	800b1c6 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e0a9      	b.n	800b31a <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d101      	bne.n	800b1d6 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e0a1      	b.n	800b31a <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b1e4:	b2db      	uxtb	r3, r3
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d103      	bne.n	800b1f2 <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7f8 fbbc 	bl	8003970 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	681a      	ldr	r2, [r3, #0]
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b206:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	2b40      	cmp	r3, #64	@ 0x40
 800b20e:	d119      	bne.n	800b244 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	4b43      	ldr	r3, [pc, #268]	@ (800b324 <HAL_OPAMP_Init+0x184>)
 800b218:	4013      	ands	r3, r2
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	6851      	ldr	r1, [r2, #4]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	6892      	ldr	r2, [r2, #8]
 800b222:	4311      	orrs	r1, r2
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	6952      	ldr	r2, [r2, #20]
 800b228:	4311      	orrs	r1, r2
 800b22a:	687a      	ldr	r2, [r7, #4]
 800b22c:	6992      	ldr	r2, [r2, #24]
 800b22e:	4311      	orrs	r1, r2
 800b230:	687a      	ldr	r2, [r7, #4]
 800b232:	6912      	ldr	r2, [r2, #16]
 800b234:	4311      	orrs	r1, r2
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	69d2      	ldr	r2, [r2, #28]
 800b23a:	4311      	orrs	r1, r2
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	6812      	ldr	r2, [r2, #0]
 800b240:	430b      	orrs	r3, r1
 800b242:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	689b      	ldr	r3, [r3, #8]
 800b248:	2b60      	cmp	r3, #96	@ 0x60
 800b24a:	d113      	bne.n	800b274 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	4b35      	ldr	r3, [pc, #212]	@ (800b328 <HAL_OPAMP_Init+0x188>)
 800b254:	4013      	ands	r3, r2
 800b256:	687a      	ldr	r2, [r7, #4]
 800b258:	6851      	ldr	r1, [r2, #4]
 800b25a:	687a      	ldr	r2, [r7, #4]
 800b25c:	6892      	ldr	r2, [r2, #8]
 800b25e:	4311      	orrs	r1, r2
 800b260:	687a      	ldr	r2, [r7, #4]
 800b262:	6912      	ldr	r2, [r2, #16]
 800b264:	4311      	orrs	r1, r2
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	69d2      	ldr	r2, [r2, #28]
 800b26a:	4311      	orrs	r1, r2
 800b26c:	687a      	ldr	r2, [r7, #4]
 800b26e:	6812      	ldr	r2, [r2, #0]
 800b270:	430b      	orrs	r3, r1
 800b272:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	689b      	ldr	r3, [r3, #8]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d116      	bne.n	800b2aa <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	681a      	ldr	r2, [r3, #0]
 800b282:	4b29      	ldr	r3, [pc, #164]	@ (800b328 <HAL_OPAMP_Init+0x188>)
 800b284:	4013      	ands	r3, r2
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	6851      	ldr	r1, [r2, #4]
 800b28a:	687a      	ldr	r2, [r7, #4]
 800b28c:	6892      	ldr	r2, [r2, #8]
 800b28e:	4311      	orrs	r1, r2
 800b290:	687a      	ldr	r2, [r7, #4]
 800b292:	68d2      	ldr	r2, [r2, #12]
 800b294:	4311      	orrs	r1, r2
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	6912      	ldr	r2, [r2, #16]
 800b29a:	4311      	orrs	r1, r2
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	69d2      	ldr	r2, [r2, #28]
 800b2a0:	4311      	orrs	r1, r2
 800b2a2:	687a      	ldr	r2, [r7, #4]
 800b2a4:	6812      	ldr	r2, [r2, #0]
 800b2a6:	430b      	orrs	r3, r1
 800b2a8:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b2b2:	d127      	bne.n	800b304 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2bc:	d011      	beq.n	800b2e2 <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	4b16      	ldr	r3, [pc, #88]	@ (800b32c <HAL_OPAMP_Init+0x18c>)
 800b2d4:	4013      	ands	r3, r2
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	6812      	ldr	r2, [r2, #0]
 800b2da:	68b9      	ldr	r1, [r7, #8]
 800b2dc:	430b      	orrs	r3, r1
 800b2de:	6053      	str	r3, [r2, #4]
 800b2e0:	e010      	b.n	800b304 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2e6:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 800b2ec:	4313      	orrs	r3, r2
 800b2ee:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	689a      	ldr	r2, [r3, #8]
 800b2f6:	4b0d      	ldr	r3, [pc, #52]	@ (800b32c <HAL_OPAMP_Init+0x18c>)
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	6812      	ldr	r2, [r2, #0]
 800b2fe:	68b9      	ldr	r1, [r7, #8]
 800b300:	430b      	orrs	r3, r1
 800b302:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d103      	bne.n	800b318 <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2201      	movs	r2, #1
 800b314:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 800b318:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3710      	adds	r7, #16
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	fff83e93 	.word	0xfff83e93
 800b328:	fffbfe93 	.word	0xfffbfe93
 800b32c:	ffffe0e0 	.word	0xffffe0e0

0800b330 <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b338:	2300      	movs	r3, #0
 800b33a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d102      	bne.n	800b348 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	73fb      	strb	r3, [r7, #15]
 800b346:	e01d      	b.n	800b384 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	2b05      	cmp	r3, #5
 800b352:	d102      	bne.n	800b35a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800b354:	2301      	movs	r3, #1
 800b356:	73fb      	strb	r3, [r7, #15]
 800b358:	e014      	b.n	800b384 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b01      	cmp	r3, #1
 800b364:	d10c      	bne.n	800b380 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f042 0201 	orr.w	r2, r2, #1
 800b374:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2204      	movs	r2, #4
 800b37a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800b37e:	e001      	b.n	800b384 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800b380:	2301      	movs	r3, #1
 800b382:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 800b384:	7bfb      	ldrb	r3, [r7, #15]
}
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
	...

0800b394 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b39c:	4b19      	ldr	r3, [pc, #100]	@ (800b404 <HAL_PWREx_ConfigSupply+0x70>)
 800b39e:	68db      	ldr	r3, [r3, #12]
 800b3a0:	f003 0304 	and.w	r3, r3, #4
 800b3a4:	2b04      	cmp	r3, #4
 800b3a6:	d00a      	beq.n	800b3be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b3a8:	4b16      	ldr	r3, [pc, #88]	@ (800b404 <HAL_PWREx_ConfigSupply+0x70>)
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	f003 0307 	and.w	r3, r3, #7
 800b3b0:	687a      	ldr	r2, [r7, #4]
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d001      	beq.n	800b3ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b3b6:	2301      	movs	r3, #1
 800b3b8:	e01f      	b.n	800b3fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	e01d      	b.n	800b3fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b3be:	4b11      	ldr	r3, [pc, #68]	@ (800b404 <HAL_PWREx_ConfigSupply+0x70>)
 800b3c0:	68db      	ldr	r3, [r3, #12]
 800b3c2:	f023 0207 	bic.w	r2, r3, #7
 800b3c6:	490f      	ldr	r1, [pc, #60]	@ (800b404 <HAL_PWREx_ConfigSupply+0x70>)
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	4313      	orrs	r3, r2
 800b3cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b3ce:	f7f9 fae7 	bl	80049a0 <HAL_GetTick>
 800b3d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b3d4:	e009      	b.n	800b3ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b3d6:	f7f9 fae3 	bl	80049a0 <HAL_GetTick>
 800b3da:	4602      	mov	r2, r0
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	1ad3      	subs	r3, r2, r3
 800b3e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b3e4:	d901      	bls.n	800b3ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	e007      	b.n	800b3fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b3ea:	4b06      	ldr	r3, [pc, #24]	@ (800b404 <HAL_PWREx_ConfigSupply+0x70>)
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b3f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b3f6:	d1ee      	bne.n	800b3d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b3f8:	2300      	movs	r3, #0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3710      	adds	r7, #16
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	58024800 	.word	0x58024800

0800b408 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b08c      	sub	sp, #48	@ 0x30
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	d101      	bne.n	800b41a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b416:	2301      	movs	r3, #1
 800b418:	e3c8      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0301 	and.w	r3, r3, #1
 800b422:	2b00      	cmp	r3, #0
 800b424:	f000 8087 	beq.w	800b536 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b428:	4b88      	ldr	r3, [pc, #544]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b42a:	691b      	ldr	r3, [r3, #16]
 800b42c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b430:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b432:	4b86      	ldr	r3, [pc, #536]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b434:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b436:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b43a:	2b10      	cmp	r3, #16
 800b43c:	d007      	beq.n	800b44e <HAL_RCC_OscConfig+0x46>
 800b43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b440:	2b18      	cmp	r3, #24
 800b442:	d110      	bne.n	800b466 <HAL_RCC_OscConfig+0x5e>
 800b444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	2b02      	cmp	r3, #2
 800b44c:	d10b      	bne.n	800b466 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b44e:	4b7f      	ldr	r3, [pc, #508]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b456:	2b00      	cmp	r3, #0
 800b458:	d06c      	beq.n	800b534 <HAL_RCC_OscConfig+0x12c>
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	685b      	ldr	r3, [r3, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d168      	bne.n	800b534 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b462:	2301      	movs	r3, #1
 800b464:	e3a2      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b46e:	d106      	bne.n	800b47e <HAL_RCC_OscConfig+0x76>
 800b470:	4b76      	ldr	r3, [pc, #472]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4a75      	ldr	r2, [pc, #468]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b47a:	6013      	str	r3, [r2, #0]
 800b47c:	e02e      	b.n	800b4dc <HAL_RCC_OscConfig+0xd4>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10c      	bne.n	800b4a0 <HAL_RCC_OscConfig+0x98>
 800b486:	4b71      	ldr	r3, [pc, #452]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a70      	ldr	r2, [pc, #448]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b48c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b490:	6013      	str	r3, [r2, #0]
 800b492:	4b6e      	ldr	r3, [pc, #440]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a6d      	ldr	r2, [pc, #436]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b498:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b49c:	6013      	str	r3, [r2, #0]
 800b49e:	e01d      	b.n	800b4dc <HAL_RCC_OscConfig+0xd4>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b4a8:	d10c      	bne.n	800b4c4 <HAL_RCC_OscConfig+0xbc>
 800b4aa:	4b68      	ldr	r3, [pc, #416]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a67      	ldr	r2, [pc, #412]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b4b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	4b65      	ldr	r3, [pc, #404]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	4a64      	ldr	r2, [pc, #400]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b4bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b4c0:	6013      	str	r3, [r2, #0]
 800b4c2:	e00b      	b.n	800b4dc <HAL_RCC_OscConfig+0xd4>
 800b4c4:	4b61      	ldr	r3, [pc, #388]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	4a60      	ldr	r2, [pc, #384]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b4ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4ce:	6013      	str	r3, [r2, #0]
 800b4d0:	4b5e      	ldr	r3, [pc, #376]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a5d      	ldr	r2, [pc, #372]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b4d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b4da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d013      	beq.n	800b50c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4e4:	f7f9 fa5c 	bl	80049a0 <HAL_GetTick>
 800b4e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4ea:	e008      	b.n	800b4fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b4ec:	f7f9 fa58 	bl	80049a0 <HAL_GetTick>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f4:	1ad3      	subs	r3, r2, r3
 800b4f6:	2b64      	cmp	r3, #100	@ 0x64
 800b4f8:	d901      	bls.n	800b4fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e356      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4fe:	4b53      	ldr	r3, [pc, #332]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b506:	2b00      	cmp	r3, #0
 800b508:	d0f0      	beq.n	800b4ec <HAL_RCC_OscConfig+0xe4>
 800b50a:	e014      	b.n	800b536 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b50c:	f7f9 fa48 	bl	80049a0 <HAL_GetTick>
 800b510:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b512:	e008      	b.n	800b526 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b514:	f7f9 fa44 	bl	80049a0 <HAL_GetTick>
 800b518:	4602      	mov	r2, r0
 800b51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51c:	1ad3      	subs	r3, r2, r3
 800b51e:	2b64      	cmp	r3, #100	@ 0x64
 800b520:	d901      	bls.n	800b526 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b522:	2303      	movs	r3, #3
 800b524:	e342      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b526:	4b49      	ldr	r3, [pc, #292]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1f0      	bne.n	800b514 <HAL_RCC_OscConfig+0x10c>
 800b532:	e000      	b.n	800b536 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 0302 	and.w	r3, r3, #2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 808c 	beq.w	800b65c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b544:	4b41      	ldr	r3, [pc, #260]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b54c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b54e:	4b3f      	ldr	r3, [pc, #252]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b552:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b554:	6a3b      	ldr	r3, [r7, #32]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d007      	beq.n	800b56a <HAL_RCC_OscConfig+0x162>
 800b55a:	6a3b      	ldr	r3, [r7, #32]
 800b55c:	2b18      	cmp	r3, #24
 800b55e:	d137      	bne.n	800b5d0 <HAL_RCC_OscConfig+0x1c8>
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	f003 0303 	and.w	r3, r3, #3
 800b566:	2b00      	cmp	r3, #0
 800b568:	d132      	bne.n	800b5d0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b56a:	4b38      	ldr	r3, [pc, #224]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f003 0304 	and.w	r3, r3, #4
 800b572:	2b00      	cmp	r3, #0
 800b574:	d005      	beq.n	800b582 <HAL_RCC_OscConfig+0x17a>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	68db      	ldr	r3, [r3, #12]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d101      	bne.n	800b582 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800b57e:	2301      	movs	r3, #1
 800b580:	e314      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b582:	4b32      	ldr	r3, [pc, #200]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f023 0219 	bic.w	r2, r3, #25
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	492f      	ldr	r1, [pc, #188]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b590:	4313      	orrs	r3, r2
 800b592:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b594:	f7f9 fa04 	bl	80049a0 <HAL_GetTick>
 800b598:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b59a:	e008      	b.n	800b5ae <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b59c:	f7f9 fa00 	bl	80049a0 <HAL_GetTick>
 800b5a0:	4602      	mov	r2, r0
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a4:	1ad3      	subs	r3, r2, r3
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	d901      	bls.n	800b5ae <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800b5aa:	2303      	movs	r3, #3
 800b5ac:	e2fe      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5ae:	4b27      	ldr	r3, [pc, #156]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0304 	and.w	r3, r3, #4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d0f0      	beq.n	800b59c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b5ba:	4b24      	ldr	r3, [pc, #144]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	061b      	lsls	r3, r3, #24
 800b5c8:	4920      	ldr	r1, [pc, #128]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b5ca:	4313      	orrs	r3, r2
 800b5cc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b5ce:	e045      	b.n	800b65c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d026      	beq.n	800b626 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b5d8:	4b1c      	ldr	r3, [pc, #112]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f023 0219 	bic.w	r2, r3, #25
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	4919      	ldr	r1, [pc, #100]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5ea:	f7f9 f9d9 	bl	80049a0 <HAL_GetTick>
 800b5ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b5f0:	e008      	b.n	800b604 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b5f2:	f7f9 f9d5 	bl	80049a0 <HAL_GetTick>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	2b02      	cmp	r3, #2
 800b5fe:	d901      	bls.n	800b604 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800b600:	2303      	movs	r3, #3
 800b602:	e2d3      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b604:	4b11      	ldr	r3, [pc, #68]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 0304 	and.w	r3, r3, #4
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d0f0      	beq.n	800b5f2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b610:	4b0e      	ldr	r3, [pc, #56]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b612:	685b      	ldr	r3, [r3, #4]
 800b614:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	061b      	lsls	r3, r3, #24
 800b61e:	490b      	ldr	r1, [pc, #44]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b620:	4313      	orrs	r3, r2
 800b622:	604b      	str	r3, [r1, #4]
 800b624:	e01a      	b.n	800b65c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b626:	4b09      	ldr	r3, [pc, #36]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	4a08      	ldr	r2, [pc, #32]	@ (800b64c <HAL_RCC_OscConfig+0x244>)
 800b62c:	f023 0301 	bic.w	r3, r3, #1
 800b630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b632:	f7f9 f9b5 	bl	80049a0 <HAL_GetTick>
 800b636:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b638:	e00a      	b.n	800b650 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b63a:	f7f9 f9b1 	bl	80049a0 <HAL_GetTick>
 800b63e:	4602      	mov	r2, r0
 800b640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	2b02      	cmp	r3, #2
 800b646:	d903      	bls.n	800b650 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800b648:	2303      	movs	r3, #3
 800b64a:	e2af      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
 800b64c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b650:	4b96      	ldr	r3, [pc, #600]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	f003 0304 	and.w	r3, r3, #4
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d1ee      	bne.n	800b63a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f003 0310 	and.w	r3, r3, #16
 800b664:	2b00      	cmp	r3, #0
 800b666:	d06a      	beq.n	800b73e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b668:	4b90      	ldr	r3, [pc, #576]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b66a:	691b      	ldr	r3, [r3, #16]
 800b66c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b670:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b672:	4b8e      	ldr	r3, [pc, #568]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b676:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	2b08      	cmp	r3, #8
 800b67c:	d007      	beq.n	800b68e <HAL_RCC_OscConfig+0x286>
 800b67e:	69bb      	ldr	r3, [r7, #24]
 800b680:	2b18      	cmp	r3, #24
 800b682:	d11b      	bne.n	800b6bc <HAL_RCC_OscConfig+0x2b4>
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	f003 0303 	and.w	r3, r3, #3
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d116      	bne.n	800b6bc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b68e:	4b87      	ldr	r3, [pc, #540]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b696:	2b00      	cmp	r3, #0
 800b698:	d005      	beq.n	800b6a6 <HAL_RCC_OscConfig+0x29e>
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	2b80      	cmp	r3, #128	@ 0x80
 800b6a0:	d001      	beq.n	800b6a6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e282      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b6a6:	4b81      	ldr	r3, [pc, #516]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b6a8:	68db      	ldr	r3, [r3, #12]
 800b6aa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	061b      	lsls	r3, r3, #24
 800b6b4:	497d      	ldr	r1, [pc, #500]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b6ba:	e040      	b.n	800b73e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	69db      	ldr	r3, [r3, #28]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d023      	beq.n	800b70c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b6c4:	4b79      	ldr	r3, [pc, #484]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	4a78      	ldr	r2, [pc, #480]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b6ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b6ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6d0:	f7f9 f966 	bl	80049a0 <HAL_GetTick>
 800b6d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b6d6:	e008      	b.n	800b6ea <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b6d8:	f7f9 f962 	bl	80049a0 <HAL_GetTick>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d901      	bls.n	800b6ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e260      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b6ea:	4b70      	ldr	r3, [pc, #448]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d0f0      	beq.n	800b6d8 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b6f6:	4b6d      	ldr	r3, [pc, #436]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b6f8:	68db      	ldr	r3, [r3, #12]
 800b6fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	6a1b      	ldr	r3, [r3, #32]
 800b702:	061b      	lsls	r3, r3, #24
 800b704:	4969      	ldr	r1, [pc, #420]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b706:	4313      	orrs	r3, r2
 800b708:	60cb      	str	r3, [r1, #12]
 800b70a:	e018      	b.n	800b73e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b70c:	4b67      	ldr	r3, [pc, #412]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a66      	ldr	r2, [pc, #408]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b712:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b718:	f7f9 f942 	bl	80049a0 <HAL_GetTick>
 800b71c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b71e:	e008      	b.n	800b732 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b720:	f7f9 f93e 	bl	80049a0 <HAL_GetTick>
 800b724:	4602      	mov	r2, r0
 800b726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	2b02      	cmp	r3, #2
 800b72c:	d901      	bls.n	800b732 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800b72e:	2303      	movs	r3, #3
 800b730:	e23c      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b732:	4b5e      	ldr	r3, [pc, #376]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1f0      	bne.n	800b720 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	f003 0308 	and.w	r3, r3, #8
 800b746:	2b00      	cmp	r3, #0
 800b748:	d036      	beq.n	800b7b8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	695b      	ldr	r3, [r3, #20]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d019      	beq.n	800b786 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b752:	4b56      	ldr	r3, [pc, #344]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b756:	4a55      	ldr	r2, [pc, #340]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b758:	f043 0301 	orr.w	r3, r3, #1
 800b75c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b75e:	f7f9 f91f 	bl	80049a0 <HAL_GetTick>
 800b762:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b764:	e008      	b.n	800b778 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b766:	f7f9 f91b 	bl	80049a0 <HAL_GetTick>
 800b76a:	4602      	mov	r2, r0
 800b76c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	2b02      	cmp	r3, #2
 800b772:	d901      	bls.n	800b778 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800b774:	2303      	movs	r3, #3
 800b776:	e219      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b778:	4b4c      	ldr	r3, [pc, #304]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b77a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b77c:	f003 0302 	and.w	r3, r3, #2
 800b780:	2b00      	cmp	r3, #0
 800b782:	d0f0      	beq.n	800b766 <HAL_RCC_OscConfig+0x35e>
 800b784:	e018      	b.n	800b7b8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b786:	4b49      	ldr	r3, [pc, #292]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b78a:	4a48      	ldr	r2, [pc, #288]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b78c:	f023 0301 	bic.w	r3, r3, #1
 800b790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b792:	f7f9 f905 	bl	80049a0 <HAL_GetTick>
 800b796:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b798:	e008      	b.n	800b7ac <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b79a:	f7f9 f901 	bl	80049a0 <HAL_GetTick>
 800b79e:	4602      	mov	r2, r0
 800b7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7a2:	1ad3      	subs	r3, r2, r3
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d901      	bls.n	800b7ac <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	e1ff      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b7ac:	4b3f      	ldr	r3, [pc, #252]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b7ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b7b0:	f003 0302 	and.w	r3, r3, #2
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d1f0      	bne.n	800b79a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0320 	and.w	r3, r3, #32
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d036      	beq.n	800b832 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d019      	beq.n	800b800 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b7cc:	4b37      	ldr	r3, [pc, #220]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a36      	ldr	r2, [pc, #216]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b7d2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b7d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b7d8:	f7f9 f8e2 	bl	80049a0 <HAL_GetTick>
 800b7dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b7de:	e008      	b.n	800b7f2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b7e0:	f7f9 f8de 	bl	80049a0 <HAL_GetTick>
 800b7e4:	4602      	mov	r2, r0
 800b7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b7e8:	1ad3      	subs	r3, r2, r3
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d901      	bls.n	800b7f2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	e1dc      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b7f2:	4b2e      	ldr	r3, [pc, #184]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d0f0      	beq.n	800b7e0 <HAL_RCC_OscConfig+0x3d8>
 800b7fe:	e018      	b.n	800b832 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b800:	4b2a      	ldr	r3, [pc, #168]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a29      	ldr	r2, [pc, #164]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b806:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b80a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b80c:	f7f9 f8c8 	bl	80049a0 <HAL_GetTick>
 800b810:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b812:	e008      	b.n	800b826 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b814:	f7f9 f8c4 	bl	80049a0 <HAL_GetTick>
 800b818:	4602      	mov	r2, r0
 800b81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d901      	bls.n	800b826 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b822:	2303      	movs	r3, #3
 800b824:	e1c2      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b826:	4b21      	ldr	r3, [pc, #132]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d1f0      	bne.n	800b814 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f003 0304 	and.w	r3, r3, #4
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	f000 8086 	beq.w	800b94c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b840:	4b1b      	ldr	r3, [pc, #108]	@ (800b8b0 <HAL_RCC_OscConfig+0x4a8>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	4a1a      	ldr	r2, [pc, #104]	@ (800b8b0 <HAL_RCC_OscConfig+0x4a8>)
 800b846:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b84a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b84c:	f7f9 f8a8 	bl	80049a0 <HAL_GetTick>
 800b850:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b852:	e008      	b.n	800b866 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b854:	f7f9 f8a4 	bl	80049a0 <HAL_GetTick>
 800b858:	4602      	mov	r2, r0
 800b85a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85c:	1ad3      	subs	r3, r2, r3
 800b85e:	2b64      	cmp	r3, #100	@ 0x64
 800b860:	d901      	bls.n	800b866 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b862:	2303      	movs	r3, #3
 800b864:	e1a2      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b866:	4b12      	ldr	r3, [pc, #72]	@ (800b8b0 <HAL_RCC_OscConfig+0x4a8>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d0f0      	beq.n	800b854 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	689b      	ldr	r3, [r3, #8]
 800b876:	2b01      	cmp	r3, #1
 800b878:	d106      	bne.n	800b888 <HAL_RCC_OscConfig+0x480>
 800b87a:	4b0c      	ldr	r3, [pc, #48]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b87c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b87e:	4a0b      	ldr	r2, [pc, #44]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b880:	f043 0301 	orr.w	r3, r3, #1
 800b884:	6713      	str	r3, [r2, #112]	@ 0x70
 800b886:	e032      	b.n	800b8ee <HAL_RCC_OscConfig+0x4e6>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	689b      	ldr	r3, [r3, #8]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d111      	bne.n	800b8b4 <HAL_RCC_OscConfig+0x4ac>
 800b890:	4b06      	ldr	r3, [pc, #24]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b894:	4a05      	ldr	r2, [pc, #20]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b896:	f023 0301 	bic.w	r3, r3, #1
 800b89a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b89c:	4b03      	ldr	r3, [pc, #12]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b89e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8a0:	4a02      	ldr	r2, [pc, #8]	@ (800b8ac <HAL_RCC_OscConfig+0x4a4>)
 800b8a2:	f023 0304 	bic.w	r3, r3, #4
 800b8a6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8a8:	e021      	b.n	800b8ee <HAL_RCC_OscConfig+0x4e6>
 800b8aa:	bf00      	nop
 800b8ac:	58024400 	.word	0x58024400
 800b8b0:	58024800 	.word	0x58024800
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	2b05      	cmp	r3, #5
 800b8ba:	d10c      	bne.n	800b8d6 <HAL_RCC_OscConfig+0x4ce>
 800b8bc:	4b83      	ldr	r3, [pc, #524]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b8be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8c0:	4a82      	ldr	r2, [pc, #520]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b8c2:	f043 0304 	orr.w	r3, r3, #4
 800b8c6:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8c8:	4b80      	ldr	r3, [pc, #512]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b8ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8cc:	4a7f      	ldr	r2, [pc, #508]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b8ce:	f043 0301 	orr.w	r3, r3, #1
 800b8d2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8d4:	e00b      	b.n	800b8ee <HAL_RCC_OscConfig+0x4e6>
 800b8d6:	4b7d      	ldr	r3, [pc, #500]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b8d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8da:	4a7c      	ldr	r2, [pc, #496]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b8dc:	f023 0301 	bic.w	r3, r3, #1
 800b8e0:	6713      	str	r3, [r2, #112]	@ 0x70
 800b8e2:	4b7a      	ldr	r3, [pc, #488]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b8e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b8e6:	4a79      	ldr	r2, [pc, #484]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b8e8:	f023 0304 	bic.w	r3, r3, #4
 800b8ec:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	689b      	ldr	r3, [r3, #8]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d015      	beq.n	800b922 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8f6:	f7f9 f853 	bl	80049a0 <HAL_GetTick>
 800b8fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b8fc:	e00a      	b.n	800b914 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b8fe:	f7f9 f84f 	bl	80049a0 <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d901      	bls.n	800b914 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b910:	2303      	movs	r3, #3
 800b912:	e14b      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b914:	4b6d      	ldr	r3, [pc, #436]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b916:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b918:	f003 0302 	and.w	r3, r3, #2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d0ee      	beq.n	800b8fe <HAL_RCC_OscConfig+0x4f6>
 800b920:	e014      	b.n	800b94c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b922:	f7f9 f83d 	bl	80049a0 <HAL_GetTick>
 800b926:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b928:	e00a      	b.n	800b940 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b92a:	f7f9 f839 	bl	80049a0 <HAL_GetTick>
 800b92e:	4602      	mov	r2, r0
 800b930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b938:	4293      	cmp	r3, r2
 800b93a:	d901      	bls.n	800b940 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b93c:	2303      	movs	r3, #3
 800b93e:	e135      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b940:	4b62      	ldr	r3, [pc, #392]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b944:	f003 0302 	and.w	r3, r3, #2
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d1ee      	bne.n	800b92a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b950:	2b00      	cmp	r3, #0
 800b952:	f000 812a 	beq.w	800bbaa <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b956:	4b5d      	ldr	r3, [pc, #372]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b95e:	2b18      	cmp	r3, #24
 800b960:	f000 80ba 	beq.w	800bad8 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b968:	2b02      	cmp	r3, #2
 800b96a:	f040 8095 	bne.w	800ba98 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b96e:	4b57      	ldr	r3, [pc, #348]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a56      	ldr	r2, [pc, #344]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b974:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b97a:	f7f9 f811 	bl	80049a0 <HAL_GetTick>
 800b97e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b980:	e008      	b.n	800b994 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b982:	f7f9 f80d 	bl	80049a0 <HAL_GetTick>
 800b986:	4602      	mov	r2, r0
 800b988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98a:	1ad3      	subs	r3, r2, r3
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d901      	bls.n	800b994 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b990:	2303      	movs	r3, #3
 800b992:	e10b      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b994:	4b4d      	ldr	r3, [pc, #308]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1f0      	bne.n	800b982 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b9a0:	4b4a      	ldr	r3, [pc, #296]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b9a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b9a4:	4b4a      	ldr	r3, [pc, #296]	@ (800bad0 <HAL_RCC_OscConfig+0x6c8>)
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	687a      	ldr	r2, [r7, #4]
 800b9aa:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b9b0:	0112      	lsls	r2, r2, #4
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	4945      	ldr	r1, [pc, #276]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	628b      	str	r3, [r1, #40]	@ 0x28
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b9c8:	3b01      	subs	r3, #1
 800b9ca:	025b      	lsls	r3, r3, #9
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	431a      	orrs	r2, r3
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	041b      	lsls	r3, r3, #16
 800b9d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b9dc:	431a      	orrs	r2, r3
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b9e2:	3b01      	subs	r3, #1
 800b9e4:	061b      	lsls	r3, r3, #24
 800b9e6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b9ea:	4938      	ldr	r1, [pc, #224]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b9f0:	4b36      	ldr	r3, [pc, #216]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b9f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f4:	4a35      	ldr	r2, [pc, #212]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b9f6:	f023 0301 	bic.w	r3, r3, #1
 800b9fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b9fc:	4b33      	ldr	r3, [pc, #204]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800b9fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ba00:	4b34      	ldr	r3, [pc, #208]	@ (800bad4 <HAL_RCC_OscConfig+0x6cc>)
 800ba02:	4013      	ands	r3, r2
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ba08:	00d2      	lsls	r2, r2, #3
 800ba0a:	4930      	ldr	r1, [pc, #192]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ba10:	4b2e      	ldr	r3, [pc, #184]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba14:	f023 020c 	bic.w	r2, r3, #12
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba1c:	492b      	ldr	r1, [pc, #172]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ba22:	4b2a      	ldr	r3, [pc, #168]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba26:	f023 0202 	bic.w	r2, r3, #2
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba2e:	4927      	ldr	r1, [pc, #156]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba30:	4313      	orrs	r3, r2
 800ba32:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ba34:	4b25      	ldr	r3, [pc, #148]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba38:	4a24      	ldr	r2, [pc, #144]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba40:	4b22      	ldr	r3, [pc, #136]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba44:	4a21      	ldr	r2, [pc, #132]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ba4c:	4b1f      	ldr	r3, [pc, #124]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba50:	4a1e      	ldr	r2, [pc, #120]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba52:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ba56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800ba58:	4b1c      	ldr	r3, [pc, #112]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba5c:	4a1b      	ldr	r2, [pc, #108]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba5e:	f043 0301 	orr.w	r3, r3, #1
 800ba62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ba64:	4b19      	ldr	r3, [pc, #100]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	4a18      	ldr	r2, [pc, #96]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ba6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba70:	f7f8 ff96 	bl	80049a0 <HAL_GetTick>
 800ba74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ba76:	e008      	b.n	800ba8a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba78:	f7f8 ff92 	bl	80049a0 <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d901      	bls.n	800ba8a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e090      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ba8a:	4b10      	ldr	r3, [pc, #64]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0f0      	beq.n	800ba78 <HAL_RCC_OscConfig+0x670>
 800ba96:	e088      	b.n	800bbaa <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba98:	4b0c      	ldr	r3, [pc, #48]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4a0b      	ldr	r2, [pc, #44]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800ba9e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800baa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800baa4:	f7f8 ff7c 	bl	80049a0 <HAL_GetTick>
 800baa8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800baaa:	e008      	b.n	800babe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800baac:	f7f8 ff78 	bl	80049a0 <HAL_GetTick>
 800bab0:	4602      	mov	r2, r0
 800bab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	2b02      	cmp	r3, #2
 800bab8:	d901      	bls.n	800babe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800baba:	2303      	movs	r3, #3
 800babc:	e076      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800babe:	4b03      	ldr	r3, [pc, #12]	@ (800bacc <HAL_RCC_OscConfig+0x6c4>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1f0      	bne.n	800baac <HAL_RCC_OscConfig+0x6a4>
 800baca:	e06e      	b.n	800bbaa <HAL_RCC_OscConfig+0x7a2>
 800bacc:	58024400 	.word	0x58024400
 800bad0:	fffffc0c 	.word	0xfffffc0c
 800bad4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bad8:	4b36      	ldr	r3, [pc, #216]	@ (800bbb4 <HAL_RCC_OscConfig+0x7ac>)
 800bada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800badc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bade:	4b35      	ldr	r3, [pc, #212]	@ (800bbb4 <HAL_RCC_OscConfig+0x7ac>)
 800bae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bae2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bae8:	2b01      	cmp	r3, #1
 800baea:	d031      	beq.n	800bb50 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800baec:	693b      	ldr	r3, [r7, #16]
 800baee:	f003 0203 	and.w	r2, r3, #3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d12a      	bne.n	800bb50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	091b      	lsrs	r3, r3, #4
 800bafe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb06:	429a      	cmp	r2, r3
 800bb08:	d122      	bne.n	800bb50 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb14:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bb16:	429a      	cmp	r2, r3
 800bb18:	d11a      	bne.n	800bb50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	0a5b      	lsrs	r3, r3, #9
 800bb1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bb28:	429a      	cmp	r2, r3
 800bb2a:	d111      	bne.n	800bb50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	0c1b      	lsrs	r3, r3, #16
 800bb30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bb3a:	429a      	cmp	r2, r3
 800bb3c:	d108      	bne.n	800bb50 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	0e1b      	lsrs	r3, r3, #24
 800bb42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d001      	beq.n	800bb54 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	e02b      	b.n	800bbac <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bb54:	4b17      	ldr	r3, [pc, #92]	@ (800bbb4 <HAL_RCC_OscConfig+0x7ac>)
 800bb56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bb58:	08db      	lsrs	r3, r3, #3
 800bb5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb5e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	d01f      	beq.n	800bbaa <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800bb6a:	4b12      	ldr	r3, [pc, #72]	@ (800bbb4 <HAL_RCC_OscConfig+0x7ac>)
 800bb6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb6e:	4a11      	ldr	r2, [pc, #68]	@ (800bbb4 <HAL_RCC_OscConfig+0x7ac>)
 800bb70:	f023 0301 	bic.w	r3, r3, #1
 800bb74:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bb76:	f7f8 ff13 	bl	80049a0 <HAL_GetTick>
 800bb7a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bb7c:	bf00      	nop
 800bb7e:	f7f8 ff0f 	bl	80049a0 <HAL_GetTick>
 800bb82:	4602      	mov	r2, r0
 800bb84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d0f9      	beq.n	800bb7e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bb8a:	4b0a      	ldr	r3, [pc, #40]	@ (800bbb4 <HAL_RCC_OscConfig+0x7ac>)
 800bb8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb8e:	4b0a      	ldr	r3, [pc, #40]	@ (800bbb8 <HAL_RCC_OscConfig+0x7b0>)
 800bb90:	4013      	ands	r3, r2
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800bb96:	00d2      	lsls	r2, r2, #3
 800bb98:	4906      	ldr	r1, [pc, #24]	@ (800bbb4 <HAL_RCC_OscConfig+0x7ac>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800bb9e:	4b05      	ldr	r3, [pc, #20]	@ (800bbb4 <HAL_RCC_OscConfig+0x7ac>)
 800bba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba2:	4a04      	ldr	r2, [pc, #16]	@ (800bbb4 <HAL_RCC_OscConfig+0x7ac>)
 800bba4:	f043 0301 	orr.w	r3, r3, #1
 800bba8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3730      	adds	r7, #48	@ 0x30
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	58024400 	.word	0x58024400
 800bbb8:	ffff0007 	.word	0xffff0007

0800bbbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b086      	sub	sp, #24
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d101      	bne.n	800bbd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e19c      	b.n	800bf0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bbd0:	4b8a      	ldr	r3, [pc, #552]	@ (800bdfc <HAL_RCC_ClockConfig+0x240>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 030f 	and.w	r3, r3, #15
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d910      	bls.n	800bc00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bbde:	4b87      	ldr	r3, [pc, #540]	@ (800bdfc <HAL_RCC_ClockConfig+0x240>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f023 020f 	bic.w	r2, r3, #15
 800bbe6:	4985      	ldr	r1, [pc, #532]	@ (800bdfc <HAL_RCC_ClockConfig+0x240>)
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	4313      	orrs	r3, r2
 800bbec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bbee:	4b83      	ldr	r3, [pc, #524]	@ (800bdfc <HAL_RCC_ClockConfig+0x240>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f003 030f 	and.w	r3, r3, #15
 800bbf6:	683a      	ldr	r2, [r7, #0]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d001      	beq.n	800bc00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e184      	b.n	800bf0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	f003 0304 	and.w	r3, r3, #4
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d010      	beq.n	800bc2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	691a      	ldr	r2, [r3, #16]
 800bc10:	4b7b      	ldr	r3, [pc, #492]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc12:	699b      	ldr	r3, [r3, #24]
 800bc14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d908      	bls.n	800bc2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bc1c:	4b78      	ldr	r3, [pc, #480]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc1e:	699b      	ldr	r3, [r3, #24]
 800bc20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	691b      	ldr	r3, [r3, #16]
 800bc28:	4975      	ldr	r1, [pc, #468]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f003 0308 	and.w	r3, r3, #8
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d010      	beq.n	800bc5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	695a      	ldr	r2, [r3, #20]
 800bc3e:	4b70      	ldr	r3, [pc, #448]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc40:	69db      	ldr	r3, [r3, #28]
 800bc42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d908      	bls.n	800bc5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bc4a:	4b6d      	ldr	r3, [pc, #436]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc4c:	69db      	ldr	r3, [r3, #28]
 800bc4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	695b      	ldr	r3, [r3, #20]
 800bc56:	496a      	ldr	r1, [pc, #424]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc58:	4313      	orrs	r3, r2
 800bc5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 0310 	and.w	r3, r3, #16
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d010      	beq.n	800bc8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	699a      	ldr	r2, [r3, #24]
 800bc6c:	4b64      	ldr	r3, [pc, #400]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc6e:	69db      	ldr	r3, [r3, #28]
 800bc70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d908      	bls.n	800bc8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bc78:	4b61      	ldr	r3, [pc, #388]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc7a:	69db      	ldr	r3, [r3, #28]
 800bc7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	699b      	ldr	r3, [r3, #24]
 800bc84:	495e      	ldr	r1, [pc, #376]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc86:	4313      	orrs	r3, r2
 800bc88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 0320 	and.w	r3, r3, #32
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d010      	beq.n	800bcb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	69da      	ldr	r2, [r3, #28]
 800bc9a:	4b59      	ldr	r3, [pc, #356]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bc9c:	6a1b      	ldr	r3, [r3, #32]
 800bc9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bca2:	429a      	cmp	r2, r3
 800bca4:	d908      	bls.n	800bcb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800bca6:	4b56      	ldr	r3, [pc, #344]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bca8:	6a1b      	ldr	r3, [r3, #32]
 800bcaa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	4953      	ldr	r1, [pc, #332]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0302 	and.w	r3, r3, #2
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d010      	beq.n	800bce6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	4b4d      	ldr	r3, [pc, #308]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bcca:	699b      	ldr	r3, [r3, #24]
 800bccc:	f003 030f 	and.w	r3, r3, #15
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d908      	bls.n	800bce6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bcd4:	4b4a      	ldr	r3, [pc, #296]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bcd6:	699b      	ldr	r3, [r3, #24]
 800bcd8:	f023 020f 	bic.w	r2, r3, #15
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	4947      	ldr	r1, [pc, #284]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bce2:	4313      	orrs	r3, r2
 800bce4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d055      	beq.n	800bd9e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bcf2:	4b43      	ldr	r3, [pc, #268]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bcf4:	699b      	ldr	r3, [r3, #24]
 800bcf6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	4940      	ldr	r1, [pc, #256]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bd00:	4313      	orrs	r3, r2
 800bd02:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	2b02      	cmp	r3, #2
 800bd0a:	d107      	bne.n	800bd1c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd0c:	4b3c      	ldr	r3, [pc, #240]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d121      	bne.n	800bd5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	e0f6      	b.n	800bf0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	2b03      	cmp	r3, #3
 800bd22:	d107      	bne.n	800bd34 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bd24:	4b36      	ldr	r3, [pc, #216]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d115      	bne.n	800bd5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e0ea      	b.n	800bf0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	2b01      	cmp	r3, #1
 800bd3a:	d107      	bne.n	800bd4c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bd3c:	4b30      	ldr	r3, [pc, #192]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d109      	bne.n	800bd5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bd48:	2301      	movs	r3, #1
 800bd4a:	e0de      	b.n	800bf0a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd4c:	4b2c      	ldr	r3, [pc, #176]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f003 0304 	and.w	r3, r3, #4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d101      	bne.n	800bd5c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	e0d6      	b.n	800bf0a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bd5c:	4b28      	ldr	r3, [pc, #160]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	f023 0207 	bic.w	r2, r3, #7
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	685b      	ldr	r3, [r3, #4]
 800bd68:	4925      	ldr	r1, [pc, #148]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd6e:	f7f8 fe17 	bl	80049a0 <HAL_GetTick>
 800bd72:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd74:	e00a      	b.n	800bd8c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd76:	f7f8 fe13 	bl	80049a0 <HAL_GetTick>
 800bd7a:	4602      	mov	r2, r0
 800bd7c:	697b      	ldr	r3, [r7, #20]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd84:	4293      	cmp	r3, r2
 800bd86:	d901      	bls.n	800bd8c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	e0be      	b.n	800bf0a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd8c:	4b1c      	ldr	r3, [pc, #112]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	00db      	lsls	r3, r3, #3
 800bd9a:	429a      	cmp	r2, r3
 800bd9c:	d1eb      	bne.n	800bd76 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 0302 	and.w	r3, r3, #2
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d010      	beq.n	800bdcc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	4b14      	ldr	r3, [pc, #80]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	f003 030f 	and.w	r3, r3, #15
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d208      	bcs.n	800bdcc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bdba:	4b11      	ldr	r3, [pc, #68]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bdbc:	699b      	ldr	r3, [r3, #24]
 800bdbe:	f023 020f 	bic.w	r2, r3, #15
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	68db      	ldr	r3, [r3, #12]
 800bdc6:	490e      	ldr	r1, [pc, #56]	@ (800be00 <HAL_RCC_ClockConfig+0x244>)
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bdcc:	4b0b      	ldr	r3, [pc, #44]	@ (800bdfc <HAL_RCC_ClockConfig+0x240>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f003 030f 	and.w	r3, r3, #15
 800bdd4:	683a      	ldr	r2, [r7, #0]
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d214      	bcs.n	800be04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdda:	4b08      	ldr	r3, [pc, #32]	@ (800bdfc <HAL_RCC_ClockConfig+0x240>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f023 020f 	bic.w	r2, r3, #15
 800bde2:	4906      	ldr	r1, [pc, #24]	@ (800bdfc <HAL_RCC_ClockConfig+0x240>)
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	4313      	orrs	r3, r2
 800bde8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdea:	4b04      	ldr	r3, [pc, #16]	@ (800bdfc <HAL_RCC_ClockConfig+0x240>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 030f 	and.w	r3, r3, #15
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d005      	beq.n	800be04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e086      	b.n	800bf0a <HAL_RCC_ClockConfig+0x34e>
 800bdfc:	52002000 	.word	0x52002000
 800be00:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f003 0304 	and.w	r3, r3, #4
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d010      	beq.n	800be32 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	691a      	ldr	r2, [r3, #16]
 800be14:	4b3f      	ldr	r3, [pc, #252]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800be16:	699b      	ldr	r3, [r3, #24]
 800be18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800be1c:	429a      	cmp	r2, r3
 800be1e:	d208      	bcs.n	800be32 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800be20:	4b3c      	ldr	r3, [pc, #240]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800be22:	699b      	ldr	r3, [r3, #24]
 800be24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	691b      	ldr	r3, [r3, #16]
 800be2c:	4939      	ldr	r1, [pc, #228]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800be2e:	4313      	orrs	r3, r2
 800be30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	f003 0308 	and.w	r3, r3, #8
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d010      	beq.n	800be60 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	695a      	ldr	r2, [r3, #20]
 800be42:	4b34      	ldr	r3, [pc, #208]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800be44:	69db      	ldr	r3, [r3, #28]
 800be46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800be4a:	429a      	cmp	r2, r3
 800be4c:	d208      	bcs.n	800be60 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800be4e:	4b31      	ldr	r3, [pc, #196]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800be50:	69db      	ldr	r3, [r3, #28]
 800be52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	695b      	ldr	r3, [r3, #20]
 800be5a:	492e      	ldr	r1, [pc, #184]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800be5c:	4313      	orrs	r3, r2
 800be5e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	f003 0310 	and.w	r3, r3, #16
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d010      	beq.n	800be8e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	699a      	ldr	r2, [r3, #24]
 800be70:	4b28      	ldr	r3, [pc, #160]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800be72:	69db      	ldr	r3, [r3, #28]
 800be74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800be78:	429a      	cmp	r2, r3
 800be7a:	d208      	bcs.n	800be8e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800be7c:	4b25      	ldr	r3, [pc, #148]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800be7e:	69db      	ldr	r3, [r3, #28]
 800be80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	699b      	ldr	r3, [r3, #24]
 800be88:	4922      	ldr	r1, [pc, #136]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800be8a:	4313      	orrs	r3, r2
 800be8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f003 0320 	and.w	r3, r3, #32
 800be96:	2b00      	cmp	r3, #0
 800be98:	d010      	beq.n	800bebc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	69da      	ldr	r2, [r3, #28]
 800be9e:	4b1d      	ldr	r3, [pc, #116]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800bea6:	429a      	cmp	r2, r3
 800bea8:	d208      	bcs.n	800bebc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800beaa:	4b1a      	ldr	r3, [pc, #104]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800beac:	6a1b      	ldr	r3, [r3, #32]
 800beae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	69db      	ldr	r3, [r3, #28]
 800beb6:	4917      	ldr	r1, [pc, #92]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800beb8:	4313      	orrs	r3, r2
 800beba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bebc:	f000 f834 	bl	800bf28 <HAL_RCC_GetSysClockFreq>
 800bec0:	4602      	mov	r2, r0
 800bec2:	4b14      	ldr	r3, [pc, #80]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800bec4:	699b      	ldr	r3, [r3, #24]
 800bec6:	0a1b      	lsrs	r3, r3, #8
 800bec8:	f003 030f 	and.w	r3, r3, #15
 800becc:	4912      	ldr	r1, [pc, #72]	@ (800bf18 <HAL_RCC_ClockConfig+0x35c>)
 800bece:	5ccb      	ldrb	r3, [r1, r3]
 800bed0:	f003 031f 	and.w	r3, r3, #31
 800bed4:	fa22 f303 	lsr.w	r3, r2, r3
 800bed8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800beda:	4b0e      	ldr	r3, [pc, #56]	@ (800bf14 <HAL_RCC_ClockConfig+0x358>)
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	f003 030f 	and.w	r3, r3, #15
 800bee2:	4a0d      	ldr	r2, [pc, #52]	@ (800bf18 <HAL_RCC_ClockConfig+0x35c>)
 800bee4:	5cd3      	ldrb	r3, [r2, r3]
 800bee6:	f003 031f 	and.w	r3, r3, #31
 800beea:	693a      	ldr	r2, [r7, #16]
 800beec:	fa22 f303 	lsr.w	r3, r2, r3
 800bef0:	4a0a      	ldr	r2, [pc, #40]	@ (800bf1c <HAL_RCC_ClockConfig+0x360>)
 800bef2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bef4:	4a0a      	ldr	r2, [pc, #40]	@ (800bf20 <HAL_RCC_ClockConfig+0x364>)
 800bef6:	693b      	ldr	r3, [r7, #16]
 800bef8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800befa:	4b0a      	ldr	r3, [pc, #40]	@ (800bf24 <HAL_RCC_ClockConfig+0x368>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	4618      	mov	r0, r3
 800bf00:	f7f8 fd04 	bl	800490c <HAL_InitTick>
 800bf04:	4603      	mov	r3, r0
 800bf06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800bf08:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3718      	adds	r7, #24
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	58024400 	.word	0x58024400
 800bf18:	08014298 	.word	0x08014298
 800bf1c:	24000004 	.word	0x24000004
 800bf20:	24000000 	.word	0x24000000
 800bf24:	24000008 	.word	0x24000008

0800bf28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b089      	sub	sp, #36	@ 0x24
 800bf2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bf2e:	4bb3      	ldr	r3, [pc, #716]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf30:	691b      	ldr	r3, [r3, #16]
 800bf32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf36:	2b18      	cmp	r3, #24
 800bf38:	f200 8155 	bhi.w	800c1e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800bf3c:	a201      	add	r2, pc, #4	@ (adr r2, 800bf44 <HAL_RCC_GetSysClockFreq+0x1c>)
 800bf3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf42:	bf00      	nop
 800bf44:	0800bfa9 	.word	0x0800bfa9
 800bf48:	0800c1e7 	.word	0x0800c1e7
 800bf4c:	0800c1e7 	.word	0x0800c1e7
 800bf50:	0800c1e7 	.word	0x0800c1e7
 800bf54:	0800c1e7 	.word	0x0800c1e7
 800bf58:	0800c1e7 	.word	0x0800c1e7
 800bf5c:	0800c1e7 	.word	0x0800c1e7
 800bf60:	0800c1e7 	.word	0x0800c1e7
 800bf64:	0800bfcf 	.word	0x0800bfcf
 800bf68:	0800c1e7 	.word	0x0800c1e7
 800bf6c:	0800c1e7 	.word	0x0800c1e7
 800bf70:	0800c1e7 	.word	0x0800c1e7
 800bf74:	0800c1e7 	.word	0x0800c1e7
 800bf78:	0800c1e7 	.word	0x0800c1e7
 800bf7c:	0800c1e7 	.word	0x0800c1e7
 800bf80:	0800c1e7 	.word	0x0800c1e7
 800bf84:	0800bfd5 	.word	0x0800bfd5
 800bf88:	0800c1e7 	.word	0x0800c1e7
 800bf8c:	0800c1e7 	.word	0x0800c1e7
 800bf90:	0800c1e7 	.word	0x0800c1e7
 800bf94:	0800c1e7 	.word	0x0800c1e7
 800bf98:	0800c1e7 	.word	0x0800c1e7
 800bf9c:	0800c1e7 	.word	0x0800c1e7
 800bfa0:	0800c1e7 	.word	0x0800c1e7
 800bfa4:	0800bfdb 	.word	0x0800bfdb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfa8:	4b94      	ldr	r3, [pc, #592]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	f003 0320 	and.w	r3, r3, #32
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d009      	beq.n	800bfc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfb4:	4b91      	ldr	r3, [pc, #580]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	08db      	lsrs	r3, r3, #3
 800bfba:	f003 0303 	and.w	r3, r3, #3
 800bfbe:	4a90      	ldr	r2, [pc, #576]	@ (800c200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bfc0:	fa22 f303 	lsr.w	r3, r2, r3
 800bfc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800bfc6:	e111      	b.n	800c1ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800bfc8:	4b8d      	ldr	r3, [pc, #564]	@ (800c200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bfca:	61bb      	str	r3, [r7, #24]
      break;
 800bfcc:	e10e      	b.n	800c1ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800bfce:	4b8d      	ldr	r3, [pc, #564]	@ (800c204 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bfd0:	61bb      	str	r3, [r7, #24]
      break;
 800bfd2:	e10b      	b.n	800c1ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800bfd4:	4b8c      	ldr	r3, [pc, #560]	@ (800c208 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bfd6:	61bb      	str	r3, [r7, #24]
      break;
 800bfd8:	e108      	b.n	800c1ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfda:	4b88      	ldr	r3, [pc, #544]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfde:	f003 0303 	and.w	r3, r3, #3
 800bfe2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800bfe4:	4b85      	ldr	r3, [pc, #532]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfe8:	091b      	lsrs	r3, r3, #4
 800bfea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bff0:	4b82      	ldr	r3, [pc, #520]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bff4:	f003 0301 	and.w	r3, r3, #1
 800bff8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bffa:	4b80      	ldr	r3, [pc, #512]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bffe:	08db      	lsrs	r3, r3, #3
 800c000:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	fb02 f303 	mul.w	r3, r2, r3
 800c00a:	ee07 3a90 	vmov	s15, r3
 800c00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c012:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 80e1 	beq.w	800c1e0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2b02      	cmp	r3, #2
 800c022:	f000 8083 	beq.w	800c12c <HAL_RCC_GetSysClockFreq+0x204>
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	2b02      	cmp	r3, #2
 800c02a:	f200 80a1 	bhi.w	800c170 <HAL_RCC_GetSysClockFreq+0x248>
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d003      	beq.n	800c03c <HAL_RCC_GetSysClockFreq+0x114>
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d056      	beq.n	800c0e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c03a:	e099      	b.n	800c170 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c03c:	4b6f      	ldr	r3, [pc, #444]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f003 0320 	and.w	r3, r3, #32
 800c044:	2b00      	cmp	r3, #0
 800c046:	d02d      	beq.n	800c0a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c048:	4b6c      	ldr	r3, [pc, #432]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	08db      	lsrs	r3, r3, #3
 800c04e:	f003 0303 	and.w	r3, r3, #3
 800c052:	4a6b      	ldr	r2, [pc, #428]	@ (800c200 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c054:	fa22 f303 	lsr.w	r3, r2, r3
 800c058:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	ee07 3a90 	vmov	s15, r3
 800c060:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	ee07 3a90 	vmov	s15, r3
 800c06a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c072:	4b62      	ldr	r3, [pc, #392]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c082:	ed97 6a02 	vldr	s12, [r7, #8]
 800c086:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800c20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c092:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c09e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c0a2:	e087      	b.n	800c1b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	ee07 3a90 	vmov	s15, r3
 800c0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800c210 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b6:	4b51      	ldr	r3, [pc, #324]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0be:	ee07 3a90 	vmov	s15, r3
 800c0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800c20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c0e6:	e065      	b.n	800c1b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	ee07 3a90 	vmov	s15, r3
 800c0ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800c214 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c0f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0fa:	4b40      	ldr	r3, [pc, #256]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c102:	ee07 3a90 	vmov	s15, r3
 800c106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c10a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c10e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c112:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c116:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c11a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c11e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c122:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c126:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c12a:	e043      	b.n	800c1b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	ee07 3a90 	vmov	s15, r3
 800c132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c136:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800c218 <HAL_RCC_GetSysClockFreq+0x2f0>
 800c13a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c13e:	4b2f      	ldr	r3, [pc, #188]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c146:	ee07 3a90 	vmov	s15, r3
 800c14a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c14e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c152:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800c20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c15a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c15e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c16a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c16e:	e021      	b.n	800c1b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	ee07 3a90 	vmov	s15, r3
 800c176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c17a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800c214 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c17e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c182:	4b1e      	ldr	r3, [pc, #120]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c18a:	ee07 3a90 	vmov	s15, r3
 800c18e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c192:	ed97 6a02 	vldr	s12, [r7, #8]
 800c196:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800c20c <HAL_RCC_GetSysClockFreq+0x2e4>
 800c19a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c19e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c1a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c1a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c1aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c1ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800c1b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c1b4:	4b11      	ldr	r3, [pc, #68]	@ (800c1fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c1b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1b8:	0a5b      	lsrs	r3, r3, #9
 800c1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1be:	3301      	adds	r3, #1
 800c1c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	ee07 3a90 	vmov	s15, r3
 800c1c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c1cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1d8:	ee17 3a90 	vmov	r3, s15
 800c1dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800c1de:	e005      	b.n	800c1ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	61bb      	str	r3, [r7, #24]
      break;
 800c1e4:	e002      	b.n	800c1ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800c1e6:	4b07      	ldr	r3, [pc, #28]	@ (800c204 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c1e8:	61bb      	str	r3, [r7, #24]
      break;
 800c1ea:	bf00      	nop
  }

  return sysclockfreq;
 800c1ec:	69bb      	ldr	r3, [r7, #24]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3724      	adds	r7, #36	@ 0x24
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
 800c1fa:	bf00      	nop
 800c1fc:	58024400 	.word	0x58024400
 800c200:	03d09000 	.word	0x03d09000
 800c204:	003d0900 	.word	0x003d0900
 800c208:	00b71b00 	.word	0x00b71b00
 800c20c:	46000000 	.word	0x46000000
 800c210:	4c742400 	.word	0x4c742400
 800c214:	4a742400 	.word	0x4a742400
 800c218:	4b371b00 	.word	0x4b371b00

0800c21c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c222:	f7ff fe81 	bl	800bf28 <HAL_RCC_GetSysClockFreq>
 800c226:	4602      	mov	r2, r0
 800c228:	4b10      	ldr	r3, [pc, #64]	@ (800c26c <HAL_RCC_GetHCLKFreq+0x50>)
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	0a1b      	lsrs	r3, r3, #8
 800c22e:	f003 030f 	and.w	r3, r3, #15
 800c232:	490f      	ldr	r1, [pc, #60]	@ (800c270 <HAL_RCC_GetHCLKFreq+0x54>)
 800c234:	5ccb      	ldrb	r3, [r1, r3]
 800c236:	f003 031f 	and.w	r3, r3, #31
 800c23a:	fa22 f303 	lsr.w	r3, r2, r3
 800c23e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c240:	4b0a      	ldr	r3, [pc, #40]	@ (800c26c <HAL_RCC_GetHCLKFreq+0x50>)
 800c242:	699b      	ldr	r3, [r3, #24]
 800c244:	f003 030f 	and.w	r3, r3, #15
 800c248:	4a09      	ldr	r2, [pc, #36]	@ (800c270 <HAL_RCC_GetHCLKFreq+0x54>)
 800c24a:	5cd3      	ldrb	r3, [r2, r3]
 800c24c:	f003 031f 	and.w	r3, r3, #31
 800c250:	687a      	ldr	r2, [r7, #4]
 800c252:	fa22 f303 	lsr.w	r3, r2, r3
 800c256:	4a07      	ldr	r2, [pc, #28]	@ (800c274 <HAL_RCC_GetHCLKFreq+0x58>)
 800c258:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c25a:	4a07      	ldr	r2, [pc, #28]	@ (800c278 <HAL_RCC_GetHCLKFreq+0x5c>)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c260:	4b04      	ldr	r3, [pc, #16]	@ (800c274 <HAL_RCC_GetHCLKFreq+0x58>)
 800c262:	681b      	ldr	r3, [r3, #0]
}
 800c264:	4618      	mov	r0, r3
 800c266:	3708      	adds	r7, #8
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	58024400 	.word	0x58024400
 800c270:	08014298 	.word	0x08014298
 800c274:	24000004 	.word	0x24000004
 800c278:	24000000 	.word	0x24000000

0800c27c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c280:	f7ff ffcc 	bl	800c21c <HAL_RCC_GetHCLKFreq>
 800c284:	4602      	mov	r2, r0
 800c286:	4b06      	ldr	r3, [pc, #24]	@ (800c2a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c288:	69db      	ldr	r3, [r3, #28]
 800c28a:	091b      	lsrs	r3, r3, #4
 800c28c:	f003 0307 	and.w	r3, r3, #7
 800c290:	4904      	ldr	r1, [pc, #16]	@ (800c2a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c292:	5ccb      	ldrb	r3, [r1, r3]
 800c294:	f003 031f 	and.w	r3, r3, #31
 800c298:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c29c:	4618      	mov	r0, r3
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	58024400 	.word	0x58024400
 800c2a4:	08014298 	.word	0x08014298

0800c2a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c2ac:	f7ff ffb6 	bl	800c21c <HAL_RCC_GetHCLKFreq>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	4b06      	ldr	r3, [pc, #24]	@ (800c2cc <HAL_RCC_GetPCLK2Freq+0x24>)
 800c2b4:	69db      	ldr	r3, [r3, #28]
 800c2b6:	0a1b      	lsrs	r3, r3, #8
 800c2b8:	f003 0307 	and.w	r3, r3, #7
 800c2bc:	4904      	ldr	r1, [pc, #16]	@ (800c2d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c2be:	5ccb      	ldrb	r3, [r1, r3]
 800c2c0:	f003 031f 	and.w	r3, r3, #31
 800c2c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	bd80      	pop	{r7, pc}
 800c2cc:	58024400 	.word	0x58024400
 800c2d0:	08014298 	.word	0x08014298

0800c2d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c2d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2d8:	b0c6      	sub	sp, #280	@ 0x118
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800c2f8:	2500      	movs	r5, #0
 800c2fa:	ea54 0305 	orrs.w	r3, r4, r5
 800c2fe:	d049      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800c300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c306:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c30a:	d02f      	beq.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800c30c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c310:	d828      	bhi.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c312:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c316:	d01a      	beq.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800c318:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c31c:	d822      	bhi.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c326:	d007      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c328:	e01c      	b.n	800c364 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c32a:	4bab      	ldr	r3, [pc, #684]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c32e:	4aaa      	ldr	r2, [pc, #680]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c334:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c336:	e01a      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c338:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c33c:	3308      	adds	r3, #8
 800c33e:	2102      	movs	r1, #2
 800c340:	4618      	mov	r0, r3
 800c342:	f002 fa49 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c346:	4603      	mov	r3, r0
 800c348:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c34c:	e00f      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c352:	3328      	adds	r3, #40	@ 0x28
 800c354:	2102      	movs	r1, #2
 800c356:	4618      	mov	r0, r3
 800c358:	f002 faf0 	bl	800e93c <RCCEx_PLL3_Config>
 800c35c:	4603      	mov	r3, r0
 800c35e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800c362:	e004      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c364:	2301      	movs	r3, #1
 800c366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c36a:	e000      	b.n	800c36e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800c36c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c36e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10a      	bne.n	800c38c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c376:	4b98      	ldr	r3, [pc, #608]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c37a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c37e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c384:	4a94      	ldr	r2, [pc, #592]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c386:	430b      	orrs	r3, r1
 800c388:	6513      	str	r3, [r2, #80]	@ 0x50
 800c38a:	e003      	b.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c38c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c390:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c39c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800c3a0:	f04f 0900 	mov.w	r9, #0
 800c3a4:	ea58 0309 	orrs.w	r3, r8, r9
 800c3a8:	d047      	beq.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800c3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3b0:	2b04      	cmp	r3, #4
 800c3b2:	d82a      	bhi.n	800c40a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800c3b4:	a201      	add	r2, pc, #4	@ (adr r2, 800c3bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800c3b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ba:	bf00      	nop
 800c3bc:	0800c3d1 	.word	0x0800c3d1
 800c3c0:	0800c3df 	.word	0x0800c3df
 800c3c4:	0800c3f5 	.word	0x0800c3f5
 800c3c8:	0800c413 	.word	0x0800c413
 800c3cc:	0800c413 	.word	0x0800c413
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3d0:	4b81      	ldr	r3, [pc, #516]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d4:	4a80      	ldr	r2, [pc, #512]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c3d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c3da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3dc:	e01a      	b.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3e2:	3308      	adds	r3, #8
 800c3e4:	2100      	movs	r1, #0
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f002 f9f6 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c3ec:	4603      	mov	r3, r0
 800c3ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c3f2:	e00f      	b.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c3f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3f8:	3328      	adds	r3, #40	@ 0x28
 800c3fa:	2100      	movs	r1, #0
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f002 fa9d 	bl	800e93c <RCCEx_PLL3_Config>
 800c402:	4603      	mov	r3, r0
 800c404:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c408:	e004      	b.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c410:	e000      	b.n	800c414 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800c412:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10a      	bne.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c41c:	4b6e      	ldr	r3, [pc, #440]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c41e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c420:	f023 0107 	bic.w	r1, r3, #7
 800c424:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c42a:	4a6b      	ldr	r2, [pc, #428]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c42c:	430b      	orrs	r3, r1
 800c42e:	6513      	str	r3, [r2, #80]	@ 0x50
 800c430:	e003      	b.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c432:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c436:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c43a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c442:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800c446:	f04f 0b00 	mov.w	fp, #0
 800c44a:	ea5a 030b 	orrs.w	r3, sl, fp
 800c44e:	d05b      	beq.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800c450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c454:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c458:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c45c:	d03b      	beq.n	800c4d6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800c45e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800c462:	d834      	bhi.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c464:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c468:	d037      	beq.n	800c4da <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c46a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c46e:	d82e      	bhi.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c470:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c474:	d033      	beq.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800c476:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800c47a:	d828      	bhi.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c47c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c480:	d01a      	beq.n	800c4b8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800c482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c486:	d822      	bhi.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d003      	beq.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800c48c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c490:	d007      	beq.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800c492:	e01c      	b.n	800c4ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c494:	4b50      	ldr	r3, [pc, #320]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c498:	4a4f      	ldr	r2, [pc, #316]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c49a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c49e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4a0:	e01e      	b.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a6:	3308      	adds	r3, #8
 800c4a8:	2100      	movs	r1, #0
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f002 f994 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c4b6:	e013      	b.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4bc:	3328      	adds	r3, #40	@ 0x28
 800c4be:	2100      	movs	r1, #0
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	f002 fa3b 	bl	800e93c <RCCEx_PLL3_Config>
 800c4c6:	4603      	mov	r3, r0
 800c4c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c4cc:	e008      	b.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4d4:	e004      	b.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c4d6:	bf00      	nop
 800c4d8:	e002      	b.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c4da:	bf00      	nop
 800c4dc:	e000      	b.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800c4de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10b      	bne.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c4e8:	4b3b      	ldr	r3, [pc, #236]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c4ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4ec:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800c4f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4f8:	4a37      	ldr	r2, [pc, #220]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c4fa:	430b      	orrs	r3, r1
 800c4fc:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4fe:	e003      	b.n	800c508 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c500:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c504:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c50c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c510:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c514:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800c518:	2300      	movs	r3, #0
 800c51a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800c51e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800c522:	460b      	mov	r3, r1
 800c524:	4313      	orrs	r3, r2
 800c526:	d05d      	beq.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800c528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c52c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c530:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c534:	d03b      	beq.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c536:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800c53a:	d834      	bhi.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c53c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c540:	d037      	beq.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800c542:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c546:	d82e      	bhi.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c548:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c54c:	d033      	beq.n	800c5b6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800c54e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800c552:	d828      	bhi.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c554:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c558:	d01a      	beq.n	800c590 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800c55a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800c55e:	d822      	bhi.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800c560:	2b00      	cmp	r3, #0
 800c562:	d003      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c564:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c568:	d007      	beq.n	800c57a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c56a:	e01c      	b.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c56c:	4b1a      	ldr	r3, [pc, #104]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c570:	4a19      	ldr	r2, [pc, #100]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c578:	e01e      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c57e:	3308      	adds	r3, #8
 800c580:	2100      	movs	r1, #0
 800c582:	4618      	mov	r0, r3
 800c584:	f002 f928 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c588:	4603      	mov	r3, r0
 800c58a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800c58e:	e013      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c594:	3328      	adds	r3, #40	@ 0x28
 800c596:	2100      	movs	r1, #0
 800c598:	4618      	mov	r0, r3
 800c59a:	f002 f9cf 	bl	800e93c <RCCEx_PLL3_Config>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800c5a4:	e008      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c5ac:	e004      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c5ae:	bf00      	nop
 800c5b0:	e002      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c5b2:	bf00      	nop
 800c5b4:	e000      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800c5b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10d      	bne.n	800c5dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c5c0:	4b05      	ldr	r3, [pc, #20]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c5c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800c5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c5d0:	4a01      	ldr	r2, [pc, #4]	@ (800c5d8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800c5d2:	430b      	orrs	r3, r1
 800c5d4:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5d6:	e005      	b.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800c5d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800c5e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800c5f0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800c5fa:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800c5fe:	460b      	mov	r3, r1
 800c600:	4313      	orrs	r3, r2
 800c602:	d03a      	beq.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800c604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c60a:	2b30      	cmp	r3, #48	@ 0x30
 800c60c:	d01f      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800c60e:	2b30      	cmp	r3, #48	@ 0x30
 800c610:	d819      	bhi.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c612:	2b20      	cmp	r3, #32
 800c614:	d00c      	beq.n	800c630 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800c616:	2b20      	cmp	r3, #32
 800c618:	d815      	bhi.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d019      	beq.n	800c652 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800c61e:	2b10      	cmp	r3, #16
 800c620:	d111      	bne.n	800c646 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c622:	4baa      	ldr	r3, [pc, #680]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c626:	4aa9      	ldr	r2, [pc, #676]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c628:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c62c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c62e:	e011      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c634:	3308      	adds	r3, #8
 800c636:	2102      	movs	r1, #2
 800c638:	4618      	mov	r0, r3
 800c63a:	f002 f8cd 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c63e:	4603      	mov	r3, r0
 800c640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800c644:	e006      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c646:	2301      	movs	r3, #1
 800c648:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c64c:	e002      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c64e:	bf00      	nop
 800c650:	e000      	b.n	800c654 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800c652:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c654:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10a      	bne.n	800c672 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800c65c:	4b9b      	ldr	r3, [pc, #620]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c65e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c660:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800c664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c668:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c66a:	4a98      	ldr	r2, [pc, #608]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c66c:	430b      	orrs	r3, r1
 800c66e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c670:	e003      	b.n	800c67a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c672:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c676:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c682:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800c686:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800c68a:	2300      	movs	r3, #0
 800c68c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800c690:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800c694:	460b      	mov	r3, r1
 800c696:	4313      	orrs	r3, r2
 800c698:	d051      	beq.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800c69a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c6a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c6a4:	d035      	beq.n	800c712 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800c6a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c6aa:	d82e      	bhi.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c6ac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c6b0:	d031      	beq.n	800c716 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800c6b2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c6b6:	d828      	bhi.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c6b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6bc:	d01a      	beq.n	800c6f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800c6be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c6c2:	d822      	bhi.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d003      	beq.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800c6c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6cc:	d007      	beq.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800c6ce:	e01c      	b.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c6d0:	4b7e      	ldr	r3, [pc, #504]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c6d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6d4:	4a7d      	ldr	r2, [pc, #500]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c6d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c6da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c6dc:	e01c      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6e2:	3308      	adds	r3, #8
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f002 f876 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c6ec:	4603      	mov	r3, r0
 800c6ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c6f2:	e011      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6f8:	3328      	adds	r3, #40	@ 0x28
 800c6fa:	2100      	movs	r1, #0
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f002 f91d 	bl	800e93c <RCCEx_PLL3_Config>
 800c702:	4603      	mov	r3, r0
 800c704:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800c708:	e006      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c70a:	2301      	movs	r3, #1
 800c70c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c710:	e002      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c712:	bf00      	nop
 800c714:	e000      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800c716:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10a      	bne.n	800c736 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c720:	4b6a      	ldr	r3, [pc, #424]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c724:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800c728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c72c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c72e:	4a67      	ldr	r2, [pc, #412]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c730:	430b      	orrs	r3, r1
 800c732:	6513      	str	r3, [r2, #80]	@ 0x50
 800c734:	e003      	b.n	800c73e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c736:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c73a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c73e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c746:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800c74a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c74e:	2300      	movs	r3, #0
 800c750:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c754:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800c758:	460b      	mov	r3, r1
 800c75a:	4313      	orrs	r3, r2
 800c75c:	d053      	beq.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800c75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c764:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c768:	d033      	beq.n	800c7d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800c76a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c76e:	d82c      	bhi.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c770:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c774:	d02f      	beq.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800c776:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c77a:	d826      	bhi.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c77c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c780:	d02b      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c782:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800c786:	d820      	bhi.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c788:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c78c:	d012      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800c78e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c792:	d81a      	bhi.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800c794:	2b00      	cmp	r3, #0
 800c796:	d022      	beq.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800c798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c79c:	d115      	bne.n	800c7ca <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7a2:	3308      	adds	r3, #8
 800c7a4:	2101      	movs	r1, #1
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f002 f816 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c7b2:	e015      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c7b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7b8:	3328      	adds	r3, #40	@ 0x28
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f002 f8bd 	bl	800e93c <RCCEx_PLL3_Config>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800c7c8:	e00a      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7d0:	e006      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c7d2:	bf00      	nop
 800c7d4:	e004      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c7d6:	bf00      	nop
 800c7d8:	e002      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c7da:	bf00      	nop
 800c7dc:	e000      	b.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800c7de:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c7e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10a      	bne.n	800c7fe <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c7e8:	4b38      	ldr	r3, [pc, #224]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c7ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ec:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800c7f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c7f6:	4a35      	ldr	r2, [pc, #212]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c7f8:	430b      	orrs	r3, r1
 800c7fa:	6513      	str	r3, [r2, #80]	@ 0x50
 800c7fc:	e003      	b.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c802:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800c812:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c816:	2300      	movs	r3, #0
 800c818:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c81c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c820:	460b      	mov	r3, r1
 800c822:	4313      	orrs	r3, r2
 800c824:	d058      	beq.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c82a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c82e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c832:	d033      	beq.n	800c89c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c838:	d82c      	bhi.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c83a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c83e:	d02f      	beq.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c844:	d826      	bhi.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c846:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c84a:	d02b      	beq.n	800c8a4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c84c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c850:	d820      	bhi.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c852:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c856:	d012      	beq.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c85c:	d81a      	bhi.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d022      	beq.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c862:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c866:	d115      	bne.n	800c894 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c868:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c86c:	3308      	adds	r3, #8
 800c86e:	2101      	movs	r1, #1
 800c870:	4618      	mov	r0, r3
 800c872:	f001 ffb1 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c876:	4603      	mov	r3, r0
 800c878:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c87c:	e015      	b.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c882:	3328      	adds	r3, #40	@ 0x28
 800c884:	2101      	movs	r1, #1
 800c886:	4618      	mov	r0, r3
 800c888:	f002 f858 	bl	800e93c <RCCEx_PLL3_Config>
 800c88c:	4603      	mov	r3, r0
 800c88e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c892:	e00a      	b.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c894:	2301      	movs	r3, #1
 800c896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c89a:	e006      	b.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c89c:	bf00      	nop
 800c89e:	e004      	b.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c8a0:	bf00      	nop
 800c8a2:	e002      	b.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c8a4:	bf00      	nop
 800c8a6:	e000      	b.n	800c8aa <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c8a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d10e      	bne.n	800c8d0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c8b2:	4b06      	ldr	r3, [pc, #24]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c8b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c8c2:	4a02      	ldr	r2, [pc, #8]	@ (800c8cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c8c4:	430b      	orrs	r3, r1
 800c8c6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c8c8:	e006      	b.n	800c8d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c8ca:	bf00      	nop
 800c8cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c8d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c8e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c8ee:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	d037      	beq.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c8fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c902:	d00e      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c904:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c908:	d816      	bhi.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d018      	beq.n	800c940 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c90e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c912:	d111      	bne.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c914:	4bc4      	ldr	r3, [pc, #784]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c918:	4ac3      	ldr	r2, [pc, #780]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c91a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c91e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c920:	e00f      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c922:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c926:	3308      	adds	r3, #8
 800c928:	2101      	movs	r1, #1
 800c92a:	4618      	mov	r0, r3
 800c92c:	f001 ff54 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c930:	4603      	mov	r3, r0
 800c932:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c936:	e004      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c938:	2301      	movs	r3, #1
 800c93a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c93e:	e000      	b.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c940:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c942:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10a      	bne.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c94a:	4bb7      	ldr	r3, [pc, #732]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c94c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c94e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c958:	4ab3      	ldr	r2, [pc, #716]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c95a:	430b      	orrs	r3, r1
 800c95c:	6513      	str	r3, [r2, #80]	@ 0x50
 800c95e:	e003      	b.n	800c968 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c964:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c96c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c970:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c974:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c978:	2300      	movs	r3, #0
 800c97a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c97e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c982:	460b      	mov	r3, r1
 800c984:	4313      	orrs	r3, r2
 800c986:	d039      	beq.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c98c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c98e:	2b03      	cmp	r3, #3
 800c990:	d81c      	bhi.n	800c9cc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c992:	a201      	add	r2, pc, #4	@ (adr r2, 800c998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c998:	0800c9d5 	.word	0x0800c9d5
 800c99c:	0800c9a9 	.word	0x0800c9a9
 800c9a0:	0800c9b7 	.word	0x0800c9b7
 800c9a4:	0800c9d5 	.word	0x0800c9d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9a8:	4b9f      	ldr	r3, [pc, #636]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9ac:	4a9e      	ldr	r2, [pc, #632]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c9b4:	e00f      	b.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ba:	3308      	adds	r3, #8
 800c9bc:	2102      	movs	r1, #2
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f001 ff0a 	bl	800e7d8 <RCCEx_PLL2_Config>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c9ca:	e004      	b.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9d2:	e000      	b.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c9d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d10a      	bne.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c9de:	4b92      	ldr	r3, [pc, #584]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c9e2:	f023 0103 	bic.w	r1, r3, #3
 800c9e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9ec:	4a8e      	ldr	r2, [pc, #568]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c9ee:	430b      	orrs	r3, r1
 800c9f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c9f2:	e003      	b.n	800c9fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca04:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800ca08:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ca12:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800ca16:	460b      	mov	r3, r1
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	f000 8099 	beq.w	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ca1e:	4b83      	ldr	r3, [pc, #524]	@ (800cc2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	4a82      	ldr	r2, [pc, #520]	@ (800cc2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ca24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ca28:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ca2a:	f7f7 ffb9 	bl	80049a0 <HAL_GetTick>
 800ca2e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca32:	e00b      	b.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ca34:	f7f7 ffb4 	bl	80049a0 <HAL_GetTick>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800ca3e:	1ad3      	subs	r3, r2, r3
 800ca40:	2b64      	cmp	r3, #100	@ 0x64
 800ca42:	d903      	bls.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800ca44:	2303      	movs	r3, #3
 800ca46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca4a:	e005      	b.n	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ca4c:	4b77      	ldr	r3, [pc, #476]	@ (800cc2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d0ed      	beq.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800ca58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d173      	bne.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ca60:	4b71      	ldr	r3, [pc, #452]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca62:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800ca64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800ca6c:	4053      	eors	r3, r2
 800ca6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d015      	beq.n	800caa2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ca76:	4b6c      	ldr	r3, [pc, #432]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ca7e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ca82:	4b69      	ldr	r3, [pc, #420]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca86:	4a68      	ldr	r2, [pc, #416]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ca8c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ca8e:	4b66      	ldr	r3, [pc, #408]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ca92:	4a65      	ldr	r2, [pc, #404]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ca98:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800ca9a:	4a63      	ldr	r2, [pc, #396]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ca9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800caa0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800caa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800caaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800caae:	d118      	bne.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cab0:	f7f7 ff76 	bl	80049a0 <HAL_GetTick>
 800cab4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cab8:	e00d      	b.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800caba:	f7f7 ff71 	bl	80049a0 <HAL_GetTick>
 800cabe:	4602      	mov	r2, r0
 800cac0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800cac4:	1ad2      	subs	r2, r2, r3
 800cac6:	f241 3388 	movw	r3, #5000	@ 0x1388
 800caca:	429a      	cmp	r2, r3
 800cacc:	d903      	bls.n	800cad6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800cace:	2303      	movs	r3, #3
 800cad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800cad4:	e005      	b.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cad6:	4b54      	ldr	r3, [pc, #336]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cada:	f003 0302 	and.w	r3, r3, #2
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d0eb      	beq.n	800caba <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800cae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d129      	bne.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800caea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800caf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800caf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cafa:	d10e      	bne.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0x846>
 800cafc:	4b4a      	ldr	r3, [pc, #296]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cafe:	691b      	ldr	r3, [r3, #16]
 800cb00:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800cb04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb08:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cb0c:	091a      	lsrs	r2, r3, #4
 800cb0e:	4b48      	ldr	r3, [pc, #288]	@ (800cc30 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800cb10:	4013      	ands	r3, r2
 800cb12:	4a45      	ldr	r2, [pc, #276]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb14:	430b      	orrs	r3, r1
 800cb16:	6113      	str	r3, [r2, #16]
 800cb18:	e005      	b.n	800cb26 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800cb1a:	4b43      	ldr	r3, [pc, #268]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	4a42      	ldr	r2, [pc, #264]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb20:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800cb24:	6113      	str	r3, [r2, #16]
 800cb26:	4b40      	ldr	r3, [pc, #256]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb28:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800cb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cb32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cb36:	4a3c      	ldr	r2, [pc, #240]	@ (800cc28 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800cb38:	430b      	orrs	r3, r1
 800cb3a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cb3c:	e008      	b.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800cb3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb42:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800cb46:	e003      	b.n	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb58:	f002 0301 	and.w	r3, r2, #1
 800cb5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cb60:	2300      	movs	r3, #0
 800cb62:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800cb66:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4313      	orrs	r3, r2
 800cb6e:	f000 808f 	beq.w	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800cb72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cb78:	2b28      	cmp	r3, #40	@ 0x28
 800cb7a:	d871      	bhi.n	800cc60 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800cb7c:	a201      	add	r2, pc, #4	@ (adr r2, 800cb84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800cb7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb82:	bf00      	nop
 800cb84:	0800cc69 	.word	0x0800cc69
 800cb88:	0800cc61 	.word	0x0800cc61
 800cb8c:	0800cc61 	.word	0x0800cc61
 800cb90:	0800cc61 	.word	0x0800cc61
 800cb94:	0800cc61 	.word	0x0800cc61
 800cb98:	0800cc61 	.word	0x0800cc61
 800cb9c:	0800cc61 	.word	0x0800cc61
 800cba0:	0800cc61 	.word	0x0800cc61
 800cba4:	0800cc35 	.word	0x0800cc35
 800cba8:	0800cc61 	.word	0x0800cc61
 800cbac:	0800cc61 	.word	0x0800cc61
 800cbb0:	0800cc61 	.word	0x0800cc61
 800cbb4:	0800cc61 	.word	0x0800cc61
 800cbb8:	0800cc61 	.word	0x0800cc61
 800cbbc:	0800cc61 	.word	0x0800cc61
 800cbc0:	0800cc61 	.word	0x0800cc61
 800cbc4:	0800cc4b 	.word	0x0800cc4b
 800cbc8:	0800cc61 	.word	0x0800cc61
 800cbcc:	0800cc61 	.word	0x0800cc61
 800cbd0:	0800cc61 	.word	0x0800cc61
 800cbd4:	0800cc61 	.word	0x0800cc61
 800cbd8:	0800cc61 	.word	0x0800cc61
 800cbdc:	0800cc61 	.word	0x0800cc61
 800cbe0:	0800cc61 	.word	0x0800cc61
 800cbe4:	0800cc69 	.word	0x0800cc69
 800cbe8:	0800cc61 	.word	0x0800cc61
 800cbec:	0800cc61 	.word	0x0800cc61
 800cbf0:	0800cc61 	.word	0x0800cc61
 800cbf4:	0800cc61 	.word	0x0800cc61
 800cbf8:	0800cc61 	.word	0x0800cc61
 800cbfc:	0800cc61 	.word	0x0800cc61
 800cc00:	0800cc61 	.word	0x0800cc61
 800cc04:	0800cc69 	.word	0x0800cc69
 800cc08:	0800cc61 	.word	0x0800cc61
 800cc0c:	0800cc61 	.word	0x0800cc61
 800cc10:	0800cc61 	.word	0x0800cc61
 800cc14:	0800cc61 	.word	0x0800cc61
 800cc18:	0800cc61 	.word	0x0800cc61
 800cc1c:	0800cc61 	.word	0x0800cc61
 800cc20:	0800cc61 	.word	0x0800cc61
 800cc24:	0800cc69 	.word	0x0800cc69
 800cc28:	58024400 	.word	0x58024400
 800cc2c:	58024800 	.word	0x58024800
 800cc30:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cc34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc38:	3308      	adds	r3, #8
 800cc3a:	2101      	movs	r1, #1
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f001 fdcb 	bl	800e7d8 <RCCEx_PLL2_Config>
 800cc42:	4603      	mov	r3, r0
 800cc44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cc48:	e00f      	b.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc4e:	3328      	adds	r3, #40	@ 0x28
 800cc50:	2101      	movs	r1, #1
 800cc52:	4618      	mov	r0, r3
 800cc54:	f001 fe72 	bl	800e93c <RCCEx_PLL3_Config>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800cc5e:	e004      	b.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cc66:	e000      	b.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800cc68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cc6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d10a      	bne.n	800cc88 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cc72:	4bbf      	ldr	r3, [pc, #764]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cc74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc76:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800cc7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cc80:	4abb      	ldr	r2, [pc, #748]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cc82:	430b      	orrs	r3, r1
 800cc84:	6553      	str	r3, [r2, #84]	@ 0x54
 800cc86:	e003      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc8c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cc90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc98:	f002 0302 	and.w	r3, r2, #2
 800cc9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cca0:	2300      	movs	r3, #0
 800cca2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800cca6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800ccaa:	460b      	mov	r3, r1
 800ccac:	4313      	orrs	r3, r2
 800ccae:	d041      	beq.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ccb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccb6:	2b05      	cmp	r3, #5
 800ccb8:	d824      	bhi.n	800cd04 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800ccba:	a201      	add	r2, pc, #4	@ (adr r2, 800ccc0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800ccbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc0:	0800cd0d 	.word	0x0800cd0d
 800ccc4:	0800ccd9 	.word	0x0800ccd9
 800ccc8:	0800ccef 	.word	0x0800ccef
 800cccc:	0800cd0d 	.word	0x0800cd0d
 800ccd0:	0800cd0d 	.word	0x0800cd0d
 800ccd4:	0800cd0d 	.word	0x0800cd0d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ccd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccdc:	3308      	adds	r3, #8
 800ccde:	2101      	movs	r1, #1
 800cce0:	4618      	mov	r0, r3
 800cce2:	f001 fd79 	bl	800e7d8 <RCCEx_PLL2_Config>
 800cce6:	4603      	mov	r3, r0
 800cce8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ccec:	e00f      	b.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ccee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccf2:	3328      	adds	r3, #40	@ 0x28
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f001 fe20 	bl	800e93c <RCCEx_PLL3_Config>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800cd02:	e004      	b.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cd0a:	e000      	b.n	800cd0e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800cd0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd0e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10a      	bne.n	800cd2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cd16:	4b96      	ldr	r3, [pc, #600]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cd1a:	f023 0107 	bic.w	r1, r3, #7
 800cd1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cd24:	4a92      	ldr	r2, [pc, #584]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cd26:	430b      	orrs	r3, r1
 800cd28:	6553      	str	r3, [r2, #84]	@ 0x54
 800cd2a:	e003      	b.n	800cd34 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd30:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cd34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3c:	f002 0304 	and.w	r3, r2, #4
 800cd40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800cd44:	2300      	movs	r3, #0
 800cd46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800cd4a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800cd4e:	460b      	mov	r3, r1
 800cd50:	4313      	orrs	r3, r2
 800cd52:	d044      	beq.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800cd54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cd5c:	2b05      	cmp	r3, #5
 800cd5e:	d825      	bhi.n	800cdac <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800cd60:	a201      	add	r2, pc, #4	@ (adr r2, 800cd68 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800cd62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd66:	bf00      	nop
 800cd68:	0800cdb5 	.word	0x0800cdb5
 800cd6c:	0800cd81 	.word	0x0800cd81
 800cd70:	0800cd97 	.word	0x0800cd97
 800cd74:	0800cdb5 	.word	0x0800cdb5
 800cd78:	0800cdb5 	.word	0x0800cdb5
 800cd7c:	0800cdb5 	.word	0x0800cdb5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd84:	3308      	adds	r3, #8
 800cd86:	2101      	movs	r1, #1
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f001 fd25 	bl	800e7d8 <RCCEx_PLL2_Config>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cd94:	e00f      	b.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd9a:	3328      	adds	r3, #40	@ 0x28
 800cd9c:	2101      	movs	r1, #1
 800cd9e:	4618      	mov	r0, r3
 800cda0:	f001 fdcc 	bl	800e93c <RCCEx_PLL3_Config>
 800cda4:	4603      	mov	r3, r0
 800cda6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800cdaa:	e004      	b.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cdac:	2301      	movs	r3, #1
 800cdae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cdb2:	e000      	b.n	800cdb6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800cdb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cdb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d10b      	bne.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cdbe:	4b6c      	ldr	r3, [pc, #432]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cdc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cdc2:	f023 0107 	bic.w	r1, r3, #7
 800cdc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800cdce:	4a68      	ldr	r2, [pc, #416]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cdd0:	430b      	orrs	r3, r1
 800cdd2:	6593      	str	r3, [r2, #88]	@ 0x58
 800cdd4:	e003      	b.n	800cdde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdd6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdda:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cdde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	f002 0320 	and.w	r3, r2, #32
 800cdea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800cdee:	2300      	movs	r3, #0
 800cdf0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cdf4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	4313      	orrs	r3, r2
 800cdfc:	d055      	beq.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cdfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce0a:	d033      	beq.n	800ce74 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800ce0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ce10:	d82c      	bhi.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce16:	d02f      	beq.n	800ce78 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800ce18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ce1c:	d826      	bhi.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ce22:	d02b      	beq.n	800ce7c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800ce24:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ce28:	d820      	bhi.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce2a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce2e:	d012      	beq.n	800ce56 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800ce30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce34:	d81a      	bhi.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d022      	beq.n	800ce80 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800ce3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ce3e:	d115      	bne.n	800ce6c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce44:	3308      	adds	r3, #8
 800ce46:	2100      	movs	r1, #0
 800ce48:	4618      	mov	r0, r3
 800ce4a:	f001 fcc5 	bl	800e7d8 <RCCEx_PLL2_Config>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ce54:	e015      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ce56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce5a:	3328      	adds	r3, #40	@ 0x28
 800ce5c:	2102      	movs	r1, #2
 800ce5e:	4618      	mov	r0, r3
 800ce60:	f001 fd6c 	bl	800e93c <RCCEx_PLL3_Config>
 800ce64:	4603      	mov	r3, r0
 800ce66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800ce6a:	e00a      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce6c:	2301      	movs	r3, #1
 800ce6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ce72:	e006      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ce74:	bf00      	nop
 800ce76:	e004      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ce78:	bf00      	nop
 800ce7a:	e002      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ce7c:	bf00      	nop
 800ce7e:	e000      	b.n	800ce82 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800ce80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce82:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d10b      	bne.n	800cea2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ce8a:	4b39      	ldr	r3, [pc, #228]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ce8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce8e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800ce92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ce96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce9a:	4a35      	ldr	r2, [pc, #212]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ce9c:	430b      	orrs	r3, r1
 800ce9e:	6553      	str	r3, [r2, #84]	@ 0x54
 800cea0:	e003      	b.n	800ceaa <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cea2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cea6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800ceaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ceae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800ceb6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ceba:	2300      	movs	r3, #0
 800cebc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cec0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800cec4:	460b      	mov	r3, r1
 800cec6:	4313      	orrs	r3, r2
 800cec8:	d058      	beq.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ceca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cece:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ced2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800ced6:	d033      	beq.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800ced8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800cedc:	d82c      	bhi.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cee2:	d02f      	beq.n	800cf44 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800cee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cee8:	d826      	bhi.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ceea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800ceee:	d02b      	beq.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800cef0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cef4:	d820      	bhi.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cef6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cefa:	d012      	beq.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800cefc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf00:	d81a      	bhi.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d022      	beq.n	800cf4c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800cf06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf0a:	d115      	bne.n	800cf38 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf10:	3308      	adds	r3, #8
 800cf12:	2100      	movs	r1, #0
 800cf14:	4618      	mov	r0, r3
 800cf16:	f001 fc5f 	bl	800e7d8 <RCCEx_PLL2_Config>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cf20:	e015      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf26:	3328      	adds	r3, #40	@ 0x28
 800cf28:	2102      	movs	r1, #2
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f001 fd06 	bl	800e93c <RCCEx_PLL3_Config>
 800cf30:	4603      	mov	r3, r0
 800cf32:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800cf36:	e00a      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cf3e:	e006      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cf40:	bf00      	nop
 800cf42:	e004      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cf44:	bf00      	nop
 800cf46:	e002      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cf48:	bf00      	nop
 800cf4a:	e000      	b.n	800cf4e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800cf4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cf4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d10e      	bne.n	800cf74 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cf56:	4b06      	ldr	r3, [pc, #24]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cf58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf5a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800cf5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf62:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800cf66:	4a02      	ldr	r2, [pc, #8]	@ (800cf70 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800cf68:	430b      	orrs	r3, r1
 800cf6a:	6593      	str	r3, [r2, #88]	@ 0x58
 800cf6c:	e006      	b.n	800cf7c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800cf6e:	bf00      	nop
 800cf70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf74:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cf78:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cf7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cf80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf84:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800cf88:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800cf92:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800cf96:	460b      	mov	r3, r1
 800cf98:	4313      	orrs	r3, r2
 800cf9a:	d055      	beq.n	800d048 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cf9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfa0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800cfa4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cfa8:	d033      	beq.n	800d012 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800cfaa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800cfae:	d82c      	bhi.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cfb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfb4:	d02f      	beq.n	800d016 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800cfb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cfba:	d826      	bhi.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cfbc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cfc0:	d02b      	beq.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800cfc2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800cfc6:	d820      	bhi.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cfc8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cfcc:	d012      	beq.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800cfce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800cfd2:	d81a      	bhi.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d022      	beq.n	800d01e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800cfd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cfdc:	d115      	bne.n	800d00a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cfde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cfe2:	3308      	adds	r3, #8
 800cfe4:	2100      	movs	r1, #0
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	f001 fbf6 	bl	800e7d8 <RCCEx_PLL2_Config>
 800cfec:	4603      	mov	r3, r0
 800cfee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800cff2:	e015      	b.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cff8:	3328      	adds	r3, #40	@ 0x28
 800cffa:	2102      	movs	r1, #2
 800cffc:	4618      	mov	r0, r3
 800cffe:	f001 fc9d 	bl	800e93c <RCCEx_PLL3_Config>
 800d002:	4603      	mov	r3, r0
 800d004:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800d008:	e00a      	b.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d00a:	2301      	movs	r3, #1
 800d00c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d010:	e006      	b.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d012:	bf00      	nop
 800d014:	e004      	b.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d016:	bf00      	nop
 800d018:	e002      	b.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d01a:	bf00      	nop
 800d01c:	e000      	b.n	800d020 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800d01e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d020:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10b      	bne.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d028:	4ba0      	ldr	r3, [pc, #640]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d02a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d02c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800d030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d034:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800d038:	4a9c      	ldr	r2, [pc, #624]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d03a:	430b      	orrs	r3, r1
 800d03c:	6593      	str	r3, [r2, #88]	@ 0x58
 800d03e:	e003      	b.n	800d048 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d040:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d044:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800d048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d050:	f002 0308 	and.w	r3, r2, #8
 800d054:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d058:	2300      	movs	r3, #0
 800d05a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800d05e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800d062:	460b      	mov	r3, r1
 800d064:	4313      	orrs	r3, r2
 800d066:	d01e      	beq.n	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800d068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d06c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d070:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d074:	d10c      	bne.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d07a:	3328      	adds	r3, #40	@ 0x28
 800d07c:	2102      	movs	r1, #2
 800d07e:	4618      	mov	r0, r3
 800d080:	f001 fc5c 	bl	800e93c <RCCEx_PLL3_Config>
 800d084:	4603      	mov	r3, r0
 800d086:	2b00      	cmp	r3, #0
 800d088:	d002      	beq.n	800d090 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800d08a:	2301      	movs	r3, #1
 800d08c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800d090:	4b86      	ldr	r3, [pc, #536]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d094:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d098:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d09c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d0a0:	4a82      	ldr	r2, [pc, #520]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0a2:	430b      	orrs	r3, r1
 800d0a4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ae:	f002 0310 	and.w	r3, r2, #16
 800d0b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d0bc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800d0c0:	460b      	mov	r3, r1
 800d0c2:	4313      	orrs	r3, r2
 800d0c4:	d01e      	beq.n	800d104 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800d0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d0ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d0d2:	d10c      	bne.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0d8:	3328      	adds	r3, #40	@ 0x28
 800d0da:	2102      	movs	r1, #2
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f001 fc2d 	bl	800e93c <RCCEx_PLL3_Config>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d002      	beq.n	800d0ee <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d0ee:	4b6f      	ldr	r3, [pc, #444]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d0f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d0f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d0fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d0fe:	4a6b      	ldr	r2, [pc, #428]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d100:	430b      	orrs	r3, r1
 800d102:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800d110:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d112:	2300      	movs	r3, #0
 800d114:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800d116:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800d11a:	460b      	mov	r3, r1
 800d11c:	4313      	orrs	r3, r2
 800d11e:	d03e      	beq.n	800d19e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800d120:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d124:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d128:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d12c:	d022      	beq.n	800d174 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800d12e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d132:	d81b      	bhi.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800d134:	2b00      	cmp	r3, #0
 800d136:	d003      	beq.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800d138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d13c:	d00b      	beq.n	800d156 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800d13e:	e015      	b.n	800d16c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d140:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d144:	3308      	adds	r3, #8
 800d146:	2100      	movs	r1, #0
 800d148:	4618      	mov	r0, r3
 800d14a:	f001 fb45 	bl	800e7d8 <RCCEx_PLL2_Config>
 800d14e:	4603      	mov	r3, r0
 800d150:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d154:	e00f      	b.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d156:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d15a:	3328      	adds	r3, #40	@ 0x28
 800d15c:	2102      	movs	r1, #2
 800d15e:	4618      	mov	r0, r3
 800d160:	f001 fbec 	bl	800e93c <RCCEx_PLL3_Config>
 800d164:	4603      	mov	r3, r0
 800d166:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800d16a:	e004      	b.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d16c:	2301      	movs	r3, #1
 800d16e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d172:	e000      	b.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800d174:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d176:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d10b      	bne.n	800d196 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d17e:	4b4b      	ldr	r3, [pc, #300]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d182:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800d186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d18a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d18e:	4a47      	ldr	r2, [pc, #284]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d190:	430b      	orrs	r3, r1
 800d192:	6593      	str	r3, [r2, #88]	@ 0x58
 800d194:	e003      	b.n	800d19e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d196:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d19a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d19e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800d1aa:	673b      	str	r3, [r7, #112]	@ 0x70
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	677b      	str	r3, [r7, #116]	@ 0x74
 800d1b0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	4313      	orrs	r3, r2
 800d1b8:	d03b      	beq.n	800d232 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800d1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d1c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d1c6:	d01f      	beq.n	800d208 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800d1c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800d1cc:	d818      	bhi.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800d1ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1d2:	d003      	beq.n	800d1dc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800d1d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d1d8:	d007      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800d1da:	e011      	b.n	800d200 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1dc:	4b33      	ldr	r3, [pc, #204]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e0:	4a32      	ldr	r2, [pc, #200]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d1e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d1e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800d1e8:	e00f      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d1ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d1ee:	3328      	adds	r3, #40	@ 0x28
 800d1f0:	2101      	movs	r1, #1
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f001 fba2 	bl	800e93c <RCCEx_PLL3_Config>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800d1fe:	e004      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d206:	e000      	b.n	800d20a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800d208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d20a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10b      	bne.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d212:	4b26      	ldr	r3, [pc, #152]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d216:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800d21a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d21e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d222:	4a22      	ldr	r2, [pc, #136]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d224:	430b      	orrs	r3, r1
 800d226:	6553      	str	r3, [r2, #84]	@ 0x54
 800d228:	e003      	b.n	800d232 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d22a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d22e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800d23e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d240:	2300      	movs	r3, #0
 800d242:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d244:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800d248:	460b      	mov	r3, r1
 800d24a:	4313      	orrs	r3, r2
 800d24c:	d034      	beq.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800d24e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d254:	2b00      	cmp	r3, #0
 800d256:	d003      	beq.n	800d260 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800d258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d25c:	d007      	beq.n	800d26e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800d25e:	e011      	b.n	800d284 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d260:	4b12      	ldr	r3, [pc, #72]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d264:	4a11      	ldr	r2, [pc, #68]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d26a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d26c:	e00e      	b.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d272:	3308      	adds	r3, #8
 800d274:	2102      	movs	r1, #2
 800d276:	4618      	mov	r0, r3
 800d278:	f001 faae 	bl	800e7d8 <RCCEx_PLL2_Config>
 800d27c:	4603      	mov	r3, r0
 800d27e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800d282:	e003      	b.n	800d28c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800d284:	2301      	movs	r3, #1
 800d286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d28a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d28c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d290:	2b00      	cmp	r3, #0
 800d292:	d10d      	bne.n	800d2b0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d294:	4b05      	ldr	r3, [pc, #20]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d298:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2a2:	4a02      	ldr	r2, [pc, #8]	@ (800d2ac <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800d2a4:	430b      	orrs	r3, r1
 800d2a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d2a8:	e006      	b.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800d2aa:	bf00      	nop
 800d2ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d2b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d2b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800d2c4:	663b      	str	r3, [r7, #96]	@ 0x60
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	667b      	str	r3, [r7, #100]	@ 0x64
 800d2ca:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800d2ce:	460b      	mov	r3, r1
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	d00c      	beq.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2d8:	3328      	adds	r3, #40	@ 0x28
 800d2da:	2102      	movs	r1, #2
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f001 fb2d 	bl	800e93c <RCCEx_PLL3_Config>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d002      	beq.n	800d2ee <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800d2fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d300:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800d304:	460b      	mov	r3, r1
 800d306:	4313      	orrs	r3, r2
 800d308:	d036      	beq.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800d30a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d30e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d310:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d314:	d018      	beq.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800d316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d31a:	d811      	bhi.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d31c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d320:	d014      	beq.n	800d34c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800d322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d326:	d80b      	bhi.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d011      	beq.n	800d350 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800d32c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d330:	d106      	bne.n	800d340 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d332:	4bb7      	ldr	r3, [pc, #732]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d336:	4ab6      	ldr	r2, [pc, #728]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d338:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d33c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800d33e:	e008      	b.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d340:	2301      	movs	r3, #1
 800d342:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800d346:	e004      	b.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d348:	bf00      	nop
 800d34a:	e002      	b.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d34c:	bf00      	nop
 800d34e:	e000      	b.n	800d352 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800d350:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d352:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10a      	bne.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d35a:	4bad      	ldr	r3, [pc, #692]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d35c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d35e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800d362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d366:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d368:	4aa9      	ldr	r2, [pc, #676]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d36a:	430b      	orrs	r3, r1
 800d36c:	6553      	str	r3, [r2, #84]	@ 0x54
 800d36e:	e003      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d380:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800d384:	653b      	str	r3, [r7, #80]	@ 0x50
 800d386:	2300      	movs	r3, #0
 800d388:	657b      	str	r3, [r7, #84]	@ 0x54
 800d38a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800d38e:	460b      	mov	r3, r1
 800d390:	4313      	orrs	r3, r2
 800d392:	d009      	beq.n	800d3a8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d394:	4b9e      	ldr	r3, [pc, #632]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d398:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800d39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d3a2:	4a9b      	ldr	r2, [pc, #620]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3a4:	430b      	orrs	r3, r1
 800d3a6:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d3a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b0:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800d3b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d3ba:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800d3be:	460b      	mov	r3, r1
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	d009      	beq.n	800d3d8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d3c4:	4b92      	ldr	r3, [pc, #584]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3c8:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800d3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d3d2:	4a8f      	ldr	r2, [pc, #572]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3d4:	430b      	orrs	r3, r1
 800d3d6:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d3d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d3dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3e0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800d3e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d3ea:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800d3ee:	460b      	mov	r3, r1
 800d3f0:	4313      	orrs	r3, r2
 800d3f2:	d00e      	beq.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d3f4:	4b86      	ldr	r3, [pc, #536]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	4a85      	ldr	r2, [pc, #532]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d3fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d3fe:	6113      	str	r3, [r2, #16]
 800d400:	4b83      	ldr	r3, [pc, #524]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d402:	6919      	ldr	r1, [r3, #16]
 800d404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d408:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d40c:	4a80      	ldr	r2, [pc, #512]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d40e:	430b      	orrs	r3, r1
 800d410:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d41a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800d41e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d420:	2300      	movs	r3, #0
 800d422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d424:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800d428:	460b      	mov	r3, r1
 800d42a:	4313      	orrs	r3, r2
 800d42c:	d009      	beq.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d42e:	4b78      	ldr	r3, [pc, #480]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d432:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d43a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d43c:	4a74      	ldr	r2, [pc, #464]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d43e:	430b      	orrs	r3, r1
 800d440:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d442:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d44a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800d44e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d450:	2300      	movs	r3, #0
 800d452:	637b      	str	r3, [r7, #52]	@ 0x34
 800d454:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800d458:	460b      	mov	r3, r1
 800d45a:	4313      	orrs	r3, r2
 800d45c:	d00a      	beq.n	800d474 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d45e:	4b6c      	ldr	r3, [pc, #432]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d462:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800d466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d46e:	4a68      	ldr	r2, [pc, #416]	@ (800d610 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800d470:	430b      	orrs	r3, r1
 800d472:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800d474:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d47c:	2100      	movs	r1, #0
 800d47e:	62b9      	str	r1, [r7, #40]	@ 0x28
 800d480:	f003 0301 	and.w	r3, r3, #1
 800d484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d486:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800d48a:	460b      	mov	r3, r1
 800d48c:	4313      	orrs	r3, r2
 800d48e:	d011      	beq.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d490:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d494:	3308      	adds	r3, #8
 800d496:	2100      	movs	r1, #0
 800d498:	4618      	mov	r0, r3
 800d49a:	f001 f99d 	bl	800e7d8 <RCCEx_PLL2_Config>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d4a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d003      	beq.n	800d4b4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800d4b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4bc:	2100      	movs	r1, #0
 800d4be:	6239      	str	r1, [r7, #32]
 800d4c0:	f003 0302 	and.w	r3, r3, #2
 800d4c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800d4c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800d4ca:	460b      	mov	r3, r1
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	d011      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4d4:	3308      	adds	r3, #8
 800d4d6:	2101      	movs	r1, #1
 800d4d8:	4618      	mov	r0, r3
 800d4da:	f001 f97d 	bl	800e7d8 <RCCEx_PLL2_Config>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d4e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d003      	beq.n	800d4f4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d4f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800d4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	61b9      	str	r1, [r7, #24]
 800d500:	f003 0304 	and.w	r3, r3, #4
 800d504:	61fb      	str	r3, [r7, #28]
 800d506:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800d50a:	460b      	mov	r3, r1
 800d50c:	4313      	orrs	r3, r2
 800d50e:	d011      	beq.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d514:	3308      	adds	r3, #8
 800d516:	2102      	movs	r1, #2
 800d518:	4618      	mov	r0, r3
 800d51a:	f001 f95d 	bl	800e7d8 <RCCEx_PLL2_Config>
 800d51e:	4603      	mov	r3, r0
 800d520:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d524:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d003      	beq.n	800d534 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d52c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d530:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800d534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d53c:	2100      	movs	r1, #0
 800d53e:	6139      	str	r1, [r7, #16]
 800d540:	f003 0308 	and.w	r3, r3, #8
 800d544:	617b      	str	r3, [r7, #20]
 800d546:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800d54a:	460b      	mov	r3, r1
 800d54c:	4313      	orrs	r3, r2
 800d54e:	d011      	beq.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d554:	3328      	adds	r3, #40	@ 0x28
 800d556:	2100      	movs	r1, #0
 800d558:	4618      	mov	r0, r3
 800d55a:	f001 f9ef 	bl	800e93c <RCCEx_PLL3_Config>
 800d55e:	4603      	mov	r3, r0
 800d560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800d564:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d003      	beq.n	800d574 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d56c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800d574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d57c:	2100      	movs	r1, #0
 800d57e:	60b9      	str	r1, [r7, #8]
 800d580:	f003 0310 	and.w	r3, r3, #16
 800d584:	60fb      	str	r3, [r7, #12]
 800d586:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d58a:	460b      	mov	r3, r1
 800d58c:	4313      	orrs	r3, r2
 800d58e:	d011      	beq.n	800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d594:	3328      	adds	r3, #40	@ 0x28
 800d596:	2101      	movs	r1, #1
 800d598:	4618      	mov	r0, r3
 800d59a:	f001 f9cf 	bl	800e93c <RCCEx_PLL3_Config>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d5a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d003      	beq.n	800d5b4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d5b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5bc:	2100      	movs	r1, #0
 800d5be:	6039      	str	r1, [r7, #0]
 800d5c0:	f003 0320 	and.w	r3, r3, #32
 800d5c4:	607b      	str	r3, [r7, #4]
 800d5c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d5ca:	460b      	mov	r3, r1
 800d5cc:	4313      	orrs	r3, r2
 800d5ce:	d011      	beq.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800d5d4:	3328      	adds	r3, #40	@ 0x28
 800d5d6:	2102      	movs	r1, #2
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f001 f9af 	bl	800e93c <RCCEx_PLL3_Config>
 800d5de:	4603      	mov	r3, r0
 800d5e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800d5e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d003      	beq.n	800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800d5f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800d5f4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d101      	bne.n	800d600 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	e000      	b.n	800d602 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800d600:	2301      	movs	r3, #1
}
 800d602:	4618      	mov	r0, r3
 800d604:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800d608:	46bd      	mov	sp, r7
 800d60a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d60e:	bf00      	nop
 800d610:	58024400 	.word	0x58024400

0800d614 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b090      	sub	sp, #64	@ 0x40
 800d618:	af00      	add	r7, sp, #0
 800d61a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d61e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d622:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800d626:	430b      	orrs	r3, r1
 800d628:	f040 8094 	bne.w	800d754 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d62c:	4b9b      	ldr	r3, [pc, #620]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d62e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d630:	f003 0307 	and.w	r3, r3, #7
 800d634:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d638:	2b04      	cmp	r3, #4
 800d63a:	f200 8087 	bhi.w	800d74c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800d63e:	a201      	add	r2, pc, #4	@ (adr r2, 800d644 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800d640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d644:	0800d659 	.word	0x0800d659
 800d648:	0800d681 	.word	0x0800d681
 800d64c:	0800d6a9 	.word	0x0800d6a9
 800d650:	0800d745 	.word	0x0800d745
 800d654:	0800d6d1 	.word	0x0800d6d1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d658:	4b90      	ldr	r3, [pc, #576]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d664:	d108      	bne.n	800d678 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 ff62 	bl	800e534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d674:	f000 bc93 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d678:	2300      	movs	r3, #0
 800d67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d67c:	f000 bc8f 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d680:	4b86      	ldr	r3, [pc, #536]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d688:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d68c:	d108      	bne.n	800d6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d68e:	f107 0318 	add.w	r3, r7, #24
 800d692:	4618      	mov	r0, r3
 800d694:	f000 fca6 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d698:	69bb      	ldr	r3, [r7, #24]
 800d69a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d69c:	f000 bc7f 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6a4:	f000 bc7b 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d6a8:	4b7c      	ldr	r3, [pc, #496]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d6b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d6b4:	d108      	bne.n	800d6c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d6b6:	f107 030c 	add.w	r3, r7, #12
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f000 fde6 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6c4:	f000 bc6b 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6cc:	f000 bc67 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d6d0:	4b72      	ldr	r3, [pc, #456]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d6d4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d6d8:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d6da:	4b70      	ldr	r3, [pc, #448]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f003 0304 	and.w	r3, r3, #4
 800d6e2:	2b04      	cmp	r3, #4
 800d6e4:	d10c      	bne.n	800d700 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800d6e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d109      	bne.n	800d700 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6ec:	4b6b      	ldr	r3, [pc, #428]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	08db      	lsrs	r3, r3, #3
 800d6f2:	f003 0303 	and.w	r3, r3, #3
 800d6f6:	4a6a      	ldr	r2, [pc, #424]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d6f8:	fa22 f303 	lsr.w	r3, r2, r3
 800d6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d6fe:	e01f      	b.n	800d740 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d700:	4b66      	ldr	r3, [pc, #408]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d70c:	d106      	bne.n	800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800d70e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d710:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d714:	d102      	bne.n	800d71c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d716:	4b63      	ldr	r3, [pc, #396]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d718:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d71a:	e011      	b.n	800d740 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d71c:	4b5f      	ldr	r3, [pc, #380]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d724:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d728:	d106      	bne.n	800d738 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800d72a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d72c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d730:	d102      	bne.n	800d738 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d732:	4b5d      	ldr	r3, [pc, #372]	@ (800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d736:	e003      	b.n	800d740 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d738:	2300      	movs	r3, #0
 800d73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d73c:	f000 bc2f 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d740:	f000 bc2d 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d744:	4b59      	ldr	r3, [pc, #356]	@ (800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d746:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d748:	f000 bc29 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d74c:	2300      	movs	r3, #0
 800d74e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d750:	f000 bc25 	b.w	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d754:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d758:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800d75c:	430b      	orrs	r3, r1
 800d75e:	f040 80a7 	bne.w	800d8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d762:	4b4e      	ldr	r3, [pc, #312]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d766:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800d76a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d76c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d76e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d772:	d054      	beq.n	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d776:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d77a:	f200 808b 	bhi.w	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d780:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d784:	f000 8083 	beq.w	800d88e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800d788:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800d78e:	f200 8081 	bhi.w	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d794:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d798:	d02f      	beq.n	800d7fa <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800d79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d7a0:	d878      	bhi.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d004      	beq.n	800d7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800d7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d7ae:	d012      	beq.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800d7b0:	e070      	b.n	800d894 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d7b2:	4b3a      	ldr	r3, [pc, #232]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d7ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d7be:	d107      	bne.n	800d7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d7c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	f000 feb5 	bl	800e534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d7ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7ce:	e3e6      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7d4:	e3e3      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d7d6:	4b31      	ldr	r3, [pc, #196]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d7de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d7e2:	d107      	bne.n	800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7e4:	f107 0318 	add.w	r3, r7, #24
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 fbfb 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d7ee:	69bb      	ldr	r3, [r7, #24]
 800d7f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d7f2:	e3d4      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7f8:	e3d1      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d7fa:	4b28      	ldr	r3, [pc, #160]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d802:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d806:	d107      	bne.n	800d818 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d808:	f107 030c 	add.w	r3, r7, #12
 800d80c:	4618      	mov	r0, r3
 800d80e:	f000 fd3d 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d816:	e3c2      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d81c:	e3bf      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d81e:	4b1f      	ldr	r3, [pc, #124]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d822:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d826:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d828:	4b1c      	ldr	r3, [pc, #112]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f003 0304 	and.w	r3, r3, #4
 800d830:	2b04      	cmp	r3, #4
 800d832:	d10c      	bne.n	800d84e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d836:	2b00      	cmp	r3, #0
 800d838:	d109      	bne.n	800d84e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d83a:	4b18      	ldr	r3, [pc, #96]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	08db      	lsrs	r3, r3, #3
 800d840:	f003 0303 	and.w	r3, r3, #3
 800d844:	4a16      	ldr	r2, [pc, #88]	@ (800d8a0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d846:	fa22 f303 	lsr.w	r3, r2, r3
 800d84a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d84c:	e01e      	b.n	800d88c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d84e:	4b13      	ldr	r3, [pc, #76]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d85a:	d106      	bne.n	800d86a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d85c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d85e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d862:	d102      	bne.n	800d86a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d864:	4b0f      	ldr	r3, [pc, #60]	@ (800d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d868:	e010      	b.n	800d88c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d86a:	4b0c      	ldr	r3, [pc, #48]	@ (800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d872:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d876:	d106      	bne.n	800d886 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d87a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d87e:	d102      	bne.n	800d886 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d880:	4b09      	ldr	r3, [pc, #36]	@ (800d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d882:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d884:	e002      	b.n	800d88c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d886:	2300      	movs	r3, #0
 800d888:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d88a:	e388      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d88c:	e387      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d88e:	4b07      	ldr	r3, [pc, #28]	@ (800d8ac <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d892:	e384      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d894:	2300      	movs	r3, #0
 800d896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d898:	e381      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d89a:	bf00      	nop
 800d89c:	58024400 	.word	0x58024400
 800d8a0:	03d09000 	.word	0x03d09000
 800d8a4:	003d0900 	.word	0x003d0900
 800d8a8:	00b71b00 	.word	0x00b71b00
 800d8ac:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d8b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8b4:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d8b8:	430b      	orrs	r3, r1
 800d8ba:	f040 809c 	bne.w	800d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d8be:	4b9e      	ldr	r3, [pc, #632]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d8c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d8c2:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d8c6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d8c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d8ce:	d054      	beq.n	800d97a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d8d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d8d6:	f200 808b 	bhi.w	800d9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d8e0:	f000 8083 	beq.w	800d9ea <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d8e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d8ea:	f200 8081 	bhi.w	800d9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d8f4:	d02f      	beq.n	800d956 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d8f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d8fc:	d878      	bhi.n	800d9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d8fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d900:	2b00      	cmp	r3, #0
 800d902:	d004      	beq.n	800d90e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d906:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d90a:	d012      	beq.n	800d932 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d90c:	e070      	b.n	800d9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d90e:	4b8a      	ldr	r3, [pc, #552]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d910:	681b      	ldr	r3, [r3, #0]
 800d912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d916:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d91a:	d107      	bne.n	800d92c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d91c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d920:	4618      	mov	r0, r3
 800d922:	f000 fe07 	bl	800e534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d92a:	e338      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d92c:	2300      	movs	r3, #0
 800d92e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d930:	e335      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d932:	4b81      	ldr	r3, [pc, #516]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d93a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d93e:	d107      	bne.n	800d950 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d940:	f107 0318 	add.w	r3, r7, #24
 800d944:	4618      	mov	r0, r3
 800d946:	f000 fb4d 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d94a:	69bb      	ldr	r3, [r7, #24]
 800d94c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d94e:	e326      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d950:	2300      	movs	r3, #0
 800d952:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d954:	e323      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d956:	4b78      	ldr	r3, [pc, #480]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d95e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d962:	d107      	bne.n	800d974 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d964:	f107 030c 	add.w	r3, r7, #12
 800d968:	4618      	mov	r0, r3
 800d96a:	f000 fc8f 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d972:	e314      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d974:	2300      	movs	r3, #0
 800d976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d978:	e311      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d97a:	4b6f      	ldr	r3, [pc, #444]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d97c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d97e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d982:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d984:	4b6c      	ldr	r3, [pc, #432]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f003 0304 	and.w	r3, r3, #4
 800d98c:	2b04      	cmp	r3, #4
 800d98e:	d10c      	bne.n	800d9aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d992:	2b00      	cmp	r3, #0
 800d994:	d109      	bne.n	800d9aa <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d996:	4b68      	ldr	r3, [pc, #416]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	08db      	lsrs	r3, r3, #3
 800d99c:	f003 0303 	and.w	r3, r3, #3
 800d9a0:	4a66      	ldr	r2, [pc, #408]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d9a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d9a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9a8:	e01e      	b.n	800d9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d9aa:	4b63      	ldr	r3, [pc, #396]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d9b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d9b6:	d106      	bne.n	800d9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d9b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9ba:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d9be:	d102      	bne.n	800d9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d9c0:	4b5f      	ldr	r3, [pc, #380]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9c4:	e010      	b.n	800d9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d9c6:	4b5c      	ldr	r3, [pc, #368]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d9ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d9d2:	d106      	bne.n	800d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d9d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d9da:	d102      	bne.n	800d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d9dc:	4b59      	ldr	r3, [pc, #356]	@ (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d9de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9e0:	e002      	b.n	800d9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d9e6:	e2da      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d9e8:	e2d9      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d9ea:	4b57      	ldr	r3, [pc, #348]	@ (800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9ee:	e2d6      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d9f4:	e2d3      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d9f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d9fa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d9fe:	430b      	orrs	r3, r1
 800da00:	f040 80a7 	bne.w	800db52 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800da04:	4b4c      	ldr	r3, [pc, #304]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800da06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da08:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800da0c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800da0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da14:	d055      	beq.n	800dac2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800da16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da18:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da1c:	f200 8096 	bhi.w	800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800da20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da22:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800da26:	f000 8084 	beq.w	800db32 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800da2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800da30:	f200 808c 	bhi.w	800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800da34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da3a:	d030      	beq.n	800da9e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800da3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da42:	f200 8083 	bhi.w	800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800da46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d004      	beq.n	800da56 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800da4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800da52:	d012      	beq.n	800da7a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800da54:	e07a      	b.n	800db4c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800da56:	4b38      	ldr	r3, [pc, #224]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800da5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800da62:	d107      	bne.n	800da74 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800da64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da68:	4618      	mov	r0, r3
 800da6a:	f000 fd63 	bl	800e534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800da6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da72:	e294      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da74:	2300      	movs	r3, #0
 800da76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da78:	e291      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da7a:	4b2f      	ldr	r3, [pc, #188]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800da82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800da86:	d107      	bne.n	800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da88:	f107 0318 	add.w	r3, r7, #24
 800da8c:	4618      	mov	r0, r3
 800da8e:	f000 faa9 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800da92:	69bb      	ldr	r3, [r7, #24]
 800da94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800da96:	e282      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800da98:	2300      	movs	r3, #0
 800da9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800da9c:	e27f      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800da9e:	4b26      	ldr	r3, [pc, #152]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800daa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800daaa:	d107      	bne.n	800dabc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800daac:	f107 030c 	add.w	r3, r7, #12
 800dab0:	4618      	mov	r0, r3
 800dab2:	f000 fbeb 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800daba:	e270      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dabc:	2300      	movs	r3, #0
 800dabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dac0:	e26d      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dac2:	4b1d      	ldr	r3, [pc, #116]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dac6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800daca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dacc:	4b1a      	ldr	r3, [pc, #104]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f003 0304 	and.w	r3, r3, #4
 800dad4:	2b04      	cmp	r3, #4
 800dad6:	d10c      	bne.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800dad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d109      	bne.n	800daf2 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dade:	4b16      	ldr	r3, [pc, #88]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	08db      	lsrs	r3, r3, #3
 800dae4:	f003 0303 	and.w	r3, r3, #3
 800dae8:	4a14      	ldr	r2, [pc, #80]	@ (800db3c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800daea:	fa22 f303 	lsr.w	r3, r2, r3
 800daee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800daf0:	e01e      	b.n	800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800daf2:	4b11      	ldr	r3, [pc, #68]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dafa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dafe:	d106      	bne.n	800db0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800db00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800db06:	d102      	bne.n	800db0e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800db08:	4b0d      	ldr	r3, [pc, #52]	@ (800db40 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800db0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db0c:	e010      	b.n	800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800db0e:	4b0a      	ldr	r3, [pc, #40]	@ (800db38 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800db16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db1a:	d106      	bne.n	800db2a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800db1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800db22:	d102      	bne.n	800db2a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800db24:	4b07      	ldr	r3, [pc, #28]	@ (800db44 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800db26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800db28:	e002      	b.n	800db30 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800db2a:	2300      	movs	r3, #0
 800db2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800db2e:	e236      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800db30:	e235      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800db32:	4b05      	ldr	r3, [pc, #20]	@ (800db48 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800db34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db36:	e232      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800db38:	58024400 	.word	0x58024400
 800db3c:	03d09000 	.word	0x03d09000
 800db40:	003d0900 	.word	0x003d0900
 800db44:	00b71b00 	.word	0x00b71b00
 800db48:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800db4c:	2300      	movs	r3, #0
 800db4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800db50:	e225      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800db52:	e9d7 2300 	ldrd	r2, r3, [r7]
 800db56:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800db5a:	430b      	orrs	r3, r1
 800db5c:	f040 8085 	bne.w	800dc6a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800db60:	4b9c      	ldr	r3, [pc, #624]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800db62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db64:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800db68:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800db6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800db70:	d06b      	beq.n	800dc4a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800db72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800db78:	d874      	bhi.n	800dc64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800db7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db80:	d056      	beq.n	800dc30 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800db82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800db88:	d86c      	bhi.n	800dc64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800db8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db8c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800db90:	d03b      	beq.n	800dc0a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800db92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db94:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800db98:	d864      	bhi.n	800dc64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800db9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dba0:	d021      	beq.n	800dbe6 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800dba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dba4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dba8:	d85c      	bhi.n	800dc64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800dbaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d004      	beq.n	800dbba <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800dbb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dbb6:	d004      	beq.n	800dbc2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800dbb8:	e054      	b.n	800dc64 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800dbba:	f7fe fb5f 	bl	800c27c <HAL_RCC_GetPCLK1Freq>
 800dbbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dbc0:	e1ed      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dbc2:	4b84      	ldr	r3, [pc, #528]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dbca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dbce:	d107      	bne.n	800dbe0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dbd0:	f107 0318 	add.w	r3, r7, #24
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	f000 fa05 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800dbda:	69fb      	ldr	r3, [r7, #28]
 800dbdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dbde:	e1de      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dbe4:	e1db      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dbe6:	4b7b      	ldr	r3, [pc, #492]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dbee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dbf2:	d107      	bne.n	800dc04 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dbf4:	f107 030c 	add.w	r3, r7, #12
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f000 fb47 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800dbfe:	693b      	ldr	r3, [r7, #16]
 800dc00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc02:	e1cc      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc04:	2300      	movs	r3, #0
 800dc06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc08:	e1c9      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800dc0a:	4b72      	ldr	r3, [pc, #456]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc0c:	681b      	ldr	r3, [r3, #0]
 800dc0e:	f003 0304 	and.w	r3, r3, #4
 800dc12:	2b04      	cmp	r3, #4
 800dc14:	d109      	bne.n	800dc2a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc16:	4b6f      	ldr	r3, [pc, #444]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	08db      	lsrs	r3, r3, #3
 800dc1c:	f003 0303 	and.w	r3, r3, #3
 800dc20:	4a6d      	ldr	r2, [pc, #436]	@ (800ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800dc22:	fa22 f303 	lsr.w	r3, r2, r3
 800dc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc28:	e1b9      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc2e:	e1b6      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800dc30:	4b68      	ldr	r3, [pc, #416]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc3c:	d102      	bne.n	800dc44 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800dc3e:	4b67      	ldr	r3, [pc, #412]	@ (800dddc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800dc40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc42:	e1ac      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc44:	2300      	movs	r3, #0
 800dc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc48:	e1a9      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dc4a:	4b62      	ldr	r3, [pc, #392]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dc52:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc56:	d102      	bne.n	800dc5e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800dc58:	4b61      	ldr	r3, [pc, #388]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800dc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dc5c:	e19f      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc62:	e19c      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc68:	e199      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800dc6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc6e:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800dc72:	430b      	orrs	r3, r1
 800dc74:	d173      	bne.n	800dd5e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800dc76:	4b57      	ldr	r3, [pc, #348]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dc78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dc7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800dc7e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dc80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc82:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc86:	d02f      	beq.n	800dce8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800dc88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dc8e:	d863      	bhi.n	800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800dc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d004      	beq.n	800dca0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800dc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dc9c:	d012      	beq.n	800dcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800dc9e:	e05b      	b.n	800dd58 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dca0:	4b4c      	ldr	r3, [pc, #304]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dca8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800dcac:	d107      	bne.n	800dcbe <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dcae:	f107 0318 	add.w	r3, r7, #24
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f000 f996 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800dcb8:	69bb      	ldr	r3, [r7, #24]
 800dcba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dcbc:	e16f      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dcc2:	e16c      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800dcc4:	4b43      	ldr	r3, [pc, #268]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dcd0:	d107      	bne.n	800dce2 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dcd2:	f107 030c 	add.w	r3, r7, #12
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f000 fad8 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dce0:	e15d      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dce2:	2300      	movs	r3, #0
 800dce4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dce6:	e15a      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800dce8:	4b3a      	ldr	r3, [pc, #232]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dcea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800dcf0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800dcf2:	4b38      	ldr	r3, [pc, #224]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f003 0304 	and.w	r3, r3, #4
 800dcfa:	2b04      	cmp	r3, #4
 800dcfc:	d10c      	bne.n	800dd18 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800dcfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d109      	bne.n	800dd18 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd04:	4b33      	ldr	r3, [pc, #204]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	08db      	lsrs	r3, r3, #3
 800dd0a:	f003 0303 	and.w	r3, r3, #3
 800dd0e:	4a32      	ldr	r2, [pc, #200]	@ (800ddd8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800dd10:	fa22 f303 	lsr.w	r3, r2, r3
 800dd14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd16:	e01e      	b.n	800dd56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800dd18:	4b2e      	ldr	r3, [pc, #184]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd24:	d106      	bne.n	800dd34 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800dd26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dd2c:	d102      	bne.n	800dd34 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800dd2e:	4b2b      	ldr	r3, [pc, #172]	@ (800dddc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800dd30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd32:	e010      	b.n	800dd56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800dd34:	4b27      	ldr	r3, [pc, #156]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dd3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dd40:	d106      	bne.n	800dd50 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800dd42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800dd48:	d102      	bne.n	800dd50 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800dd4a:	4b25      	ldr	r3, [pc, #148]	@ (800dde0 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800dd4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd4e:	e002      	b.n	800dd56 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800dd50:	2300      	movs	r3, #0
 800dd52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800dd54:	e123      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800dd56:	e122      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800dd58:	2300      	movs	r3, #0
 800dd5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dd5c:	e11f      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800dd5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dd62:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800dd66:	430b      	orrs	r3, r1
 800dd68:	d13c      	bne.n	800dde4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800dd6a:	4b1a      	ldr	r3, [pc, #104]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dd6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dd72:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800dd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d004      	beq.n	800dd84 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd80:	d012      	beq.n	800dda8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800dd82:	e023      	b.n	800ddcc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800dd84:	4b13      	ldr	r3, [pc, #76]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dd8c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800dd90:	d107      	bne.n	800dda2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800dd92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dd96:	4618      	mov	r0, r3
 800dd98:	f000 fbcc 	bl	800e534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800dd9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800dda0:	e0fd      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800dda2:	2300      	movs	r3, #0
 800dda4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dda6:	e0fa      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800dda8:	4b0a      	ldr	r3, [pc, #40]	@ (800ddd4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ddb0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ddb4:	d107      	bne.n	800ddc6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ddb6:	f107 0318 	add.w	r3, r7, #24
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f000 f912 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ddc0:	6a3b      	ldr	r3, [r7, #32]
 800ddc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ddc4:	e0eb      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddca:	e0e8      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ddd0:	e0e5      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800ddd2:	bf00      	nop
 800ddd4:	58024400 	.word	0x58024400
 800ddd8:	03d09000 	.word	0x03d09000
 800dddc:	003d0900 	.word	0x003d0900
 800dde0:	00b71b00 	.word	0x00b71b00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800dde4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dde8:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ddec:	430b      	orrs	r3, r1
 800ddee:	f040 8085 	bne.w	800defc <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ddf2:	4b6d      	ldr	r3, [pc, #436]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ddf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ddf6:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ddfa:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ddfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de02:	d06b      	beq.n	800dedc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800de04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de0a:	d874      	bhi.n	800def6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800de0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de12:	d056      	beq.n	800dec2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800de14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de1a:	d86c      	bhi.n	800def6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800de1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de1e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800de22:	d03b      	beq.n	800de9c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800de24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800de2a:	d864      	bhi.n	800def6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800de2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de32:	d021      	beq.n	800de78 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800de34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de3a:	d85c      	bhi.n	800def6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800de3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d004      	beq.n	800de4c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800de42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de48:	d004      	beq.n	800de54 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800de4a:	e054      	b.n	800def6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800de4c:	f000 f8b4 	bl	800dfb8 <HAL_RCCEx_GetD3PCLK1Freq>
 800de50:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800de52:	e0a4      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800de54:	4b54      	ldr	r3, [pc, #336]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800de60:	d107      	bne.n	800de72 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800de62:	f107 0318 	add.w	r3, r7, #24
 800de66:	4618      	mov	r0, r3
 800de68:	f000 f8bc 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de70:	e095      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de72:	2300      	movs	r3, #0
 800de74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de76:	e092      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800de78:	4b4b      	ldr	r3, [pc, #300]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800de80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800de84:	d107      	bne.n	800de96 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800de86:	f107 030c 	add.w	r3, r7, #12
 800de8a:	4618      	mov	r0, r3
 800de8c:	f000 f9fe 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800de94:	e083      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800de96:	2300      	movs	r3, #0
 800de98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800de9a:	e080      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800de9c:	4b42      	ldr	r3, [pc, #264]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	f003 0304 	and.w	r3, r3, #4
 800dea4:	2b04      	cmp	r3, #4
 800dea6:	d109      	bne.n	800debc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dea8:	4b3f      	ldr	r3, [pc, #252]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	08db      	lsrs	r3, r3, #3
 800deae:	f003 0303 	and.w	r3, r3, #3
 800deb2:	4a3e      	ldr	r2, [pc, #248]	@ (800dfac <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800deb4:	fa22 f303 	lsr.w	r3, r2, r3
 800deb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800deba:	e070      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800debc:	2300      	movs	r3, #0
 800debe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dec0:	e06d      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800dec2:	4b39      	ldr	r3, [pc, #228]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800deca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dece:	d102      	bne.n	800ded6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800ded0:	4b37      	ldr	r3, [pc, #220]	@ (800dfb0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800ded2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ded4:	e063      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ded6:	2300      	movs	r3, #0
 800ded8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800deda:	e060      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800dedc:	4b32      	ldr	r3, [pc, #200]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dee4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800dee8:	d102      	bne.n	800def0 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800deea:	4b32      	ldr	r3, [pc, #200]	@ (800dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800deec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800deee:	e056      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800def0:	2300      	movs	r3, #0
 800def2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800def4:	e053      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800def6:	2300      	movs	r3, #0
 800def8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800defa:	e050      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800defc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800df00:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800df04:	430b      	orrs	r3, r1
 800df06:	d148      	bne.n	800df9a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800df08:	4b27      	ldr	r3, [pc, #156]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800df0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800df0c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800df10:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800df12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df18:	d02a      	beq.n	800df70 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800df1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800df20:	d838      	bhi.n	800df94 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800df22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df24:	2b00      	cmp	r3, #0
 800df26:	d004      	beq.n	800df32 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800df28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800df2e:	d00d      	beq.n	800df4c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800df30:	e030      	b.n	800df94 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800df32:	4b1d      	ldr	r3, [pc, #116]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800df3a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800df3e:	d102      	bne.n	800df46 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800df40:	4b1c      	ldr	r3, [pc, #112]	@ (800dfb4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800df42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df44:	e02b      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800df46:	2300      	movs	r3, #0
 800df48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df4a:	e028      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800df4c:	4b16      	ldr	r3, [pc, #88]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800df54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800df58:	d107      	bne.n	800df6a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800df5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800df5e:	4618      	mov	r0, r3
 800df60:	f000 fae8 	bl	800e534 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800df64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df68:	e019      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df6e:	e016      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800df70:	4b0d      	ldr	r3, [pc, #52]	@ (800dfa8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df78:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800df7c:	d107      	bne.n	800df8e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800df7e:	f107 0318 	add.w	r3, r7, #24
 800df82:	4618      	mov	r0, r3
 800df84:	f000 f82e 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800df8c:	e007      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800df8e:	2300      	movs	r3, #0
 800df90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df92:	e004      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800df94:	2300      	movs	r3, #0
 800df96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800df98:	e001      	b.n	800df9e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800df9a:	2300      	movs	r3, #0
 800df9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800df9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3740      	adds	r7, #64	@ 0x40
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	58024400 	.word	0x58024400
 800dfac:	03d09000 	.word	0x03d09000
 800dfb0:	003d0900 	.word	0x003d0900
 800dfb4:	00b71b00 	.word	0x00b71b00

0800dfb8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800dfbc:	f7fe f92e 	bl	800c21c <HAL_RCC_GetHCLKFreq>
 800dfc0:	4602      	mov	r2, r0
 800dfc2:	4b06      	ldr	r3, [pc, #24]	@ (800dfdc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	091b      	lsrs	r3, r3, #4
 800dfc8:	f003 0307 	and.w	r3, r3, #7
 800dfcc:	4904      	ldr	r1, [pc, #16]	@ (800dfe0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800dfce:	5ccb      	ldrb	r3, [r1, r3]
 800dfd0:	f003 031f 	and.w	r3, r3, #31
 800dfd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	bd80      	pop	{r7, pc}
 800dfdc:	58024400 	.word	0x58024400
 800dfe0:	08014298 	.word	0x08014298

0800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b089      	sub	sp, #36	@ 0x24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dfec:	4ba1      	ldr	r3, [pc, #644]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dfee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff0:	f003 0303 	and.w	r3, r3, #3
 800dff4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800dff6:	4b9f      	ldr	r3, [pc, #636]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dffa:	0b1b      	lsrs	r3, r3, #12
 800dffc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e000:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800e002:	4b9c      	ldr	r3, [pc, #624]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e006:	091b      	lsrs	r3, r3, #4
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800e00e:	4b99      	ldr	r3, [pc, #612]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e012:	08db      	lsrs	r3, r3, #3
 800e014:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e018:	693a      	ldr	r2, [r7, #16]
 800e01a:	fb02 f303 	mul.w	r3, r2, r3
 800e01e:	ee07 3a90 	vmov	s15, r3
 800e022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e026:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	f000 8111 	beq.w	800e254 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	2b02      	cmp	r3, #2
 800e036:	f000 8083 	beq.w	800e140 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800e03a:	69bb      	ldr	r3, [r7, #24]
 800e03c:	2b02      	cmp	r3, #2
 800e03e:	f200 80a1 	bhi.w	800e184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800e042:	69bb      	ldr	r3, [r7, #24]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d003      	beq.n	800e050 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800e048:	69bb      	ldr	r3, [r7, #24]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d056      	beq.n	800e0fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800e04e:	e099      	b.n	800e184 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e050:	4b88      	ldr	r3, [pc, #544]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	f003 0320 	and.w	r3, r3, #32
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d02d      	beq.n	800e0b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e05c:	4b85      	ldr	r3, [pc, #532]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	08db      	lsrs	r3, r3, #3
 800e062:	f003 0303 	and.w	r3, r3, #3
 800e066:	4a84      	ldr	r2, [pc, #528]	@ (800e278 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800e068:	fa22 f303 	lsr.w	r3, r2, r3
 800e06c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	ee07 3a90 	vmov	s15, r3
 800e074:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	ee07 3a90 	vmov	s15, r3
 800e07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e086:	4b7b      	ldr	r3, [pc, #492]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e08e:	ee07 3a90 	vmov	s15, r3
 800e092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e096:	ed97 6a03 	vldr	s12, [r7, #12]
 800e09a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e0b6:	e087      	b.n	800e1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	ee07 3a90 	vmov	s15, r3
 800e0be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e0c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e280 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800e0c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e0ca:	4b6a      	ldr	r3, [pc, #424]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e0cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e0ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0d2:	ee07 3a90 	vmov	s15, r3
 800e0d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e0da:	ed97 6a03 	vldr	s12, [r7, #12]
 800e0de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e0e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e0e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e0ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e0ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e0f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e0f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e0fa:	e065      	b.n	800e1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	ee07 3a90 	vmov	s15, r3
 800e102:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e106:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e10a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e10e:	4b59      	ldr	r3, [pc, #356]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e116:	ee07 3a90 	vmov	s15, r3
 800e11a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e11e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e122:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e12a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e12e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e13a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e13e:	e043      	b.n	800e1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	ee07 3a90 	vmov	s15, r3
 800e146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e14a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e288 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800e14e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e152:	4b48      	ldr	r3, [pc, #288]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e15a:	ee07 3a90 	vmov	s15, r3
 800e15e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e162:	ed97 6a03 	vldr	s12, [r7, #12]
 800e166:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e16a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e16e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e172:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e17a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e17e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e182:	e021      	b.n	800e1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	ee07 3a90 	vmov	s15, r3
 800e18a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e18e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e284 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800e192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e196:	4b37      	ldr	r3, [pc, #220]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e19a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e19e:	ee07 3a90 	vmov	s15, r3
 800e1a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e1a6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e1aa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e27c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800e1ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e1b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e1b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e1ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e1be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e1c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e1c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800e1c8:	4b2a      	ldr	r3, [pc, #168]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1cc:	0a5b      	lsrs	r3, r3, #9
 800e1ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1d2:	ee07 3a90 	vmov	s15, r3
 800e1d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e1da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e1de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e1e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800e1e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e1ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e1ee:	ee17 2a90 	vmov	r2, s15
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800e1f6:	4b1f      	ldr	r3, [pc, #124]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e1f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1fa:	0c1b      	lsrs	r3, r3, #16
 800e1fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e200:	ee07 3a90 	vmov	s15, r3
 800e204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e208:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e20c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e210:	edd7 6a07 	vldr	s13, [r7, #28]
 800e214:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e218:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e21c:	ee17 2a90 	vmov	r2, s15
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800e224:	4b13      	ldr	r3, [pc, #76]	@ (800e274 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800e226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e228:	0e1b      	lsrs	r3, r3, #24
 800e22a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e22e:	ee07 3a90 	vmov	s15, r3
 800e232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e236:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e23a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e23e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e246:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e24a:	ee17 2a90 	vmov	r2, s15
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800e252:	e008      	b.n	800e266 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2200      	movs	r2, #0
 800e258:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	2200      	movs	r2, #0
 800e264:	609a      	str	r2, [r3, #8]
}
 800e266:	bf00      	nop
 800e268:	3724      	adds	r7, #36	@ 0x24
 800e26a:	46bd      	mov	sp, r7
 800e26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e270:	4770      	bx	lr
 800e272:	bf00      	nop
 800e274:	58024400 	.word	0x58024400
 800e278:	03d09000 	.word	0x03d09000
 800e27c:	46000000 	.word	0x46000000
 800e280:	4c742400 	.word	0x4c742400
 800e284:	4a742400 	.word	0x4a742400
 800e288:	4b371b00 	.word	0x4b371b00

0800e28c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b089      	sub	sp, #36	@ 0x24
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e294:	4ba1      	ldr	r3, [pc, #644]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e298:	f003 0303 	and.w	r3, r3, #3
 800e29c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800e29e:	4b9f      	ldr	r3, [pc, #636]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e2a2:	0d1b      	lsrs	r3, r3, #20
 800e2a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e2a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800e2aa:	4b9c      	ldr	r3, [pc, #624]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2ae:	0a1b      	lsrs	r3, r3, #8
 800e2b0:	f003 0301 	and.w	r3, r3, #1
 800e2b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800e2b6:	4b99      	ldr	r3, [pc, #612]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e2ba:	08db      	lsrs	r3, r3, #3
 800e2bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e2c0:	693a      	ldr	r2, [r7, #16]
 800e2c2:	fb02 f303 	mul.w	r3, r2, r3
 800e2c6:	ee07 3a90 	vmov	s15, r3
 800e2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e2ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	f000 8111 	beq.w	800e4fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800e2da:	69bb      	ldr	r3, [r7, #24]
 800e2dc:	2b02      	cmp	r3, #2
 800e2de:	f000 8083 	beq.w	800e3e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	f200 80a1 	bhi.w	800e42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800e2ea:	69bb      	ldr	r3, [r7, #24]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d003      	beq.n	800e2f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800e2f0:	69bb      	ldr	r3, [r7, #24]
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d056      	beq.n	800e3a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800e2f6:	e099      	b.n	800e42c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e2f8:	4b88      	ldr	r3, [pc, #544]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f003 0320 	and.w	r3, r3, #32
 800e300:	2b00      	cmp	r3, #0
 800e302:	d02d      	beq.n	800e360 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e304:	4b85      	ldr	r3, [pc, #532]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	08db      	lsrs	r3, r3, #3
 800e30a:	f003 0303 	and.w	r3, r3, #3
 800e30e:	4a84      	ldr	r2, [pc, #528]	@ (800e520 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800e310:	fa22 f303 	lsr.w	r3, r2, r3
 800e314:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	ee07 3a90 	vmov	s15, r3
 800e31c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	ee07 3a90 	vmov	s15, r3
 800e326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e32e:	4b7b      	ldr	r3, [pc, #492]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e336:	ee07 3a90 	vmov	s15, r3
 800e33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e342:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800e524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e34e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e35a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e35e:	e087      	b.n	800e470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	ee07 3a90 	vmov	s15, r3
 800e366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e36a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800e528 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800e36e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e372:	4b6a      	ldr	r3, [pc, #424]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e37a:	ee07 3a90 	vmov	s15, r3
 800e37e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e382:	ed97 6a03 	vldr	s12, [r7, #12]
 800e386:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800e524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e38a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e38e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e39a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e39e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e3a2:	e065      	b.n	800e470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e3a4:	697b      	ldr	r3, [r7, #20]
 800e3a6:	ee07 3a90 	vmov	s15, r3
 800e3aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800e52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e3b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e3b6:	4b59      	ldr	r3, [pc, #356]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e3b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3be:	ee07 3a90 	vmov	s15, r3
 800e3c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e3c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800e3ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800e524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e3ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e3d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e3d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e3da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e3de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e3e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e3e6:	e043      	b.n	800e470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e3e8:	697b      	ldr	r3, [r7, #20]
 800e3ea:	ee07 3a90 	vmov	s15, r3
 800e3ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e3f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800e530 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800e3f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e3fa:	4b48      	ldr	r3, [pc, #288]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e3fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e402:	ee07 3a90 	vmov	s15, r3
 800e406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e40a:	ed97 6a03 	vldr	s12, [r7, #12]
 800e40e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800e524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e41a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e41e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e422:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e42a:	e021      	b.n	800e470 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	ee07 3a90 	vmov	s15, r3
 800e432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e436:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800e52c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800e43a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e43e:	4b37      	ldr	r3, [pc, #220]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e446:	ee07 3a90 	vmov	s15, r3
 800e44a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e44e:	ed97 6a03 	vldr	s12, [r7, #12]
 800e452:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800e524 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800e456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e45a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e45e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e46a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e46e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800e470:	4b2a      	ldr	r3, [pc, #168]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e474:	0a5b      	lsrs	r3, r3, #9
 800e476:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e47a:	ee07 3a90 	vmov	s15, r3
 800e47e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e482:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e486:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e48a:	edd7 6a07 	vldr	s13, [r7, #28]
 800e48e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e496:	ee17 2a90 	vmov	r2, s15
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800e49e:	4b1f      	ldr	r3, [pc, #124]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4a2:	0c1b      	lsrs	r3, r3, #16
 800e4a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4a8:	ee07 3a90 	vmov	s15, r3
 800e4ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e4b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e4b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4c4:	ee17 2a90 	vmov	r2, s15
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800e4cc:	4b13      	ldr	r3, [pc, #76]	@ (800e51c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800e4ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4d0:	0e1b      	lsrs	r3, r3, #24
 800e4d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4d6:	ee07 3a90 	vmov	s15, r3
 800e4da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e4de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e4e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e4e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800e4ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e4ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e4f2:	ee17 2a90 	vmov	r2, s15
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800e4fa:	e008      	b.n	800e50e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2200      	movs	r2, #0
 800e500:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2200      	movs	r2, #0
 800e50c:	609a      	str	r2, [r3, #8]
}
 800e50e:	bf00      	nop
 800e510:	3724      	adds	r7, #36	@ 0x24
 800e512:	46bd      	mov	sp, r7
 800e514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e518:	4770      	bx	lr
 800e51a:	bf00      	nop
 800e51c:	58024400 	.word	0x58024400
 800e520:	03d09000 	.word	0x03d09000
 800e524:	46000000 	.word	0x46000000
 800e528:	4c742400 	.word	0x4c742400
 800e52c:	4a742400 	.word	0x4a742400
 800e530:	4b371b00 	.word	0x4b371b00

0800e534 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800e534:	b480      	push	{r7}
 800e536:	b089      	sub	sp, #36	@ 0x24
 800e538:	af00      	add	r7, sp, #0
 800e53a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800e53c:	4ba0      	ldr	r3, [pc, #640]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e540:	f003 0303 	and.w	r3, r3, #3
 800e544:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800e546:	4b9e      	ldr	r3, [pc, #632]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e54a:	091b      	lsrs	r3, r3, #4
 800e54c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e550:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800e552:	4b9b      	ldr	r3, [pc, #620]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e556:	f003 0301 	and.w	r3, r3, #1
 800e55a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800e55c:	4b98      	ldr	r3, [pc, #608]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e55e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e560:	08db      	lsrs	r3, r3, #3
 800e562:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800e566:	693a      	ldr	r2, [r7, #16]
 800e568:	fb02 f303 	mul.w	r3, r2, r3
 800e56c:	ee07 3a90 	vmov	s15, r3
 800e570:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e574:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f000 8111 	beq.w	800e7a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800e580:	69bb      	ldr	r3, [r7, #24]
 800e582:	2b02      	cmp	r3, #2
 800e584:	f000 8083 	beq.w	800e68e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800e588:	69bb      	ldr	r3, [r7, #24]
 800e58a:	2b02      	cmp	r3, #2
 800e58c:	f200 80a1 	bhi.w	800e6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800e590:	69bb      	ldr	r3, [r7, #24]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d003      	beq.n	800e59e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800e596:	69bb      	ldr	r3, [r7, #24]
 800e598:	2b01      	cmp	r3, #1
 800e59a:	d056      	beq.n	800e64a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800e59c:	e099      	b.n	800e6d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e59e:	4b88      	ldr	r3, [pc, #544]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	f003 0320 	and.w	r3, r3, #32
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d02d      	beq.n	800e606 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e5aa:	4b85      	ldr	r3, [pc, #532]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	08db      	lsrs	r3, r3, #3
 800e5b0:	f003 0303 	and.w	r3, r3, #3
 800e5b4:	4a83      	ldr	r2, [pc, #524]	@ (800e7c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800e5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800e5ba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	ee07 3a90 	vmov	s15, r3
 800e5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	ee07 3a90 	vmov	s15, r3
 800e5cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e5d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e5d4:	4b7a      	ldr	r3, [pc, #488]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e5d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5dc:	ee07 3a90 	vmov	s15, r3
 800e5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e5e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e5e8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800e7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e5ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e5f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e5f4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e5f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e600:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800e604:	e087      	b.n	800e716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	ee07 3a90 	vmov	s15, r3
 800e60c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e610:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800e7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e618:	4b69      	ldr	r3, [pc, #420]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e61a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e61c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e620:	ee07 3a90 	vmov	s15, r3
 800e624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e628:	ed97 6a03 	vldr	s12, [r7, #12]
 800e62c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800e7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e638:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e63c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e640:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e648:	e065      	b.n	800e716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	ee07 3a90 	vmov	s15, r3
 800e650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e654:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800e7d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800e658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e65c:	4b58      	ldr	r3, [pc, #352]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e65e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e664:	ee07 3a90 	vmov	s15, r3
 800e668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e66c:	ed97 6a03 	vldr	s12, [r7, #12]
 800e670:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800e7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e67c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e684:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e688:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e68c:	e043      	b.n	800e716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e68e:	697b      	ldr	r3, [r7, #20]
 800e690:	ee07 3a90 	vmov	s15, r3
 800e694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e698:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800e7d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800e69c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6a0:	4b47      	ldr	r3, [pc, #284]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e6a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6a8:	ee07 3a90 	vmov	s15, r3
 800e6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6b4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800e7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e6b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e6bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e6c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e6c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e6c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e6cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e6d0:	e021      	b.n	800e716 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800e6d2:	697b      	ldr	r3, [r7, #20]
 800e6d4:	ee07 3a90 	vmov	s15, r3
 800e6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e6dc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800e7cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800e6e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800e6e4:	4b36      	ldr	r3, [pc, #216]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e6e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6ec:	ee07 3a90 	vmov	s15, r3
 800e6f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800e6f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800e6f8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800e7c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800e6fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800e700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e704:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800e708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800e714:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800e716:	4b2a      	ldr	r3, [pc, #168]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e71a:	0a5b      	lsrs	r3, r3, #9
 800e71c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e720:	ee07 3a90 	vmov	s15, r3
 800e724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e728:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e72c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e730:	edd7 6a07 	vldr	s13, [r7, #28]
 800e734:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e738:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e73c:	ee17 2a90 	vmov	r2, s15
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800e744:	4b1e      	ldr	r3, [pc, #120]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e748:	0c1b      	lsrs	r3, r3, #16
 800e74a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e74e:	ee07 3a90 	vmov	s15, r3
 800e752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e756:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e75a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e75e:	edd7 6a07 	vldr	s13, [r7, #28]
 800e762:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e766:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e76a:	ee17 2a90 	vmov	r2, s15
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800e772:	4b13      	ldr	r3, [pc, #76]	@ (800e7c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800e774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e776:	0e1b      	lsrs	r3, r3, #24
 800e778:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e77c:	ee07 3a90 	vmov	s15, r3
 800e780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800e784:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800e788:	ee37 7a87 	vadd.f32	s14, s15, s14
 800e78c:	edd7 6a07 	vldr	s13, [r7, #28]
 800e790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e794:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800e798:	ee17 2a90 	vmov	r2, s15
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800e7a0:	e008      	b.n	800e7b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	2200      	movs	r2, #0
 800e7ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	609a      	str	r2, [r3, #8]
}
 800e7b4:	bf00      	nop
 800e7b6:	3724      	adds	r7, #36	@ 0x24
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	58024400 	.word	0x58024400
 800e7c4:	03d09000 	.word	0x03d09000
 800e7c8:	46000000 	.word	0x46000000
 800e7cc:	4c742400 	.word	0x4c742400
 800e7d0:	4a742400 	.word	0x4a742400
 800e7d4:	4b371b00 	.word	0x4b371b00

0800e7d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b084      	sub	sp, #16
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	6078      	str	r0, [r7, #4]
 800e7e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e7e6:	4b53      	ldr	r3, [pc, #332]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e7e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e7ea:	f003 0303 	and.w	r3, r3, #3
 800e7ee:	2b03      	cmp	r3, #3
 800e7f0:	d101      	bne.n	800e7f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e099      	b.n	800e92a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e7f6:	4b4f      	ldr	r3, [pc, #316]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	4a4e      	ldr	r2, [pc, #312]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e7fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e802:	f7f6 f8cd 	bl	80049a0 <HAL_GetTick>
 800e806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e808:	e008      	b.n	800e81c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e80a:	f7f6 f8c9 	bl	80049a0 <HAL_GetTick>
 800e80e:	4602      	mov	r2, r0
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	1ad3      	subs	r3, r2, r3
 800e814:	2b02      	cmp	r3, #2
 800e816:	d901      	bls.n	800e81c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e818:	2303      	movs	r3, #3
 800e81a:	e086      	b.n	800e92a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e81c:	4b45      	ldr	r3, [pc, #276]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e824:	2b00      	cmp	r3, #0
 800e826:	d1f0      	bne.n	800e80a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e828:	4b42      	ldr	r3, [pc, #264]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e82c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	031b      	lsls	r3, r3, #12
 800e836:	493f      	ldr	r1, [pc, #252]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e838:	4313      	orrs	r3, r2
 800e83a:	628b      	str	r3, [r1, #40]	@ 0x28
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	685b      	ldr	r3, [r3, #4]
 800e840:	3b01      	subs	r3, #1
 800e842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	689b      	ldr	r3, [r3, #8]
 800e84a:	3b01      	subs	r3, #1
 800e84c:	025b      	lsls	r3, r3, #9
 800e84e:	b29b      	uxth	r3, r3
 800e850:	431a      	orrs	r2, r3
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	68db      	ldr	r3, [r3, #12]
 800e856:	3b01      	subs	r3, #1
 800e858:	041b      	lsls	r3, r3, #16
 800e85a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e85e:	431a      	orrs	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	691b      	ldr	r3, [r3, #16]
 800e864:	3b01      	subs	r3, #1
 800e866:	061b      	lsls	r3, r3, #24
 800e868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e86c:	4931      	ldr	r1, [pc, #196]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e86e:	4313      	orrs	r3, r2
 800e870:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e872:	4b30      	ldr	r3, [pc, #192]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e876:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	695b      	ldr	r3, [r3, #20]
 800e87e:	492d      	ldr	r1, [pc, #180]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e880:	4313      	orrs	r3, r2
 800e882:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e884:	4b2b      	ldr	r3, [pc, #172]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e888:	f023 0220 	bic.w	r2, r3, #32
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	699b      	ldr	r3, [r3, #24]
 800e890:	4928      	ldr	r1, [pc, #160]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e892:	4313      	orrs	r3, r2
 800e894:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e896:	4b27      	ldr	r3, [pc, #156]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e89a:	4a26      	ldr	r2, [pc, #152]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e89c:	f023 0310 	bic.w	r3, r3, #16
 800e8a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e8a2:	4b24      	ldr	r3, [pc, #144]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e8a6:	4b24      	ldr	r3, [pc, #144]	@ (800e938 <RCCEx_PLL2_Config+0x160>)
 800e8a8:	4013      	ands	r3, r2
 800e8aa:	687a      	ldr	r2, [r7, #4]
 800e8ac:	69d2      	ldr	r2, [r2, #28]
 800e8ae:	00d2      	lsls	r2, r2, #3
 800e8b0:	4920      	ldr	r1, [pc, #128]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8b2:	4313      	orrs	r3, r2
 800e8b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e8b6:	4b1f      	ldr	r3, [pc, #124]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ba:	4a1e      	ldr	r2, [pc, #120]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8bc:	f043 0310 	orr.w	r3, r3, #16
 800e8c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d106      	bne.n	800e8d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e8c8:	4b1a      	ldr	r3, [pc, #104]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8cc:	4a19      	ldr	r2, [pc, #100]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e8d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e8d4:	e00f      	b.n	800e8f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e8d6:	683b      	ldr	r3, [r7, #0]
 800e8d8:	2b01      	cmp	r3, #1
 800e8da:	d106      	bne.n	800e8ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e8dc:	4b15      	ldr	r3, [pc, #84]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8e0:	4a14      	ldr	r2, [pc, #80]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e8e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e8e8:	e005      	b.n	800e8f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e8ea:	4b12      	ldr	r3, [pc, #72]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ee:	4a11      	ldr	r2, [pc, #68]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e8f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	4a0e      	ldr	r2, [pc, #56]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e8fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e902:	f7f6 f84d 	bl	80049a0 <HAL_GetTick>
 800e906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e908:	e008      	b.n	800e91c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e90a:	f7f6 f849 	bl	80049a0 <HAL_GetTick>
 800e90e:	4602      	mov	r2, r0
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	1ad3      	subs	r3, r2, r3
 800e914:	2b02      	cmp	r3, #2
 800e916:	d901      	bls.n	800e91c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e918:	2303      	movs	r3, #3
 800e91a:	e006      	b.n	800e92a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e91c:	4b05      	ldr	r3, [pc, #20]	@ (800e934 <RCCEx_PLL2_Config+0x15c>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e924:	2b00      	cmp	r3, #0
 800e926:	d0f0      	beq.n	800e90a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e928:	7bfb      	ldrb	r3, [r7, #15]
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	58024400 	.word	0x58024400
 800e938:	ffff0007 	.word	0xffff0007

0800e93c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e93c:	b580      	push	{r7, lr}
 800e93e:	b084      	sub	sp, #16
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
 800e944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e946:	2300      	movs	r3, #0
 800e948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e94a:	4b53      	ldr	r3, [pc, #332]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e94c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e94e:	f003 0303 	and.w	r3, r3, #3
 800e952:	2b03      	cmp	r3, #3
 800e954:	d101      	bne.n	800e95a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e956:	2301      	movs	r3, #1
 800e958:	e099      	b.n	800ea8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e95a:	4b4f      	ldr	r3, [pc, #316]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4a4e      	ldr	r2, [pc, #312]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e966:	f7f6 f81b 	bl	80049a0 <HAL_GetTick>
 800e96a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e96c:	e008      	b.n	800e980 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e96e:	f7f6 f817 	bl	80049a0 <HAL_GetTick>
 800e972:	4602      	mov	r2, r0
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	1ad3      	subs	r3, r2, r3
 800e978:	2b02      	cmp	r3, #2
 800e97a:	d901      	bls.n	800e980 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e97c:	2303      	movs	r3, #3
 800e97e:	e086      	b.n	800ea8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e980:	4b45      	ldr	r3, [pc, #276]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d1f0      	bne.n	800e96e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e98c:	4b42      	ldr	r3, [pc, #264]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e990:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	051b      	lsls	r3, r3, #20
 800e99a:	493f      	ldr	r1, [pc, #252]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e99c:	4313      	orrs	r3, r2
 800e99e:	628b      	str	r3, [r1, #40]	@ 0x28
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	685b      	ldr	r3, [r3, #4]
 800e9a4:	3b01      	subs	r3, #1
 800e9a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	689b      	ldr	r3, [r3, #8]
 800e9ae:	3b01      	subs	r3, #1
 800e9b0:	025b      	lsls	r3, r3, #9
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	431a      	orrs	r2, r3
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	041b      	lsls	r3, r3, #16
 800e9be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e9c2:	431a      	orrs	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	691b      	ldr	r3, [r3, #16]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	061b      	lsls	r3, r3, #24
 800e9cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e9d0:	4931      	ldr	r1, [pc, #196]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e9d2:	4313      	orrs	r3, r2
 800e9d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e9d6:	4b30      	ldr	r3, [pc, #192]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e9d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	695b      	ldr	r3, [r3, #20]
 800e9e2:	492d      	ldr	r1, [pc, #180]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e9e4:	4313      	orrs	r3, r2
 800e9e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e9e8:	4b2b      	ldr	r3, [pc, #172]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	699b      	ldr	r3, [r3, #24]
 800e9f4:	4928      	ldr	r1, [pc, #160]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e9f6:	4313      	orrs	r3, r2
 800e9f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e9fa:	4b27      	ldr	r3, [pc, #156]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800e9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e9fe:	4a26      	ldr	r2, [pc, #152]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ea04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ea06:	4b24      	ldr	r3, [pc, #144]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea0a:	4b24      	ldr	r3, [pc, #144]	@ (800ea9c <RCCEx_PLL3_Config+0x160>)
 800ea0c:	4013      	ands	r3, r2
 800ea0e:	687a      	ldr	r2, [r7, #4]
 800ea10:	69d2      	ldr	r2, [r2, #28]
 800ea12:	00d2      	lsls	r2, r2, #3
 800ea14:	4920      	ldr	r1, [pc, #128]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea16:	4313      	orrs	r3, r2
 800ea18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ea1a:	4b1f      	ldr	r3, [pc, #124]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea1e:	4a1e      	ldr	r2, [pc, #120]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ea24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d106      	bne.n	800ea3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ea2c:	4b1a      	ldr	r3, [pc, #104]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea30:	4a19      	ldr	r2, [pc, #100]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ea36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ea38:	e00f      	b.n	800ea5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2b01      	cmp	r3, #1
 800ea3e:	d106      	bne.n	800ea4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ea40:	4b15      	ldr	r3, [pc, #84]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea44:	4a14      	ldr	r2, [pc, #80]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800ea4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800ea4c:	e005      	b.n	800ea5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ea4e:	4b12      	ldr	r3, [pc, #72]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea52:	4a11      	ldr	r2, [pc, #68]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ea58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ea5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4a0e      	ldr	r2, [pc, #56]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ea64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea66:	f7f5 ff9b 	bl	80049a0 <HAL_GetTick>
 800ea6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ea6c:	e008      	b.n	800ea80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ea6e:	f7f5 ff97 	bl	80049a0 <HAL_GetTick>
 800ea72:	4602      	mov	r2, r0
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	1ad3      	subs	r3, r2, r3
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d901      	bls.n	800ea80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	e006      	b.n	800ea8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ea80:	4b05      	ldr	r3, [pc, #20]	@ (800ea98 <RCCEx_PLL3_Config+0x15c>)
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d0f0      	beq.n	800ea6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800ea8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3710      	adds	r7, #16
 800ea92:	46bd      	mov	sp, r7
 800ea94:	bd80      	pop	{r7, pc}
 800ea96:	bf00      	nop
 800ea98:	58024400 	.word	0x58024400
 800ea9c:	ffff0007 	.word	0xffff0007

0800eaa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d101      	bne.n	800eab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eaae:	2301      	movs	r3, #1
 800eab0:	e049      	b.n	800eb46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eab8:	b2db      	uxtb	r3, r3
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d106      	bne.n	800eacc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f7f5 f81a 	bl	8003b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2202      	movs	r2, #2
 800ead0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	681a      	ldr	r2, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	3304      	adds	r3, #4
 800eadc:	4619      	mov	r1, r3
 800eade:	4610      	mov	r0, r2
 800eae0:	f000 fc34 	bl	800f34c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2201      	movs	r2, #1
 800eae8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	2201      	movs	r2, #1
 800eaf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2201      	movs	r2, #1
 800eb00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eb44:	2300      	movs	r3, #0
}
 800eb46:	4618      	mov	r0, r3
 800eb48:	3708      	adds	r7, #8
 800eb4a:	46bd      	mov	sp, r7
 800eb4c:	bd80      	pop	{r7, pc}
	...

0800eb50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb50:	b480      	push	{r7}
 800eb52:	b085      	sub	sp, #20
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d001      	beq.n	800eb68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eb64:	2301      	movs	r3, #1
 800eb66:	e056      	b.n	800ec16 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	2202      	movs	r2, #2
 800eb6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a2b      	ldr	r2, [pc, #172]	@ (800ec24 <HAL_TIM_Base_Start+0xd4>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d02c      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x84>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb82:	d027      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x84>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4a27      	ldr	r2, [pc, #156]	@ (800ec28 <HAL_TIM_Base_Start+0xd8>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d022      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x84>
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	4a26      	ldr	r2, [pc, #152]	@ (800ec2c <HAL_TIM_Base_Start+0xdc>)
 800eb94:	4293      	cmp	r3, r2
 800eb96:	d01d      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x84>
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4a24      	ldr	r2, [pc, #144]	@ (800ec30 <HAL_TIM_Base_Start+0xe0>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d018      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x84>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	4a23      	ldr	r2, [pc, #140]	@ (800ec34 <HAL_TIM_Base_Start+0xe4>)
 800eba8:	4293      	cmp	r3, r2
 800ebaa:	d013      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x84>
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	4a21      	ldr	r2, [pc, #132]	@ (800ec38 <HAL_TIM_Base_Start+0xe8>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d00e      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x84>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a20      	ldr	r2, [pc, #128]	@ (800ec3c <HAL_TIM_Base_Start+0xec>)
 800ebbc:	4293      	cmp	r3, r2
 800ebbe:	d009      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x84>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a1e      	ldr	r2, [pc, #120]	@ (800ec40 <HAL_TIM_Base_Start+0xf0>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d004      	beq.n	800ebd4 <HAL_TIM_Base_Start+0x84>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	4a1d      	ldr	r2, [pc, #116]	@ (800ec44 <HAL_TIM_Base_Start+0xf4>)
 800ebd0:	4293      	cmp	r3, r2
 800ebd2:	d115      	bne.n	800ec00 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	689a      	ldr	r2, [r3, #8]
 800ebda:	4b1b      	ldr	r3, [pc, #108]	@ (800ec48 <HAL_TIM_Base_Start+0xf8>)
 800ebdc:	4013      	ands	r3, r2
 800ebde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	2b06      	cmp	r3, #6
 800ebe4:	d015      	beq.n	800ec12 <HAL_TIM_Base_Start+0xc2>
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebec:	d011      	beq.n	800ec12 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	681a      	ldr	r2, [r3, #0]
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	f042 0201 	orr.w	r2, r2, #1
 800ebfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebfe:	e008      	b.n	800ec12 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	681a      	ldr	r2, [r3, #0]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f042 0201 	orr.w	r2, r2, #1
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	e000      	b.n	800ec14 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec14:	2300      	movs	r3, #0
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3714      	adds	r7, #20
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop
 800ec24:	40010000 	.word	0x40010000
 800ec28:	40000400 	.word	0x40000400
 800ec2c:	40000800 	.word	0x40000800
 800ec30:	40000c00 	.word	0x40000c00
 800ec34:	40010400 	.word	0x40010400
 800ec38:	40001800 	.word	0x40001800
 800ec3c:	40014000 	.word	0x40014000
 800ec40:	4000e000 	.word	0x4000e000
 800ec44:	4000e400 	.word	0x4000e400
 800ec48:	00010007 	.word	0x00010007

0800ec4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d101      	bne.n	800ec5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	e049      	b.n	800ecf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d106      	bne.n	800ec78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f7f4 ff7e 	bl	8003b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2202      	movs	r2, #2
 800ec7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	3304      	adds	r3, #4
 800ec88:	4619      	mov	r1, r3
 800ec8a:	4610      	mov	r0, r2
 800ec8c:	f000 fb5e 	bl	800f34c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2201      	movs	r2, #1
 800eca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	2201      	movs	r2, #1
 800ecac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2201      	movs	r2, #1
 800ecbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2201      	movs	r2, #1
 800eccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2201      	movs	r2, #1
 800ecd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	2201      	movs	r2, #1
 800ecdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2201      	movs	r2, #1
 800ece4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2201      	movs	r2, #1
 800ecec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3708      	adds	r7, #8
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
	...

0800ecfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b084      	sub	sp, #16
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]
 800ed04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d109      	bne.n	800ed20 <HAL_TIM_PWM_Start+0x24>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ed12:	b2db      	uxtb	r3, r3
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	bf14      	ite	ne
 800ed18:	2301      	movne	r3, #1
 800ed1a:	2300      	moveq	r3, #0
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	e03c      	b.n	800ed9a <HAL_TIM_PWM_Start+0x9e>
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	2b04      	cmp	r3, #4
 800ed24:	d109      	bne.n	800ed3a <HAL_TIM_PWM_Start+0x3e>
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ed2c:	b2db      	uxtb	r3, r3
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	bf14      	ite	ne
 800ed32:	2301      	movne	r3, #1
 800ed34:	2300      	moveq	r3, #0
 800ed36:	b2db      	uxtb	r3, r3
 800ed38:	e02f      	b.n	800ed9a <HAL_TIM_PWM_Start+0x9e>
 800ed3a:	683b      	ldr	r3, [r7, #0]
 800ed3c:	2b08      	cmp	r3, #8
 800ed3e:	d109      	bne.n	800ed54 <HAL_TIM_PWM_Start+0x58>
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ed46:	b2db      	uxtb	r3, r3
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	bf14      	ite	ne
 800ed4c:	2301      	movne	r3, #1
 800ed4e:	2300      	moveq	r3, #0
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	e022      	b.n	800ed9a <HAL_TIM_PWM_Start+0x9e>
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b0c      	cmp	r3, #12
 800ed58:	d109      	bne.n	800ed6e <HAL_TIM_PWM_Start+0x72>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	2b01      	cmp	r3, #1
 800ed64:	bf14      	ite	ne
 800ed66:	2301      	movne	r3, #1
 800ed68:	2300      	moveq	r3, #0
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	e015      	b.n	800ed9a <HAL_TIM_PWM_Start+0x9e>
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	2b10      	cmp	r3, #16
 800ed72:	d109      	bne.n	800ed88 <HAL_TIM_PWM_Start+0x8c>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ed7a:	b2db      	uxtb	r3, r3
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	bf14      	ite	ne
 800ed80:	2301      	movne	r3, #1
 800ed82:	2300      	moveq	r3, #0
 800ed84:	b2db      	uxtb	r3, r3
 800ed86:	e008      	b.n	800ed9a <HAL_TIM_PWM_Start+0x9e>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800ed8e:	b2db      	uxtb	r3, r3
 800ed90:	2b01      	cmp	r3, #1
 800ed92:	bf14      	ite	ne
 800ed94:	2301      	movne	r3, #1
 800ed96:	2300      	moveq	r3, #0
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ed9e:	2301      	movs	r3, #1
 800eda0:	e0ab      	b.n	800eefa <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d104      	bne.n	800edb2 <HAL_TIM_PWM_Start+0xb6>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	2202      	movs	r2, #2
 800edac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800edb0:	e023      	b.n	800edfa <HAL_TIM_PWM_Start+0xfe>
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	2b04      	cmp	r3, #4
 800edb6:	d104      	bne.n	800edc2 <HAL_TIM_PWM_Start+0xc6>
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2202      	movs	r2, #2
 800edbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800edc0:	e01b      	b.n	800edfa <HAL_TIM_PWM_Start+0xfe>
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	2b08      	cmp	r3, #8
 800edc6:	d104      	bne.n	800edd2 <HAL_TIM_PWM_Start+0xd6>
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	2202      	movs	r2, #2
 800edcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edd0:	e013      	b.n	800edfa <HAL_TIM_PWM_Start+0xfe>
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	2b0c      	cmp	r3, #12
 800edd6:	d104      	bne.n	800ede2 <HAL_TIM_PWM_Start+0xe6>
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2202      	movs	r2, #2
 800eddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800ede0:	e00b      	b.n	800edfa <HAL_TIM_PWM_Start+0xfe>
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	2b10      	cmp	r3, #16
 800ede6:	d104      	bne.n	800edf2 <HAL_TIM_PWM_Start+0xf6>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2202      	movs	r2, #2
 800edec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800edf0:	e003      	b.n	800edfa <HAL_TIM_PWM_Start+0xfe>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	2202      	movs	r2, #2
 800edf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	2201      	movs	r2, #1
 800ee00:	6839      	ldr	r1, [r7, #0]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f000 fec8 	bl	800fb98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4a3d      	ldr	r2, [pc, #244]	@ (800ef04 <HAL_TIM_PWM_Start+0x208>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d013      	beq.n	800ee3a <HAL_TIM_PWM_Start+0x13e>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4a3c      	ldr	r2, [pc, #240]	@ (800ef08 <HAL_TIM_PWM_Start+0x20c>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d00e      	beq.n	800ee3a <HAL_TIM_PWM_Start+0x13e>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	4a3a      	ldr	r2, [pc, #232]	@ (800ef0c <HAL_TIM_PWM_Start+0x210>)
 800ee22:	4293      	cmp	r3, r2
 800ee24:	d009      	beq.n	800ee3a <HAL_TIM_PWM_Start+0x13e>
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a39      	ldr	r2, [pc, #228]	@ (800ef10 <HAL_TIM_PWM_Start+0x214>)
 800ee2c:	4293      	cmp	r3, r2
 800ee2e:	d004      	beq.n	800ee3a <HAL_TIM_PWM_Start+0x13e>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4a37      	ldr	r2, [pc, #220]	@ (800ef14 <HAL_TIM_PWM_Start+0x218>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d101      	bne.n	800ee3e <HAL_TIM_PWM_Start+0x142>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e000      	b.n	800ee40 <HAL_TIM_PWM_Start+0x144>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d007      	beq.n	800ee54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ee52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a2a      	ldr	r2, [pc, #168]	@ (800ef04 <HAL_TIM_PWM_Start+0x208>)
 800ee5a:	4293      	cmp	r3, r2
 800ee5c:	d02c      	beq.n	800eeb8 <HAL_TIM_PWM_Start+0x1bc>
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ee66:	d027      	beq.n	800eeb8 <HAL_TIM_PWM_Start+0x1bc>
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	4a2a      	ldr	r2, [pc, #168]	@ (800ef18 <HAL_TIM_PWM_Start+0x21c>)
 800ee6e:	4293      	cmp	r3, r2
 800ee70:	d022      	beq.n	800eeb8 <HAL_TIM_PWM_Start+0x1bc>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	4a29      	ldr	r2, [pc, #164]	@ (800ef1c <HAL_TIM_PWM_Start+0x220>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d01d      	beq.n	800eeb8 <HAL_TIM_PWM_Start+0x1bc>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4a27      	ldr	r2, [pc, #156]	@ (800ef20 <HAL_TIM_PWM_Start+0x224>)
 800ee82:	4293      	cmp	r3, r2
 800ee84:	d018      	beq.n	800eeb8 <HAL_TIM_PWM_Start+0x1bc>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	4a1f      	ldr	r2, [pc, #124]	@ (800ef08 <HAL_TIM_PWM_Start+0x20c>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d013      	beq.n	800eeb8 <HAL_TIM_PWM_Start+0x1bc>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a23      	ldr	r2, [pc, #140]	@ (800ef24 <HAL_TIM_PWM_Start+0x228>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d00e      	beq.n	800eeb8 <HAL_TIM_PWM_Start+0x1bc>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	4a1b      	ldr	r2, [pc, #108]	@ (800ef0c <HAL_TIM_PWM_Start+0x210>)
 800eea0:	4293      	cmp	r3, r2
 800eea2:	d009      	beq.n	800eeb8 <HAL_TIM_PWM_Start+0x1bc>
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	4a1f      	ldr	r2, [pc, #124]	@ (800ef28 <HAL_TIM_PWM_Start+0x22c>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d004      	beq.n	800eeb8 <HAL_TIM_PWM_Start+0x1bc>
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4a1e      	ldr	r2, [pc, #120]	@ (800ef2c <HAL_TIM_PWM_Start+0x230>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d115      	bne.n	800eee4 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	689a      	ldr	r2, [r3, #8]
 800eebe:	4b1c      	ldr	r3, [pc, #112]	@ (800ef30 <HAL_TIM_PWM_Start+0x234>)
 800eec0:	4013      	ands	r3, r2
 800eec2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2b06      	cmp	r3, #6
 800eec8:	d015      	beq.n	800eef6 <HAL_TIM_PWM_Start+0x1fa>
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eed0:	d011      	beq.n	800eef6 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	681a      	ldr	r2, [r3, #0]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f042 0201 	orr.w	r2, r2, #1
 800eee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eee2:	e008      	b.n	800eef6 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	681a      	ldr	r2, [r3, #0]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	f042 0201 	orr.w	r2, r2, #1
 800eef2:	601a      	str	r2, [r3, #0]
 800eef4:	e000      	b.n	800eef8 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eef6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eef8:	2300      	movs	r3, #0
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3710      	adds	r7, #16
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop
 800ef04:	40010000 	.word	0x40010000
 800ef08:	40010400 	.word	0x40010400
 800ef0c:	40014000 	.word	0x40014000
 800ef10:	40014400 	.word	0x40014400
 800ef14:	40014800 	.word	0x40014800
 800ef18:	40000400 	.word	0x40000400
 800ef1c:	40000800 	.word	0x40000800
 800ef20:	40000c00 	.word	0x40000c00
 800ef24:	40001800 	.word	0x40001800
 800ef28:	4000e000 	.word	0x4000e000
 800ef2c:	4000e400 	.word	0x4000e400
 800ef30:	00010007 	.word	0x00010007

0800ef34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ef40:	2300      	movs	r3, #0
 800ef42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d101      	bne.n	800ef52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ef4e:	2302      	movs	r3, #2
 800ef50:	e0ff      	b.n	800f152 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	2201      	movs	r2, #1
 800ef56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	2b14      	cmp	r3, #20
 800ef5e:	f200 80f0 	bhi.w	800f142 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ef62:	a201      	add	r2, pc, #4	@ (adr r2, 800ef68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ef64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef68:	0800efbd 	.word	0x0800efbd
 800ef6c:	0800f143 	.word	0x0800f143
 800ef70:	0800f143 	.word	0x0800f143
 800ef74:	0800f143 	.word	0x0800f143
 800ef78:	0800effd 	.word	0x0800effd
 800ef7c:	0800f143 	.word	0x0800f143
 800ef80:	0800f143 	.word	0x0800f143
 800ef84:	0800f143 	.word	0x0800f143
 800ef88:	0800f03f 	.word	0x0800f03f
 800ef8c:	0800f143 	.word	0x0800f143
 800ef90:	0800f143 	.word	0x0800f143
 800ef94:	0800f143 	.word	0x0800f143
 800ef98:	0800f07f 	.word	0x0800f07f
 800ef9c:	0800f143 	.word	0x0800f143
 800efa0:	0800f143 	.word	0x0800f143
 800efa4:	0800f143 	.word	0x0800f143
 800efa8:	0800f0c1 	.word	0x0800f0c1
 800efac:	0800f143 	.word	0x0800f143
 800efb0:	0800f143 	.word	0x0800f143
 800efb4:	0800f143 	.word	0x0800f143
 800efb8:	0800f101 	.word	0x0800f101
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68b9      	ldr	r1, [r7, #8]
 800efc2:	4618      	mov	r0, r3
 800efc4:	f000 fa74 	bl	800f4b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	699a      	ldr	r2, [r3, #24]
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	f042 0208 	orr.w	r2, r2, #8
 800efd6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	699a      	ldr	r2, [r3, #24]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	f022 0204 	bic.w	r2, r2, #4
 800efe6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	6999      	ldr	r1, [r3, #24]
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	691a      	ldr	r2, [r3, #16]
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	430a      	orrs	r2, r1
 800eff8:	619a      	str	r2, [r3, #24]
      break;
 800effa:	e0a5      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68b9      	ldr	r1, [r7, #8]
 800f002:	4618      	mov	r0, r3
 800f004:	f000 fae4 	bl	800f5d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	699a      	ldr	r2, [r3, #24]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f016:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	699a      	ldr	r2, [r3, #24]
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f026:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	6999      	ldr	r1, [r3, #24]
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	691b      	ldr	r3, [r3, #16]
 800f032:	021a      	lsls	r2, r3, #8
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	430a      	orrs	r2, r1
 800f03a:	619a      	str	r2, [r3, #24]
      break;
 800f03c:	e084      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f03e:	68fb      	ldr	r3, [r7, #12]
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	68b9      	ldr	r1, [r7, #8]
 800f044:	4618      	mov	r0, r3
 800f046:	f000 fb4d 	bl	800f6e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	69da      	ldr	r2, [r3, #28]
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f042 0208 	orr.w	r2, r2, #8
 800f058:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	69da      	ldr	r2, [r3, #28]
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	f022 0204 	bic.w	r2, r2, #4
 800f068:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	69d9      	ldr	r1, [r3, #28]
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	691a      	ldr	r2, [r3, #16]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	430a      	orrs	r2, r1
 800f07a:	61da      	str	r2, [r3, #28]
      break;
 800f07c:	e064      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	68b9      	ldr	r1, [r7, #8]
 800f084:	4618      	mov	r0, r3
 800f086:	f000 fbb5 	bl	800f7f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	69da      	ldr	r2, [r3, #28]
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f098:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	69da      	ldr	r2, [r3, #28]
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f0a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	69d9      	ldr	r1, [r3, #28]
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	691b      	ldr	r3, [r3, #16]
 800f0b4:	021a      	lsls	r2, r3, #8
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	430a      	orrs	r2, r1
 800f0bc:	61da      	str	r2, [r3, #28]
      break;
 800f0be:	e043      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	68b9      	ldr	r1, [r7, #8]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f000 fbfe 	bl	800f8c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f042 0208 	orr.w	r2, r2, #8
 800f0da:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	f022 0204 	bic.w	r2, r2, #4
 800f0ea:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	691a      	ldr	r2, [r3, #16]
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	430a      	orrs	r2, r1
 800f0fc:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f0fe:	e023      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	68b9      	ldr	r1, [r7, #8]
 800f106:	4618      	mov	r0, r3
 800f108:	f000 fc42 	bl	800f990 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f11a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f12a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800f132:	68bb      	ldr	r3, [r7, #8]
 800f134:	691b      	ldr	r3, [r3, #16]
 800f136:	021a      	lsls	r2, r3, #8
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	430a      	orrs	r2, r1
 800f13e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800f140:	e002      	b.n	800f148 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f142:	2301      	movs	r3, #1
 800f144:	75fb      	strb	r3, [r7, #23]
      break;
 800f146:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2200      	movs	r2, #0
 800f14c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f150:	7dfb      	ldrb	r3, [r7, #23]
}
 800f152:	4618      	mov	r0, r3
 800f154:	3718      	adds	r7, #24
 800f156:	46bd      	mov	sp, r7
 800f158:	bd80      	pop	{r7, pc}
 800f15a:	bf00      	nop

0800f15c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b084      	sub	sp, #16
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f166:	2300      	movs	r3, #0
 800f168:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f170:	2b01      	cmp	r3, #1
 800f172:	d101      	bne.n	800f178 <HAL_TIM_ConfigClockSource+0x1c>
 800f174:	2302      	movs	r3, #2
 800f176:	e0dc      	b.n	800f332 <HAL_TIM_ConfigClockSource+0x1d6>
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	2202      	movs	r2, #2
 800f184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	689b      	ldr	r3, [r3, #8]
 800f18e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f190:	68ba      	ldr	r2, [r7, #8]
 800f192:	4b6a      	ldr	r3, [pc, #424]	@ (800f33c <HAL_TIM_ConfigClockSource+0x1e0>)
 800f194:	4013      	ands	r3, r2
 800f196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f19e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	68ba      	ldr	r2, [r7, #8]
 800f1a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f1a8:	683b      	ldr	r3, [r7, #0]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	4a64      	ldr	r2, [pc, #400]	@ (800f340 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f1ae:	4293      	cmp	r3, r2
 800f1b0:	f000 80a9 	beq.w	800f306 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1b4:	4a62      	ldr	r2, [pc, #392]	@ (800f340 <HAL_TIM_ConfigClockSource+0x1e4>)
 800f1b6:	4293      	cmp	r3, r2
 800f1b8:	f200 80ae 	bhi.w	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1bc:	4a61      	ldr	r2, [pc, #388]	@ (800f344 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f1be:	4293      	cmp	r3, r2
 800f1c0:	f000 80a1 	beq.w	800f306 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1c4:	4a5f      	ldr	r2, [pc, #380]	@ (800f344 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	f200 80a6 	bhi.w	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1cc:	4a5e      	ldr	r2, [pc, #376]	@ (800f348 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	f000 8099 	beq.w	800f306 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1d4:	4a5c      	ldr	r2, [pc, #368]	@ (800f348 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f1d6:	4293      	cmp	r3, r2
 800f1d8:	f200 809e 	bhi.w	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1dc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f1e0:	f000 8091 	beq.w	800f306 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1e4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800f1e8:	f200 8096 	bhi.w	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1f0:	f000 8089 	beq.w	800f306 <HAL_TIM_ConfigClockSource+0x1aa>
 800f1f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f1f8:	f200 808e 	bhi.w	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f1fc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f200:	d03e      	beq.n	800f280 <HAL_TIM_ConfigClockSource+0x124>
 800f202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f206:	f200 8087 	bhi.w	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f20a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f20e:	f000 8086 	beq.w	800f31e <HAL_TIM_ConfigClockSource+0x1c2>
 800f212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f216:	d87f      	bhi.n	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f218:	2b70      	cmp	r3, #112	@ 0x70
 800f21a:	d01a      	beq.n	800f252 <HAL_TIM_ConfigClockSource+0xf6>
 800f21c:	2b70      	cmp	r3, #112	@ 0x70
 800f21e:	d87b      	bhi.n	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f220:	2b60      	cmp	r3, #96	@ 0x60
 800f222:	d050      	beq.n	800f2c6 <HAL_TIM_ConfigClockSource+0x16a>
 800f224:	2b60      	cmp	r3, #96	@ 0x60
 800f226:	d877      	bhi.n	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f228:	2b50      	cmp	r3, #80	@ 0x50
 800f22a:	d03c      	beq.n	800f2a6 <HAL_TIM_ConfigClockSource+0x14a>
 800f22c:	2b50      	cmp	r3, #80	@ 0x50
 800f22e:	d873      	bhi.n	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f230:	2b40      	cmp	r3, #64	@ 0x40
 800f232:	d058      	beq.n	800f2e6 <HAL_TIM_ConfigClockSource+0x18a>
 800f234:	2b40      	cmp	r3, #64	@ 0x40
 800f236:	d86f      	bhi.n	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f238:	2b30      	cmp	r3, #48	@ 0x30
 800f23a:	d064      	beq.n	800f306 <HAL_TIM_ConfigClockSource+0x1aa>
 800f23c:	2b30      	cmp	r3, #48	@ 0x30
 800f23e:	d86b      	bhi.n	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f240:	2b20      	cmp	r3, #32
 800f242:	d060      	beq.n	800f306 <HAL_TIM_ConfigClockSource+0x1aa>
 800f244:	2b20      	cmp	r3, #32
 800f246:	d867      	bhi.n	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d05c      	beq.n	800f306 <HAL_TIM_ConfigClockSource+0x1aa>
 800f24c:	2b10      	cmp	r3, #16
 800f24e:	d05a      	beq.n	800f306 <HAL_TIM_ConfigClockSource+0x1aa>
 800f250:	e062      	b.n	800f318 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f262:	f000 fc79 	bl	800fb58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f26e:	68bb      	ldr	r3, [r7, #8]
 800f270:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f274:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	68ba      	ldr	r2, [r7, #8]
 800f27c:	609a      	str	r2, [r3, #8]
      break;
 800f27e:	e04f      	b.n	800f320 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f290:	f000 fc62 	bl	800fb58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	689a      	ldr	r2, [r3, #8]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f2a2:	609a      	str	r2, [r3, #8]
      break;
 800f2a4:	e03c      	b.n	800f320 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2aa:	683b      	ldr	r3, [r7, #0]
 800f2ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	f000 fbd2 	bl	800fa5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	2150      	movs	r1, #80	@ 0x50
 800f2be:	4618      	mov	r0, r3
 800f2c0:	f000 fc2c 	bl	800fb1c <TIM_ITRx_SetConfig>
      break;
 800f2c4:	e02c      	b.n	800f320 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f2ce:	683b      	ldr	r3, [r7, #0]
 800f2d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f2d2:	461a      	mov	r2, r3
 800f2d4:	f000 fbf1 	bl	800faba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	2160      	movs	r1, #96	@ 0x60
 800f2de:	4618      	mov	r0, r3
 800f2e0:	f000 fc1c 	bl	800fb1c <TIM_ITRx_SetConfig>
      break;
 800f2e4:	e01c      	b.n	800f320 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f2ea:	683b      	ldr	r3, [r7, #0]
 800f2ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f2f2:	461a      	mov	r2, r3
 800f2f4:	f000 fbb2 	bl	800fa5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	681b      	ldr	r3, [r3, #0]
 800f2fc:	2140      	movs	r1, #64	@ 0x40
 800f2fe:	4618      	mov	r0, r3
 800f300:	f000 fc0c 	bl	800fb1c <TIM_ITRx_SetConfig>
      break;
 800f304:	e00c      	b.n	800f320 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	681b      	ldr	r3, [r3, #0]
 800f30e:	4619      	mov	r1, r3
 800f310:	4610      	mov	r0, r2
 800f312:	f000 fc03 	bl	800fb1c <TIM_ITRx_SetConfig>
      break;
 800f316:	e003      	b.n	800f320 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f318:	2301      	movs	r3, #1
 800f31a:	73fb      	strb	r3, [r7, #15]
      break;
 800f31c:	e000      	b.n	800f320 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f31e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	2201      	movs	r2, #1
 800f324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f330:	7bfb      	ldrb	r3, [r7, #15]
}
 800f332:	4618      	mov	r0, r3
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}
 800f33a:	bf00      	nop
 800f33c:	ffceff88 	.word	0xffceff88
 800f340:	00100040 	.word	0x00100040
 800f344:	00100030 	.word	0x00100030
 800f348:	00100020 	.word	0x00100020

0800f34c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f34c:	b480      	push	{r7}
 800f34e:	b085      	sub	sp, #20
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4a4a      	ldr	r2, [pc, #296]	@ (800f488 <TIM_Base_SetConfig+0x13c>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d013      	beq.n	800f38c <TIM_Base_SetConfig+0x40>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f36a:	d00f      	beq.n	800f38c <TIM_Base_SetConfig+0x40>
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4a47      	ldr	r2, [pc, #284]	@ (800f48c <TIM_Base_SetConfig+0x140>)
 800f370:	4293      	cmp	r3, r2
 800f372:	d00b      	beq.n	800f38c <TIM_Base_SetConfig+0x40>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4a46      	ldr	r2, [pc, #280]	@ (800f490 <TIM_Base_SetConfig+0x144>)
 800f378:	4293      	cmp	r3, r2
 800f37a:	d007      	beq.n	800f38c <TIM_Base_SetConfig+0x40>
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	4a45      	ldr	r2, [pc, #276]	@ (800f494 <TIM_Base_SetConfig+0x148>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d003      	beq.n	800f38c <TIM_Base_SetConfig+0x40>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4a44      	ldr	r2, [pc, #272]	@ (800f498 <TIM_Base_SetConfig+0x14c>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d108      	bne.n	800f39e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	68fa      	ldr	r2, [r7, #12]
 800f39a:	4313      	orrs	r3, r2
 800f39c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	4a39      	ldr	r2, [pc, #228]	@ (800f488 <TIM_Base_SetConfig+0x13c>)
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	d027      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f3ac:	d023      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	4a36      	ldr	r2, [pc, #216]	@ (800f48c <TIM_Base_SetConfig+0x140>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d01f      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4a35      	ldr	r2, [pc, #212]	@ (800f490 <TIM_Base_SetConfig+0x144>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d01b      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a34      	ldr	r2, [pc, #208]	@ (800f494 <TIM_Base_SetConfig+0x148>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d017      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a33      	ldr	r2, [pc, #204]	@ (800f498 <TIM_Base_SetConfig+0x14c>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d013      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a32      	ldr	r2, [pc, #200]	@ (800f49c <TIM_Base_SetConfig+0x150>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d00f      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a31      	ldr	r2, [pc, #196]	@ (800f4a0 <TIM_Base_SetConfig+0x154>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d00b      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4a30      	ldr	r2, [pc, #192]	@ (800f4a4 <TIM_Base_SetConfig+0x158>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d007      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4a2f      	ldr	r2, [pc, #188]	@ (800f4a8 <TIM_Base_SetConfig+0x15c>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d003      	beq.n	800f3f6 <TIM_Base_SetConfig+0xaa>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4a2e      	ldr	r2, [pc, #184]	@ (800f4ac <TIM_Base_SetConfig+0x160>)
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d108      	bne.n	800f408 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f3fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	68db      	ldr	r3, [r3, #12]
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	4313      	orrs	r3, r2
 800f406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	4313      	orrs	r3, r2
 800f414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68fa      	ldr	r2, [r7, #12]
 800f41a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f41c:	683b      	ldr	r3, [r7, #0]
 800f41e:	689a      	ldr	r2, [r3, #8]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	681a      	ldr	r2, [r3, #0]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4a16      	ldr	r2, [pc, #88]	@ (800f488 <TIM_Base_SetConfig+0x13c>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d00f      	beq.n	800f454 <TIM_Base_SetConfig+0x108>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a18      	ldr	r2, [pc, #96]	@ (800f498 <TIM_Base_SetConfig+0x14c>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d00b      	beq.n	800f454 <TIM_Base_SetConfig+0x108>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a17      	ldr	r2, [pc, #92]	@ (800f49c <TIM_Base_SetConfig+0x150>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d007      	beq.n	800f454 <TIM_Base_SetConfig+0x108>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	4a16      	ldr	r2, [pc, #88]	@ (800f4a0 <TIM_Base_SetConfig+0x154>)
 800f448:	4293      	cmp	r3, r2
 800f44a:	d003      	beq.n	800f454 <TIM_Base_SetConfig+0x108>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	4a15      	ldr	r2, [pc, #84]	@ (800f4a4 <TIM_Base_SetConfig+0x158>)
 800f450:	4293      	cmp	r3, r2
 800f452:	d103      	bne.n	800f45c <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f454:	683b      	ldr	r3, [r7, #0]
 800f456:	691a      	ldr	r2, [r3, #16]
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	691b      	ldr	r3, [r3, #16]
 800f466:	f003 0301 	and.w	r3, r3, #1
 800f46a:	2b01      	cmp	r3, #1
 800f46c:	d105      	bne.n	800f47a <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	f023 0201 	bic.w	r2, r3, #1
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	611a      	str	r2, [r3, #16]
  }
}
 800f47a:	bf00      	nop
 800f47c:	3714      	adds	r7, #20
 800f47e:	46bd      	mov	sp, r7
 800f480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f484:	4770      	bx	lr
 800f486:	bf00      	nop
 800f488:	40010000 	.word	0x40010000
 800f48c:	40000400 	.word	0x40000400
 800f490:	40000800 	.word	0x40000800
 800f494:	40000c00 	.word	0x40000c00
 800f498:	40010400 	.word	0x40010400
 800f49c:	40014000 	.word	0x40014000
 800f4a0:	40014400 	.word	0x40014400
 800f4a4:	40014800 	.word	0x40014800
 800f4a8:	4000e000 	.word	0x4000e000
 800f4ac:	4000e400 	.word	0x4000e400

0800f4b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b087      	sub	sp, #28
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a1b      	ldr	r3, [r3, #32]
 800f4be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6a1b      	ldr	r3, [r3, #32]
 800f4c4:	f023 0201 	bic.w	r2, r3, #1
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	685b      	ldr	r3, [r3, #4]
 800f4d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	699b      	ldr	r3, [r3, #24]
 800f4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f4d8:	68fa      	ldr	r2, [r7, #12]
 800f4da:	4b37      	ldr	r3, [pc, #220]	@ (800f5b8 <TIM_OC1_SetConfig+0x108>)
 800f4dc:	4013      	ands	r3, r2
 800f4de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	f023 0303 	bic.w	r3, r3, #3
 800f4e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	4313      	orrs	r3, r2
 800f4f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	f023 0302 	bic.w	r3, r3, #2
 800f4f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	689b      	ldr	r3, [r3, #8]
 800f4fe:	697a      	ldr	r2, [r7, #20]
 800f500:	4313      	orrs	r3, r2
 800f502:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a2d      	ldr	r2, [pc, #180]	@ (800f5bc <TIM_OC1_SetConfig+0x10c>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d00f      	beq.n	800f52c <TIM_OC1_SetConfig+0x7c>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	4a2c      	ldr	r2, [pc, #176]	@ (800f5c0 <TIM_OC1_SetConfig+0x110>)
 800f510:	4293      	cmp	r3, r2
 800f512:	d00b      	beq.n	800f52c <TIM_OC1_SetConfig+0x7c>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4a2b      	ldr	r2, [pc, #172]	@ (800f5c4 <TIM_OC1_SetConfig+0x114>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d007      	beq.n	800f52c <TIM_OC1_SetConfig+0x7c>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4a2a      	ldr	r2, [pc, #168]	@ (800f5c8 <TIM_OC1_SetConfig+0x118>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d003      	beq.n	800f52c <TIM_OC1_SetConfig+0x7c>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4a29      	ldr	r2, [pc, #164]	@ (800f5cc <TIM_OC1_SetConfig+0x11c>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d10c      	bne.n	800f546 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	f023 0308 	bic.w	r3, r3, #8
 800f532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	697a      	ldr	r2, [r7, #20]
 800f53a:	4313      	orrs	r3, r2
 800f53c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f53e:	697b      	ldr	r3, [r7, #20]
 800f540:	f023 0304 	bic.w	r3, r3, #4
 800f544:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a1c      	ldr	r2, [pc, #112]	@ (800f5bc <TIM_OC1_SetConfig+0x10c>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d00f      	beq.n	800f56e <TIM_OC1_SetConfig+0xbe>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	4a1b      	ldr	r2, [pc, #108]	@ (800f5c0 <TIM_OC1_SetConfig+0x110>)
 800f552:	4293      	cmp	r3, r2
 800f554:	d00b      	beq.n	800f56e <TIM_OC1_SetConfig+0xbe>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a1a      	ldr	r2, [pc, #104]	@ (800f5c4 <TIM_OC1_SetConfig+0x114>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d007      	beq.n	800f56e <TIM_OC1_SetConfig+0xbe>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a19      	ldr	r2, [pc, #100]	@ (800f5c8 <TIM_OC1_SetConfig+0x118>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d003      	beq.n	800f56e <TIM_OC1_SetConfig+0xbe>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a18      	ldr	r2, [pc, #96]	@ (800f5cc <TIM_OC1_SetConfig+0x11c>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d111      	bne.n	800f592 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	695b      	ldr	r3, [r3, #20]
 800f582:	693a      	ldr	r2, [r7, #16]
 800f584:	4313      	orrs	r3, r2
 800f586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	699b      	ldr	r3, [r3, #24]
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	4313      	orrs	r3, r2
 800f590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	693a      	ldr	r2, [r7, #16]
 800f596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	68fa      	ldr	r2, [r7, #12]
 800f59c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	685a      	ldr	r2, [r3, #4]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	697a      	ldr	r2, [r7, #20]
 800f5aa:	621a      	str	r2, [r3, #32]
}
 800f5ac:	bf00      	nop
 800f5ae:	371c      	adds	r7, #28
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr
 800f5b8:	fffeff8f 	.word	0xfffeff8f
 800f5bc:	40010000 	.word	0x40010000
 800f5c0:	40010400 	.word	0x40010400
 800f5c4:	40014000 	.word	0x40014000
 800f5c8:	40014400 	.word	0x40014400
 800f5cc:	40014800 	.word	0x40014800

0800f5d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f5d0:	b480      	push	{r7}
 800f5d2:	b087      	sub	sp, #28
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
 800f5d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6a1b      	ldr	r3, [r3, #32]
 800f5de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6a1b      	ldr	r3, [r3, #32]
 800f5e4:	f023 0210 	bic.w	r2, r3, #16
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	685b      	ldr	r3, [r3, #4]
 800f5f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	699b      	ldr	r3, [r3, #24]
 800f5f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f5f8:	68fa      	ldr	r2, [r7, #12]
 800f5fa:	4b34      	ldr	r3, [pc, #208]	@ (800f6cc <TIM_OC2_SetConfig+0xfc>)
 800f5fc:	4013      	ands	r3, r2
 800f5fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	021b      	lsls	r3, r3, #8
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	4313      	orrs	r3, r2
 800f612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	f023 0320 	bic.w	r3, r3, #32
 800f61a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f61c:	683b      	ldr	r3, [r7, #0]
 800f61e:	689b      	ldr	r3, [r3, #8]
 800f620:	011b      	lsls	r3, r3, #4
 800f622:	697a      	ldr	r2, [r7, #20]
 800f624:	4313      	orrs	r3, r2
 800f626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4a29      	ldr	r2, [pc, #164]	@ (800f6d0 <TIM_OC2_SetConfig+0x100>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d003      	beq.n	800f638 <TIM_OC2_SetConfig+0x68>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a28      	ldr	r2, [pc, #160]	@ (800f6d4 <TIM_OC2_SetConfig+0x104>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d10d      	bne.n	800f654 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f638:	697b      	ldr	r3, [r7, #20]
 800f63a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f63e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f640:	683b      	ldr	r3, [r7, #0]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	011b      	lsls	r3, r3, #4
 800f646:	697a      	ldr	r2, [r7, #20]
 800f648:	4313      	orrs	r3, r2
 800f64a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f652:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	4a1e      	ldr	r2, [pc, #120]	@ (800f6d0 <TIM_OC2_SetConfig+0x100>)
 800f658:	4293      	cmp	r3, r2
 800f65a:	d00f      	beq.n	800f67c <TIM_OC2_SetConfig+0xac>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4a1d      	ldr	r2, [pc, #116]	@ (800f6d4 <TIM_OC2_SetConfig+0x104>)
 800f660:	4293      	cmp	r3, r2
 800f662:	d00b      	beq.n	800f67c <TIM_OC2_SetConfig+0xac>
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	4a1c      	ldr	r2, [pc, #112]	@ (800f6d8 <TIM_OC2_SetConfig+0x108>)
 800f668:	4293      	cmp	r3, r2
 800f66a:	d007      	beq.n	800f67c <TIM_OC2_SetConfig+0xac>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	4a1b      	ldr	r2, [pc, #108]	@ (800f6dc <TIM_OC2_SetConfig+0x10c>)
 800f670:	4293      	cmp	r3, r2
 800f672:	d003      	beq.n	800f67c <TIM_OC2_SetConfig+0xac>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4a1a      	ldr	r2, [pc, #104]	@ (800f6e0 <TIM_OC2_SetConfig+0x110>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d113      	bne.n	800f6a4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f68a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	695b      	ldr	r3, [r3, #20]
 800f690:	009b      	lsls	r3, r3, #2
 800f692:	693a      	ldr	r2, [r7, #16]
 800f694:	4313      	orrs	r3, r2
 800f696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	699b      	ldr	r3, [r3, #24]
 800f69c:	009b      	lsls	r3, r3, #2
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	4313      	orrs	r3, r2
 800f6a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	693a      	ldr	r2, [r7, #16]
 800f6a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	68fa      	ldr	r2, [r7, #12]
 800f6ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	685a      	ldr	r2, [r3, #4]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	697a      	ldr	r2, [r7, #20]
 800f6bc:	621a      	str	r2, [r3, #32]
}
 800f6be:	bf00      	nop
 800f6c0:	371c      	adds	r7, #28
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c8:	4770      	bx	lr
 800f6ca:	bf00      	nop
 800f6cc:	feff8fff 	.word	0xfeff8fff
 800f6d0:	40010000 	.word	0x40010000
 800f6d4:	40010400 	.word	0x40010400
 800f6d8:	40014000 	.word	0x40014000
 800f6dc:	40014400 	.word	0x40014400
 800f6e0:	40014800 	.word	0x40014800

0800f6e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f6e4:	b480      	push	{r7}
 800f6e6:	b087      	sub	sp, #28
 800f6e8:	af00      	add	r7, sp, #0
 800f6ea:	6078      	str	r0, [r7, #4]
 800f6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	6a1b      	ldr	r3, [r3, #32]
 800f6f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	6a1b      	ldr	r3, [r3, #32]
 800f6f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	685b      	ldr	r3, [r3, #4]
 800f704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	69db      	ldr	r3, [r3, #28]
 800f70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	4b33      	ldr	r3, [pc, #204]	@ (800f7dc <TIM_OC3_SetConfig+0xf8>)
 800f710:	4013      	ands	r3, r2
 800f712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f023 0303 	bic.w	r3, r3, #3
 800f71a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f71c:	683b      	ldr	r3, [r7, #0]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	68fa      	ldr	r2, [r7, #12]
 800f722:	4313      	orrs	r3, r2
 800f724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f72c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	689b      	ldr	r3, [r3, #8]
 800f732:	021b      	lsls	r3, r3, #8
 800f734:	697a      	ldr	r2, [r7, #20]
 800f736:	4313      	orrs	r3, r2
 800f738:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	4a28      	ldr	r2, [pc, #160]	@ (800f7e0 <TIM_OC3_SetConfig+0xfc>)
 800f73e:	4293      	cmp	r3, r2
 800f740:	d003      	beq.n	800f74a <TIM_OC3_SetConfig+0x66>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4a27      	ldr	r2, [pc, #156]	@ (800f7e4 <TIM_OC3_SetConfig+0x100>)
 800f746:	4293      	cmp	r3, r2
 800f748:	d10d      	bne.n	800f766 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f74a:	697b      	ldr	r3, [r7, #20]
 800f74c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f752:	683b      	ldr	r3, [r7, #0]
 800f754:	68db      	ldr	r3, [r3, #12]
 800f756:	021b      	lsls	r3, r3, #8
 800f758:	697a      	ldr	r2, [r7, #20]
 800f75a:	4313      	orrs	r3, r2
 800f75c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	4a1d      	ldr	r2, [pc, #116]	@ (800f7e0 <TIM_OC3_SetConfig+0xfc>)
 800f76a:	4293      	cmp	r3, r2
 800f76c:	d00f      	beq.n	800f78e <TIM_OC3_SetConfig+0xaa>
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	4a1c      	ldr	r2, [pc, #112]	@ (800f7e4 <TIM_OC3_SetConfig+0x100>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d00b      	beq.n	800f78e <TIM_OC3_SetConfig+0xaa>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	4a1b      	ldr	r2, [pc, #108]	@ (800f7e8 <TIM_OC3_SetConfig+0x104>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d007      	beq.n	800f78e <TIM_OC3_SetConfig+0xaa>
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	4a1a      	ldr	r2, [pc, #104]	@ (800f7ec <TIM_OC3_SetConfig+0x108>)
 800f782:	4293      	cmp	r3, r2
 800f784:	d003      	beq.n	800f78e <TIM_OC3_SetConfig+0xaa>
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4a19      	ldr	r2, [pc, #100]	@ (800f7f0 <TIM_OC3_SetConfig+0x10c>)
 800f78a:	4293      	cmp	r3, r2
 800f78c:	d113      	bne.n	800f7b6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f78e:	693b      	ldr	r3, [r7, #16]
 800f790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f79c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f79e:	683b      	ldr	r3, [r7, #0]
 800f7a0:	695b      	ldr	r3, [r3, #20]
 800f7a2:	011b      	lsls	r3, r3, #4
 800f7a4:	693a      	ldr	r2, [r7, #16]
 800f7a6:	4313      	orrs	r3, r2
 800f7a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f7aa:	683b      	ldr	r3, [r7, #0]
 800f7ac:	699b      	ldr	r3, [r3, #24]
 800f7ae:	011b      	lsls	r3, r3, #4
 800f7b0:	693a      	ldr	r2, [r7, #16]
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	693a      	ldr	r2, [r7, #16]
 800f7ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	68fa      	ldr	r2, [r7, #12]
 800f7c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	685a      	ldr	r2, [r3, #4]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	697a      	ldr	r2, [r7, #20]
 800f7ce:	621a      	str	r2, [r3, #32]
}
 800f7d0:	bf00      	nop
 800f7d2:	371c      	adds	r7, #28
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr
 800f7dc:	fffeff8f 	.word	0xfffeff8f
 800f7e0:	40010000 	.word	0x40010000
 800f7e4:	40010400 	.word	0x40010400
 800f7e8:	40014000 	.word	0x40014000
 800f7ec:	40014400 	.word	0x40014400
 800f7f0:	40014800 	.word	0x40014800

0800f7f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
 800f7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6a1b      	ldr	r3, [r3, #32]
 800f802:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	6a1b      	ldr	r3, [r3, #32]
 800f808:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	69db      	ldr	r3, [r3, #28]
 800f81a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f81c:	68fa      	ldr	r2, [r7, #12]
 800f81e:	4b24      	ldr	r3, [pc, #144]	@ (800f8b0 <TIM_OC4_SetConfig+0xbc>)
 800f820:	4013      	ands	r3, r2
 800f822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f82a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f82c:	683b      	ldr	r3, [r7, #0]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	021b      	lsls	r3, r3, #8
 800f832:	68fa      	ldr	r2, [r7, #12]
 800f834:	4313      	orrs	r3, r2
 800f836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f838:	693b      	ldr	r3, [r7, #16]
 800f83a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f83e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	689b      	ldr	r3, [r3, #8]
 800f844:	031b      	lsls	r3, r3, #12
 800f846:	693a      	ldr	r2, [r7, #16]
 800f848:	4313      	orrs	r3, r2
 800f84a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	4a19      	ldr	r2, [pc, #100]	@ (800f8b4 <TIM_OC4_SetConfig+0xc0>)
 800f850:	4293      	cmp	r3, r2
 800f852:	d00f      	beq.n	800f874 <TIM_OC4_SetConfig+0x80>
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	4a18      	ldr	r2, [pc, #96]	@ (800f8b8 <TIM_OC4_SetConfig+0xc4>)
 800f858:	4293      	cmp	r3, r2
 800f85a:	d00b      	beq.n	800f874 <TIM_OC4_SetConfig+0x80>
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	4a17      	ldr	r2, [pc, #92]	@ (800f8bc <TIM_OC4_SetConfig+0xc8>)
 800f860:	4293      	cmp	r3, r2
 800f862:	d007      	beq.n	800f874 <TIM_OC4_SetConfig+0x80>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4a16      	ldr	r2, [pc, #88]	@ (800f8c0 <TIM_OC4_SetConfig+0xcc>)
 800f868:	4293      	cmp	r3, r2
 800f86a:	d003      	beq.n	800f874 <TIM_OC4_SetConfig+0x80>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	4a15      	ldr	r2, [pc, #84]	@ (800f8c4 <TIM_OC4_SetConfig+0xd0>)
 800f870:	4293      	cmp	r3, r2
 800f872:	d109      	bne.n	800f888 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f87a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	695b      	ldr	r3, [r3, #20]
 800f880:	019b      	lsls	r3, r3, #6
 800f882:	697a      	ldr	r2, [r7, #20]
 800f884:	4313      	orrs	r3, r2
 800f886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	697a      	ldr	r2, [r7, #20]
 800f88c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	68fa      	ldr	r2, [r7, #12]
 800f892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	685a      	ldr	r2, [r3, #4]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	693a      	ldr	r2, [r7, #16]
 800f8a0:	621a      	str	r2, [r3, #32]
}
 800f8a2:	bf00      	nop
 800f8a4:	371c      	adds	r7, #28
 800f8a6:	46bd      	mov	sp, r7
 800f8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ac:	4770      	bx	lr
 800f8ae:	bf00      	nop
 800f8b0:	feff8fff 	.word	0xfeff8fff
 800f8b4:	40010000 	.word	0x40010000
 800f8b8:	40010400 	.word	0x40010400
 800f8bc:	40014000 	.word	0x40014000
 800f8c0:	40014400 	.word	0x40014400
 800f8c4:	40014800 	.word	0x40014800

0800f8c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f8c8:	b480      	push	{r7}
 800f8ca:	b087      	sub	sp, #28
 800f8cc:	af00      	add	r7, sp, #0
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	6a1b      	ldr	r3, [r3, #32]
 800f8d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a1b      	ldr	r3, [r3, #32]
 800f8dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f8ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f8f0:	68fa      	ldr	r2, [r7, #12]
 800f8f2:	4b21      	ldr	r3, [pc, #132]	@ (800f978 <TIM_OC5_SetConfig+0xb0>)
 800f8f4:	4013      	ands	r3, r2
 800f8f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	68fa      	ldr	r2, [r7, #12]
 800f8fe:	4313      	orrs	r3, r2
 800f900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f902:	693b      	ldr	r3, [r7, #16]
 800f904:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f908:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f90a:	683b      	ldr	r3, [r7, #0]
 800f90c:	689b      	ldr	r3, [r3, #8]
 800f90e:	041b      	lsls	r3, r3, #16
 800f910:	693a      	ldr	r2, [r7, #16]
 800f912:	4313      	orrs	r3, r2
 800f914:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	4a18      	ldr	r2, [pc, #96]	@ (800f97c <TIM_OC5_SetConfig+0xb4>)
 800f91a:	4293      	cmp	r3, r2
 800f91c:	d00f      	beq.n	800f93e <TIM_OC5_SetConfig+0x76>
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4a17      	ldr	r2, [pc, #92]	@ (800f980 <TIM_OC5_SetConfig+0xb8>)
 800f922:	4293      	cmp	r3, r2
 800f924:	d00b      	beq.n	800f93e <TIM_OC5_SetConfig+0x76>
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	4a16      	ldr	r2, [pc, #88]	@ (800f984 <TIM_OC5_SetConfig+0xbc>)
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d007      	beq.n	800f93e <TIM_OC5_SetConfig+0x76>
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	4a15      	ldr	r2, [pc, #84]	@ (800f988 <TIM_OC5_SetConfig+0xc0>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d003      	beq.n	800f93e <TIM_OC5_SetConfig+0x76>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	4a14      	ldr	r2, [pc, #80]	@ (800f98c <TIM_OC5_SetConfig+0xc4>)
 800f93a:	4293      	cmp	r3, r2
 800f93c:	d109      	bne.n	800f952 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f944:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	695b      	ldr	r3, [r3, #20]
 800f94a:	021b      	lsls	r3, r3, #8
 800f94c:	697a      	ldr	r2, [r7, #20]
 800f94e:	4313      	orrs	r3, r2
 800f950:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	697a      	ldr	r2, [r7, #20]
 800f956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	68fa      	ldr	r2, [r7, #12]
 800f95c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	685a      	ldr	r2, [r3, #4]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	693a      	ldr	r2, [r7, #16]
 800f96a:	621a      	str	r2, [r3, #32]
}
 800f96c:	bf00      	nop
 800f96e:	371c      	adds	r7, #28
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr
 800f978:	fffeff8f 	.word	0xfffeff8f
 800f97c:	40010000 	.word	0x40010000
 800f980:	40010400 	.word	0x40010400
 800f984:	40014000 	.word	0x40014000
 800f988:	40014400 	.word	0x40014400
 800f98c:	40014800 	.word	0x40014800

0800f990 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f990:	b480      	push	{r7}
 800f992:	b087      	sub	sp, #28
 800f994:	af00      	add	r7, sp, #0
 800f996:	6078      	str	r0, [r7, #4]
 800f998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6a1b      	ldr	r3, [r3, #32]
 800f99e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	6a1b      	ldr	r3, [r3, #32]
 800f9a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f9a8:	687b      	ldr	r3, [r7, #4]
 800f9aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	685b      	ldr	r3, [r3, #4]
 800f9b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f9b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f9b8:	68fa      	ldr	r2, [r7, #12]
 800f9ba:	4b22      	ldr	r3, [pc, #136]	@ (800fa44 <TIM_OC6_SetConfig+0xb4>)
 800f9bc:	4013      	ands	r3, r2
 800f9be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	021b      	lsls	r3, r3, #8
 800f9c6:	68fa      	ldr	r2, [r7, #12]
 800f9c8:	4313      	orrs	r3, r2
 800f9ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f9d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	689b      	ldr	r3, [r3, #8]
 800f9d8:	051b      	lsls	r3, r3, #20
 800f9da:	693a      	ldr	r2, [r7, #16]
 800f9dc:	4313      	orrs	r3, r2
 800f9de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	4a19      	ldr	r2, [pc, #100]	@ (800fa48 <TIM_OC6_SetConfig+0xb8>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d00f      	beq.n	800fa08 <TIM_OC6_SetConfig+0x78>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	4a18      	ldr	r2, [pc, #96]	@ (800fa4c <TIM_OC6_SetConfig+0xbc>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d00b      	beq.n	800fa08 <TIM_OC6_SetConfig+0x78>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	4a17      	ldr	r2, [pc, #92]	@ (800fa50 <TIM_OC6_SetConfig+0xc0>)
 800f9f4:	4293      	cmp	r3, r2
 800f9f6:	d007      	beq.n	800fa08 <TIM_OC6_SetConfig+0x78>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	4a16      	ldr	r2, [pc, #88]	@ (800fa54 <TIM_OC6_SetConfig+0xc4>)
 800f9fc:	4293      	cmp	r3, r2
 800f9fe:	d003      	beq.n	800fa08 <TIM_OC6_SetConfig+0x78>
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	4a15      	ldr	r2, [pc, #84]	@ (800fa58 <TIM_OC6_SetConfig+0xc8>)
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d109      	bne.n	800fa1c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800fa0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	695b      	ldr	r3, [r3, #20]
 800fa14:	029b      	lsls	r3, r3, #10
 800fa16:	697a      	ldr	r2, [r7, #20]
 800fa18:	4313      	orrs	r3, r2
 800fa1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	697a      	ldr	r2, [r7, #20]
 800fa20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	68fa      	ldr	r2, [r7, #12]
 800fa26:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fa28:	683b      	ldr	r3, [r7, #0]
 800fa2a:	685a      	ldr	r2, [r3, #4]
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	693a      	ldr	r2, [r7, #16]
 800fa34:	621a      	str	r2, [r3, #32]
}
 800fa36:	bf00      	nop
 800fa38:	371c      	adds	r7, #28
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa40:	4770      	bx	lr
 800fa42:	bf00      	nop
 800fa44:	feff8fff 	.word	0xfeff8fff
 800fa48:	40010000 	.word	0x40010000
 800fa4c:	40010400 	.word	0x40010400
 800fa50:	40014000 	.word	0x40014000
 800fa54:	40014400 	.word	0x40014400
 800fa58:	40014800 	.word	0x40014800

0800fa5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b087      	sub	sp, #28
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	60f8      	str	r0, [r7, #12]
 800fa64:	60b9      	str	r1, [r7, #8]
 800fa66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	6a1b      	ldr	r3, [r3, #32]
 800fa6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	6a1b      	ldr	r3, [r3, #32]
 800fa72:	f023 0201 	bic.w	r2, r3, #1
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	699b      	ldr	r3, [r3, #24]
 800fa7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800fa80:	693b      	ldr	r3, [r7, #16]
 800fa82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800fa86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	011b      	lsls	r3, r3, #4
 800fa8c:	693a      	ldr	r2, [r7, #16]
 800fa8e:	4313      	orrs	r3, r2
 800fa90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800fa92:	697b      	ldr	r3, [r7, #20]
 800fa94:	f023 030a 	bic.w	r3, r3, #10
 800fa98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800fa9a:	697a      	ldr	r2, [r7, #20]
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	4313      	orrs	r3, r2
 800faa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	693a      	ldr	r2, [r7, #16]
 800faa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	697a      	ldr	r2, [r7, #20]
 800faac:	621a      	str	r2, [r3, #32]
}
 800faae:	bf00      	nop
 800fab0:	371c      	adds	r7, #28
 800fab2:	46bd      	mov	sp, r7
 800fab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab8:	4770      	bx	lr

0800faba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800faba:	b480      	push	{r7}
 800fabc:	b087      	sub	sp, #28
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	60f8      	str	r0, [r7, #12]
 800fac2:	60b9      	str	r1, [r7, #8]
 800fac4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	6a1b      	ldr	r3, [r3, #32]
 800faca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6a1b      	ldr	r3, [r3, #32]
 800fad0:	f023 0210 	bic.w	r2, r3, #16
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	699b      	ldr	r3, [r3, #24]
 800fadc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fae4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	031b      	lsls	r3, r3, #12
 800faea:	693a      	ldr	r2, [r7, #16]
 800faec:	4313      	orrs	r3, r2
 800faee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800faf6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	011b      	lsls	r3, r3, #4
 800fafc:	697a      	ldr	r2, [r7, #20]
 800fafe:	4313      	orrs	r3, r2
 800fb00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fb02:	68fb      	ldr	r3, [r7, #12]
 800fb04:	693a      	ldr	r2, [r7, #16]
 800fb06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	697a      	ldr	r2, [r7, #20]
 800fb0c:	621a      	str	r2, [r3, #32]
}
 800fb0e:	bf00      	nop
 800fb10:	371c      	adds	r7, #28
 800fb12:	46bd      	mov	sp, r7
 800fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb18:	4770      	bx	lr
	...

0800fb1c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fb1c:	b480      	push	{r7}
 800fb1e:	b085      	sub	sp, #20
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	689b      	ldr	r3, [r3, #8]
 800fb2a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fb2c:	68fa      	ldr	r2, [r7, #12]
 800fb2e:	4b09      	ldr	r3, [pc, #36]	@ (800fb54 <TIM_ITRx_SetConfig+0x38>)
 800fb30:	4013      	ands	r3, r2
 800fb32:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fb34:	683a      	ldr	r2, [r7, #0]
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	4313      	orrs	r3, r2
 800fb3a:	f043 0307 	orr.w	r3, r3, #7
 800fb3e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	609a      	str	r2, [r3, #8]
}
 800fb46:	bf00      	nop
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr
 800fb52:	bf00      	nop
 800fb54:	ffcfff8f 	.word	0xffcfff8f

0800fb58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800fb58:	b480      	push	{r7}
 800fb5a:	b087      	sub	sp, #28
 800fb5c:	af00      	add	r7, sp, #0
 800fb5e:	60f8      	str	r0, [r7, #12]
 800fb60:	60b9      	str	r1, [r7, #8]
 800fb62:	607a      	str	r2, [r7, #4]
 800fb64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	689b      	ldr	r3, [r3, #8]
 800fb6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800fb72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fb74:	683b      	ldr	r3, [r7, #0]
 800fb76:	021a      	lsls	r2, r3, #8
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	431a      	orrs	r2, r3
 800fb7c:	68bb      	ldr	r3, [r7, #8]
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	697a      	ldr	r2, [r7, #20]
 800fb82:	4313      	orrs	r3, r2
 800fb84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	697a      	ldr	r2, [r7, #20]
 800fb8a:	609a      	str	r2, [r3, #8]
}
 800fb8c:	bf00      	nop
 800fb8e:	371c      	adds	r7, #28
 800fb90:	46bd      	mov	sp, r7
 800fb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb96:	4770      	bx	lr

0800fb98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b087      	sub	sp, #28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	60f8      	str	r0, [r7, #12]
 800fba0:	60b9      	str	r1, [r7, #8]
 800fba2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	f003 031f 	and.w	r3, r3, #31
 800fbaa:	2201      	movs	r2, #1
 800fbac:	fa02 f303 	lsl.w	r3, r2, r3
 800fbb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	6a1a      	ldr	r2, [r3, #32]
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	43db      	mvns	r3, r3
 800fbba:	401a      	ands	r2, r3
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6a1a      	ldr	r2, [r3, #32]
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	f003 031f 	and.w	r3, r3, #31
 800fbca:	6879      	ldr	r1, [r7, #4]
 800fbcc:	fa01 f303 	lsl.w	r3, r1, r3
 800fbd0:	431a      	orrs	r2, r3
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	621a      	str	r2, [r3, #32]
}
 800fbd6:	bf00      	nop
 800fbd8:	371c      	adds	r7, #28
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
	...

0800fbe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
 800fbec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d101      	bne.n	800fbfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fbf8:	2302      	movs	r3, #2
 800fbfa:	e077      	b.n	800fcec <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2202      	movs	r2, #2
 800fc08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	689b      	ldr	r3, [r3, #8]
 800fc1a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a35      	ldr	r2, [pc, #212]	@ (800fcf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc22:	4293      	cmp	r3, r2
 800fc24:	d004      	beq.n	800fc30 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	4a34      	ldr	r2, [pc, #208]	@ (800fcfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc2c:	4293      	cmp	r3, r2
 800fc2e:	d108      	bne.n	800fc42 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800fc36:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	4313      	orrs	r3, r2
 800fc40:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fc48:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	68fa      	ldr	r2, [r7, #12]
 800fc50:	4313      	orrs	r3, r2
 800fc52:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	681b      	ldr	r3, [r3, #0]
 800fc60:	4a25      	ldr	r2, [pc, #148]	@ (800fcf8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fc62:	4293      	cmp	r3, r2
 800fc64:	d02c      	beq.n	800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc6e:	d027      	beq.n	800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	681b      	ldr	r3, [r3, #0]
 800fc74:	4a22      	ldr	r2, [pc, #136]	@ (800fd00 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fc76:	4293      	cmp	r3, r2
 800fc78:	d022      	beq.n	800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	4a21      	ldr	r2, [pc, #132]	@ (800fd04 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fc80:	4293      	cmp	r3, r2
 800fc82:	d01d      	beq.n	800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	4a1f      	ldr	r2, [pc, #124]	@ (800fd08 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fc8a:	4293      	cmp	r3, r2
 800fc8c:	d018      	beq.n	800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	4a1a      	ldr	r2, [pc, #104]	@ (800fcfc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fc94:	4293      	cmp	r3, r2
 800fc96:	d013      	beq.n	800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a1b      	ldr	r2, [pc, #108]	@ (800fd0c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d00e      	beq.n	800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	4a1a      	ldr	r2, [pc, #104]	@ (800fd10 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800fca8:	4293      	cmp	r3, r2
 800fcaa:	d009      	beq.n	800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	4a18      	ldr	r2, [pc, #96]	@ (800fd14 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d004      	beq.n	800fcc0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	4a17      	ldr	r2, [pc, #92]	@ (800fd18 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800fcbc:	4293      	cmp	r3, r2
 800fcbe:	d10c      	bne.n	800fcda <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fcc6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	689b      	ldr	r3, [r3, #8]
 800fccc:	68ba      	ldr	r2, [r7, #8]
 800fcce:	4313      	orrs	r3, r2
 800fcd0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	68ba      	ldr	r2, [r7, #8]
 800fcd8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2201      	movs	r2, #1
 800fcde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2200      	movs	r2, #0
 800fce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3714      	adds	r7, #20
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr
 800fcf8:	40010000 	.word	0x40010000
 800fcfc:	40010400 	.word	0x40010400
 800fd00:	40000400 	.word	0x40000400
 800fd04:	40000800 	.word	0x40000800
 800fd08:	40000c00 	.word	0x40000c00
 800fd0c:	40001800 	.word	0x40001800
 800fd10:	40014000 	.word	0x40014000
 800fd14:	4000e000 	.word	0x4000e000
 800fd18:	4000e400 	.word	0x4000e400

0800fd1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b085      	sub	sp, #20
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
 800fd24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fd26:	2300      	movs	r3, #0
 800fd28:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fd30:	2b01      	cmp	r3, #1
 800fd32:	d101      	bne.n	800fd38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fd34:	2302      	movs	r3, #2
 800fd36:	e073      	b.n	800fe20 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2201      	movs	r2, #1
 800fd3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	4313      	orrs	r3, r2
 800fd4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	689b      	ldr	r3, [r3, #8]
 800fd58:	4313      	orrs	r3, r2
 800fd5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800fd62:	683b      	ldr	r3, [r7, #0]
 800fd64:	685b      	ldr	r3, [r3, #4]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4313      	orrs	r3, r2
 800fd76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fd78:	68fb      	ldr	r3, [r7, #12]
 800fd7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	691b      	ldr	r3, [r3, #16]
 800fd82:	4313      	orrs	r3, r2
 800fd84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	695b      	ldr	r3, [r3, #20]
 800fd90:	4313      	orrs	r3, r2
 800fd92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	699b      	ldr	r3, [r3, #24]
 800fdac:	041b      	lsls	r3, r3, #16
 800fdae:	4313      	orrs	r3, r2
 800fdb0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800fdb8:	683b      	ldr	r3, [r7, #0]
 800fdba:	69db      	ldr	r3, [r3, #28]
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	4a19      	ldr	r2, [pc, #100]	@ (800fe2c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d004      	beq.n	800fdd4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	4a18      	ldr	r2, [pc, #96]	@ (800fe30 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800fdd0:	4293      	cmp	r3, r2
 800fdd2:	d11c      	bne.n	800fe0e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdde:	051b      	lsls	r3, r3, #20
 800fde0:	4313      	orrs	r3, r2
 800fde2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	6a1b      	ldr	r3, [r3, #32]
 800fdee:	4313      	orrs	r3, r2
 800fdf0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfc:	4313      	orrs	r3, r2
 800fdfe:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fe00:	68fb      	ldr	r3, [r7, #12]
 800fe02:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800fe06:	683b      	ldr	r3, [r7, #0]
 800fe08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	68fa      	ldr	r2, [r7, #12]
 800fe14:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fe1e:	2300      	movs	r3, #0
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3714      	adds	r7, #20
 800fe24:	46bd      	mov	sp, r7
 800fe26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2a:	4770      	bx	lr
 800fe2c:	40010000 	.word	0x40010000
 800fe30:	40010400 	.word	0x40010400

0800fe34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d101      	bne.n	800fe46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fe42:	2301      	movs	r3, #1
 800fe44:	e042      	b.n	800fecc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d106      	bne.n	800fe5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	2200      	movs	r2, #0
 800fe54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7f3 ff77 	bl	8003d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	2224      	movs	r2, #36	@ 0x24
 800fe62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	681a      	ldr	r2, [r3, #0]
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f022 0201 	bic.w	r2, r2, #1
 800fe74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d002      	beq.n	800fe84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f001 fb00 	bl	8011484 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 fc91 	bl	80107ac <UART_SetConfig>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	2b01      	cmp	r3, #1
 800fe8e:	d101      	bne.n	800fe94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fe90:	2301      	movs	r3, #1
 800fe92:	e01b      	b.n	800fecc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	685a      	ldr	r2, [r3, #4]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fea2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	689a      	ldr	r2, [r3, #8]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800feb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	681a      	ldr	r2, [r3, #0]
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	f042 0201 	orr.w	r2, r2, #1
 800fec2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f001 fb7f 	bl	80115c8 <UART_CheckIdleState>
 800feca:	4603      	mov	r3, r0
}
 800fecc:	4618      	mov	r0, r3
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b08a      	sub	sp, #40	@ 0x28
 800fed8:	af00      	add	r7, sp, #0
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	60b9      	str	r1, [r7, #8]
 800fede:	4613      	mov	r3, r2
 800fee0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fee8:	2b20      	cmp	r3, #32
 800feea:	d167      	bne.n	800ffbc <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d002      	beq.n	800fef8 <HAL_UART_Transmit_DMA+0x24>
 800fef2:	88fb      	ldrh	r3, [r7, #6]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d101      	bne.n	800fefc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800fef8:	2301      	movs	r3, #1
 800fefa:	e060      	b.n	800ffbe <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	68ba      	ldr	r2, [r7, #8]
 800ff00:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	88fa      	ldrh	r2, [r7, #6]
 800ff06:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	88fa      	ldrh	r2, [r7, #6]
 800ff0e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2200      	movs	r2, #0
 800ff16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2221      	movs	r2, #33	@ 0x21
 800ff1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d028      	beq.n	800ff7c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff2e:	4a26      	ldr	r2, [pc, #152]	@ (800ffc8 <HAL_UART_Transmit_DMA+0xf4>)
 800ff30:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff36:	4a25      	ldr	r2, [pc, #148]	@ (800ffcc <HAL_UART_Transmit_DMA+0xf8>)
 800ff38:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff3e:	4a24      	ldr	r2, [pc, #144]	@ (800ffd0 <HAL_UART_Transmit_DMA+0xfc>)
 800ff40:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff46:	2200      	movs	r2, #0
 800ff48:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff52:	4619      	mov	r1, r3
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	3328      	adds	r3, #40	@ 0x28
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	88fb      	ldrh	r3, [r7, #6]
 800ff5e:	f7f7 f8e7 	bl	8007130 <HAL_DMA_Start_IT>
 800ff62:	4603      	mov	r3, r0
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d009      	beq.n	800ff7c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2210      	movs	r2, #16
 800ff6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	2220      	movs	r2, #32
 800ff74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e020      	b.n	800ffbe <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	2240      	movs	r2, #64	@ 0x40
 800ff82:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	3308      	adds	r3, #8
 800ff8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	e853 3f00 	ldrex	r3, [r3]
 800ff92:	613b      	str	r3, [r7, #16]
   return(result);
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ff9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	3308      	adds	r3, #8
 800ffa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffa4:	623a      	str	r2, [r7, #32]
 800ffa6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa8:	69f9      	ldr	r1, [r7, #28]
 800ffaa:	6a3a      	ldr	r2, [r7, #32]
 800ffac:	e841 2300 	strex	r3, r2, [r1]
 800ffb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800ffb2:	69bb      	ldr	r3, [r7, #24]
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d1e5      	bne.n	800ff84 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	e000      	b.n	800ffbe <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ffbc:	2302      	movs	r3, #2
  }
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3728      	adds	r7, #40	@ 0x28
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	08011a95 	.word	0x08011a95
 800ffcc:	08011b2b 	.word	0x08011b2b
 800ffd0:	08011cad 	.word	0x08011cad

0800ffd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ffd4:	b580      	push	{r7, lr}
 800ffd6:	b0ba      	sub	sp, #232	@ 0xe8
 800ffd8:	af00      	add	r7, sp, #0
 800ffda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	69db      	ldr	r3, [r3, #28]
 800ffe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800fffa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800fffe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8010002:	4013      	ands	r3, r2
 8010004:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801000c:	2b00      	cmp	r3, #0
 801000e:	d11b      	bne.n	8010048 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010014:	f003 0320 	and.w	r3, r3, #32
 8010018:	2b00      	cmp	r3, #0
 801001a:	d015      	beq.n	8010048 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801001c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010020:	f003 0320 	and.w	r3, r3, #32
 8010024:	2b00      	cmp	r3, #0
 8010026:	d105      	bne.n	8010034 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801002c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010030:	2b00      	cmp	r3, #0
 8010032:	d009      	beq.n	8010048 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010038:	2b00      	cmp	r3, #0
 801003a:	f000 8377 	beq.w	801072c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010042:	6878      	ldr	r0, [r7, #4]
 8010044:	4798      	blx	r3
      }
      return;
 8010046:	e371      	b.n	801072c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010048:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 801004c:	2b00      	cmp	r3, #0
 801004e:	f000 8123 	beq.w	8010298 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8010052:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010056:	4b8d      	ldr	r3, [pc, #564]	@ (801028c <HAL_UART_IRQHandler+0x2b8>)
 8010058:	4013      	ands	r3, r2
 801005a:	2b00      	cmp	r3, #0
 801005c:	d106      	bne.n	801006c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801005e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8010062:	4b8b      	ldr	r3, [pc, #556]	@ (8010290 <HAL_UART_IRQHandler+0x2bc>)
 8010064:	4013      	ands	r3, r2
 8010066:	2b00      	cmp	r3, #0
 8010068:	f000 8116 	beq.w	8010298 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801006c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010070:	f003 0301 	and.w	r3, r3, #1
 8010074:	2b00      	cmp	r3, #0
 8010076:	d011      	beq.n	801009c <HAL_UART_IRQHandler+0xc8>
 8010078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801007c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010080:	2b00      	cmp	r3, #0
 8010082:	d00b      	beq.n	801009c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	2201      	movs	r2, #1
 801008a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010092:	f043 0201 	orr.w	r2, r3, #1
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801009c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100a0:	f003 0302 	and.w	r3, r3, #2
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d011      	beq.n	80100cc <HAL_UART_IRQHandler+0xf8>
 80100a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100ac:	f003 0301 	and.w	r3, r3, #1
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d00b      	beq.n	80100cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	2202      	movs	r2, #2
 80100ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100c2:	f043 0204 	orr.w	r2, r3, #4
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100d0:	f003 0304 	and.w	r3, r3, #4
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d011      	beq.n	80100fc <HAL_UART_IRQHandler+0x128>
 80100d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100dc:	f003 0301 	and.w	r3, r3, #1
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d00b      	beq.n	80100fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	2204      	movs	r2, #4
 80100ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100f2:	f043 0202 	orr.w	r2, r3, #2
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80100fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010100:	f003 0308 	and.w	r3, r3, #8
 8010104:	2b00      	cmp	r3, #0
 8010106:	d017      	beq.n	8010138 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801010c:	f003 0320 	and.w	r3, r3, #32
 8010110:	2b00      	cmp	r3, #0
 8010112:	d105      	bne.n	8010120 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010114:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010118:	4b5c      	ldr	r3, [pc, #368]	@ (801028c <HAL_UART_IRQHandler+0x2b8>)
 801011a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801011c:	2b00      	cmp	r3, #0
 801011e:	d00b      	beq.n	8010138 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2208      	movs	r2, #8
 8010126:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801012e:	f043 0208 	orr.w	r2, r3, #8
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010138:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801013c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010140:	2b00      	cmp	r3, #0
 8010142:	d012      	beq.n	801016a <HAL_UART_IRQHandler+0x196>
 8010144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010148:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 801014c:	2b00      	cmp	r3, #0
 801014e:	d00c      	beq.n	801016a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010160:	f043 0220 	orr.w	r2, r3, #32
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010170:	2b00      	cmp	r3, #0
 8010172:	f000 82dd 	beq.w	8010730 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801017a:	f003 0320 	and.w	r3, r3, #32
 801017e:	2b00      	cmp	r3, #0
 8010180:	d013      	beq.n	80101aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010186:	f003 0320 	and.w	r3, r3, #32
 801018a:	2b00      	cmp	r3, #0
 801018c:	d105      	bne.n	801019a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801018e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010196:	2b00      	cmp	r3, #0
 8010198:	d007      	beq.n	80101aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801019e:	2b00      	cmp	r3, #0
 80101a0:	d003      	beq.n	80101aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101a6:	6878      	ldr	r0, [r7, #4]
 80101a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	689b      	ldr	r3, [r3, #8]
 80101ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101be:	2b40      	cmp	r3, #64	@ 0x40
 80101c0:	d005      	beq.n	80101ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80101c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80101c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d054      	beq.n	8010278 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f001 fbfa 	bl	80119c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	689b      	ldr	r3, [r3, #8]
 80101da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101de:	2b40      	cmp	r3, #64	@ 0x40
 80101e0:	d146      	bne.n	8010270 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	681b      	ldr	r3, [r3, #0]
 80101e6:	3308      	adds	r3, #8
 80101e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80101f0:	e853 3f00 	ldrex	r3, [r3]
 80101f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80101f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80101fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010200:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	3308      	adds	r3, #8
 801020a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801020e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8010212:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 801021a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801021e:	e841 2300 	strex	r3, r2, [r1]
 8010222:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801022a:	2b00      	cmp	r3, #0
 801022c:	d1d9      	bne.n	80101e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010234:	2b00      	cmp	r3, #0
 8010236:	d017      	beq.n	8010268 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801023e:	4a15      	ldr	r2, [pc, #84]	@ (8010294 <HAL_UART_IRQHandler+0x2c0>)
 8010240:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010248:	4618      	mov	r0, r3
 801024a:	f7f7 fcf9 	bl	8007c40 <HAL_DMA_Abort_IT>
 801024e:	4603      	mov	r3, r0
 8010250:	2b00      	cmp	r3, #0
 8010252:	d019      	beq.n	8010288 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801025a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801025c:	687a      	ldr	r2, [r7, #4]
 801025e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8010262:	4610      	mov	r0, r2
 8010264:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010266:	e00f      	b.n	8010288 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 fa95 	bl	8010798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801026e:	e00b      	b.n	8010288 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010270:	6878      	ldr	r0, [r7, #4]
 8010272:	f000 fa91 	bl	8010798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010276:	e007      	b.n	8010288 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010278:	6878      	ldr	r0, [r7, #4]
 801027a:	f000 fa8d 	bl	8010798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	2200      	movs	r2, #0
 8010282:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010286:	e253      	b.n	8010730 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010288:	bf00      	nop
    return;
 801028a:	e251      	b.n	8010730 <HAL_UART_IRQHandler+0x75c>
 801028c:	10000001 	.word	0x10000001
 8010290:	04000120 	.word	0x04000120
 8010294:	08011d2d 	.word	0x08011d2d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801029c:	2b01      	cmp	r3, #1
 801029e:	f040 81e7 	bne.w	8010670 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80102a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102a6:	f003 0310 	and.w	r3, r3, #16
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	f000 81e0 	beq.w	8010670 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80102b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102b4:	f003 0310 	and.w	r3, r3, #16
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	f000 81d9 	beq.w	8010670 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	2210      	movs	r2, #16
 80102c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	689b      	ldr	r3, [r3, #8]
 80102cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102d0:	2b40      	cmp	r3, #64	@ 0x40
 80102d2:	f040 8151 	bne.w	8010578 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4a96      	ldr	r2, [pc, #600]	@ (8010538 <HAL_UART_IRQHandler+0x564>)
 80102e0:	4293      	cmp	r3, r2
 80102e2:	d068      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4a93      	ldr	r2, [pc, #588]	@ (801053c <HAL_UART_IRQHandler+0x568>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d061      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4a91      	ldr	r2, [pc, #580]	@ (8010540 <HAL_UART_IRQHandler+0x56c>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d05a      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	4a8e      	ldr	r2, [pc, #568]	@ (8010544 <HAL_UART_IRQHandler+0x570>)
 801030a:	4293      	cmp	r3, r2
 801030c:	d053      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	4a8c      	ldr	r2, [pc, #560]	@ (8010548 <HAL_UART_IRQHandler+0x574>)
 8010318:	4293      	cmp	r3, r2
 801031a:	d04c      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	4a89      	ldr	r2, [pc, #548]	@ (801054c <HAL_UART_IRQHandler+0x578>)
 8010326:	4293      	cmp	r3, r2
 8010328:	d045      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	4a87      	ldr	r2, [pc, #540]	@ (8010550 <HAL_UART_IRQHandler+0x57c>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d03e      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	4a84      	ldr	r2, [pc, #528]	@ (8010554 <HAL_UART_IRQHandler+0x580>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d037      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4a82      	ldr	r2, [pc, #520]	@ (8010558 <HAL_UART_IRQHandler+0x584>)
 8010350:	4293      	cmp	r3, r2
 8010352:	d030      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	4a7f      	ldr	r2, [pc, #508]	@ (801055c <HAL_UART_IRQHandler+0x588>)
 801035e:	4293      	cmp	r3, r2
 8010360:	d029      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	4a7d      	ldr	r2, [pc, #500]	@ (8010560 <HAL_UART_IRQHandler+0x58c>)
 801036c:	4293      	cmp	r3, r2
 801036e:	d022      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	4a7a      	ldr	r2, [pc, #488]	@ (8010564 <HAL_UART_IRQHandler+0x590>)
 801037a:	4293      	cmp	r3, r2
 801037c:	d01b      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4a78      	ldr	r2, [pc, #480]	@ (8010568 <HAL_UART_IRQHandler+0x594>)
 8010388:	4293      	cmp	r3, r2
 801038a:	d014      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	4a75      	ldr	r2, [pc, #468]	@ (801056c <HAL_UART_IRQHandler+0x598>)
 8010396:	4293      	cmp	r3, r2
 8010398:	d00d      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	4a73      	ldr	r2, [pc, #460]	@ (8010570 <HAL_UART_IRQHandler+0x59c>)
 80103a4:	4293      	cmp	r3, r2
 80103a6:	d006      	beq.n	80103b6 <HAL_UART_IRQHandler+0x3e2>
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4a70      	ldr	r2, [pc, #448]	@ (8010574 <HAL_UART_IRQHandler+0x5a0>)
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d106      	bne.n	80103c4 <HAL_UART_IRQHandler+0x3f0>
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	685b      	ldr	r3, [r3, #4]
 80103c0:	b29b      	uxth	r3, r3
 80103c2:	e005      	b.n	80103d0 <HAL_UART_IRQHandler+0x3fc>
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	685b      	ldr	r3, [r3, #4]
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80103d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80103d8:	2b00      	cmp	r3, #0
 80103da:	f000 81ab 	beq.w	8010734 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80103e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80103e8:	429a      	cmp	r2, r3
 80103ea:	f080 81a3 	bcs.w	8010734 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80103f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103fe:	69db      	ldr	r3, [r3, #28]
 8010400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010404:	f000 8087 	beq.w	8010516 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010410:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010414:	e853 3f00 	ldrex	r3, [r3]
 8010418:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801041c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010420:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010424:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	461a      	mov	r2, r3
 801042e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010432:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010436:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801043e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010442:	e841 2300 	strex	r3, r2, [r1]
 8010446:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801044a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1da      	bne.n	8010408 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	681b      	ldr	r3, [r3, #0]
 8010456:	3308      	adds	r3, #8
 8010458:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801045a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801045c:	e853 3f00 	ldrex	r3, [r3]
 8010460:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010464:	f023 0301 	bic.w	r3, r3, #1
 8010468:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	3308      	adds	r3, #8
 8010472:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010476:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801047a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801047c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801047e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010482:	e841 2300 	strex	r3, r2, [r1]
 8010486:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801048a:	2b00      	cmp	r3, #0
 801048c:	d1e1      	bne.n	8010452 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	3308      	adds	r3, #8
 8010494:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010498:	e853 3f00 	ldrex	r3, [r3]
 801049c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801049e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	681b      	ldr	r3, [r3, #0]
 80104ac:	3308      	adds	r3, #8
 80104ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80104b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80104b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80104b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80104ba:	e841 2300 	strex	r3, r2, [r1]
 80104be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80104c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d1e3      	bne.n	801048e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2220      	movs	r2, #32
 80104ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2200      	movs	r2, #0
 80104d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104dc:	e853 3f00 	ldrex	r3, [r3]
 80104e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80104e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80104e4:	f023 0310 	bic.w	r3, r3, #16
 80104e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	461a      	mov	r2, r3
 80104f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80104f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80104f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80104fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80104fe:	e841 2300 	strex	r3, r2, [r1]
 8010502:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010506:	2b00      	cmp	r3, #0
 8010508:	d1e4      	bne.n	80104d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010510:	4618      	mov	r0, r3
 8010512:	f7f7 f877 	bl	8007604 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2202      	movs	r2, #2
 801051a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010528:	b29b      	uxth	r3, r3
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	b29b      	uxth	r3, r3
 801052e:	4619      	mov	r1, r3
 8010530:	6878      	ldr	r0, [r7, #4]
 8010532:	f7f0 ffe5 	bl	8001500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010536:	e0fd      	b.n	8010734 <HAL_UART_IRQHandler+0x760>
 8010538:	40020010 	.word	0x40020010
 801053c:	40020028 	.word	0x40020028
 8010540:	40020040 	.word	0x40020040
 8010544:	40020058 	.word	0x40020058
 8010548:	40020070 	.word	0x40020070
 801054c:	40020088 	.word	0x40020088
 8010550:	400200a0 	.word	0x400200a0
 8010554:	400200b8 	.word	0x400200b8
 8010558:	40020410 	.word	0x40020410
 801055c:	40020428 	.word	0x40020428
 8010560:	40020440 	.word	0x40020440
 8010564:	40020458 	.word	0x40020458
 8010568:	40020470 	.word	0x40020470
 801056c:	40020488 	.word	0x40020488
 8010570:	400204a0 	.word	0x400204a0
 8010574:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010584:	b29b      	uxth	r3, r3
 8010586:	1ad3      	subs	r3, r2, r3
 8010588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010592:	b29b      	uxth	r3, r3
 8010594:	2b00      	cmp	r3, #0
 8010596:	f000 80cf 	beq.w	8010738 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 801059a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f000 80ca 	beq.w	8010738 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105ac:	e853 3f00 	ldrex	r3, [r3]
 80105b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80105b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80105b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	461a      	mov	r2, r3
 80105c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80105c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80105c8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80105cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105ce:	e841 2300 	strex	r3, r2, [r1]
 80105d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80105d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1e4      	bne.n	80105a4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	3308      	adds	r3, #8
 80105e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105e4:	e853 3f00 	ldrex	r3, [r3]
 80105e8:	623b      	str	r3, [r7, #32]
   return(result);
 80105ea:	6a3a      	ldr	r2, [r7, #32]
 80105ec:	4b55      	ldr	r3, [pc, #340]	@ (8010744 <HAL_UART_IRQHandler+0x770>)
 80105ee:	4013      	ands	r3, r2
 80105f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3308      	adds	r3, #8
 80105fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80105fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8010600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010606:	e841 2300 	strex	r3, r2, [r1]
 801060a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801060c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801060e:	2b00      	cmp	r3, #0
 8010610:	d1e3      	bne.n	80105da <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2220      	movs	r2, #32
 8010616:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	2200      	movs	r2, #0
 801061e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2200      	movs	r2, #0
 8010624:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801062c:	693b      	ldr	r3, [r7, #16]
 801062e:	e853 3f00 	ldrex	r3, [r3]
 8010632:	60fb      	str	r3, [r7, #12]
   return(result);
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	f023 0310 	bic.w	r3, r3, #16
 801063a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	681b      	ldr	r3, [r3, #0]
 8010642:	461a      	mov	r2, r3
 8010644:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010648:	61fb      	str	r3, [r7, #28]
 801064a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801064c:	69b9      	ldr	r1, [r7, #24]
 801064e:	69fa      	ldr	r2, [r7, #28]
 8010650:	e841 2300 	strex	r3, r2, [r1]
 8010654:	617b      	str	r3, [r7, #20]
   return(result);
 8010656:	697b      	ldr	r3, [r7, #20]
 8010658:	2b00      	cmp	r3, #0
 801065a:	d1e4      	bne.n	8010626 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	2202      	movs	r2, #2
 8010660:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010662:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010666:	4619      	mov	r1, r3
 8010668:	6878      	ldr	r0, [r7, #4]
 801066a:	f7f0 ff49 	bl	8001500 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801066e:	e063      	b.n	8010738 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010674:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010678:	2b00      	cmp	r3, #0
 801067a:	d00e      	beq.n	801069a <HAL_UART_IRQHandler+0x6c6>
 801067c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010680:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010684:	2b00      	cmp	r3, #0
 8010686:	d008      	beq.n	801069a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8010690:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8010692:	6878      	ldr	r0, [r7, #4]
 8010694:	f001 fbf6 	bl	8011e84 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010698:	e051      	b.n	801073e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801069a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d014      	beq.n	80106d0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80106a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d105      	bne.n	80106be <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80106b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80106b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d008      	beq.n	80106d0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d03a      	beq.n	801073c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	4798      	blx	r3
    }
    return;
 80106ce:	e035      	b.n	801073c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80106d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d009      	beq.n	80106f0 <HAL_UART_IRQHandler+0x71c>
 80106dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d003      	beq.n	80106f0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80106e8:	6878      	ldr	r0, [r7, #4]
 80106ea:	f001 fb35 	bl	8011d58 <UART_EndTransmit_IT>
    return;
 80106ee:	e026      	b.n	801073e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80106f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d009      	beq.n	8010710 <HAL_UART_IRQHandler+0x73c>
 80106fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010700:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010704:	2b00      	cmp	r3, #0
 8010706:	d003      	beq.n	8010710 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f001 fbcf 	bl	8011eac <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801070e:	e016      	b.n	801073e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8010710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010714:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010718:	2b00      	cmp	r3, #0
 801071a:	d010      	beq.n	801073e <HAL_UART_IRQHandler+0x76a>
 801071c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010720:	2b00      	cmp	r3, #0
 8010722:	da0c      	bge.n	801073e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010724:	6878      	ldr	r0, [r7, #4]
 8010726:	f001 fbb7 	bl	8011e98 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801072a:	e008      	b.n	801073e <HAL_UART_IRQHandler+0x76a>
      return;
 801072c:	bf00      	nop
 801072e:	e006      	b.n	801073e <HAL_UART_IRQHandler+0x76a>
    return;
 8010730:	bf00      	nop
 8010732:	e004      	b.n	801073e <HAL_UART_IRQHandler+0x76a>
      return;
 8010734:	bf00      	nop
 8010736:	e002      	b.n	801073e <HAL_UART_IRQHandler+0x76a>
      return;
 8010738:	bf00      	nop
 801073a:	e000      	b.n	801073e <HAL_UART_IRQHandler+0x76a>
    return;
 801073c:	bf00      	nop
  }
}
 801073e:	37e8      	adds	r7, #232	@ 0xe8
 8010740:	46bd      	mov	sp, r7
 8010742:	bd80      	pop	{r7, pc}
 8010744:	effffffe 	.word	0xeffffffe

08010748 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8010750:	bf00      	nop
 8010752:	370c      	adds	r7, #12
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801075c:	b480      	push	{r7}
 801075e:	b083      	sub	sp, #12
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010764:	bf00      	nop
 8010766:	370c      	adds	r7, #12
 8010768:	46bd      	mov	sp, r7
 801076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801076e:	4770      	bx	lr

08010770 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8010770:	b480      	push	{r7}
 8010772:	b083      	sub	sp, #12
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8010778:	bf00      	nop
 801077a:	370c      	adds	r7, #12
 801077c:	46bd      	mov	sp, r7
 801077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010782:	4770      	bx	lr

08010784 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010784:	b480      	push	{r7}
 8010786:	b083      	sub	sp, #12
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801078c:	bf00      	nop
 801078e:	370c      	adds	r7, #12
 8010790:	46bd      	mov	sp, r7
 8010792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010796:	4770      	bx	lr

08010798 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80107a0:	bf00      	nop
 80107a2:	370c      	adds	r7, #12
 80107a4:	46bd      	mov	sp, r7
 80107a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107aa:	4770      	bx	lr

080107ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80107b0:	b092      	sub	sp, #72	@ 0x48
 80107b2:	af00      	add	r7, sp, #0
 80107b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107b6:	2300      	movs	r3, #0
 80107b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	689a      	ldr	r2, [r3, #8]
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	691b      	ldr	r3, [r3, #16]
 80107c4:	431a      	orrs	r2, r3
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	695b      	ldr	r3, [r3, #20]
 80107ca:	431a      	orrs	r2, r3
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	69db      	ldr	r3, [r3, #28]
 80107d0:	4313      	orrs	r3, r2
 80107d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107d4:	697b      	ldr	r3, [r7, #20]
 80107d6:	681b      	ldr	r3, [r3, #0]
 80107d8:	681a      	ldr	r2, [r3, #0]
 80107da:	4bbe      	ldr	r3, [pc, #760]	@ (8010ad4 <UART_SetConfig+0x328>)
 80107dc:	4013      	ands	r3, r2
 80107de:	697a      	ldr	r2, [r7, #20]
 80107e0:	6812      	ldr	r2, [r2, #0]
 80107e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80107e4:	430b      	orrs	r3, r1
 80107e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	68da      	ldr	r2, [r3, #12]
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	430a      	orrs	r2, r1
 80107fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80107fe:	697b      	ldr	r3, [r7, #20]
 8010800:	699b      	ldr	r3, [r3, #24]
 8010802:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	4ab3      	ldr	r2, [pc, #716]	@ (8010ad8 <UART_SetConfig+0x32c>)
 801080a:	4293      	cmp	r3, r2
 801080c:	d004      	beq.n	8010818 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801080e:	697b      	ldr	r3, [r7, #20]
 8010810:	6a1b      	ldr	r3, [r3, #32]
 8010812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010814:	4313      	orrs	r3, r2
 8010816:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	689a      	ldr	r2, [r3, #8]
 801081e:	4baf      	ldr	r3, [pc, #700]	@ (8010adc <UART_SetConfig+0x330>)
 8010820:	4013      	ands	r3, r2
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	6812      	ldr	r2, [r2, #0]
 8010826:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010828:	430b      	orrs	r3, r1
 801082a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010832:	f023 010f 	bic.w	r1, r3, #15
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801083a:	697b      	ldr	r3, [r7, #20]
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	430a      	orrs	r2, r1
 8010840:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	4aa6      	ldr	r2, [pc, #664]	@ (8010ae0 <UART_SetConfig+0x334>)
 8010848:	4293      	cmp	r3, r2
 801084a:	d177      	bne.n	801093c <UART_SetConfig+0x190>
 801084c:	4ba5      	ldr	r3, [pc, #660]	@ (8010ae4 <UART_SetConfig+0x338>)
 801084e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010850:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010854:	2b28      	cmp	r3, #40	@ 0x28
 8010856:	d86d      	bhi.n	8010934 <UART_SetConfig+0x188>
 8010858:	a201      	add	r2, pc, #4	@ (adr r2, 8010860 <UART_SetConfig+0xb4>)
 801085a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801085e:	bf00      	nop
 8010860:	08010905 	.word	0x08010905
 8010864:	08010935 	.word	0x08010935
 8010868:	08010935 	.word	0x08010935
 801086c:	08010935 	.word	0x08010935
 8010870:	08010935 	.word	0x08010935
 8010874:	08010935 	.word	0x08010935
 8010878:	08010935 	.word	0x08010935
 801087c:	08010935 	.word	0x08010935
 8010880:	0801090d 	.word	0x0801090d
 8010884:	08010935 	.word	0x08010935
 8010888:	08010935 	.word	0x08010935
 801088c:	08010935 	.word	0x08010935
 8010890:	08010935 	.word	0x08010935
 8010894:	08010935 	.word	0x08010935
 8010898:	08010935 	.word	0x08010935
 801089c:	08010935 	.word	0x08010935
 80108a0:	08010915 	.word	0x08010915
 80108a4:	08010935 	.word	0x08010935
 80108a8:	08010935 	.word	0x08010935
 80108ac:	08010935 	.word	0x08010935
 80108b0:	08010935 	.word	0x08010935
 80108b4:	08010935 	.word	0x08010935
 80108b8:	08010935 	.word	0x08010935
 80108bc:	08010935 	.word	0x08010935
 80108c0:	0801091d 	.word	0x0801091d
 80108c4:	08010935 	.word	0x08010935
 80108c8:	08010935 	.word	0x08010935
 80108cc:	08010935 	.word	0x08010935
 80108d0:	08010935 	.word	0x08010935
 80108d4:	08010935 	.word	0x08010935
 80108d8:	08010935 	.word	0x08010935
 80108dc:	08010935 	.word	0x08010935
 80108e0:	08010925 	.word	0x08010925
 80108e4:	08010935 	.word	0x08010935
 80108e8:	08010935 	.word	0x08010935
 80108ec:	08010935 	.word	0x08010935
 80108f0:	08010935 	.word	0x08010935
 80108f4:	08010935 	.word	0x08010935
 80108f8:	08010935 	.word	0x08010935
 80108fc:	08010935 	.word	0x08010935
 8010900:	0801092d 	.word	0x0801092d
 8010904:	2301      	movs	r3, #1
 8010906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801090a:	e326      	b.n	8010f5a <UART_SetConfig+0x7ae>
 801090c:	2304      	movs	r3, #4
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010912:	e322      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010914:	2308      	movs	r3, #8
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801091a:	e31e      	b.n	8010f5a <UART_SetConfig+0x7ae>
 801091c:	2310      	movs	r3, #16
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010922:	e31a      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010924:	2320      	movs	r3, #32
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801092a:	e316      	b.n	8010f5a <UART_SetConfig+0x7ae>
 801092c:	2340      	movs	r3, #64	@ 0x40
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010932:	e312      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010934:	2380      	movs	r3, #128	@ 0x80
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801093a:	e30e      	b.n	8010f5a <UART_SetConfig+0x7ae>
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	4a69      	ldr	r2, [pc, #420]	@ (8010ae8 <UART_SetConfig+0x33c>)
 8010942:	4293      	cmp	r3, r2
 8010944:	d130      	bne.n	80109a8 <UART_SetConfig+0x1fc>
 8010946:	4b67      	ldr	r3, [pc, #412]	@ (8010ae4 <UART_SetConfig+0x338>)
 8010948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801094a:	f003 0307 	and.w	r3, r3, #7
 801094e:	2b05      	cmp	r3, #5
 8010950:	d826      	bhi.n	80109a0 <UART_SetConfig+0x1f4>
 8010952:	a201      	add	r2, pc, #4	@ (adr r2, 8010958 <UART_SetConfig+0x1ac>)
 8010954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010958:	08010971 	.word	0x08010971
 801095c:	08010979 	.word	0x08010979
 8010960:	08010981 	.word	0x08010981
 8010964:	08010989 	.word	0x08010989
 8010968:	08010991 	.word	0x08010991
 801096c:	08010999 	.word	0x08010999
 8010970:	2300      	movs	r3, #0
 8010972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010976:	e2f0      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010978:	2304      	movs	r3, #4
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801097e:	e2ec      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010980:	2308      	movs	r3, #8
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010986:	e2e8      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010988:	2310      	movs	r3, #16
 801098a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801098e:	e2e4      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010990:	2320      	movs	r3, #32
 8010992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010996:	e2e0      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010998:	2340      	movs	r3, #64	@ 0x40
 801099a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801099e:	e2dc      	b.n	8010f5a <UART_SetConfig+0x7ae>
 80109a0:	2380      	movs	r3, #128	@ 0x80
 80109a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109a6:	e2d8      	b.n	8010f5a <UART_SetConfig+0x7ae>
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4a4f      	ldr	r2, [pc, #316]	@ (8010aec <UART_SetConfig+0x340>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d130      	bne.n	8010a14 <UART_SetConfig+0x268>
 80109b2:	4b4c      	ldr	r3, [pc, #304]	@ (8010ae4 <UART_SetConfig+0x338>)
 80109b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80109b6:	f003 0307 	and.w	r3, r3, #7
 80109ba:	2b05      	cmp	r3, #5
 80109bc:	d826      	bhi.n	8010a0c <UART_SetConfig+0x260>
 80109be:	a201      	add	r2, pc, #4	@ (adr r2, 80109c4 <UART_SetConfig+0x218>)
 80109c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109c4:	080109dd 	.word	0x080109dd
 80109c8:	080109e5 	.word	0x080109e5
 80109cc:	080109ed 	.word	0x080109ed
 80109d0:	080109f5 	.word	0x080109f5
 80109d4:	080109fd 	.word	0x080109fd
 80109d8:	08010a05 	.word	0x08010a05
 80109dc:	2300      	movs	r3, #0
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109e2:	e2ba      	b.n	8010f5a <UART_SetConfig+0x7ae>
 80109e4:	2304      	movs	r3, #4
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109ea:	e2b6      	b.n	8010f5a <UART_SetConfig+0x7ae>
 80109ec:	2308      	movs	r3, #8
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109f2:	e2b2      	b.n	8010f5a <UART_SetConfig+0x7ae>
 80109f4:	2310      	movs	r3, #16
 80109f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80109fa:	e2ae      	b.n	8010f5a <UART_SetConfig+0x7ae>
 80109fc:	2320      	movs	r3, #32
 80109fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a02:	e2aa      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a04:	2340      	movs	r3, #64	@ 0x40
 8010a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a0a:	e2a6      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a0c:	2380      	movs	r3, #128	@ 0x80
 8010a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a12:	e2a2      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4a35      	ldr	r2, [pc, #212]	@ (8010af0 <UART_SetConfig+0x344>)
 8010a1a:	4293      	cmp	r3, r2
 8010a1c:	d130      	bne.n	8010a80 <UART_SetConfig+0x2d4>
 8010a1e:	4b31      	ldr	r3, [pc, #196]	@ (8010ae4 <UART_SetConfig+0x338>)
 8010a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a22:	f003 0307 	and.w	r3, r3, #7
 8010a26:	2b05      	cmp	r3, #5
 8010a28:	d826      	bhi.n	8010a78 <UART_SetConfig+0x2cc>
 8010a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8010a30 <UART_SetConfig+0x284>)
 8010a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a30:	08010a49 	.word	0x08010a49
 8010a34:	08010a51 	.word	0x08010a51
 8010a38:	08010a59 	.word	0x08010a59
 8010a3c:	08010a61 	.word	0x08010a61
 8010a40:	08010a69 	.word	0x08010a69
 8010a44:	08010a71 	.word	0x08010a71
 8010a48:	2300      	movs	r3, #0
 8010a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a4e:	e284      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a50:	2304      	movs	r3, #4
 8010a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a56:	e280      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a58:	2308      	movs	r3, #8
 8010a5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a5e:	e27c      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a60:	2310      	movs	r3, #16
 8010a62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a66:	e278      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a68:	2320      	movs	r3, #32
 8010a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a6e:	e274      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a70:	2340      	movs	r3, #64	@ 0x40
 8010a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a76:	e270      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a78:	2380      	movs	r3, #128	@ 0x80
 8010a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010a7e:	e26c      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010a80:	697b      	ldr	r3, [r7, #20]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	4a1b      	ldr	r2, [pc, #108]	@ (8010af4 <UART_SetConfig+0x348>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d142      	bne.n	8010b10 <UART_SetConfig+0x364>
 8010a8a:	4b16      	ldr	r3, [pc, #88]	@ (8010ae4 <UART_SetConfig+0x338>)
 8010a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010a8e:	f003 0307 	and.w	r3, r3, #7
 8010a92:	2b05      	cmp	r3, #5
 8010a94:	d838      	bhi.n	8010b08 <UART_SetConfig+0x35c>
 8010a96:	a201      	add	r2, pc, #4	@ (adr r2, 8010a9c <UART_SetConfig+0x2f0>)
 8010a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a9c:	08010ab5 	.word	0x08010ab5
 8010aa0:	08010abd 	.word	0x08010abd
 8010aa4:	08010ac5 	.word	0x08010ac5
 8010aa8:	08010acd 	.word	0x08010acd
 8010aac:	08010af9 	.word	0x08010af9
 8010ab0:	08010b01 	.word	0x08010b01
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aba:	e24e      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010abc:	2304      	movs	r3, #4
 8010abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ac2:	e24a      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ac4:	2308      	movs	r3, #8
 8010ac6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010aca:	e246      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010acc:	2310      	movs	r3, #16
 8010ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ad2:	e242      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ad4:	cfff69f3 	.word	0xcfff69f3
 8010ad8:	58000c00 	.word	0x58000c00
 8010adc:	11fff4ff 	.word	0x11fff4ff
 8010ae0:	40011000 	.word	0x40011000
 8010ae4:	58024400 	.word	0x58024400
 8010ae8:	40004400 	.word	0x40004400
 8010aec:	40004800 	.word	0x40004800
 8010af0:	40004c00 	.word	0x40004c00
 8010af4:	40005000 	.word	0x40005000
 8010af8:	2320      	movs	r3, #32
 8010afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010afe:	e22c      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010b00:	2340      	movs	r3, #64	@ 0x40
 8010b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b06:	e228      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010b08:	2380      	movs	r3, #128	@ 0x80
 8010b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010b0e:	e224      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010b10:	697b      	ldr	r3, [r7, #20]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	4ab1      	ldr	r2, [pc, #708]	@ (8010ddc <UART_SetConfig+0x630>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d176      	bne.n	8010c08 <UART_SetConfig+0x45c>
 8010b1a:	4bb1      	ldr	r3, [pc, #708]	@ (8010de0 <UART_SetConfig+0x634>)
 8010b1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010b1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010b22:	2b28      	cmp	r3, #40	@ 0x28
 8010b24:	d86c      	bhi.n	8010c00 <UART_SetConfig+0x454>
 8010b26:	a201      	add	r2, pc, #4	@ (adr r2, 8010b2c <UART_SetConfig+0x380>)
 8010b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b2c:	08010bd1 	.word	0x08010bd1
 8010b30:	08010c01 	.word	0x08010c01
 8010b34:	08010c01 	.word	0x08010c01
 8010b38:	08010c01 	.word	0x08010c01
 8010b3c:	08010c01 	.word	0x08010c01
 8010b40:	08010c01 	.word	0x08010c01
 8010b44:	08010c01 	.word	0x08010c01
 8010b48:	08010c01 	.word	0x08010c01
 8010b4c:	08010bd9 	.word	0x08010bd9
 8010b50:	08010c01 	.word	0x08010c01
 8010b54:	08010c01 	.word	0x08010c01
 8010b58:	08010c01 	.word	0x08010c01
 8010b5c:	08010c01 	.word	0x08010c01
 8010b60:	08010c01 	.word	0x08010c01
 8010b64:	08010c01 	.word	0x08010c01
 8010b68:	08010c01 	.word	0x08010c01
 8010b6c:	08010be1 	.word	0x08010be1
 8010b70:	08010c01 	.word	0x08010c01
 8010b74:	08010c01 	.word	0x08010c01
 8010b78:	08010c01 	.word	0x08010c01
 8010b7c:	08010c01 	.word	0x08010c01
 8010b80:	08010c01 	.word	0x08010c01
 8010b84:	08010c01 	.word	0x08010c01
 8010b88:	08010c01 	.word	0x08010c01
 8010b8c:	08010be9 	.word	0x08010be9
 8010b90:	08010c01 	.word	0x08010c01
 8010b94:	08010c01 	.word	0x08010c01
 8010b98:	08010c01 	.word	0x08010c01
 8010b9c:	08010c01 	.word	0x08010c01
 8010ba0:	08010c01 	.word	0x08010c01
 8010ba4:	08010c01 	.word	0x08010c01
 8010ba8:	08010c01 	.word	0x08010c01
 8010bac:	08010bf1 	.word	0x08010bf1
 8010bb0:	08010c01 	.word	0x08010c01
 8010bb4:	08010c01 	.word	0x08010c01
 8010bb8:	08010c01 	.word	0x08010c01
 8010bbc:	08010c01 	.word	0x08010c01
 8010bc0:	08010c01 	.word	0x08010c01
 8010bc4:	08010c01 	.word	0x08010c01
 8010bc8:	08010c01 	.word	0x08010c01
 8010bcc:	08010bf9 	.word	0x08010bf9
 8010bd0:	2301      	movs	r3, #1
 8010bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bd6:	e1c0      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010bd8:	2304      	movs	r3, #4
 8010bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bde:	e1bc      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010be0:	2308      	movs	r3, #8
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010be6:	e1b8      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010be8:	2310      	movs	r3, #16
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bee:	e1b4      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010bf0:	2320      	movs	r3, #32
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bf6:	e1b0      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010bf8:	2340      	movs	r3, #64	@ 0x40
 8010bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010bfe:	e1ac      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010c00:	2380      	movs	r3, #128	@ 0x80
 8010c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c06:	e1a8      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a75      	ldr	r2, [pc, #468]	@ (8010de4 <UART_SetConfig+0x638>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d130      	bne.n	8010c74 <UART_SetConfig+0x4c8>
 8010c12:	4b73      	ldr	r3, [pc, #460]	@ (8010de0 <UART_SetConfig+0x634>)
 8010c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c16:	f003 0307 	and.w	r3, r3, #7
 8010c1a:	2b05      	cmp	r3, #5
 8010c1c:	d826      	bhi.n	8010c6c <UART_SetConfig+0x4c0>
 8010c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8010c24 <UART_SetConfig+0x478>)
 8010c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c24:	08010c3d 	.word	0x08010c3d
 8010c28:	08010c45 	.word	0x08010c45
 8010c2c:	08010c4d 	.word	0x08010c4d
 8010c30:	08010c55 	.word	0x08010c55
 8010c34:	08010c5d 	.word	0x08010c5d
 8010c38:	08010c65 	.word	0x08010c65
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c42:	e18a      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010c44:	2304      	movs	r3, #4
 8010c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c4a:	e186      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010c4c:	2308      	movs	r3, #8
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c52:	e182      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010c54:	2310      	movs	r3, #16
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c5a:	e17e      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010c5c:	2320      	movs	r3, #32
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c62:	e17a      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010c64:	2340      	movs	r3, #64	@ 0x40
 8010c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c6a:	e176      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010c6c:	2380      	movs	r3, #128	@ 0x80
 8010c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010c72:	e172      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010c74:	697b      	ldr	r3, [r7, #20]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	4a5b      	ldr	r2, [pc, #364]	@ (8010de8 <UART_SetConfig+0x63c>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d130      	bne.n	8010ce0 <UART_SetConfig+0x534>
 8010c7e:	4b58      	ldr	r3, [pc, #352]	@ (8010de0 <UART_SetConfig+0x634>)
 8010c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010c82:	f003 0307 	and.w	r3, r3, #7
 8010c86:	2b05      	cmp	r3, #5
 8010c88:	d826      	bhi.n	8010cd8 <UART_SetConfig+0x52c>
 8010c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8010c90 <UART_SetConfig+0x4e4>)
 8010c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c90:	08010ca9 	.word	0x08010ca9
 8010c94:	08010cb1 	.word	0x08010cb1
 8010c98:	08010cb9 	.word	0x08010cb9
 8010c9c:	08010cc1 	.word	0x08010cc1
 8010ca0:	08010cc9 	.word	0x08010cc9
 8010ca4:	08010cd1 	.word	0x08010cd1
 8010ca8:	2300      	movs	r3, #0
 8010caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cae:	e154      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010cb0:	2304      	movs	r3, #4
 8010cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cb6:	e150      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010cb8:	2308      	movs	r3, #8
 8010cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cbe:	e14c      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010cc0:	2310      	movs	r3, #16
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cc6:	e148      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010cc8:	2320      	movs	r3, #32
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cce:	e144      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010cd0:	2340      	movs	r3, #64	@ 0x40
 8010cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cd6:	e140      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010cd8:	2380      	movs	r3, #128	@ 0x80
 8010cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010cde:	e13c      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	4a41      	ldr	r2, [pc, #260]	@ (8010dec <UART_SetConfig+0x640>)
 8010ce6:	4293      	cmp	r3, r2
 8010ce8:	f040 8082 	bne.w	8010df0 <UART_SetConfig+0x644>
 8010cec:	4b3c      	ldr	r3, [pc, #240]	@ (8010de0 <UART_SetConfig+0x634>)
 8010cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010cf0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010cf4:	2b28      	cmp	r3, #40	@ 0x28
 8010cf6:	d86d      	bhi.n	8010dd4 <UART_SetConfig+0x628>
 8010cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8010d00 <UART_SetConfig+0x554>)
 8010cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cfe:	bf00      	nop
 8010d00:	08010da5 	.word	0x08010da5
 8010d04:	08010dd5 	.word	0x08010dd5
 8010d08:	08010dd5 	.word	0x08010dd5
 8010d0c:	08010dd5 	.word	0x08010dd5
 8010d10:	08010dd5 	.word	0x08010dd5
 8010d14:	08010dd5 	.word	0x08010dd5
 8010d18:	08010dd5 	.word	0x08010dd5
 8010d1c:	08010dd5 	.word	0x08010dd5
 8010d20:	08010dad 	.word	0x08010dad
 8010d24:	08010dd5 	.word	0x08010dd5
 8010d28:	08010dd5 	.word	0x08010dd5
 8010d2c:	08010dd5 	.word	0x08010dd5
 8010d30:	08010dd5 	.word	0x08010dd5
 8010d34:	08010dd5 	.word	0x08010dd5
 8010d38:	08010dd5 	.word	0x08010dd5
 8010d3c:	08010dd5 	.word	0x08010dd5
 8010d40:	08010db5 	.word	0x08010db5
 8010d44:	08010dd5 	.word	0x08010dd5
 8010d48:	08010dd5 	.word	0x08010dd5
 8010d4c:	08010dd5 	.word	0x08010dd5
 8010d50:	08010dd5 	.word	0x08010dd5
 8010d54:	08010dd5 	.word	0x08010dd5
 8010d58:	08010dd5 	.word	0x08010dd5
 8010d5c:	08010dd5 	.word	0x08010dd5
 8010d60:	08010dbd 	.word	0x08010dbd
 8010d64:	08010dd5 	.word	0x08010dd5
 8010d68:	08010dd5 	.word	0x08010dd5
 8010d6c:	08010dd5 	.word	0x08010dd5
 8010d70:	08010dd5 	.word	0x08010dd5
 8010d74:	08010dd5 	.word	0x08010dd5
 8010d78:	08010dd5 	.word	0x08010dd5
 8010d7c:	08010dd5 	.word	0x08010dd5
 8010d80:	08010dc5 	.word	0x08010dc5
 8010d84:	08010dd5 	.word	0x08010dd5
 8010d88:	08010dd5 	.word	0x08010dd5
 8010d8c:	08010dd5 	.word	0x08010dd5
 8010d90:	08010dd5 	.word	0x08010dd5
 8010d94:	08010dd5 	.word	0x08010dd5
 8010d98:	08010dd5 	.word	0x08010dd5
 8010d9c:	08010dd5 	.word	0x08010dd5
 8010da0:	08010dcd 	.word	0x08010dcd
 8010da4:	2301      	movs	r3, #1
 8010da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010daa:	e0d6      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010dac:	2304      	movs	r3, #4
 8010dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010db2:	e0d2      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010db4:	2308      	movs	r3, #8
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dba:	e0ce      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010dbc:	2310      	movs	r3, #16
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dc2:	e0ca      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010dc4:	2320      	movs	r3, #32
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dca:	e0c6      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010dcc:	2340      	movs	r3, #64	@ 0x40
 8010dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dd2:	e0c2      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010dd4:	2380      	movs	r3, #128	@ 0x80
 8010dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010dda:	e0be      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ddc:	40011400 	.word	0x40011400
 8010de0:	58024400 	.word	0x58024400
 8010de4:	40007800 	.word	0x40007800
 8010de8:	40007c00 	.word	0x40007c00
 8010dec:	40011800 	.word	0x40011800
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	4aad      	ldr	r2, [pc, #692]	@ (80110ac <UART_SetConfig+0x900>)
 8010df6:	4293      	cmp	r3, r2
 8010df8:	d176      	bne.n	8010ee8 <UART_SetConfig+0x73c>
 8010dfa:	4bad      	ldr	r3, [pc, #692]	@ (80110b0 <UART_SetConfig+0x904>)
 8010dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010dfe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010e02:	2b28      	cmp	r3, #40	@ 0x28
 8010e04:	d86c      	bhi.n	8010ee0 <UART_SetConfig+0x734>
 8010e06:	a201      	add	r2, pc, #4	@ (adr r2, 8010e0c <UART_SetConfig+0x660>)
 8010e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e0c:	08010eb1 	.word	0x08010eb1
 8010e10:	08010ee1 	.word	0x08010ee1
 8010e14:	08010ee1 	.word	0x08010ee1
 8010e18:	08010ee1 	.word	0x08010ee1
 8010e1c:	08010ee1 	.word	0x08010ee1
 8010e20:	08010ee1 	.word	0x08010ee1
 8010e24:	08010ee1 	.word	0x08010ee1
 8010e28:	08010ee1 	.word	0x08010ee1
 8010e2c:	08010eb9 	.word	0x08010eb9
 8010e30:	08010ee1 	.word	0x08010ee1
 8010e34:	08010ee1 	.word	0x08010ee1
 8010e38:	08010ee1 	.word	0x08010ee1
 8010e3c:	08010ee1 	.word	0x08010ee1
 8010e40:	08010ee1 	.word	0x08010ee1
 8010e44:	08010ee1 	.word	0x08010ee1
 8010e48:	08010ee1 	.word	0x08010ee1
 8010e4c:	08010ec1 	.word	0x08010ec1
 8010e50:	08010ee1 	.word	0x08010ee1
 8010e54:	08010ee1 	.word	0x08010ee1
 8010e58:	08010ee1 	.word	0x08010ee1
 8010e5c:	08010ee1 	.word	0x08010ee1
 8010e60:	08010ee1 	.word	0x08010ee1
 8010e64:	08010ee1 	.word	0x08010ee1
 8010e68:	08010ee1 	.word	0x08010ee1
 8010e6c:	08010ec9 	.word	0x08010ec9
 8010e70:	08010ee1 	.word	0x08010ee1
 8010e74:	08010ee1 	.word	0x08010ee1
 8010e78:	08010ee1 	.word	0x08010ee1
 8010e7c:	08010ee1 	.word	0x08010ee1
 8010e80:	08010ee1 	.word	0x08010ee1
 8010e84:	08010ee1 	.word	0x08010ee1
 8010e88:	08010ee1 	.word	0x08010ee1
 8010e8c:	08010ed1 	.word	0x08010ed1
 8010e90:	08010ee1 	.word	0x08010ee1
 8010e94:	08010ee1 	.word	0x08010ee1
 8010e98:	08010ee1 	.word	0x08010ee1
 8010e9c:	08010ee1 	.word	0x08010ee1
 8010ea0:	08010ee1 	.word	0x08010ee1
 8010ea4:	08010ee1 	.word	0x08010ee1
 8010ea8:	08010ee1 	.word	0x08010ee1
 8010eac:	08010ed9 	.word	0x08010ed9
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010eb6:	e050      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010eb8:	2304      	movs	r3, #4
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ebe:	e04c      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ec0:	2308      	movs	r3, #8
 8010ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ec6:	e048      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ec8:	2310      	movs	r3, #16
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ece:	e044      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ed0:	2320      	movs	r3, #32
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ed6:	e040      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ed8:	2340      	movs	r3, #64	@ 0x40
 8010eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ede:	e03c      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ee0:	2380      	movs	r3, #128	@ 0x80
 8010ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010ee6:	e038      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010ee8:	697b      	ldr	r3, [r7, #20]
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	4a71      	ldr	r2, [pc, #452]	@ (80110b4 <UART_SetConfig+0x908>)
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	d130      	bne.n	8010f54 <UART_SetConfig+0x7a8>
 8010ef2:	4b6f      	ldr	r3, [pc, #444]	@ (80110b0 <UART_SetConfig+0x904>)
 8010ef4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010ef6:	f003 0307 	and.w	r3, r3, #7
 8010efa:	2b05      	cmp	r3, #5
 8010efc:	d826      	bhi.n	8010f4c <UART_SetConfig+0x7a0>
 8010efe:	a201      	add	r2, pc, #4	@ (adr r2, 8010f04 <UART_SetConfig+0x758>)
 8010f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f04:	08010f1d 	.word	0x08010f1d
 8010f08:	08010f25 	.word	0x08010f25
 8010f0c:	08010f2d 	.word	0x08010f2d
 8010f10:	08010f35 	.word	0x08010f35
 8010f14:	08010f3d 	.word	0x08010f3d
 8010f18:	08010f45 	.word	0x08010f45
 8010f1c:	2302      	movs	r3, #2
 8010f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f22:	e01a      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010f24:	2304      	movs	r3, #4
 8010f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f2a:	e016      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010f2c:	2308      	movs	r3, #8
 8010f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f32:	e012      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010f34:	2310      	movs	r3, #16
 8010f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f3a:	e00e      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010f3c:	2320      	movs	r3, #32
 8010f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f42:	e00a      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010f44:	2340      	movs	r3, #64	@ 0x40
 8010f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f4a:	e006      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010f4c:	2380      	movs	r3, #128	@ 0x80
 8010f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010f52:	e002      	b.n	8010f5a <UART_SetConfig+0x7ae>
 8010f54:	2380      	movs	r3, #128	@ 0x80
 8010f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010f5a:	697b      	ldr	r3, [r7, #20]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	4a55      	ldr	r2, [pc, #340]	@ (80110b4 <UART_SetConfig+0x908>)
 8010f60:	4293      	cmp	r3, r2
 8010f62:	f040 80f8 	bne.w	8011156 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f66:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010f6a:	2b20      	cmp	r3, #32
 8010f6c:	dc46      	bgt.n	8010ffc <UART_SetConfig+0x850>
 8010f6e:	2b02      	cmp	r3, #2
 8010f70:	db75      	blt.n	801105e <UART_SetConfig+0x8b2>
 8010f72:	3b02      	subs	r3, #2
 8010f74:	2b1e      	cmp	r3, #30
 8010f76:	d872      	bhi.n	801105e <UART_SetConfig+0x8b2>
 8010f78:	a201      	add	r2, pc, #4	@ (adr r2, 8010f80 <UART_SetConfig+0x7d4>)
 8010f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f7e:	bf00      	nop
 8010f80:	08011003 	.word	0x08011003
 8010f84:	0801105f 	.word	0x0801105f
 8010f88:	0801100b 	.word	0x0801100b
 8010f8c:	0801105f 	.word	0x0801105f
 8010f90:	0801105f 	.word	0x0801105f
 8010f94:	0801105f 	.word	0x0801105f
 8010f98:	0801101b 	.word	0x0801101b
 8010f9c:	0801105f 	.word	0x0801105f
 8010fa0:	0801105f 	.word	0x0801105f
 8010fa4:	0801105f 	.word	0x0801105f
 8010fa8:	0801105f 	.word	0x0801105f
 8010fac:	0801105f 	.word	0x0801105f
 8010fb0:	0801105f 	.word	0x0801105f
 8010fb4:	0801105f 	.word	0x0801105f
 8010fb8:	0801102b 	.word	0x0801102b
 8010fbc:	0801105f 	.word	0x0801105f
 8010fc0:	0801105f 	.word	0x0801105f
 8010fc4:	0801105f 	.word	0x0801105f
 8010fc8:	0801105f 	.word	0x0801105f
 8010fcc:	0801105f 	.word	0x0801105f
 8010fd0:	0801105f 	.word	0x0801105f
 8010fd4:	0801105f 	.word	0x0801105f
 8010fd8:	0801105f 	.word	0x0801105f
 8010fdc:	0801105f 	.word	0x0801105f
 8010fe0:	0801105f 	.word	0x0801105f
 8010fe4:	0801105f 	.word	0x0801105f
 8010fe8:	0801105f 	.word	0x0801105f
 8010fec:	0801105f 	.word	0x0801105f
 8010ff0:	0801105f 	.word	0x0801105f
 8010ff4:	0801105f 	.word	0x0801105f
 8010ff8:	08011051 	.word	0x08011051
 8010ffc:	2b40      	cmp	r3, #64	@ 0x40
 8010ffe:	d02a      	beq.n	8011056 <UART_SetConfig+0x8aa>
 8011000:	e02d      	b.n	801105e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011002:	f7fc ffd9 	bl	800dfb8 <HAL_RCCEx_GetD3PCLK1Freq>
 8011006:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011008:	e02f      	b.n	801106a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801100a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801100e:	4618      	mov	r0, r3
 8011010:	f7fc ffe8 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011018:	e027      	b.n	801106a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801101a:	f107 0318 	add.w	r3, r7, #24
 801101e:	4618      	mov	r0, r3
 8011020:	f7fd f934 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011024:	69fb      	ldr	r3, [r7, #28]
 8011026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011028:	e01f      	b.n	801106a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801102a:	4b21      	ldr	r3, [pc, #132]	@ (80110b0 <UART_SetConfig+0x904>)
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f003 0320 	and.w	r3, r3, #32
 8011032:	2b00      	cmp	r3, #0
 8011034:	d009      	beq.n	801104a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011036:	4b1e      	ldr	r3, [pc, #120]	@ (80110b0 <UART_SetConfig+0x904>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	08db      	lsrs	r3, r3, #3
 801103c:	f003 0303 	and.w	r3, r3, #3
 8011040:	4a1d      	ldr	r2, [pc, #116]	@ (80110b8 <UART_SetConfig+0x90c>)
 8011042:	fa22 f303 	lsr.w	r3, r2, r3
 8011046:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011048:	e00f      	b.n	801106a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801104a:	4b1b      	ldr	r3, [pc, #108]	@ (80110b8 <UART_SetConfig+0x90c>)
 801104c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801104e:	e00c      	b.n	801106a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011050:	4b1a      	ldr	r3, [pc, #104]	@ (80110bc <UART_SetConfig+0x910>)
 8011052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011054:	e009      	b.n	801106a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801105a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801105c:	e005      	b.n	801106a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801105e:	2300      	movs	r3, #0
 8011060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8011062:	2301      	movs	r3, #1
 8011064:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011068:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801106a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801106c:	2b00      	cmp	r3, #0
 801106e:	f000 81ee 	beq.w	801144e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011076:	4a12      	ldr	r2, [pc, #72]	@ (80110c0 <UART_SetConfig+0x914>)
 8011078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801107c:	461a      	mov	r2, r3
 801107e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011080:	fbb3 f3f2 	udiv	r3, r3, r2
 8011084:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011086:	697b      	ldr	r3, [r7, #20]
 8011088:	685a      	ldr	r2, [r3, #4]
 801108a:	4613      	mov	r3, r2
 801108c:	005b      	lsls	r3, r3, #1
 801108e:	4413      	add	r3, r2
 8011090:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011092:	429a      	cmp	r2, r3
 8011094:	d305      	bcc.n	80110a2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011096:	697b      	ldr	r3, [r7, #20]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801109c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801109e:	429a      	cmp	r2, r3
 80110a0:	d910      	bls.n	80110c4 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80110a2:	2301      	movs	r3, #1
 80110a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80110a8:	e1d1      	b.n	801144e <UART_SetConfig+0xca2>
 80110aa:	bf00      	nop
 80110ac:	40011c00 	.word	0x40011c00
 80110b0:	58024400 	.word	0x58024400
 80110b4:	58000c00 	.word	0x58000c00
 80110b8:	03d09000 	.word	0x03d09000
 80110bc:	003d0900 	.word	0x003d0900
 80110c0:	080142c0 	.word	0x080142c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110c6:	2200      	movs	r2, #0
 80110c8:	60bb      	str	r3, [r7, #8]
 80110ca:	60fa      	str	r2, [r7, #12]
 80110cc:	697b      	ldr	r3, [r7, #20]
 80110ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110d0:	4ac0      	ldr	r2, [pc, #768]	@ (80113d4 <UART_SetConfig+0xc28>)
 80110d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110d6:	b29b      	uxth	r3, r3
 80110d8:	2200      	movs	r2, #0
 80110da:	603b      	str	r3, [r7, #0]
 80110dc:	607a      	str	r2, [r7, #4]
 80110de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80110e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80110e6:	f7ef f963 	bl	80003b0 <__aeabi_uldivmod>
 80110ea:	4602      	mov	r2, r0
 80110ec:	460b      	mov	r3, r1
 80110ee:	4610      	mov	r0, r2
 80110f0:	4619      	mov	r1, r3
 80110f2:	f04f 0200 	mov.w	r2, #0
 80110f6:	f04f 0300 	mov.w	r3, #0
 80110fa:	020b      	lsls	r3, r1, #8
 80110fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011100:	0202      	lsls	r2, r0, #8
 8011102:	6979      	ldr	r1, [r7, #20]
 8011104:	6849      	ldr	r1, [r1, #4]
 8011106:	0849      	lsrs	r1, r1, #1
 8011108:	2000      	movs	r0, #0
 801110a:	460c      	mov	r4, r1
 801110c:	4605      	mov	r5, r0
 801110e:	eb12 0804 	adds.w	r8, r2, r4
 8011112:	eb43 0905 	adc.w	r9, r3, r5
 8011116:	697b      	ldr	r3, [r7, #20]
 8011118:	685b      	ldr	r3, [r3, #4]
 801111a:	2200      	movs	r2, #0
 801111c:	469a      	mov	sl, r3
 801111e:	4693      	mov	fp, r2
 8011120:	4652      	mov	r2, sl
 8011122:	465b      	mov	r3, fp
 8011124:	4640      	mov	r0, r8
 8011126:	4649      	mov	r1, r9
 8011128:	f7ef f942 	bl	80003b0 <__aeabi_uldivmod>
 801112c:	4602      	mov	r2, r0
 801112e:	460b      	mov	r3, r1
 8011130:	4613      	mov	r3, r2
 8011132:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011136:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801113a:	d308      	bcc.n	801114e <UART_SetConfig+0x9a2>
 801113c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801113e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011142:	d204      	bcs.n	801114e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801114a:	60da      	str	r2, [r3, #12]
 801114c:	e17f      	b.n	801144e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801114e:	2301      	movs	r3, #1
 8011150:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8011154:	e17b      	b.n	801144e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011156:	697b      	ldr	r3, [r7, #20]
 8011158:	69db      	ldr	r3, [r3, #28]
 801115a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801115e:	f040 80bd 	bne.w	80112dc <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011162:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8011166:	2b20      	cmp	r3, #32
 8011168:	dc48      	bgt.n	80111fc <UART_SetConfig+0xa50>
 801116a:	2b00      	cmp	r3, #0
 801116c:	db7b      	blt.n	8011266 <UART_SetConfig+0xaba>
 801116e:	2b20      	cmp	r3, #32
 8011170:	d879      	bhi.n	8011266 <UART_SetConfig+0xaba>
 8011172:	a201      	add	r2, pc, #4	@ (adr r2, 8011178 <UART_SetConfig+0x9cc>)
 8011174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011178:	08011203 	.word	0x08011203
 801117c:	0801120b 	.word	0x0801120b
 8011180:	08011267 	.word	0x08011267
 8011184:	08011267 	.word	0x08011267
 8011188:	08011213 	.word	0x08011213
 801118c:	08011267 	.word	0x08011267
 8011190:	08011267 	.word	0x08011267
 8011194:	08011267 	.word	0x08011267
 8011198:	08011223 	.word	0x08011223
 801119c:	08011267 	.word	0x08011267
 80111a0:	08011267 	.word	0x08011267
 80111a4:	08011267 	.word	0x08011267
 80111a8:	08011267 	.word	0x08011267
 80111ac:	08011267 	.word	0x08011267
 80111b0:	08011267 	.word	0x08011267
 80111b4:	08011267 	.word	0x08011267
 80111b8:	08011233 	.word	0x08011233
 80111bc:	08011267 	.word	0x08011267
 80111c0:	08011267 	.word	0x08011267
 80111c4:	08011267 	.word	0x08011267
 80111c8:	08011267 	.word	0x08011267
 80111cc:	08011267 	.word	0x08011267
 80111d0:	08011267 	.word	0x08011267
 80111d4:	08011267 	.word	0x08011267
 80111d8:	08011267 	.word	0x08011267
 80111dc:	08011267 	.word	0x08011267
 80111e0:	08011267 	.word	0x08011267
 80111e4:	08011267 	.word	0x08011267
 80111e8:	08011267 	.word	0x08011267
 80111ec:	08011267 	.word	0x08011267
 80111f0:	08011267 	.word	0x08011267
 80111f4:	08011267 	.word	0x08011267
 80111f8:	08011259 	.word	0x08011259
 80111fc:	2b40      	cmp	r3, #64	@ 0x40
 80111fe:	d02e      	beq.n	801125e <UART_SetConfig+0xab2>
 8011200:	e031      	b.n	8011266 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011202:	f7fb f83b 	bl	800c27c <HAL_RCC_GetPCLK1Freq>
 8011206:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011208:	e033      	b.n	8011272 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801120a:	f7fb f84d 	bl	800c2a8 <HAL_RCC_GetPCLK2Freq>
 801120e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011210:	e02f      	b.n	8011272 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011216:	4618      	mov	r0, r3
 8011218:	f7fc fee4 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801121c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801121e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011220:	e027      	b.n	8011272 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011222:	f107 0318 	add.w	r3, r7, #24
 8011226:	4618      	mov	r0, r3
 8011228:	f7fd f830 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801122c:	69fb      	ldr	r3, [r7, #28]
 801122e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011230:	e01f      	b.n	8011272 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011232:	4b69      	ldr	r3, [pc, #420]	@ (80113d8 <UART_SetConfig+0xc2c>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f003 0320 	and.w	r3, r3, #32
 801123a:	2b00      	cmp	r3, #0
 801123c:	d009      	beq.n	8011252 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801123e:	4b66      	ldr	r3, [pc, #408]	@ (80113d8 <UART_SetConfig+0xc2c>)
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	08db      	lsrs	r3, r3, #3
 8011244:	f003 0303 	and.w	r3, r3, #3
 8011248:	4a64      	ldr	r2, [pc, #400]	@ (80113dc <UART_SetConfig+0xc30>)
 801124a:	fa22 f303 	lsr.w	r3, r2, r3
 801124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011250:	e00f      	b.n	8011272 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011252:	4b62      	ldr	r3, [pc, #392]	@ (80113dc <UART_SetConfig+0xc30>)
 8011254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011256:	e00c      	b.n	8011272 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011258:	4b61      	ldr	r3, [pc, #388]	@ (80113e0 <UART_SetConfig+0xc34>)
 801125a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801125c:	e009      	b.n	8011272 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801125e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011264:	e005      	b.n	8011272 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011266:	2300      	movs	r3, #0
 8011268:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801126a:	2301      	movs	r3, #1
 801126c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011270:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011272:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011274:	2b00      	cmp	r3, #0
 8011276:	f000 80ea 	beq.w	801144e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801127a:	697b      	ldr	r3, [r7, #20]
 801127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801127e:	4a55      	ldr	r2, [pc, #340]	@ (80113d4 <UART_SetConfig+0xc28>)
 8011280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011284:	461a      	mov	r2, r3
 8011286:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011288:	fbb3 f3f2 	udiv	r3, r3, r2
 801128c:	005a      	lsls	r2, r3, #1
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	085b      	lsrs	r3, r3, #1
 8011294:	441a      	add	r2, r3
 8011296:	697b      	ldr	r3, [r7, #20]
 8011298:	685b      	ldr	r3, [r3, #4]
 801129a:	fbb2 f3f3 	udiv	r3, r2, r3
 801129e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80112a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112a2:	2b0f      	cmp	r3, #15
 80112a4:	d916      	bls.n	80112d4 <UART_SetConfig+0xb28>
 80112a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80112ac:	d212      	bcs.n	80112d4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80112ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112b0:	b29b      	uxth	r3, r3
 80112b2:	f023 030f 	bic.w	r3, r3, #15
 80112b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80112b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112ba:	085b      	lsrs	r3, r3, #1
 80112bc:	b29b      	uxth	r3, r3
 80112be:	f003 0307 	and.w	r3, r3, #7
 80112c2:	b29a      	uxth	r2, r3
 80112c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80112c6:	4313      	orrs	r3, r2
 80112c8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80112ca:	697b      	ldr	r3, [r7, #20]
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80112d0:	60da      	str	r2, [r3, #12]
 80112d2:	e0bc      	b.n	801144e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80112d4:	2301      	movs	r3, #1
 80112d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80112da:	e0b8      	b.n	801144e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80112dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80112e0:	2b20      	cmp	r3, #32
 80112e2:	dc4b      	bgt.n	801137c <UART_SetConfig+0xbd0>
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	f2c0 8087 	blt.w	80113f8 <UART_SetConfig+0xc4c>
 80112ea:	2b20      	cmp	r3, #32
 80112ec:	f200 8084 	bhi.w	80113f8 <UART_SetConfig+0xc4c>
 80112f0:	a201      	add	r2, pc, #4	@ (adr r2, 80112f8 <UART_SetConfig+0xb4c>)
 80112f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112f6:	bf00      	nop
 80112f8:	08011383 	.word	0x08011383
 80112fc:	0801138b 	.word	0x0801138b
 8011300:	080113f9 	.word	0x080113f9
 8011304:	080113f9 	.word	0x080113f9
 8011308:	08011393 	.word	0x08011393
 801130c:	080113f9 	.word	0x080113f9
 8011310:	080113f9 	.word	0x080113f9
 8011314:	080113f9 	.word	0x080113f9
 8011318:	080113a3 	.word	0x080113a3
 801131c:	080113f9 	.word	0x080113f9
 8011320:	080113f9 	.word	0x080113f9
 8011324:	080113f9 	.word	0x080113f9
 8011328:	080113f9 	.word	0x080113f9
 801132c:	080113f9 	.word	0x080113f9
 8011330:	080113f9 	.word	0x080113f9
 8011334:	080113f9 	.word	0x080113f9
 8011338:	080113b3 	.word	0x080113b3
 801133c:	080113f9 	.word	0x080113f9
 8011340:	080113f9 	.word	0x080113f9
 8011344:	080113f9 	.word	0x080113f9
 8011348:	080113f9 	.word	0x080113f9
 801134c:	080113f9 	.word	0x080113f9
 8011350:	080113f9 	.word	0x080113f9
 8011354:	080113f9 	.word	0x080113f9
 8011358:	080113f9 	.word	0x080113f9
 801135c:	080113f9 	.word	0x080113f9
 8011360:	080113f9 	.word	0x080113f9
 8011364:	080113f9 	.word	0x080113f9
 8011368:	080113f9 	.word	0x080113f9
 801136c:	080113f9 	.word	0x080113f9
 8011370:	080113f9 	.word	0x080113f9
 8011374:	080113f9 	.word	0x080113f9
 8011378:	080113eb 	.word	0x080113eb
 801137c:	2b40      	cmp	r3, #64	@ 0x40
 801137e:	d037      	beq.n	80113f0 <UART_SetConfig+0xc44>
 8011380:	e03a      	b.n	80113f8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011382:	f7fa ff7b 	bl	800c27c <HAL_RCC_GetPCLK1Freq>
 8011386:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011388:	e03c      	b.n	8011404 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801138a:	f7fa ff8d 	bl	800c2a8 <HAL_RCC_GetPCLK2Freq>
 801138e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8011390:	e038      	b.n	8011404 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011396:	4618      	mov	r0, r3
 8011398:	f7fc fe24 	bl	800dfe4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801139c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113a0:	e030      	b.n	8011404 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80113a2:	f107 0318 	add.w	r3, r7, #24
 80113a6:	4618      	mov	r0, r3
 80113a8:	f7fc ff70 	bl	800e28c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80113ac:	69fb      	ldr	r3, [r7, #28]
 80113ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113b0:	e028      	b.n	8011404 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80113b2:	4b09      	ldr	r3, [pc, #36]	@ (80113d8 <UART_SetConfig+0xc2c>)
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	f003 0320 	and.w	r3, r3, #32
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d012      	beq.n	80113e4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80113be:	4b06      	ldr	r3, [pc, #24]	@ (80113d8 <UART_SetConfig+0xc2c>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	08db      	lsrs	r3, r3, #3
 80113c4:	f003 0303 	and.w	r3, r3, #3
 80113c8:	4a04      	ldr	r2, [pc, #16]	@ (80113dc <UART_SetConfig+0xc30>)
 80113ca:	fa22 f303 	lsr.w	r3, r2, r3
 80113ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80113d0:	e018      	b.n	8011404 <UART_SetConfig+0xc58>
 80113d2:	bf00      	nop
 80113d4:	080142c0 	.word	0x080142c0
 80113d8:	58024400 	.word	0x58024400
 80113dc:	03d09000 	.word	0x03d09000
 80113e0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80113e4:	4b24      	ldr	r3, [pc, #144]	@ (8011478 <UART_SetConfig+0xccc>)
 80113e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113e8:	e00c      	b.n	8011404 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80113ea:	4b24      	ldr	r3, [pc, #144]	@ (801147c <UART_SetConfig+0xcd0>)
 80113ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113ee:	e009      	b.n	8011404 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80113f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80113f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80113f6:	e005      	b.n	8011404 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80113f8:	2300      	movs	r3, #0
 80113fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80113fc:	2301      	movs	r3, #1
 80113fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8011402:	bf00      	nop
    }

    if (pclk != 0U)
 8011404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011406:	2b00      	cmp	r3, #0
 8011408:	d021      	beq.n	801144e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801140a:	697b      	ldr	r3, [r7, #20]
 801140c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801140e:	4a1c      	ldr	r2, [pc, #112]	@ (8011480 <UART_SetConfig+0xcd4>)
 8011410:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011414:	461a      	mov	r2, r3
 8011416:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011418:	fbb3 f2f2 	udiv	r2, r3, r2
 801141c:	697b      	ldr	r3, [r7, #20]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	085b      	lsrs	r3, r3, #1
 8011422:	441a      	add	r2, r3
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	685b      	ldr	r3, [r3, #4]
 8011428:	fbb2 f3f3 	udiv	r3, r2, r3
 801142c:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801142e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011430:	2b0f      	cmp	r3, #15
 8011432:	d909      	bls.n	8011448 <UART_SetConfig+0xc9c>
 8011434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801143a:	d205      	bcs.n	8011448 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801143c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801143e:	b29a      	uxth	r2, r3
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	60da      	str	r2, [r3, #12]
 8011446:	e002      	b.n	801144e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011448:	2301      	movs	r3, #1
 801144a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	2201      	movs	r2, #1
 8011452:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	2201      	movs	r2, #1
 801145a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	2200      	movs	r2, #0
 8011462:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	2200      	movs	r2, #0
 8011468:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801146a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801146e:	4618      	mov	r0, r3
 8011470:	3748      	adds	r7, #72	@ 0x48
 8011472:	46bd      	mov	sp, r7
 8011474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011478:	03d09000 	.word	0x03d09000
 801147c:	003d0900 	.word	0x003d0900
 8011480:	080142c0 	.word	0x080142c0

08011484 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011484:	b480      	push	{r7}
 8011486:	b083      	sub	sp, #12
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011490:	f003 0308 	and.w	r3, r3, #8
 8011494:	2b00      	cmp	r3, #0
 8011496:	d00a      	beq.n	80114ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	430a      	orrs	r2, r1
 80114ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114b2:	f003 0301 	and.w	r3, r3, #1
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d00a      	beq.n	80114d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	430a      	orrs	r2, r1
 80114ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114d4:	f003 0302 	and.w	r3, r3, #2
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d00a      	beq.n	80114f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	681b      	ldr	r3, [r3, #0]
 80114ee:	430a      	orrs	r2, r1
 80114f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114f6:	f003 0304 	and.w	r3, r3, #4
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d00a      	beq.n	8011514 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	430a      	orrs	r2, r1
 8011512:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011518:	f003 0310 	and.w	r3, r3, #16
 801151c:	2b00      	cmp	r3, #0
 801151e:	d00a      	beq.n	8011536 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	689b      	ldr	r3, [r3, #8]
 8011526:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	430a      	orrs	r2, r1
 8011534:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801153a:	f003 0320 	and.w	r3, r3, #32
 801153e:	2b00      	cmp	r3, #0
 8011540:	d00a      	beq.n	8011558 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	689b      	ldr	r3, [r3, #8]
 8011548:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	430a      	orrs	r2, r1
 8011556:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801155c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011560:	2b00      	cmp	r3, #0
 8011562:	d01a      	beq.n	801159a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	685b      	ldr	r3, [r3, #4]
 801156a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	430a      	orrs	r2, r1
 8011578:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801157e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8011582:	d10a      	bne.n	801159a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	430a      	orrs	r2, r1
 8011598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801159e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d00a      	beq.n	80115bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	685b      	ldr	r3, [r3, #4]
 80115ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	430a      	orrs	r2, r1
 80115ba:	605a      	str	r2, [r3, #4]
  }
}
 80115bc:	bf00      	nop
 80115be:	370c      	adds	r7, #12
 80115c0:	46bd      	mov	sp, r7
 80115c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c6:	4770      	bx	lr

080115c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b098      	sub	sp, #96	@ 0x60
 80115cc:	af02      	add	r7, sp, #8
 80115ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2200      	movs	r2, #0
 80115d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80115d8:	f7f3 f9e2 	bl	80049a0 <HAL_GetTick>
 80115dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f003 0308 	and.w	r3, r3, #8
 80115e8:	2b08      	cmp	r3, #8
 80115ea:	d12f      	bne.n	801164c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80115f0:	9300      	str	r3, [sp, #0]
 80115f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115f4:	2200      	movs	r2, #0
 80115f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80115fa:	6878      	ldr	r0, [r7, #4]
 80115fc:	f000 f88e 	bl	801171c <UART_WaitOnFlagUntilTimeout>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d022      	beq.n	801164c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801160c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801160e:	e853 3f00 	ldrex	r3, [r3]
 8011612:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011616:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801161a:	653b      	str	r3, [r7, #80]	@ 0x50
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	461a      	mov	r2, r3
 8011622:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011624:	647b      	str	r3, [r7, #68]	@ 0x44
 8011626:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011628:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801162a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801162c:	e841 2300 	strex	r3, r2, [r1]
 8011630:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011634:	2b00      	cmp	r3, #0
 8011636:	d1e6      	bne.n	8011606 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	2220      	movs	r2, #32
 801163c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011648:	2303      	movs	r3, #3
 801164a:	e063      	b.n	8011714 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	f003 0304 	and.w	r3, r3, #4
 8011656:	2b04      	cmp	r3, #4
 8011658:	d149      	bne.n	80116ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801165a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801165e:	9300      	str	r3, [sp, #0]
 8011660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011662:	2200      	movs	r2, #0
 8011664:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f000 f857 	bl	801171c <UART_WaitOnFlagUntilTimeout>
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d03c      	beq.n	80116ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801167c:	e853 3f00 	ldrex	r3, [r3]
 8011680:	623b      	str	r3, [r7, #32]
   return(result);
 8011682:	6a3b      	ldr	r3, [r7, #32]
 8011684:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011688:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	461a      	mov	r2, r3
 8011690:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011692:	633b      	str	r3, [r7, #48]	@ 0x30
 8011694:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011696:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011698:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801169a:	e841 2300 	strex	r3, r2, [r1]
 801169e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80116a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d1e6      	bne.n	8011674 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	3308      	adds	r3, #8
 80116ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116ae:	693b      	ldr	r3, [r7, #16]
 80116b0:	e853 3f00 	ldrex	r3, [r3]
 80116b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80116b6:	68fb      	ldr	r3, [r7, #12]
 80116b8:	f023 0301 	bic.w	r3, r3, #1
 80116bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	681b      	ldr	r3, [r3, #0]
 80116c2:	3308      	adds	r3, #8
 80116c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80116c6:	61fa      	str	r2, [r7, #28]
 80116c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116ca:	69b9      	ldr	r1, [r7, #24]
 80116cc:	69fa      	ldr	r2, [r7, #28]
 80116ce:	e841 2300 	strex	r3, r2, [r1]
 80116d2:	617b      	str	r3, [r7, #20]
   return(result);
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d1e5      	bne.n	80116a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2220      	movs	r2, #32
 80116de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2200      	movs	r2, #0
 80116e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80116ea:	2303      	movs	r3, #3
 80116ec:	e012      	b.n	8011714 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	2220      	movs	r2, #32
 80116f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	2220      	movs	r2, #32
 80116fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	2200      	movs	r2, #0
 8011708:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	2200      	movs	r2, #0
 801170e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011712:	2300      	movs	r3, #0
}
 8011714:	4618      	mov	r0, r3
 8011716:	3758      	adds	r7, #88	@ 0x58
 8011718:	46bd      	mov	sp, r7
 801171a:	bd80      	pop	{r7, pc}

0801171c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b084      	sub	sp, #16
 8011720:	af00      	add	r7, sp, #0
 8011722:	60f8      	str	r0, [r7, #12]
 8011724:	60b9      	str	r1, [r7, #8]
 8011726:	603b      	str	r3, [r7, #0]
 8011728:	4613      	mov	r3, r2
 801172a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801172c:	e04f      	b.n	80117ce <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801172e:	69bb      	ldr	r3, [r7, #24]
 8011730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011734:	d04b      	beq.n	80117ce <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011736:	f7f3 f933 	bl	80049a0 <HAL_GetTick>
 801173a:	4602      	mov	r2, r0
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	1ad3      	subs	r3, r2, r3
 8011740:	69ba      	ldr	r2, [r7, #24]
 8011742:	429a      	cmp	r2, r3
 8011744:	d302      	bcc.n	801174c <UART_WaitOnFlagUntilTimeout+0x30>
 8011746:	69bb      	ldr	r3, [r7, #24]
 8011748:	2b00      	cmp	r3, #0
 801174a:	d101      	bne.n	8011750 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801174c:	2303      	movs	r3, #3
 801174e:	e04e      	b.n	80117ee <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	f003 0304 	and.w	r3, r3, #4
 801175a:	2b00      	cmp	r3, #0
 801175c:	d037      	beq.n	80117ce <UART_WaitOnFlagUntilTimeout+0xb2>
 801175e:	68bb      	ldr	r3, [r7, #8]
 8011760:	2b80      	cmp	r3, #128	@ 0x80
 8011762:	d034      	beq.n	80117ce <UART_WaitOnFlagUntilTimeout+0xb2>
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	2b40      	cmp	r3, #64	@ 0x40
 8011768:	d031      	beq.n	80117ce <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	69db      	ldr	r3, [r3, #28]
 8011770:	f003 0308 	and.w	r3, r3, #8
 8011774:	2b08      	cmp	r3, #8
 8011776:	d110      	bne.n	801179a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011778:	68fb      	ldr	r3, [r7, #12]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	2208      	movs	r2, #8
 801177e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011780:	68f8      	ldr	r0, [r7, #12]
 8011782:	f000 f921 	bl	80119c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2208      	movs	r2, #8
 801178a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	2200      	movs	r2, #0
 8011792:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8011796:	2301      	movs	r3, #1
 8011798:	e029      	b.n	80117ee <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	69db      	ldr	r3, [r3, #28]
 80117a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80117a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80117a8:	d111      	bne.n	80117ce <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80117b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80117b4:	68f8      	ldr	r0, [r7, #12]
 80117b6:	f000 f907 	bl	80119c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	2220      	movs	r2, #32
 80117be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	2200      	movs	r2, #0
 80117c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80117ca:	2303      	movs	r3, #3
 80117cc:	e00f      	b.n	80117ee <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	69da      	ldr	r2, [r3, #28]
 80117d4:	68bb      	ldr	r3, [r7, #8]
 80117d6:	4013      	ands	r3, r2
 80117d8:	68ba      	ldr	r2, [r7, #8]
 80117da:	429a      	cmp	r2, r3
 80117dc:	bf0c      	ite	eq
 80117de:	2301      	moveq	r3, #1
 80117e0:	2300      	movne	r3, #0
 80117e2:	b2db      	uxtb	r3, r3
 80117e4:	461a      	mov	r2, r3
 80117e6:	79fb      	ldrb	r3, [r7, #7]
 80117e8:	429a      	cmp	r2, r3
 80117ea:	d0a0      	beq.n	801172e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	3710      	adds	r7, #16
 80117f2:	46bd      	mov	sp, r7
 80117f4:	bd80      	pop	{r7, pc}
	...

080117f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b096      	sub	sp, #88	@ 0x58
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	60f8      	str	r0, [r7, #12]
 8011800:	60b9      	str	r1, [r7, #8]
 8011802:	4613      	mov	r3, r2
 8011804:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	68ba      	ldr	r2, [r7, #8]
 801180a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	88fa      	ldrh	r2, [r7, #6]
 8011810:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	2200      	movs	r2, #0
 8011818:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	2222      	movs	r2, #34	@ 0x22
 8011820:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801182a:	2b00      	cmp	r3, #0
 801182c:	d02d      	beq.n	801188a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011834:	4a40      	ldr	r2, [pc, #256]	@ (8011938 <UART_Start_Receive_DMA+0x140>)
 8011836:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801183e:	4a3f      	ldr	r2, [pc, #252]	@ (801193c <UART_Start_Receive_DMA+0x144>)
 8011840:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011848:	4a3d      	ldr	r2, [pc, #244]	@ (8011940 <UART_Start_Receive_DMA+0x148>)
 801184a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011852:	2200      	movs	r2, #0
 8011854:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	3324      	adds	r3, #36	@ 0x24
 8011862:	4619      	mov	r1, r3
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011868:	461a      	mov	r2, r3
 801186a:	88fb      	ldrh	r3, [r7, #6]
 801186c:	f7f5 fc60 	bl	8007130 <HAL_DMA_Start_IT>
 8011870:	4603      	mov	r3, r0
 8011872:	2b00      	cmp	r3, #0
 8011874:	d009      	beq.n	801188a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011876:	68fb      	ldr	r3, [r7, #12]
 8011878:	2210      	movs	r2, #16
 801187a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	2220      	movs	r2, #32
 8011882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011886:	2301      	movs	r3, #1
 8011888:	e051      	b.n	801192e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	691b      	ldr	r3, [r3, #16]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d018      	beq.n	80118c4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801189a:	e853 3f00 	ldrex	r3, [r3]
 801189e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80118a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80118a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	461a      	mov	r2, r3
 80118ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80118b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80118b2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80118b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80118b8:	e841 2300 	strex	r3, r2, [r1]
 80118bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80118be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d1e6      	bne.n	8011892 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	3308      	adds	r3, #8
 80118ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ce:	e853 3f00 	ldrex	r3, [r3]
 80118d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80118d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80118d6:	f043 0301 	orr.w	r3, r3, #1
 80118da:	653b      	str	r3, [r7, #80]	@ 0x50
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	681b      	ldr	r3, [r3, #0]
 80118e0:	3308      	adds	r3, #8
 80118e2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80118e4:	637a      	str	r2, [r7, #52]	@ 0x34
 80118e6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80118ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80118ec:	e841 2300 	strex	r3, r2, [r1]
 80118f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80118f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d1e5      	bne.n	80118c4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	3308      	adds	r3, #8
 80118fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011900:	697b      	ldr	r3, [r7, #20]
 8011902:	e853 3f00 	ldrex	r3, [r3]
 8011906:	613b      	str	r3, [r7, #16]
   return(result);
 8011908:	693b      	ldr	r3, [r7, #16]
 801190a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011910:	68fb      	ldr	r3, [r7, #12]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	3308      	adds	r3, #8
 8011916:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011918:	623a      	str	r2, [r7, #32]
 801191a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191c:	69f9      	ldr	r1, [r7, #28]
 801191e:	6a3a      	ldr	r2, [r7, #32]
 8011920:	e841 2300 	strex	r3, r2, [r1]
 8011924:	61bb      	str	r3, [r7, #24]
   return(result);
 8011926:	69bb      	ldr	r3, [r7, #24]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d1e5      	bne.n	80118f8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 801192c:	2300      	movs	r3, #0
}
 801192e:	4618      	mov	r0, r3
 8011930:	3758      	adds	r7, #88	@ 0x58
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}
 8011936:	bf00      	nop
 8011938:	08011b47 	.word	0x08011b47
 801193c:	08011c6f 	.word	0x08011c6f
 8011940:	08011cad 	.word	0x08011cad

08011944 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011944:	b480      	push	{r7}
 8011946:	b08f      	sub	sp, #60	@ 0x3c
 8011948:	af00      	add	r7, sp, #0
 801194a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011952:	6a3b      	ldr	r3, [r7, #32]
 8011954:	e853 3f00 	ldrex	r3, [r3]
 8011958:	61fb      	str	r3, [r7, #28]
   return(result);
 801195a:	69fb      	ldr	r3, [r7, #28]
 801195c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8011960:	637b      	str	r3, [r7, #52]	@ 0x34
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	461a      	mov	r2, r3
 8011968:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801196c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801196e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011972:	e841 2300 	strex	r3, r2, [r1]
 8011976:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801197a:	2b00      	cmp	r3, #0
 801197c:	d1e6      	bne.n	801194c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	681b      	ldr	r3, [r3, #0]
 8011982:	3308      	adds	r3, #8
 8011984:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	e853 3f00 	ldrex	r3, [r3]
 801198c:	60bb      	str	r3, [r7, #8]
   return(result);
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011994:	633b      	str	r3, [r7, #48]	@ 0x30
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	681b      	ldr	r3, [r3, #0]
 801199a:	3308      	adds	r3, #8
 801199c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801199e:	61ba      	str	r2, [r7, #24]
 80119a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119a2:	6979      	ldr	r1, [r7, #20]
 80119a4:	69ba      	ldr	r2, [r7, #24]
 80119a6:	e841 2300 	strex	r3, r2, [r1]
 80119aa:	613b      	str	r3, [r7, #16]
   return(result);
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d1e5      	bne.n	801197e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2220      	movs	r2, #32
 80119b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80119ba:	bf00      	nop
 80119bc:	373c      	adds	r7, #60	@ 0x3c
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr
	...

080119c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80119c8:	b480      	push	{r7}
 80119ca:	b095      	sub	sp, #84	@ 0x54
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119d8:	e853 3f00 	ldrex	r3, [r3]
 80119dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80119de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80119e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	461a      	mov	r2, r3
 80119ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80119ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80119f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80119f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80119f6:	e841 2300 	strex	r3, r2, [r1]
 80119fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80119fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d1e6      	bne.n	80119d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	3308      	adds	r3, #8
 8011a08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a0a:	6a3b      	ldr	r3, [r7, #32]
 8011a0c:	e853 3f00 	ldrex	r3, [r3]
 8011a10:	61fb      	str	r3, [r7, #28]
   return(result);
 8011a12:	69fa      	ldr	r2, [r7, #28]
 8011a14:	4b1e      	ldr	r3, [pc, #120]	@ (8011a90 <UART_EndRxTransfer+0xc8>)
 8011a16:	4013      	ands	r3, r2
 8011a18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	3308      	adds	r3, #8
 8011a20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011a24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a2a:	e841 2300 	strex	r3, r2, [r1]
 8011a2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d1e5      	bne.n	8011a02 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a3a:	2b01      	cmp	r3, #1
 8011a3c:	d118      	bne.n	8011a70 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	e853 3f00 	ldrex	r3, [r3]
 8011a4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a4c:	68bb      	ldr	r3, [r7, #8]
 8011a4e:	f023 0310 	bic.w	r3, r3, #16
 8011a52:	647b      	str	r3, [r7, #68]	@ 0x44
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	461a      	mov	r2, r3
 8011a5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a5c:	61bb      	str	r3, [r7, #24]
 8011a5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a60:	6979      	ldr	r1, [r7, #20]
 8011a62:	69ba      	ldr	r2, [r7, #24]
 8011a64:	e841 2300 	strex	r3, r2, [r1]
 8011a68:	613b      	str	r3, [r7, #16]
   return(result);
 8011a6a:	693b      	ldr	r3, [r7, #16]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d1e6      	bne.n	8011a3e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	2220      	movs	r2, #32
 8011a74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2200      	movs	r2, #0
 8011a7c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	2200      	movs	r2, #0
 8011a82:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011a84:	bf00      	nop
 8011a86:	3754      	adds	r7, #84	@ 0x54
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8e:	4770      	bx	lr
 8011a90:	effffffe 	.word	0xeffffffe

08011a94 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b090      	sub	sp, #64	@ 0x40
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	69db      	ldr	r3, [r3, #28]
 8011aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011aaa:	d037      	beq.n	8011b1c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011aac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	3308      	adds	r3, #8
 8011aba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011abe:	e853 3f00 	ldrex	r3, [r3]
 8011ac2:	623b      	str	r3, [r7, #32]
   return(result);
 8011ac4:	6a3b      	ldr	r3, [r7, #32]
 8011ac6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011aca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	3308      	adds	r3, #8
 8011ad2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011ad4:	633a      	str	r2, [r7, #48]	@ 0x30
 8011ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ad8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011adc:	e841 2300 	strex	r3, r2, [r1]
 8011ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d1e5      	bne.n	8011ab4 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	e853 3f00 	ldrex	r3, [r3]
 8011af4:	60fb      	str	r3, [r7, #12]
   return(result);
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011afc:	637b      	str	r3, [r7, #52]	@ 0x34
 8011afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	461a      	mov	r2, r3
 8011b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b06:	61fb      	str	r3, [r7, #28]
 8011b08:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b0a:	69b9      	ldr	r1, [r7, #24]
 8011b0c:	69fa      	ldr	r2, [r7, #28]
 8011b0e:	e841 2300 	strex	r3, r2, [r1]
 8011b12:	617b      	str	r3, [r7, #20]
   return(result);
 8011b14:	697b      	ldr	r3, [r7, #20]
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d1e6      	bne.n	8011ae8 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011b1a:	e002      	b.n	8011b22 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011b1c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011b1e:	f7fe fe13 	bl	8010748 <HAL_UART_TxCpltCallback>
}
 8011b22:	bf00      	nop
 8011b24:	3740      	adds	r7, #64	@ 0x40
 8011b26:	46bd      	mov	sp, r7
 8011b28:	bd80      	pop	{r7, pc}

08011b2a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011b2a:	b580      	push	{r7, lr}
 8011b2c:	b084      	sub	sp, #16
 8011b2e:	af00      	add	r7, sp, #0
 8011b30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b36:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011b38:	68f8      	ldr	r0, [r7, #12]
 8011b3a:	f7fe fe0f 	bl	801075c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011b3e:	bf00      	nop
 8011b40:	3710      	adds	r7, #16
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}

08011b46 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011b46:	b580      	push	{r7, lr}
 8011b48:	b09c      	sub	sp, #112	@ 0x70
 8011b4a:	af00      	add	r7, sp, #0
 8011b4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011b52:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	69db      	ldr	r3, [r3, #28]
 8011b58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011b5c:	d071      	beq.n	8011c42 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8011b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b60:	2200      	movs	r2, #0
 8011b62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011b66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b6e:	e853 3f00 	ldrex	r3, [r3]
 8011b72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011b76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011b7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011b7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	461a      	mov	r2, r3
 8011b82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011b84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011b86:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011b8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011b8c:	e841 2300 	strex	r3, r2, [r1]
 8011b90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d1e6      	bne.n	8011b66 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	3308      	adds	r3, #8
 8011b9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ba2:	e853 3f00 	ldrex	r3, [r3]
 8011ba6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011baa:	f023 0301 	bic.w	r3, r3, #1
 8011bae:	667b      	str	r3, [r7, #100]	@ 0x64
 8011bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	3308      	adds	r3, #8
 8011bb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011bb8:	647a      	str	r2, [r7, #68]	@ 0x44
 8011bba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bbc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011bc0:	e841 2300 	strex	r3, r2, [r1]
 8011bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011bc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d1e5      	bne.n	8011b98 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011bcc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	3308      	adds	r3, #8
 8011bd2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011bd6:	e853 3f00 	ldrex	r3, [r3]
 8011bda:	623b      	str	r3, [r7, #32]
   return(result);
 8011bdc:	6a3b      	ldr	r3, [r7, #32]
 8011bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011be2:	663b      	str	r3, [r7, #96]	@ 0x60
 8011be4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	3308      	adds	r3, #8
 8011bea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8011bec:	633a      	str	r2, [r7, #48]	@ 0x30
 8011bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bf0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011bf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011bf4:	e841 2300 	strex	r3, r2, [r1]
 8011bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d1e5      	bne.n	8011bcc <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011c00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c02:	2220      	movs	r2, #32
 8011c04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d118      	bne.n	8011c42 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	e853 3f00 	ldrex	r3, [r3]
 8011c1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	f023 0310 	bic.w	r3, r3, #16
 8011c24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011c26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	461a      	mov	r2, r3
 8011c2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c2e:	61fb      	str	r3, [r7, #28]
 8011c30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c32:	69b9      	ldr	r1, [r7, #24]
 8011c34:	69fa      	ldr	r2, [r7, #28]
 8011c36:	e841 2300 	strex	r3, r2, [r1]
 8011c3a:	617b      	str	r3, [r7, #20]
   return(result);
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d1e6      	bne.n	8011c10 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c44:	2200      	movs	r2, #0
 8011c46:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c4c:	2b01      	cmp	r3, #1
 8011c4e:	d107      	bne.n	8011c60 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011c52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011c56:	4619      	mov	r1, r3
 8011c58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011c5a:	f7ef fc51 	bl	8001500 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011c5e:	e002      	b.n	8011c66 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8011c60:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011c62:	f7fe fd85 	bl	8010770 <HAL_UART_RxCpltCallback>
}
 8011c66:	bf00      	nop
 8011c68:	3770      	adds	r7, #112	@ 0x70
 8011c6a:	46bd      	mov	sp, r7
 8011c6c:	bd80      	pop	{r7, pc}

08011c6e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011c6e:	b580      	push	{r7, lr}
 8011c70:	b084      	sub	sp, #16
 8011c72:	af00      	add	r7, sp, #0
 8011c74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c7a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	2201      	movs	r2, #1
 8011c80:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c82:	68fb      	ldr	r3, [r7, #12]
 8011c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c86:	2b01      	cmp	r3, #1
 8011c88:	d109      	bne.n	8011c9e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011c90:	085b      	lsrs	r3, r3, #1
 8011c92:	b29b      	uxth	r3, r3
 8011c94:	4619      	mov	r1, r3
 8011c96:	68f8      	ldr	r0, [r7, #12]
 8011c98:	f7ef fc32 	bl	8001500 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011c9c:	e002      	b.n	8011ca4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8011c9e:	68f8      	ldr	r0, [r7, #12]
 8011ca0:	f7fe fd70 	bl	8010784 <HAL_UART_RxHalfCpltCallback>
}
 8011ca4:	bf00      	nop
 8011ca6:	3710      	adds	r7, #16
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd80      	pop	{r7, pc}

08011cac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011cac:	b580      	push	{r7, lr}
 8011cae:	b086      	sub	sp, #24
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011cb8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011cc0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011cc8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	689b      	ldr	r3, [r3, #8]
 8011cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011cd4:	2b80      	cmp	r3, #128	@ 0x80
 8011cd6:	d109      	bne.n	8011cec <UART_DMAError+0x40>
 8011cd8:	693b      	ldr	r3, [r7, #16]
 8011cda:	2b21      	cmp	r3, #33	@ 0x21
 8011cdc:	d106      	bne.n	8011cec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011cde:	697b      	ldr	r3, [r7, #20]
 8011ce0:	2200      	movs	r2, #0
 8011ce2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8011ce6:	6978      	ldr	r0, [r7, #20]
 8011ce8:	f7ff fe2c 	bl	8011944 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011cec:	697b      	ldr	r3, [r7, #20]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	689b      	ldr	r3, [r3, #8]
 8011cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011cf6:	2b40      	cmp	r3, #64	@ 0x40
 8011cf8:	d109      	bne.n	8011d0e <UART_DMAError+0x62>
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	2b22      	cmp	r3, #34	@ 0x22
 8011cfe:	d106      	bne.n	8011d0e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	2200      	movs	r2, #0
 8011d04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8011d08:	6978      	ldr	r0, [r7, #20]
 8011d0a:	f7ff fe5d 	bl	80119c8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011d0e:	697b      	ldr	r3, [r7, #20]
 8011d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011d14:	f043 0210 	orr.w	r2, r3, #16
 8011d18:	697b      	ldr	r3, [r7, #20]
 8011d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d1e:	6978      	ldr	r0, [r7, #20]
 8011d20:	f7fe fd3a 	bl	8010798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d24:	bf00      	nop
 8011d26:	3718      	adds	r7, #24
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}

08011d2c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011d38:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011d3a:	68fb      	ldr	r3, [r7, #12]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8011d42:	68fb      	ldr	r3, [r7, #12]
 8011d44:	2200      	movs	r2, #0
 8011d46:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011d4a:	68f8      	ldr	r0, [r7, #12]
 8011d4c:	f7fe fd24 	bl	8010798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011d50:	bf00      	nop
 8011d52:	3710      	adds	r7, #16
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	b088      	sub	sp, #32
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d66:	68fb      	ldr	r3, [r7, #12]
 8011d68:	e853 3f00 	ldrex	r3, [r3]
 8011d6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011d74:	61fb      	str	r3, [r7, #28]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	69fb      	ldr	r3, [r7, #28]
 8011d7e:	61bb      	str	r3, [r7, #24]
 8011d80:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d82:	6979      	ldr	r1, [r7, #20]
 8011d84:	69ba      	ldr	r2, [r7, #24]
 8011d86:	e841 2300 	strex	r3, r2, [r1]
 8011d8a:	613b      	str	r3, [r7, #16]
   return(result);
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d1e6      	bne.n	8011d60 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2220      	movs	r2, #32
 8011d96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f7fe fcd1 	bl	8010748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011da6:	bf00      	nop
 8011da8:	3720      	adds	r7, #32
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
	...

08011db0 <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b086      	sub	sp, #24
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
 8011dbc:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d101      	bne.n	8011dc8 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 8011dc4:	2301      	movs	r3, #1
 8011dc6:	e056      	b.n	8011e76 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d106      	bne.n	8011de0 <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	2200      	movs	r2, #0
 8011dd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 8011dda:	68f8      	ldr	r0, [r7, #12]
 8011ddc:	f7f1 ffb6 	bl	8003d4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	2224      	movs	r2, #36	@ 0x24
 8011de4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	681a      	ldr	r2, [r3, #0]
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	f022 0201 	bic.w	r2, r2, #1
 8011df6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d002      	beq.n	8011e06 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 8011e00:	68f8      	ldr	r0, [r7, #12]
 8011e02:	f7ff fb3f 	bl	8011484 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f7fe fcd0 	bl	80107ac <UART_SetConfig>
 8011e0c:	4603      	mov	r3, r0
 8011e0e:	2b01      	cmp	r3, #1
 8011e10:	d101      	bne.n	8011e16 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 8011e12:	2301      	movs	r3, #1
 8011e14:	e02f      	b.n	8011e76 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	689a      	ldr	r2, [r3, #8]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011e24:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	689b      	ldr	r3, [r3, #8]
 8011e2c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	68ba      	ldr	r2, [r7, #8]
 8011e36:	430a      	orrs	r2, r1
 8011e38:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	055b      	lsls	r3, r3, #21
 8011e3e:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	041b      	lsls	r3, r3, #16
 8011e44:	697a      	ldr	r2, [r7, #20]
 8011e46:	4313      	orrs	r3, r2
 8011e48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	681a      	ldr	r2, [r3, #0]
 8011e50:	4b0b      	ldr	r3, [pc, #44]	@ (8011e80 <HAL_RS485Ex_Init+0xd0>)
 8011e52:	4013      	ands	r3, r2
 8011e54:	68fa      	ldr	r2, [r7, #12]
 8011e56:	6812      	ldr	r2, [r2, #0]
 8011e58:	6979      	ldr	r1, [r7, #20]
 8011e5a:	430b      	orrs	r3, r1
 8011e5c:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8011e5e:	68fb      	ldr	r3, [r7, #12]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	681a      	ldr	r2, [r3, #0]
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f042 0201 	orr.w	r2, r2, #1
 8011e6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011e6e:	68f8      	ldr	r0, [r7, #12]
 8011e70:	f7ff fbaa 	bl	80115c8 <UART_CheckIdleState>
 8011e74:	4603      	mov	r3, r0
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3718      	adds	r7, #24
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	fc00ffff 	.word	0xfc00ffff

08011e84 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011e84:	b480      	push	{r7}
 8011e86:	b083      	sub	sp, #12
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011e8c:	bf00      	nop
 8011e8e:	370c      	adds	r7, #12
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr

08011e98 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011e98:	b480      	push	{r7}
 8011e9a:	b083      	sub	sp, #12
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011ea0:	bf00      	nop
 8011ea2:	370c      	adds	r7, #12
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr

08011eac <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011eac:	b480      	push	{r7}
 8011eae:	b083      	sub	sp, #12
 8011eb0:	af00      	add	r7, sp, #0
 8011eb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011eb4:	bf00      	nop
 8011eb6:	370c      	adds	r7, #12
 8011eb8:	46bd      	mov	sp, r7
 8011eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebe:	4770      	bx	lr

08011ec0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b085      	sub	sp, #20
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011ece:	2b01      	cmp	r3, #1
 8011ed0:	d101      	bne.n	8011ed6 <HAL_UARTEx_DisableFifoMode+0x16>
 8011ed2:	2302      	movs	r3, #2
 8011ed4:	e027      	b.n	8011f26 <HAL_UARTEx_DisableFifoMode+0x66>
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	2201      	movs	r2, #1
 8011eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2224      	movs	r2, #36	@ 0x24
 8011ee2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	681b      	ldr	r3, [r3, #0]
 8011eec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f022 0201 	bic.w	r2, r2, #1
 8011efc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011f04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2200      	movs	r2, #0
 8011f0a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	68fa      	ldr	r2, [r7, #12]
 8011f12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	2220      	movs	r2, #32
 8011f18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	2200      	movs	r2, #0
 8011f20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011f24:	2300      	movs	r3, #0
}
 8011f26:	4618      	mov	r0, r3
 8011f28:	3714      	adds	r7, #20
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f30:	4770      	bx	lr

08011f32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011f32:	b580      	push	{r7, lr}
 8011f34:	b084      	sub	sp, #16
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
 8011f3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011f42:	2b01      	cmp	r3, #1
 8011f44:	d101      	bne.n	8011f4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011f46:	2302      	movs	r3, #2
 8011f48:	e02d      	b.n	8011fa6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	2201      	movs	r2, #1
 8011f4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	2224      	movs	r2, #36	@ 0x24
 8011f56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	681b      	ldr	r3, [r3, #0]
 8011f66:	681a      	ldr	r2, [r3, #0]
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	f022 0201 	bic.w	r2, r2, #1
 8011f70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	689b      	ldr	r3, [r3, #8]
 8011f78:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	683a      	ldr	r2, [r7, #0]
 8011f82:	430a      	orrs	r2, r1
 8011f84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011f86:	6878      	ldr	r0, [r7, #4]
 8011f88:	f000 f8a4 	bl	80120d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	68fa      	ldr	r2, [r7, #12]
 8011f92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	2220      	movs	r2, #32
 8011f98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011fa4:	2300      	movs	r3, #0
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3710      	adds	r7, #16
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}

08011fae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011fae:	b580      	push	{r7, lr}
 8011fb0:	b084      	sub	sp, #16
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
 8011fb6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011fbe:	2b01      	cmp	r3, #1
 8011fc0:	d101      	bne.n	8011fc6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011fc2:	2302      	movs	r3, #2
 8011fc4:	e02d      	b.n	8012022 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2201      	movs	r2, #1
 8011fca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2224      	movs	r2, #36	@ 0x24
 8011fd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	681a      	ldr	r2, [r3, #0]
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	f022 0201 	bic.w	r2, r2, #1
 8011fec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	689b      	ldr	r3, [r3, #8]
 8011ff4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	683a      	ldr	r2, [r7, #0]
 8011ffe:	430a      	orrs	r2, r1
 8012000:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f000 f866 	bl	80120d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	68fa      	ldr	r2, [r7, #12]
 801200e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2220      	movs	r2, #32
 8012014:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2200      	movs	r2, #0
 801201c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012020:	2300      	movs	r3, #0
}
 8012022:	4618      	mov	r0, r3
 8012024:	3710      	adds	r7, #16
 8012026:	46bd      	mov	sp, r7
 8012028:	bd80      	pop	{r7, pc}

0801202a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801202a:	b580      	push	{r7, lr}
 801202c:	b08c      	sub	sp, #48	@ 0x30
 801202e:	af00      	add	r7, sp, #0
 8012030:	60f8      	str	r0, [r7, #12]
 8012032:	60b9      	str	r1, [r7, #8]
 8012034:	4613      	mov	r3, r2
 8012036:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801203e:	2b20      	cmp	r3, #32
 8012040:	d142      	bne.n	80120c8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d002      	beq.n	801204e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8012048:	88fb      	ldrh	r3, [r7, #6]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 801204e:	2301      	movs	r3, #1
 8012050:	e03b      	b.n	80120ca <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	2201      	movs	r2, #1
 8012056:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	2200      	movs	r2, #0
 801205c:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801205e:	88fb      	ldrh	r3, [r7, #6]
 8012060:	461a      	mov	r2, r3
 8012062:	68b9      	ldr	r1, [r7, #8]
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f7ff fbc7 	bl	80117f8 <UART_Start_Receive_DMA>
 801206a:	4603      	mov	r3, r0
 801206c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8012070:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8012074:	2b00      	cmp	r3, #0
 8012076:	d124      	bne.n	80120c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801207c:	2b01      	cmp	r3, #1
 801207e:	d11d      	bne.n	80120bc <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2210      	movs	r2, #16
 8012086:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	681b      	ldr	r3, [r3, #0]
 801208c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801208e:	69bb      	ldr	r3, [r7, #24]
 8012090:	e853 3f00 	ldrex	r3, [r3]
 8012094:	617b      	str	r3, [r7, #20]
   return(result);
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	f043 0310 	orr.w	r3, r3, #16
 801209c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	461a      	mov	r2, r3
 80120a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80120a8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120aa:	6a39      	ldr	r1, [r7, #32]
 80120ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120ae:	e841 2300 	strex	r3, r2, [r1]
 80120b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80120b4:	69fb      	ldr	r3, [r7, #28]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d1e6      	bne.n	8012088 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80120ba:	e002      	b.n	80120c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80120bc:	2301      	movs	r3, #1
 80120be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80120c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80120c6:	e000      	b.n	80120ca <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80120c8:	2302      	movs	r3, #2
  }
}
 80120ca:	4618      	mov	r0, r3
 80120cc:	3730      	adds	r7, #48	@ 0x30
 80120ce:	46bd      	mov	sp, r7
 80120d0:	bd80      	pop	{r7, pc}
	...

080120d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80120d4:	b480      	push	{r7}
 80120d6:	b085      	sub	sp, #20
 80120d8:	af00      	add	r7, sp, #0
 80120da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d108      	bne.n	80120f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	2201      	movs	r2, #1
 80120e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	2201      	movs	r2, #1
 80120f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80120f4:	e031      	b.n	801215a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80120f6:	2310      	movs	r3, #16
 80120f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80120fa:	2310      	movs	r3, #16
 80120fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	689b      	ldr	r3, [r3, #8]
 8012104:	0e5b      	lsrs	r3, r3, #25
 8012106:	b2db      	uxtb	r3, r3
 8012108:	f003 0307 	and.w	r3, r3, #7
 801210c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	689b      	ldr	r3, [r3, #8]
 8012114:	0f5b      	lsrs	r3, r3, #29
 8012116:	b2db      	uxtb	r3, r3
 8012118:	f003 0307 	and.w	r3, r3, #7
 801211c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801211e:	7bbb      	ldrb	r3, [r7, #14]
 8012120:	7b3a      	ldrb	r2, [r7, #12]
 8012122:	4911      	ldr	r1, [pc, #68]	@ (8012168 <UARTEx_SetNbDataToProcess+0x94>)
 8012124:	5c8a      	ldrb	r2, [r1, r2]
 8012126:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801212a:	7b3a      	ldrb	r2, [r7, #12]
 801212c:	490f      	ldr	r1, [pc, #60]	@ (801216c <UARTEx_SetNbDataToProcess+0x98>)
 801212e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012130:	fb93 f3f2 	sdiv	r3, r3, r2
 8012134:	b29a      	uxth	r2, r3
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801213c:	7bfb      	ldrb	r3, [r7, #15]
 801213e:	7b7a      	ldrb	r2, [r7, #13]
 8012140:	4909      	ldr	r1, [pc, #36]	@ (8012168 <UARTEx_SetNbDataToProcess+0x94>)
 8012142:	5c8a      	ldrb	r2, [r1, r2]
 8012144:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012148:	7b7a      	ldrb	r2, [r7, #13]
 801214a:	4908      	ldr	r1, [pc, #32]	@ (801216c <UARTEx_SetNbDataToProcess+0x98>)
 801214c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801214e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012152:	b29a      	uxth	r2, r3
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801215a:	bf00      	nop
 801215c:	3714      	adds	r7, #20
 801215e:	46bd      	mov	sp, r7
 8012160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012164:	4770      	bx	lr
 8012166:	bf00      	nop
 8012168:	080142d8 	.word	0x080142d8
 801216c:	080142e0 	.word	0x080142e0

08012170 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8012170:	b480      	push	{r7}
 8012172:	b085      	sub	sp, #20
 8012174:	af00      	add	r7, sp, #0
 8012176:	4603      	mov	r3, r0
 8012178:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801217a:	2300      	movs	r3, #0
 801217c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801217e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012182:	2b84      	cmp	r3, #132	@ 0x84
 8012184:	d005      	beq.n	8012192 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8012186:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	4413      	add	r3, r2
 801218e:	3303      	adds	r3, #3
 8012190:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8012192:	68fb      	ldr	r3, [r7, #12]
}
 8012194:	4618      	mov	r0, r3
 8012196:	3714      	adds	r7, #20
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr

080121a0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80121a0:	b580      	push	{r7, lr}
 80121a2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80121a4:	f000 fae4 	bl	8012770 <vTaskStartScheduler>
  
  return osOK;
 80121a8:	2300      	movs	r3, #0
}
 80121aa:	4618      	mov	r0, r3
 80121ac:	bd80      	pop	{r7, pc}

080121ae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80121ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121b0:	b089      	sub	sp, #36	@ 0x24
 80121b2:	af04      	add	r7, sp, #16
 80121b4:	6078      	str	r0, [r7, #4]
 80121b6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	695b      	ldr	r3, [r3, #20]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d020      	beq.n	8012202 <osThreadCreate+0x54>
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	699b      	ldr	r3, [r3, #24]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d01c      	beq.n	8012202 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	685c      	ldr	r4, [r3, #4]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	691e      	ldr	r6, [r3, #16]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80121da:	4618      	mov	r0, r3
 80121dc:	f7ff ffc8 	bl	8012170 <makeFreeRtosPriority>
 80121e0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	695b      	ldr	r3, [r3, #20]
 80121e6:	687a      	ldr	r2, [r7, #4]
 80121e8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80121ea:	9202      	str	r2, [sp, #8]
 80121ec:	9301      	str	r3, [sp, #4]
 80121ee:	9100      	str	r1, [sp, #0]
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	4632      	mov	r2, r6
 80121f4:	4629      	mov	r1, r5
 80121f6:	4620      	mov	r0, r4
 80121f8:	f000 f8ed 	bl	80123d6 <xTaskCreateStatic>
 80121fc:	4603      	mov	r3, r0
 80121fe:	60fb      	str	r3, [r7, #12]
 8012200:	e01c      	b.n	801223c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	685c      	ldr	r4, [r3, #4]
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801220e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8012216:	4618      	mov	r0, r3
 8012218:	f7ff ffaa 	bl	8012170 <makeFreeRtosPriority>
 801221c:	4602      	mov	r2, r0
 801221e:	f107 030c 	add.w	r3, r7, #12
 8012222:	9301      	str	r3, [sp, #4]
 8012224:	9200      	str	r2, [sp, #0]
 8012226:	683b      	ldr	r3, [r7, #0]
 8012228:	4632      	mov	r2, r6
 801222a:	4629      	mov	r1, r5
 801222c:	4620      	mov	r0, r4
 801222e:	f000 f932 	bl	8012496 <xTaskCreate>
 8012232:	4603      	mov	r3, r0
 8012234:	2b01      	cmp	r3, #1
 8012236:	d001      	beq.n	801223c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8012238:	2300      	movs	r3, #0
 801223a:	e000      	b.n	801223e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801223c:	68fb      	ldr	r3, [r7, #12]
}
 801223e:	4618      	mov	r0, r3
 8012240:	3714      	adds	r7, #20
 8012242:	46bd      	mov	sp, r7
 8012244:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012246 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8012246:	b580      	push	{r7, lr}
 8012248:	b084      	sub	sp, #16
 801224a:	af00      	add	r7, sp, #0
 801224c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d001      	beq.n	801225c <osDelay+0x16>
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	e000      	b.n	801225e <osDelay+0x18>
 801225c:	2301      	movs	r3, #1
 801225e:	4618      	mov	r0, r3
 8012260:	f000 fa50 	bl	8012704 <vTaskDelay>
  
  return osOK;
 8012264:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8012266:	4618      	mov	r0, r3
 8012268:	3710      	adds	r7, #16
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}

0801226e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801226e:	b480      	push	{r7}
 8012270:	b083      	sub	sp, #12
 8012272:	af00      	add	r7, sp, #0
 8012274:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	f103 0208 	add.w	r2, r3, #8
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012286:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f103 0208 	add.w	r2, r3, #8
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f103 0208 	add.w	r2, r3, #8
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	2200      	movs	r2, #0
 80122a0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80122a2:	bf00      	nop
 80122a4:	370c      	adds	r7, #12
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr

080122ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80122ae:	b480      	push	{r7}
 80122b0:	b083      	sub	sp, #12
 80122b2:	af00      	add	r7, sp, #0
 80122b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	2200      	movs	r2, #0
 80122ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80122bc:	bf00      	nop
 80122be:	370c      	adds	r7, #12
 80122c0:	46bd      	mov	sp, r7
 80122c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c6:	4770      	bx	lr

080122c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80122c8:	b480      	push	{r7}
 80122ca:	b085      	sub	sp, #20
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	68fa      	ldr	r2, [r7, #12]
 80122dc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	689a      	ldr	r2, [r3, #8]
 80122e2:	683b      	ldr	r3, [r7, #0]
 80122e4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	689b      	ldr	r3, [r3, #8]
 80122ea:	683a      	ldr	r2, [r7, #0]
 80122ec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	683a      	ldr	r2, [r7, #0]
 80122f2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80122f4:	683b      	ldr	r3, [r7, #0]
 80122f6:	687a      	ldr	r2, [r7, #4]
 80122f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	1c5a      	adds	r2, r3, #1
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	601a      	str	r2, [r3, #0]
}
 8012304:	bf00      	nop
 8012306:	3714      	adds	r7, #20
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr

08012310 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012310:	b480      	push	{r7}
 8012312:	b085      	sub	sp, #20
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801231a:	683b      	ldr	r3, [r7, #0]
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012320:	68bb      	ldr	r3, [r7, #8]
 8012322:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012326:	d103      	bne.n	8012330 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	691b      	ldr	r3, [r3, #16]
 801232c:	60fb      	str	r3, [r7, #12]
 801232e:	e00c      	b.n	801234a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	3308      	adds	r3, #8
 8012334:	60fb      	str	r3, [r7, #12]
 8012336:	e002      	b.n	801233e <vListInsert+0x2e>
 8012338:	68fb      	ldr	r3, [r7, #12]
 801233a:	685b      	ldr	r3, [r3, #4]
 801233c:	60fb      	str	r3, [r7, #12]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	68ba      	ldr	r2, [r7, #8]
 8012346:	429a      	cmp	r2, r3
 8012348:	d2f6      	bcs.n	8012338 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	685a      	ldr	r2, [r3, #4]
 801234e:	683b      	ldr	r3, [r7, #0]
 8012350:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012352:	683b      	ldr	r3, [r7, #0]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	683a      	ldr	r2, [r7, #0]
 8012358:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801235a:	683b      	ldr	r3, [r7, #0]
 801235c:	68fa      	ldr	r2, [r7, #12]
 801235e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	683a      	ldr	r2, [r7, #0]
 8012364:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	687a      	ldr	r2, [r7, #4]
 801236a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	1c5a      	adds	r2, r3, #1
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	601a      	str	r2, [r3, #0]
}
 8012376:	bf00      	nop
 8012378:	3714      	adds	r7, #20
 801237a:	46bd      	mov	sp, r7
 801237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012380:	4770      	bx	lr

08012382 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012382:	b480      	push	{r7}
 8012384:	b085      	sub	sp, #20
 8012386:	af00      	add	r7, sp, #0
 8012388:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	691b      	ldr	r3, [r3, #16]
 801238e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	685b      	ldr	r3, [r3, #4]
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	6892      	ldr	r2, [r2, #8]
 8012398:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	689b      	ldr	r3, [r3, #8]
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	6852      	ldr	r2, [r2, #4]
 80123a2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	685b      	ldr	r3, [r3, #4]
 80123a8:	687a      	ldr	r2, [r7, #4]
 80123aa:	429a      	cmp	r2, r3
 80123ac:	d103      	bne.n	80123b6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	689a      	ldr	r2, [r3, #8]
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	2200      	movs	r2, #0
 80123ba:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	1e5a      	subs	r2, r3, #1
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	681b      	ldr	r3, [r3, #0]
}
 80123ca:	4618      	mov	r0, r3
 80123cc:	3714      	adds	r7, #20
 80123ce:	46bd      	mov	sp, r7
 80123d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d4:	4770      	bx	lr

080123d6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80123d6:	b580      	push	{r7, lr}
 80123d8:	b08e      	sub	sp, #56	@ 0x38
 80123da:	af04      	add	r7, sp, #16
 80123dc:	60f8      	str	r0, [r7, #12]
 80123de:	60b9      	str	r1, [r7, #8]
 80123e0:	607a      	str	r2, [r7, #4]
 80123e2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80123e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d10b      	bne.n	8012402 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80123ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123ee:	f383 8811 	msr	BASEPRI, r3
 80123f2:	f3bf 8f6f 	isb	sy
 80123f6:	f3bf 8f4f 	dsb	sy
 80123fa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80123fc:	bf00      	nop
 80123fe:	bf00      	nop
 8012400:	e7fd      	b.n	80123fe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8012402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012404:	2b00      	cmp	r3, #0
 8012406:	d10b      	bne.n	8012420 <xTaskCreateStatic+0x4a>
	__asm volatile
 8012408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801240c:	f383 8811 	msr	BASEPRI, r3
 8012410:	f3bf 8f6f 	isb	sy
 8012414:	f3bf 8f4f 	dsb	sy
 8012418:	61fb      	str	r3, [r7, #28]
}
 801241a:	bf00      	nop
 801241c:	bf00      	nop
 801241e:	e7fd      	b.n	801241c <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012420:	2354      	movs	r3, #84	@ 0x54
 8012422:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	2b54      	cmp	r3, #84	@ 0x54
 8012428:	d00b      	beq.n	8012442 <xTaskCreateStatic+0x6c>
	__asm volatile
 801242a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801242e:	f383 8811 	msr	BASEPRI, r3
 8012432:	f3bf 8f6f 	isb	sy
 8012436:	f3bf 8f4f 	dsb	sy
 801243a:	61bb      	str	r3, [r7, #24]
}
 801243c:	bf00      	nop
 801243e:	bf00      	nop
 8012440:	e7fd      	b.n	801243e <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012442:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012446:	2b00      	cmp	r3, #0
 8012448:	d01e      	beq.n	8012488 <xTaskCreateStatic+0xb2>
 801244a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801244c:	2b00      	cmp	r3, #0
 801244e:	d01b      	beq.n	8012488 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012452:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012456:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012458:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801245a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801245c:	2202      	movs	r2, #2
 801245e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012462:	2300      	movs	r3, #0
 8012464:	9303      	str	r3, [sp, #12]
 8012466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012468:	9302      	str	r3, [sp, #8]
 801246a:	f107 0314 	add.w	r3, r7, #20
 801246e:	9301      	str	r3, [sp, #4]
 8012470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012472:	9300      	str	r3, [sp, #0]
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	687a      	ldr	r2, [r7, #4]
 8012478:	68b9      	ldr	r1, [r7, #8]
 801247a:	68f8      	ldr	r0, [r7, #12]
 801247c:	f000 f850 	bl	8012520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012482:	f000 f8d5 	bl	8012630 <prvAddNewTaskToReadyList>
 8012486:	e001      	b.n	801248c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8012488:	2300      	movs	r3, #0
 801248a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801248c:	697b      	ldr	r3, [r7, #20]
	}
 801248e:	4618      	mov	r0, r3
 8012490:	3728      	adds	r7, #40	@ 0x28
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}

08012496 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012496:	b580      	push	{r7, lr}
 8012498:	b08c      	sub	sp, #48	@ 0x30
 801249a:	af04      	add	r7, sp, #16
 801249c:	60f8      	str	r0, [r7, #12]
 801249e:	60b9      	str	r1, [r7, #8]
 80124a0:	603b      	str	r3, [r7, #0]
 80124a2:	4613      	mov	r3, r2
 80124a4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80124a6:	88fb      	ldrh	r3, [r7, #6]
 80124a8:	009b      	lsls	r3, r3, #2
 80124aa:	4618      	mov	r0, r3
 80124ac:	f000 feec 	bl	8013288 <pvPortMalloc>
 80124b0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80124b2:	697b      	ldr	r3, [r7, #20]
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d00e      	beq.n	80124d6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80124b8:	2054      	movs	r0, #84	@ 0x54
 80124ba:	f000 fee5 	bl	8013288 <pvPortMalloc>
 80124be:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80124c0:	69fb      	ldr	r3, [r7, #28]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d003      	beq.n	80124ce <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80124c6:	69fb      	ldr	r3, [r7, #28]
 80124c8:	697a      	ldr	r2, [r7, #20]
 80124ca:	631a      	str	r2, [r3, #48]	@ 0x30
 80124cc:	e005      	b.n	80124da <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80124ce:	6978      	ldr	r0, [r7, #20]
 80124d0:	f000 ffa8 	bl	8013424 <vPortFree>
 80124d4:	e001      	b.n	80124da <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80124d6:	2300      	movs	r3, #0
 80124d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80124da:	69fb      	ldr	r3, [r7, #28]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d017      	beq.n	8012510 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80124e0:	69fb      	ldr	r3, [r7, #28]
 80124e2:	2200      	movs	r2, #0
 80124e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80124e8:	88fa      	ldrh	r2, [r7, #6]
 80124ea:	2300      	movs	r3, #0
 80124ec:	9303      	str	r3, [sp, #12]
 80124ee:	69fb      	ldr	r3, [r7, #28]
 80124f0:	9302      	str	r3, [sp, #8]
 80124f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f4:	9301      	str	r3, [sp, #4]
 80124f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124f8:	9300      	str	r3, [sp, #0]
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	68b9      	ldr	r1, [r7, #8]
 80124fe:	68f8      	ldr	r0, [r7, #12]
 8012500:	f000 f80e 	bl	8012520 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012504:	69f8      	ldr	r0, [r7, #28]
 8012506:	f000 f893 	bl	8012630 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801250a:	2301      	movs	r3, #1
 801250c:	61bb      	str	r3, [r7, #24]
 801250e:	e002      	b.n	8012516 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012510:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8012514:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012516:	69bb      	ldr	r3, [r7, #24]
	}
 8012518:	4618      	mov	r0, r3
 801251a:	3720      	adds	r7, #32
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}

08012520 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b088      	sub	sp, #32
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
 801252c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801252e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012530:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012532:	6879      	ldr	r1, [r7, #4]
 8012534:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8012538:	440b      	add	r3, r1
 801253a:	009b      	lsls	r3, r3, #2
 801253c:	4413      	add	r3, r2
 801253e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	f023 0307 	bic.w	r3, r3, #7
 8012546:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012548:	69bb      	ldr	r3, [r7, #24]
 801254a:	f003 0307 	and.w	r3, r3, #7
 801254e:	2b00      	cmp	r3, #0
 8012550:	d00b      	beq.n	801256a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8012552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012556:	f383 8811 	msr	BASEPRI, r3
 801255a:	f3bf 8f6f 	isb	sy
 801255e:	f3bf 8f4f 	dsb	sy
 8012562:	617b      	str	r3, [r7, #20]
}
 8012564:	bf00      	nop
 8012566:	bf00      	nop
 8012568:	e7fd      	b.n	8012566 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801256a:	68bb      	ldr	r3, [r7, #8]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d01f      	beq.n	80125b0 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012570:	2300      	movs	r3, #0
 8012572:	61fb      	str	r3, [r7, #28]
 8012574:	e012      	b.n	801259c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012576:	68ba      	ldr	r2, [r7, #8]
 8012578:	69fb      	ldr	r3, [r7, #28]
 801257a:	4413      	add	r3, r2
 801257c:	7819      	ldrb	r1, [r3, #0]
 801257e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012580:	69fb      	ldr	r3, [r7, #28]
 8012582:	4413      	add	r3, r2
 8012584:	3334      	adds	r3, #52	@ 0x34
 8012586:	460a      	mov	r2, r1
 8012588:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801258a:	68ba      	ldr	r2, [r7, #8]
 801258c:	69fb      	ldr	r3, [r7, #28]
 801258e:	4413      	add	r3, r2
 8012590:	781b      	ldrb	r3, [r3, #0]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d006      	beq.n	80125a4 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012596:	69fb      	ldr	r3, [r7, #28]
 8012598:	3301      	adds	r3, #1
 801259a:	61fb      	str	r3, [r7, #28]
 801259c:	69fb      	ldr	r3, [r7, #28]
 801259e:	2b0f      	cmp	r3, #15
 80125a0:	d9e9      	bls.n	8012576 <prvInitialiseNewTask+0x56>
 80125a2:	e000      	b.n	80125a6 <prvInitialiseNewTask+0x86>
			{
				break;
 80125a4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80125a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125a8:	2200      	movs	r2, #0
 80125aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80125ae:	e003      	b.n	80125b8 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80125b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125b2:	2200      	movs	r2, #0
 80125b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80125b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125ba:	2b06      	cmp	r3, #6
 80125bc:	d901      	bls.n	80125c2 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80125be:	2306      	movs	r3, #6
 80125c0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80125c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80125c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80125c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80125cc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80125ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d0:	2200      	movs	r2, #0
 80125d2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80125d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d6:	3304      	adds	r3, #4
 80125d8:	4618      	mov	r0, r3
 80125da:	f7ff fe68 	bl	80122ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80125de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125e0:	3318      	adds	r3, #24
 80125e2:	4618      	mov	r0, r3
 80125e4:	f7ff fe63 	bl	80122ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80125e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80125ec:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125f0:	f1c3 0207 	rsb	r2, r3, #7
 80125f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125f6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80125f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80125fc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80125fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012600:	2200      	movs	r2, #0
 8012602:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012606:	2200      	movs	r2, #0
 8012608:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801260c:	683a      	ldr	r2, [r7, #0]
 801260e:	68f9      	ldr	r1, [r7, #12]
 8012610:	69b8      	ldr	r0, [r7, #24]
 8012612:	f000 fc2b 	bl	8012e6c <pxPortInitialiseStack>
 8012616:	4602      	mov	r2, r0
 8012618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801261a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801261c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801261e:	2b00      	cmp	r3, #0
 8012620:	d002      	beq.n	8012628 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012626:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012628:	bf00      	nop
 801262a:	3720      	adds	r7, #32
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012638:	f000 fd46 	bl	80130c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801263c:	4b2a      	ldr	r3, [pc, #168]	@ (80126e8 <prvAddNewTaskToReadyList+0xb8>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	3301      	adds	r3, #1
 8012642:	4a29      	ldr	r2, [pc, #164]	@ (80126e8 <prvAddNewTaskToReadyList+0xb8>)
 8012644:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012646:	4b29      	ldr	r3, [pc, #164]	@ (80126ec <prvAddNewTaskToReadyList+0xbc>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d109      	bne.n	8012662 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801264e:	4a27      	ldr	r2, [pc, #156]	@ (80126ec <prvAddNewTaskToReadyList+0xbc>)
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012654:	4b24      	ldr	r3, [pc, #144]	@ (80126e8 <prvAddNewTaskToReadyList+0xb8>)
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	2b01      	cmp	r3, #1
 801265a:	d110      	bne.n	801267e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801265c:	f000 fac4 	bl	8012be8 <prvInitialiseTaskLists>
 8012660:	e00d      	b.n	801267e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012662:	4b23      	ldr	r3, [pc, #140]	@ (80126f0 <prvAddNewTaskToReadyList+0xc0>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d109      	bne.n	801267e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801266a:	4b20      	ldr	r3, [pc, #128]	@ (80126ec <prvAddNewTaskToReadyList+0xbc>)
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012674:	429a      	cmp	r2, r3
 8012676:	d802      	bhi.n	801267e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012678:	4a1c      	ldr	r2, [pc, #112]	@ (80126ec <prvAddNewTaskToReadyList+0xbc>)
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801267e:	4b1d      	ldr	r3, [pc, #116]	@ (80126f4 <prvAddNewTaskToReadyList+0xc4>)
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	3301      	adds	r3, #1
 8012684:	4a1b      	ldr	r2, [pc, #108]	@ (80126f4 <prvAddNewTaskToReadyList+0xc4>)
 8012686:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801268c:	2201      	movs	r2, #1
 801268e:	409a      	lsls	r2, r3
 8012690:	4b19      	ldr	r3, [pc, #100]	@ (80126f8 <prvAddNewTaskToReadyList+0xc8>)
 8012692:	681b      	ldr	r3, [r3, #0]
 8012694:	4313      	orrs	r3, r2
 8012696:	4a18      	ldr	r2, [pc, #96]	@ (80126f8 <prvAddNewTaskToReadyList+0xc8>)
 8012698:	6013      	str	r3, [r2, #0]
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801269e:	4613      	mov	r3, r2
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	4413      	add	r3, r2
 80126a4:	009b      	lsls	r3, r3, #2
 80126a6:	4a15      	ldr	r2, [pc, #84]	@ (80126fc <prvAddNewTaskToReadyList+0xcc>)
 80126a8:	441a      	add	r2, r3
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	3304      	adds	r3, #4
 80126ae:	4619      	mov	r1, r3
 80126b0:	4610      	mov	r0, r2
 80126b2:	f7ff fe09 	bl	80122c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80126b6:	f000 fd39 	bl	801312c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80126ba:	4b0d      	ldr	r3, [pc, #52]	@ (80126f0 <prvAddNewTaskToReadyList+0xc0>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d00e      	beq.n	80126e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80126c2:	4b0a      	ldr	r3, [pc, #40]	@ (80126ec <prvAddNewTaskToReadyList+0xbc>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126cc:	429a      	cmp	r2, r3
 80126ce:	d207      	bcs.n	80126e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80126d0:	4b0b      	ldr	r3, [pc, #44]	@ (8012700 <prvAddNewTaskToReadyList+0xd0>)
 80126d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126d6:	601a      	str	r2, [r3, #0]
 80126d8:	f3bf 8f4f 	dsb	sy
 80126dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80126e0:	bf00      	nop
 80126e2:	3708      	adds	r7, #8
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	24001564 	.word	0x24001564
 80126ec:	24001464 	.word	0x24001464
 80126f0:	24001570 	.word	0x24001570
 80126f4:	24001580 	.word	0x24001580
 80126f8:	2400156c 	.word	0x2400156c
 80126fc:	24001468 	.word	0x24001468
 8012700:	e000ed04 	.word	0xe000ed04

08012704 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801270c:	2300      	movs	r3, #0
 801270e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d018      	beq.n	8012748 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012716:	4b14      	ldr	r3, [pc, #80]	@ (8012768 <vTaskDelay+0x64>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d00b      	beq.n	8012736 <vTaskDelay+0x32>
	__asm volatile
 801271e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	60bb      	str	r3, [r7, #8]
}
 8012730:	bf00      	nop
 8012732:	bf00      	nop
 8012734:	e7fd      	b.n	8012732 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012736:	f000 f87d 	bl	8012834 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801273a:	2100      	movs	r1, #0
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 fb2f 	bl	8012da0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012742:	f000 f885 	bl	8012850 <xTaskResumeAll>
 8012746:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d107      	bne.n	801275e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801274e:	4b07      	ldr	r3, [pc, #28]	@ (801276c <vTaskDelay+0x68>)
 8012750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012754:	601a      	str	r2, [r3, #0]
 8012756:	f3bf 8f4f 	dsb	sy
 801275a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801275e:	bf00      	nop
 8012760:	3710      	adds	r7, #16
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}
 8012766:	bf00      	nop
 8012768:	2400158c 	.word	0x2400158c
 801276c:	e000ed04 	.word	0xe000ed04

08012770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b08a      	sub	sp, #40	@ 0x28
 8012774:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012776:	2300      	movs	r3, #0
 8012778:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801277a:	2300      	movs	r3, #0
 801277c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801277e:	463a      	mov	r2, r7
 8012780:	1d39      	adds	r1, r7, #4
 8012782:	f107 0308 	add.w	r3, r7, #8
 8012786:	4618      	mov	r0, r3
 8012788:	f7ee ff3e 	bl	8001608 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801278c:	6839      	ldr	r1, [r7, #0]
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	68ba      	ldr	r2, [r7, #8]
 8012792:	9202      	str	r2, [sp, #8]
 8012794:	9301      	str	r3, [sp, #4]
 8012796:	2300      	movs	r3, #0
 8012798:	9300      	str	r3, [sp, #0]
 801279a:	2300      	movs	r3, #0
 801279c:	460a      	mov	r2, r1
 801279e:	491f      	ldr	r1, [pc, #124]	@ (801281c <vTaskStartScheduler+0xac>)
 80127a0:	481f      	ldr	r0, [pc, #124]	@ (8012820 <vTaskStartScheduler+0xb0>)
 80127a2:	f7ff fe18 	bl	80123d6 <xTaskCreateStatic>
 80127a6:	4603      	mov	r3, r0
 80127a8:	4a1e      	ldr	r2, [pc, #120]	@ (8012824 <vTaskStartScheduler+0xb4>)
 80127aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80127ac:	4b1d      	ldr	r3, [pc, #116]	@ (8012824 <vTaskStartScheduler+0xb4>)
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d002      	beq.n	80127ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80127b4:	2301      	movs	r3, #1
 80127b6:	617b      	str	r3, [r7, #20]
 80127b8:	e001      	b.n	80127be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80127ba:	2300      	movs	r3, #0
 80127bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	2b01      	cmp	r3, #1
 80127c2:	d116      	bne.n	80127f2 <vTaskStartScheduler+0x82>
	__asm volatile
 80127c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127c8:	f383 8811 	msr	BASEPRI, r3
 80127cc:	f3bf 8f6f 	isb	sy
 80127d0:	f3bf 8f4f 	dsb	sy
 80127d4:	613b      	str	r3, [r7, #16]
}
 80127d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80127d8:	4b13      	ldr	r3, [pc, #76]	@ (8012828 <vTaskStartScheduler+0xb8>)
 80127da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80127de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80127e0:	4b12      	ldr	r3, [pc, #72]	@ (801282c <vTaskStartScheduler+0xbc>)
 80127e2:	2201      	movs	r2, #1
 80127e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80127e6:	4b12      	ldr	r3, [pc, #72]	@ (8012830 <vTaskStartScheduler+0xc0>)
 80127e8:	2200      	movs	r2, #0
 80127ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80127ec:	f000 fbc8 	bl	8012f80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80127f0:	e00f      	b.n	8012812 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80127f2:	697b      	ldr	r3, [r7, #20]
 80127f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80127f8:	d10b      	bne.n	8012812 <vTaskStartScheduler+0xa2>
	__asm volatile
 80127fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127fe:	f383 8811 	msr	BASEPRI, r3
 8012802:	f3bf 8f6f 	isb	sy
 8012806:	f3bf 8f4f 	dsb	sy
 801280a:	60fb      	str	r3, [r7, #12]
}
 801280c:	bf00      	nop
 801280e:	bf00      	nop
 8012810:	e7fd      	b.n	801280e <vTaskStartScheduler+0x9e>
}
 8012812:	bf00      	nop
 8012814:	3718      	adds	r7, #24
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}
 801281a:	bf00      	nop
 801281c:	08014290 	.word	0x08014290
 8012820:	08012bb9 	.word	0x08012bb9
 8012824:	24001588 	.word	0x24001588
 8012828:	24001584 	.word	0x24001584
 801282c:	24001570 	.word	0x24001570
 8012830:	24001568 	.word	0x24001568

08012834 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012834:	b480      	push	{r7}
 8012836:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012838:	4b04      	ldr	r3, [pc, #16]	@ (801284c <vTaskSuspendAll+0x18>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	3301      	adds	r3, #1
 801283e:	4a03      	ldr	r2, [pc, #12]	@ (801284c <vTaskSuspendAll+0x18>)
 8012840:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012842:	bf00      	nop
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr
 801284c:	2400158c 	.word	0x2400158c

08012850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b084      	sub	sp, #16
 8012854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012856:	2300      	movs	r3, #0
 8012858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801285a:	2300      	movs	r3, #0
 801285c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801285e:	4b42      	ldr	r3, [pc, #264]	@ (8012968 <xTaskResumeAll+0x118>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d10b      	bne.n	801287e <xTaskResumeAll+0x2e>
	__asm volatile
 8012866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801286a:	f383 8811 	msr	BASEPRI, r3
 801286e:	f3bf 8f6f 	isb	sy
 8012872:	f3bf 8f4f 	dsb	sy
 8012876:	603b      	str	r3, [r7, #0]
}
 8012878:	bf00      	nop
 801287a:	bf00      	nop
 801287c:	e7fd      	b.n	801287a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801287e:	f000 fc23 	bl	80130c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012882:	4b39      	ldr	r3, [pc, #228]	@ (8012968 <xTaskResumeAll+0x118>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	3b01      	subs	r3, #1
 8012888:	4a37      	ldr	r2, [pc, #220]	@ (8012968 <xTaskResumeAll+0x118>)
 801288a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801288c:	4b36      	ldr	r3, [pc, #216]	@ (8012968 <xTaskResumeAll+0x118>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d161      	bne.n	8012958 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012894:	4b35      	ldr	r3, [pc, #212]	@ (801296c <xTaskResumeAll+0x11c>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d05d      	beq.n	8012958 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801289c:	e02e      	b.n	80128fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801289e:	4b34      	ldr	r3, [pc, #208]	@ (8012970 <xTaskResumeAll+0x120>)
 80128a0:	68db      	ldr	r3, [r3, #12]
 80128a2:	68db      	ldr	r3, [r3, #12]
 80128a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	3318      	adds	r3, #24
 80128aa:	4618      	mov	r0, r3
 80128ac:	f7ff fd69 	bl	8012382 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	3304      	adds	r3, #4
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7ff fd64 	bl	8012382 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80128ba:	68fb      	ldr	r3, [r7, #12]
 80128bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128be:	2201      	movs	r2, #1
 80128c0:	409a      	lsls	r2, r3
 80128c2:	4b2c      	ldr	r3, [pc, #176]	@ (8012974 <xTaskResumeAll+0x124>)
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	4313      	orrs	r3, r2
 80128c8:	4a2a      	ldr	r2, [pc, #168]	@ (8012974 <xTaskResumeAll+0x124>)
 80128ca:	6013      	str	r3, [r2, #0]
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128d0:	4613      	mov	r3, r2
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	4413      	add	r3, r2
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	4a27      	ldr	r2, [pc, #156]	@ (8012978 <xTaskResumeAll+0x128>)
 80128da:	441a      	add	r2, r3
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	3304      	adds	r3, #4
 80128e0:	4619      	mov	r1, r3
 80128e2:	4610      	mov	r0, r2
 80128e4:	f7ff fcf0 	bl	80122c8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128e8:	68fb      	ldr	r3, [r7, #12]
 80128ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80128ec:	4b23      	ldr	r3, [pc, #140]	@ (801297c <xTaskResumeAll+0x12c>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d302      	bcc.n	80128fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80128f6:	4b22      	ldr	r3, [pc, #136]	@ (8012980 <xTaskResumeAll+0x130>)
 80128f8:	2201      	movs	r2, #1
 80128fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80128fc:	4b1c      	ldr	r3, [pc, #112]	@ (8012970 <xTaskResumeAll+0x120>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d1cc      	bne.n	801289e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d001      	beq.n	801290e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801290a:	f000 fa0b 	bl	8012d24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801290e:	4b1d      	ldr	r3, [pc, #116]	@ (8012984 <xTaskResumeAll+0x134>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d010      	beq.n	801293c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801291a:	f000 f837 	bl	801298c <xTaskIncrementTick>
 801291e:	4603      	mov	r3, r0
 8012920:	2b00      	cmp	r3, #0
 8012922:	d002      	beq.n	801292a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012924:	4b16      	ldr	r3, [pc, #88]	@ (8012980 <xTaskResumeAll+0x130>)
 8012926:	2201      	movs	r2, #1
 8012928:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	3b01      	subs	r3, #1
 801292e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d1f1      	bne.n	801291a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012936:	4b13      	ldr	r3, [pc, #76]	@ (8012984 <xTaskResumeAll+0x134>)
 8012938:	2200      	movs	r2, #0
 801293a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801293c:	4b10      	ldr	r3, [pc, #64]	@ (8012980 <xTaskResumeAll+0x130>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	2b00      	cmp	r3, #0
 8012942:	d009      	beq.n	8012958 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012944:	2301      	movs	r3, #1
 8012946:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012948:	4b0f      	ldr	r3, [pc, #60]	@ (8012988 <xTaskResumeAll+0x138>)
 801294a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801294e:	601a      	str	r2, [r3, #0]
 8012950:	f3bf 8f4f 	dsb	sy
 8012954:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012958:	f000 fbe8 	bl	801312c <vPortExitCritical>

	return xAlreadyYielded;
 801295c:	68bb      	ldr	r3, [r7, #8]
}
 801295e:	4618      	mov	r0, r3
 8012960:	3710      	adds	r7, #16
 8012962:	46bd      	mov	sp, r7
 8012964:	bd80      	pop	{r7, pc}
 8012966:	bf00      	nop
 8012968:	2400158c 	.word	0x2400158c
 801296c:	24001564 	.word	0x24001564
 8012970:	24001524 	.word	0x24001524
 8012974:	2400156c 	.word	0x2400156c
 8012978:	24001468 	.word	0x24001468
 801297c:	24001464 	.word	0x24001464
 8012980:	24001578 	.word	0x24001578
 8012984:	24001574 	.word	0x24001574
 8012988:	e000ed04 	.word	0xe000ed04

0801298c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b086      	sub	sp, #24
 8012990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012992:	2300      	movs	r3, #0
 8012994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012996:	4b4f      	ldr	r3, [pc, #316]	@ (8012ad4 <xTaskIncrementTick+0x148>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	2b00      	cmp	r3, #0
 801299c:	f040 808f 	bne.w	8012abe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80129a0:	4b4d      	ldr	r3, [pc, #308]	@ (8012ad8 <xTaskIncrementTick+0x14c>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	3301      	adds	r3, #1
 80129a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80129a8:	4a4b      	ldr	r2, [pc, #300]	@ (8012ad8 <xTaskIncrementTick+0x14c>)
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d121      	bne.n	80129f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80129b4:	4b49      	ldr	r3, [pc, #292]	@ (8012adc <xTaskIncrementTick+0x150>)
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d00b      	beq.n	80129d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80129be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129c2:	f383 8811 	msr	BASEPRI, r3
 80129c6:	f3bf 8f6f 	isb	sy
 80129ca:	f3bf 8f4f 	dsb	sy
 80129ce:	603b      	str	r3, [r7, #0]
}
 80129d0:	bf00      	nop
 80129d2:	bf00      	nop
 80129d4:	e7fd      	b.n	80129d2 <xTaskIncrementTick+0x46>
 80129d6:	4b41      	ldr	r3, [pc, #260]	@ (8012adc <xTaskIncrementTick+0x150>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	60fb      	str	r3, [r7, #12]
 80129dc:	4b40      	ldr	r3, [pc, #256]	@ (8012ae0 <xTaskIncrementTick+0x154>)
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	4a3e      	ldr	r2, [pc, #248]	@ (8012adc <xTaskIncrementTick+0x150>)
 80129e2:	6013      	str	r3, [r2, #0]
 80129e4:	4a3e      	ldr	r2, [pc, #248]	@ (8012ae0 <xTaskIncrementTick+0x154>)
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	6013      	str	r3, [r2, #0]
 80129ea:	4b3e      	ldr	r3, [pc, #248]	@ (8012ae4 <xTaskIncrementTick+0x158>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	3301      	adds	r3, #1
 80129f0:	4a3c      	ldr	r2, [pc, #240]	@ (8012ae4 <xTaskIncrementTick+0x158>)
 80129f2:	6013      	str	r3, [r2, #0]
 80129f4:	f000 f996 	bl	8012d24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80129f8:	4b3b      	ldr	r3, [pc, #236]	@ (8012ae8 <xTaskIncrementTick+0x15c>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	693a      	ldr	r2, [r7, #16]
 80129fe:	429a      	cmp	r2, r3
 8012a00:	d348      	bcc.n	8012a94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a02:	4b36      	ldr	r3, [pc, #216]	@ (8012adc <xTaskIncrementTick+0x150>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d104      	bne.n	8012a16 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a0c:	4b36      	ldr	r3, [pc, #216]	@ (8012ae8 <xTaskIncrementTick+0x15c>)
 8012a0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012a12:	601a      	str	r2, [r3, #0]
					break;
 8012a14:	e03e      	b.n	8012a94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a16:	4b31      	ldr	r3, [pc, #196]	@ (8012adc <xTaskIncrementTick+0x150>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	68db      	ldr	r3, [r3, #12]
 8012a1c:	68db      	ldr	r3, [r3, #12]
 8012a1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012a20:	68bb      	ldr	r3, [r7, #8]
 8012a22:	685b      	ldr	r3, [r3, #4]
 8012a24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012a26:	693a      	ldr	r2, [r7, #16]
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	d203      	bcs.n	8012a36 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012a2e:	4a2e      	ldr	r2, [pc, #184]	@ (8012ae8 <xTaskIncrementTick+0x15c>)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012a34:	e02e      	b.n	8012a94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	3304      	adds	r3, #4
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f7ff fca1 	bl	8012382 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a40:	68bb      	ldr	r3, [r7, #8]
 8012a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d004      	beq.n	8012a52 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a48:	68bb      	ldr	r3, [r7, #8]
 8012a4a:	3318      	adds	r3, #24
 8012a4c:	4618      	mov	r0, r3
 8012a4e:	f7ff fc98 	bl	8012382 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a56:	2201      	movs	r2, #1
 8012a58:	409a      	lsls	r2, r3
 8012a5a:	4b24      	ldr	r3, [pc, #144]	@ (8012aec <xTaskIncrementTick+0x160>)
 8012a5c:	681b      	ldr	r3, [r3, #0]
 8012a5e:	4313      	orrs	r3, r2
 8012a60:	4a22      	ldr	r2, [pc, #136]	@ (8012aec <xTaskIncrementTick+0x160>)
 8012a62:	6013      	str	r3, [r2, #0]
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a68:	4613      	mov	r3, r2
 8012a6a:	009b      	lsls	r3, r3, #2
 8012a6c:	4413      	add	r3, r2
 8012a6e:	009b      	lsls	r3, r3, #2
 8012a70:	4a1f      	ldr	r2, [pc, #124]	@ (8012af0 <xTaskIncrementTick+0x164>)
 8012a72:	441a      	add	r2, r3
 8012a74:	68bb      	ldr	r3, [r7, #8]
 8012a76:	3304      	adds	r3, #4
 8012a78:	4619      	mov	r1, r3
 8012a7a:	4610      	mov	r0, r2
 8012a7c:	f7ff fc24 	bl	80122c8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a84:	4b1b      	ldr	r3, [pc, #108]	@ (8012af4 <xTaskIncrementTick+0x168>)
 8012a86:	681b      	ldr	r3, [r3, #0]
 8012a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	d3b9      	bcc.n	8012a02 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012a8e:	2301      	movs	r3, #1
 8012a90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a92:	e7b6      	b.n	8012a02 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012a94:	4b17      	ldr	r3, [pc, #92]	@ (8012af4 <xTaskIncrementTick+0x168>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a9a:	4915      	ldr	r1, [pc, #84]	@ (8012af0 <xTaskIncrementTick+0x164>)
 8012a9c:	4613      	mov	r3, r2
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	4413      	add	r3, r2
 8012aa2:	009b      	lsls	r3, r3, #2
 8012aa4:	440b      	add	r3, r1
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	2b01      	cmp	r3, #1
 8012aaa:	d901      	bls.n	8012ab0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012aac:	2301      	movs	r3, #1
 8012aae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012ab0:	4b11      	ldr	r3, [pc, #68]	@ (8012af8 <xTaskIncrementTick+0x16c>)
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d007      	beq.n	8012ac8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012ab8:	2301      	movs	r3, #1
 8012aba:	617b      	str	r3, [r7, #20]
 8012abc:	e004      	b.n	8012ac8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012abe:	4b0f      	ldr	r3, [pc, #60]	@ (8012afc <xTaskIncrementTick+0x170>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	3301      	adds	r3, #1
 8012ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8012afc <xTaskIncrementTick+0x170>)
 8012ac6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012ac8:	697b      	ldr	r3, [r7, #20]
}
 8012aca:	4618      	mov	r0, r3
 8012acc:	3718      	adds	r7, #24
 8012ace:	46bd      	mov	sp, r7
 8012ad0:	bd80      	pop	{r7, pc}
 8012ad2:	bf00      	nop
 8012ad4:	2400158c 	.word	0x2400158c
 8012ad8:	24001568 	.word	0x24001568
 8012adc:	2400151c 	.word	0x2400151c
 8012ae0:	24001520 	.word	0x24001520
 8012ae4:	2400157c 	.word	0x2400157c
 8012ae8:	24001584 	.word	0x24001584
 8012aec:	2400156c 	.word	0x2400156c
 8012af0:	24001468 	.word	0x24001468
 8012af4:	24001464 	.word	0x24001464
 8012af8:	24001578 	.word	0x24001578
 8012afc:	24001574 	.word	0x24001574

08012b00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012b00:	b480      	push	{r7}
 8012b02:	b087      	sub	sp, #28
 8012b04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012b06:	4b27      	ldr	r3, [pc, #156]	@ (8012ba4 <vTaskSwitchContext+0xa4>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d003      	beq.n	8012b16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012b0e:	4b26      	ldr	r3, [pc, #152]	@ (8012ba8 <vTaskSwitchContext+0xa8>)
 8012b10:	2201      	movs	r2, #1
 8012b12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012b14:	e040      	b.n	8012b98 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012b16:	4b24      	ldr	r3, [pc, #144]	@ (8012ba8 <vTaskSwitchContext+0xa8>)
 8012b18:	2200      	movs	r2, #0
 8012b1a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b1c:	4b23      	ldr	r3, [pc, #140]	@ (8012bac <vTaskSwitchContext+0xac>)
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	fab3 f383 	clz	r3, r3
 8012b28:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012b2a:	7afb      	ldrb	r3, [r7, #11]
 8012b2c:	f1c3 031f 	rsb	r3, r3, #31
 8012b30:	617b      	str	r3, [r7, #20]
 8012b32:	491f      	ldr	r1, [pc, #124]	@ (8012bb0 <vTaskSwitchContext+0xb0>)
 8012b34:	697a      	ldr	r2, [r7, #20]
 8012b36:	4613      	mov	r3, r2
 8012b38:	009b      	lsls	r3, r3, #2
 8012b3a:	4413      	add	r3, r2
 8012b3c:	009b      	lsls	r3, r3, #2
 8012b3e:	440b      	add	r3, r1
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d10b      	bne.n	8012b5e <vTaskSwitchContext+0x5e>
	__asm volatile
 8012b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b4a:	f383 8811 	msr	BASEPRI, r3
 8012b4e:	f3bf 8f6f 	isb	sy
 8012b52:	f3bf 8f4f 	dsb	sy
 8012b56:	607b      	str	r3, [r7, #4]
}
 8012b58:	bf00      	nop
 8012b5a:	bf00      	nop
 8012b5c:	e7fd      	b.n	8012b5a <vTaskSwitchContext+0x5a>
 8012b5e:	697a      	ldr	r2, [r7, #20]
 8012b60:	4613      	mov	r3, r2
 8012b62:	009b      	lsls	r3, r3, #2
 8012b64:	4413      	add	r3, r2
 8012b66:	009b      	lsls	r3, r3, #2
 8012b68:	4a11      	ldr	r2, [pc, #68]	@ (8012bb0 <vTaskSwitchContext+0xb0>)
 8012b6a:	4413      	add	r3, r2
 8012b6c:	613b      	str	r3, [r7, #16]
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	685a      	ldr	r2, [r3, #4]
 8012b74:	693b      	ldr	r3, [r7, #16]
 8012b76:	605a      	str	r2, [r3, #4]
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	685a      	ldr	r2, [r3, #4]
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	3308      	adds	r3, #8
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d104      	bne.n	8012b8e <vTaskSwitchContext+0x8e>
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	685b      	ldr	r3, [r3, #4]
 8012b88:	685a      	ldr	r2, [r3, #4]
 8012b8a:	693b      	ldr	r3, [r7, #16]
 8012b8c:	605a      	str	r2, [r3, #4]
 8012b8e:	693b      	ldr	r3, [r7, #16]
 8012b90:	685b      	ldr	r3, [r3, #4]
 8012b92:	68db      	ldr	r3, [r3, #12]
 8012b94:	4a07      	ldr	r2, [pc, #28]	@ (8012bb4 <vTaskSwitchContext+0xb4>)
 8012b96:	6013      	str	r3, [r2, #0]
}
 8012b98:	bf00      	nop
 8012b9a:	371c      	adds	r7, #28
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba2:	4770      	bx	lr
 8012ba4:	2400158c 	.word	0x2400158c
 8012ba8:	24001578 	.word	0x24001578
 8012bac:	2400156c 	.word	0x2400156c
 8012bb0:	24001468 	.word	0x24001468
 8012bb4:	24001464 	.word	0x24001464

08012bb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b082      	sub	sp, #8
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012bc0:	f000 f852 	bl	8012c68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012bc4:	4b06      	ldr	r3, [pc, #24]	@ (8012be0 <prvIdleTask+0x28>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b01      	cmp	r3, #1
 8012bca:	d9f9      	bls.n	8012bc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012bcc:	4b05      	ldr	r3, [pc, #20]	@ (8012be4 <prvIdleTask+0x2c>)
 8012bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012bd2:	601a      	str	r2, [r3, #0]
 8012bd4:	f3bf 8f4f 	dsb	sy
 8012bd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012bdc:	e7f0      	b.n	8012bc0 <prvIdleTask+0x8>
 8012bde:	bf00      	nop
 8012be0:	24001468 	.word	0x24001468
 8012be4:	e000ed04 	.word	0xe000ed04

08012be8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b082      	sub	sp, #8
 8012bec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012bee:	2300      	movs	r3, #0
 8012bf0:	607b      	str	r3, [r7, #4]
 8012bf2:	e00c      	b.n	8012c0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012bf4:	687a      	ldr	r2, [r7, #4]
 8012bf6:	4613      	mov	r3, r2
 8012bf8:	009b      	lsls	r3, r3, #2
 8012bfa:	4413      	add	r3, r2
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	4a12      	ldr	r2, [pc, #72]	@ (8012c48 <prvInitialiseTaskLists+0x60>)
 8012c00:	4413      	add	r3, r2
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7ff fb33 	bl	801226e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	3301      	adds	r3, #1
 8012c0c:	607b      	str	r3, [r7, #4]
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	2b06      	cmp	r3, #6
 8012c12:	d9ef      	bls.n	8012bf4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012c14:	480d      	ldr	r0, [pc, #52]	@ (8012c4c <prvInitialiseTaskLists+0x64>)
 8012c16:	f7ff fb2a 	bl	801226e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012c1a:	480d      	ldr	r0, [pc, #52]	@ (8012c50 <prvInitialiseTaskLists+0x68>)
 8012c1c:	f7ff fb27 	bl	801226e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012c20:	480c      	ldr	r0, [pc, #48]	@ (8012c54 <prvInitialiseTaskLists+0x6c>)
 8012c22:	f7ff fb24 	bl	801226e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012c26:	480c      	ldr	r0, [pc, #48]	@ (8012c58 <prvInitialiseTaskLists+0x70>)
 8012c28:	f7ff fb21 	bl	801226e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012c2c:	480b      	ldr	r0, [pc, #44]	@ (8012c5c <prvInitialiseTaskLists+0x74>)
 8012c2e:	f7ff fb1e 	bl	801226e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012c32:	4b0b      	ldr	r3, [pc, #44]	@ (8012c60 <prvInitialiseTaskLists+0x78>)
 8012c34:	4a05      	ldr	r2, [pc, #20]	@ (8012c4c <prvInitialiseTaskLists+0x64>)
 8012c36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012c38:	4b0a      	ldr	r3, [pc, #40]	@ (8012c64 <prvInitialiseTaskLists+0x7c>)
 8012c3a:	4a05      	ldr	r2, [pc, #20]	@ (8012c50 <prvInitialiseTaskLists+0x68>)
 8012c3c:	601a      	str	r2, [r3, #0]
}
 8012c3e:	bf00      	nop
 8012c40:	3708      	adds	r7, #8
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
 8012c46:	bf00      	nop
 8012c48:	24001468 	.word	0x24001468
 8012c4c:	240014f4 	.word	0x240014f4
 8012c50:	24001508 	.word	0x24001508
 8012c54:	24001524 	.word	0x24001524
 8012c58:	24001538 	.word	0x24001538
 8012c5c:	24001550 	.word	0x24001550
 8012c60:	2400151c 	.word	0x2400151c
 8012c64:	24001520 	.word	0x24001520

08012c68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012c6e:	e019      	b.n	8012ca4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012c70:	f000 fa2a 	bl	80130c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c74:	4b10      	ldr	r3, [pc, #64]	@ (8012cb8 <prvCheckTasksWaitingTermination+0x50>)
 8012c76:	68db      	ldr	r3, [r3, #12]
 8012c78:	68db      	ldr	r3, [r3, #12]
 8012c7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	3304      	adds	r3, #4
 8012c80:	4618      	mov	r0, r3
 8012c82:	f7ff fb7e 	bl	8012382 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012c86:	4b0d      	ldr	r3, [pc, #52]	@ (8012cbc <prvCheckTasksWaitingTermination+0x54>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	3b01      	subs	r3, #1
 8012c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8012cbc <prvCheckTasksWaitingTermination+0x54>)
 8012c8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012c90:	4b0b      	ldr	r3, [pc, #44]	@ (8012cc0 <prvCheckTasksWaitingTermination+0x58>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	3b01      	subs	r3, #1
 8012c96:	4a0a      	ldr	r2, [pc, #40]	@ (8012cc0 <prvCheckTasksWaitingTermination+0x58>)
 8012c98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012c9a:	f000 fa47 	bl	801312c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012c9e:	6878      	ldr	r0, [r7, #4]
 8012ca0:	f000 f810 	bl	8012cc4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ca4:	4b06      	ldr	r3, [pc, #24]	@ (8012cc0 <prvCheckTasksWaitingTermination+0x58>)
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d1e1      	bne.n	8012c70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012cac:	bf00      	nop
 8012cae:	bf00      	nop
 8012cb0:	3708      	adds	r7, #8
 8012cb2:	46bd      	mov	sp, r7
 8012cb4:	bd80      	pop	{r7, pc}
 8012cb6:	bf00      	nop
 8012cb8:	24001538 	.word	0x24001538
 8012cbc:	24001564 	.word	0x24001564
 8012cc0:	2400154c 	.word	0x2400154c

08012cc4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012cc4:	b580      	push	{r7, lr}
 8012cc6:	b084      	sub	sp, #16
 8012cc8:	af00      	add	r7, sp, #0
 8012cca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d108      	bne.n	8012ce8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f000 fba2 	bl	8013424 <vPortFree>
				vPortFree( pxTCB );
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f000 fb9f 	bl	8013424 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012ce6:	e019      	b.n	8012d1c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012cee:	2b01      	cmp	r3, #1
 8012cf0:	d103      	bne.n	8012cfa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f000 fb96 	bl	8013424 <vPortFree>
	}
 8012cf8:	e010      	b.n	8012d1c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8012d00:	2b02      	cmp	r3, #2
 8012d02:	d00b      	beq.n	8012d1c <prvDeleteTCB+0x58>
	__asm volatile
 8012d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d08:	f383 8811 	msr	BASEPRI, r3
 8012d0c:	f3bf 8f6f 	isb	sy
 8012d10:	f3bf 8f4f 	dsb	sy
 8012d14:	60fb      	str	r3, [r7, #12]
}
 8012d16:	bf00      	nop
 8012d18:	bf00      	nop
 8012d1a:	e7fd      	b.n	8012d18 <prvDeleteTCB+0x54>
	}
 8012d1c:	bf00      	nop
 8012d1e:	3710      	adds	r7, #16
 8012d20:	46bd      	mov	sp, r7
 8012d22:	bd80      	pop	{r7, pc}

08012d24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012d24:	b480      	push	{r7}
 8012d26:	b083      	sub	sp, #12
 8012d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8012d5c <prvResetNextTaskUnblockTime+0x38>)
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d104      	bne.n	8012d3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012d34:	4b0a      	ldr	r3, [pc, #40]	@ (8012d60 <prvResetNextTaskUnblockTime+0x3c>)
 8012d36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012d3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012d3c:	e008      	b.n	8012d50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d3e:	4b07      	ldr	r3, [pc, #28]	@ (8012d5c <prvResetNextTaskUnblockTime+0x38>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	68db      	ldr	r3, [r3, #12]
 8012d44:	68db      	ldr	r3, [r3, #12]
 8012d46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	4a04      	ldr	r2, [pc, #16]	@ (8012d60 <prvResetNextTaskUnblockTime+0x3c>)
 8012d4e:	6013      	str	r3, [r2, #0]
}
 8012d50:	bf00      	nop
 8012d52:	370c      	adds	r7, #12
 8012d54:	46bd      	mov	sp, r7
 8012d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d5a:	4770      	bx	lr
 8012d5c:	2400151c 	.word	0x2400151c
 8012d60:	24001584 	.word	0x24001584

08012d64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012d64:	b480      	push	{r7}
 8012d66:	b083      	sub	sp, #12
 8012d68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8012d98 <xTaskGetSchedulerState+0x34>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d102      	bne.n	8012d78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012d72:	2301      	movs	r3, #1
 8012d74:	607b      	str	r3, [r7, #4]
 8012d76:	e008      	b.n	8012d8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d78:	4b08      	ldr	r3, [pc, #32]	@ (8012d9c <xTaskGetSchedulerState+0x38>)
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d102      	bne.n	8012d86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012d80:	2302      	movs	r3, #2
 8012d82:	607b      	str	r3, [r7, #4]
 8012d84:	e001      	b.n	8012d8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012d86:	2300      	movs	r3, #0
 8012d88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012d8a:	687b      	ldr	r3, [r7, #4]
	}
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	370c      	adds	r7, #12
 8012d90:	46bd      	mov	sp, r7
 8012d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d96:	4770      	bx	lr
 8012d98:	24001570 	.word	0x24001570
 8012d9c:	2400158c 	.word	0x2400158c

08012da0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b084      	sub	sp, #16
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
 8012da8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012daa:	4b29      	ldr	r3, [pc, #164]	@ (8012e50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012db0:	4b28      	ldr	r3, [pc, #160]	@ (8012e54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	3304      	adds	r3, #4
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7ff fae3 	bl	8012382 <uxListRemove>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d10b      	bne.n	8012dda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012dc2:	4b24      	ldr	r3, [pc, #144]	@ (8012e54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012dc8:	2201      	movs	r2, #1
 8012dca:	fa02 f303 	lsl.w	r3, r2, r3
 8012dce:	43da      	mvns	r2, r3
 8012dd0:	4b21      	ldr	r3, [pc, #132]	@ (8012e58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4013      	ands	r3, r2
 8012dd6:	4a20      	ldr	r2, [pc, #128]	@ (8012e58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012dd8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012de0:	d10a      	bne.n	8012df8 <prvAddCurrentTaskToDelayedList+0x58>
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d007      	beq.n	8012df8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012de8:	4b1a      	ldr	r3, [pc, #104]	@ (8012e54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	3304      	adds	r3, #4
 8012dee:	4619      	mov	r1, r3
 8012df0:	481a      	ldr	r0, [pc, #104]	@ (8012e5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8012df2:	f7ff fa69 	bl	80122c8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012df6:	e026      	b.n	8012e46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012df8:	68fa      	ldr	r2, [r7, #12]
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012e00:	4b14      	ldr	r3, [pc, #80]	@ (8012e54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	68ba      	ldr	r2, [r7, #8]
 8012e06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012e08:	68ba      	ldr	r2, [r7, #8]
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	429a      	cmp	r2, r3
 8012e0e:	d209      	bcs.n	8012e24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e10:	4b13      	ldr	r3, [pc, #76]	@ (8012e60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012e12:	681a      	ldr	r2, [r3, #0]
 8012e14:	4b0f      	ldr	r3, [pc, #60]	@ (8012e54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	3304      	adds	r3, #4
 8012e1a:	4619      	mov	r1, r3
 8012e1c:	4610      	mov	r0, r2
 8012e1e:	f7ff fa77 	bl	8012310 <vListInsert>
}
 8012e22:	e010      	b.n	8012e46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012e24:	4b0f      	ldr	r3, [pc, #60]	@ (8012e64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012e26:	681a      	ldr	r2, [r3, #0]
 8012e28:	4b0a      	ldr	r3, [pc, #40]	@ (8012e54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	3304      	adds	r3, #4
 8012e2e:	4619      	mov	r1, r3
 8012e30:	4610      	mov	r0, r2
 8012e32:	f7ff fa6d 	bl	8012310 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012e36:	4b0c      	ldr	r3, [pc, #48]	@ (8012e68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	68ba      	ldr	r2, [r7, #8]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d202      	bcs.n	8012e46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012e40:	4a09      	ldr	r2, [pc, #36]	@ (8012e68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	6013      	str	r3, [r2, #0]
}
 8012e46:	bf00      	nop
 8012e48:	3710      	adds	r7, #16
 8012e4a:	46bd      	mov	sp, r7
 8012e4c:	bd80      	pop	{r7, pc}
 8012e4e:	bf00      	nop
 8012e50:	24001568 	.word	0x24001568
 8012e54:	24001464 	.word	0x24001464
 8012e58:	2400156c 	.word	0x2400156c
 8012e5c:	24001550 	.word	0x24001550
 8012e60:	24001520 	.word	0x24001520
 8012e64:	2400151c 	.word	0x2400151c
 8012e68:	24001584 	.word	0x24001584

08012e6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b085      	sub	sp, #20
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012e78:	68fb      	ldr	r3, [r7, #12]
 8012e7a:	3b04      	subs	r3, #4
 8012e7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012e84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	3b04      	subs	r3, #4
 8012e8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	f023 0201 	bic.w	r2, r3, #1
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	3b04      	subs	r3, #4
 8012e9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8012ed0 <pxPortInitialiseStack+0x64>)
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	3b14      	subs	r3, #20
 8012ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012ea8:	687a      	ldr	r2, [r7, #4]
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	3b04      	subs	r3, #4
 8012eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	f06f 0202 	mvn.w	r2, #2
 8012eba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	3b20      	subs	r3, #32
 8012ec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3714      	adds	r7, #20
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ece:	4770      	bx	lr
 8012ed0:	08012ed5 	.word	0x08012ed5

08012ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b085      	sub	sp, #20
 8012ed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012eda:	2300      	movs	r3, #0
 8012edc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012ede:	4b13      	ldr	r3, [pc, #76]	@ (8012f2c <prvTaskExitError+0x58>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8012ee6:	d00b      	beq.n	8012f00 <prvTaskExitError+0x2c>
	__asm volatile
 8012ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012eec:	f383 8811 	msr	BASEPRI, r3
 8012ef0:	f3bf 8f6f 	isb	sy
 8012ef4:	f3bf 8f4f 	dsb	sy
 8012ef8:	60fb      	str	r3, [r7, #12]
}
 8012efa:	bf00      	nop
 8012efc:	bf00      	nop
 8012efe:	e7fd      	b.n	8012efc <prvTaskExitError+0x28>
	__asm volatile
 8012f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f04:	f383 8811 	msr	BASEPRI, r3
 8012f08:	f3bf 8f6f 	isb	sy
 8012f0c:	f3bf 8f4f 	dsb	sy
 8012f10:	60bb      	str	r3, [r7, #8]
}
 8012f12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012f14:	bf00      	nop
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	d0fc      	beq.n	8012f16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012f1c:	bf00      	nop
 8012f1e:	bf00      	nop
 8012f20:	3714      	adds	r7, #20
 8012f22:	46bd      	mov	sp, r7
 8012f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f28:	4770      	bx	lr
 8012f2a:	bf00      	nop
 8012f2c:	24000010 	.word	0x24000010

08012f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012f30:	4b07      	ldr	r3, [pc, #28]	@ (8012f50 <pxCurrentTCBConst2>)
 8012f32:	6819      	ldr	r1, [r3, #0]
 8012f34:	6808      	ldr	r0, [r1, #0]
 8012f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f3a:	f380 8809 	msr	PSP, r0
 8012f3e:	f3bf 8f6f 	isb	sy
 8012f42:	f04f 0000 	mov.w	r0, #0
 8012f46:	f380 8811 	msr	BASEPRI, r0
 8012f4a:	4770      	bx	lr
 8012f4c:	f3af 8000 	nop.w

08012f50 <pxCurrentTCBConst2>:
 8012f50:	24001464 	.word	0x24001464
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012f54:	bf00      	nop
 8012f56:	bf00      	nop

08012f58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012f58:	4808      	ldr	r0, [pc, #32]	@ (8012f7c <prvPortStartFirstTask+0x24>)
 8012f5a:	6800      	ldr	r0, [r0, #0]
 8012f5c:	6800      	ldr	r0, [r0, #0]
 8012f5e:	f380 8808 	msr	MSP, r0
 8012f62:	f04f 0000 	mov.w	r0, #0
 8012f66:	f380 8814 	msr	CONTROL, r0
 8012f6a:	b662      	cpsie	i
 8012f6c:	b661      	cpsie	f
 8012f6e:	f3bf 8f4f 	dsb	sy
 8012f72:	f3bf 8f6f 	isb	sy
 8012f76:	df00      	svc	0
 8012f78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012f7a:	bf00      	nop
 8012f7c:	e000ed08 	.word	0xe000ed08

08012f80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b086      	sub	sp, #24
 8012f84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012f86:	4b47      	ldr	r3, [pc, #284]	@ (80130a4 <xPortStartScheduler+0x124>)
 8012f88:	681b      	ldr	r3, [r3, #0]
 8012f8a:	4a47      	ldr	r2, [pc, #284]	@ (80130a8 <xPortStartScheduler+0x128>)
 8012f8c:	4293      	cmp	r3, r2
 8012f8e:	d10b      	bne.n	8012fa8 <xPortStartScheduler+0x28>
	__asm volatile
 8012f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012f94:	f383 8811 	msr	BASEPRI, r3
 8012f98:	f3bf 8f6f 	isb	sy
 8012f9c:	f3bf 8f4f 	dsb	sy
 8012fa0:	60fb      	str	r3, [r7, #12]
}
 8012fa2:	bf00      	nop
 8012fa4:	bf00      	nop
 8012fa6:	e7fd      	b.n	8012fa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012fa8:	4b3e      	ldr	r3, [pc, #248]	@ (80130a4 <xPortStartScheduler+0x124>)
 8012faa:	681b      	ldr	r3, [r3, #0]
 8012fac:	4a3f      	ldr	r2, [pc, #252]	@ (80130ac <xPortStartScheduler+0x12c>)
 8012fae:	4293      	cmp	r3, r2
 8012fb0:	d10b      	bne.n	8012fca <xPortStartScheduler+0x4a>
	__asm volatile
 8012fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012fb6:	f383 8811 	msr	BASEPRI, r3
 8012fba:	f3bf 8f6f 	isb	sy
 8012fbe:	f3bf 8f4f 	dsb	sy
 8012fc2:	613b      	str	r3, [r7, #16]
}
 8012fc4:	bf00      	nop
 8012fc6:	bf00      	nop
 8012fc8:	e7fd      	b.n	8012fc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012fca:	4b39      	ldr	r3, [pc, #228]	@ (80130b0 <xPortStartScheduler+0x130>)
 8012fcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	781b      	ldrb	r3, [r3, #0]
 8012fd2:	b2db      	uxtb	r3, r3
 8012fd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	22ff      	movs	r2, #255	@ 0xff
 8012fda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012fdc:	697b      	ldr	r3, [r7, #20]
 8012fde:	781b      	ldrb	r3, [r3, #0]
 8012fe0:	b2db      	uxtb	r3, r3
 8012fe2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012fe4:	78fb      	ldrb	r3, [r7, #3]
 8012fe6:	b2db      	uxtb	r3, r3
 8012fe8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012fec:	b2da      	uxtb	r2, r3
 8012fee:	4b31      	ldr	r3, [pc, #196]	@ (80130b4 <xPortStartScheduler+0x134>)
 8012ff0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012ff2:	4b31      	ldr	r3, [pc, #196]	@ (80130b8 <xPortStartScheduler+0x138>)
 8012ff4:	2207      	movs	r2, #7
 8012ff6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012ff8:	e009      	b.n	801300e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8012ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80130b8 <xPortStartScheduler+0x138>)
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	3b01      	subs	r3, #1
 8013000:	4a2d      	ldr	r2, [pc, #180]	@ (80130b8 <xPortStartScheduler+0x138>)
 8013002:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013004:	78fb      	ldrb	r3, [r7, #3]
 8013006:	b2db      	uxtb	r3, r3
 8013008:	005b      	lsls	r3, r3, #1
 801300a:	b2db      	uxtb	r3, r3
 801300c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801300e:	78fb      	ldrb	r3, [r7, #3]
 8013010:	b2db      	uxtb	r3, r3
 8013012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013016:	2b80      	cmp	r3, #128	@ 0x80
 8013018:	d0ef      	beq.n	8012ffa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801301a:	4b27      	ldr	r3, [pc, #156]	@ (80130b8 <xPortStartScheduler+0x138>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	f1c3 0307 	rsb	r3, r3, #7
 8013022:	2b04      	cmp	r3, #4
 8013024:	d00b      	beq.n	801303e <xPortStartScheduler+0xbe>
	__asm volatile
 8013026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801302a:	f383 8811 	msr	BASEPRI, r3
 801302e:	f3bf 8f6f 	isb	sy
 8013032:	f3bf 8f4f 	dsb	sy
 8013036:	60bb      	str	r3, [r7, #8]
}
 8013038:	bf00      	nop
 801303a:	bf00      	nop
 801303c:	e7fd      	b.n	801303a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801303e:	4b1e      	ldr	r3, [pc, #120]	@ (80130b8 <xPortStartScheduler+0x138>)
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	021b      	lsls	r3, r3, #8
 8013044:	4a1c      	ldr	r2, [pc, #112]	@ (80130b8 <xPortStartScheduler+0x138>)
 8013046:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013048:	4b1b      	ldr	r3, [pc, #108]	@ (80130b8 <xPortStartScheduler+0x138>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013050:	4a19      	ldr	r2, [pc, #100]	@ (80130b8 <xPortStartScheduler+0x138>)
 8013052:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	b2da      	uxtb	r2, r3
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801305c:	4b17      	ldr	r3, [pc, #92]	@ (80130bc <xPortStartScheduler+0x13c>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4a16      	ldr	r2, [pc, #88]	@ (80130bc <xPortStartScheduler+0x13c>)
 8013062:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013066:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013068:	4b14      	ldr	r3, [pc, #80]	@ (80130bc <xPortStartScheduler+0x13c>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	4a13      	ldr	r2, [pc, #76]	@ (80130bc <xPortStartScheduler+0x13c>)
 801306e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013072:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013074:	f000 f8da 	bl	801322c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013078:	4b11      	ldr	r3, [pc, #68]	@ (80130c0 <xPortStartScheduler+0x140>)
 801307a:	2200      	movs	r2, #0
 801307c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801307e:	f000 f8f9 	bl	8013274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013082:	4b10      	ldr	r3, [pc, #64]	@ (80130c4 <xPortStartScheduler+0x144>)
 8013084:	681b      	ldr	r3, [r3, #0]
 8013086:	4a0f      	ldr	r2, [pc, #60]	@ (80130c4 <xPortStartScheduler+0x144>)
 8013088:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801308c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801308e:	f7ff ff63 	bl	8012f58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013092:	f7ff fd35 	bl	8012b00 <vTaskSwitchContext>
	prvTaskExitError();
 8013096:	f7ff ff1d 	bl	8012ed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801309a:	2300      	movs	r3, #0
}
 801309c:	4618      	mov	r0, r3
 801309e:	3718      	adds	r7, #24
 80130a0:	46bd      	mov	sp, r7
 80130a2:	bd80      	pop	{r7, pc}
 80130a4:	e000ed00 	.word	0xe000ed00
 80130a8:	410fc271 	.word	0x410fc271
 80130ac:	410fc270 	.word	0x410fc270
 80130b0:	e000e400 	.word	0xe000e400
 80130b4:	24001590 	.word	0x24001590
 80130b8:	24001594 	.word	0x24001594
 80130bc:	e000ed20 	.word	0xe000ed20
 80130c0:	24000010 	.word	0x24000010
 80130c4:	e000ef34 	.word	0xe000ef34

080130c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80130c8:	b480      	push	{r7}
 80130ca:	b083      	sub	sp, #12
 80130cc:	af00      	add	r7, sp, #0
	__asm volatile
 80130ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80130d2:	f383 8811 	msr	BASEPRI, r3
 80130d6:	f3bf 8f6f 	isb	sy
 80130da:	f3bf 8f4f 	dsb	sy
 80130de:	607b      	str	r3, [r7, #4]
}
 80130e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80130e2:	4b10      	ldr	r3, [pc, #64]	@ (8013124 <vPortEnterCritical+0x5c>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	3301      	adds	r3, #1
 80130e8:	4a0e      	ldr	r2, [pc, #56]	@ (8013124 <vPortEnterCritical+0x5c>)
 80130ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80130ec:	4b0d      	ldr	r3, [pc, #52]	@ (8013124 <vPortEnterCritical+0x5c>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	2b01      	cmp	r3, #1
 80130f2:	d110      	bne.n	8013116 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80130f4:	4b0c      	ldr	r3, [pc, #48]	@ (8013128 <vPortEnterCritical+0x60>)
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d00b      	beq.n	8013116 <vPortEnterCritical+0x4e>
	__asm volatile
 80130fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013102:	f383 8811 	msr	BASEPRI, r3
 8013106:	f3bf 8f6f 	isb	sy
 801310a:	f3bf 8f4f 	dsb	sy
 801310e:	603b      	str	r3, [r7, #0]
}
 8013110:	bf00      	nop
 8013112:	bf00      	nop
 8013114:	e7fd      	b.n	8013112 <vPortEnterCritical+0x4a>
	}
}
 8013116:	bf00      	nop
 8013118:	370c      	adds	r7, #12
 801311a:	46bd      	mov	sp, r7
 801311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013120:	4770      	bx	lr
 8013122:	bf00      	nop
 8013124:	24000010 	.word	0x24000010
 8013128:	e000ed04 	.word	0xe000ed04

0801312c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801312c:	b480      	push	{r7}
 801312e:	b083      	sub	sp, #12
 8013130:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013132:	4b12      	ldr	r3, [pc, #72]	@ (801317c <vPortExitCritical+0x50>)
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d10b      	bne.n	8013152 <vPortExitCritical+0x26>
	__asm volatile
 801313a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801313e:	f383 8811 	msr	BASEPRI, r3
 8013142:	f3bf 8f6f 	isb	sy
 8013146:	f3bf 8f4f 	dsb	sy
 801314a:	607b      	str	r3, [r7, #4]
}
 801314c:	bf00      	nop
 801314e:	bf00      	nop
 8013150:	e7fd      	b.n	801314e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013152:	4b0a      	ldr	r3, [pc, #40]	@ (801317c <vPortExitCritical+0x50>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	3b01      	subs	r3, #1
 8013158:	4a08      	ldr	r2, [pc, #32]	@ (801317c <vPortExitCritical+0x50>)
 801315a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801315c:	4b07      	ldr	r3, [pc, #28]	@ (801317c <vPortExitCritical+0x50>)
 801315e:	681b      	ldr	r3, [r3, #0]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d105      	bne.n	8013170 <vPortExitCritical+0x44>
 8013164:	2300      	movs	r3, #0
 8013166:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013168:	683b      	ldr	r3, [r7, #0]
 801316a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801316e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013170:	bf00      	nop
 8013172:	370c      	adds	r7, #12
 8013174:	46bd      	mov	sp, r7
 8013176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317a:	4770      	bx	lr
 801317c:	24000010 	.word	0x24000010

08013180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013180:	f3ef 8009 	mrs	r0, PSP
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	4b15      	ldr	r3, [pc, #84]	@ (80131e0 <pxCurrentTCBConst>)
 801318a:	681a      	ldr	r2, [r3, #0]
 801318c:	f01e 0f10 	tst.w	lr, #16
 8013190:	bf08      	it	eq
 8013192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801319a:	6010      	str	r0, [r2, #0]
 801319c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80131a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80131a4:	f380 8811 	msr	BASEPRI, r0
 80131a8:	f3bf 8f4f 	dsb	sy
 80131ac:	f3bf 8f6f 	isb	sy
 80131b0:	f7ff fca6 	bl	8012b00 <vTaskSwitchContext>
 80131b4:	f04f 0000 	mov.w	r0, #0
 80131b8:	f380 8811 	msr	BASEPRI, r0
 80131bc:	bc09      	pop	{r0, r3}
 80131be:	6819      	ldr	r1, [r3, #0]
 80131c0:	6808      	ldr	r0, [r1, #0]
 80131c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131c6:	f01e 0f10 	tst.w	lr, #16
 80131ca:	bf08      	it	eq
 80131cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80131d0:	f380 8809 	msr	PSP, r0
 80131d4:	f3bf 8f6f 	isb	sy
 80131d8:	4770      	bx	lr
 80131da:	bf00      	nop
 80131dc:	f3af 8000 	nop.w

080131e0 <pxCurrentTCBConst>:
 80131e0:	24001464 	.word	0x24001464
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80131e4:	bf00      	nop
 80131e6:	bf00      	nop

080131e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
	__asm volatile
 80131ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80131f2:	f383 8811 	msr	BASEPRI, r3
 80131f6:	f3bf 8f6f 	isb	sy
 80131fa:	f3bf 8f4f 	dsb	sy
 80131fe:	607b      	str	r3, [r7, #4]
}
 8013200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013202:	f7ff fbc3 	bl	801298c <xTaskIncrementTick>
 8013206:	4603      	mov	r3, r0
 8013208:	2b00      	cmp	r3, #0
 801320a:	d003      	beq.n	8013214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801320c:	4b06      	ldr	r3, [pc, #24]	@ (8013228 <xPortSysTickHandler+0x40>)
 801320e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013212:	601a      	str	r2, [r3, #0]
 8013214:	2300      	movs	r3, #0
 8013216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	f383 8811 	msr	BASEPRI, r3
}
 801321e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013220:	bf00      	nop
 8013222:	3708      	adds	r7, #8
 8013224:	46bd      	mov	sp, r7
 8013226:	bd80      	pop	{r7, pc}
 8013228:	e000ed04 	.word	0xe000ed04

0801322c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801322c:	b480      	push	{r7}
 801322e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013230:	4b0b      	ldr	r3, [pc, #44]	@ (8013260 <vPortSetupTimerInterrupt+0x34>)
 8013232:	2200      	movs	r2, #0
 8013234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013236:	4b0b      	ldr	r3, [pc, #44]	@ (8013264 <vPortSetupTimerInterrupt+0x38>)
 8013238:	2200      	movs	r2, #0
 801323a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801323c:	4b0a      	ldr	r3, [pc, #40]	@ (8013268 <vPortSetupTimerInterrupt+0x3c>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	4a0a      	ldr	r2, [pc, #40]	@ (801326c <vPortSetupTimerInterrupt+0x40>)
 8013242:	fba2 2303 	umull	r2, r3, r2, r3
 8013246:	099b      	lsrs	r3, r3, #6
 8013248:	4a09      	ldr	r2, [pc, #36]	@ (8013270 <vPortSetupTimerInterrupt+0x44>)
 801324a:	3b01      	subs	r3, #1
 801324c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801324e:	4b04      	ldr	r3, [pc, #16]	@ (8013260 <vPortSetupTimerInterrupt+0x34>)
 8013250:	2207      	movs	r2, #7
 8013252:	601a      	str	r2, [r3, #0]
}
 8013254:	bf00      	nop
 8013256:	46bd      	mov	sp, r7
 8013258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325c:	4770      	bx	lr
 801325e:	bf00      	nop
 8013260:	e000e010 	.word	0xe000e010
 8013264:	e000e018 	.word	0xe000e018
 8013268:	24000000 	.word	0x24000000
 801326c:	10624dd3 	.word	0x10624dd3
 8013270:	e000e014 	.word	0xe000e014

08013274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013274:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8013284 <vPortEnableVFP+0x10>
 8013278:	6801      	ldr	r1, [r0, #0]
 801327a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801327e:	6001      	str	r1, [r0, #0]
 8013280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013282:	bf00      	nop
 8013284:	e000ed88 	.word	0xe000ed88

08013288 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013288:	b580      	push	{r7, lr}
 801328a:	b08a      	sub	sp, #40	@ 0x28
 801328c:	af00      	add	r7, sp, #0
 801328e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013290:	2300      	movs	r3, #0
 8013292:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013294:	f7ff face 	bl	8012834 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013298:	4b5c      	ldr	r3, [pc, #368]	@ (801340c <pvPortMalloc+0x184>)
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d101      	bne.n	80132a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80132a0:	f000 f924 	bl	80134ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80132a4:	4b5a      	ldr	r3, [pc, #360]	@ (8013410 <pvPortMalloc+0x188>)
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	4013      	ands	r3, r2
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	f040 8095 	bne.w	80133dc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d01e      	beq.n	80132f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80132b8:	2208      	movs	r2, #8
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	4413      	add	r3, r2
 80132be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f003 0307 	and.w	r3, r3, #7
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d015      	beq.n	80132f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	f023 0307 	bic.w	r3, r3, #7
 80132d0:	3308      	adds	r3, #8
 80132d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	f003 0307 	and.w	r3, r3, #7
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00b      	beq.n	80132f6 <pvPortMalloc+0x6e>
	__asm volatile
 80132de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80132e2:	f383 8811 	msr	BASEPRI, r3
 80132e6:	f3bf 8f6f 	isb	sy
 80132ea:	f3bf 8f4f 	dsb	sy
 80132ee:	617b      	str	r3, [r7, #20]
}
 80132f0:	bf00      	nop
 80132f2:	bf00      	nop
 80132f4:	e7fd      	b.n	80132f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d06f      	beq.n	80133dc <pvPortMalloc+0x154>
 80132fc:	4b45      	ldr	r3, [pc, #276]	@ (8013414 <pvPortMalloc+0x18c>)
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	687a      	ldr	r2, [r7, #4]
 8013302:	429a      	cmp	r2, r3
 8013304:	d86a      	bhi.n	80133dc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013306:	4b44      	ldr	r3, [pc, #272]	@ (8013418 <pvPortMalloc+0x190>)
 8013308:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801330a:	4b43      	ldr	r3, [pc, #268]	@ (8013418 <pvPortMalloc+0x190>)
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013310:	e004      	b.n	801331c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8013312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013314:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801331c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	687a      	ldr	r2, [r7, #4]
 8013322:	429a      	cmp	r2, r3
 8013324:	d903      	bls.n	801332e <pvPortMalloc+0xa6>
 8013326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	2b00      	cmp	r3, #0
 801332c:	d1f1      	bne.n	8013312 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801332e:	4b37      	ldr	r3, [pc, #220]	@ (801340c <pvPortMalloc+0x184>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013334:	429a      	cmp	r2, r3
 8013336:	d051      	beq.n	80133dc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013338:	6a3b      	ldr	r3, [r7, #32]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	2208      	movs	r2, #8
 801333e:	4413      	add	r3, r2
 8013340:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013344:	681a      	ldr	r2, [r3, #0]
 8013346:	6a3b      	ldr	r3, [r7, #32]
 8013348:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801334a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801334c:	685a      	ldr	r2, [r3, #4]
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	1ad2      	subs	r2, r2, r3
 8013352:	2308      	movs	r3, #8
 8013354:	005b      	lsls	r3, r3, #1
 8013356:	429a      	cmp	r2, r3
 8013358:	d920      	bls.n	801339c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801335a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	4413      	add	r3, r2
 8013360:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013362:	69bb      	ldr	r3, [r7, #24]
 8013364:	f003 0307 	and.w	r3, r3, #7
 8013368:	2b00      	cmp	r3, #0
 801336a:	d00b      	beq.n	8013384 <pvPortMalloc+0xfc>
	__asm volatile
 801336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013370:	f383 8811 	msr	BASEPRI, r3
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	613b      	str	r3, [r7, #16]
}
 801337e:	bf00      	nop
 8013380:	bf00      	nop
 8013382:	e7fd      	b.n	8013380 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013386:	685a      	ldr	r2, [r3, #4]
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	1ad2      	subs	r2, r2, r3
 801338c:	69bb      	ldr	r3, [r7, #24]
 801338e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013392:	687a      	ldr	r2, [r7, #4]
 8013394:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013396:	69b8      	ldr	r0, [r7, #24]
 8013398:	f000 f90a 	bl	80135b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801339c:	4b1d      	ldr	r3, [pc, #116]	@ (8013414 <pvPortMalloc+0x18c>)
 801339e:	681a      	ldr	r2, [r3, #0]
 80133a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133a2:	685b      	ldr	r3, [r3, #4]
 80133a4:	1ad3      	subs	r3, r2, r3
 80133a6:	4a1b      	ldr	r2, [pc, #108]	@ (8013414 <pvPortMalloc+0x18c>)
 80133a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80133aa:	4b1a      	ldr	r3, [pc, #104]	@ (8013414 <pvPortMalloc+0x18c>)
 80133ac:	681a      	ldr	r2, [r3, #0]
 80133ae:	4b1b      	ldr	r3, [pc, #108]	@ (801341c <pvPortMalloc+0x194>)
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	429a      	cmp	r2, r3
 80133b4:	d203      	bcs.n	80133be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80133b6:	4b17      	ldr	r3, [pc, #92]	@ (8013414 <pvPortMalloc+0x18c>)
 80133b8:	681b      	ldr	r3, [r3, #0]
 80133ba:	4a18      	ldr	r2, [pc, #96]	@ (801341c <pvPortMalloc+0x194>)
 80133bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80133be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133c0:	685a      	ldr	r2, [r3, #4]
 80133c2:	4b13      	ldr	r3, [pc, #76]	@ (8013410 <pvPortMalloc+0x188>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	431a      	orrs	r2, r3
 80133c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80133cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80133ce:	2200      	movs	r2, #0
 80133d0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80133d2:	4b13      	ldr	r3, [pc, #76]	@ (8013420 <pvPortMalloc+0x198>)
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	3301      	adds	r3, #1
 80133d8:	4a11      	ldr	r2, [pc, #68]	@ (8013420 <pvPortMalloc+0x198>)
 80133da:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80133dc:	f7ff fa38 	bl	8012850 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	f003 0307 	and.w	r3, r3, #7
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d00b      	beq.n	8013402 <pvPortMalloc+0x17a>
	__asm volatile
 80133ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80133ee:	f383 8811 	msr	BASEPRI, r3
 80133f2:	f3bf 8f6f 	isb	sy
 80133f6:	f3bf 8f4f 	dsb	sy
 80133fa:	60fb      	str	r3, [r7, #12]
}
 80133fc:	bf00      	nop
 80133fe:	bf00      	nop
 8013400:	e7fd      	b.n	80133fe <pvPortMalloc+0x176>
	return pvReturn;
 8013402:	69fb      	ldr	r3, [r7, #28]
}
 8013404:	4618      	mov	r0, r3
 8013406:	3728      	adds	r7, #40	@ 0x28
 8013408:	46bd      	mov	sp, r7
 801340a:	bd80      	pop	{r7, pc}
 801340c:	240051a0 	.word	0x240051a0
 8013410:	240051b4 	.word	0x240051b4
 8013414:	240051a4 	.word	0x240051a4
 8013418:	24005198 	.word	0x24005198
 801341c:	240051a8 	.word	0x240051a8
 8013420:	240051ac 	.word	0x240051ac

08013424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013424:	b580      	push	{r7, lr}
 8013426:	b086      	sub	sp, #24
 8013428:	af00      	add	r7, sp, #0
 801342a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d04f      	beq.n	80134d6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013436:	2308      	movs	r3, #8
 8013438:	425b      	negs	r3, r3
 801343a:	697a      	ldr	r2, [r7, #20]
 801343c:	4413      	add	r3, r2
 801343e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013444:	693b      	ldr	r3, [r7, #16]
 8013446:	685a      	ldr	r2, [r3, #4]
 8013448:	4b25      	ldr	r3, [pc, #148]	@ (80134e0 <vPortFree+0xbc>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	4013      	ands	r3, r2
 801344e:	2b00      	cmp	r3, #0
 8013450:	d10b      	bne.n	801346a <vPortFree+0x46>
	__asm volatile
 8013452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013456:	f383 8811 	msr	BASEPRI, r3
 801345a:	f3bf 8f6f 	isb	sy
 801345e:	f3bf 8f4f 	dsb	sy
 8013462:	60fb      	str	r3, [r7, #12]
}
 8013464:	bf00      	nop
 8013466:	bf00      	nop
 8013468:	e7fd      	b.n	8013466 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801346a:	693b      	ldr	r3, [r7, #16]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d00b      	beq.n	801348a <vPortFree+0x66>
	__asm volatile
 8013472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013476:	f383 8811 	msr	BASEPRI, r3
 801347a:	f3bf 8f6f 	isb	sy
 801347e:	f3bf 8f4f 	dsb	sy
 8013482:	60bb      	str	r3, [r7, #8]
}
 8013484:	bf00      	nop
 8013486:	bf00      	nop
 8013488:	e7fd      	b.n	8013486 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	685a      	ldr	r2, [r3, #4]
 801348e:	4b14      	ldr	r3, [pc, #80]	@ (80134e0 <vPortFree+0xbc>)
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	4013      	ands	r3, r2
 8013494:	2b00      	cmp	r3, #0
 8013496:	d01e      	beq.n	80134d6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d11a      	bne.n	80134d6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	685a      	ldr	r2, [r3, #4]
 80134a4:	4b0e      	ldr	r3, [pc, #56]	@ (80134e0 <vPortFree+0xbc>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	43db      	mvns	r3, r3
 80134aa:	401a      	ands	r2, r3
 80134ac:	693b      	ldr	r3, [r7, #16]
 80134ae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80134b0:	f7ff f9c0 	bl	8012834 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	685a      	ldr	r2, [r3, #4]
 80134b8:	4b0a      	ldr	r3, [pc, #40]	@ (80134e4 <vPortFree+0xc0>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	4413      	add	r3, r2
 80134be:	4a09      	ldr	r2, [pc, #36]	@ (80134e4 <vPortFree+0xc0>)
 80134c0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80134c2:	6938      	ldr	r0, [r7, #16]
 80134c4:	f000 f874 	bl	80135b0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80134c8:	4b07      	ldr	r3, [pc, #28]	@ (80134e8 <vPortFree+0xc4>)
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	3301      	adds	r3, #1
 80134ce:	4a06      	ldr	r2, [pc, #24]	@ (80134e8 <vPortFree+0xc4>)
 80134d0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80134d2:	f7ff f9bd 	bl	8012850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80134d6:	bf00      	nop
 80134d8:	3718      	adds	r7, #24
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	240051b4 	.word	0x240051b4
 80134e4:	240051a4 	.word	0x240051a4
 80134e8:	240051b0 	.word	0x240051b0

080134ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80134ec:	b480      	push	{r7}
 80134ee:	b085      	sub	sp, #20
 80134f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80134f2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80134f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80134f8:	4b27      	ldr	r3, [pc, #156]	@ (8013598 <prvHeapInit+0xac>)
 80134fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	f003 0307 	and.w	r3, r3, #7
 8013502:	2b00      	cmp	r3, #0
 8013504:	d00c      	beq.n	8013520 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	3307      	adds	r3, #7
 801350a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	f023 0307 	bic.w	r3, r3, #7
 8013512:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013514:	68ba      	ldr	r2, [r7, #8]
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	1ad3      	subs	r3, r2, r3
 801351a:	4a1f      	ldr	r2, [pc, #124]	@ (8013598 <prvHeapInit+0xac>)
 801351c:	4413      	add	r3, r2
 801351e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013524:	4a1d      	ldr	r2, [pc, #116]	@ (801359c <prvHeapInit+0xb0>)
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801352a:	4b1c      	ldr	r3, [pc, #112]	@ (801359c <prvHeapInit+0xb0>)
 801352c:	2200      	movs	r2, #0
 801352e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	68ba      	ldr	r2, [r7, #8]
 8013534:	4413      	add	r3, r2
 8013536:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013538:	2208      	movs	r2, #8
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	1a9b      	subs	r3, r3, r2
 801353e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	f023 0307 	bic.w	r3, r3, #7
 8013546:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	4a15      	ldr	r2, [pc, #84]	@ (80135a0 <prvHeapInit+0xb4>)
 801354c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801354e:	4b14      	ldr	r3, [pc, #80]	@ (80135a0 <prvHeapInit+0xb4>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	2200      	movs	r2, #0
 8013554:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013556:	4b12      	ldr	r3, [pc, #72]	@ (80135a0 <prvHeapInit+0xb4>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	2200      	movs	r2, #0
 801355c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013562:	683b      	ldr	r3, [r7, #0]
 8013564:	68fa      	ldr	r2, [r7, #12]
 8013566:	1ad2      	subs	r2, r2, r3
 8013568:	683b      	ldr	r3, [r7, #0]
 801356a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801356c:	4b0c      	ldr	r3, [pc, #48]	@ (80135a0 <prvHeapInit+0xb4>)
 801356e:	681a      	ldr	r2, [r3, #0]
 8013570:	683b      	ldr	r3, [r7, #0]
 8013572:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	685b      	ldr	r3, [r3, #4]
 8013578:	4a0a      	ldr	r2, [pc, #40]	@ (80135a4 <prvHeapInit+0xb8>)
 801357a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801357c:	683b      	ldr	r3, [r7, #0]
 801357e:	685b      	ldr	r3, [r3, #4]
 8013580:	4a09      	ldr	r2, [pc, #36]	@ (80135a8 <prvHeapInit+0xbc>)
 8013582:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013584:	4b09      	ldr	r3, [pc, #36]	@ (80135ac <prvHeapInit+0xc0>)
 8013586:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801358a:	601a      	str	r2, [r3, #0]
}
 801358c:	bf00      	nop
 801358e:	3714      	adds	r7, #20
 8013590:	46bd      	mov	sp, r7
 8013592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013596:	4770      	bx	lr
 8013598:	24001598 	.word	0x24001598
 801359c:	24005198 	.word	0x24005198
 80135a0:	240051a0 	.word	0x240051a0
 80135a4:	240051a8 	.word	0x240051a8
 80135a8:	240051a4 	.word	0x240051a4
 80135ac:	240051b4 	.word	0x240051b4

080135b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80135b0:	b480      	push	{r7}
 80135b2:	b085      	sub	sp, #20
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80135b8:	4b28      	ldr	r3, [pc, #160]	@ (801365c <prvInsertBlockIntoFreeList+0xac>)
 80135ba:	60fb      	str	r3, [r7, #12]
 80135bc:	e002      	b.n	80135c4 <prvInsertBlockIntoFreeList+0x14>
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	60fb      	str	r3, [r7, #12]
 80135c4:	68fb      	ldr	r3, [r7, #12]
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	687a      	ldr	r2, [r7, #4]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d8f7      	bhi.n	80135be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	685b      	ldr	r3, [r3, #4]
 80135d6:	68ba      	ldr	r2, [r7, #8]
 80135d8:	4413      	add	r3, r2
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	429a      	cmp	r2, r3
 80135de:	d108      	bne.n	80135f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	685a      	ldr	r2, [r3, #4]
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	441a      	add	r2, r3
 80135ea:	68fb      	ldr	r3, [r7, #12]
 80135ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	685b      	ldr	r3, [r3, #4]
 80135fa:	68ba      	ldr	r2, [r7, #8]
 80135fc:	441a      	add	r2, r3
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	429a      	cmp	r2, r3
 8013604:	d118      	bne.n	8013638 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013606:	68fb      	ldr	r3, [r7, #12]
 8013608:	681a      	ldr	r2, [r3, #0]
 801360a:	4b15      	ldr	r3, [pc, #84]	@ (8013660 <prvInsertBlockIntoFreeList+0xb0>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	429a      	cmp	r2, r3
 8013610:	d00d      	beq.n	801362e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	685a      	ldr	r2, [r3, #4]
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	685b      	ldr	r3, [r3, #4]
 801361c:	441a      	add	r2, r3
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	681a      	ldr	r2, [r3, #0]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	601a      	str	r2, [r3, #0]
 801362c:	e008      	b.n	8013640 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801362e:	4b0c      	ldr	r3, [pc, #48]	@ (8013660 <prvInsertBlockIntoFreeList+0xb0>)
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	e003      	b.n	8013640 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	681a      	ldr	r2, [r3, #0]
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013640:	68fa      	ldr	r2, [r7, #12]
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	429a      	cmp	r2, r3
 8013646:	d002      	beq.n	801364e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013648:	68fb      	ldr	r3, [r7, #12]
 801364a:	687a      	ldr	r2, [r7, #4]
 801364c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801364e:	bf00      	nop
 8013650:	3714      	adds	r7, #20
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr
 801365a:	bf00      	nop
 801365c:	24005198 	.word	0x24005198
 8013660:	240051a0 	.word	0x240051a0

08013664 <_vsiprintf_r>:
 8013664:	b510      	push	{r4, lr}
 8013666:	b09a      	sub	sp, #104	@ 0x68
 8013668:	2400      	movs	r4, #0
 801366a:	9100      	str	r1, [sp, #0]
 801366c:	9104      	str	r1, [sp, #16]
 801366e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8013672:	9105      	str	r1, [sp, #20]
 8013674:	9102      	str	r1, [sp, #8]
 8013676:	4905      	ldr	r1, [pc, #20]	@ (801368c <_vsiprintf_r+0x28>)
 8013678:	9103      	str	r1, [sp, #12]
 801367a:	4669      	mov	r1, sp
 801367c:	9419      	str	r4, [sp, #100]	@ 0x64
 801367e:	f000 f8af 	bl	80137e0 <_svfiprintf_r>
 8013682:	9b00      	ldr	r3, [sp, #0]
 8013684:	701c      	strb	r4, [r3, #0]
 8013686:	b01a      	add	sp, #104	@ 0x68
 8013688:	bd10      	pop	{r4, pc}
 801368a:	bf00      	nop
 801368c:	ffff0208 	.word	0xffff0208

08013690 <vsiprintf>:
 8013690:	4613      	mov	r3, r2
 8013692:	460a      	mov	r2, r1
 8013694:	4601      	mov	r1, r0
 8013696:	4802      	ldr	r0, [pc, #8]	@ (80136a0 <vsiprintf+0x10>)
 8013698:	6800      	ldr	r0, [r0, #0]
 801369a:	f7ff bfe3 	b.w	8013664 <_vsiprintf_r>
 801369e:	bf00      	nop
 80136a0:	24000014 	.word	0x24000014

080136a4 <memset>:
 80136a4:	4402      	add	r2, r0
 80136a6:	4603      	mov	r3, r0
 80136a8:	4293      	cmp	r3, r2
 80136aa:	d100      	bne.n	80136ae <memset+0xa>
 80136ac:	4770      	bx	lr
 80136ae:	f803 1b01 	strb.w	r1, [r3], #1
 80136b2:	e7f9      	b.n	80136a8 <memset+0x4>

080136b4 <__errno>:
 80136b4:	4b01      	ldr	r3, [pc, #4]	@ (80136bc <__errno+0x8>)
 80136b6:	6818      	ldr	r0, [r3, #0]
 80136b8:	4770      	bx	lr
 80136ba:	bf00      	nop
 80136bc:	24000014 	.word	0x24000014

080136c0 <__libc_init_array>:
 80136c0:	b570      	push	{r4, r5, r6, lr}
 80136c2:	4d0d      	ldr	r5, [pc, #52]	@ (80136f8 <__libc_init_array+0x38>)
 80136c4:	4c0d      	ldr	r4, [pc, #52]	@ (80136fc <__libc_init_array+0x3c>)
 80136c6:	1b64      	subs	r4, r4, r5
 80136c8:	10a4      	asrs	r4, r4, #2
 80136ca:	2600      	movs	r6, #0
 80136cc:	42a6      	cmp	r6, r4
 80136ce:	d109      	bne.n	80136e4 <__libc_init_array+0x24>
 80136d0:	4d0b      	ldr	r5, [pc, #44]	@ (8013700 <__libc_init_array+0x40>)
 80136d2:	4c0c      	ldr	r4, [pc, #48]	@ (8013704 <__libc_init_array+0x44>)
 80136d4:	f000 fd60 	bl	8014198 <_init>
 80136d8:	1b64      	subs	r4, r4, r5
 80136da:	10a4      	asrs	r4, r4, #2
 80136dc:	2600      	movs	r6, #0
 80136de:	42a6      	cmp	r6, r4
 80136e0:	d105      	bne.n	80136ee <__libc_init_array+0x2e>
 80136e2:	bd70      	pop	{r4, r5, r6, pc}
 80136e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80136e8:	4798      	blx	r3
 80136ea:	3601      	adds	r6, #1
 80136ec:	e7ee      	b.n	80136cc <__libc_init_array+0xc>
 80136ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80136f2:	4798      	blx	r3
 80136f4:	3601      	adds	r6, #1
 80136f6:	e7f2      	b.n	80136de <__libc_init_array+0x1e>
 80136f8:	08014344 	.word	0x08014344
 80136fc:	08014344 	.word	0x08014344
 8013700:	08014344 	.word	0x08014344
 8013704:	08014348 	.word	0x08014348

08013708 <__retarget_lock_acquire_recursive>:
 8013708:	4770      	bx	lr

0801370a <__retarget_lock_release_recursive>:
 801370a:	4770      	bx	lr

0801370c <memcpy>:
 801370c:	440a      	add	r2, r1
 801370e:	4291      	cmp	r1, r2
 8013710:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8013714:	d100      	bne.n	8013718 <memcpy+0xc>
 8013716:	4770      	bx	lr
 8013718:	b510      	push	{r4, lr}
 801371a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801371e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013722:	4291      	cmp	r1, r2
 8013724:	d1f9      	bne.n	801371a <memcpy+0xe>
 8013726:	bd10      	pop	{r4, pc}

08013728 <__ssputs_r>:
 8013728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801372c:	688e      	ldr	r6, [r1, #8]
 801372e:	461f      	mov	r7, r3
 8013730:	42be      	cmp	r6, r7
 8013732:	680b      	ldr	r3, [r1, #0]
 8013734:	4682      	mov	sl, r0
 8013736:	460c      	mov	r4, r1
 8013738:	4690      	mov	r8, r2
 801373a:	d82d      	bhi.n	8013798 <__ssputs_r+0x70>
 801373c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013740:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013744:	d026      	beq.n	8013794 <__ssputs_r+0x6c>
 8013746:	6965      	ldr	r5, [r4, #20]
 8013748:	6909      	ldr	r1, [r1, #16]
 801374a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801374e:	eba3 0901 	sub.w	r9, r3, r1
 8013752:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013756:	1c7b      	adds	r3, r7, #1
 8013758:	444b      	add	r3, r9
 801375a:	106d      	asrs	r5, r5, #1
 801375c:	429d      	cmp	r5, r3
 801375e:	bf38      	it	cc
 8013760:	461d      	movcc	r5, r3
 8013762:	0553      	lsls	r3, r2, #21
 8013764:	d527      	bpl.n	80137b6 <__ssputs_r+0x8e>
 8013766:	4629      	mov	r1, r5
 8013768:	f000 f958 	bl	8013a1c <_malloc_r>
 801376c:	4606      	mov	r6, r0
 801376e:	b360      	cbz	r0, 80137ca <__ssputs_r+0xa2>
 8013770:	6921      	ldr	r1, [r4, #16]
 8013772:	464a      	mov	r2, r9
 8013774:	f7ff ffca 	bl	801370c <memcpy>
 8013778:	89a3      	ldrh	r3, [r4, #12]
 801377a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801377e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013782:	81a3      	strh	r3, [r4, #12]
 8013784:	6126      	str	r6, [r4, #16]
 8013786:	6165      	str	r5, [r4, #20]
 8013788:	444e      	add	r6, r9
 801378a:	eba5 0509 	sub.w	r5, r5, r9
 801378e:	6026      	str	r6, [r4, #0]
 8013790:	60a5      	str	r5, [r4, #8]
 8013792:	463e      	mov	r6, r7
 8013794:	42be      	cmp	r6, r7
 8013796:	d900      	bls.n	801379a <__ssputs_r+0x72>
 8013798:	463e      	mov	r6, r7
 801379a:	6820      	ldr	r0, [r4, #0]
 801379c:	4632      	mov	r2, r6
 801379e:	4641      	mov	r1, r8
 80137a0:	f000 fb82 	bl	8013ea8 <memmove>
 80137a4:	68a3      	ldr	r3, [r4, #8]
 80137a6:	1b9b      	subs	r3, r3, r6
 80137a8:	60a3      	str	r3, [r4, #8]
 80137aa:	6823      	ldr	r3, [r4, #0]
 80137ac:	4433      	add	r3, r6
 80137ae:	6023      	str	r3, [r4, #0]
 80137b0:	2000      	movs	r0, #0
 80137b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137b6:	462a      	mov	r2, r5
 80137b8:	f000 fb48 	bl	8013e4c <_realloc_r>
 80137bc:	4606      	mov	r6, r0
 80137be:	2800      	cmp	r0, #0
 80137c0:	d1e0      	bne.n	8013784 <__ssputs_r+0x5c>
 80137c2:	6921      	ldr	r1, [r4, #16]
 80137c4:	4650      	mov	r0, sl
 80137c6:	f000 fb99 	bl	8013efc <_free_r>
 80137ca:	230c      	movs	r3, #12
 80137cc:	f8ca 3000 	str.w	r3, [sl]
 80137d0:	89a3      	ldrh	r3, [r4, #12]
 80137d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80137d6:	81a3      	strh	r3, [r4, #12]
 80137d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80137dc:	e7e9      	b.n	80137b2 <__ssputs_r+0x8a>
	...

080137e0 <_svfiprintf_r>:
 80137e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137e4:	4698      	mov	r8, r3
 80137e6:	898b      	ldrh	r3, [r1, #12]
 80137e8:	061b      	lsls	r3, r3, #24
 80137ea:	b09d      	sub	sp, #116	@ 0x74
 80137ec:	4607      	mov	r7, r0
 80137ee:	460d      	mov	r5, r1
 80137f0:	4614      	mov	r4, r2
 80137f2:	d510      	bpl.n	8013816 <_svfiprintf_r+0x36>
 80137f4:	690b      	ldr	r3, [r1, #16]
 80137f6:	b973      	cbnz	r3, 8013816 <_svfiprintf_r+0x36>
 80137f8:	2140      	movs	r1, #64	@ 0x40
 80137fa:	f000 f90f 	bl	8013a1c <_malloc_r>
 80137fe:	6028      	str	r0, [r5, #0]
 8013800:	6128      	str	r0, [r5, #16]
 8013802:	b930      	cbnz	r0, 8013812 <_svfiprintf_r+0x32>
 8013804:	230c      	movs	r3, #12
 8013806:	603b      	str	r3, [r7, #0]
 8013808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801380c:	b01d      	add	sp, #116	@ 0x74
 801380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013812:	2340      	movs	r3, #64	@ 0x40
 8013814:	616b      	str	r3, [r5, #20]
 8013816:	2300      	movs	r3, #0
 8013818:	9309      	str	r3, [sp, #36]	@ 0x24
 801381a:	2320      	movs	r3, #32
 801381c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013820:	f8cd 800c 	str.w	r8, [sp, #12]
 8013824:	2330      	movs	r3, #48	@ 0x30
 8013826:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80139c4 <_svfiprintf_r+0x1e4>
 801382a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801382e:	f04f 0901 	mov.w	r9, #1
 8013832:	4623      	mov	r3, r4
 8013834:	469a      	mov	sl, r3
 8013836:	f813 2b01 	ldrb.w	r2, [r3], #1
 801383a:	b10a      	cbz	r2, 8013840 <_svfiprintf_r+0x60>
 801383c:	2a25      	cmp	r2, #37	@ 0x25
 801383e:	d1f9      	bne.n	8013834 <_svfiprintf_r+0x54>
 8013840:	ebba 0b04 	subs.w	fp, sl, r4
 8013844:	d00b      	beq.n	801385e <_svfiprintf_r+0x7e>
 8013846:	465b      	mov	r3, fp
 8013848:	4622      	mov	r2, r4
 801384a:	4629      	mov	r1, r5
 801384c:	4638      	mov	r0, r7
 801384e:	f7ff ff6b 	bl	8013728 <__ssputs_r>
 8013852:	3001      	adds	r0, #1
 8013854:	f000 80a7 	beq.w	80139a6 <_svfiprintf_r+0x1c6>
 8013858:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801385a:	445a      	add	r2, fp
 801385c:	9209      	str	r2, [sp, #36]	@ 0x24
 801385e:	f89a 3000 	ldrb.w	r3, [sl]
 8013862:	2b00      	cmp	r3, #0
 8013864:	f000 809f 	beq.w	80139a6 <_svfiprintf_r+0x1c6>
 8013868:	2300      	movs	r3, #0
 801386a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801386e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013872:	f10a 0a01 	add.w	sl, sl, #1
 8013876:	9304      	str	r3, [sp, #16]
 8013878:	9307      	str	r3, [sp, #28]
 801387a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801387e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013880:	4654      	mov	r4, sl
 8013882:	2205      	movs	r2, #5
 8013884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013888:	484e      	ldr	r0, [pc, #312]	@ (80139c4 <_svfiprintf_r+0x1e4>)
 801388a:	f7ec fd41 	bl	8000310 <memchr>
 801388e:	9a04      	ldr	r2, [sp, #16]
 8013890:	b9d8      	cbnz	r0, 80138ca <_svfiprintf_r+0xea>
 8013892:	06d0      	lsls	r0, r2, #27
 8013894:	bf44      	itt	mi
 8013896:	2320      	movmi	r3, #32
 8013898:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801389c:	0711      	lsls	r1, r2, #28
 801389e:	bf44      	itt	mi
 80138a0:	232b      	movmi	r3, #43	@ 0x2b
 80138a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80138a6:	f89a 3000 	ldrb.w	r3, [sl]
 80138aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80138ac:	d015      	beq.n	80138da <_svfiprintf_r+0xfa>
 80138ae:	9a07      	ldr	r2, [sp, #28]
 80138b0:	4654      	mov	r4, sl
 80138b2:	2000      	movs	r0, #0
 80138b4:	f04f 0c0a 	mov.w	ip, #10
 80138b8:	4621      	mov	r1, r4
 80138ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80138be:	3b30      	subs	r3, #48	@ 0x30
 80138c0:	2b09      	cmp	r3, #9
 80138c2:	d94b      	bls.n	801395c <_svfiprintf_r+0x17c>
 80138c4:	b1b0      	cbz	r0, 80138f4 <_svfiprintf_r+0x114>
 80138c6:	9207      	str	r2, [sp, #28]
 80138c8:	e014      	b.n	80138f4 <_svfiprintf_r+0x114>
 80138ca:	eba0 0308 	sub.w	r3, r0, r8
 80138ce:	fa09 f303 	lsl.w	r3, r9, r3
 80138d2:	4313      	orrs	r3, r2
 80138d4:	9304      	str	r3, [sp, #16]
 80138d6:	46a2      	mov	sl, r4
 80138d8:	e7d2      	b.n	8013880 <_svfiprintf_r+0xa0>
 80138da:	9b03      	ldr	r3, [sp, #12]
 80138dc:	1d19      	adds	r1, r3, #4
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	9103      	str	r1, [sp, #12]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	bfbb      	ittet	lt
 80138e6:	425b      	neglt	r3, r3
 80138e8:	f042 0202 	orrlt.w	r2, r2, #2
 80138ec:	9307      	strge	r3, [sp, #28]
 80138ee:	9307      	strlt	r3, [sp, #28]
 80138f0:	bfb8      	it	lt
 80138f2:	9204      	strlt	r2, [sp, #16]
 80138f4:	7823      	ldrb	r3, [r4, #0]
 80138f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80138f8:	d10a      	bne.n	8013910 <_svfiprintf_r+0x130>
 80138fa:	7863      	ldrb	r3, [r4, #1]
 80138fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80138fe:	d132      	bne.n	8013966 <_svfiprintf_r+0x186>
 8013900:	9b03      	ldr	r3, [sp, #12]
 8013902:	1d1a      	adds	r2, r3, #4
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	9203      	str	r2, [sp, #12]
 8013908:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801390c:	3402      	adds	r4, #2
 801390e:	9305      	str	r3, [sp, #20]
 8013910:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80139d4 <_svfiprintf_r+0x1f4>
 8013914:	7821      	ldrb	r1, [r4, #0]
 8013916:	2203      	movs	r2, #3
 8013918:	4650      	mov	r0, sl
 801391a:	f7ec fcf9 	bl	8000310 <memchr>
 801391e:	b138      	cbz	r0, 8013930 <_svfiprintf_r+0x150>
 8013920:	9b04      	ldr	r3, [sp, #16]
 8013922:	eba0 000a 	sub.w	r0, r0, sl
 8013926:	2240      	movs	r2, #64	@ 0x40
 8013928:	4082      	lsls	r2, r0
 801392a:	4313      	orrs	r3, r2
 801392c:	3401      	adds	r4, #1
 801392e:	9304      	str	r3, [sp, #16]
 8013930:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013934:	4824      	ldr	r0, [pc, #144]	@ (80139c8 <_svfiprintf_r+0x1e8>)
 8013936:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801393a:	2206      	movs	r2, #6
 801393c:	f7ec fce8 	bl	8000310 <memchr>
 8013940:	2800      	cmp	r0, #0
 8013942:	d036      	beq.n	80139b2 <_svfiprintf_r+0x1d2>
 8013944:	4b21      	ldr	r3, [pc, #132]	@ (80139cc <_svfiprintf_r+0x1ec>)
 8013946:	bb1b      	cbnz	r3, 8013990 <_svfiprintf_r+0x1b0>
 8013948:	9b03      	ldr	r3, [sp, #12]
 801394a:	3307      	adds	r3, #7
 801394c:	f023 0307 	bic.w	r3, r3, #7
 8013950:	3308      	adds	r3, #8
 8013952:	9303      	str	r3, [sp, #12]
 8013954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013956:	4433      	add	r3, r6
 8013958:	9309      	str	r3, [sp, #36]	@ 0x24
 801395a:	e76a      	b.n	8013832 <_svfiprintf_r+0x52>
 801395c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013960:	460c      	mov	r4, r1
 8013962:	2001      	movs	r0, #1
 8013964:	e7a8      	b.n	80138b8 <_svfiprintf_r+0xd8>
 8013966:	2300      	movs	r3, #0
 8013968:	3401      	adds	r4, #1
 801396a:	9305      	str	r3, [sp, #20]
 801396c:	4619      	mov	r1, r3
 801396e:	f04f 0c0a 	mov.w	ip, #10
 8013972:	4620      	mov	r0, r4
 8013974:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013978:	3a30      	subs	r2, #48	@ 0x30
 801397a:	2a09      	cmp	r2, #9
 801397c:	d903      	bls.n	8013986 <_svfiprintf_r+0x1a6>
 801397e:	2b00      	cmp	r3, #0
 8013980:	d0c6      	beq.n	8013910 <_svfiprintf_r+0x130>
 8013982:	9105      	str	r1, [sp, #20]
 8013984:	e7c4      	b.n	8013910 <_svfiprintf_r+0x130>
 8013986:	fb0c 2101 	mla	r1, ip, r1, r2
 801398a:	4604      	mov	r4, r0
 801398c:	2301      	movs	r3, #1
 801398e:	e7f0      	b.n	8013972 <_svfiprintf_r+0x192>
 8013990:	ab03      	add	r3, sp, #12
 8013992:	9300      	str	r3, [sp, #0]
 8013994:	462a      	mov	r2, r5
 8013996:	4b0e      	ldr	r3, [pc, #56]	@ (80139d0 <_svfiprintf_r+0x1f0>)
 8013998:	a904      	add	r1, sp, #16
 801399a:	4638      	mov	r0, r7
 801399c:	f3af 8000 	nop.w
 80139a0:	1c42      	adds	r2, r0, #1
 80139a2:	4606      	mov	r6, r0
 80139a4:	d1d6      	bne.n	8013954 <_svfiprintf_r+0x174>
 80139a6:	89ab      	ldrh	r3, [r5, #12]
 80139a8:	065b      	lsls	r3, r3, #25
 80139aa:	f53f af2d 	bmi.w	8013808 <_svfiprintf_r+0x28>
 80139ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80139b0:	e72c      	b.n	801380c <_svfiprintf_r+0x2c>
 80139b2:	ab03      	add	r3, sp, #12
 80139b4:	9300      	str	r3, [sp, #0]
 80139b6:	462a      	mov	r2, r5
 80139b8:	4b05      	ldr	r3, [pc, #20]	@ (80139d0 <_svfiprintf_r+0x1f0>)
 80139ba:	a904      	add	r1, sp, #16
 80139bc:	4638      	mov	r0, r7
 80139be:	f000 f91b 	bl	8013bf8 <_printf_i>
 80139c2:	e7ed      	b.n	80139a0 <_svfiprintf_r+0x1c0>
 80139c4:	080142e8 	.word	0x080142e8
 80139c8:	080142f2 	.word	0x080142f2
 80139cc:	00000000 	.word	0x00000000
 80139d0:	08013729 	.word	0x08013729
 80139d4:	080142ee 	.word	0x080142ee

080139d8 <sbrk_aligned>:
 80139d8:	b570      	push	{r4, r5, r6, lr}
 80139da:	4e0f      	ldr	r6, [pc, #60]	@ (8013a18 <sbrk_aligned+0x40>)
 80139dc:	460c      	mov	r4, r1
 80139de:	6831      	ldr	r1, [r6, #0]
 80139e0:	4605      	mov	r5, r0
 80139e2:	b911      	cbnz	r1, 80139ea <sbrk_aligned+0x12>
 80139e4:	f000 fa7a 	bl	8013edc <_sbrk_r>
 80139e8:	6030      	str	r0, [r6, #0]
 80139ea:	4621      	mov	r1, r4
 80139ec:	4628      	mov	r0, r5
 80139ee:	f000 fa75 	bl	8013edc <_sbrk_r>
 80139f2:	1c43      	adds	r3, r0, #1
 80139f4:	d103      	bne.n	80139fe <sbrk_aligned+0x26>
 80139f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80139fa:	4620      	mov	r0, r4
 80139fc:	bd70      	pop	{r4, r5, r6, pc}
 80139fe:	1cc4      	adds	r4, r0, #3
 8013a00:	f024 0403 	bic.w	r4, r4, #3
 8013a04:	42a0      	cmp	r0, r4
 8013a06:	d0f8      	beq.n	80139fa <sbrk_aligned+0x22>
 8013a08:	1a21      	subs	r1, r4, r0
 8013a0a:	4628      	mov	r0, r5
 8013a0c:	f000 fa66 	bl	8013edc <_sbrk_r>
 8013a10:	3001      	adds	r0, #1
 8013a12:	d1f2      	bne.n	80139fa <sbrk_aligned+0x22>
 8013a14:	e7ef      	b.n	80139f6 <sbrk_aligned+0x1e>
 8013a16:	bf00      	nop
 8013a18:	240052f4 	.word	0x240052f4

08013a1c <_malloc_r>:
 8013a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a20:	1ccd      	adds	r5, r1, #3
 8013a22:	f025 0503 	bic.w	r5, r5, #3
 8013a26:	3508      	adds	r5, #8
 8013a28:	2d0c      	cmp	r5, #12
 8013a2a:	bf38      	it	cc
 8013a2c:	250c      	movcc	r5, #12
 8013a2e:	2d00      	cmp	r5, #0
 8013a30:	4606      	mov	r6, r0
 8013a32:	db01      	blt.n	8013a38 <_malloc_r+0x1c>
 8013a34:	42a9      	cmp	r1, r5
 8013a36:	d904      	bls.n	8013a42 <_malloc_r+0x26>
 8013a38:	230c      	movs	r3, #12
 8013a3a:	6033      	str	r3, [r6, #0]
 8013a3c:	2000      	movs	r0, #0
 8013a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013b18 <_malloc_r+0xfc>
 8013a46:	f000 f9f5 	bl	8013e34 <__malloc_lock>
 8013a4a:	f8d8 3000 	ldr.w	r3, [r8]
 8013a4e:	461c      	mov	r4, r3
 8013a50:	bb44      	cbnz	r4, 8013aa4 <_malloc_r+0x88>
 8013a52:	4629      	mov	r1, r5
 8013a54:	4630      	mov	r0, r6
 8013a56:	f7ff ffbf 	bl	80139d8 <sbrk_aligned>
 8013a5a:	1c43      	adds	r3, r0, #1
 8013a5c:	4604      	mov	r4, r0
 8013a5e:	d158      	bne.n	8013b12 <_malloc_r+0xf6>
 8013a60:	f8d8 4000 	ldr.w	r4, [r8]
 8013a64:	4627      	mov	r7, r4
 8013a66:	2f00      	cmp	r7, #0
 8013a68:	d143      	bne.n	8013af2 <_malloc_r+0xd6>
 8013a6a:	2c00      	cmp	r4, #0
 8013a6c:	d04b      	beq.n	8013b06 <_malloc_r+0xea>
 8013a6e:	6823      	ldr	r3, [r4, #0]
 8013a70:	4639      	mov	r1, r7
 8013a72:	4630      	mov	r0, r6
 8013a74:	eb04 0903 	add.w	r9, r4, r3
 8013a78:	f000 fa30 	bl	8013edc <_sbrk_r>
 8013a7c:	4581      	cmp	r9, r0
 8013a7e:	d142      	bne.n	8013b06 <_malloc_r+0xea>
 8013a80:	6821      	ldr	r1, [r4, #0]
 8013a82:	1a6d      	subs	r5, r5, r1
 8013a84:	4629      	mov	r1, r5
 8013a86:	4630      	mov	r0, r6
 8013a88:	f7ff ffa6 	bl	80139d8 <sbrk_aligned>
 8013a8c:	3001      	adds	r0, #1
 8013a8e:	d03a      	beq.n	8013b06 <_malloc_r+0xea>
 8013a90:	6823      	ldr	r3, [r4, #0]
 8013a92:	442b      	add	r3, r5
 8013a94:	6023      	str	r3, [r4, #0]
 8013a96:	f8d8 3000 	ldr.w	r3, [r8]
 8013a9a:	685a      	ldr	r2, [r3, #4]
 8013a9c:	bb62      	cbnz	r2, 8013af8 <_malloc_r+0xdc>
 8013a9e:	f8c8 7000 	str.w	r7, [r8]
 8013aa2:	e00f      	b.n	8013ac4 <_malloc_r+0xa8>
 8013aa4:	6822      	ldr	r2, [r4, #0]
 8013aa6:	1b52      	subs	r2, r2, r5
 8013aa8:	d420      	bmi.n	8013aec <_malloc_r+0xd0>
 8013aaa:	2a0b      	cmp	r2, #11
 8013aac:	d917      	bls.n	8013ade <_malloc_r+0xc2>
 8013aae:	1961      	adds	r1, r4, r5
 8013ab0:	42a3      	cmp	r3, r4
 8013ab2:	6025      	str	r5, [r4, #0]
 8013ab4:	bf18      	it	ne
 8013ab6:	6059      	strne	r1, [r3, #4]
 8013ab8:	6863      	ldr	r3, [r4, #4]
 8013aba:	bf08      	it	eq
 8013abc:	f8c8 1000 	streq.w	r1, [r8]
 8013ac0:	5162      	str	r2, [r4, r5]
 8013ac2:	604b      	str	r3, [r1, #4]
 8013ac4:	4630      	mov	r0, r6
 8013ac6:	f000 f9bb 	bl	8013e40 <__malloc_unlock>
 8013aca:	f104 000b 	add.w	r0, r4, #11
 8013ace:	1d23      	adds	r3, r4, #4
 8013ad0:	f020 0007 	bic.w	r0, r0, #7
 8013ad4:	1ac2      	subs	r2, r0, r3
 8013ad6:	bf1c      	itt	ne
 8013ad8:	1a1b      	subne	r3, r3, r0
 8013ada:	50a3      	strne	r3, [r4, r2]
 8013adc:	e7af      	b.n	8013a3e <_malloc_r+0x22>
 8013ade:	6862      	ldr	r2, [r4, #4]
 8013ae0:	42a3      	cmp	r3, r4
 8013ae2:	bf0c      	ite	eq
 8013ae4:	f8c8 2000 	streq.w	r2, [r8]
 8013ae8:	605a      	strne	r2, [r3, #4]
 8013aea:	e7eb      	b.n	8013ac4 <_malloc_r+0xa8>
 8013aec:	4623      	mov	r3, r4
 8013aee:	6864      	ldr	r4, [r4, #4]
 8013af0:	e7ae      	b.n	8013a50 <_malloc_r+0x34>
 8013af2:	463c      	mov	r4, r7
 8013af4:	687f      	ldr	r7, [r7, #4]
 8013af6:	e7b6      	b.n	8013a66 <_malloc_r+0x4a>
 8013af8:	461a      	mov	r2, r3
 8013afa:	685b      	ldr	r3, [r3, #4]
 8013afc:	42a3      	cmp	r3, r4
 8013afe:	d1fb      	bne.n	8013af8 <_malloc_r+0xdc>
 8013b00:	2300      	movs	r3, #0
 8013b02:	6053      	str	r3, [r2, #4]
 8013b04:	e7de      	b.n	8013ac4 <_malloc_r+0xa8>
 8013b06:	230c      	movs	r3, #12
 8013b08:	6033      	str	r3, [r6, #0]
 8013b0a:	4630      	mov	r0, r6
 8013b0c:	f000 f998 	bl	8013e40 <__malloc_unlock>
 8013b10:	e794      	b.n	8013a3c <_malloc_r+0x20>
 8013b12:	6005      	str	r5, [r0, #0]
 8013b14:	e7d6      	b.n	8013ac4 <_malloc_r+0xa8>
 8013b16:	bf00      	nop
 8013b18:	240052f8 	.word	0x240052f8

08013b1c <_printf_common>:
 8013b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b20:	4616      	mov	r6, r2
 8013b22:	4698      	mov	r8, r3
 8013b24:	688a      	ldr	r2, [r1, #8]
 8013b26:	690b      	ldr	r3, [r1, #16]
 8013b28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	bfb8      	it	lt
 8013b30:	4613      	movlt	r3, r2
 8013b32:	6033      	str	r3, [r6, #0]
 8013b34:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013b38:	4607      	mov	r7, r0
 8013b3a:	460c      	mov	r4, r1
 8013b3c:	b10a      	cbz	r2, 8013b42 <_printf_common+0x26>
 8013b3e:	3301      	adds	r3, #1
 8013b40:	6033      	str	r3, [r6, #0]
 8013b42:	6823      	ldr	r3, [r4, #0]
 8013b44:	0699      	lsls	r1, r3, #26
 8013b46:	bf42      	ittt	mi
 8013b48:	6833      	ldrmi	r3, [r6, #0]
 8013b4a:	3302      	addmi	r3, #2
 8013b4c:	6033      	strmi	r3, [r6, #0]
 8013b4e:	6825      	ldr	r5, [r4, #0]
 8013b50:	f015 0506 	ands.w	r5, r5, #6
 8013b54:	d106      	bne.n	8013b64 <_printf_common+0x48>
 8013b56:	f104 0a19 	add.w	sl, r4, #25
 8013b5a:	68e3      	ldr	r3, [r4, #12]
 8013b5c:	6832      	ldr	r2, [r6, #0]
 8013b5e:	1a9b      	subs	r3, r3, r2
 8013b60:	42ab      	cmp	r3, r5
 8013b62:	dc26      	bgt.n	8013bb2 <_printf_common+0x96>
 8013b64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013b68:	6822      	ldr	r2, [r4, #0]
 8013b6a:	3b00      	subs	r3, #0
 8013b6c:	bf18      	it	ne
 8013b6e:	2301      	movne	r3, #1
 8013b70:	0692      	lsls	r2, r2, #26
 8013b72:	d42b      	bmi.n	8013bcc <_printf_common+0xb0>
 8013b74:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013b78:	4641      	mov	r1, r8
 8013b7a:	4638      	mov	r0, r7
 8013b7c:	47c8      	blx	r9
 8013b7e:	3001      	adds	r0, #1
 8013b80:	d01e      	beq.n	8013bc0 <_printf_common+0xa4>
 8013b82:	6823      	ldr	r3, [r4, #0]
 8013b84:	6922      	ldr	r2, [r4, #16]
 8013b86:	f003 0306 	and.w	r3, r3, #6
 8013b8a:	2b04      	cmp	r3, #4
 8013b8c:	bf02      	ittt	eq
 8013b8e:	68e5      	ldreq	r5, [r4, #12]
 8013b90:	6833      	ldreq	r3, [r6, #0]
 8013b92:	1aed      	subeq	r5, r5, r3
 8013b94:	68a3      	ldr	r3, [r4, #8]
 8013b96:	bf0c      	ite	eq
 8013b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013b9c:	2500      	movne	r5, #0
 8013b9e:	4293      	cmp	r3, r2
 8013ba0:	bfc4      	itt	gt
 8013ba2:	1a9b      	subgt	r3, r3, r2
 8013ba4:	18ed      	addgt	r5, r5, r3
 8013ba6:	2600      	movs	r6, #0
 8013ba8:	341a      	adds	r4, #26
 8013baa:	42b5      	cmp	r5, r6
 8013bac:	d11a      	bne.n	8013be4 <_printf_common+0xc8>
 8013bae:	2000      	movs	r0, #0
 8013bb0:	e008      	b.n	8013bc4 <_printf_common+0xa8>
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	4652      	mov	r2, sl
 8013bb6:	4641      	mov	r1, r8
 8013bb8:	4638      	mov	r0, r7
 8013bba:	47c8      	blx	r9
 8013bbc:	3001      	adds	r0, #1
 8013bbe:	d103      	bne.n	8013bc8 <_printf_common+0xac>
 8013bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bc8:	3501      	adds	r5, #1
 8013bca:	e7c6      	b.n	8013b5a <_printf_common+0x3e>
 8013bcc:	18e1      	adds	r1, r4, r3
 8013bce:	1c5a      	adds	r2, r3, #1
 8013bd0:	2030      	movs	r0, #48	@ 0x30
 8013bd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013bd6:	4422      	add	r2, r4
 8013bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013bdc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013be0:	3302      	adds	r3, #2
 8013be2:	e7c7      	b.n	8013b74 <_printf_common+0x58>
 8013be4:	2301      	movs	r3, #1
 8013be6:	4622      	mov	r2, r4
 8013be8:	4641      	mov	r1, r8
 8013bea:	4638      	mov	r0, r7
 8013bec:	47c8      	blx	r9
 8013bee:	3001      	adds	r0, #1
 8013bf0:	d0e6      	beq.n	8013bc0 <_printf_common+0xa4>
 8013bf2:	3601      	adds	r6, #1
 8013bf4:	e7d9      	b.n	8013baa <_printf_common+0x8e>
	...

08013bf8 <_printf_i>:
 8013bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013bfc:	7e0f      	ldrb	r7, [r1, #24]
 8013bfe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013c00:	2f78      	cmp	r7, #120	@ 0x78
 8013c02:	4691      	mov	r9, r2
 8013c04:	4680      	mov	r8, r0
 8013c06:	460c      	mov	r4, r1
 8013c08:	469a      	mov	sl, r3
 8013c0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013c0e:	d807      	bhi.n	8013c20 <_printf_i+0x28>
 8013c10:	2f62      	cmp	r7, #98	@ 0x62
 8013c12:	d80a      	bhi.n	8013c2a <_printf_i+0x32>
 8013c14:	2f00      	cmp	r7, #0
 8013c16:	f000 80d1 	beq.w	8013dbc <_printf_i+0x1c4>
 8013c1a:	2f58      	cmp	r7, #88	@ 0x58
 8013c1c:	f000 80b8 	beq.w	8013d90 <_printf_i+0x198>
 8013c20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013c24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013c28:	e03a      	b.n	8013ca0 <_printf_i+0xa8>
 8013c2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013c2e:	2b15      	cmp	r3, #21
 8013c30:	d8f6      	bhi.n	8013c20 <_printf_i+0x28>
 8013c32:	a101      	add	r1, pc, #4	@ (adr r1, 8013c38 <_printf_i+0x40>)
 8013c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013c38:	08013c91 	.word	0x08013c91
 8013c3c:	08013ca5 	.word	0x08013ca5
 8013c40:	08013c21 	.word	0x08013c21
 8013c44:	08013c21 	.word	0x08013c21
 8013c48:	08013c21 	.word	0x08013c21
 8013c4c:	08013c21 	.word	0x08013c21
 8013c50:	08013ca5 	.word	0x08013ca5
 8013c54:	08013c21 	.word	0x08013c21
 8013c58:	08013c21 	.word	0x08013c21
 8013c5c:	08013c21 	.word	0x08013c21
 8013c60:	08013c21 	.word	0x08013c21
 8013c64:	08013da3 	.word	0x08013da3
 8013c68:	08013ccf 	.word	0x08013ccf
 8013c6c:	08013d5d 	.word	0x08013d5d
 8013c70:	08013c21 	.word	0x08013c21
 8013c74:	08013c21 	.word	0x08013c21
 8013c78:	08013dc5 	.word	0x08013dc5
 8013c7c:	08013c21 	.word	0x08013c21
 8013c80:	08013ccf 	.word	0x08013ccf
 8013c84:	08013c21 	.word	0x08013c21
 8013c88:	08013c21 	.word	0x08013c21
 8013c8c:	08013d65 	.word	0x08013d65
 8013c90:	6833      	ldr	r3, [r6, #0]
 8013c92:	1d1a      	adds	r2, r3, #4
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	6032      	str	r2, [r6, #0]
 8013c98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013c9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013ca0:	2301      	movs	r3, #1
 8013ca2:	e09c      	b.n	8013dde <_printf_i+0x1e6>
 8013ca4:	6833      	ldr	r3, [r6, #0]
 8013ca6:	6820      	ldr	r0, [r4, #0]
 8013ca8:	1d19      	adds	r1, r3, #4
 8013caa:	6031      	str	r1, [r6, #0]
 8013cac:	0606      	lsls	r6, r0, #24
 8013cae:	d501      	bpl.n	8013cb4 <_printf_i+0xbc>
 8013cb0:	681d      	ldr	r5, [r3, #0]
 8013cb2:	e003      	b.n	8013cbc <_printf_i+0xc4>
 8013cb4:	0645      	lsls	r5, r0, #25
 8013cb6:	d5fb      	bpl.n	8013cb0 <_printf_i+0xb8>
 8013cb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013cbc:	2d00      	cmp	r5, #0
 8013cbe:	da03      	bge.n	8013cc8 <_printf_i+0xd0>
 8013cc0:	232d      	movs	r3, #45	@ 0x2d
 8013cc2:	426d      	negs	r5, r5
 8013cc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013cc8:	4858      	ldr	r0, [pc, #352]	@ (8013e2c <_printf_i+0x234>)
 8013cca:	230a      	movs	r3, #10
 8013ccc:	e011      	b.n	8013cf2 <_printf_i+0xfa>
 8013cce:	6821      	ldr	r1, [r4, #0]
 8013cd0:	6833      	ldr	r3, [r6, #0]
 8013cd2:	0608      	lsls	r0, r1, #24
 8013cd4:	f853 5b04 	ldr.w	r5, [r3], #4
 8013cd8:	d402      	bmi.n	8013ce0 <_printf_i+0xe8>
 8013cda:	0649      	lsls	r1, r1, #25
 8013cdc:	bf48      	it	mi
 8013cde:	b2ad      	uxthmi	r5, r5
 8013ce0:	2f6f      	cmp	r7, #111	@ 0x6f
 8013ce2:	4852      	ldr	r0, [pc, #328]	@ (8013e2c <_printf_i+0x234>)
 8013ce4:	6033      	str	r3, [r6, #0]
 8013ce6:	bf14      	ite	ne
 8013ce8:	230a      	movne	r3, #10
 8013cea:	2308      	moveq	r3, #8
 8013cec:	2100      	movs	r1, #0
 8013cee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013cf2:	6866      	ldr	r6, [r4, #4]
 8013cf4:	60a6      	str	r6, [r4, #8]
 8013cf6:	2e00      	cmp	r6, #0
 8013cf8:	db05      	blt.n	8013d06 <_printf_i+0x10e>
 8013cfa:	6821      	ldr	r1, [r4, #0]
 8013cfc:	432e      	orrs	r6, r5
 8013cfe:	f021 0104 	bic.w	r1, r1, #4
 8013d02:	6021      	str	r1, [r4, #0]
 8013d04:	d04b      	beq.n	8013d9e <_printf_i+0x1a6>
 8013d06:	4616      	mov	r6, r2
 8013d08:	fbb5 f1f3 	udiv	r1, r5, r3
 8013d0c:	fb03 5711 	mls	r7, r3, r1, r5
 8013d10:	5dc7      	ldrb	r7, [r0, r7]
 8013d12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013d16:	462f      	mov	r7, r5
 8013d18:	42bb      	cmp	r3, r7
 8013d1a:	460d      	mov	r5, r1
 8013d1c:	d9f4      	bls.n	8013d08 <_printf_i+0x110>
 8013d1e:	2b08      	cmp	r3, #8
 8013d20:	d10b      	bne.n	8013d3a <_printf_i+0x142>
 8013d22:	6823      	ldr	r3, [r4, #0]
 8013d24:	07df      	lsls	r7, r3, #31
 8013d26:	d508      	bpl.n	8013d3a <_printf_i+0x142>
 8013d28:	6923      	ldr	r3, [r4, #16]
 8013d2a:	6861      	ldr	r1, [r4, #4]
 8013d2c:	4299      	cmp	r1, r3
 8013d2e:	bfde      	ittt	le
 8013d30:	2330      	movle	r3, #48	@ 0x30
 8013d32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013d36:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8013d3a:	1b92      	subs	r2, r2, r6
 8013d3c:	6122      	str	r2, [r4, #16]
 8013d3e:	f8cd a000 	str.w	sl, [sp]
 8013d42:	464b      	mov	r3, r9
 8013d44:	aa03      	add	r2, sp, #12
 8013d46:	4621      	mov	r1, r4
 8013d48:	4640      	mov	r0, r8
 8013d4a:	f7ff fee7 	bl	8013b1c <_printf_common>
 8013d4e:	3001      	adds	r0, #1
 8013d50:	d14a      	bne.n	8013de8 <_printf_i+0x1f0>
 8013d52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013d56:	b004      	add	sp, #16
 8013d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d5c:	6823      	ldr	r3, [r4, #0]
 8013d5e:	f043 0320 	orr.w	r3, r3, #32
 8013d62:	6023      	str	r3, [r4, #0]
 8013d64:	4832      	ldr	r0, [pc, #200]	@ (8013e30 <_printf_i+0x238>)
 8013d66:	2778      	movs	r7, #120	@ 0x78
 8013d68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013d6c:	6823      	ldr	r3, [r4, #0]
 8013d6e:	6831      	ldr	r1, [r6, #0]
 8013d70:	061f      	lsls	r7, r3, #24
 8013d72:	f851 5b04 	ldr.w	r5, [r1], #4
 8013d76:	d402      	bmi.n	8013d7e <_printf_i+0x186>
 8013d78:	065f      	lsls	r7, r3, #25
 8013d7a:	bf48      	it	mi
 8013d7c:	b2ad      	uxthmi	r5, r5
 8013d7e:	6031      	str	r1, [r6, #0]
 8013d80:	07d9      	lsls	r1, r3, #31
 8013d82:	bf44      	itt	mi
 8013d84:	f043 0320 	orrmi.w	r3, r3, #32
 8013d88:	6023      	strmi	r3, [r4, #0]
 8013d8a:	b11d      	cbz	r5, 8013d94 <_printf_i+0x19c>
 8013d8c:	2310      	movs	r3, #16
 8013d8e:	e7ad      	b.n	8013cec <_printf_i+0xf4>
 8013d90:	4826      	ldr	r0, [pc, #152]	@ (8013e2c <_printf_i+0x234>)
 8013d92:	e7e9      	b.n	8013d68 <_printf_i+0x170>
 8013d94:	6823      	ldr	r3, [r4, #0]
 8013d96:	f023 0320 	bic.w	r3, r3, #32
 8013d9a:	6023      	str	r3, [r4, #0]
 8013d9c:	e7f6      	b.n	8013d8c <_printf_i+0x194>
 8013d9e:	4616      	mov	r6, r2
 8013da0:	e7bd      	b.n	8013d1e <_printf_i+0x126>
 8013da2:	6833      	ldr	r3, [r6, #0]
 8013da4:	6825      	ldr	r5, [r4, #0]
 8013da6:	6961      	ldr	r1, [r4, #20]
 8013da8:	1d18      	adds	r0, r3, #4
 8013daa:	6030      	str	r0, [r6, #0]
 8013dac:	062e      	lsls	r6, r5, #24
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	d501      	bpl.n	8013db6 <_printf_i+0x1be>
 8013db2:	6019      	str	r1, [r3, #0]
 8013db4:	e002      	b.n	8013dbc <_printf_i+0x1c4>
 8013db6:	0668      	lsls	r0, r5, #25
 8013db8:	d5fb      	bpl.n	8013db2 <_printf_i+0x1ba>
 8013dba:	8019      	strh	r1, [r3, #0]
 8013dbc:	2300      	movs	r3, #0
 8013dbe:	6123      	str	r3, [r4, #16]
 8013dc0:	4616      	mov	r6, r2
 8013dc2:	e7bc      	b.n	8013d3e <_printf_i+0x146>
 8013dc4:	6833      	ldr	r3, [r6, #0]
 8013dc6:	1d1a      	adds	r2, r3, #4
 8013dc8:	6032      	str	r2, [r6, #0]
 8013dca:	681e      	ldr	r6, [r3, #0]
 8013dcc:	6862      	ldr	r2, [r4, #4]
 8013dce:	2100      	movs	r1, #0
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	f7ec fa9d 	bl	8000310 <memchr>
 8013dd6:	b108      	cbz	r0, 8013ddc <_printf_i+0x1e4>
 8013dd8:	1b80      	subs	r0, r0, r6
 8013dda:	6060      	str	r0, [r4, #4]
 8013ddc:	6863      	ldr	r3, [r4, #4]
 8013dde:	6123      	str	r3, [r4, #16]
 8013de0:	2300      	movs	r3, #0
 8013de2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013de6:	e7aa      	b.n	8013d3e <_printf_i+0x146>
 8013de8:	6923      	ldr	r3, [r4, #16]
 8013dea:	4632      	mov	r2, r6
 8013dec:	4649      	mov	r1, r9
 8013dee:	4640      	mov	r0, r8
 8013df0:	47d0      	blx	sl
 8013df2:	3001      	adds	r0, #1
 8013df4:	d0ad      	beq.n	8013d52 <_printf_i+0x15a>
 8013df6:	6823      	ldr	r3, [r4, #0]
 8013df8:	079b      	lsls	r3, r3, #30
 8013dfa:	d413      	bmi.n	8013e24 <_printf_i+0x22c>
 8013dfc:	68e0      	ldr	r0, [r4, #12]
 8013dfe:	9b03      	ldr	r3, [sp, #12]
 8013e00:	4298      	cmp	r0, r3
 8013e02:	bfb8      	it	lt
 8013e04:	4618      	movlt	r0, r3
 8013e06:	e7a6      	b.n	8013d56 <_printf_i+0x15e>
 8013e08:	2301      	movs	r3, #1
 8013e0a:	4632      	mov	r2, r6
 8013e0c:	4649      	mov	r1, r9
 8013e0e:	4640      	mov	r0, r8
 8013e10:	47d0      	blx	sl
 8013e12:	3001      	adds	r0, #1
 8013e14:	d09d      	beq.n	8013d52 <_printf_i+0x15a>
 8013e16:	3501      	adds	r5, #1
 8013e18:	68e3      	ldr	r3, [r4, #12]
 8013e1a:	9903      	ldr	r1, [sp, #12]
 8013e1c:	1a5b      	subs	r3, r3, r1
 8013e1e:	42ab      	cmp	r3, r5
 8013e20:	dcf2      	bgt.n	8013e08 <_printf_i+0x210>
 8013e22:	e7eb      	b.n	8013dfc <_printf_i+0x204>
 8013e24:	2500      	movs	r5, #0
 8013e26:	f104 0619 	add.w	r6, r4, #25
 8013e2a:	e7f5      	b.n	8013e18 <_printf_i+0x220>
 8013e2c:	080142f9 	.word	0x080142f9
 8013e30:	0801430a 	.word	0x0801430a

08013e34 <__malloc_lock>:
 8013e34:	4801      	ldr	r0, [pc, #4]	@ (8013e3c <__malloc_lock+0x8>)
 8013e36:	f7ff bc67 	b.w	8013708 <__retarget_lock_acquire_recursive>
 8013e3a:	bf00      	nop
 8013e3c:	240052f0 	.word	0x240052f0

08013e40 <__malloc_unlock>:
 8013e40:	4801      	ldr	r0, [pc, #4]	@ (8013e48 <__malloc_unlock+0x8>)
 8013e42:	f7ff bc62 	b.w	801370a <__retarget_lock_release_recursive>
 8013e46:	bf00      	nop
 8013e48:	240052f0 	.word	0x240052f0

08013e4c <_realloc_r>:
 8013e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e50:	4607      	mov	r7, r0
 8013e52:	4614      	mov	r4, r2
 8013e54:	460d      	mov	r5, r1
 8013e56:	b921      	cbnz	r1, 8013e62 <_realloc_r+0x16>
 8013e58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e5c:	4611      	mov	r1, r2
 8013e5e:	f7ff bddd 	b.w	8013a1c <_malloc_r>
 8013e62:	b92a      	cbnz	r2, 8013e70 <_realloc_r+0x24>
 8013e64:	f000 f84a 	bl	8013efc <_free_r>
 8013e68:	4625      	mov	r5, r4
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013e70:	f000 f88e 	bl	8013f90 <_malloc_usable_size_r>
 8013e74:	4284      	cmp	r4, r0
 8013e76:	4606      	mov	r6, r0
 8013e78:	d802      	bhi.n	8013e80 <_realloc_r+0x34>
 8013e7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013e7e:	d8f4      	bhi.n	8013e6a <_realloc_r+0x1e>
 8013e80:	4621      	mov	r1, r4
 8013e82:	4638      	mov	r0, r7
 8013e84:	f7ff fdca 	bl	8013a1c <_malloc_r>
 8013e88:	4680      	mov	r8, r0
 8013e8a:	b908      	cbnz	r0, 8013e90 <_realloc_r+0x44>
 8013e8c:	4645      	mov	r5, r8
 8013e8e:	e7ec      	b.n	8013e6a <_realloc_r+0x1e>
 8013e90:	42b4      	cmp	r4, r6
 8013e92:	4622      	mov	r2, r4
 8013e94:	4629      	mov	r1, r5
 8013e96:	bf28      	it	cs
 8013e98:	4632      	movcs	r2, r6
 8013e9a:	f7ff fc37 	bl	801370c <memcpy>
 8013e9e:	4629      	mov	r1, r5
 8013ea0:	4638      	mov	r0, r7
 8013ea2:	f000 f82b 	bl	8013efc <_free_r>
 8013ea6:	e7f1      	b.n	8013e8c <_realloc_r+0x40>

08013ea8 <memmove>:
 8013ea8:	4288      	cmp	r0, r1
 8013eaa:	b510      	push	{r4, lr}
 8013eac:	eb01 0402 	add.w	r4, r1, r2
 8013eb0:	d902      	bls.n	8013eb8 <memmove+0x10>
 8013eb2:	4284      	cmp	r4, r0
 8013eb4:	4623      	mov	r3, r4
 8013eb6:	d807      	bhi.n	8013ec8 <memmove+0x20>
 8013eb8:	1e43      	subs	r3, r0, #1
 8013eba:	42a1      	cmp	r1, r4
 8013ebc:	d008      	beq.n	8013ed0 <memmove+0x28>
 8013ebe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013ec2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013ec6:	e7f8      	b.n	8013eba <memmove+0x12>
 8013ec8:	4402      	add	r2, r0
 8013eca:	4601      	mov	r1, r0
 8013ecc:	428a      	cmp	r2, r1
 8013ece:	d100      	bne.n	8013ed2 <memmove+0x2a>
 8013ed0:	bd10      	pop	{r4, pc}
 8013ed2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ed6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013eda:	e7f7      	b.n	8013ecc <memmove+0x24>

08013edc <_sbrk_r>:
 8013edc:	b538      	push	{r3, r4, r5, lr}
 8013ede:	4d06      	ldr	r5, [pc, #24]	@ (8013ef8 <_sbrk_r+0x1c>)
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	4604      	mov	r4, r0
 8013ee4:	4608      	mov	r0, r1
 8013ee6:	602b      	str	r3, [r5, #0]
 8013ee8:	f7f0 fbfc 	bl	80046e4 <_sbrk>
 8013eec:	1c43      	adds	r3, r0, #1
 8013eee:	d102      	bne.n	8013ef6 <_sbrk_r+0x1a>
 8013ef0:	682b      	ldr	r3, [r5, #0]
 8013ef2:	b103      	cbz	r3, 8013ef6 <_sbrk_r+0x1a>
 8013ef4:	6023      	str	r3, [r4, #0]
 8013ef6:	bd38      	pop	{r3, r4, r5, pc}
 8013ef8:	240052fc 	.word	0x240052fc

08013efc <_free_r>:
 8013efc:	b538      	push	{r3, r4, r5, lr}
 8013efe:	4605      	mov	r5, r0
 8013f00:	2900      	cmp	r1, #0
 8013f02:	d041      	beq.n	8013f88 <_free_r+0x8c>
 8013f04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f08:	1f0c      	subs	r4, r1, #4
 8013f0a:	2b00      	cmp	r3, #0
 8013f0c:	bfb8      	it	lt
 8013f0e:	18e4      	addlt	r4, r4, r3
 8013f10:	f7ff ff90 	bl	8013e34 <__malloc_lock>
 8013f14:	4a1d      	ldr	r2, [pc, #116]	@ (8013f8c <_free_r+0x90>)
 8013f16:	6813      	ldr	r3, [r2, #0]
 8013f18:	b933      	cbnz	r3, 8013f28 <_free_r+0x2c>
 8013f1a:	6063      	str	r3, [r4, #4]
 8013f1c:	6014      	str	r4, [r2, #0]
 8013f1e:	4628      	mov	r0, r5
 8013f20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f24:	f7ff bf8c 	b.w	8013e40 <__malloc_unlock>
 8013f28:	42a3      	cmp	r3, r4
 8013f2a:	d908      	bls.n	8013f3e <_free_r+0x42>
 8013f2c:	6820      	ldr	r0, [r4, #0]
 8013f2e:	1821      	adds	r1, r4, r0
 8013f30:	428b      	cmp	r3, r1
 8013f32:	bf01      	itttt	eq
 8013f34:	6819      	ldreq	r1, [r3, #0]
 8013f36:	685b      	ldreq	r3, [r3, #4]
 8013f38:	1809      	addeq	r1, r1, r0
 8013f3a:	6021      	streq	r1, [r4, #0]
 8013f3c:	e7ed      	b.n	8013f1a <_free_r+0x1e>
 8013f3e:	461a      	mov	r2, r3
 8013f40:	685b      	ldr	r3, [r3, #4]
 8013f42:	b10b      	cbz	r3, 8013f48 <_free_r+0x4c>
 8013f44:	42a3      	cmp	r3, r4
 8013f46:	d9fa      	bls.n	8013f3e <_free_r+0x42>
 8013f48:	6811      	ldr	r1, [r2, #0]
 8013f4a:	1850      	adds	r0, r2, r1
 8013f4c:	42a0      	cmp	r0, r4
 8013f4e:	d10b      	bne.n	8013f68 <_free_r+0x6c>
 8013f50:	6820      	ldr	r0, [r4, #0]
 8013f52:	4401      	add	r1, r0
 8013f54:	1850      	adds	r0, r2, r1
 8013f56:	4283      	cmp	r3, r0
 8013f58:	6011      	str	r1, [r2, #0]
 8013f5a:	d1e0      	bne.n	8013f1e <_free_r+0x22>
 8013f5c:	6818      	ldr	r0, [r3, #0]
 8013f5e:	685b      	ldr	r3, [r3, #4]
 8013f60:	6053      	str	r3, [r2, #4]
 8013f62:	4408      	add	r0, r1
 8013f64:	6010      	str	r0, [r2, #0]
 8013f66:	e7da      	b.n	8013f1e <_free_r+0x22>
 8013f68:	d902      	bls.n	8013f70 <_free_r+0x74>
 8013f6a:	230c      	movs	r3, #12
 8013f6c:	602b      	str	r3, [r5, #0]
 8013f6e:	e7d6      	b.n	8013f1e <_free_r+0x22>
 8013f70:	6820      	ldr	r0, [r4, #0]
 8013f72:	1821      	adds	r1, r4, r0
 8013f74:	428b      	cmp	r3, r1
 8013f76:	bf04      	itt	eq
 8013f78:	6819      	ldreq	r1, [r3, #0]
 8013f7a:	685b      	ldreq	r3, [r3, #4]
 8013f7c:	6063      	str	r3, [r4, #4]
 8013f7e:	bf04      	itt	eq
 8013f80:	1809      	addeq	r1, r1, r0
 8013f82:	6021      	streq	r1, [r4, #0]
 8013f84:	6054      	str	r4, [r2, #4]
 8013f86:	e7ca      	b.n	8013f1e <_free_r+0x22>
 8013f88:	bd38      	pop	{r3, r4, r5, pc}
 8013f8a:	bf00      	nop
 8013f8c:	240052f8 	.word	0x240052f8

08013f90 <_malloc_usable_size_r>:
 8013f90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f94:	1f18      	subs	r0, r3, #4
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	bfbc      	itt	lt
 8013f9a:	580b      	ldrlt	r3, [r1, r0]
 8013f9c:	18c0      	addlt	r0, r0, r3
 8013f9e:	4770      	bx	lr

08013fa0 <sqrtf>:
 8013fa0:	b508      	push	{r3, lr}
 8013fa2:	ed2d 8b02 	vpush	{d8}
 8013fa6:	eeb0 8a40 	vmov.f32	s16, s0
 8013faa:	f000 f8f2 	bl	8014192 <__ieee754_sqrtf>
 8013fae:	eeb4 8a48 	vcmp.f32	s16, s16
 8013fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fb6:	d60c      	bvs.n	8013fd2 <sqrtf+0x32>
 8013fb8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8013fd8 <sqrtf+0x38>
 8013fbc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8013fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc4:	d505      	bpl.n	8013fd2 <sqrtf+0x32>
 8013fc6:	f7ff fb75 	bl	80136b4 <__errno>
 8013fca:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8013fce:	2321      	movs	r3, #33	@ 0x21
 8013fd0:	6003      	str	r3, [r0, #0]
 8013fd2:	ecbd 8b02 	vpop	{d8}
 8013fd6:	bd08      	pop	{r3, pc}
 8013fd8:	00000000 	.word	0x00000000

08013fdc <atanf>:
 8013fdc:	b538      	push	{r3, r4, r5, lr}
 8013fde:	ee10 5a10 	vmov	r5, s0
 8013fe2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8013fe6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8013fea:	eef0 7a40 	vmov.f32	s15, s0
 8013fee:	d30f      	bcc.n	8014010 <atanf+0x34>
 8013ff0:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8013ff4:	d904      	bls.n	8014000 <atanf+0x24>
 8013ff6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8013ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8013ffe:	bd38      	pop	{r3, r4, r5, pc}
 8014000:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8014138 <atanf+0x15c>
 8014004:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 801413c <atanf+0x160>
 8014008:	2d00      	cmp	r5, #0
 801400a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 801400e:	e7f4      	b.n	8013ffa <atanf+0x1e>
 8014010:	4b4b      	ldr	r3, [pc, #300]	@ (8014140 <atanf+0x164>)
 8014012:	429c      	cmp	r4, r3
 8014014:	d810      	bhi.n	8014038 <atanf+0x5c>
 8014016:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 801401a:	d20a      	bcs.n	8014032 <atanf+0x56>
 801401c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8014144 <atanf+0x168>
 8014020:	ee30 7a07 	vadd.f32	s14, s0, s14
 8014024:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8014028:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801402c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014030:	dce3      	bgt.n	8013ffa <atanf+0x1e>
 8014032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8014036:	e013      	b.n	8014060 <atanf+0x84>
 8014038:	f000 f8a4 	bl	8014184 <fabsf>
 801403c:	4b42      	ldr	r3, [pc, #264]	@ (8014148 <atanf+0x16c>)
 801403e:	429c      	cmp	r4, r3
 8014040:	d84f      	bhi.n	80140e2 <atanf+0x106>
 8014042:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8014046:	429c      	cmp	r4, r3
 8014048:	d841      	bhi.n	80140ce <atanf+0xf2>
 801404a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801404e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8014052:	eea0 7a27 	vfma.f32	s14, s0, s15
 8014056:	2300      	movs	r3, #0
 8014058:	ee30 0a27 	vadd.f32	s0, s0, s15
 801405c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014060:	1c5a      	adds	r2, r3, #1
 8014062:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8014066:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 801414c <atanf+0x170>
 801406a:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8014150 <atanf+0x174>
 801406e:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 8014154 <atanf+0x178>
 8014072:	ee66 6a06 	vmul.f32	s13, s12, s12
 8014076:	eee6 5a87 	vfma.f32	s11, s13, s14
 801407a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8014158 <atanf+0x17c>
 801407e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014082:	eddf 5a36 	vldr	s11, [pc, #216]	@ 801415c <atanf+0x180>
 8014086:	eee7 5a26 	vfma.f32	s11, s14, s13
 801408a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8014160 <atanf+0x184>
 801408e:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8014092:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8014164 <atanf+0x188>
 8014096:	eee7 5a26 	vfma.f32	s11, s14, s13
 801409a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8014168 <atanf+0x18c>
 801409e:	eea6 5a87 	vfma.f32	s10, s13, s14
 80140a2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801416c <atanf+0x190>
 80140a6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80140aa:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 8014170 <atanf+0x194>
 80140ae:	eea7 5a26 	vfma.f32	s10, s14, s13
 80140b2:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8014174 <atanf+0x198>
 80140b6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80140ba:	ee27 7a26 	vmul.f32	s14, s14, s13
 80140be:	eea5 7a86 	vfma.f32	s14, s11, s12
 80140c2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80140c6:	d121      	bne.n	801410c <atanf+0x130>
 80140c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80140cc:	e795      	b.n	8013ffa <atanf+0x1e>
 80140ce:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80140d2:	ee30 7a67 	vsub.f32	s14, s0, s15
 80140d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80140da:	2301      	movs	r3, #1
 80140dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80140e0:	e7be      	b.n	8014060 <atanf+0x84>
 80140e2:	4b25      	ldr	r3, [pc, #148]	@ (8014178 <atanf+0x19c>)
 80140e4:	429c      	cmp	r4, r3
 80140e6:	d80b      	bhi.n	8014100 <atanf+0x124>
 80140e8:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80140ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80140f0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80140f4:	2302      	movs	r3, #2
 80140f6:	ee70 6a67 	vsub.f32	s13, s0, s15
 80140fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80140fe:	e7af      	b.n	8014060 <atanf+0x84>
 8014100:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8014104:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8014108:	2303      	movs	r3, #3
 801410a:	e7a9      	b.n	8014060 <atanf+0x84>
 801410c:	4a1b      	ldr	r2, [pc, #108]	@ (801417c <atanf+0x1a0>)
 801410e:	491c      	ldr	r1, [pc, #112]	@ (8014180 <atanf+0x1a4>)
 8014110:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014114:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8014118:	edd3 6a00 	vldr	s13, [r3]
 801411c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8014120:	2d00      	cmp	r5, #0
 8014122:	ee37 7a67 	vsub.f32	s14, s14, s15
 8014126:	edd2 7a00 	vldr	s15, [r2]
 801412a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801412e:	bfb8      	it	lt
 8014130:	eef1 7a67 	vneglt.f32	s15, s15
 8014134:	e761      	b.n	8013ffa <atanf+0x1e>
 8014136:	bf00      	nop
 8014138:	bfc90fdb 	.word	0xbfc90fdb
 801413c:	3fc90fdb 	.word	0x3fc90fdb
 8014140:	3edfffff 	.word	0x3edfffff
 8014144:	7149f2ca 	.word	0x7149f2ca
 8014148:	3f97ffff 	.word	0x3f97ffff
 801414c:	3c8569d7 	.word	0x3c8569d7
 8014150:	3d4bda59 	.word	0x3d4bda59
 8014154:	bd6ef16b 	.word	0xbd6ef16b
 8014158:	3d886b35 	.word	0x3d886b35
 801415c:	3dba2e6e 	.word	0x3dba2e6e
 8014160:	3e124925 	.word	0x3e124925
 8014164:	3eaaaaab 	.word	0x3eaaaaab
 8014168:	bd15a221 	.word	0xbd15a221
 801416c:	bd9d8795 	.word	0xbd9d8795
 8014170:	bde38e38 	.word	0xbde38e38
 8014174:	be4ccccd 	.word	0xbe4ccccd
 8014178:	401bffff 	.word	0x401bffff
 801417c:	0801432c 	.word	0x0801432c
 8014180:	0801431c 	.word	0x0801431c

08014184 <fabsf>:
 8014184:	ee10 3a10 	vmov	r3, s0
 8014188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801418c:	ee00 3a10 	vmov	s0, r3
 8014190:	4770      	bx	lr

08014192 <__ieee754_sqrtf>:
 8014192:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8014196:	4770      	bx	lr

08014198 <_init>:
 8014198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801419a:	bf00      	nop
 801419c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801419e:	bc08      	pop	{r3}
 80141a0:	469e      	mov	lr, r3
 80141a2:	4770      	bx	lr

080141a4 <_fini>:
 80141a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141a6:	bf00      	nop
 80141a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80141aa:	bc08      	pop	{r3}
 80141ac:	469e      	mov	lr, r3
 80141ae:	4770      	bx	lr
