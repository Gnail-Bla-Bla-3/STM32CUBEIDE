
SuperCapController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000134dc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080137ac  080137ac  000147ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013900  08013900  00014900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013908  08013908  00014908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801390c  0801390c  0001490c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000064  24000000  08013910  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005290  24000064  08013974  00015064  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240052f4  08013974  000152f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00015064  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002b9b6  00000000  00000000  00015092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004b0f  00000000  00000000  00040a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002358  00000000  00000000  00045558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001bbe  00000000  00000000  000478b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039c9e  00000000  00000000  0004946e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002c6e7  00000000  00000000  0008310c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00178dbf  00000000  00000000  000af7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  002285b2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009e8c  00000000  00000000  002285f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000079  00000000  00000000  00232484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000064 	.word	0x24000064
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08013794 	.word	0x08013794

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000068 	.word	0x24000068
 800030c:	08013794 	.word	0x08013794

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <bsp_can_init>:
motorFeedback_t motorFeedback[2][11];
PID_data_t PID_data[2][11];

static uint8_t CAN_MotorSendBuffer[8];

void bsp_can_init(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	//MX_FDCAN1_Init();
	//MX_FDCAN2_Init();
	//MX_FDCAN3_Init();
	can_filter_init();
 80006a4:	f000 f822 	bl	80006ec <can_filter_init>
	HAL_FDCAN_Start(&hfdcan1);
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <bsp_can_init+0x40>)
 80006aa:	f008 fef6 	bl	800949a <HAL_FDCAN_Start>
	HAL_FDCAN_Start(&hfdcan2);
 80006ae:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <bsp_can_init+0x44>)
 80006b0:	f008 fef3 	bl	800949a <HAL_FDCAN_Start>
	HAL_FDCAN_Start(&hfdcan3);
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <bsp_can_init+0x48>)
 80006b6:	f008 fef0 	bl	800949a <HAL_FDCAN_Start>
	//HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_BUS_OFF, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80006c0:	4807      	ldr	r0, [pc, #28]	@ (80006e0 <bsp_can_init+0x40>)
 80006c2:	f009 f8dd 	bl	8009880 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(&hfdcan2, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2101      	movs	r1, #1
 80006ca:	4806      	ldr	r0, [pc, #24]	@ (80006e4 <bsp_can_init+0x44>)
 80006cc:	f009 f8d8 	bl	8009880 <HAL_FDCAN_ActivateNotification>
	HAL_FDCAN_ActivateNotification(&hfdcan3, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2101      	movs	r1, #1
 80006d4:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <bsp_can_init+0x48>)
 80006d6:	f009 f8d3 	bl	8009880 <HAL_FDCAN_ActivateNotification>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	24000960 	.word	0x24000960
 80006e4:	24000a00 	.word	0x24000a00
 80006e8:	24000aa0 	.word	0x24000aa0

080006ec <can_filter_init>:

void can_filter_init(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	@ 0x28
 80006f0:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef fdcan_filter;
	fdcan_filter.IdType = FDCAN_STANDARD_ID;
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
	fdcan_filter.FilterIndex = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
	fdcan_filter.FilterType = FDCAN_FILTER_MASK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60bb      	str	r3, [r7, #8]
	fdcan_filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006fe:	2301      	movs	r3, #1
 8000700:	60fb      	str	r3, [r7, #12]
	fdcan_filter.FilterID1 = 0x00;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
	fdcan_filter.FilterID2 = 0x00;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1,&fdcan_filter);
 800070a:	463b      	mov	r3, r7
 800070c:	4619      	mov	r1, r3
 800070e:	480a      	ldr	r0, [pc, #40]	@ (8000738 <can_filter_init+0x4c>)
 8000710:	f008 fdd4 	bl	80092bc <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1,FDCAN_REJECT,FDCAN_REJECT,FDCAN_REJECT_REMOTE,FDCAN_REJECT_REMOTE);
 8000714:	2301      	movs	r3, #1
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	2301      	movs	r3, #1
 800071a:	2202      	movs	r2, #2
 800071c:	2102      	movs	r1, #2
 800071e:	4806      	ldr	r0, [pc, #24]	@ (8000738 <can_filter_init+0x4c>)
 8000720:	f008 fe42 	bl	80093a8 <HAL_FDCAN_ConfigGlobalFilter>
	HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO0, 1);
 8000724:	2201      	movs	r2, #1
 8000726:	2101      	movs	r1, #1
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <can_filter_init+0x4c>)
 800072a:	f008 fe6a 	bl	8009402 <HAL_FDCAN_ConfigFifoWatermark>
//	HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO1, 1);
	//HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_TX_COMPLETE, FDCAN_TX_BUFFER0);
}
 800072e:	bf00      	nop
 8000730:	3720      	adds	r7, #32
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	24000960 	.word	0x24000960

0800073c <CANFD_GetRxHeaderDataLength>:

uint8_t CANFD_GetRxHeaderDataLength(FDCAN_RxHeaderTypeDef header) {
 800073c:	b084      	sub	sp, #16
 800073e:	b480      	push	{r7}
 8000740:	b083      	sub	sp, #12
 8000742:	af00      	add	r7, sp, #0
 8000744:	f107 0c10 	add.w	ip, r7, #16
 8000748:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t len;
	if(header.DataLength<=FDCAN_DLC_BYTES_8)
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	2b08      	cmp	r3, #8
 8000750:	d801      	bhi.n	8000756 <CANFD_GetRxHeaderDataLength+0x1a>
		len = header.DataLength;
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_12)
 8000756:	69fb      	ldr	r3, [r7, #28]
 8000758:	2b09      	cmp	r3, #9
 800075a:	d801      	bhi.n	8000760 <CANFD_GetRxHeaderDataLength+0x24>
		len = 12;
 800075c:	230c      	movs	r3, #12
 800075e:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_16)
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	2b0a      	cmp	r3, #10
 8000764:	d801      	bhi.n	800076a <CANFD_GetRxHeaderDataLength+0x2e>
		len = 16;
 8000766:	2310      	movs	r3, #16
 8000768:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_20)
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	2b0b      	cmp	r3, #11
 800076e:	d801      	bhi.n	8000774 <CANFD_GetRxHeaderDataLength+0x38>
		len = 20;
 8000770:	2314      	movs	r3, #20
 8000772:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_24)
 8000774:	69fb      	ldr	r3, [r7, #28]
 8000776:	2b0c      	cmp	r3, #12
 8000778:	d801      	bhi.n	800077e <CANFD_GetRxHeaderDataLength+0x42>
		len = 24;
 800077a:	2318      	movs	r3, #24
 800077c:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_32)
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	2b0d      	cmp	r3, #13
 8000782:	d801      	bhi.n	8000788 <CANFD_GetRxHeaderDataLength+0x4c>
		len = 32;
 8000784:	2320      	movs	r3, #32
 8000786:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_48)
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	2b0e      	cmp	r3, #14
 800078c:	d801      	bhi.n	8000792 <CANFD_GetRxHeaderDataLength+0x56>
		len = 48;
 800078e:	2330      	movs	r3, #48	@ 0x30
 8000790:	71fb      	strb	r3, [r7, #7]
	if(header.DataLength<=FDCAN_DLC_BYTES_64)
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d801      	bhi.n	800079c <CANFD_GetRxHeaderDataLength+0x60>
		len = 64;
 8000798:	2340      	movs	r3, #64	@ 0x40
 800079a:	71fb      	strb	r3, [r7, #7]
	return len;
 800079c:	79fb      	ldrb	r3, [r7, #7]
}
 800079e:	4618      	mov	r0, r3
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	b004      	add	sp, #16
 80007aa:	4770      	bx	lr

080007ac <CANFD_GetTxHeaderDataLength>:

uint32_t CANFD_GetTxHeaderDataLength(uint32_t len) {
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	uint32_t length = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
	if(len<=8)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d801      	bhi.n	80007c2 <CANFD_GetTxHeaderDataLength+0x16>
		length = len;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60fb      	str	r3, [r7, #12]
	if(len==12)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0c      	cmp	r3, #12
 80007c6:	d101      	bne.n	80007cc <CANFD_GetTxHeaderDataLength+0x20>
		length = FDCAN_DLC_BYTES_12;
 80007c8:	2309      	movs	r3, #9
 80007ca:	60fb      	str	r3, [r7, #12]
	if(len==16)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b10      	cmp	r3, #16
 80007d0:	d101      	bne.n	80007d6 <CANFD_GetTxHeaderDataLength+0x2a>
		length = FDCAN_DLC_BYTES_16;
 80007d2:	230a      	movs	r3, #10
 80007d4:	60fb      	str	r3, [r7, #12]
	if(len==20)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2b14      	cmp	r3, #20
 80007da:	d101      	bne.n	80007e0 <CANFD_GetTxHeaderDataLength+0x34>
		length = FDCAN_DLC_BYTES_20;
 80007dc:	230b      	movs	r3, #11
 80007de:	60fb      	str	r3, [r7, #12]
	if(len==24)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b18      	cmp	r3, #24
 80007e4:	d101      	bne.n	80007ea <CANFD_GetTxHeaderDataLength+0x3e>
		length = FDCAN_DLC_BYTES_24;
 80007e6:	230c      	movs	r3, #12
 80007e8:	60fb      	str	r3, [r7, #12]
	if(len==32)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	2b20      	cmp	r3, #32
 80007ee:	d101      	bne.n	80007f4 <CANFD_GetTxHeaderDataLength+0x48>
		length = FDCAN_DLC_BYTES_32;
 80007f0:	230d      	movs	r3, #13
 80007f2:	60fb      	str	r3, [r7, #12]
	if(len==48)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b30      	cmp	r3, #48	@ 0x30
 80007f8:	d101      	bne.n	80007fe <CANFD_GetTxHeaderDataLength+0x52>
		length = FDCAN_DLC_BYTES_48;
 80007fa:	230e      	movs	r3, #14
 80007fc:	60fb      	str	r3, [r7, #12]
	if(len==64)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b40      	cmp	r3, #64	@ 0x40
 8000802:	d101      	bne.n	8000808 <CANFD_GetTxHeaderDataLength+0x5c>
		length = FDCAN_DLC_BYTES_64;
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
	return length;
 8000808:	68fb      	ldr	r3, [r7, #12]
}
 800080a:	4618      	mov	r0, r3
 800080c:	3714      	adds	r7, #20
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr

08000816 <fdcanx_send_data>:

uint8_t fdcanx_send_data(hcan_t *hfdcan, uint16_t id, uint8_t *data, uint32_t len) {
 8000816:	b580      	push	{r7, lr}
 8000818:	b08e      	sub	sp, #56	@ 0x38
 800081a:	af00      	add	r7, sp, #0
 800081c:	60f8      	str	r0, [r7, #12]
 800081e:	607a      	str	r2, [r7, #4]
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	460b      	mov	r3, r1
 8000824:	817b      	strh	r3, [r7, #10]
    FDCAN_TxHeaderTypeDef pTxHeader;
    pTxHeader.Identifier=id;
 8000826:	897b      	ldrh	r3, [r7, #10]
 8000828:	617b      	str	r3, [r7, #20]
    pTxHeader.IdType=FDCAN_STANDARD_ID;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
    pTxHeader.TxFrameType=FDCAN_DATA_FRAME;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
    pTxHeader.DataLength = CANFD_GetTxHeaderDataLength(len);
 8000832:	6838      	ldr	r0, [r7, #0]
 8000834:	f7ff ffba 	bl	80007ac <CANFD_GetTxHeaderDataLength>
 8000838:	4603      	mov	r3, r0
 800083a:	623b      	str	r3, [r7, #32]
    pTxHeader.ErrorStateIndicator=FDCAN_ESI_ACTIVE;
 800083c:	2300      	movs	r3, #0
 800083e:	627b      	str	r3, [r7, #36]	@ 0x24
    pTxHeader.BitRateSwitch=FDCAN_BRS_ON;
 8000840:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000844:	62bb      	str	r3, [r7, #40]	@ 0x28
    pTxHeader.FDFormat=FDCAN_FD_CAN;
 8000846:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800084a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pTxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
 800084c:	2300      	movs	r3, #0
 800084e:	633b      	str	r3, [r7, #48]	@ 0x30
    pTxHeader.MessageMarker=0;
 8000850:	2300      	movs	r3, #0
 8000852:	637b      	str	r3, [r7, #52]	@ 0x34
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &pTxHeader, data);
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4619      	mov	r1, r3
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f008 fe47 	bl	80094f0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000862:	4603      	mov	r3, r0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3738      	adds	r7, #56	@ 0x38
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <fdcanx_receive>:
    pTxHeader.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
    pTxHeader.MessageMarker=0;
    return HAL_FDCAN_AddMessageToTxFifoQ(hfdcan, &pTxHeader, data);
}

uint8_t fdcanx_receive(hcan_t *hfdcan, uint32_t *rec_id, uint8_t *buf) {
 800086c:	b5b0      	push	{r4, r5, r7, lr}
 800086e:	b094      	sub	sp, #80	@ 0x50
 8000870:	af06      	add	r7, sp, #24
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
	FDCAN_RxHeaderTypeDef pRxHeader;
	if(HAL_FDCAN_GetRxMessage(hfdcan ,FDCAN_RX_FIFO0, &pRxHeader, buf)==HAL_OK) {
 8000878:	f107 0210 	add.w	r2, r7, #16
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2140      	movs	r1, #64	@ 0x40
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f008 fe91 	bl	80095a8 <HAL_FDCAN_GetRxMessage>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d112      	bne.n	80008b2 <fdcanx_receive+0x46>
		*rec_id = pRxHeader.Identifier;
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	601a      	str	r2, [r3, #0]
		return CANFD_GetRxHeaderDataLength(pRxHeader);
 8000892:	466d      	mov	r5, sp
 8000894:	f107 0420 	add.w	r4, r7, #32
 8000898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800089a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800089c:	e894 0003 	ldmia.w	r4, {r0, r1}
 80008a0:	e885 0003 	stmia.w	r5, {r0, r1}
 80008a4:	f107 0310 	add.w	r3, r7, #16
 80008a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008aa:	f7ff ff47 	bl	800073c <CANFD_GetRxHeaderDataLength>
 80008ae:	4603      	mov	r3, r0
 80008b0:	e000      	b.n	80008b4 <fdcanx_receive+0x48>
	}
	return 0;
 80008b2:	2300      	movs	r3, #0
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3738      	adds	r7, #56	@ 0x38
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bdb0      	pop	{r4, r5, r7, pc}

080008bc <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint8_t rx_data[8] = {0};
 80008c6:	2300      	movs	r3, #0
 80008c8:	61fb      	str	r3, [r7, #28]
 80008ca:	2300      	movs	r3, #0
 80008cc:	623b      	str	r3, [r7, #32]
	uint32_t rec_id;
	uint8_t rxDecodeBuffer1[4] = {0};
 80008ce:	2300      	movs	r3, #0
 80008d0:	617b      	str	r3, [r7, #20]
	uint16_t rxDecodeBuffer2[4] = {0};
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
	fdcanx_receive(hfdcan, &rec_id, rx_data);
 80008dc:	f107 021c 	add.w	r2, r7, #28
 80008e0:	f107 0318 	add.w	r3, r7, #24
 80008e4:	4619      	mov	r1, r3
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ffc0 	bl	800086c <fdcanx_receive>
	//usart_printf("CAN_Recv = %x %x %x %x %x %x %x %x\r\n", rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5], rx_data[6], rx_data[7]);
	if (hfdcan == &hfdcan1) {		// DJI motors
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4a58      	ldr	r2, [pc, #352]	@ (8000a50 <HAL_FDCAN_RxFifo0Callback+0x194>)
 80008f0:	4293      	cmp	r3, r2
 80008f2:	d165      	bne.n	80009c0 <HAL_FDCAN_RxFifo0Callback+0x104>
		switch (rec_id) {
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 80008fa:	d25e      	bcs.n	80009ba <HAL_FDCAN_RxFifo0Callback+0xfe>
 80008fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000900:	d818      	bhi.n	8000934 <HAL_FDCAN_RxFifo0Callback+0x78>
 8000902:	2b7f      	cmp	r3, #127	@ 0x7f
 8000904:	d054      	beq.n	80009b0 <HAL_FDCAN_RxFifo0Callback+0xf4>
 8000906:	2b7f      	cmp	r3, #127	@ 0x7f
 8000908:	d357      	bcc.n	80009ba <HAL_FDCAN_RxFifo0Callback+0xfe>
 800090a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800090e:	d854      	bhi.n	80009ba <HAL_FDCAN_RxFifo0Callback+0xfe>
 8000910:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000914:	d951      	bls.n	80009ba <HAL_FDCAN_RxFifo0Callback+0xfe>
 8000916:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800091a:	2b03      	cmp	r3, #3
 800091c:	d84d      	bhi.n	80009ba <HAL_FDCAN_RxFifo0Callback+0xfe>
 800091e:	a201      	add	r2, pc, #4	@ (adr r2, 8000924 <HAL_FDCAN_RxFifo0Callback+0x68>)
 8000920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000924:	080009bb 	.word	0x080009bb
 8000928:	080009bb 	.word	0x080009bb
 800092c:	080009bb 	.word	0x080009bb
 8000930:	080009bb 	.word	0x080009bb
			case CAN_G2M3_ID:
			case CAN_G2M4_ID:
			case CAN_G3M1_ID:
			case CAN_G3M2_ID:
			case CAN_G3M3_ID: {
				uint8_t i = rec_id - CAN_G1M1_ID;  // get motor id
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	b2db      	uxtb	r3, r3
 8000938:	3b01      	subs	r3, #1
 800093a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (hfdcan == &hfdcan1) {
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a43      	ldr	r2, [pc, #268]	@ (8000a50 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d13b      	bne.n	80009be <HAL_FDCAN_RxFifo0Callback+0x102>
					get_motor_feedback(&motorFeedback[0][i], rx_data);
 8000946:	7f3b      	ldrb	r3, [r7, #28]
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	b21a      	sxth	r2, r3
 800094c:	7f7b      	ldrb	r3, [r7, #29]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21a      	sxth	r2, r3
 8000954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000958:	b291      	uxth	r1, r2
 800095a:	4a3e      	ldr	r2, [pc, #248]	@ (8000a54 <HAL_FDCAN_RxFifo0Callback+0x198>)
 800095c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8000960:	7fbb      	ldrb	r3, [r7, #30]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	b219      	sxth	r1, r3
 8000966:	7ffb      	ldrb	r3, [r7, #31]
 8000968:	b21a      	sxth	r2, r3
 800096a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800096e:	430a      	orrs	r2, r1
 8000970:	b211      	sxth	r1, r2
 8000972:	4a38      	ldr	r2, [pc, #224]	@ (8000a54 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	4413      	add	r3, r2
 8000978:	460a      	mov	r2, r1
 800097a:	805a      	strh	r2, [r3, #2]
 800097c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000980:	021b      	lsls	r3, r3, #8
 8000982:	b219      	sxth	r1, r3
 8000984:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000988:	b21a      	sxth	r2, r3
 800098a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800098e:	430a      	orrs	r2, r1
 8000990:	b211      	sxth	r1, r2
 8000992:	4a30      	ldr	r2, [pc, #192]	@ (8000a54 <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	4413      	add	r3, r2
 8000998:	460a      	mov	r2, r1
 800099a:	809a      	strh	r2, [r3, #4]
 800099c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80009a0:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80009a4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a54 <HAL_FDCAN_RxFifo0Callback+0x198>)
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	4413      	add	r3, r2
 80009aa:	460a      	mov	r2, r1
 80009ac:	719a      	strb	r2, [r3, #6]
				} else if (0) {
					get_motor_feedback(&motorFeedback[1][i], rx_data);
				}
				break;
 80009ae:	e006      	b.n	80009be <HAL_FDCAN_RxFifo0Callback+0x102>
			}
			case 0X7F:
				usart_printf("got something = %d\r\n", 0);
 80009b0:	2100      	movs	r1, #0
 80009b2:	4829      	ldr	r0, [pc, #164]	@ (8000a58 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 80009b4:	f000 fc56 	bl	8001264 <usart_printf>
				break;
 80009b8:	e002      	b.n	80009c0 <HAL_FDCAN_RxFifo0Callback+0x104>
				//memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
				break;
			}

			default: {
				break;
 80009ba:	bf00      	nop
 80009bc:	e000      	b.n	80009c0 <HAL_FDCAN_RxFifo0Callback+0x104>
				break;
 80009be:	bf00      	nop
			}
		}
	}
	if (hfdcan == &hfdcan2) {	//cybergear motors
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a26      	ldr	r2, [pc, #152]	@ (8000a5c <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d13e      	bne.n	8000a46 <HAL_FDCAN_RxFifo0Callback+0x18a>

		rxDecodeBuffer1[0] = rec_id;				// [bit 0 - 15] Target Header ID
 80009c8:	69bb      	ldr	r3, [r7, #24]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	753b      	strb	r3, [r7, #20]
		rxDecodeBuffer1[1] = rec_id >> 8;		// [bit 8 - 15] Motor ID
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	0a1b      	lsrs	r3, r3, #8
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	757b      	strb	r3, [r7, #21]
		rxDecodeBuffer1[2] = rec_id >> 16;		// [bit 16 - 23] Run Mode & Error Info
 80009d6:	69bb      	ldr	r3, [r7, #24]
 80009d8:	0c1b      	lsrs	r3, r3, #16
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	75bb      	strb	r3, [r7, #22]
		rxDecodeBuffer1[3] = rec_id >> 24;		// [bit 24 - 28] Communication Type
 80009de:	69bb      	ldr	r3, [r7, #24]
 80009e0:	0e1b      	lsrs	r3, r3, #24
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	75fb      	strb	r3, [r7, #23]
		rxDecodeBuffer2[0] = rx_data[0]<<8|rx_data[1];	// [byte 0 - 1] Angular Position (-4pi ~ 4pi)
 80009e6:	7f3b      	ldrb	r3, [r7, #28]
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	b21a      	sxth	r2, r3
 80009ec:	7f7b      	ldrb	r3, [r7, #29]
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	4313      	orrs	r3, r2
 80009f2:	b21b      	sxth	r3, r3
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	81bb      	strh	r3, [r7, #12]
		rxDecodeBuffer2[1] = rx_data[2]<<8|rx_data[3];	// [byte 2 - 3] Angular Velocity in Radians
 80009f8:	7fbb      	ldrb	r3, [r7, #30]
 80009fa:	021b      	lsls	r3, r3, #8
 80009fc:	b21a      	sxth	r2, r3
 80009fe:	7ffb      	ldrb	r3, [r7, #31]
 8000a00:	b21b      	sxth	r3, r3
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b21b      	sxth	r3, r3
 8000a06:	b29b      	uxth	r3, r3
 8000a08:	81fb      	strh	r3, [r7, #14]
		rxDecodeBuffer2[2] = rx_data[4]<<8|rx_data[5];	// [byte 4 - 5] Torque in Nm
 8000a0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a0e:	021b      	lsls	r3, r3, #8
 8000a10:	b21a      	sxth	r2, r3
 8000a12:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000a16:	b21b      	sxth	r3, r3
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	b21b      	sxth	r3, r3
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	823b      	strh	r3, [r7, #16]
		rxDecodeBuffer2[3] = rx_data[6]<<8|rx_data[7];	// [byte 6 - 7] Temperature in x10C
 8000a20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	827b      	strh	r3, [r7, #18]
		//usart_printf("CAN_Recv = %x %x %x %x %x %x %x %x\r\n", rx_data[0], rx_data[1], rx_data[2], rx_data[3], rx_data[4], rx_data[5], rx_data[6], rx_data[7]);
		//usart_printf("CAN_Recv = %d\r\n", rxDecodeBuffer2[0]);
		cybergear_rx_callback(rxDecodeBuffer1, rxDecodeBuffer2);
 8000a36:	f107 020c 	add.w	r2, r7, #12
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4611      	mov	r1, r2
 8000a40:	4618      	mov	r0, r3
 8000a42:	f000 fd67 	bl	8001514 <cybergear_rx_callback>
	}

}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	@ 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	24000960 	.word	0x24000960
 8000a54:	240000b0 	.word	0x240000b0
 8000a58:	080137ac 	.word	0x080137ac
 8000a5c:	24000a00 	.word	0x24000a00

08000a60 <CAN_DriveMotor>:

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	4611      	mov	r1, r2
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	73fb      	strb	r3, [r7, #15]
 8000a70:	460b      	mov	r3, r1
 8000a72:	81bb      	strh	r3, [r7, #12]
 8000a74:	4613      	mov	r3, r2
 8000a76:	80fb      	strh	r3, [r7, #6]
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8000a78:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a7c:	121b      	asrs	r3, r3, #8
 8000a7e:	b21b      	sxth	r3, r3
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b25      	ldr	r3, [pc, #148]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000a84:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8000a86:	89bb      	ldrh	r3, [r7, #12]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000a8c:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8000a8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a92:	121b      	asrs	r3, r3, #8
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b1f      	ldr	r3, [pc, #124]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000a9a:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8000a9c:	88fb      	ldrh	r3, [r7, #6]
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000aa2:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 8000aa4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000aa8:	121b      	asrs	r3, r3, #8
 8000aaa:	b21b      	sxth	r3, r3
 8000aac:	b2da      	uxtb	r2, r3
 8000aae:	4b1a      	ldr	r3, [pc, #104]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000ab0:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8000ab2:	8b3b      	ldrh	r3, [r7, #24]
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000ab8:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8000aba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8000abe:	121b      	asrs	r3, r3, #8
 8000ac0:	b21b      	sxth	r3, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b14      	ldr	r3, [pc, #80]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000ac6:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8000ac8:	8bbb      	ldrh	r3, [r7, #28]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b12      	ldr	r3, [pc, #72]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000ace:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8000ad0:	7bfb      	ldrb	r3, [r7, #15]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d107      	bne.n	8000ae6 <CAN_DriveMotor+0x86>
    	fdcanx_send_data(&hfdcan1, headerID, CAN_MotorSendBuffer, 8);
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	b299      	uxth	r1, r3
 8000ada:	2308      	movs	r3, #8
 8000adc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000ade:	480f      	ldr	r0, [pc, #60]	@ (8000b1c <CAN_DriveMotor+0xbc>)
 8000ae0:	f7ff fe99 	bl	8000816 <fdcanx_send_data>
    	fdcanx_send_data(&hfdcan2, headerID, CAN_MotorSendBuffer, 8);
    } else if (bus == 3) {
    	fdcanx_send_data(&hfdcan3, headerID, CAN_MotorSendBuffer, 8);
    } else {      // do nothing
    }
}
 8000ae4:	e014      	b.n	8000b10 <CAN_DriveMotor+0xb0>
    } else if (bus == 2) {
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	2b02      	cmp	r3, #2
 8000aea:	d107      	bne.n	8000afc <CAN_DriveMotor+0x9c>
    	fdcanx_send_data(&hfdcan2, headerID, CAN_MotorSendBuffer, 8);
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	b299      	uxth	r1, r3
 8000af0:	2308      	movs	r3, #8
 8000af2:	4a09      	ldr	r2, [pc, #36]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000af4:	480a      	ldr	r0, [pc, #40]	@ (8000b20 <CAN_DriveMotor+0xc0>)
 8000af6:	f7ff fe8e 	bl	8000816 <fdcanx_send_data>
}
 8000afa:	e009      	b.n	8000b10 <CAN_DriveMotor+0xb0>
    } else if (bus == 3) {
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d106      	bne.n	8000b10 <CAN_DriveMotor+0xb0>
    	fdcanx_send_data(&hfdcan3, headerID, CAN_MotorSendBuffer, 8);
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	b299      	uxth	r1, r3
 8000b06:	2308      	movs	r3, #8
 8000b08:	4a03      	ldr	r2, [pc, #12]	@ (8000b18 <CAN_DriveMotor+0xb8>)
 8000b0a:	4806      	ldr	r0, [pc, #24]	@ (8000b24 <CAN_DriveMotor+0xc4>)
 8000b0c:	f7ff fe83 	bl	8000816 <fdcanx_send_data>
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	240002c0 	.word	0x240002c0
 8000b1c:	24000960 	.word	0x24000960
 8000b20:	24000a00 	.word	0x24000a00
 8000b24:	24000aa0 	.word	0x24000aa0

08000b28 <CAN_setMotorCtrlVal>:

		}
	}
}

void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8000b28:	b5b0      	push	{r4, r5, r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af02      	add	r7, sp, #8
 8000b2e:	4604      	mov	r4, r0
 8000b30:	4608      	mov	r0, r1
 8000b32:	4611      	mov	r1, r2
 8000b34:	461a      	mov	r2, r3
 8000b36:	4623      	mov	r3, r4
 8000b38:	71fb      	strb	r3, [r7, #7]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71bb      	strb	r3, [r7, #6]
 8000b3e:	460b      	mov	r3, r1
 8000b40:	717b      	strb	r3, [r7, #5]
 8000b42:	4613      	mov	r3, r2
 8000b44:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8000b46:	79bb      	ldrb	r3, [r7, #6]
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	f000 8142 	beq.w	8000dd2 <CAN_setMotorCtrlVal+0x2aa>
 8000b4e:	2b04      	cmp	r3, #4
 8000b50:	f300 81e1 	bgt.w	8000f16 <CAN_setMotorCtrlVal+0x3ee>
 8000b54:	2b02      	cmp	r3, #2
 8000b56:	dc02      	bgt.n	8000b5e <CAN_setMotorCtrlVal+0x36>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dc04      	bgt.n	8000b66 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8000b5c:	e1db      	b.n	8000f16 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 8000b5e:	2b03      	cmp	r3, #3
 8000b60:	f000 8097 	beq.w	8000c92 <CAN_setMotorCtrlVal+0x16a>
}
 8000b64:	e1d7      	b.n	8000f16 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000b66:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	dc02      	bgt.n	8000b74 <CAN_setMotorCtrlVal+0x4c>
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	dc05      	bgt.n	8000b7e <CAN_setMotorCtrlVal+0x56>
					break;
 8000b72:	e08c      	b.n	8000c8e <CAN_setMotorCtrlVal+0x166>
 8000b74:	3b05      	subs	r3, #5
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	f200 8089 	bhi.w	8000c8e <CAN_setMotorCtrlVal+0x166>
 8000b7c:	e042      	b.n	8000c04 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	1e5a      	subs	r2, r3, #1
 8000b82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000b86:	1e59      	subs	r1, r3, #1
 8000b88:	48bd      	ldr	r0, [pc, #756]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	440b      	add	r3, r1
 8000b94:	887a      	ldrh	r2, [r7, #2]
 8000b96:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	49b8      	ldr	r1, [pc, #736]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	4413      	add	r3, r2
 8000ba6:	00db      	lsls	r3, r3, #3
 8000ba8:	440b      	add	r3, r1
 8000baa:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	1e5a      	subs	r2, r3, #1
 8000bb2:	49b3      	ldr	r1, [pc, #716]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	4413      	add	r3, r2
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	440b      	add	r3, r1
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	1e5a      	subs	r2, r3, #1
 8000bc8:	49ad      	ldr	r1, [pc, #692]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000bca:	4613      	mov	r3, r2
 8000bcc:	005b      	lsls	r3, r3, #1
 8000bce:	4413      	add	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	440b      	add	r3, r1
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	1e5a      	subs	r2, r3, #1
 8000bde:	48a8      	ldr	r0, [pc, #672]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000be0:	4613      	mov	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	4413      	add	r3, r2
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4403      	add	r3, r0
 8000bea:	3306      	adds	r3, #6
 8000bec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bf0:	79f8      	ldrb	r0, [r7, #7]
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	9100      	str	r1, [sp, #0]
 8000bf6:	462b      	mov	r3, r5
 8000bf8:	4622      	mov	r2, r4
 8000bfa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bfe:	f7ff ff2f 	bl	8000a60 <CAN_DriveMotor>
					break;
 8000c02:	e045      	b.n	8000c90 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	1e5a      	subs	r2, r3, #1
 8000c08:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c0c:	1f59      	subs	r1, r3, #5
 8000c0e:	489c      	ldr	r0, [pc, #624]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000c10:	4613      	mov	r3, r2
 8000c12:	005b      	lsls	r3, r3, #1
 8000c14:	4413      	add	r3, r2
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	440b      	add	r3, r1
 8000c1a:	3304      	adds	r3, #4
 8000c1c:	887a      	ldrh	r2, [r7, #2]
 8000c1e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	1e5a      	subs	r2, r3, #1
 8000c26:	4996      	ldr	r1, [pc, #600]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000c28:	4613      	mov	r3, r2
 8000c2a:	005b      	lsls	r3, r3, #1
 8000c2c:	4413      	add	r3, r2
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	440b      	add	r3, r1
 8000c32:	3308      	adds	r3, #8
 8000c34:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	1e5a      	subs	r2, r3, #1
 8000c3c:	4990      	ldr	r1, [pc, #576]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000c3e:	4613      	mov	r3, r2
 8000c40:	005b      	lsls	r3, r3, #1
 8000c42:	4413      	add	r3, r2
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	440b      	add	r3, r1
 8000c48:	330a      	adds	r3, #10
 8000c4a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	498b      	ldr	r1, [pc, #556]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000c54:	4613      	mov	r3, r2
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	4413      	add	r3, r2
 8000c5a:	00db      	lsls	r3, r3, #3
 8000c5c:	440b      	add	r3, r1
 8000c5e:	330c      	adds	r3, #12
 8000c60:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	1e5a      	subs	r2, r3, #1
 8000c68:	4885      	ldr	r0, [pc, #532]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4403      	add	r3, r0
 8000c74:	330e      	adds	r3, #14
 8000c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c7a:	79f8      	ldrb	r0, [r7, #7]
 8000c7c:	9301      	str	r3, [sp, #4]
 8000c7e:	9100      	str	r1, [sp, #0]
 8000c80:	462b      	mov	r3, r5
 8000c82:	4622      	mov	r2, r4
 8000c84:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000c88:	f7ff feea 	bl	8000a60 <CAN_DriveMotor>
					break;
 8000c8c:	e000      	b.n	8000c90 <CAN_setMotorCtrlVal+0x168>
					break;
 8000c8e:	bf00      	nop
			break;
 8000c90:	e141      	b.n	8000f16 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000c92:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000c96:	2b08      	cmp	r3, #8
 8000c98:	f000 8097 	beq.w	8000dca <CAN_setMotorCtrlVal+0x2a2>
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	f300 8096 	bgt.w	8000dce <CAN_setMotorCtrlVal+0x2a6>
 8000ca2:	2b04      	cmp	r3, #4
 8000ca4:	dc02      	bgt.n	8000cac <CAN_setMotorCtrlVal+0x184>
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	dc05      	bgt.n	8000cb6 <CAN_setMotorCtrlVal+0x18e>
					break;
 8000caa:	e090      	b.n	8000dce <CAN_setMotorCtrlVal+0x2a6>
 8000cac:	3b05      	subs	r3, #5
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	f200 808d 	bhi.w	8000dce <CAN_setMotorCtrlVal+0x2a6>
 8000cb4:	e044      	b.n	8000d40 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000cbe:	1e59      	subs	r1, r3, #1
 8000cc0:	486f      	ldr	r0, [pc, #444]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	009b      	lsls	r3, r3, #2
 8000cca:	440b      	add	r3, r1
 8000ccc:	3304      	adds	r3, #4
 8000cce:	887a      	ldrh	r2, [r7, #2]
 8000cd0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	4969      	ldr	r1, [pc, #420]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000cda:	4613      	mov	r3, r2
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	4413      	add	r3, r2
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	440b      	add	r3, r1
 8000ce4:	3308      	adds	r3, #8
 8000ce6:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	1e5a      	subs	r2, r3, #1
 8000cee:	4964      	ldr	r1, [pc, #400]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	4413      	add	r3, r2
 8000cf6:	00db      	lsls	r3, r3, #3
 8000cf8:	440b      	add	r3, r1
 8000cfa:	330a      	adds	r3, #10
 8000cfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	1e5a      	subs	r2, r3, #1
 8000d04:	495e      	ldr	r1, [pc, #376]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000d06:	4613      	mov	r3, r2
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	4413      	add	r3, r2
 8000d0c:	00db      	lsls	r3, r3, #3
 8000d0e:	440b      	add	r3, r1
 8000d10:	330c      	adds	r3, #12
 8000d12:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	1e5a      	subs	r2, r3, #1
 8000d1a:	4859      	ldr	r0, [pc, #356]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4413      	add	r3, r2
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	4403      	add	r3, r0
 8000d26:	330e      	adds	r3, #14
 8000d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d2c:	79f8      	ldrb	r0, [r7, #7]
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	9100      	str	r1, [sp, #0]
 8000d32:	462b      	mov	r3, r5
 8000d34:	4622      	mov	r2, r4
 8000d36:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000d3a:	f7ff fe91 	bl	8000a60 <CAN_DriveMotor>
					break;
 8000d3e:	e047      	b.n	8000dd0 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	1e5a      	subs	r2, r3, #1
 8000d44:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d48:	1f59      	subs	r1, r3, #5
 8000d4a:	484d      	ldr	r0, [pc, #308]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	4413      	add	r3, r2
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	440b      	add	r3, r1
 8000d56:	3308      	adds	r3, #8
 8000d58:	887a      	ldrh	r2, [r7, #2]
 8000d5a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8000d5e:	79fb      	ldrb	r3, [r7, #7]
 8000d60:	1e5a      	subs	r2, r3, #1
 8000d62:	4947      	ldr	r1, [pc, #284]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3310      	adds	r3, #16
 8000d70:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	1e5a      	subs	r2, r3, #1
 8000d78:	4941      	ldr	r1, [pc, #260]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	00db      	lsls	r3, r3, #3
 8000d82:	440b      	add	r3, r1
 8000d84:	3312      	adds	r3, #18
 8000d86:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	493c      	ldr	r1, [pc, #240]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	3314      	adds	r3, #20
 8000d9c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	1e5a      	subs	r2, r3, #1
 8000da4:	4836      	ldr	r0, [pc, #216]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	4403      	add	r3, r0
 8000db0:	3316      	adds	r3, #22
 8000db2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db6:	79f8      	ldrb	r0, [r7, #7]
 8000db8:	9301      	str	r3, [sp, #4]
 8000dba:	9100      	str	r1, [sp, #0]
 8000dbc:	462b      	mov	r3, r5
 8000dbe:	4622      	mov	r2, r4
 8000dc0:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8000dc4:	f7ff fe4c 	bl	8000a60 <CAN_DriveMotor>
					break;
 8000dc8:	e002      	b.n	8000dd0 <CAN_setMotorCtrlVal+0x2a8>
					break;
 8000dca:	bf00      	nop
 8000dcc:	e0a3      	b.n	8000f16 <CAN_setMotorCtrlVal+0x3ee>
					break;
 8000dce:	bf00      	nop
			break;
 8000dd0:	e0a1      	b.n	8000f16 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000dd2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000dd6:	2b08      	cmp	r3, #8
 8000dd8:	f000 8099 	beq.w	8000f0e <CAN_setMotorCtrlVal+0x3e6>
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	f300 8098 	bgt.w	8000f12 <CAN_setMotorCtrlVal+0x3ea>
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	dc02      	bgt.n	8000dec <CAN_setMotorCtrlVal+0x2c4>
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	dc05      	bgt.n	8000df6 <CAN_setMotorCtrlVal+0x2ce>
					break;
 8000dea:	e092      	b.n	8000f12 <CAN_setMotorCtrlVal+0x3ea>
 8000dec:	3b05      	subs	r3, #5
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	f200 808f 	bhi.w	8000f12 <CAN_setMotorCtrlVal+0x3ea>
 8000df4:	e046      	b.n	8000e84 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	1e5a      	subs	r2, r3, #1
 8000dfa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000dfe:	1e59      	subs	r1, r3, #1
 8000e00:	481f      	ldr	r0, [pc, #124]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	440b      	add	r3, r1
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	887a      	ldrh	r2, [r7, #2]
 8000e10:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	1e5a      	subs	r2, r3, #1
 8000e18:	4919      	ldr	r1, [pc, #100]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
 8000e24:	3308      	adds	r3, #8
 8000e26:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	4914      	ldr	r1, [pc, #80]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	00db      	lsls	r3, r3, #3
 8000e38:	440b      	add	r3, r1
 8000e3a:	330a      	adds	r3, #10
 8000e3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	1e5a      	subs	r2, r3, #1
 8000e44:	490e      	ldr	r1, [pc, #56]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000e46:	4613      	mov	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	4413      	add	r3, r2
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	440b      	add	r3, r1
 8000e50:	330c      	adds	r3, #12
 8000e52:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	4809      	ldr	r0, [pc, #36]	@ (8000e80 <CAN_setMotorCtrlVal+0x358>)
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	4413      	add	r3, r2
 8000e62:	00db      	lsls	r3, r3, #3
 8000e64:	4403      	add	r3, r0
 8000e66:	330e      	adds	r3, #14
 8000e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6c:	79f8      	ldrb	r0, [r7, #7]
 8000e6e:	9301      	str	r3, [sp, #4]
 8000e70:	9100      	str	r1, [sp, #0]
 8000e72:	462b      	mov	r3, r5
 8000e74:	4622      	mov	r2, r4
 8000e76:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8000e7a:	f7ff fdf1 	bl	8000a60 <CAN_DriveMotor>
					break;
 8000e7e:	e049      	b.n	8000f14 <CAN_setMotorCtrlVal+0x3ec>
 8000e80:	24000080 	.word	0x24000080
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	1e5a      	subs	r2, r3, #1
 8000e88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e8c:	1f59      	subs	r1, r3, #5
 8000e8e:	4824      	ldr	r0, [pc, #144]	@ (8000f20 <CAN_setMotorCtrlVal+0x3f8>)
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	440b      	add	r3, r1
 8000e9a:	3308      	adds	r3, #8
 8000e9c:	887a      	ldrh	r2, [r7, #2]
 8000e9e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	491e      	ldr	r1, [pc, #120]	@ (8000f20 <CAN_setMotorCtrlVal+0x3f8>)
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	00db      	lsls	r3, r3, #3
 8000eb0:	440b      	add	r3, r1
 8000eb2:	3310      	adds	r3, #16
 8000eb4:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	1e5a      	subs	r2, r3, #1
 8000ebc:	4918      	ldr	r1, [pc, #96]	@ (8000f20 <CAN_setMotorCtrlVal+0x3f8>)
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	3312      	adds	r3, #18
 8000eca:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	1e5a      	subs	r2, r3, #1
 8000ed2:	4913      	ldr	r1, [pc, #76]	@ (8000f20 <CAN_setMotorCtrlVal+0x3f8>)
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	4413      	add	r3, r2
 8000eda:	00db      	lsls	r3, r3, #3
 8000edc:	440b      	add	r3, r1
 8000ede:	3314      	adds	r3, #20
 8000ee0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	1e5a      	subs	r2, r3, #1
 8000ee8:	480d      	ldr	r0, [pc, #52]	@ (8000f20 <CAN_setMotorCtrlVal+0x3f8>)
 8000eea:	4613      	mov	r3, r2
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	4413      	add	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	4403      	add	r3, r0
 8000ef4:	3316      	adds	r3, #22
 8000ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efa:	79f8      	ldrb	r0, [r7, #7]
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	9100      	str	r1, [sp, #0]
 8000f00:	462b      	mov	r3, r5
 8000f02:	4622      	mov	r2, r4
 8000f04:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8000f08:	f7ff fdaa 	bl	8000a60 <CAN_DriveMotor>
					break;
 8000f0c:	e002      	b.n	8000f14 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8000f0e:	bf00      	nop
 8000f10:	e000      	b.n	8000f14 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8000f12:	bf00      	nop
			break;
 8000f14:	bf00      	nop
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	24000080 	.word	0x24000080

08000f24 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	6039      	str	r1, [r7, #0]
 8000f2e:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d009      	beq.n	8000f4a <applyCtrlLimit+0x26>
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	dc29      	bgt.n	8000f8e <applyCtrlLimit+0x6a>
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	dc02      	bgt.n	8000f44 <applyCtrlLimit+0x20>
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	dc03      	bgt.n	8000f4a <applyCtrlLimit+0x26>
 8000f42:	e024      	b.n	8000f8e <applyCtrlLimit+0x6a>
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	d00f      	beq.n	8000f68 <applyCtrlLimit+0x44>
 8000f48:	e021      	b.n	8000f8e <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000f50:	dd03      	ble.n	8000f5a <applyCtrlLimit+0x36>
				val = 16384;
 8000f52:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f56:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8000f58:	e016      	b.n	8000f88 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8000f60:	da12      	bge.n	8000f88 <applyCtrlLimit+0x64>
				val = -16384;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <applyCtrlLimit+0x78>)
 8000f64:	603b      	str	r3, [r7, #0]
			break;
 8000f66:	e00f      	b.n	8000f88 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	dd03      	ble.n	8000f7a <applyCtrlLimit+0x56>
				val = 25000;
 8000f72:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8000f76:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8000f78:	e008      	b.n	8000f8c <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <applyCtrlLimit+0x7c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	da04      	bge.n	8000f8c <applyCtrlLimit+0x68>
				val = -25000;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <applyCtrlLimit+0x7c>)
 8000f84:	603b      	str	r3, [r7, #0]
			break;
 8000f86:	e001      	b.n	8000f8c <applyCtrlLimit+0x68>
			break;
 8000f88:	bf00      	nop
 8000f8a:	e000      	b.n	8000f8e <applyCtrlLimit+0x6a>
			break;
 8000f8c:	bf00      	nop
		}
	}
	return val;
 8000f8e:	683b      	ldr	r3, [r7, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	ffffc000 	.word	0xffffc000
 8000fa0:	ffff9e58 	.word	0xffff9e58

08000fa4 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b08b      	sub	sp, #44	@ 0x2c
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4604      	mov	r4, r0
 8000fac:	4608      	mov	r0, r1
 8000fae:	4611      	mov	r1, r2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	eef0 6a40 	vmov.f32	s13, s0
 8000fb6:	eeb0 7a60 	vmov.f32	s14, s1
 8000fba:	eef0 7a41 	vmov.f32	s15, s2
 8000fbe:	4623      	mov	r3, r4
 8000fc0:	75fb      	strb	r3, [r7, #23]
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	75bb      	strb	r3, [r7, #22]
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	757b      	strb	r3, [r7, #21]
 8000fca:	4613      	mov	r3, r2
 8000fcc:	827b      	strh	r3, [r7, #18]
 8000fce:	edc7 6a01 	vstr	s13, [r7, #4]
 8000fd2:	ed87 7a02 	vstr	s14, [r7, #8]
 8000fd6:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8000fe4:	7dbb      	ldrb	r3, [r7, #22]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	dc02      	bgt.n	8000ff0 <calcRPM_PID+0x4c>
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	dc04      	bgt.n	8000ff8 <calcRPM_PID+0x54>
 8000fee:	e00d      	b.n	800100c <calcRPM_PID+0x68>
 8000ff0:	3b03      	subs	r3, #3
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d80a      	bhi.n	800100c <calcRPM_PID+0x68>
 8000ff6:	e004      	b.n	8001002 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8000ff8:	7d7b      	ldrb	r3, [r7, #21]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001000:	e009      	b.n	8001016 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001002:	7d7b      	ldrb	r3, [r7, #21]
 8001004:	3303      	adds	r3, #3
 8001006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800100a:	e004      	b.n	8001016 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 800100c:	7d7b      	ldrb	r3, [r7, #21]
 800100e:	3b01      	subs	r3, #1
 8001010:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001014:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8001016:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800101a:	7ffa      	ldrb	r2, [r7, #31]
 800101c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001020:	4c70      	ldr	r4, [pc, #448]	@ (80011e4 <calcRPM_PID+0x240>)
 8001022:	4613      	mov	r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	4403      	add	r3, r0
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	4423      	add	r3, r4
 8001032:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001036:	7ffa      	ldrb	r2, [r7, #31]
 8001038:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800103c:	1ac9      	subs	r1, r1, r3
 800103e:	4c6a      	ldr	r4, [pc, #424]	@ (80011e8 <calcRPM_PID+0x244>)
 8001040:	4613      	mov	r3, r2
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	4413      	add	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	4403      	add	r3, r0
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	4423      	add	r3, r4
 8001050:	3304      	adds	r3, #4
 8001052:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001054:	7ffa      	ldrb	r2, [r7, #31]
 8001056:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800105a:	4863      	ldr	r0, [pc, #396]	@ (80011e8 <calcRPM_PID+0x244>)
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	4413      	add	r3, r2
 8001066:	440b      	add	r3, r1
 8001068:	011b      	lsls	r3, r3, #4
 800106a:	4403      	add	r3, r0
 800106c:	3308      	adds	r3, #8
 800106e:	6819      	ldr	r1, [r3, #0]
 8001070:	7ffa      	ldrb	r2, [r7, #31]
 8001072:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001076:	4c5c      	ldr	r4, [pc, #368]	@ (80011e8 <calcRPM_PID+0x244>)
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	4403      	add	r3, r0
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4423      	add	r3, r4
 8001088:	3304      	adds	r3, #4
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	7ffa      	ldrb	r2, [r7, #31]
 800108e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001092:	4419      	add	r1, r3
 8001094:	4c54      	ldr	r4, [pc, #336]	@ (80011e8 <calcRPM_PID+0x244>)
 8001096:	4613      	mov	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	4413      	add	r3, r2
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	4413      	add	r3, r2
 80010a0:	4403      	add	r3, r0
 80010a2:	011b      	lsls	r3, r3, #4
 80010a4:	4423      	add	r3, r4
 80010a6:	3308      	adds	r3, #8
 80010a8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 80010aa:	7ffa      	ldrb	r2, [r7, #31]
 80010ac:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80010b0:	484d      	ldr	r0, [pc, #308]	@ (80011e8 <calcRPM_PID+0x244>)
 80010b2:	4613      	mov	r3, r2
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	4413      	add	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	440b      	add	r3, r1
 80010be:	011b      	lsls	r3, r3, #4
 80010c0:	4403      	add	r3, r0
 80010c2:	6819      	ldr	r1, [r3, #0]
 80010c4:	7ffa      	ldrb	r2, [r7, #31]
 80010c6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80010ca:	4c46      	ldr	r4, [pc, #280]	@ (80011e4 <calcRPM_PID+0x240>)
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	4403      	add	r3, r0
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	4423      	add	r3, r4
 80010dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010e0:	7ffa      	ldrb	r2, [r7, #31]
 80010e2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80010e6:	1ac9      	subs	r1, r1, r3
 80010e8:	4c3f      	ldr	r4, [pc, #252]	@ (80011e8 <calcRPM_PID+0x244>)
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	4413      	add	r3, r2
 80010f4:	4403      	add	r3, r0
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4423      	add	r3, r4
 80010fa:	330c      	adds	r3, #12
 80010fc:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 80010fe:	7ffa      	ldrb	r2, [r7, #31]
 8001100:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001104:	4837      	ldr	r0, [pc, #220]	@ (80011e4 <calcRPM_PID+0x240>)
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	440b      	add	r3, r1
 8001112:	00db      	lsls	r3, r3, #3
 8001114:	4403      	add	r3, r0
 8001116:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800111a:	7ffa      	ldrb	r2, [r7, #31]
 800111c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001120:	461c      	mov	r4, r3
 8001122:	4831      	ldr	r0, [pc, #196]	@ (80011e8 <calcRPM_PID+0x244>)
 8001124:	4613      	mov	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4413      	add	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	440b      	add	r3, r1
 8001130:	011b      	lsls	r3, r3, #4
 8001132:	4403      	add	r3, r0
 8001134:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001136:	ed97 7a01 	vldr	s14, [r7, #4]
 800113a:	7ffa      	ldrb	r2, [r7, #31]
 800113c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001140:	4829      	ldr	r0, [pc, #164]	@ (80011e8 <calcRPM_PID+0x244>)
 8001142:	4613      	mov	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4413      	add	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	440b      	add	r3, r1
 800114e:	011b      	lsls	r3, r3, #4
 8001150:	4403      	add	r3, r0
 8001152:	3304      	adds	r3, #4
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001162:	edd7 6a02 	vldr	s13, [r7, #8]
 8001166:	7ffa      	ldrb	r2, [r7, #31]
 8001168:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800116c:	481e      	ldr	r0, [pc, #120]	@ (80011e8 <calcRPM_PID+0x244>)
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	440b      	add	r3, r1
 800117a:	011b      	lsls	r3, r3, #4
 800117c:	4403      	add	r3, r0
 800117e:	3308      	adds	r3, #8
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	ee07 3a90 	vmov	s15, r3
 8001186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001192:	edd7 6a03 	vldr	s13, [r7, #12]
 8001196:	7ffa      	ldrb	r2, [r7, #31]
 8001198:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800119c:	4812      	ldr	r0, [pc, #72]	@ (80011e8 <calcRPM_PID+0x244>)
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4403      	add	r3, r0
 80011ae:	330c      	adds	r3, #12
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c6:	ee17 3a90 	vmov	r3, s15
 80011ca:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 80011cc:	7dbb      	ldrb	r3, [r7, #22]
 80011ce:	6a39      	ldr	r1, [r7, #32]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fea7 	bl	8000f24 <applyCtrlLimit>
 80011d6:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 80011d8:	6a3b      	ldr	r3, [r7, #32]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	372c      	adds	r7, #44	@ 0x2c
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd90      	pop	{r4, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	240000b0 	.word	0x240000b0
 80011e8:	24000160 	.word	0x24000160

080011ec <setMotorRPM>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4604      	mov	r4, r0
 80011f4:	4608      	mov	r0, r1
 80011f6:	4611      	mov	r1, r2
 80011f8:	461a      	mov	r2, r3
 80011fa:	eef0 6a40 	vmov.f32	s13, s0
 80011fe:	eeb0 7a60 	vmov.f32	s14, s1
 8001202:	eef0 7a41 	vmov.f32	s15, s2
 8001206:	4623      	mov	r3, r4
 8001208:	75fb      	strb	r3, [r7, #23]
 800120a:	4603      	mov	r3, r0
 800120c:	75bb      	strb	r3, [r7, #22]
 800120e:	460b      	mov	r3, r1
 8001210:	757b      	strb	r3, [r7, #21]
 8001212:	4613      	mov	r3, r2
 8001214:	827b      	strh	r3, [r7, #18]
 8001216:	edc7 6a01 	vstr	s13, [r7, #4]
 800121a:	ed87 7a02 	vstr	s14, [r7, #8]
 800121e:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 8001222:	edd7 6a01 	vldr	s13, [r7, #4]
 8001226:	ed97 7a02 	vldr	s14, [r7, #8]
 800122a:	edd7 7a03 	vldr	s15, [r7, #12]
 800122e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001232:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001236:	7db9      	ldrb	r1, [r7, #22]
 8001238:	7df8      	ldrb	r0, [r7, #23]
 800123a:	eeb0 0a66 	vmov.f32	s0, s13
 800123e:	eef0 0a47 	vmov.f32	s1, s14
 8001242:	eeb0 1a67 	vmov.f32	s2, s15
 8001246:	f7ff fead 	bl	8000fa4 <calcRPM_PID>
 800124a:	4603      	mov	r3, r0
 800124c:	b21b      	sxth	r3, r3
 800124e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001252:	7db9      	ldrb	r1, [r7, #22]
 8001254:	7df8      	ldrb	r0, [r7, #23]
 8001256:	f7ff fc67 	bl	8000b28 <CAN_setMotorCtrlVal>
}
 800125a:	bf00      	nop
 800125c:	371c      	adds	r7, #28
 800125e:	46bd      	mov	sp, r7
 8001260:	bd90      	pop	{r4, r7, pc}
	...

08001264 <usart_printf>:
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, RxBuff_2, 256);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuff_3, 256);
}

void usart_printf(const char *fmt,...)
{
 8001264:	b40f      	push	{r0, r1, r2, r3}
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	4a0c      	ldr	r2, [pc, #48]	@ (80012a0 <usart_printf+0x3c>)
 8001270:	6013      	str	r3, [r2, #0]

    //return length of string
    len = vsprintf((char *)tx_buf, fmt, ap);
 8001272:	4b0b      	ldr	r3, [pc, #44]	@ (80012a0 <usart_printf+0x3c>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	68b9      	ldr	r1, [r7, #8]
 8001278:	480a      	ldr	r0, [pc, #40]	@ (80012a4 <usart_printf+0x40>)
 800127a:	f011 fe01 	bl	8012e80 <vsiprintf>
 800127e:	4603      	mov	r3, r0
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <usart_printf+0x44>)
 8001284:	801a      	strh	r2, [r3, #0]

    va_end(ap);

    HAL_UART_Transmit_DMA(&huart3, tx_buf, len);
 8001286:	4b08      	ldr	r3, [pc, #32]	@ (80012a8 <usart_printf+0x44>)
 8001288:	881b      	ldrh	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	4905      	ldr	r1, [pc, #20]	@ (80012a4 <usart_printf+0x40>)
 800128e:	4807      	ldr	r0, [pc, #28]	@ (80012ac <usart_printf+0x48>)
 8001290:	f00e fa16 	bl	800f6c0 <HAL_UART_Transmit_DMA>

}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800129c:	b004      	add	sp, #16
 800129e:	4770      	bx	lr
 80012a0:	240003c8 	.word	0x240003c8
 80012a4:	240003cc 	.word	0x240003cc
 80012a8:	240004cc 	.word	0x240004cc
 80012ac:	24000fd0 	.word	0x24000fd0

080012b0 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuff_3, 256);
 80012bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012c0:	4903      	ldr	r1, [pc, #12]	@ (80012d0 <HAL_UARTEx_RxEventCallback+0x20>)
 80012c2:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <HAL_UARTEx_RxEventCallback+0x24>)
 80012c4:	f010 faa7 	bl	8011816 <HAL_UARTEx_ReceiveToIdle_DMA>
	//usart_printf("data=%d \r\n", RxBuff_3[0]);
}
 80012c8:	bf00      	nop
 80012ca:	3708      	adds	r7, #8
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	240002c8 	.word	0x240002c8
 80012d4:	24000fd0 	.word	0x24000fd0

080012d8 <can_txd>:
uint32_t Motor_Can_ID;    //接收数据电机ID
uint8_t byte[4];          //转换临时数据
uint32_t send_mail_box = {0};//NONE


uint8_t can_txd(/*hcan_t *hfdcan, */FDCAN_TxHeaderTypeDef CAN_Tx, uint8_t *tx_data) {
 80012d8:	b084      	sub	sp, #16
 80012da:	b580      	push	{r7, lr}
 80012dc:	af00      	add	r7, sp, #0
 80012de:	f107 0c08 	add.w	ip, r7, #8
 80012e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	//CAN_Tx.Identifier=Index;
	CAN_Tx.IdType=FDCAN_EXTENDED_ID;
 80012e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ea:	60fb      	str	r3, [r7, #12]
	CAN_Tx.TxFrameType=FDCAN_DATA_FRAME;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
	CAN_Tx.DataLength = FDCAN_DLC_BYTES_8;
 80012f0:	2308      	movs	r3, #8
 80012f2:	617b      	str	r3, [r7, #20]
	CAN_Tx.ErrorStateIndicator=FDCAN_ESI_ACTIVE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
	CAN_Tx.BitRateSwitch=FDCAN_BRS_ON;
 80012f8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80012fc:	61fb      	str	r3, [r7, #28]
	CAN_Tx.FDFormat=FDCAN_FD_CAN;
 80012fe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001302:	623b      	str	r3, [r7, #32]
	CAN_Tx.TxEventFifoControl=FDCAN_NO_TX_EVENTS;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
	CAN_Tx.MessageMarker=0;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	@ 0x28
	return HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &CAN_Tx, tx_data); //CAN发送宏定义
 800130c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800130e:	f107 0108 	add.w	r1, r7, #8
 8001312:	4805      	ldr	r0, [pc, #20]	@ (8001328 <can_txd+0x50>)
 8001314:	f008 f8ec 	bl	80094f0 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001318:	4603      	mov	r3, r0
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001322:	b004      	add	sp, #16
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	24000a00 	.word	0x24000a00

0800132c <Float_to_Byte>:
  * @brief          浮点数转4字节函数
  * @param[in]      f:浮点数
  * @retval         4字节数组
  * @description  : IEEE 754 协议
  */
static uint8_t* Float_to_Byte(float f) {
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long longdata = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
	longdata = *(unsigned long*)&f;
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	60fb      	str	r3, [r7, #12]
	byte[0] = (longdata & 0xFF000000) >> 24;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	0e1b      	lsrs	r3, r3, #24
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b0b      	ldr	r3, [pc, #44]	@ (8001374 <Float_to_Byte+0x48>)
 8001348:	701a      	strb	r2, [r3, #0]
	byte[1] = (longdata & 0x00FF0000) >> 16;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	0c1b      	lsrs	r3, r3, #16
 800134e:	b2da      	uxtb	r2, r3
 8001350:	4b08      	ldr	r3, [pc, #32]	@ (8001374 <Float_to_Byte+0x48>)
 8001352:	705a      	strb	r2, [r3, #1]
	byte[2] = (longdata & 0x0000FF00) >> 8;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	0a1b      	lsrs	r3, r3, #8
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	@ (8001374 <Float_to_Byte+0x48>)
 800135c:	709a      	strb	r2, [r3, #2]
	byte[3] = (longdata & 0x000000FF);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <Float_to_Byte+0x48>)
 8001364:	70da      	strb	r2, [r3, #3]
	return byte;
 8001366:	4b03      	ldr	r3, [pc, #12]	@ (8001374 <Float_to_Byte+0x48>)
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	240004d8 	.word	0x240004d8

08001378 <Set_Motor_Parameter>:
  * @param[in]      Index:写入参数对应地址
  * @param[in]      Value:写入参数值
  * @param[in]      Value_type:写入参数数据类型
  * @retval         none
  */
static void Set_Motor_Parameter(MI_Motor *Motor,uint16_t Index,float Value,char Value_type) {
 8001378:	b5b0      	push	{r4, r5, r7, lr}
 800137a:	b096      	sub	sp, #88	@ 0x58
 800137c:	af06      	add	r7, sp, #24
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	460b      	mov	r3, r1
 8001382:	ed87 0a01 	vstr	s0, [r7, #4]
 8001386:	817b      	strh	r3, [r7, #10]
 8001388:	4613      	mov	r3, r2
 800138a:	727b      	strb	r3, [r7, #9]
	uint8_t tx_data[8];
	FDCAN_TxHeaderTypeDef CAN_Tx;
	CAN_Tx.Identifier = Communication_Type_SetSingleParameter<<24|Master_CAN_ID<<8|Motor->CAN_ID;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	f043 5390 	orr.w	r3, r3, #301989888	@ 0x12000000
 8001394:	617b      	str	r3, [r7, #20]
	CAN_Tx.IdType=FDCAN_EXTENDED_ID;
 8001396:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800139a:	61bb      	str	r3, [r7, #24]
	CAN_Tx.TxFrameType=FDCAN_DATA_FRAME;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
	tx_data[0]=Index;
 80013a0:	897b      	ldrh	r3, [r7, #10]
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	tx_data[1]=Index>>8;
 80013a8:	897b      	ldrh	r3, [r7, #10]
 80013aa:	0a1b      	lsrs	r3, r3, #8
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	tx_data[2]=0x00;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
	tx_data[3]=0x00;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	if(Value_type == 'f') {
 80013c0:	7a7b      	ldrb	r3, [r7, #9]
 80013c2:	2b66      	cmp	r3, #102	@ 0x66
 80013c4:	d114      	bne.n	80013f0 <Set_Motor_Parameter+0x78>
		Float_to_Byte(Value);
 80013c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80013ca:	f7ff ffaf 	bl	800132c <Float_to_Byte>
		tx_data[4]=byte[3];
 80013ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <Set_Motor_Parameter+0xcc>)
 80013d0:	78db      	ldrb	r3, [r3, #3]
 80013d2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		tx_data[5]=byte[2];
 80013d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001444 <Set_Motor_Parameter+0xcc>)
 80013d8:	789b      	ldrb	r3, [r3, #2]
 80013da:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		tx_data[6]=byte[1];
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <Set_Motor_Parameter+0xcc>)
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		tx_data[7]=byte[0];
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <Set_Motor_Parameter+0xcc>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80013ee:	e015      	b.n	800141c <Set_Motor_Parameter+0xa4>
	}
	else if(Value_type == 's') {
 80013f0:	7a7b      	ldrb	r3, [r7, #9]
 80013f2:	2b73      	cmp	r3, #115	@ 0x73
 80013f4:	d112      	bne.n	800141c <Set_Motor_Parameter+0xa4>
		tx_data[4]=(uint8_t)Value;
 80013f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013fe:	edc7 7a00 	vstr	s15, [r7]
 8001402:	783b      	ldrb	r3, [r7, #0]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
		tx_data[5]=0x00;
 800140a:	2300      	movs	r3, #0
 800140c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
		tx_data[6]=0x00;
 8001410:	2300      	movs	r3, #0
 8001412:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
		tx_data[7]=0x00;
 8001416:	2300      	movs	r3, #0
 8001418:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	}
	can_txd(CAN_Tx, tx_data);
 800141c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001420:	9305      	str	r3, [sp, #20]
 8001422:	466d      	mov	r5, sp
 8001424:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	602b      	str	r3, [r5, #0]
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001436:	f7ff ff4f 	bl	80012d8 <can_txd>
}
 800143a:	bf00      	nop
 800143c:	3740      	adds	r7, #64	@ 0x40
 800143e:	46bd      	mov	sp, r7
 8001440:	bdb0      	pop	{r4, r5, r7, pc}
 8001442:	bf00      	nop
 8001444:	240004d8 	.word	0x240004d8

08001448 <start_cybergear>:
/**
  * @brief          使能小米电机
  * @param[in]      Motor:对应控制电机结构体
  * @retval         none
  */
void start_cybergear(MI_Motor *Motor) {
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	b094      	sub	sp, #80	@ 0x50
 800144c:	af06      	add	r7, sp, #24
 800144e:	6078      	str	r0, [r7, #4]
    uint8_t tx_data[8] = {0};
 8001450:	2300      	movs	r3, #0
 8001452:	633b      	str	r3, [r7, #48]	@ 0x30
 8001454:	2300      	movs	r3, #0
 8001456:	637b      	str	r3, [r7, #52]	@ 0x34
    FDCAN_TxHeaderTypeDef CAN_Tx;
    CAN_Tx.Identifier = Communication_Type_MotorEnable<<24|Master_CAN_ID<<8|Motor->CAN_ID;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 8001460:	60fb      	str	r3, [r7, #12]
    CAN_Tx.IdType=FDCAN_EXTENDED_ID;
 8001462:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001466:	613b      	str	r3, [r7, #16]
    CAN_Tx.TxFrameType=FDCAN_DATA_FRAME;
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]
    can_txd(CAN_Tx, tx_data);
 800146c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001470:	9305      	str	r3, [sp, #20]
 8001472:	466d      	mov	r5, sp
 8001474:	f107 041c 	add.w	r4, r7, #28
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	602b      	str	r3, [r5, #0]
 8001480:	f107 030c 	add.w	r3, r7, #12
 8001484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001486:	f7ff ff27 	bl	80012d8 <can_txd>
}
 800148a:	bf00      	nop
 800148c:	3738      	adds	r7, #56	@ 0x38
 800148e:	46bd      	mov	sp, r7
 8001490:	bdb0      	pop	{r4, r5, r7, pc}

08001492 <set_mode_cybergear>:
  * @brief          设置电机模式(必须停止时调整！)
  * @param[in]      Motor:  电机结构体
  * @param[in]      Mode:   电机工作模式（1.运动模式Motion_mode 2. 位置模式Position_mode 3. 速度模式Speed_mode 4. 电流模式Current_mode）
  * @retval         none
  */
void set_mode_cybergear(MI_Motor *Motor,uint8_t Mode) {
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	70fb      	strb	r3, [r7, #3]
	Set_Motor_Parameter(Motor, Run_mode, Mode,'s');
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	ee07 3a90 	vmov	s15, r3
 80014a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014a8:	2273      	movs	r2, #115	@ 0x73
 80014aa:	eeb0 0a67 	vmov.f32	s0, s15
 80014ae:	f247 0105 	movw	r1, #28677	@ 0x7005
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7ff ff60 	bl	8001378 <Set_Motor_Parameter>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <set_maxCurrent_cybergear>:
  */
void set_current_cybergear(MI_Motor *Motor, float Current) {
	Set_Motor_Parameter(Motor, Iq_Ref, Current, 'f');
}

void set_maxCurrent_cybergear(MI_Motor *Motor, float MaxCurrent) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	ed87 0a00 	vstr	s0, [r7]
	Set_Motor_Parameter(Motor, Limit_Cur, MaxCurrent, 'f');
 80014cc:	2266      	movs	r2, #102	@ 0x66
 80014ce:	ed97 0a00 	vldr	s0, [r7]
 80014d2:	f247 0118 	movw	r1, #28696	@ 0x7018
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff4e 	bl	8001378 <Set_Motor_Parameter>
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <init_cybergear>:
  * @param[in]      Can_Id: 小米电机ID(默认0x7F)
  * @param[in]      Motor_Num: 电机编号
  * @param[in]      mode: 电机工作模式（0.运动模式Motion_mode 1. 位置模式Position_mode 2. 速度模式Speed_mode 3. 电流模式Current_mode）
  * @retval         none
  */
void init_cybergear(MI_Motor *Motor,uint8_t Can_Id, uint8_t mode) {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
 80014f0:	4613      	mov	r3, r2
 80014f2:	70bb      	strb	r3, [r7, #2]
	Motor->CAN_ID=Can_Id;       //ID设置
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	701a      	strb	r2, [r3, #0]
	set_mode_cybergear(Motor,mode);//设置电机模式
 80014fa:	78bb      	ldrb	r3, [r7, #2]
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffc7 	bl	8001492 <set_mode_cybergear>
	start_cybergear(Motor);        //使能电机
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff ff9f 	bl	8001448 <start_cybergear>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <cybergear_rx_callback>:
  * @brief          hal库CAN回调函数,接收电机数据
  * @param[in]      hcan:CAN句柄指针
  * @retval         none
  */

void cybergear_rx_callback(uint8_t rxBuffer1[4], uint16_t rxBuffer2[4]) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
	uint8_t cybergear_rx_data[8] = {0};
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
	uint16_t cybergear_rec_id;
	uint8_t cybergear_rx_id = rxBuffer1[1];
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	785b      	ldrb	r3, [r3, #1]
 800152a:	75fb      	strb	r3, [r7, #23]
	float debug = 0;
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	613b      	str	r3, [r7, #16]

	//fdcanx_receive(&hfdcan1, &cybergear_rec_id, cybergear_rx_data);
	//Motor_Can_ID=Get_Motor_ID(cybergear_rec_id);
	switch(cybergear_rx_id)                   //将对应ID电机信息提取至对应结构体
 8001532:	7dfb      	ldrb	r3, [r7, #23]
 8001534:	2b31      	cmp	r3, #49	@ 0x31
 8001536:	d019      	beq.n	800156c <cybergear_rx_callback+0x58>
 8001538:	2b7f      	cmp	r3, #127	@ 0x7f
 800153a:	d14b      	bne.n	80015d4 <cybergear_rx_callback+0xc0>
	    {
		case 0X7F:
				mi_motor[0].MCU_ID = rx_data[0];
 800153c:	4b28      	ldr	r3, [pc, #160]	@ (80015e0 <cybergear_rx_callback+0xcc>)
 800153e:	781a      	ldrb	r2, [r3, #0]
 8001540:	4b28      	ldr	r3, [pc, #160]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 8001542:	705a      	strb	r2, [r3, #1]
				mi_motor[0].Angle = rxBuffer2[0];   		 //todo: map 0~65535 to -4pi~4pi
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	4b26      	ldr	r3, [pc, #152]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 800154a:	805a      	strh	r2, [r3, #2]
				mi_motor[0].Speed = rxBuffer2[1]; 	 //todo: map 0~65535 to -30~30rad/s
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	885a      	ldrh	r2, [r3, #2]
 8001550:	4b24      	ldr	r3, [pc, #144]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 8001552:	809a      	strh	r2, [r3, #4]
				mi_motor[0].Torque = rxBuffer2[2];  	 //todo: map 0~65535 to -12Nm~12Nm
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	889a      	ldrh	r2, [r3, #4]
 8001558:	4b22      	ldr	r3, [pc, #136]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 800155a:	80da      	strh	r2, [r3, #6]
				mi_motor[0].Temp = rxBuffer2[3];  					 //todo: map to x10 C
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	88da      	ldrh	r2, [r3, #6]
 8001560:	4b20      	ldr	r3, [pc, #128]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 8001562:	811a      	strh	r2, [r3, #8]
				mi_motor[0].error_code = rxBuffer1[2];
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	789a      	ldrb	r2, [r3, #2]
 8001568:	4b1e      	ldr	r3, [pc, #120]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 800156a:	741a      	strb	r2, [r3, #16]

		case 0x31:
				mi_motor[0].Angle = (rxBuffer2[0] - 32767);   		//todo: map 0~65535 to -4pi~4pi
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	881a      	ldrh	r2, [r3, #0]
 8001570:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <cybergear_rx_callback+0xd4>)
 8001572:	4413      	add	r3, r2
 8001574:	b29a      	uxth	r2, r3
 8001576:	4b1b      	ldr	r3, [pc, #108]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 8001578:	805a      	strh	r2, [r3, #2]
				mi_motor[0].Speed = (rxBuffer2[1] - 32767)*30;    //todo: map 0~65535 to -30~30rad/s
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	3302      	adds	r3, #2
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	b29b      	uxth	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	0112      	lsls	r2, r2, #4
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	b29a      	uxth	r2, r3
 800158e:	4b15      	ldr	r3, [pc, #84]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 8001590:	809a      	strh	r2, [r3, #4]
				mi_motor[0].Torque = (rxBuffer2[2] - 32767)*12;   //todo: map 0~65535 to -12Nm~12Nm
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	3304      	adds	r3, #4
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	3301      	adds	r3, #1
 800159a:	b29b      	uxth	r3, r3
 800159c:	461a      	mov	r2, r3
 800159e:	0052      	lsls	r2, r2, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b0f      	ldr	r3, [pc, #60]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 80015a8:	80da      	strh	r2, [r3, #6]
				mi_motor[0].Temp = rxBuffer2[3]/10;						//todo: map to x10 C
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	3306      	adds	r3, #6
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	4a0e      	ldr	r2, [pc, #56]	@ (80015ec <cybergear_rx_callback+0xd8>)
 80015b2:	fba2 2303 	umull	r2, r3, r2, r3
 80015b6:	08db      	lsrs	r3, r3, #3
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 80015bc:	811a      	strh	r2, [r3, #8]
				mi_motor[0].error_code = rxBuffer1[2];
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	789a      	ldrb	r2, [r3, #2]
 80015c2:	4b08      	ldr	r3, [pc, #32]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 80015c4:	741a      	strb	r2, [r3, #16]
				usart_printf("Recv in 0x31 = %d\r\n", mi_motor[0].Speed);
 80015c6:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <cybergear_rx_callback+0xd0>)
 80015c8:	889b      	ldrh	r3, [r3, #4]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4808      	ldr	r0, [pc, #32]	@ (80015f0 <cybergear_rx_callback+0xdc>)
 80015ce:	f7ff fe49 	bl	8001264 <usart_printf>
			break;
 80015d2:	e000      	b.n	80015d6 <cybergear_rx_callback+0xc2>
		default:
			break;
 80015d4:	bf00      	nop
	}
}
 80015d6:	bf00      	nop
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	240004d0 	.word	0x240004d0
 80015e4:	240004dc 	.word	0x240004dc
 80015e8:	ffff8001 	.word	0xffff8001
 80015ec:	cccccccd 	.word	0xcccccccd
 80015f0:	080137c4 	.word	0x080137c4

080015f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80015f4:	b480      	push	{r7}
 80015f6:	b085      	sub	sp, #20
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	4a07      	ldr	r2, [pc, #28]	@ (8001620 <vApplicationGetIdleTaskMemory+0x2c>)
 8001604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	4a06      	ldr	r2, [pc, #24]	@ (8001624 <vApplicationGetIdleTaskMemory+0x30>)
 800160a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2280      	movs	r2, #128	@ 0x80
 8001610:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	2400053c 	.word	0x2400053c
 8001624:	24000590 	.word	0x24000590

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162e:	f002 fd39 	bl	80040a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001632:	f000 f8e3 	bl	80017fc <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001636:	f000 f94f 	bl	80018d8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800163a:	f001 f929 	bl	8002890 <MX_GPIO_Init>
  MX_DMA_Init();
 800163e:	f001 f8b7 	bl	80027b0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001642:	f000 f97b 	bl	800193c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001646:	f000 fa25 	bl	8001a94 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800164a:	f000 fa97 	bl	8001b7c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800164e:	f000 faf9 	bl	8001c44 <MX_FDCAN2_Init>
  MX_FDCAN3_Init();
 8001652:	f000 fb5d 	bl	8001d10 <MX_FDCAN3_Init>
  MX_I2C2_Init();
 8001656:	f000 fbc1 	bl	8001ddc <MX_I2C2_Init>
  MX_I2C4_Init();
 800165a:	f000 fbff 	bl	8001e5c <MX_I2C4_Init>
  MX_OPAMP1_Init();
 800165e:	f000 fc3d 	bl	8001edc <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8001662:	f000 fc5d 	bl	8001f20 <MX_OPAMP2_Init>
  MX_TIM1_Init();
 8001666:	f000 fc7b 	bl	8001f60 <MX_TIM1_Init>
  MX_TIM2_Init();
 800166a:	f000 fd49 	bl	8002100 <MX_TIM2_Init>
  MX_TIM3_Init();
 800166e:	f000 fdb7 	bl	80021e0 <MX_TIM3_Init>
  MX_TIM23_Init();
 8001672:	f000 fe31 	bl	80022d8 <MX_TIM23_Init>
  MX_UART7_Init();
 8001676:	f000 fec9 	bl	800240c <MX_UART7_Init>
  MX_USART1_UART_Init();
 800167a:	f000 ff65 	bl	8002548 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800167e:	f000 ffaf 	bl	80025e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001682:	f000 fff9 	bl	8002678 <MX_USART3_UART_Init>
  MX_USART10_UART_Init();
 8001686:	f001 f843 	bl	8002710 <MX_USART10_UART_Init>
  MX_UART8_Init();
 800168a:	f000 ff0f 	bl	80024ac <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800168e:	4854      	ldr	r0, [pc, #336]	@ (80017e0 <main+0x1b8>)
 8001690:	f00c fe54 	bl	800e33c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001694:	2100      	movs	r1, #0
 8001696:	4852      	ldr	r0, [pc, #328]	@ (80017e0 <main+0x1b8>)
 8001698:	f00c ff26 	bl	800e4e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800169c:	2104      	movs	r1, #4
 800169e:	4850      	ldr	r0, [pc, #320]	@ (80017e0 <main+0x1b8>)
 80016a0:	f00c ff22 	bl	800e4e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80016a4:	2108      	movs	r1, #8
 80016a6:	484e      	ldr	r0, [pc, #312]	@ (80017e0 <main+0x1b8>)
 80016a8:	f00c ff1e 	bl	800e4e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 80016ac:	210c      	movs	r1, #12
 80016ae:	484c      	ldr	r0, [pc, #304]	@ (80017e0 <main+0x1b8>)
 80016b0:	f00c ff1a 	bl	800e4e8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start(&htim23);
 80016b4:	484b      	ldr	r0, [pc, #300]	@ (80017e4 <main+0x1bc>)
 80016b6:	f00c fe41 	bl	800e33c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_1);
 80016ba:	2100      	movs	r1, #0
 80016bc:	4849      	ldr	r0, [pc, #292]	@ (80017e4 <main+0x1bc>)
 80016be:	f00c ff13 	bl	800e4e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_2);
 80016c2:	2104      	movs	r1, #4
 80016c4:	4847      	ldr	r0, [pc, #284]	@ (80017e4 <main+0x1bc>)
 80016c6:	f00c ff0f 	bl	800e4e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_3);
 80016ca:	2108      	movs	r1, #8
 80016cc:	4845      	ldr	r0, [pc, #276]	@ (80017e4 <main+0x1bc>)
 80016ce:	f00c ff0b 	bl	800e4e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim23, TIM_CHANNEL_4);
 80016d2:	210c      	movs	r1, #12
 80016d4:	4843      	ldr	r0, [pc, #268]	@ (80017e4 <main+0x1bc>)
 80016d6:	f00c ff07 	bl	800e4e8 <HAL_TIM_PWM_Start>
  uint16_t constant = 1000;
 80016da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016de:	84bb      	strh	r3, [r7, #36]	@ 0x24
  uint16_t count = 100;
 80016e0:	2364      	movs	r3, #100	@ 0x64
 80016e2:	84fb      	strh	r3, [r7, #38]	@ 0x26
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, 0);
 80016e4:	2200      	movs	r2, #0
 80016e6:	2104      	movs	r1, #4
 80016e8:	483f      	ldr	r0, [pc, #252]	@ (80017e8 <main+0x1c0>)
 80016ea:	f008 ffe7 	bl	800a6bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2108      	movs	r1, #8
 80016f2:	483d      	ldr	r0, [pc, #244]	@ (80017e8 <main+0x1c0>)
 80016f4:	f008 ffe2 	bl	800a6bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2110      	movs	r1, #16
 80016fc:	483a      	ldr	r0, [pc, #232]	@ (80017e8 <main+0x1c0>)
 80016fe:	f008 ffdd 	bl	800a6bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, 0);
 8001702:	2200      	movs	r2, #0
 8001704:	2120      	movs	r1, #32
 8001706:	4838      	ldr	r0, [pc, #224]	@ (80017e8 <main+0x1c0>)
 8001708:	f008 ffd8 	bl	800a6bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 0);
 800170c:	2200      	movs	r2, #0
 800170e:	2140      	movs	r1, #64	@ 0x40
 8001710:	4835      	ldr	r0, [pc, #212]	@ (80017e8 <main+0x1c0>)
 8001712:	f008 ffd3 	bl	800a6bc <HAL_GPIO_WritePin>
  bsp_can_init();
 8001716:	f7fe ffc3 	bl	80006a0 <bsp_can_init>
  //usart_Init();
  uint8_t CAN_Data = 125;
 800171a:	237d      	movs	r3, #125	@ 0x7d
 800171c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  uint8_t CAN_State = -1;
 8001720:	23ff      	movs	r3, #255	@ 0xff
 8001722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8001726:	4b31      	ldr	r3, [pc, #196]	@ (80017ec <main+0x1c4>)
 8001728:	1d3c      	adds	r4, r7, #4
 800172a:	461d      	mov	r5, r3
 800172c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	2100      	movs	r1, #0
 800173c:	4618      	mov	r0, r3
 800173e:	f010 f92c 	bl	801199a <osThreadCreate>
 8001742:	4603      	mov	r3, r0
 8001744:	4a2a      	ldr	r2, [pc, #168]	@ (80017f0 <main+0x1c8>)
 8001746:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001748:	f010 f920 	bl	801198c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, count);
 800174c:	4b24      	ldr	r3, [pc, #144]	@ (80017e0 <main+0x1b8>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001752:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_2, count);
 8001754:	4b22      	ldr	r3, [pc, #136]	@ (80017e0 <main+0x1b8>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800175a:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, count);
 800175c:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <main+0x1b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001762:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, count);
 8001764:	4b1e      	ldr	r3, [pc, #120]	@ (80017e0 <main+0x1b8>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800176a:	641a      	str	r2, [r3, #64]	@ 0x40

	  __HAL_TIM_SetCompare(&htim23, TIM_CHANNEL_1, constant);
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <main+0x1bc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001772:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SetCompare(&htim23, TIM_CHANNEL_2, constant);
 8001774:	4b1b      	ldr	r3, [pc, #108]	@ (80017e4 <main+0x1bc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800177a:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SetCompare(&htim23, TIM_CHANNEL_3, constant);
 800177c:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <main+0x1bc>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001782:	63da      	str	r2, [r3, #60]	@ 0x3c
	  __HAL_TIM_SetCompare(&htim23, TIM_CHANNEL_4, constant);
 8001784:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <main+0x1bc>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800178a:	641a      	str	r2, [r3, #64]	@ 0x40
	  //count++;
	  if(count > 100) {
 800178c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800178e:	2b64      	cmp	r3, #100	@ 0x64
 8001790:	d901      	bls.n	8001796 <main+0x16e>
		  count = 10;
 8001792:	230a      	movs	r3, #10
 8001794:	84fb      	strh	r3, [r7, #38]	@ 0x26
	  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, 1);

	  //HAL_Delay(50);


	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_2);
 8001796:	2104      	movs	r1, #4
 8001798:	4813      	ldr	r0, [pc, #76]	@ (80017e8 <main+0x1c0>)
 800179a:	f008 ffa8 	bl	800a6ee <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 800179e:	2108      	movs	r1, #8
 80017a0:	4811      	ldr	r0, [pc, #68]	@ (80017e8 <main+0x1c0>)
 80017a2:	f008 ffa4 	bl	800a6ee <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 80017a6:	2110      	movs	r1, #16
 80017a8:	480f      	ldr	r0, [pc, #60]	@ (80017e8 <main+0x1c0>)
 80017aa:	f008 ffa0 	bl	800a6ee <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
 80017ae:	2120      	movs	r1, #32
 80017b0:	480d      	ldr	r0, [pc, #52]	@ (80017e8 <main+0x1c0>)
 80017b2:	f008 ff9c 	bl	800a6ee <HAL_GPIO_TogglePin>
	  //HAL_UART_Transmit(&huart1, "UART 1", 6, 100);
	  //HAL_UART_Transmit(&huart2, "UART 2", 6, 100);
	  //HAL_UART_Transmit(&huart3, "UART 3", 6, 100); //use this for debugging
	  CAN_State = fdcanx_send_data(&hfdcan1, 0x01, &CAN_Data, 8);
 80017b6:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 80017ba:	2308      	movs	r3, #8
 80017bc:	2101      	movs	r1, #1
 80017be:	480d      	ldr	r0, [pc, #52]	@ (80017f4 <main+0x1cc>)
 80017c0:	f7ff f829 	bl	8000816 <fdcanx_send_data>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	  usart_printf("CAN_State=%d \r\n", CAN_State);
 80017ca:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80017ce:	4619      	mov	r1, r3
 80017d0:	4809      	ldr	r0, [pc, #36]	@ (80017f8 <main+0x1d0>)
 80017d2:	f7ff fd47 	bl	8001264 <usart_printf>

	  HAL_Delay(500);
 80017d6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80017da:	f002 fcf5 	bl	80041c8 <HAL_Delay>
	  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, count);
 80017de:	e7b5      	b.n	800174c <main+0x124>
 80017e0:	24000c50 	.word	0x24000c50
 80017e4:	24000d34 	.word	0x24000d34
 80017e8:	58021000 	.word	0x58021000
 80017ec:	080137f4 	.word	0x080137f4
 80017f0:	24001440 	.word	0x24001440
 80017f4:	24000960 	.word	0x24000960
 80017f8:	080137d8 	.word	0x080137d8

080017fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b09c      	sub	sp, #112	@ 0x70
 8001800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001802:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001806:	224c      	movs	r2, #76	@ 0x4c
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f011 fb42 	bl	8012e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	2220      	movs	r2, #32
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f011 fb3c 	bl	8012e94 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800181c:	2002      	movs	r0, #2
 800181e:	f009 f9af 	bl	800ab80 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b2b      	ldr	r3, [pc, #172]	@ (80018d4 <SystemClock_Config+0xd8>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	4a2a      	ldr	r2, [pc, #168]	@ (80018d4 <SystemClock_Config+0xd8>)
 800182c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001830:	6193      	str	r3, [r2, #24]
 8001832:	4b28      	ldr	r3, [pc, #160]	@ (80018d4 <SystemClock_Config+0xd8>)
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800183e:	bf00      	nop
 8001840:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <SystemClock_Config+0xd8>)
 8001842:	699b      	ldr	r3, [r3, #24]
 8001844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001848:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800184c:	d1f8      	bne.n	8001840 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800184e:	2301      	movs	r3, #1
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001856:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001858:	2302      	movs	r3, #2
 800185a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800185c:	2302      	movs	r3, #2
 800185e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001860:	2301      	movs	r3, #1
 8001862:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001864:	2340      	movs	r3, #64	@ 0x40
 8001866:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 3;
 8001868:	2303      	movs	r3, #3
 800186a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800186c:	2306      	movs	r3, #6
 800186e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001870:	2302      	movs	r3, #2
 8001872:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001874:	230c      	movs	r3, #12
 8001876:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001878:	2300      	movs	r3, #0
 800187a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001884:	4618      	mov	r0, r3
 8001886:	f009 f9b5 	bl	800abf4 <HAL_RCC_OscConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001890:	f001 f944 	bl	8002b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001894:	233f      	movs	r3, #63	@ 0x3f
 8001896:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001898:	2303      	movs	r3, #3
 800189a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018a4:	2340      	movs	r3, #64	@ 0x40
 80018a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018a8:	2340      	movs	r3, #64	@ 0x40
 80018aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018b0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018b2:	2340      	movs	r3, #64	@ 0x40
 80018b4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2103      	movs	r1, #3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f009 fd74 	bl	800b3a8 <HAL_RCC_ClockConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0xce>
  {
    Error_Handler();
 80018c6:	f001 f929 	bl	8002b1c <Error_Handler>
  }
}
 80018ca:	bf00      	nop
 80018cc:	3770      	adds	r7, #112	@ 0x70
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	58024800 	.word	0x58024800

080018d8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0ae      	sub	sp, #184	@ 0xb8
 80018dc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018de:	463b      	mov	r3, r7
 80018e0:	22b8      	movs	r2, #184	@ 0xb8
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f011 fad5 	bl	8012e94 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 80018ea:	f44f 2208 	mov.w	r2, #557056	@ 0x88000
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80018f6:	2301      	movs	r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 21;
 80018fa:	2315      	movs	r3, #21
 80018fc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80018fe:	2302      	movs	r3, #2
 8001900:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001902:	2302      	movs	r3, #2
 8001904:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001906:	2302      	movs	r3, #2
 8001908:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800190a:	23c0      	movs	r3, #192	@ 0xc0
 800190c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8001916:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800191a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001922:	463b      	mov	r3, r7
 8001924:	4618      	mov	r0, r3
 8001926:	f00a f8cb 	bl	800bac0 <HAL_RCCEx_PeriphCLKConfig>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001930:	f001 f8f4 	bl	8002b1c <Error_Handler>
  }
}
 8001934:	bf00      	nop
 8001936:	37b8      	adds	r7, #184	@ 0xb8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b08c      	sub	sp, #48	@ 0x30
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001946:	2200      	movs	r2, #0
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	605a      	str	r2, [r3, #4]
 800194c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800194e:	463b      	mov	r3, r7
 8001950:	2224      	movs	r2, #36	@ 0x24
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f011 fa9d 	bl	8012e94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800195a:	4b48      	ldr	r3, [pc, #288]	@ (8001a7c <MX_ADC1_Init+0x140>)
 800195c:	4a48      	ldr	r2, [pc, #288]	@ (8001a80 <MX_ADC1_Init+0x144>)
 800195e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8001960:	4b46      	ldr	r3, [pc, #280]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001962:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 8001966:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001968:	4b44      	ldr	r3, [pc, #272]	@ (8001a7c <MX_ADC1_Init+0x140>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800196e:	4b43      	ldr	r3, [pc, #268]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001970:	2201      	movs	r2, #1
 8001972:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001974:	4b41      	ldr	r3, [pc, #260]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001976:	2204      	movs	r2, #4
 8001978:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800197a:	4b40      	ldr	r3, [pc, #256]	@ (8001a7c <MX_ADC1_Init+0x140>)
 800197c:	2200      	movs	r2, #0
 800197e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001980:	4b3e      	ldr	r3, [pc, #248]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001982:	2201      	movs	r2, #1
 8001984:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 4;
 8001986:	4b3d      	ldr	r3, [pc, #244]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001988:	2204      	movs	r2, #4
 800198a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800198c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a7c <MX_ADC1_Init+0x140>)
 800198e:	2200      	movs	r2, #0
 8001990:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001994:	4b39      	ldr	r3, [pc, #228]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001996:	2200      	movs	r2, #0
 8001998:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800199a:	4b38      	ldr	r3, [pc, #224]	@ (8001a7c <MX_ADC1_Init+0x140>)
 800199c:	2200      	movs	r2, #0
 800199e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80019a0:	4b36      	ldr	r3, [pc, #216]	@ (8001a7c <MX_ADC1_Init+0x140>)
 80019a2:	2203      	movs	r2, #3
 80019a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019a6:	4b35      	ldr	r3, [pc, #212]	@ (8001a7c <MX_ADC1_Init+0x140>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80019ac:	4b33      	ldr	r3, [pc, #204]	@ (8001a7c <MX_ADC1_Init+0x140>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 80019b2:	4b32      	ldr	r3, [pc, #200]	@ (8001a7c <MX_ADC1_Init+0x140>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.Ratio = 1;
 80019ba:	4b30      	ldr	r3, [pc, #192]	@ (8001a7c <MX_ADC1_Init+0x140>)
 80019bc:	2201      	movs	r2, #1
 80019be:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019c0:	482e      	ldr	r0, [pc, #184]	@ (8001a7c <MX_ADC1_Init+0x140>)
 80019c2:	f002 ff17 	bl	80047f4 <HAL_ADC_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80019cc:	f001 f8a6 	bl	8002b1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80019d0:	2300      	movs	r3, #0
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80019d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d8:	4619      	mov	r1, r3
 80019da:	4828      	ldr	r0, [pc, #160]	@ (8001a7c <MX_ADC1_Init+0x140>)
 80019dc:	f004 fa66 	bl	8005eac <HAL_ADCEx_MultiModeConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80019e6:	f001 f899 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019ea:	4b26      	ldr	r3, [pc, #152]	@ (8001a84 <MX_ADC1_Init+0x148>)
 80019ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ee:	2306      	movs	r3, #6
 80019f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_32CYCLES_5;
 80019f2:	2304      	movs	r3, #4
 80019f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019f6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80019fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019fc:	2304      	movs	r3, #4
 80019fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481b      	ldr	r0, [pc, #108]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001a10:	f003 f9f2 	bl	8004df8 <HAL_ADC_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001a1a:	f001 f87f 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a88 <MX_ADC1_Init+0x14c>)
 8001a20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001a22:	230c      	movs	r3, #12
 8001a24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a26:	463b      	mov	r3, r7
 8001a28:	4619      	mov	r1, r3
 8001a2a:	4814      	ldr	r0, [pc, #80]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001a2c:	f003 f9e4 	bl	8004df8 <HAL_ADC_ConfigChannel>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8001a36:	f001 f871 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	@ (8001a8c <MX_ADC1_Init+0x150>)
 8001a3c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001a3e:	2312      	movs	r3, #18
 8001a40:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a42:	463b      	mov	r3, r7
 8001a44:	4619      	mov	r1, r3
 8001a46:	480d      	ldr	r0, [pc, #52]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001a48:	f003 f9d6 	bl	8004df8 <HAL_ADC_ConfigChannel>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8001a52:	f001 f863 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001a56:	4b0e      	ldr	r3, [pc, #56]	@ (8001a90 <MX_ADC1_Init+0x154>)
 8001a58:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001a5a:	2318      	movs	r3, #24
 8001a5c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5e:	463b      	mov	r3, r7
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	@ (8001a7c <MX_ADC1_Init+0x140>)
 8001a64:	f003 f9c8 	bl	8004df8 <HAL_ADC_ConfigChannel>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001a6e:	f001 f855 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	3730      	adds	r7, #48	@ 0x30
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	24000790 	.word	0x24000790
 8001a80:	40022000 	.word	0x40022000
 8001a84:	10c00010 	.word	0x10c00010
 8001a88:	08600004 	.word	0x08600004
 8001a8c:	0c900008 	.word	0x0c900008
 8001a90:	14f00020 	.word	0x14f00020

08001a94 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	@ 0x28
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2224      	movs	r2, #36	@ 0x24
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f011 f9f7 	bl	8012e94 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001aa6:	4b32      	ldr	r3, [pc, #200]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001aa8:	4a32      	ldr	r2, [pc, #200]	@ (8001b74 <MX_ADC2_Init+0xe0>)
 8001aaa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV128;
 8001aac:	4b30      	ldr	r3, [pc, #192]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001aae:	f44f 1220 	mov.w	r2, #2621440	@ 0x280000
 8001ab2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001aba:	4b2d      	ldr	r3, [pc, #180]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001ac2:	2204      	movs	r2, #4
 8001ac4:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001acc:	4b28      	ldr	r3, [pc, #160]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 2;
 8001ad2:	4b27      	ldr	r3, [pc, #156]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001ad4:	2202      	movs	r2, #2
 8001ad6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ae0:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ae6:	4b22      	ldr	r3, [pc, #136]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001aec:	4b20      	ldr	r3, [pc, #128]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001aee:	2203      	movs	r2, #3
 8001af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	641a      	str	r2, [r3, #64]	@ 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  hadc2.Init.Oversampling.Ratio = 1;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	649a      	str	r2, [r3, #72]	@ 0x48
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001b0c:	4818      	ldr	r0, [pc, #96]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001b0e:	f002 fe71 	bl	80047f4 <HAL_ADC_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001b18:	f001 f800 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	@ (8001b78 <MX_ADC2_Init+0xe4>)
 8001b1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b20:	2306      	movs	r3, #6
 8001b22:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001b24:	2303      	movs	r3, #3
 8001b26:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b28:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001b2c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b2e:	2304      	movs	r3, #4
 8001b30:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	4619      	mov	r1, r3
 8001b40:	480b      	ldr	r0, [pc, #44]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001b42:	f003 f959 	bl	8004df8 <HAL_ADC_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_ADC2_Init+0xbc>
  {
    Error_Handler();
 8001b4c:	f000 ffe6 	bl	8002b1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b50:	230c      	movs	r3, #12
 8001b52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	@ (8001b70 <MX_ADC2_Init+0xdc>)
 8001b5a:	f003 f94d 	bl	8004df8 <HAL_ADC_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001b64:	f000 ffda 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3728      	adds	r7, #40	@ 0x28
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	24000800 	.word	0x24000800
 8001b74:	40022100 	.word	0x40022100
 8001b78:	08600004 	.word	0x08600004

08001b7c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001b82:	4a2f      	ldr	r2, [pc, #188]	@ (8001c40 <MX_FDCAN1_Init+0xc4>)
 8001b84:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b92:	4b2a      	ldr	r3, [pc, #168]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b98:	4b28      	ldr	r3, [pc, #160]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b9e:	4b27      	ldr	r3, [pc, #156]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 6;
 8001ba4:	4b25      	ldr	r3, [pc, #148]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001ba6:	2206      	movs	r2, #6
 8001ba8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 5;
 8001baa:	4b24      	ldr	r3, [pc, #144]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bac:	2205      	movs	r2, #5
 8001bae:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bb2:	220f      	movs	r2, #15
 8001bb4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 5;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bb8:	2205      	movs	r2, #5
 8001bba:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 6;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bbe:	2206      	movs	r2, #6
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bca:	220f      	movs	r2, #15
 8001bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8001bce:	4b1b      	ldr	r3, [pc, #108]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bd0:	2205      	movs	r2, #5
 8001bd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001bda:	4b18      	ldr	r3, [pc, #96]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001be0:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 4;
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001be8:	2204      	movs	r2, #4
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001bec:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bee:	2204      	movs	r2, #4
 8001bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 4;
 8001bf2:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001bfa:	2204      	movs	r2, #4
 8001bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan1.Init.RxBuffersNbr = 4;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001c00:	2204      	movs	r2, #4
 8001c02:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c04:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001c06:	2204      	movs	r2, #4
 8001c08:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan1.Init.TxEventsNbr = 4;
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001c0c:	2204      	movs	r2, #4
 8001c0e:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan1.Init.TxBuffersNbr = 8;
 8001c10:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001c12:	2208      	movs	r2, #8
 8001c14:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 8;
 8001c16:	4b09      	ldr	r3, [pc, #36]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001c18:	2208      	movs	r2, #8
 8001c1a:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c1c:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c22:	4b06      	ldr	r3, [pc, #24]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001c24:	2204      	movs	r2, #4
 8001c26:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <MX_FDCAN1_Init+0xc0>)
 8001c2a:	f007 f969 	bl	8008f00 <HAL_FDCAN_Init>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8001c34:	f000 ff72 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	24000960 	.word	0x24000960
 8001c40:	4000a000 	.word	0x4000a000

08001c44 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8001c48:	4b2f      	ldr	r3, [pc, #188]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c4a:	4a30      	ldr	r2, [pc, #192]	@ (8001d0c <MX_FDCAN2_Init+0xc8>)
 8001c4c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8001c54:	4b2c      	ldr	r3, [pc, #176]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8001c5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8001c60:	4b29      	ldr	r3, [pc, #164]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8001c66:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 6;
 8001c6c:	4b26      	ldr	r3, [pc, #152]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c6e:	2206      	movs	r2, #6
 8001c70:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 5;
 8001c72:	4b25      	ldr	r3, [pc, #148]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c74:	2205      	movs	r2, #5
 8001c76:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 15;
 8001c78:	4b23      	ldr	r3, [pc, #140]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c7a:	220f      	movs	r2, #15
 8001c7c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 5;
 8001c7e:	4b22      	ldr	r3, [pc, #136]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c80:	2205      	movs	r2, #5
 8001c82:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 6;
 8001c84:	4b20      	ldr	r3, [pc, #128]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c86:	2206      	movs	r2, #6
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan2.Init.DataSyncJumpWidth = 5;
 8001c8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c8c:	2205      	movs	r2, #5
 8001c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan2.Init.DataTimeSeg1 = 15;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c92:	220f      	movs	r2, #15
 8001c94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan2.Init.DataTimeSeg2 = 5;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c98:	2205      	movs	r2, #5
 8001c9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan2.Init.MessageRAMOffset = 0x406;
 8001c9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001c9e:	f240 4206 	movw	r2, #1030	@ 0x406
 8001ca2:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan2.Init.StdFiltersNbr = 1;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8001caa:	4b17      	ldr	r3, [pc, #92]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 4;
 8001cb0:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cb8:	2204      	movs	r2, #4
 8001cba:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 4;
 8001cbc:	4b12      	ldr	r3, [pc, #72]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cbe:	2204      	movs	r2, #4
 8001cc0:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001cc2:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan2.Init.RxBuffersNbr = 4;
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cca:	2204      	movs	r2, #4
 8001ccc:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001cce:	4b0e      	ldr	r3, [pc, #56]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan2.Init.TxEventsNbr = 4;
 8001cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cd6:	2204      	movs	r2, #4
 8001cd8:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan2.Init.TxBuffersNbr = 8;
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cdc:	2208      	movs	r2, #8
 8001cde:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 8;
 8001ce0:	4b09      	ldr	r3, [pc, #36]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001ce2:	2208      	movs	r2, #8
 8001ce4:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001cec:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cee:	2204      	movs	r2, #4
 8001cf0:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8001cf2:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <MX_FDCAN2_Init+0xc4>)
 8001cf4:	f007 f904 	bl	8008f00 <HAL_FDCAN_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8001cfe:	f000 ff0d 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	24000a00 	.word	0x24000a00
 8001d0c:	4000a400 	.word	0x4000a400

08001d10 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d14:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d16:	4a30      	ldr	r2, [pc, #192]	@ (8001dd8 <MX_FDCAN3_Init+0xc8>)
 8001d18:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d20:	4b2c      	ldr	r3, [pc, #176]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d26:	4b2b      	ldr	r3, [pc, #172]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d2c:	4b29      	ldr	r3, [pc, #164]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001d32:	4b28      	ldr	r3, [pc, #160]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 6;
 8001d38:	4b26      	ldr	r3, [pc, #152]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d3a:	2206      	movs	r2, #6
 8001d3c:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 5;
 8001d3e:	4b25      	ldr	r3, [pc, #148]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d40:	2205      	movs	r2, #5
 8001d42:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 15;
 8001d44:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d46:	220f      	movs	r2, #15
 8001d48:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 5;
 8001d4a:	4b22      	ldr	r3, [pc, #136]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d4c:	2205      	movs	r2, #5
 8001d4e:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 6;
 8001d50:	4b20      	ldr	r3, [pc, #128]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d52:	2206      	movs	r2, #6
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan3.Init.DataSyncJumpWidth = 5;
 8001d56:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d58:	2205      	movs	r2, #5
 8001d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan3.Init.DataTimeSeg1 = 15;
 8001d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d5e:	220f      	movs	r2, #15
 8001d60:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan3.Init.DataTimeSeg2 = 5;
 8001d62:	4b1c      	ldr	r3, [pc, #112]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d64:	2205      	movs	r2, #5
 8001d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan3.Init.MessageRAMOffset = 0x812;
 8001d68:	4b1a      	ldr	r3, [pc, #104]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d6a:	f640 0212 	movw	r2, #2066	@ 0x812
 8001d6e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan3.Init.StdFiltersNbr = 1;
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001d76:	4b17      	ldr	r3, [pc, #92]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 4;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d7e:	2204      	movs	r2, #4
 8001d80:	641a      	str	r2, [r3, #64]	@ 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001d82:	4b14      	ldr	r3, [pc, #80]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d84:	2204      	movs	r2, #4
 8001d86:	645a      	str	r2, [r3, #68]	@ 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 4;
 8001d88:	4b12      	ldr	r3, [pc, #72]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	649a      	str	r2, [r3, #72]	@ 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001d8e:	4b11      	ldr	r3, [pc, #68]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d90:	2204      	movs	r2, #4
 8001d92:	64da      	str	r2, [r3, #76]	@ 0x4c
  hfdcan3.Init.RxBuffersNbr = 4;
 8001d94:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d96:	2204      	movs	r2, #4
 8001d98:	651a      	str	r2, [r3, #80]	@ 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hfdcan3.Init.TxEventsNbr = 4;
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001da2:	2204      	movs	r2, #4
 8001da4:	659a      	str	r2, [r3, #88]	@ 0x58
  hfdcan3.Init.TxBuffersNbr = 8;
 8001da6:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001da8:	2208      	movs	r2, #8
 8001daa:	65da      	str	r2, [r3, #92]	@ 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 8;
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001dae:	2208      	movs	r2, #8
 8001db0:	661a      	str	r2, [r3, #96]	@ 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001db2:	4b08      	ldr	r3, [pc, #32]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	665a      	str	r2, [r3, #100]	@ 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001dba:	2204      	movs	r2, #4
 8001dbc:	669a      	str	r2, [r3, #104]	@ 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001dbe:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <MX_FDCAN3_Init+0xc4>)
 8001dc0:	f007 f89e 	bl	8008f00 <HAL_FDCAN_Init>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <MX_FDCAN3_Init+0xbe>
  {
    Error_Handler();
 8001dca:	f000 fea7 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	24000aa0 	.word	0x24000aa0
 8001dd8:	4000d400 	.word	0x4000d400

08001ddc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001de2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e54 <MX_I2C2_Init+0x78>)
 8001de4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20A0C4DF;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001de8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e58 <MX_I2C2_Init+0x7c>)
 8001dea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001dec:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df2:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001dfe:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e04:	4b12      	ldr	r3, [pc, #72]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e0a:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e16:	480e      	ldr	r0, [pc, #56]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001e18:	f008 fc84 	bl	800a724 <HAL_I2C_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e22:	f000 fe7b 	bl	8002b1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e26:	2100      	movs	r1, #0
 8001e28:	4809      	ldr	r0, [pc, #36]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001e2a:	f008 fd17 	bl	800a85c <HAL_I2CEx_ConfigAnalogFilter>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001e34:	f000 fe72 	bl	8002b1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4805      	ldr	r0, [pc, #20]	@ (8001e50 <MX_I2C2_Init+0x74>)
 8001e3c:	f008 fd59 	bl	800a8f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001e46:	f000 fe69 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	24000b40 	.word	0x24000b40
 8001e54:	40005800 	.word	0x40005800
 8001e58:	20a0c4df 	.word	0x20a0c4df

08001e5c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001e60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e62:	4a1c      	ldr	r2, [pc, #112]	@ (8001ed4 <MX_I2C4_Init+0x78>)
 8001e64:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20A0C4DF;
 8001e66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e68:	4a1b      	ldr	r2, [pc, #108]	@ (8001ed8 <MX_I2C4_Init+0x7c>)
 8001e6a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001e6c:	4b18      	ldr	r3, [pc, #96]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e72:	4b17      	ldr	r3, [pc, #92]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e78:	4b15      	ldr	r3, [pc, #84]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8001e7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e84:	4b12      	ldr	r3, [pc, #72]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001e96:	480e      	ldr	r0, [pc, #56]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001e98:	f008 fc44 	bl	800a724 <HAL_I2C_Init>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001ea2:	f000 fe3b 	bl	8002b1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4809      	ldr	r0, [pc, #36]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001eaa:	f008 fcd7 	bl	800a85c <HAL_I2CEx_ConfigAnalogFilter>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001eb4:	f000 fe32 	bl	8002b1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4805      	ldr	r0, [pc, #20]	@ (8001ed0 <MX_I2C4_Init+0x74>)
 8001ebc:	f008 fd19 	bl	800a8f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001ec6:	f000 fe29 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	24000b94 	.word	0x24000b94
 8001ed4:	58001c00 	.word	0x58001c00
 8001ed8:	20a0c4df 	.word	0x20a0c4df

08001edc <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <MX_OPAMP1_Init+0x3c>)
 8001ee2:	4a0e      	ldr	r2, [pc, #56]	@ (8001f1c <MX_OPAMP1_Init+0x40>)
 8001ee4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.Mode = OPAMP_STANDALONE_MODE;
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <MX_OPAMP1_Init+0x3c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <MX_OPAMP1_Init+0x3c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InvertingInput = OPAMP_INVERTINGINPUT_IO0;
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_OPAMP1_Init+0x3c>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001ef8:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <MX_OPAMP1_Init+0x3c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	605a      	str	r2, [r3, #4]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_OPAMP1_Init+0x3c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	@ (8001f18 <MX_OPAMP1_Init+0x3c>)
 8001f06:	f008 fd41 	bl	800a98c <HAL_OPAMP_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_OPAMP1_Init+0x38>
  {
    Error_Handler();
 8001f10:	f000 fe04 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	24000be8 	.word	0x24000be8
 8001f1c:	40009000 	.word	0x40009000

08001f20 <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <MX_OPAMP2_Init+0x38>)
 8001f26:	4a0d      	ldr	r2, [pc, #52]	@ (8001f5c <MX_OPAMP2_Init+0x3c>)
 8001f28:	601a      	str	r2, [r3, #0]
  hopamp2.Init.Mode = OPAMP_STANDALONE_MODE;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f58 <MX_OPAMP2_Init+0x38>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <MX_OPAMP2_Init+0x38>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	611a      	str	r2, [r3, #16]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <MX_OPAMP2_Init+0x38>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	605a      	str	r2, [r3, #4]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001f3c:	4b06      	ldr	r3, [pc, #24]	@ (8001f58 <MX_OPAMP2_Init+0x38>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001f42:	4805      	ldr	r0, [pc, #20]	@ (8001f58 <MX_OPAMP2_Init+0x38>)
 8001f44:	f008 fd22 	bl	800a98c <HAL_OPAMP_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_OPAMP2_Init+0x32>
  {
    Error_Handler();
 8001f4e:	f000 fde5 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	24000c1c 	.word	0x24000c1c
 8001f5c:	40009010 	.word	0x40009010

08001f60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b09c      	sub	sp, #112	@ 0x70
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f66:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	609a      	str	r2, [r3, #8]
 8001f72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f80:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	609a      	str	r2, [r3, #8]
 8001f8c:	60da      	str	r2, [r3, #12]
 8001f8e:	611a      	str	r2, [r3, #16]
 8001f90:	615a      	str	r2, [r3, #20]
 8001f92:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	2234      	movs	r2, #52	@ 0x34
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f010 ff7a 	bl	8012e94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fa0:	4b55      	ldr	r3, [pc, #340]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001fa2:	4a56      	ldr	r2, [pc, #344]	@ (80020fc <MX_TIM1_Init+0x19c>)
 8001fa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 256-1;
 8001fa6:	4b54      	ldr	r3, [pc, #336]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001fa8:	22ff      	movs	r2, #255	@ 0xff
 8001faa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fac:	4b52      	ldr	r3, [pc, #328]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 200-1;
 8001fb2:	4b51      	ldr	r3, [pc, #324]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001fb4:	22c7      	movs	r2, #199	@ 0xc7
 8001fb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fb8:	4b4f      	ldr	r3, [pc, #316]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fbe:	4b4e      	ldr	r3, [pc, #312]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fc4:	4b4c      	ldr	r3, [pc, #304]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001fc6:	2280      	movs	r2, #128	@ 0x80
 8001fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001fca:	484b      	ldr	r0, [pc, #300]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001fcc:	f00c f95e 	bl	800e28c <HAL_TIM_Base_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001fd6:	f000 fda1 	bl	8002b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fde:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001fe0:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4844      	ldr	r0, [pc, #272]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001fe8:	f00c fcae 	bl	800e948 <HAL_TIM_ConfigClockSource>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001ff2:	f000 fd93 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ff6:	4840      	ldr	r0, [pc, #256]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8001ff8:	f00c fa1e 	bl	800e438 <HAL_TIM_PWM_Init>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002002:	f000 fd8b 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200e:	2300      	movs	r3, #0
 8002010:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002012:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002016:	4619      	mov	r1, r3
 8002018:	4837      	ldr	r0, [pc, #220]	@ (80020f8 <MX_TIM1_Init+0x198>)
 800201a:	f00d f9d9 	bl	800f3d0 <HAL_TIMEx_MasterConfigSynchronization>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002024:	f000 fd7a 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002028:	2360      	movs	r3, #96	@ 0x60
 800202a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 100-1;
 800202c:	2363      	movs	r3, #99	@ 0x63
 800202e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002030:	2300      	movs	r3, #0
 8002032:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002034:	2300      	movs	r3, #0
 8002036:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800203c:	2300      	movs	r3, #0
 800203e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002040:	2300      	movs	r3, #0
 8002042:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002044:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002048:	2200      	movs	r2, #0
 800204a:	4619      	mov	r1, r3
 800204c:	482a      	ldr	r0, [pc, #168]	@ (80020f8 <MX_TIM1_Init+0x198>)
 800204e:	f00c fb67 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8002058:	f000 fd60 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800205c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002060:	2204      	movs	r2, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4824      	ldr	r0, [pc, #144]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8002066:	f00c fb5b 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8002070:	f000 fd54 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002074:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002078:	2208      	movs	r2, #8
 800207a:	4619      	mov	r1, r3
 800207c:	481e      	ldr	r0, [pc, #120]	@ (80020f8 <MX_TIM1_Init+0x198>)
 800207e:	f00c fb4f 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8002088:	f000 fd48 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800208c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002090:	220c      	movs	r2, #12
 8002092:	4619      	mov	r1, r3
 8002094:	4818      	ldr	r0, [pc, #96]	@ (80020f8 <MX_TIM1_Init+0x198>)
 8002096:	f00c fb43 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 80020a0:	f000 fd3c 	bl	8002b1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020a8:	2300      	movs	r3, #0
 80020aa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020ac:	2300      	movs	r3, #0
 80020ae:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020bc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80020ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	4619      	mov	r1, r3
 80020d8:	4807      	ldr	r0, [pc, #28]	@ (80020f8 <MX_TIM1_Init+0x198>)
 80020da:	f00d fa15 	bl	800f508 <HAL_TIMEx_ConfigBreakDeadTime>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 80020e4:	f000 fd1a 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020e8:	4803      	ldr	r0, [pc, #12]	@ (80020f8 <MX_TIM1_Init+0x198>)
 80020ea:	f001 f983 	bl	80033f4 <HAL_TIM_MspPostInit>

}
 80020ee:	bf00      	nop
 80020f0:	3770      	adds	r7, #112	@ 0x70
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	24000c50 	.word	0x24000c50
 80020fc:	40010000 	.word	0x40010000

08002100 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08a      	sub	sp, #40	@ 0x28
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002106:	f107 031c 	add.w	r3, r7, #28
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002112:	463b      	mov	r3, r7
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
 8002120:	615a      	str	r2, [r3, #20]
 8002122:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002124:	4b2d      	ldr	r3, [pc, #180]	@ (80021dc <MX_TIM2_Init+0xdc>)
 8002126:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800212a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800212c:	4b2b      	ldr	r3, [pc, #172]	@ (80021dc <MX_TIM2_Init+0xdc>)
 800212e:	2200      	movs	r2, #0
 8002130:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002132:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <MX_TIM2_Init+0xdc>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002138:	4b28      	ldr	r3, [pc, #160]	@ (80021dc <MX_TIM2_Init+0xdc>)
 800213a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800213e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002140:	4b26      	ldr	r3, [pc, #152]	@ (80021dc <MX_TIM2_Init+0xdc>)
 8002142:	2200      	movs	r2, #0
 8002144:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002146:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <MX_TIM2_Init+0xdc>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800214c:	4823      	ldr	r0, [pc, #140]	@ (80021dc <MX_TIM2_Init+0xdc>)
 800214e:	f00c f973 	bl	800e438 <HAL_TIM_PWM_Init>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002158:	f000 fce0 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	481c      	ldr	r0, [pc, #112]	@ (80021dc <MX_TIM2_Init+0xdc>)
 800216c:	f00d f930 	bl	800f3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002176:	f000 fcd1 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800217a:	2360      	movs	r3, #96	@ 0x60
 800217c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800217e:	2300      	movs	r3, #0
 8002180:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002182:	2300      	movs	r3, #0
 8002184:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800218a:	463b      	mov	r3, r7
 800218c:	2200      	movs	r2, #0
 800218e:	4619      	mov	r1, r3
 8002190:	4812      	ldr	r0, [pc, #72]	@ (80021dc <MX_TIM2_Init+0xdc>)
 8002192:	f00c fac5 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 800219c:	f000 fcbe 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021a0:	463b      	mov	r3, r7
 80021a2:	2204      	movs	r2, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	480d      	ldr	r0, [pc, #52]	@ (80021dc <MX_TIM2_Init+0xdc>)
 80021a8:	f00c faba 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80021b2:	f000 fcb3 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021b6:	463b      	mov	r3, r7
 80021b8:	2208      	movs	r2, #8
 80021ba:	4619      	mov	r1, r3
 80021bc:	4807      	ldr	r0, [pc, #28]	@ (80021dc <MX_TIM2_Init+0xdc>)
 80021be:	f00c faaf 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 80021c8:	f000 fca8 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021cc:	4803      	ldr	r0, [pc, #12]	@ (80021dc <MX_TIM2_Init+0xdc>)
 80021ce:	f001 f911 	bl	80033f4 <HAL_TIM_MspPostInit>

}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	@ 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	24000c9c 	.word	0x24000c9c

080021e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	@ 0x28
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	2200      	movs	r2, #0
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	605a      	str	r2, [r3, #4]
 80021f0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f2:	463b      	mov	r3, r7
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
 8002200:	615a      	str	r2, [r3, #20]
 8002202:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002204:	4b32      	ldr	r3, [pc, #200]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 8002206:	4a33      	ldr	r2, [pc, #204]	@ (80022d4 <MX_TIM3_Init+0xf4>)
 8002208:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800220a:	4b31      	ldr	r3, [pc, #196]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b2f      	ldr	r3, [pc, #188]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002216:	4b2e      	ldr	r3, [pc, #184]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 8002218:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800221c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221e:	4b2c      	ldr	r3, [pc, #176]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 8002220:	2200      	movs	r2, #0
 8002222:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002224:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800222a:	4829      	ldr	r0, [pc, #164]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 800222c:	f00c f904 	bl	800e438 <HAL_TIM_PWM_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002236:	f000 fc71 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800223a:	2300      	movs	r3, #0
 800223c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	4619      	mov	r1, r3
 8002248:	4821      	ldr	r0, [pc, #132]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 800224a:	f00d f8c1 	bl	800f3d0 <HAL_TIMEx_MasterConfigSynchronization>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002254:	f000 fc62 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002258:	2360      	movs	r3, #96	@ 0x60
 800225a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002268:	463b      	mov	r3, r7
 800226a:	2200      	movs	r2, #0
 800226c:	4619      	mov	r1, r3
 800226e:	4818      	ldr	r0, [pc, #96]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 8002270:	f00c fa56 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800227a:	f000 fc4f 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800227e:	463b      	mov	r3, r7
 8002280:	2204      	movs	r2, #4
 8002282:	4619      	mov	r1, r3
 8002284:	4812      	ldr	r0, [pc, #72]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 8002286:	f00c fa4b 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002290:	f000 fc44 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002294:	463b      	mov	r3, r7
 8002296:	2208      	movs	r2, #8
 8002298:	4619      	mov	r1, r3
 800229a:	480d      	ldr	r0, [pc, #52]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 800229c:	f00c fa40 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 80022a6:	f000 fc39 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80022aa:	463b      	mov	r3, r7
 80022ac:	220c      	movs	r2, #12
 80022ae:	4619      	mov	r1, r3
 80022b0:	4807      	ldr	r0, [pc, #28]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 80022b2:	f00c fa35 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80022bc:	f000 fc2e 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80022c0:	4803      	ldr	r0, [pc, #12]	@ (80022d0 <MX_TIM3_Init+0xf0>)
 80022c2:	f001 f897 	bl	80033f4 <HAL_TIM_MspPostInit>

}
 80022c6:	bf00      	nop
 80022c8:	3728      	adds	r7, #40	@ 0x28
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	24000ce8 	.word	0x24000ce8
 80022d4:	40000400 	.word	0x40000400

080022d8 <MX_TIM23_Init>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08e      	sub	sp, #56	@ 0x38
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	605a      	str	r2, [r3, #4]
 80022e8:	609a      	str	r2, [r3, #8]
 80022ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022ec:	f107 031c 	add.w	r3, r7, #28
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f8:	463b      	mov	r3, r7
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	611a      	str	r2, [r3, #16]
 8002306:	615a      	str	r2, [r3, #20]
 8002308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800230a:	4b3e      	ldr	r3, [pc, #248]	@ (8002404 <MX_TIM23_Init+0x12c>)
 800230c:	4a3e      	ldr	r2, [pc, #248]	@ (8002408 <MX_TIM23_Init+0x130>)
 800230e:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 256-1;
 8002310:	4b3c      	ldr	r3, [pc, #240]	@ (8002404 <MX_TIM23_Init+0x12c>)
 8002312:	22ff      	movs	r2, #255	@ 0xff
 8002314:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002316:	4b3b      	ldr	r3, [pc, #236]	@ (8002404 <MX_TIM23_Init+0x12c>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 20000-1;
 800231c:	4b39      	ldr	r3, [pc, #228]	@ (8002404 <MX_TIM23_Init+0x12c>)
 800231e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002322:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002324:	4b37      	ldr	r3, [pc, #220]	@ (8002404 <MX_TIM23_Init+0x12c>)
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800232a:	4b36      	ldr	r3, [pc, #216]	@ (8002404 <MX_TIM23_Init+0x12c>)
 800232c:	2280      	movs	r2, #128	@ 0x80
 800232e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 8002330:	4834      	ldr	r0, [pc, #208]	@ (8002404 <MX_TIM23_Init+0x12c>)
 8002332:	f00b ffab 	bl	800e28c <HAL_TIM_Base_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_TIM23_Init+0x68>
  {
    Error_Handler();
 800233c:	f000 fbee 	bl	8002b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002340:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002344:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 8002346:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800234a:	4619      	mov	r1, r3
 800234c:	482d      	ldr	r0, [pc, #180]	@ (8002404 <MX_TIM23_Init+0x12c>)
 800234e:	f00c fafb 	bl	800e948 <HAL_TIM_ConfigClockSource>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_TIM23_Init+0x84>
  {
    Error_Handler();
 8002358:	f000 fbe0 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800235c:	4829      	ldr	r0, [pc, #164]	@ (8002404 <MX_TIM23_Init+0x12c>)
 800235e:	f00c f86b 	bl	800e438 <HAL_TIM_PWM_Init>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM23_Init+0x94>
  {
    Error_Handler();
 8002368:	f000 fbd8 	bl	8002b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236c:	2300      	movs	r3, #0
 800236e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 8002374:	f107 031c 	add.w	r3, r7, #28
 8002378:	4619      	mov	r1, r3
 800237a:	4822      	ldr	r0, [pc, #136]	@ (8002404 <MX_TIM23_Init+0x12c>)
 800237c:	f00d f828 	bl	800f3d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_TIM23_Init+0xb2>
  {
    Error_Handler();
 8002386:	f000 fbc9 	bl	8002b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800238a:	2360      	movs	r3, #96	@ 0x60
 800238c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 1000-1;
 800238e:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002392:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002398:	2300      	movs	r3, #0
 800239a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800239c:	463b      	mov	r3, r7
 800239e:	2200      	movs	r2, #0
 80023a0:	4619      	mov	r1, r3
 80023a2:	4818      	ldr	r0, [pc, #96]	@ (8002404 <MX_TIM23_Init+0x12c>)
 80023a4:	f00c f9bc 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <MX_TIM23_Init+0xda>
  {
    Error_Handler();
 80023ae:	f000 fbb5 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023b2:	463b      	mov	r3, r7
 80023b4:	2204      	movs	r2, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4812      	ldr	r0, [pc, #72]	@ (8002404 <MX_TIM23_Init+0x12c>)
 80023ba:	f00c f9b1 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM23_Init+0xf0>
  {
    Error_Handler();
 80023c4:	f000 fbaa 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023c8:	463b      	mov	r3, r7
 80023ca:	2208      	movs	r2, #8
 80023cc:	4619      	mov	r1, r3
 80023ce:	480d      	ldr	r0, [pc, #52]	@ (8002404 <MX_TIM23_Init+0x12c>)
 80023d0:	f00c f9a6 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM23_Init+0x106>
  {
    Error_Handler();
 80023da:	f000 fb9f 	bl	8002b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023de:	463b      	mov	r3, r7
 80023e0:	220c      	movs	r2, #12
 80023e2:	4619      	mov	r1, r3
 80023e4:	4807      	ldr	r0, [pc, #28]	@ (8002404 <MX_TIM23_Init+0x12c>)
 80023e6:	f00c f99b 	bl	800e720 <HAL_TIM_PWM_ConfigChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <MX_TIM23_Init+0x11c>
  {
    Error_Handler();
 80023f0:	f000 fb94 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 80023f4:	4803      	ldr	r0, [pc, #12]	@ (8002404 <MX_TIM23_Init+0x12c>)
 80023f6:	f000 fffd 	bl	80033f4 <HAL_TIM_MspPostInit>

}
 80023fa:	bf00      	nop
 80023fc:	3738      	adds	r7, #56	@ 0x38
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	24000d34 	.word	0x24000d34
 8002408:	4000e000 	.word	0x4000e000

0800240c <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002410:	4b24      	ldr	r3, [pc, #144]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002412:	4a25      	ldr	r2, [pc, #148]	@ (80024a8 <MX_UART7_Init+0x9c>)
 8002414:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8002416:	4b23      	ldr	r3, [pc, #140]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002418:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800241c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b21      	ldr	r3, [pc, #132]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b1f      	ldr	r3, [pc, #124]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800242a:	4b1e      	ldr	r3, [pc, #120]	@ (80024a4 <MX_UART7_Init+0x98>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b1c      	ldr	r3, [pc, #112]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b19      	ldr	r3, [pc, #100]	@ (80024a4 <MX_UART7_Init+0x98>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002442:	4b18      	ldr	r3, [pc, #96]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002448:	4b16      	ldr	r3, [pc, #88]	@ (80024a4 <MX_UART7_Init+0x98>)
 800244a:	2200      	movs	r2, #0
 800244c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800244e:	4b15      	ldr	r3, [pc, #84]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002450:	2200      	movs	r2, #0
 8002452:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart7, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002454:	2300      	movs	r3, #0
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	4812      	ldr	r0, [pc, #72]	@ (80024a4 <MX_UART7_Init+0x98>)
 800245c:	f00f f89e 	bl	801159c <HAL_RS485Ex_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_UART7_Init+0x5e>
  {
    Error_Handler();
 8002466:	f000 fb59 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800246a:	2100      	movs	r1, #0
 800246c:	480d      	ldr	r0, [pc, #52]	@ (80024a4 <MX_UART7_Init+0x98>)
 800246e:	f00f f956 	bl	801171e <HAL_UARTEx_SetTxFifoThreshold>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MX_UART7_Init+0x70>
  {
    Error_Handler();
 8002478:	f000 fb50 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800247c:	2100      	movs	r1, #0
 800247e:	4809      	ldr	r0, [pc, #36]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002480:	f00f f98b 	bl	801179a <HAL_UARTEx_SetRxFifoThreshold>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <MX_UART7_Init+0x82>
  {
    Error_Handler();
 800248a:	f000 fb47 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart7) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	@ (80024a4 <MX_UART7_Init+0x98>)
 8002490:	f00f f90c 	bl	80116ac <HAL_UARTEx_DisableFifoMode>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_UART7_Init+0x92>
  {
    Error_Handler();
 800249a:	f000 fb3f 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	24000d80 	.word	0x24000d80
 80024a8:	40007800 	.word	0x40007800

080024ac <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80024b0:	4b22      	ldr	r3, [pc, #136]	@ (800253c <MX_UART8_Init+0x90>)
 80024b2:	4a23      	ldr	r2, [pc, #140]	@ (8002540 <MX_UART8_Init+0x94>)
 80024b4:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 100000;
 80024b6:	4b21      	ldr	r3, [pc, #132]	@ (800253c <MX_UART8_Init+0x90>)
 80024b8:	4a22      	ldr	r2, [pc, #136]	@ (8002544 <MX_UART8_Init+0x98>)
 80024ba:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80024bc:	4b1f      	ldr	r3, [pc, #124]	@ (800253c <MX_UART8_Init+0x90>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80024c2:	4b1e      	ldr	r3, [pc, #120]	@ (800253c <MX_UART8_Init+0x90>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_EVEN;
 80024c8:	4b1c      	ldr	r3, [pc, #112]	@ (800253c <MX_UART8_Init+0x90>)
 80024ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024ce:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80024d0:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <MX_UART8_Init+0x90>)
 80024d2:	220c      	movs	r2, #12
 80024d4:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024d6:	4b19      	ldr	r3, [pc, #100]	@ (800253c <MX_UART8_Init+0x90>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80024dc:	4b17      	ldr	r3, [pc, #92]	@ (800253c <MX_UART8_Init+0x90>)
 80024de:	2200      	movs	r2, #0
 80024e0:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e2:	4b16      	ldr	r3, [pc, #88]	@ (800253c <MX_UART8_Init+0x90>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024e8:	4b14      	ldr	r3, [pc, #80]	@ (800253c <MX_UART8_Init+0x90>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ee:	4b13      	ldr	r3, [pc, #76]	@ (800253c <MX_UART8_Init+0x90>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80024f4:	4811      	ldr	r0, [pc, #68]	@ (800253c <MX_UART8_Init+0x90>)
 80024f6:	f00d f893 	bl	800f620 <HAL_UART_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8002500:	f000 fb0c 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002504:	2100      	movs	r1, #0
 8002506:	480d      	ldr	r0, [pc, #52]	@ (800253c <MX_UART8_Init+0x90>)
 8002508:	f00f f909 	bl	801171e <HAL_UARTEx_SetTxFifoThreshold>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8002512:	f000 fb03 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002516:	2100      	movs	r1, #0
 8002518:	4808      	ldr	r0, [pc, #32]	@ (800253c <MX_UART8_Init+0x90>)
 800251a:	f00f f93e 	bl	801179a <HAL_UARTEx_SetRxFifoThreshold>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8002524:	f000 fafa 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8002528:	4804      	ldr	r0, [pc, #16]	@ (800253c <MX_UART8_Init+0x90>)
 800252a:	f00f f8bf 	bl	80116ac <HAL_UARTEx_DisableFifoMode>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8002534:	f000 faf2 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002538:	bf00      	nop
 800253a:	bd80      	pop	{r7, pc}
 800253c:	24000e14 	.word	0x24000e14
 8002540:	40007c00 	.word	0x40007c00
 8002544:	000186a0 	.word	0x000186a0

08002548 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800254c:	4b22      	ldr	r3, [pc, #136]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 800254e:	4a23      	ldr	r2, [pc, #140]	@ (80025dc <MX_USART1_UART_Init+0x94>)
 8002550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002552:	4b21      	ldr	r3, [pc, #132]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 8002554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800255a:	4b1f      	ldr	r3, [pc, #124]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002560:	4b1d      	ldr	r3, [pc, #116]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 8002568:	2200      	movs	r2, #0
 800256a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800256c:	4b1a      	ldr	r3, [pc, #104]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 800256e:	220c      	movs	r2, #12
 8002570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 8002574:	2200      	movs	r2, #0
 8002576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002578:	4b17      	ldr	r3, [pc, #92]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 800257a:	2200      	movs	r2, #0
 800257c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800257e:	4b16      	ldr	r3, [pc, #88]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 8002580:	2200      	movs	r2, #0
 8002582:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002584:	4b14      	ldr	r3, [pc, #80]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 8002586:	2200      	movs	r2, #0
 8002588:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800258a:	4b13      	ldr	r3, [pc, #76]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 800258c:	2200      	movs	r2, #0
 800258e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002590:	4811      	ldr	r0, [pc, #68]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 8002592:	f00d f845 	bl	800f620 <HAL_UART_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800259c:	f000 fabe 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025a0:	2100      	movs	r1, #0
 80025a2:	480d      	ldr	r0, [pc, #52]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 80025a4:	f00f f8bb 	bl	801171e <HAL_UARTEx_SetTxFifoThreshold>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80025ae:	f000 fab5 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025b2:	2100      	movs	r1, #0
 80025b4:	4808      	ldr	r0, [pc, #32]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 80025b6:	f00f f8f0 	bl	801179a <HAL_UARTEx_SetRxFifoThreshold>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80025c0:	f000 faac 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025c4:	4804      	ldr	r0, [pc, #16]	@ (80025d8 <MX_USART1_UART_Init+0x90>)
 80025c6:	f00f f871 	bl	80116ac <HAL_UARTEx_DisableFifoMode>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80025d0:	f000 faa4 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025d4:	bf00      	nop
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	24000ea8 	.word	0x24000ea8
 80025dc:	40011000 	.word	0x40011000

080025e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80025e4:	4b22      	ldr	r3, [pc, #136]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 80025e6:	4a23      	ldr	r2, [pc, #140]	@ (8002674 <MX_USART2_UART_Init+0x94>)
 80025e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80025ea:	4b21      	ldr	r3, [pc, #132]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 80025ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80025f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 8002600:	2200      	movs	r2, #0
 8002602:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002604:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 8002606:	220c      	movs	r2, #12
 8002608:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 800260c:	2200      	movs	r2, #0
 800260e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002610:	4b17      	ldr	r3, [pc, #92]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 8002612:	2200      	movs	r2, #0
 8002614:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002616:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 8002618:	2200      	movs	r2, #0
 800261a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800261c:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 800261e:	2200      	movs	r2, #0
 8002620:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002622:	4b13      	ldr	r3, [pc, #76]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 8002624:	2200      	movs	r2, #0
 8002626:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002628:	4811      	ldr	r0, [pc, #68]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 800262a:	f00c fff9 	bl	800f620 <HAL_UART_Init>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002634:	f000 fa72 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002638:	2100      	movs	r1, #0
 800263a:	480d      	ldr	r0, [pc, #52]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 800263c:	f00f f86f 	bl	801171e <HAL_UARTEx_SetTxFifoThreshold>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002646:	f000 fa69 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800264a:	2100      	movs	r1, #0
 800264c:	4808      	ldr	r0, [pc, #32]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 800264e:	f00f f8a4 	bl	801179a <HAL_UARTEx_SetRxFifoThreshold>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002658:	f000 fa60 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800265c:	4804      	ldr	r0, [pc, #16]	@ (8002670 <MX_USART2_UART_Init+0x90>)
 800265e:	f00f f825 	bl	80116ac <HAL_UARTEx_DisableFifoMode>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002668:	f000 fa58 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}
 8002670:	24000f3c 	.word	0x24000f3c
 8002674:	40004400 	.word	0x40004400

08002678 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800267c:	4b22      	ldr	r3, [pc, #136]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 800267e:	4a23      	ldr	r2, [pc, #140]	@ (800270c <MX_USART3_UART_Init+0x94>)
 8002680:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002682:	4b21      	ldr	r3, [pc, #132]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 8002684:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002688:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800268a:	4b1f      	ldr	r3, [pc, #124]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 800268c:	2200      	movs	r2, #0
 800268e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002690:	4b1d      	ldr	r3, [pc, #116]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 8002692:	2200      	movs	r2, #0
 8002694:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002696:	4b1c      	ldr	r3, [pc, #112]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 8002698:	2200      	movs	r2, #0
 800269a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800269c:	4b1a      	ldr	r3, [pc, #104]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 800269e:	220c      	movs	r2, #12
 80026a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a2:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80026a8:	4b17      	ldr	r3, [pc, #92]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ae:	4b16      	ldr	r3, [pc, #88]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026b4:	4b14      	ldr	r3, [pc, #80]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ba:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 80026bc:	2200      	movs	r2, #0
 80026be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80026c0:	4811      	ldr	r0, [pc, #68]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 80026c2:	f00c ffad 	bl	800f620 <HAL_UART_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80026cc:	f000 fa26 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026d0:	2100      	movs	r1, #0
 80026d2:	480d      	ldr	r0, [pc, #52]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 80026d4:	f00f f823 	bl	801171e <HAL_UARTEx_SetTxFifoThreshold>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80026de:	f000 fa1d 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026e2:	2100      	movs	r1, #0
 80026e4:	4808      	ldr	r0, [pc, #32]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 80026e6:	f00f f858 	bl	801179a <HAL_UARTEx_SetRxFifoThreshold>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80026f0:	f000 fa14 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80026f4:	4804      	ldr	r0, [pc, #16]	@ (8002708 <MX_USART3_UART_Init+0x90>)
 80026f6:	f00e ffd9 	bl	80116ac <HAL_UARTEx_DisableFifoMode>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002700:	f000 fa0c 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002704:	bf00      	nop
 8002706:	bd80      	pop	{r7, pc}
 8002708:	24000fd0 	.word	0x24000fd0
 800270c:	40004800 	.word	0x40004800

08002710 <MX_USART10_UART_Init>:
  * @brief USART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART10_UART_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE END USART10_Init 0 */

  /* USER CODE BEGIN USART10_Init 1 */

  /* USER CODE END USART10_Init 1 */
  huart10.Instance = USART10;
 8002714:	4b24      	ldr	r3, [pc, #144]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002716:	4a25      	ldr	r2, [pc, #148]	@ (80027ac <MX_USART10_UART_Init+0x9c>)
 8002718:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 800271a:	4b23      	ldr	r3, [pc, #140]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 800271c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002720:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8002722:	4b21      	ldr	r3, [pc, #132]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8002728:	4b1f      	ldr	r3, [pc, #124]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 800272e:	4b1e      	ldr	r3, [pc, #120]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8002734:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002736:	220c      	movs	r2, #12
 8002738:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800273a:	4b1b      	ldr	r3, [pc, #108]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8002740:	4b19      	ldr	r3, [pc, #100]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002742:	2200      	movs	r2, #0
 8002744:	61da      	str	r2, [r3, #28]
  huart10.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002746:	4b18      	ldr	r3, [pc, #96]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002748:	2200      	movs	r2, #0
 800274a:	621a      	str	r2, [r3, #32]
  huart10.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800274c:	4b16      	ldr	r3, [pc, #88]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 800274e:	2200      	movs	r2, #0
 8002750:	625a      	str	r2, [r3, #36]	@ 0x24
  huart10.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002752:	4b15      	ldr	r3, [pc, #84]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002754:	2200      	movs	r2, #0
 8002756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RS485Ex_Init(&huart10, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 8002758:	2300      	movs	r3, #0
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	4812      	ldr	r0, [pc, #72]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002760:	f00e ff1c 	bl	801159c <HAL_RS485Ex_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_USART10_UART_Init+0x5e>
  {
    Error_Handler();
 800276a:	f000 f9d7 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart10, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800276e:	2100      	movs	r1, #0
 8002770:	480d      	ldr	r0, [pc, #52]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002772:	f00e ffd4 	bl	801171e <HAL_UARTEx_SetTxFifoThreshold>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <MX_USART10_UART_Init+0x70>
  {
    Error_Handler();
 800277c:	f000 f9ce 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart10, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002780:	2100      	movs	r1, #0
 8002782:	4809      	ldr	r0, [pc, #36]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002784:	f00f f809 	bl	801179a <HAL_UARTEx_SetRxFifoThreshold>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <MX_USART10_UART_Init+0x82>
  {
    Error_Handler();
 800278e:	f000 f9c5 	bl	8002b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart10) != HAL_OK)
 8002792:	4805      	ldr	r0, [pc, #20]	@ (80027a8 <MX_USART10_UART_Init+0x98>)
 8002794:	f00e ff8a 	bl	80116ac <HAL_UARTEx_DisableFifoMode>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <MX_USART10_UART_Init+0x92>
  {
    Error_Handler();
 800279e:	f000 f9bd 	bl	8002b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART10_Init 2 */

  /* USER CODE END USART10_Init 2 */

}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	24001064 	.word	0x24001064
 80027ac:	40011c00 	.word	0x40011c00

080027b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80027b6:	4b35      	ldr	r3, [pc, #212]	@ (800288c <MX_DMA_Init+0xdc>)
 80027b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027bc:	4a33      	ldr	r2, [pc, #204]	@ (800288c <MX_DMA_Init+0xdc>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80027c6:	4b31      	ldr	r3, [pc, #196]	@ (800288c <MX_DMA_Init+0xdc>)
 80027c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80027d4:	4b2d      	ldr	r3, [pc, #180]	@ (800288c <MX_DMA_Init+0xdc>)
 80027d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027da:	4a2c      	ldr	r2, [pc, #176]	@ (800288c <MX_DMA_Init+0xdc>)
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80027e4:	4b29      	ldr	r3, [pc, #164]	@ (800288c <MX_DMA_Init+0xdc>)
 80027e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80027f2:	2200      	movs	r2, #0
 80027f4:	2105      	movs	r1, #5
 80027f6:	200b      	movs	r0, #11
 80027f8:	f003 fd15 	bl	8006226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80027fc:	200b      	movs	r0, #11
 80027fe:	f003 fd2c 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8002802:	2200      	movs	r2, #0
 8002804:	2105      	movs	r1, #5
 8002806:	200c      	movs	r0, #12
 8002808:	f003 fd0d 	bl	8006226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800280c:	200c      	movs	r0, #12
 800280e:	f003 fd24 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8002812:	2200      	movs	r2, #0
 8002814:	2105      	movs	r1, #5
 8002816:	200d      	movs	r0, #13
 8002818:	f003 fd05 	bl	8006226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800281c:	200d      	movs	r0, #13
 800281e:	f003 fd1c 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8002822:	2200      	movs	r2, #0
 8002824:	2105      	movs	r1, #5
 8002826:	200e      	movs	r0, #14
 8002828:	f003 fcfd 	bl	8006226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800282c:	200e      	movs	r0, #14
 800282e:	f003 fd14 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8002832:	2200      	movs	r2, #0
 8002834:	2105      	movs	r1, #5
 8002836:	200f      	movs	r0, #15
 8002838:	f003 fcf5 	bl	8006226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800283c:	200f      	movs	r0, #15
 800283e:	f003 fd0c 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002842:	2200      	movs	r2, #0
 8002844:	2105      	movs	r1, #5
 8002846:	2010      	movs	r0, #16
 8002848:	f003 fced 	bl	8006226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800284c:	2010      	movs	r0, #16
 800284e:	f003 fd04 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2105      	movs	r1, #5
 8002856:	2011      	movs	r0, #17
 8002858:	f003 fce5 	bl	8006226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800285c:	2011      	movs	r0, #17
 800285e:	f003 fcfc 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8002862:	2200      	movs	r2, #0
 8002864:	2105      	movs	r1, #5
 8002866:	202f      	movs	r0, #47	@ 0x2f
 8002868:	f003 fcdd 	bl	8006226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800286c:	202f      	movs	r0, #47	@ 0x2f
 800286e:	f003 fcf4 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8002872:	2200      	movs	r2, #0
 8002874:	2105      	movs	r1, #5
 8002876:	2038      	movs	r0, #56	@ 0x38
 8002878:	f003 fcd5 	bl	8006226 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800287c:	2038      	movs	r0, #56	@ 0x38
 800287e:	f003 fcec 	bl	800625a <HAL_NVIC_EnableIRQ>

}
 8002882:	bf00      	nop
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	58024400 	.word	0x58024400

08002890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b08e      	sub	sp, #56	@ 0x38
 8002894:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800289a:	2200      	movs	r2, #0
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	605a      	str	r2, [r3, #4]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	60da      	str	r2, [r3, #12]
 80028a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80028a6:	4b4d      	ldr	r3, [pc, #308]	@ (80029dc <MX_GPIO_Init+0x14c>)
 80028a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ac:	4a4b      	ldr	r2, [pc, #300]	@ (80029dc <MX_GPIO_Init+0x14c>)
 80028ae:	f043 0310 	orr.w	r3, r3, #16
 80028b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028b6:	4b49      	ldr	r3, [pc, #292]	@ (80029dc <MX_GPIO_Init+0x14c>)
 80028b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028bc:	f003 0310 	and.w	r3, r3, #16
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028c4:	4b45      	ldr	r3, [pc, #276]	@ (80029dc <MX_GPIO_Init+0x14c>)
 80028c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028ca:	4a44      	ldr	r2, [pc, #272]	@ (80029dc <MX_GPIO_Init+0x14c>)
 80028cc:	f043 0320 	orr.w	r3, r3, #32
 80028d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028d4:	4b41      	ldr	r3, [pc, #260]	@ (80029dc <MX_GPIO_Init+0x14c>)
 80028d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028da:	f003 0320 	and.w	r3, r3, #32
 80028de:	61fb      	str	r3, [r7, #28]
 80028e0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028e2:	4b3e      	ldr	r3, [pc, #248]	@ (80029dc <MX_GPIO_Init+0x14c>)
 80028e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028e8:	4a3c      	ldr	r2, [pc, #240]	@ (80029dc <MX_GPIO_Init+0x14c>)
 80028ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028f2:	4b3a      	ldr	r3, [pc, #232]	@ (80029dc <MX_GPIO_Init+0x14c>)
 80028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	4b36      	ldr	r3, [pc, #216]	@ (80029dc <MX_GPIO_Init+0x14c>)
 8002902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002906:	4a35      	ldr	r2, [pc, #212]	@ (80029dc <MX_GPIO_Init+0x14c>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002910:	4b32      	ldr	r3, [pc, #200]	@ (80029dc <MX_GPIO_Init+0x14c>)
 8002912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800291e:	4b2f      	ldr	r3, [pc, #188]	@ (80029dc <MX_GPIO_Init+0x14c>)
 8002920:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002924:	4a2d      	ldr	r2, [pc, #180]	@ (80029dc <MX_GPIO_Init+0x14c>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800292e:	4b2b      	ldr	r3, [pc, #172]	@ (80029dc <MX_GPIO_Init+0x14c>)
 8002930:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800293c:	4b27      	ldr	r3, [pc, #156]	@ (80029dc <MX_GPIO_Init+0x14c>)
 800293e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002942:	4a26      	ldr	r2, [pc, #152]	@ (80029dc <MX_GPIO_Init+0x14c>)
 8002944:	f043 0302 	orr.w	r3, r3, #2
 8002948:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800294c:	4b23      	ldr	r3, [pc, #140]	@ (80029dc <MX_GPIO_Init+0x14c>)
 800294e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800295a:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <MX_GPIO_Init+0x14c>)
 800295c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002960:	4a1e      	ldr	r2, [pc, #120]	@ (80029dc <MX_GPIO_Init+0x14c>)
 8002962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800296a:	4b1c      	ldr	r3, [pc, #112]	@ (80029dc <MX_GPIO_Init+0x14c>)
 800296c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002974:	60bb      	str	r3, [r7, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002978:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <MX_GPIO_Init+0x14c>)
 800297a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297e:	4a17      	ldr	r2, [pc, #92]	@ (80029dc <MX_GPIO_Init+0x14c>)
 8002980:	f043 0308 	orr.w	r3, r3, #8
 8002984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002988:	4b14      	ldr	r3, [pc, #80]	@ (80029dc <MX_GPIO_Init+0x14c>)
 800298a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002996:	2200      	movs	r2, #0
 8002998:	217c      	movs	r1, #124	@ 0x7c
 800299a:	4811      	ldr	r0, [pc, #68]	@ (80029e0 <MX_GPIO_Init+0x150>)
 800299c:	f007 fe8e 	bl	800a6bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80029a0:	237c      	movs	r3, #124	@ 0x7c
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a4:	2301      	movs	r3, #1
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80029ac:	2301      	movs	r3, #1
 80029ae:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	480a      	ldr	r0, [pc, #40]	@ (80029e0 <MX_GPIO_Init+0x150>)
 80029b8:	f007 fcd8 	bl	800a36c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80029bc:	2338      	movs	r3, #56	@ 0x38
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c0:	2300      	movs	r3, #0
 80029c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4805      	ldr	r0, [pc, #20]	@ (80029e4 <MX_GPIO_Init+0x154>)
 80029d0:	f007 fccc 	bl	800a36c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80029d4:	bf00      	nop
 80029d6:	3738      	adds	r7, #56	@ 0x38
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	58024400 	.word	0x58024400
 80029e0:	58021000 	.word	0x58021000
 80029e4:	58020000 	.word	0x58020000

080029e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b098      	sub	sp, #96	@ 0x60
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	PID_preset_t test = {25.0, 0.0, 0.0};
 80029f0:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <StartDefaultTask+0x104>)
 80029f2:	657b      	str	r3, [r7, #84]	@ 0x54
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029fa:	f04f 0300 	mov.w	r3, #0
 80029fe:	65fb      	str	r3, [r7, #92]	@ 0x5c

	int16_t wheelPrev[8] = {0, 0, 0, 0, 0, 0, 0, 0};
 8002a00:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	605a      	str	r2, [r3, #4]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	60da      	str	r2, [r3, #12]
			1   0

			2   3
		*/

	int8_t rotationVectors[4][2] =  {{1,  -1},
 8002a0e:	4a38      	ldr	r2, [pc, #224]	@ (8002af0 <StartDefaultTask+0x108>)
 8002a10:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8002a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a18:	e883 0003 	stmia.w	r3, {r0, r1}
							 		 {-1, -1},
									 {-1,  1},
									 {1,   1}};

	int16_t forwardsID[4] = {380, 5070, 348, 5140};
 8002a1c:	4a35      	ldr	r2, [pc, #212]	@ (8002af4 <StartDefaultTask+0x10c>)
 8002a1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002a22:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a26:	e883 0003 	stmia.w	r3, {r0, r1}

	// [MotorID][0 = MotorXVal, 1 = MotorYVal, 2 = MotorABSVal, 3 = MotorConvertedAngle]
	int16_t motorInfo[4][4];


	uint16_t value_adc[] = {0, 0, 0, 0};
 8002a2a:	f107 030c 	add.w	r3, r7, #12
 8002a2e:	2200      	movs	r2, #0
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	605a      	str	r2, [r3, #4]
	uint16_t value_adc2[] = {0, 0};
 8002a34:	2300      	movs	r3, #0
 8002a36:	813b      	strh	r3, [r7, #8]
 8002a38:	2300      	movs	r3, #0
 8002a3a:	817b      	strh	r3, [r7, #10]
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002a3c:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002a40:	2100      	movs	r1, #0
 8002a42:	482d      	ldr	r0, [pc, #180]	@ (8002af8 <StartDefaultTask+0x110>)
 8002a44:	f003 f9ce 	bl	8005de4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED);
 8002a48:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	482b      	ldr	r0, [pc, #172]	@ (8002afc <StartDefaultTask+0x114>)
 8002a50:	f003 f9c8 	bl	8005de4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)value_adc, 4);
 8002a54:	f107 030c 	add.w	r3, r7, #12
 8002a58:	2204      	movs	r2, #4
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4826      	ldr	r0, [pc, #152]	@ (8002af8 <StartDefaultTask+0x110>)
 8002a5e:	f002 f8d1 	bl	8004c04 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)value_adc2, 2);
 8002a62:	f107 0308 	add.w	r3, r7, #8
 8002a66:	2202      	movs	r2, #2
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4824      	ldr	r0, [pc, #144]	@ (8002afc <StartDefaultTask+0x114>)
 8002a6c:	f002 f8ca 	bl	8004c04 <HAL_ADC_Start_DMA>
	HAL_OPAMP_Start(&hopamp1);
 8002a70:	4823      	ldr	r0, [pc, #140]	@ (8002b00 <StartDefaultTask+0x118>)
 8002a72:	f008 f853 	bl	800ab1c <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 8002a76:	4823      	ldr	r0, [pc, #140]	@ (8002b04 <StartDefaultTask+0x11c>)
 8002a78:	f008 f850 	bl	800ab1c <HAL_OPAMP_Start>
	//remote_control_init();

	//set_CANID_cybergear(&mi_motor[0], 0x34);          //DO NOT ENABLE - needs target motor CANID to be changed in cybergear.c to function
	init_cybergear(&mi_motor[0], 0x31, Speed_mode);
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	2131      	movs	r1, #49	@ 0x31
 8002a80:	4821      	ldr	r0, [pc, #132]	@ (8002b08 <StartDefaultTask+0x120>)
 8002a82:	f7fe fd2f 	bl	80014e4 <init_cybergear>
	init_cybergear(&mi_motor[1], 0x32, Speed_mode);
 8002a86:	2202      	movs	r2, #2
 8002a88:	2132      	movs	r1, #50	@ 0x32
 8002a8a:	4820      	ldr	r0, [pc, #128]	@ (8002b0c <StartDefaultTask+0x124>)
 8002a8c:	f7fe fd2a 	bl	80014e4 <init_cybergear>
	init_cybergear(&mi_motor[2], 0x33, Speed_mode);
 8002a90:	2202      	movs	r2, #2
 8002a92:	2133      	movs	r1, #51	@ 0x33
 8002a94:	481e      	ldr	r0, [pc, #120]	@ (8002b10 <StartDefaultTask+0x128>)
 8002a96:	f7fe fd25 	bl	80014e4 <init_cybergear>
	init_cybergear(&mi_motor[3], 0x34, Speed_mode);
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	2134      	movs	r1, #52	@ 0x34
 8002a9e:	481d      	ldr	r0, [pc, #116]	@ (8002b14 <StartDefaultTask+0x12c>)
 8002aa0:	f7fe fd20 	bl	80014e4 <init_cybergear>

	// Sets max current (SUCKS ASS)
	set_maxCurrent_cybergear(&mi_motor[0], 1);
 8002aa4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002aa8:	4817      	ldr	r0, [pc, #92]	@ (8002b08 <StartDefaultTask+0x120>)
 8002aaa:	f7fe fd09 	bl	80014c0 <set_maxCurrent_cybergear>
	//set_refSpd_cybergear(&mi_motor[0], 1);
	osDelay(500);
 8002aae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002ab2:	f00e ffbe 	bl	8011a32 <osDelay>
	//HAL_ADC_Stop(&hadc1);
	//value = map(ADC_VAL, 0, 65535, 0, 100);
  /* Infinite loop */
  for(;;)
  {
	  usart_printf("Beans\r\n");
 8002ab6:	4818      	ldr	r0, [pc, #96]	@ (8002b18 <StartDefaultTask+0x130>)
 8002ab8:	f7fe fbd4 	bl	8001264 <usart_printf>
	  setMotorRPM(Bus2, GM6020, 1, 10, test);
 8002abc:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 8002ac0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8002ac4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8002ac8:	eeb0 0a66 	vmov.f32	s0, s13
 8002acc:	eef0 0a47 	vmov.f32	s1, s14
 8002ad0:	eeb0 1a67 	vmov.f32	s2, s15
 8002ad4:	230a      	movs	r3, #10
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	2103      	movs	r1, #3
 8002ada:	2002      	movs	r0, #2
 8002adc:	f7fe fb86 	bl	80011ec <setMotorRPM>
		//value_adc = HAL_ADC_GetValue(&hadc1);
		//usart_printf("CAN_State = %d, ADC 1 =  %d, ADC 2 =  %d, ADC 3 =  %d, ADC 4 =  %d,\r\n", CAN_State, value_adc[0], value_adc[1], value_adc[2], value_adc[3]);
		//usart_printf("Vcap = %d \r\n", value_adc2[0]);
		//usart_printf("CAN_Ext_State = %d \r\n", 0);

		osDelay(5);
 8002ae0:	2005      	movs	r0, #5
 8002ae2:	f00e ffa6 	bl	8011a32 <osDelay>
	  usart_printf("Beans\r\n");
 8002ae6:	bf00      	nop
 8002ae8:	e7e5      	b.n	8002ab6 <StartDefaultTask+0xce>
 8002aea:	bf00      	nop
 8002aec:	41c80000 	.word	0x41c80000
 8002af0:	08013818 	.word	0x08013818
 8002af4:	08013820 	.word	0x08013820
 8002af8:	24000790 	.word	0x24000790
 8002afc:	24000800 	.word	0x24000800
 8002b00:	24000be8 	.word	0x24000be8
 8002b04:	24000c1c 	.word	0x24000c1c
 8002b08:	240004dc 	.word	0x240004dc
 8002b0c:	240004f4 	.word	0x240004f4
 8002b10:	2400050c 	.word	0x2400050c
 8002b14:	24000524 	.word	0x24000524
 8002b18:	08013810 	.word	0x08013810

08002b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b20:	b672      	cpsid	i
}
 8002b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b24:	bf00      	nop
 8002b26:	e7fd      	b.n	8002b24 <Error_Handler+0x8>

08002b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b60 <HAL_MspInit+0x38>)
 8002b30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b34:	4a0a      	ldr	r2, [pc, #40]	@ (8002b60 <HAL_MspInit+0x38>)
 8002b36:	f043 0302 	orr.w	r3, r3, #2
 8002b3a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <HAL_MspInit+0x38>)
 8002b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	210f      	movs	r1, #15
 8002b50:	f06f 0001 	mvn.w	r0, #1
 8002b54:	f003 fb67 	bl	8006226 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	58024400 	.word	0x58024400

08002b64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08e      	sub	sp, #56	@ 0x38
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a93      	ldr	r2, [pc, #588]	@ (8002dd0 <HAL_ADC_MspInit+0x26c>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	f040 80b6 	bne.w	8002cf4 <HAL_ADC_MspInit+0x190>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002b88:	4b92      	ldr	r3, [pc, #584]	@ (8002dd4 <HAL_ADC_MspInit+0x270>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	4a91      	ldr	r2, [pc, #580]	@ (8002dd4 <HAL_ADC_MspInit+0x270>)
 8002b90:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002b92:	4b90      	ldr	r3, [pc, #576]	@ (8002dd4 <HAL_ADC_MspInit+0x270>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10e      	bne.n	8002bb8 <HAL_ADC_MspInit+0x54>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002b9a:	4b8f      	ldr	r3, [pc, #572]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002b9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002ba0:	4a8d      	ldr	r2, [pc, #564]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002ba2:	f043 0320 	orr.w	r3, r3, #32
 8002ba6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002baa:	4b8b      	ldr	r3, [pc, #556]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002bac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002bb0:	f003 0320 	and.w	r3, r3, #32
 8002bb4:	623b      	str	r3, [r7, #32]
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bb8:	4b87      	ldr	r3, [pc, #540]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bbe:	4a86      	ldr	r2, [pc, #536]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002bc8:	4b83      	ldr	r3, [pc, #524]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd6:	4b80      	ldr	r3, [pc, #512]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bdc:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002be6:	4b7c      	ldr	r3, [pc, #496]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	61bb      	str	r3, [r7, #24]
 8002bf2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf4:	4b78      	ldr	r3, [pc, #480]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002bfa:	4a77      	ldr	r2, [pc, #476]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002bfc:	f043 0302 	orr.w	r3, r3, #2
 8002c00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c04:	4b74      	ldr	r3, [pc, #464]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c12:	4b71      	ldr	r3, [pc, #452]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c18:	4a6f      	ldr	r2, [pc, #444]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002c1a:	f043 0320 	orr.w	r3, r3, #32
 8002c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002c22:	4b6d      	ldr	r3, [pc, #436]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c28:	f003 0320 	and.w	r3, r3, #32
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]
    PA6     ------> ADC1_INP3
    PC4     ------> ADC1_INP4
    PB1     ------> ADC1_INP5
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = Iref_Pin;
 8002c30:	2340      	movs	r3, #64	@ 0x40
 8002c32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c34:	2303      	movs	r3, #3
 8002c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Iref_GPIO_Port, &GPIO_InitStruct);
 8002c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c40:	4619      	mov	r1, r3
 8002c42:	4866      	ldr	r0, [pc, #408]	@ (8002ddc <HAL_ADC_MspInit+0x278>)
 8002c44:	f007 fb92 	bl	800a36c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Vbus_Pin;
 8002c48:	2310      	movs	r3, #16
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Vbus_GPIO_Port, &GPIO_InitStruct);
 8002c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4861      	ldr	r0, [pc, #388]	@ (8002de0 <HAL_ADC_MspInit+0x27c>)
 8002c5c:	f007 fb86 	bl	800a36c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IbridgeA_Pin;
 8002c60:	2302      	movs	r3, #2
 8002c62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c64:	2303      	movs	r3, #3
 8002c66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(IbridgeA_GPIO_Port, &GPIO_InitStruct);
 8002c6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c70:	4619      	mov	r1, r3
 8002c72:	485c      	ldr	r0, [pc, #368]	@ (8002de4 <HAL_ADC_MspInit+0x280>)
 8002c74:	f007 fb7a 	bl	800a36c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IbridgeB_Pin;
 8002c78:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c7c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(IbridgeB_GPIO_Port, &GPIO_InitStruct);
 8002c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	4856      	ldr	r0, [pc, #344]	@ (8002de8 <HAL_ADC_MspInit+0x284>)
 8002c8e:	f007 fb6d 	bl	800a36c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream6;
 8002c92:	4b56      	ldr	r3, [pc, #344]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002c94:	4a56      	ldr	r2, [pc, #344]	@ (8002df0 <HAL_ADC_MspInit+0x28c>)
 8002c96:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c98:	4b54      	ldr	r3, [pc, #336]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002c9a:	2209      	movs	r2, #9
 8002c9c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c9e:	4b53      	ldr	r3, [pc, #332]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ca4:	4b51      	ldr	r3, [pc, #324]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002caa:	4b50      	ldr	r3, [pc, #320]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002cac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cb0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002cb4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cb8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cba:	4b4c      	ldr	r3, [pc, #304]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002cbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cc0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cc8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cca:	4b48      	ldr	r3, [pc, #288]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cd0:	4b46      	ldr	r3, [pc, #280]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002cd6:	4845      	ldr	r0, [pc, #276]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002cd8:	f003 fada 	bl	8006290 <HAL_DMA_Init>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_ADC_MspInit+0x182>
    {
      Error_Handler();
 8002ce2:	f7ff ff1b 	bl	8002b1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a40      	ldr	r2, [pc, #256]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002cea:	659a      	str	r2, [r3, #88]	@ 0x58
 8002cec:	4a3f      	ldr	r2, [pc, #252]	@ (8002dec <HAL_ADC_MspInit+0x288>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002cf2:	e068      	b.n	8002dc6 <HAL_ADC_MspInit+0x262>
  else if(hadc->Instance==ADC2)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a3e      	ldr	r2, [pc, #248]	@ (8002df4 <HAL_ADC_MspInit+0x290>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d163      	bne.n	8002dc6 <HAL_ADC_MspInit+0x262>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002cfe:	4b35      	ldr	r3, [pc, #212]	@ (8002dd4 <HAL_ADC_MspInit+0x270>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	4a33      	ldr	r2, [pc, #204]	@ (8002dd4 <HAL_ADC_MspInit+0x270>)
 8002d06:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002d08:	4b32      	ldr	r3, [pc, #200]	@ (8002dd4 <HAL_ADC_MspInit+0x270>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d10e      	bne.n	8002d2e <HAL_ADC_MspInit+0x1ca>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002d10:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002d12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d16:	4a30      	ldr	r2, [pc, #192]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002d18:	f043 0320 	orr.w	r3, r3, #32
 8002d1c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002d20:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002d22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002d26:	f003 0320 	and.w	r3, r3, #32
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d34:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002d36:	f043 0320 	orr.w	r3, r3, #32
 8002d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d3e:	4b26      	ldr	r3, [pc, #152]	@ (8002dd8 <HAL_ADC_MspInit+0x274>)
 8002d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	60bb      	str	r3, [r7, #8]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Vcap_Pin;
 8002d4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d52:	2303      	movs	r3, #3
 8002d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d56:	2300      	movs	r3, #0
 8002d58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Vcap_GPIO_Port, &GPIO_InitStruct);
 8002d5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d5e:	4619      	mov	r1, r3
 8002d60:	4821      	ldr	r0, [pc, #132]	@ (8002de8 <HAL_ADC_MspInit+0x284>)
 8002d62:	f007 fb03 	bl	800a36c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Stream7;
 8002d66:	4b24      	ldr	r3, [pc, #144]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002d68:	4a24      	ldr	r2, [pc, #144]	@ (8002dfc <HAL_ADC_MspInit+0x298>)
 8002d6a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002d6c:	4b22      	ldr	r3, [pc, #136]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002d6e:	220a      	movs	r2, #10
 8002d70:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d72:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8002d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002d80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d84:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d86:	4b1c      	ldr	r3, [pc, #112]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002d88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002d8c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002d90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d94:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002d96:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002d98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d9c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002d9e:	4b16      	ldr	r3, [pc, #88]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002daa:	4813      	ldr	r0, [pc, #76]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002dac:	f003 fa70 	bl	8006290 <HAL_DMA_Init>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_ADC_MspInit+0x256>
      Error_Handler();
 8002db6:	f7ff feb1 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002dbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8002dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8002df8 <HAL_ADC_MspInit+0x294>)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002dc6:	bf00      	nop
 8002dc8:	3738      	adds	r7, #56	@ 0x38
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40022000 	.word	0x40022000
 8002dd4:	24001444 	.word	0x24001444
 8002dd8:	58024400 	.word	0x58024400
 8002ddc:	58020000 	.word	0x58020000
 8002de0:	58020800 	.word	0x58020800
 8002de4:	58020400 	.word	0x58020400
 8002de8:	58021400 	.word	0x58021400
 8002dec:	24000870 	.word	0x24000870
 8002df0:	400200a0 	.word	0x400200a0
 8002df4:	40022100 	.word	0x40022100
 8002df8:	240008e8 	.word	0x240008e8
 8002dfc:	400200b8 	.word	0x400200b8

08002e00 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08e      	sub	sp, #56	@ 0x38
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a74      	ldr	r2, [pc, #464]	@ (8002ff0 <HAL_FDCAN_MspInit+0x1f0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d148      	bne.n	8002eb4 <HAL_FDCAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002e22:	4b74      	ldr	r3, [pc, #464]	@ (8002ff4 <HAL_FDCAN_MspInit+0x1f4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3301      	adds	r3, #1
 8002e28:	4a72      	ldr	r2, [pc, #456]	@ (8002ff4 <HAL_FDCAN_MspInit+0x1f4>)
 8002e2a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002e2c:	4b71      	ldr	r3, [pc, #452]	@ (8002ff4 <HAL_FDCAN_MspInit+0x1f4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d10e      	bne.n	8002e52 <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002e34:	4b70      	ldr	r3, [pc, #448]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002e36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002e3a:	4a6f      	ldr	r2, [pc, #444]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e40:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002e44:	4b6c      	ldr	r3, [pc, #432]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002e46:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4e:	623b      	str	r3, [r7, #32]
 8002e50:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e52:	4b69      	ldr	r3, [pc, #420]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002e54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e58:	4a67      	ldr	r2, [pc, #412]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002e5a:	f043 0302 	orr.w	r3, r3, #2
 8002e5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002e62:	4b65      	ldr	r3, [pc, #404]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	69fb      	ldr	r3, [r7, #28]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e70:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002e82:	2309      	movs	r3, #9
 8002e84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	485b      	ldr	r0, [pc, #364]	@ (8002ffc <HAL_FDCAN_MspInit+0x1fc>)
 8002e8e:	f007 fa6d 	bl	800a36c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2105      	movs	r1, #5
 8002e96:	2013      	movs	r0, #19
 8002e98:	f003 f9c5 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002e9c:	2013      	movs	r0, #19
 8002e9e:	f003 f9dc 	bl	800625a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 5, 0);
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2105      	movs	r1, #5
 8002ea6:	2015      	movs	r0, #21
 8002ea8:	f003 f9bd 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8002eac:	2015      	movs	r0, #21
 8002eae:	f003 f9d4 	bl	800625a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002eb2:	e099      	b.n	8002fe8 <HAL_FDCAN_MspInit+0x1e8>
  else if(hfdcan->Instance==FDCAN2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a51      	ldr	r2, [pc, #324]	@ (8003000 <HAL_FDCAN_MspInit+0x200>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d147      	bne.n	8002f4e <HAL_FDCAN_MspInit+0x14e>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002ebe:	4b4d      	ldr	r3, [pc, #308]	@ (8002ff4 <HAL_FDCAN_MspInit+0x1f4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff4 <HAL_FDCAN_MspInit+0x1f4>)
 8002ec6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002ec8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ff4 <HAL_FDCAN_MspInit+0x1f4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10e      	bne.n	8002eee <HAL_FDCAN_MspInit+0xee>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002ed0:	4b49      	ldr	r3, [pc, #292]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002ed2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002ed6:	4a48      	ldr	r2, [pc, #288]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002edc:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002ee0:	4b45      	ldr	r3, [pc, #276]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002ee2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eea:	61bb      	str	r3, [r7, #24]
 8002eec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eee:	4b42      	ldr	r3, [pc, #264]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002ef4:	4a40      	ldr	r2, [pc, #256]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002efe:	4b3e      	ldr	r3, [pc, #248]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	617b      	str	r3, [r7, #20]
 8002f0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002f0c:	2360      	movs	r3, #96	@ 0x60
 8002f0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8002f1c:	2309      	movs	r3, #9
 8002f1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002f24:	4619      	mov	r1, r3
 8002f26:	4835      	ldr	r0, [pc, #212]	@ (8002ffc <HAL_FDCAN_MspInit+0x1fc>)
 8002f28:	f007 fa20 	bl	800a36c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 5, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2105      	movs	r1, #5
 8002f30:	2014      	movs	r0, #20
 8002f32:	f003 f978 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8002f36:	2014      	movs	r0, #20
 8002f38:	f003 f98f 	bl	800625a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN2_IT1_IRQn, 5, 0);
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	2105      	movs	r1, #5
 8002f40:	2016      	movs	r0, #22
 8002f42:	f003 f970 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT1_IRQn);
 8002f46:	2016      	movs	r0, #22
 8002f48:	f003 f987 	bl	800625a <HAL_NVIC_EnableIRQ>
}
 8002f4c:	e04c      	b.n	8002fe8 <HAL_FDCAN_MspInit+0x1e8>
  else if(hfdcan->Instance==FDCAN3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a2c      	ldr	r2, [pc, #176]	@ (8003004 <HAL_FDCAN_MspInit+0x204>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d147      	bne.n	8002fe8 <HAL_FDCAN_MspInit+0x1e8>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8002f58:	4b26      	ldr	r3, [pc, #152]	@ (8002ff4 <HAL_FDCAN_MspInit+0x1f4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	4a25      	ldr	r2, [pc, #148]	@ (8002ff4 <HAL_FDCAN_MspInit+0x1f4>)
 8002f60:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8002f62:	4b24      	ldr	r3, [pc, #144]	@ (8002ff4 <HAL_FDCAN_MspInit+0x1f4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d10e      	bne.n	8002f88 <HAL_FDCAN_MspInit+0x188>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8002f6a:	4b23      	ldr	r3, [pc, #140]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002f6c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002f70:	4a21      	ldr	r2, [pc, #132]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002f72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f76:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002f7c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002f90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002f98:	4b17      	ldr	r3, [pc, #92]	@ (8002ff8 <HAL_FDCAN_MspInit+0x1f8>)
 8002f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002fa6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002faa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fac:	2302      	movs	r3, #2
 8002fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002fb8:	2302      	movs	r3, #2
 8002fba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4811      	ldr	r0, [pc, #68]	@ (8003008 <HAL_FDCAN_MspInit+0x208>)
 8002fc4:	f007 f9d2 	bl	800a36c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN3_IT0_IRQn, 5, 0);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2105      	movs	r1, #5
 8002fcc:	209f      	movs	r0, #159	@ 0x9f
 8002fce:	f003 f92a 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT0_IRQn);
 8002fd2:	209f      	movs	r0, #159	@ 0x9f
 8002fd4:	f003 f941 	bl	800625a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN3_IT1_IRQn, 5, 0);
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2105      	movs	r1, #5
 8002fdc:	20a0      	movs	r0, #160	@ 0xa0
 8002fde:	f003 f922 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN3_IT1_IRQn);
 8002fe2:	20a0      	movs	r0, #160	@ 0xa0
 8002fe4:	f003 f939 	bl	800625a <HAL_NVIC_EnableIRQ>
}
 8002fe8:	bf00      	nop
 8002fea:	3738      	adds	r7, #56	@ 0x38
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	4000a000 	.word	0x4000a000
 8002ff4:	24001448 	.word	0x24001448
 8002ff8:	58024400 	.word	0x58024400
 8002ffc:	58020400 	.word	0x58020400
 8003000:	4000a400 	.word	0x4000a400
 8003004:	4000d400 	.word	0x4000d400
 8003008:	58021800 	.word	0x58021800

0800300c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b0ba      	sub	sp, #232	@ 0xe8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003014:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003024:	f107 0318 	add.w	r3, r7, #24
 8003028:	22b8      	movs	r2, #184	@ 0xb8
 800302a:	2100      	movs	r1, #0
 800302c:	4618      	mov	r0, r3
 800302e:	f00f ff31 	bl	8012e94 <memset>
  if(hi2c->Instance==I2C2)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a4d      	ldr	r2, [pc, #308]	@ (800316c <HAL_I2C_MspInit+0x160>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d147      	bne.n	80030cc <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800303c:	f04f 0208 	mov.w	r2, #8
 8003040:	f04f 0300 	mov.w	r3, #0
 8003044:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8003048:	2300      	movs	r3, #0
 800304a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800304e:	f107 0318 	add.w	r3, r7, #24
 8003052:	4618      	mov	r0, r3
 8003054:	f008 fd34 	bl	800bac0 <HAL_RCCEx_PeriphCLKConfig>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800305e:	f7ff fd5d 	bl	8002b1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003062:	4b43      	ldr	r3, [pc, #268]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 8003064:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003068:	4a41      	ldr	r2, [pc, #260]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 800306a:	f043 0302 	orr.w	r3, r3, #2
 800306e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003072:	4b3f      	ldr	r3, [pc, #252]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 8003074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	617b      	str	r3, [r7, #20]
 800307e:	697b      	ldr	r3, [r7, #20]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003080:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003084:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003088:	2312      	movs	r3, #18
 800308a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308e:	2300      	movs	r3, #0
 8003090:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003094:	2300      	movs	r3, #0
 8003096:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800309a:	2304      	movs	r3, #4
 800309c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80030a4:	4619      	mov	r1, r3
 80030a6:	4833      	ldr	r0, [pc, #204]	@ (8003174 <HAL_I2C_MspInit+0x168>)
 80030a8:	f007 f960 	bl	800a36c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80030ac:	4b30      	ldr	r3, [pc, #192]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 80030ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030b2:	4a2f      	ldr	r2, [pc, #188]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 80030b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80030bc:	4b2c      	ldr	r3, [pc, #176]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 80030be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80030c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80030ca:	e04b      	b.n	8003164 <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C4)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a29      	ldr	r2, [pc, #164]	@ (8003178 <HAL_I2C_MspInit+0x16c>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d146      	bne.n	8003164 <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80030d6:	f04f 0210 	mov.w	r2, #16
 80030da:	f04f 0300 	mov.w	r3, #0
 80030de:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80030e2:	2300      	movs	r3, #0
 80030e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e8:	f107 0318 	add.w	r3, r7, #24
 80030ec:	4618      	mov	r0, r3
 80030ee:	f008 fce7 	bl	800bac0 <HAL_RCCEx_PeriphCLKConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80030f8:	f7ff fd10 	bl	8002b1c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80030fc:	4b1c      	ldr	r3, [pc, #112]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 80030fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003102:	4a1b      	ldr	r2, [pc, #108]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 8003104:	f043 0320 	orr.w	r3, r3, #32
 8003108:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800310c:	4b18      	ldr	r3, [pc, #96]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 800310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003112:	f003 0320 	and.w	r3, r3, #32
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800311a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800311e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003122:	2312      	movs	r3, #18
 8003124:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003128:	2300      	movs	r3, #0
 800312a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8003134:	2304      	movs	r3, #4
 8003136:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800313a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800313e:	4619      	mov	r1, r3
 8003140:	480e      	ldr	r0, [pc, #56]	@ (800317c <HAL_I2C_MspInit+0x170>)
 8003142:	f007 f913 	bl	800a36c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8003146:	4b0a      	ldr	r3, [pc, #40]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 8003148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800314c:	4a08      	ldr	r2, [pc, #32]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 800314e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003152:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003156:	4b06      	ldr	r3, [pc, #24]	@ (8003170 <HAL_I2C_MspInit+0x164>)
 8003158:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800315c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003160:	60bb      	str	r3, [r7, #8]
 8003162:	68bb      	ldr	r3, [r7, #8]
}
 8003164:	bf00      	nop
 8003166:	37e8      	adds	r7, #232	@ 0xe8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40005800 	.word	0x40005800
 8003170:	58024400 	.word	0x58024400
 8003174:	58020400 	.word	0x58020400
 8003178:	58001c00 	.word	0x58001c00
 800317c:	58021400 	.word	0x58021400

08003180 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b08e      	sub	sp, #56	@ 0x38
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800318c:	2200      	movs	r2, #0
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	605a      	str	r2, [r3, #4]
 8003192:	609a      	str	r2, [r3, #8]
 8003194:	60da      	str	r2, [r3, #12]
 8003196:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a54      	ldr	r2, [pc, #336]	@ (80032f0 <HAL_OPAMP_MspInit+0x170>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d14e      	bne.n	8003240 <HAL_OPAMP_MspInit+0xc0>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_OPAMP_CLK_ENABLED++;
 80031a2:	4b54      	ldr	r3, [pc, #336]	@ (80032f4 <HAL_OPAMP_MspInit+0x174>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3301      	adds	r3, #1
 80031a8:	4a52      	ldr	r2, [pc, #328]	@ (80032f4 <HAL_OPAMP_MspInit+0x174>)
 80031aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 80031ac:	4b51      	ldr	r3, [pc, #324]	@ (80032f4 <HAL_OPAMP_MspInit+0x174>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d10e      	bne.n	80031d2 <HAL_OPAMP_MspInit+0x52>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 80031b4:	4b50      	ldr	r3, [pc, #320]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80031b6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80031ba:	4a4f      	ldr	r2, [pc, #316]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80031bc:	f043 0310 	orr.w	r3, r3, #16
 80031c0:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 80031c4:	4b4c      	ldr	r3, [pc, #304]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80031c6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80031ca:	f003 0310 	and.w	r3, r3, #16
 80031ce:	623b      	str	r3, [r7, #32]
 80031d0:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031d2:	4b49      	ldr	r3, [pc, #292]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80031d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031d8:	4a47      	ldr	r2, [pc, #284]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80031da:	f043 0304 	orr.w	r3, r3, #4
 80031de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80031e2:	4b45      	ldr	r3, [pc, #276]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80031e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031e8:	f003 0304 	and.w	r3, r3, #4
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f0:	4b41      	ldr	r3, [pc, #260]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80031f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80031f6:	4a40      	ldr	r2, [pc, #256]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80031f8:	f043 0302 	orr.w	r3, r3, #2
 80031fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003200:	4b3d      	ldr	r3, [pc, #244]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 8003202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	69bb      	ldr	r3, [r7, #24]
    /**OPAMP1 GPIO Configuration
    PC4     ------> OPAMP1_VOUT
    PC5     ------> OPAMP1_VINM
    PB0     ------> OPAMP1_VINP
    */
    GPIO_InitStruct.Pin = Vbus_Pin|GPIO_PIN_5;
 800320e:	2330      	movs	r3, #48	@ 0x30
 8003210:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003212:	2303      	movs	r3, #3
 8003214:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003216:	2300      	movs	r3, #0
 8003218:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800321a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800321e:	4619      	mov	r1, r3
 8003220:	4836      	ldr	r0, [pc, #216]	@ (80032fc <HAL_OPAMP_MspInit+0x17c>)
 8003222:	f007 f8a3 	bl	800a36c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003226:	2301      	movs	r3, #1
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800322a:	2303      	movs	r3, #3
 800322c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003236:	4619      	mov	r1, r3
 8003238:	4831      	ldr	r0, [pc, #196]	@ (8003300 <HAL_OPAMP_MspInit+0x180>)
 800323a:	f007 f897 	bl	800a36c <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 800323e:	e053      	b.n	80032e8 <HAL_OPAMP_MspInit+0x168>
  else if(hopamp->Instance==OPAMP2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a2f      	ldr	r2, [pc, #188]	@ (8003304 <HAL_OPAMP_MspInit+0x184>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d14e      	bne.n	80032e8 <HAL_OPAMP_MspInit+0x168>
    HAL_RCC_OPAMP_CLK_ENABLED++;
 800324a:	4b2a      	ldr	r3, [pc, #168]	@ (80032f4 <HAL_OPAMP_MspInit+0x174>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3301      	adds	r3, #1
 8003250:	4a28      	ldr	r2, [pc, #160]	@ (80032f4 <HAL_OPAMP_MspInit+0x174>)
 8003252:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_OPAMP_CLK_ENABLED==1){
 8003254:	4b27      	ldr	r3, [pc, #156]	@ (80032f4 <HAL_OPAMP_MspInit+0x174>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d10e      	bne.n	800327a <HAL_OPAMP_MspInit+0xfa>
      __HAL_RCC_OPAMP_CLK_ENABLE();
 800325c:	4b26      	ldr	r3, [pc, #152]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 800325e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003262:	4a25      	ldr	r2, [pc, #148]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 8003264:	f043 0310 	orr.w	r3, r3, #16
 8003268:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800326c:	4b22      	ldr	r3, [pc, #136]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 800326e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003272:	f003 0310 	and.w	r3, r3, #16
 8003276:	617b      	str	r3, [r7, #20]
 8003278:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800327a:	4b1f      	ldr	r3, [pc, #124]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 800327c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003280:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 8003282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003286:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800328a:	4b1b      	ldr	r3, [pc, #108]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 800328c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003294:	613b      	str	r3, [r7, #16]
 8003296:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003298:	4b17      	ldr	r3, [pc, #92]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 800329a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800329e:	4a16      	ldr	r2, [pc, #88]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80032a0:	f043 0310 	orr.w	r3, r3, #16
 80032a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80032a8:	4b13      	ldr	r3, [pc, #76]	@ (80032f8 <HAL_OPAMP_MspInit+0x178>)
 80032aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80032ae:	f003 0310 	and.w	r3, r3, #16
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80032b6:	2302      	movs	r3, #2
 80032b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032ba:	2303      	movs	r3, #3
 80032bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032be:	2300      	movs	r3, #0
 80032c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80032c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032c6:	4619      	mov	r1, r3
 80032c8:	480f      	ldr	r0, [pc, #60]	@ (8003308 <HAL_OPAMP_MspInit+0x188>)
 80032ca:	f007 f84f 	bl	800a36c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80032ce:	f44f 7320 	mov.w	r3, #640	@ 0x280
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032d4:	2303      	movs	r3, #3
 80032d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d8:	2300      	movs	r3, #0
 80032da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e0:	4619      	mov	r1, r3
 80032e2:	480a      	ldr	r0, [pc, #40]	@ (800330c <HAL_OPAMP_MspInit+0x18c>)
 80032e4:	f007 f842 	bl	800a36c <HAL_GPIO_Init>
}
 80032e8:	bf00      	nop
 80032ea:	3738      	adds	r7, #56	@ 0x38
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40009000 	.word	0x40009000
 80032f4:	2400144c 	.word	0x2400144c
 80032f8:	58024400 	.word	0x58024400
 80032fc:	58020800 	.word	0x58020800
 8003300:	58020400 	.word	0x58020400
 8003304:	40009010 	.word	0x40009010
 8003308:	58021800 	.word	0x58021800
 800330c:	58021000 	.word	0x58021000

08003310 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a16      	ldr	r2, [pc, #88]	@ (8003378 <HAL_TIM_Base_MspInit+0x68>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d10f      	bne.n	8003342 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003322:	4b16      	ldr	r3, [pc, #88]	@ (800337c <HAL_TIM_Base_MspInit+0x6c>)
 8003324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003328:	4a14      	ldr	r2, [pc, #80]	@ (800337c <HAL_TIM_Base_MspInit+0x6c>)
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003332:	4b12      	ldr	r3, [pc, #72]	@ (800337c <HAL_TIM_Base_MspInit+0x6c>)
 8003334:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM23_MspInit 1 */

  /* USER CODE END TIM23_MspInit 1 */
  }

}
 8003340:	e013      	b.n	800336a <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM23)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a0e      	ldr	r2, [pc, #56]	@ (8003380 <HAL_TIM_Base_MspInit+0x70>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d10e      	bne.n	800336a <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM23_CLK_ENABLE();
 800334c:	4b0b      	ldr	r3, [pc, #44]	@ (800337c <HAL_TIM_Base_MspInit+0x6c>)
 800334e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003352:	4a0a      	ldr	r2, [pc, #40]	@ (800337c <HAL_TIM_Base_MspInit+0x6c>)
 8003354:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003358:	f8c2 30ec 	str.w	r3, [r2, #236]	@ 0xec
 800335c:	4b07      	ldr	r3, [pc, #28]	@ (800337c <HAL_TIM_Base_MspInit+0x6c>)
 800335e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8003362:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003366:	60bb      	str	r3, [r7, #8]
 8003368:	68bb      	ldr	r3, [r7, #8]
}
 800336a:	bf00      	nop
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40010000 	.word	0x40010000
 800337c:	58024400 	.word	0x58024400
 8003380:	4000e000 	.word	0x4000e000

08003384 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003394:	d10f      	bne.n	80033b6 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003396:	4b15      	ldr	r3, [pc, #84]	@ (80033ec <HAL_TIM_PWM_MspInit+0x68>)
 8003398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800339c:	4a13      	ldr	r2, [pc, #76]	@ (80033ec <HAL_TIM_PWM_MspInit+0x68>)
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033a6:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <HAL_TIM_PWM_MspInit+0x68>)
 80033a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033b4:	e013      	b.n	80033de <HAL_TIM_PWM_MspInit+0x5a>
  else if(htim_pwm->Instance==TIM3)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a0d      	ldr	r2, [pc, #52]	@ (80033f0 <HAL_TIM_PWM_MspInit+0x6c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d10e      	bne.n	80033de <HAL_TIM_PWM_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033c0:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <HAL_TIM_PWM_MspInit+0x68>)
 80033c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033c6:	4a09      	ldr	r2, [pc, #36]	@ (80033ec <HAL_TIM_PWM_MspInit+0x68>)
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80033d0:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <HAL_TIM_PWM_MspInit+0x68>)
 80033d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
}
 80033de:	bf00      	nop
 80033e0:	3714      	adds	r7, #20
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	58024400 	.word	0x58024400
 80033f0:	40000400 	.word	0x40000400

080033f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b08c      	sub	sp, #48	@ 0x30
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033fc:	f107 031c 	add.w	r3, r7, #28
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a4b      	ldr	r2, [pc, #300]	@ (8003540 <HAL_TIM_MspPostInit+0x14c>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d120      	bne.n	8003458 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003416:	4b4b      	ldr	r3, [pc, #300]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 8003418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800341c:	4a49      	ldr	r2, [pc, #292]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 800341e:	f043 0301 	orr.w	r3, r3, #1
 8003422:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003426:	4b47      	ldr	r3, [pc, #284]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 8003428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	61bb      	str	r3, [r7, #24]
 8003432:	69bb      	ldr	r3, [r7, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8003434:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8003438:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343a:	2302      	movs	r3, #2
 800343c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003442:	2300      	movs	r3, #0
 8003444:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003446:	2301      	movs	r3, #1
 8003448:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 031c 	add.w	r3, r7, #28
 800344e:	4619      	mov	r1, r3
 8003450:	483d      	ldr	r0, [pc, #244]	@ (8003548 <HAL_TIM_MspPostInit+0x154>)
 8003452:	f006 ff8b 	bl	800a36c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM23_MspPostInit 1 */

  /* USER CODE END TIM23_MspPostInit 1 */
  }

}
 8003456:	e06e      	b.n	8003536 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003460:	d11f      	bne.n	80034a2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003462:	4b38      	ldr	r3, [pc, #224]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 8003464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003468:	4a36      	ldr	r2, [pc, #216]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003472:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 8003474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	617b      	str	r3, [r7, #20]
 800347e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8003480:	2307      	movs	r3, #7
 8003482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348c:	2300      	movs	r3, #0
 800348e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003490:	2301      	movs	r3, #1
 8003492:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	4619      	mov	r1, r3
 800349a:	482b      	ldr	r0, [pc, #172]	@ (8003548 <HAL_TIM_MspPostInit+0x154>)
 800349c:	f006 ff66 	bl	800a36c <HAL_GPIO_Init>
}
 80034a0:	e049      	b.n	8003536 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM3)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a29      	ldr	r2, [pc, #164]	@ (800354c <HAL_TIM_MspPostInit+0x158>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d120      	bne.n	80034ee <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034ac:	4b25      	ldr	r3, [pc, #148]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 80034ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034b2:	4a24      	ldr	r2, [pc, #144]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80034bc:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 80034be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80034ca:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d8:	2300      	movs	r3, #0
 80034da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034dc:	2302      	movs	r3, #2
 80034de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034e0:	f107 031c 	add.w	r3, r7, #28
 80034e4:	4619      	mov	r1, r3
 80034e6:	481a      	ldr	r0, [pc, #104]	@ (8003550 <HAL_TIM_MspPostInit+0x15c>)
 80034e8:	f006 ff40 	bl	800a36c <HAL_GPIO_Init>
}
 80034ec:	e023      	b.n	8003536 <HAL_TIM_MspPostInit+0x142>
  else if(htim->Instance==TIM23)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a18      	ldr	r2, [pc, #96]	@ (8003554 <HAL_TIM_MspPostInit+0x160>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d11e      	bne.n	8003536 <HAL_TIM_MspPostInit+0x142>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034f8:	4b12      	ldr	r3, [pc, #72]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 80034fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80034fe:	4a11      	ldr	r2, [pc, #68]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 8003500:	f043 0320 	orr.w	r3, r3, #32
 8003504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003508:	4b0e      	ldr	r3, [pc, #56]	@ (8003544 <HAL_TIM_MspPostInit+0x150>)
 800350a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800350e:	f003 0320 	and.w	r3, r3, #32
 8003512:	60fb      	str	r3, [r7, #12]
 8003514:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003516:	230f      	movs	r3, #15
 8003518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351a:	2302      	movs	r3, #2
 800351c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003522:	2300      	movs	r3, #0
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8003526:	230d      	movs	r3, #13
 8003528:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800352a:	f107 031c 	add.w	r3, r7, #28
 800352e:	4619      	mov	r1, r3
 8003530:	4809      	ldr	r0, [pc, #36]	@ (8003558 <HAL_TIM_MspPostInit+0x164>)
 8003532:	f006 ff1b 	bl	800a36c <HAL_GPIO_Init>
}
 8003536:	bf00      	nop
 8003538:	3730      	adds	r7, #48	@ 0x30
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40010000 	.word	0x40010000
 8003544:	58024400 	.word	0x58024400
 8003548:	58020000 	.word	0x58020000
 800354c:	40000400 	.word	0x40000400
 8003550:	58020800 	.word	0x58020800
 8003554:	4000e000 	.word	0x4000e000
 8003558:	58021400 	.word	0x58021400

0800355c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b0c2      	sub	sp, #264	@ 0x108
 8003560:	af00      	add	r7, sp, #0
 8003562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800356a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800356c:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	605a      	str	r2, [r3, #4]
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	60da      	str	r2, [r3, #12]
 800357a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800357c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003580:	22b8      	movs	r2, #184	@ 0xb8
 8003582:	2100      	movs	r1, #0
 8003584:	4618      	mov	r0, r3
 8003586:	f00f fc85 	bl	8012e94 <memset>
  if(huart->Instance==UART7)
 800358a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800358e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a6d      	ldr	r2, [pc, #436]	@ (800374c <HAL_UART_MspInit+0x1f0>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d147      	bne.n	800362c <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800359c:	f04f 0202 	mov.w	r2, #2
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80035a8:	2300      	movs	r3, #0
 80035aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80035b2:	4618      	mov	r0, r3
 80035b4:	f008 fa84 	bl	800bac0 <HAL_RCCEx_PeriphCLKConfig>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 80035be:	f7ff faad 	bl	8002b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80035c2:	4b63      	ldr	r3, [pc, #396]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 80035c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035c8:	4a61      	ldr	r2, [pc, #388]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 80035ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80035ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80035d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 80035d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80035d8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80035e0:	4b5b      	ldr	r3, [pc, #364]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 80035e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 80035e8:	f043 0320 	orr.w	r3, r3, #32
 80035ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80035f0:	4b57      	ldr	r3, [pc, #348]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 80035f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80035f6:	f003 0320 	and.w	r3, r3, #32
 80035fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80035fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /**UART7 GPIO Configuration
    PF6     ------> UART7_RX
    PF7     ------> UART7_TX
    PF8     ------> UART7_DE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80035fe:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8003602:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003606:	2302      	movs	r3, #2
 8003608:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800360c:	2300      	movs	r3, #0
 800360e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8003618:	2307      	movs	r3, #7
 800361a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800361e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003622:	4619      	mov	r1, r3
 8003624:	484b      	ldr	r0, [pc, #300]	@ (8003754 <HAL_UART_MspInit+0x1f8>)
 8003626:	f006 fea1 	bl	800a36c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART10_MspInit 1 */

  /* USER CODE END USART10_MspInit 1 */
  }

}
 800362a:	e366      	b.n	8003cfa <HAL_UART_MspInit+0x79e>
  else if(huart->Instance==UART8)
 800362c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003630:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a47      	ldr	r2, [pc, #284]	@ (8003758 <HAL_UART_MspInit+0x1fc>)
 800363a:	4293      	cmp	r3, r2
 800363c:	f040 8094 	bne.w	8003768 <HAL_UART_MspInit+0x20c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003640:	f04f 0202 	mov.w	r2, #2
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800364c:	2300      	movs	r3, #0
 800364e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003652:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003656:	4618      	mov	r0, r3
 8003658:	f008 fa32 	bl	800bac0 <HAL_RCCEx_PeriphCLKConfig>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <HAL_UART_MspInit+0x10a>
      Error_Handler();
 8003662:	f7ff fa5b 	bl	8002b1c <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8003666:	4b3a      	ldr	r3, [pc, #232]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 8003668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800366c:	4a38      	ldr	r2, [pc, #224]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 800366e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003672:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003676:	4b36      	ldr	r3, [pc, #216]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 8003678:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800367c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003680:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003684:	4b32      	ldr	r3, [pc, #200]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 8003686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800368a:	4a31      	ldr	r2, [pc, #196]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 800368c:	f043 0310 	orr.w	r3, r3, #16
 8003690:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003694:	4b2e      	ldr	r3, [pc, #184]	@ (8003750 <HAL_UART_MspInit+0x1f4>)
 8003696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80036a2:	2303      	movs	r3, #3
 80036a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80036ba:	2308      	movs	r3, #8
 80036bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80036c0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80036c4:	4619      	mov	r1, r3
 80036c6:	4825      	ldr	r0, [pc, #148]	@ (800375c <HAL_UART_MspInit+0x200>)
 80036c8:	f006 fe50 	bl	800a36c <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA2_Stream0;
 80036cc:	4b24      	ldr	r3, [pc, #144]	@ (8003760 <HAL_UART_MspInit+0x204>)
 80036ce:	4a25      	ldr	r2, [pc, #148]	@ (8003764 <HAL_UART_MspInit+0x208>)
 80036d0:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Request = DMA_REQUEST_UART8_RX;
 80036d2:	4b23      	ldr	r3, [pc, #140]	@ (8003760 <HAL_UART_MspInit+0x204>)
 80036d4:	2251      	movs	r2, #81	@ 0x51
 80036d6:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036d8:	4b21      	ldr	r3, [pc, #132]	@ (8003760 <HAL_UART_MspInit+0x204>)
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036de:	4b20      	ldr	r3, [pc, #128]	@ (8003760 <HAL_UART_MspInit+0x204>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80036e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003760 <HAL_UART_MspInit+0x204>)
 80036e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036ea:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036ec:	4b1c      	ldr	r3, [pc, #112]	@ (8003760 <HAL_UART_MspInit+0x204>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003760 <HAL_UART_MspInit+0x204>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 80036f8:	4b19      	ldr	r3, [pc, #100]	@ (8003760 <HAL_UART_MspInit+0x204>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036fe:	4b18      	ldr	r3, [pc, #96]	@ (8003760 <HAL_UART_MspInit+0x204>)
 8003700:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003704:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003706:	4b16      	ldr	r3, [pc, #88]	@ (8003760 <HAL_UART_MspInit+0x204>)
 8003708:	2200      	movs	r2, #0
 800370a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800370c:	4814      	ldr	r0, [pc, #80]	@ (8003760 <HAL_UART_MspInit+0x204>)
 800370e:	f002 fdbf 	bl	8006290 <HAL_DMA_Init>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d001      	beq.n	800371c <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8003718:	f7ff fa00 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800371c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003720:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a0e      	ldr	r2, [pc, #56]	@ (8003760 <HAL_UART_MspInit+0x204>)
 8003728:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800372c:	4a0c      	ldr	r2, [pc, #48]	@ (8003760 <HAL_UART_MspInit+0x204>)
 800372e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003732:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 800373a:	2200      	movs	r2, #0
 800373c:	2105      	movs	r1, #5
 800373e:	2053      	movs	r0, #83	@ 0x53
 8003740:	f002 fd71 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8003744:	2053      	movs	r0, #83	@ 0x53
 8003746:	f002 fd88 	bl	800625a <HAL_NVIC_EnableIRQ>
}
 800374a:	e2d6      	b.n	8003cfa <HAL_UART_MspInit+0x79e>
 800374c:	40007800 	.word	0x40007800
 8003750:	58024400 	.word	0x58024400
 8003754:	58021400 	.word	0x58021400
 8003758:	40007c00 	.word	0x40007c00
 800375c:	58021000 	.word	0x58021000
 8003760:	240010f8 	.word	0x240010f8
 8003764:	40020410 	.word	0x40020410
  else if(huart->Instance==USART1)
 8003768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800376c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a60      	ldr	r2, [pc, #384]	@ (80038f8 <HAL_UART_MspInit+0x39c>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f040 80cc 	bne.w	8003914 <HAL_UART_MspInit+0x3b8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800377c:	f04f 0201 	mov.w	r2, #1
 8003780:	f04f 0300 	mov.w	r3, #0
 8003784:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800378e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003792:	4618      	mov	r0, r3
 8003794:	f008 f994 	bl	800bac0 <HAL_RCCEx_PeriphCLKConfig>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_UART_MspInit+0x246>
      Error_Handler();
 800379e:	f7ff f9bd 	bl	8002b1c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80037a2:	4b56      	ldr	r3, [pc, #344]	@ (80038fc <HAL_UART_MspInit+0x3a0>)
 80037a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037a8:	4a54      	ldr	r2, [pc, #336]	@ (80038fc <HAL_UART_MspInit+0x3a0>)
 80037aa:	f043 0310 	orr.w	r3, r3, #16
 80037ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80037b2:	4b52      	ldr	r3, [pc, #328]	@ (80038fc <HAL_UART_MspInit+0x3a0>)
 80037b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037b8:	f003 0310 	and.w	r3, r3, #16
 80037bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c0:	4b4e      	ldr	r3, [pc, #312]	@ (80038fc <HAL_UART_MspInit+0x3a0>)
 80037c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037c6:	4a4d      	ldr	r2, [pc, #308]	@ (80038fc <HAL_UART_MspInit+0x3a0>)
 80037c8:	f043 0302 	orr.w	r3, r3, #2
 80037cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80037d0:	4b4a      	ldr	r3, [pc, #296]	@ (80038fc <HAL_UART_MspInit+0x3a0>)
 80037d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	623b      	str	r3, [r7, #32]
 80037dc:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80037de:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80037e2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e6:	2302      	movs	r3, #2
 80037e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f2:	2300      	movs	r3, #0
 80037f4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80037f8:	2304      	movs	r3, #4
 80037fa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037fe:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003802:	4619      	mov	r1, r3
 8003804:	483e      	ldr	r0, [pc, #248]	@ (8003900 <HAL_UART_MspInit+0x3a4>)
 8003806:	f006 fdb1 	bl	800a36c <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Stream2;
 800380a:	4b3e      	ldr	r3, [pc, #248]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 800380c:	4a3e      	ldr	r2, [pc, #248]	@ (8003908 <HAL_UART_MspInit+0x3ac>)
 800380e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003810:	4b3c      	ldr	r3, [pc, #240]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 8003812:	222a      	movs	r2, #42	@ 0x2a
 8003814:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003816:	4b3b      	ldr	r3, [pc, #236]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 8003818:	2240      	movs	r2, #64	@ 0x40
 800381a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800381c:	4b39      	ldr	r3, [pc, #228]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 800381e:	2200      	movs	r2, #0
 8003820:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003822:	4b38      	ldr	r3, [pc, #224]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 8003824:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003828:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800382a:	4b36      	ldr	r3, [pc, #216]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 800382c:	2200      	movs	r2, #0
 800382e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003830:	4b34      	ldr	r3, [pc, #208]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 8003832:	2200      	movs	r2, #0
 8003834:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003836:	4b33      	ldr	r3, [pc, #204]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 8003838:	2200      	movs	r2, #0
 800383a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800383c:	4b31      	ldr	r3, [pc, #196]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 800383e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003842:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003844:	4b2f      	ldr	r3, [pc, #188]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 8003846:	2200      	movs	r2, #0
 8003848:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800384a:	482e      	ldr	r0, [pc, #184]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 800384c:	f002 fd20 	bl	8006290 <HAL_DMA_Init>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <HAL_UART_MspInit+0x2fe>
      Error_Handler();
 8003856:	f7ff f961 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800385a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800385e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a27      	ldr	r2, [pc, #156]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 8003866:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003868:	4a26      	ldr	r2, [pc, #152]	@ (8003904 <HAL_UART_MspInit+0x3a8>)
 800386a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800386e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_rx.Instance = DMA1_Stream3;
 8003876:	4b25      	ldr	r3, [pc, #148]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 8003878:	4a25      	ldr	r2, [pc, #148]	@ (8003910 <HAL_UART_MspInit+0x3b4>)
 800387a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800387c:	4b23      	ldr	r3, [pc, #140]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 800387e:	2229      	movs	r2, #41	@ 0x29
 8003880:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003882:	4b22      	ldr	r3, [pc, #136]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 8003884:	2200      	movs	r2, #0
 8003886:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003888:	4b20      	ldr	r3, [pc, #128]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 800388a:	2200      	movs	r2, #0
 800388c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800388e:	4b1f      	ldr	r3, [pc, #124]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 8003890:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003894:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003896:	4b1d      	ldr	r3, [pc, #116]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 8003898:	2200      	movs	r2, #0
 800389a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800389c:	4b1b      	ldr	r3, [pc, #108]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80038a2:	4b1a      	ldr	r3, [pc, #104]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80038a8:	4b18      	ldr	r3, [pc, #96]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 80038aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80038ae:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038b0:	4b16      	ldr	r3, [pc, #88]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80038b6:	4815      	ldr	r0, [pc, #84]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 80038b8:	f002 fcea 	bl	8006290 <HAL_DMA_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_UART_MspInit+0x36a>
      Error_Handler();
 80038c2:	f7ff f92b 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80038c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a0e      	ldr	r2, [pc, #56]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 80038d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80038d6:	4a0d      	ldr	r2, [pc, #52]	@ (800390c <HAL_UART_MspInit+0x3b0>)
 80038d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80038dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80038e4:	2200      	movs	r2, #0
 80038e6:	2105      	movs	r1, #5
 80038e8:	2025      	movs	r0, #37	@ 0x25
 80038ea:	f002 fc9c 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80038ee:	2025      	movs	r0, #37	@ 0x25
 80038f0:	f002 fcb3 	bl	800625a <HAL_NVIC_EnableIRQ>
}
 80038f4:	e201      	b.n	8003cfa <HAL_UART_MspInit+0x79e>
 80038f6:	bf00      	nop
 80038f8:	40011000 	.word	0x40011000
 80038fc:	58024400 	.word	0x58024400
 8003900:	58020400 	.word	0x58020400
 8003904:	24001170 	.word	0x24001170
 8003908:	40020040 	.word	0x40020040
 800390c:	240011e8 	.word	0x240011e8
 8003910:	40020058 	.word	0x40020058
  else if(huart->Instance==USART2)
 8003914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a5f      	ldr	r2, [pc, #380]	@ (8003aa0 <HAL_UART_MspInit+0x544>)
 8003922:	4293      	cmp	r3, r2
 8003924:	f040 80ca 	bne.w	8003abc <HAL_UART_MspInit+0x560>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003928:	f04f 0202 	mov.w	r2, #2
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800393a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800393e:	4618      	mov	r0, r3
 8003940:	f008 f8be 	bl	800bac0 <HAL_RCCEx_PeriphCLKConfig>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_UART_MspInit+0x3f2>
      Error_Handler();
 800394a:	f7ff f8e7 	bl	8002b1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800394e:	4b55      	ldr	r3, [pc, #340]	@ (8003aa4 <HAL_UART_MspInit+0x548>)
 8003950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003954:	4a53      	ldr	r2, [pc, #332]	@ (8003aa4 <HAL_UART_MspInit+0x548>)
 8003956:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800395a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800395e:	4b51      	ldr	r3, [pc, #324]	@ (8003aa4 <HAL_UART_MspInit+0x548>)
 8003960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003968:	61fb      	str	r3, [r7, #28]
 800396a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800396c:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa4 <HAL_UART_MspInit+0x548>)
 800396e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003972:	4a4c      	ldr	r2, [pc, #304]	@ (8003aa4 <HAL_UART_MspInit+0x548>)
 8003974:	f043 0308 	orr.w	r3, r3, #8
 8003978:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800397c:	4b49      	ldr	r3, [pc, #292]	@ (8003aa4 <HAL_UART_MspInit+0x548>)
 800397e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800398a:	2360      	movs	r3, #96	@ 0x60
 800398c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003990:	2302      	movs	r3, #2
 8003992:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003996:	2300      	movs	r3, #0
 8003998:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399c:	2300      	movs	r3, #0
 800399e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80039a2:	2307      	movs	r3, #7
 80039a4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039a8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 80039ac:	4619      	mov	r1, r3
 80039ae:	483e      	ldr	r0, [pc, #248]	@ (8003aa8 <HAL_UART_MspInit+0x54c>)
 80039b0:	f006 fcdc 	bl	800a36c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream1;
 80039b4:	4b3d      	ldr	r3, [pc, #244]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039b6:	4a3e      	ldr	r2, [pc, #248]	@ (8003ab0 <HAL_UART_MspInit+0x554>)
 80039b8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80039ba:	4b3c      	ldr	r3, [pc, #240]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039bc:	222c      	movs	r2, #44	@ 0x2c
 80039be:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039c0:	4b3a      	ldr	r3, [pc, #232]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039c2:	2240      	movs	r2, #64	@ 0x40
 80039c4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039c6:	4b39      	ldr	r3, [pc, #228]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039cc:	4b37      	ldr	r3, [pc, #220]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039d2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039d4:	4b35      	ldr	r3, [pc, #212]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039da:	4b34      	ldr	r3, [pc, #208]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80039e0:	4b32      	ldr	r3, [pc, #200]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80039e6:	4b31      	ldr	r3, [pc, #196]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80039ec:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80039ee:	4b2f      	ldr	r3, [pc, #188]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80039f4:	482d      	ldr	r0, [pc, #180]	@ (8003aac <HAL_UART_MspInit+0x550>)
 80039f6:	f002 fc4b 	bl	8006290 <HAL_DMA_Init>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <HAL_UART_MspInit+0x4a8>
      Error_Handler();
 8003a00:	f7ff f88c 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003a04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a27      	ldr	r2, [pc, #156]	@ (8003aac <HAL_UART_MspInit+0x550>)
 8003a10:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003a12:	4a26      	ldr	r2, [pc, #152]	@ (8003aac <HAL_UART_MspInit+0x550>)
 8003a14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_rx.Instance = DMA1_Stream4;
 8003a20:	4b24      	ldr	r3, [pc, #144]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a22:	4a25      	ldr	r2, [pc, #148]	@ (8003ab8 <HAL_UART_MspInit+0x55c>)
 8003a24:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003a26:	4b23      	ldr	r3, [pc, #140]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a28:	222b      	movs	r2, #43	@ 0x2b
 8003a2a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a2c:	4b21      	ldr	r3, [pc, #132]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a32:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a38:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003a3e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a40:	4b1c      	ldr	r3, [pc, #112]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a46:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a4c:	4b19      	ldr	r3, [pc, #100]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003a52:	4b18      	ldr	r3, [pc, #96]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003a58:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a5a:	4b16      	ldr	r3, [pc, #88]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a60:	4814      	ldr	r0, [pc, #80]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a62:	f002 fc15 	bl	8006290 <HAL_DMA_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_MspInit+0x514>
      Error_Handler();
 8003a6c:	f7ff f856 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003a70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003a80:	4a0c      	ldr	r2, [pc, #48]	@ (8003ab4 <HAL_UART_MspInit+0x558>)
 8003a82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003a86:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2105      	movs	r1, #5
 8003a92:	2026      	movs	r0, #38	@ 0x26
 8003a94:	f002 fbc7 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003a98:	2026      	movs	r0, #38	@ 0x26
 8003a9a:	f002 fbde 	bl	800625a <HAL_NVIC_EnableIRQ>
}
 8003a9e:	e12c      	b.n	8003cfa <HAL_UART_MspInit+0x79e>
 8003aa0:	40004400 	.word	0x40004400
 8003aa4:	58024400 	.word	0x58024400
 8003aa8:	58020c00 	.word	0x58020c00
 8003aac:	24001260 	.word	0x24001260
 8003ab0:	40020028 	.word	0x40020028
 8003ab4:	240012d8 	.word	0x240012d8
 8003ab8:	40020070 	.word	0x40020070
  else if(huart->Instance==USART3)
 8003abc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003ac0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a8e      	ldr	r2, [pc, #568]	@ (8003d04 <HAL_UART_MspInit+0x7a8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	f040 80bd 	bne.w	8003c4a <HAL_UART_MspInit+0x6ee>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ad0:	f04f 0202 	mov.w	r2, #2
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003adc:	2300      	movs	r3, #0
 8003ade:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003ae2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f007 ffea 	bl	800bac0 <HAL_RCCEx_PeriphCLKConfig>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <HAL_UART_MspInit+0x59a>
      Error_Handler();
 8003af2:	f7ff f813 	bl	8002b1c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003af6:	4b84      	ldr	r3, [pc, #528]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003af8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003afc:	4a82      	ldr	r2, [pc, #520]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003afe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8003b06:	4b80      	ldr	r3, [pc, #512]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8003b0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b14:	4b7c      	ldr	r3, [pc, #496]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003b16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b1a:	4a7b      	ldr	r2, [pc, #492]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003b1c:	f043 0304 	orr.w	r3, r3, #4
 8003b20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003b24:	4b78      	ldr	r3, [pc, #480]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	613b      	str	r3, [r7, #16]
 8003b30:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003b32:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003b36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b4c:	2307      	movs	r3, #7
 8003b4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b52:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003b56:	4619      	mov	r1, r3
 8003b58:	486c      	ldr	r0, [pc, #432]	@ (8003d0c <HAL_UART_MspInit+0x7b0>)
 8003b5a:	f006 fc07 	bl	800a36c <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Stream0;
 8003b5e:	4b6c      	ldr	r3, [pc, #432]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b60:	4a6c      	ldr	r2, [pc, #432]	@ (8003d14 <HAL_UART_MspInit+0x7b8>)
 8003b62:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003b64:	4b6a      	ldr	r3, [pc, #424]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b66:	222e      	movs	r2, #46	@ 0x2e
 8003b68:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003b6a:	4b69      	ldr	r3, [pc, #420]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b6c:	2240      	movs	r2, #64	@ 0x40
 8003b6e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b70:	4b67      	ldr	r3, [pc, #412]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b76:	4b66      	ldr	r3, [pc, #408]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b7c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b7e:	4b64      	ldr	r3, [pc, #400]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b84:	4b62      	ldr	r3, [pc, #392]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003b8a:	4b61      	ldr	r3, [pc, #388]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003b90:	4b5f      	ldr	r3, [pc, #380]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b92:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003b96:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b98:	4b5d      	ldr	r3, [pc, #372]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003b9e:	485c      	ldr	r0, [pc, #368]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003ba0:	f002 fb76 	bl	8006290 <HAL_DMA_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <HAL_UART_MspInit+0x652>
      Error_Handler();
 8003baa:	f7fe ffb7 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003bae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a55      	ldr	r2, [pc, #340]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003bba:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003bbc:	4a54      	ldr	r2, [pc, #336]	@ (8003d10 <HAL_UART_MspInit+0x7b4>)
 8003bbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003bc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_rx.Instance = DMA1_Stream5;
 8003bca:	4b53      	ldr	r3, [pc, #332]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003bcc:	4a53      	ldr	r2, [pc, #332]	@ (8003d1c <HAL_UART_MspInit+0x7c0>)
 8003bce:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003bd0:	4b51      	ldr	r3, [pc, #324]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003bd2:	222d      	movs	r2, #45	@ 0x2d
 8003bd4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bd6:	4b50      	ldr	r3, [pc, #320]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bdc:	4b4e      	ldr	r3, [pc, #312]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003be2:	4b4d      	ldr	r3, [pc, #308]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003be4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003be8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bea:	4b4b      	ldr	r3, [pc, #300]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bf0:	4b49      	ldr	r3, [pc, #292]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8003bf6:	4b48      	ldr	r3, [pc, #288]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003bfc:	4b46      	ldr	r3, [pc, #280]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003bfe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003c02:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c04:	4b44      	ldr	r3, [pc, #272]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003c0a:	4843      	ldr	r0, [pc, #268]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003c0c:	f002 fb40 	bl	8006290 <HAL_DMA_Init>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_UART_MspInit+0x6be>
      Error_Handler();
 8003c16:	f7fe ff81 	bl	8002b1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003c1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a3c      	ldr	r2, [pc, #240]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003c26:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003c2a:	4a3b      	ldr	r2, [pc, #236]	@ (8003d18 <HAL_UART_MspInit+0x7bc>)
 8003c2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2105      	movs	r1, #5
 8003c3c:	2027      	movs	r0, #39	@ 0x27
 8003c3e:	f002 faf2 	bl	8006226 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c42:	2027      	movs	r0, #39	@ 0x27
 8003c44:	f002 fb09 	bl	800625a <HAL_NVIC_EnableIRQ>
}
 8003c48:	e057      	b.n	8003cfa <HAL_UART_MspInit+0x79e>
  else if(huart->Instance==USART10)
 8003c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a32      	ldr	r2, [pc, #200]	@ (8003d20 <HAL_UART_MspInit+0x7c4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d14e      	bne.n	8003cfa <HAL_UART_MspInit+0x79e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART10;
 8003c5c:	f04f 0201 	mov.w	r2, #1
 8003c60:	f04f 0300 	mov.w	r3, #0
 8003c64:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003c72:	4618      	mov	r0, r3
 8003c74:	f007 ff24 	bl	800bac0 <HAL_RCCEx_PeriphCLKConfig>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_UART_MspInit+0x726>
      Error_Handler();
 8003c7e:	f7fe ff4d 	bl	8002b1c <Error_Handler>
    __HAL_RCC_USART10_CLK_ENABLE();
 8003c82:	4b21      	ldr	r3, [pc, #132]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003c84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c88:	4a1f      	ldr	r2, [pc, #124]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8003c92:	4b1d      	ldr	r3, [pc, #116]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003c94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ca0:	4b19      	ldr	r3, [pc, #100]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003ca6:	4a18      	ldr	r2, [pc, #96]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8003cb0:	4b15      	ldr	r3, [pc, #84]	@ (8003d08 <HAL_UART_MspInit+0x7ac>)
 8003cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8003cb6:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8003cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cbe:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003cc8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003ccc:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_14;
 8003cce:	f44f 43b0 	mov.w	r3, #22528	@ 0x5800
 8003cd2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_USART10;
 8003ce8:	2304      	movs	r3, #4
 8003cea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003cee:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	480b      	ldr	r0, [pc, #44]	@ (8003d24 <HAL_UART_MspInit+0x7c8>)
 8003cf6:	f006 fb39 	bl	800a36c <HAL_GPIO_Init>
}
 8003cfa:	bf00      	nop
 8003cfc:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40004800 	.word	0x40004800
 8003d08:	58024400 	.word	0x58024400
 8003d0c:	58020800 	.word	0x58020800
 8003d10:	24001350 	.word	0x24001350
 8003d14:	40020010 	.word	0x40020010
 8003d18:	240013c8 	.word	0x240013c8
 8003d1c:	40020088 	.word	0x40020088
 8003d20:	40011c00 	.word	0x40011c00
 8003d24:	58021800 	.word	0x58021800

08003d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <NMI_Handler+0x4>

08003d30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <HardFault_Handler+0x4>

08003d38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <MemManage_Handler+0x4>

08003d40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d44:	bf00      	nop
 8003d46:	e7fd      	b.n	8003d44 <BusFault_Handler+0x4>

08003d48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d4c:	bf00      	nop
 8003d4e:	e7fd      	b.n	8003d4c <UsageFault_Handler+0x4>

08003d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d54:	bf00      	nop
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d62:	f000 fa11 	bl	8004188 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003d66:	f00e fbf3 	bl	8012550 <xTaskGetSchedulerState>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d001      	beq.n	8003d74 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8003d70:	f00e fe32 	bl	80129d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003d7c:	4802      	ldr	r0, [pc, #8]	@ (8003d88 <DMA1_Stream0_IRQHandler+0x10>)
 8003d7e:	f003 fdad 	bl	80078dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	24001350 	.word	0x24001350

08003d8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003d90:	4802      	ldr	r0, [pc, #8]	@ (8003d9c <DMA1_Stream1_IRQHandler+0x10>)
 8003d92:	f003 fda3 	bl	80078dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	24001260 	.word	0x24001260

08003da0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003da4:	4802      	ldr	r0, [pc, #8]	@ (8003db0 <DMA1_Stream2_IRQHandler+0x10>)
 8003da6:	f003 fd99 	bl	80078dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	24001170 	.word	0x24001170

08003db4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003db8:	4802      	ldr	r0, [pc, #8]	@ (8003dc4 <DMA1_Stream3_IRQHandler+0x10>)
 8003dba:	f003 fd8f 	bl	80078dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	240011e8 	.word	0x240011e8

08003dc8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003dcc:	4802      	ldr	r0, [pc, #8]	@ (8003dd8 <DMA1_Stream4_IRQHandler+0x10>)
 8003dce:	f003 fd85 	bl	80078dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	240012d8 	.word	0x240012d8

08003ddc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003de0:	4802      	ldr	r0, [pc, #8]	@ (8003dec <DMA1_Stream5_IRQHandler+0x10>)
 8003de2:	f003 fd7b 	bl	80078dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003de6:	bf00      	nop
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	240013c8 	.word	0x240013c8

08003df0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003df4:	4802      	ldr	r0, [pc, #8]	@ (8003e00 <DMA1_Stream6_IRQHandler+0x10>)
 8003df6:	f003 fd71 	bl	80078dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003dfa:	bf00      	nop
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	24000870 	.word	0x24000870

08003e04 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003e08:	4802      	ldr	r0, [pc, #8]	@ (8003e14 <FDCAN1_IT0_IRQHandler+0x10>)
 8003e0a:	f005 fdb3 	bl	8009974 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003e0e:	bf00      	nop
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	24000960 	.word	0x24000960

08003e18 <FDCAN2_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 0.
  */
void FDCAN2_IT0_IRQHandler(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 0 */

  /* USER CODE END FDCAN2_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003e1c:	4802      	ldr	r0, [pc, #8]	@ (8003e28 <FDCAN2_IT0_IRQHandler+0x10>)
 8003e1e:	f005 fda9 	bl	8009974 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT0_IRQn 1 */

  /* USER CODE END FDCAN2_IT0_IRQn 1 */
}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	24000a00 	.word	0x24000a00

08003e2c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003e30:	4802      	ldr	r0, [pc, #8]	@ (8003e3c <FDCAN1_IT1_IRQHandler+0x10>)
 8003e32:	f005 fd9f 	bl	8009974 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8003e36:	bf00      	nop
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	24000960 	.word	0x24000960

08003e40 <FDCAN2_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN2 interrupt 1.
  */
void FDCAN2_IT1_IRQHandler(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 0 */

  /* USER CODE END FDCAN2_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan2);
 8003e44:	4802      	ldr	r0, [pc, #8]	@ (8003e50 <FDCAN2_IT1_IRQHandler+0x10>)
 8003e46:	f005 fd95 	bl	8009974 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN2_IT1_IRQn 1 */

  /* USER CODE END FDCAN2_IT1_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	24000a00 	.word	0x24000a00

08003e54 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003e58:	4802      	ldr	r0, [pc, #8]	@ (8003e64 <USART1_IRQHandler+0x10>)
 8003e5a:	f00b fcb1 	bl	800f7c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	24000ea8 	.word	0x24000ea8

08003e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e6c:	4802      	ldr	r0, [pc, #8]	@ (8003e78 <USART2_IRQHandler+0x10>)
 8003e6e:	f00b fca7 	bl	800f7c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	24000f3c 	.word	0x24000f3c

08003e7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003e80:	4802      	ldr	r0, [pc, #8]	@ (8003e8c <USART3_IRQHandler+0x10>)
 8003e82:	f00b fc9d 	bl	800f7c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	24000fd0 	.word	0x24000fd0

08003e90 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003e94:	4802      	ldr	r0, [pc, #8]	@ (8003ea0 <DMA1_Stream7_IRQHandler+0x10>)
 8003e96:	f003 fd21 	bl	80078dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	240008e8 	.word	0x240008e8

08003ea4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8003ea8:	4802      	ldr	r0, [pc, #8]	@ (8003eb4 <DMA2_Stream0_IRQHandler+0x10>)
 8003eaa:	f003 fd17 	bl	80078dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	240010f8 	.word	0x240010f8

08003eb8 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003ebc:	4802      	ldr	r0, [pc, #8]	@ (8003ec8 <UART8_IRQHandler+0x10>)
 8003ebe:	f00b fc7f 	bl	800f7c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	24000e14 	.word	0x24000e14

08003ecc <FDCAN3_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 0.
  */
void FDCAN3_IT0_IRQHandler(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 0 */

  /* USER CODE END FDCAN3_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8003ed0:	4802      	ldr	r0, [pc, #8]	@ (8003edc <FDCAN3_IT0_IRQHandler+0x10>)
 8003ed2:	f005 fd4f 	bl	8009974 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT0_IRQn 1 */

  /* USER CODE END FDCAN3_IT0_IRQn 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	24000aa0 	.word	0x24000aa0

08003ee0 <FDCAN3_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN3 interrupt 1.
  */
void FDCAN3_IT1_IRQHandler(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 0 */

  /* USER CODE END FDCAN3_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan3);
 8003ee4:	4802      	ldr	r0, [pc, #8]	@ (8003ef0 <FDCAN3_IT1_IRQHandler+0x10>)
 8003ee6:	f005 fd45 	bl	8009974 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN3_IT1_IRQn 1 */

  /* USER CODE END FDCAN3_IT1_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	24000aa0 	.word	0x24000aa0

08003ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003efc:	4a14      	ldr	r2, [pc, #80]	@ (8003f50 <_sbrk+0x5c>)
 8003efe:	4b15      	ldr	r3, [pc, #84]	@ (8003f54 <_sbrk+0x60>)
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f08:	4b13      	ldr	r3, [pc, #76]	@ (8003f58 <_sbrk+0x64>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003f10:	4b11      	ldr	r3, [pc, #68]	@ (8003f58 <_sbrk+0x64>)
 8003f12:	4a12      	ldr	r2, [pc, #72]	@ (8003f5c <_sbrk+0x68>)
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003f16:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <_sbrk+0x64>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d207      	bcs.n	8003f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f24:	f00e ffbe 	bl	8012ea4 <__errno>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	220c      	movs	r2, #12
 8003f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f32:	e009      	b.n	8003f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f34:	4b08      	ldr	r3, [pc, #32]	@ (8003f58 <_sbrk+0x64>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f3a:	4b07      	ldr	r3, [pc, #28]	@ (8003f58 <_sbrk+0x64>)
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4413      	add	r3, r2
 8003f42:	4a05      	ldr	r2, [pc, #20]	@ (8003f58 <_sbrk+0x64>)
 8003f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f46:	68fb      	ldr	r3, [r7, #12]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3718      	adds	r7, #24
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	24050000 	.word	0x24050000
 8003f54:	00000400 	.word	0x00000400
 8003f58:	24001450 	.word	0x24001450
 8003f5c:	240052f8 	.word	0x240052f8

08003f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f64:	4b32      	ldr	r3, [pc, #200]	@ (8004030 <SystemInit+0xd0>)
 8003f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f6a:	4a31      	ldr	r2, [pc, #196]	@ (8004030 <SystemInit+0xd0>)
 8003f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003f74:	4b2f      	ldr	r3, [pc, #188]	@ (8004034 <SystemInit+0xd4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 030f 	and.w	r3, r3, #15
 8003f7c:	2b06      	cmp	r3, #6
 8003f7e:	d807      	bhi.n	8003f90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003f80:	4b2c      	ldr	r3, [pc, #176]	@ (8004034 <SystemInit+0xd4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 030f 	bic.w	r3, r3, #15
 8003f88:	4a2a      	ldr	r2, [pc, #168]	@ (8004034 <SystemInit+0xd4>)
 8003f8a:	f043 0307 	orr.w	r3, r3, #7
 8003f8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003f90:	4b29      	ldr	r3, [pc, #164]	@ (8004038 <SystemInit+0xd8>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a28      	ldr	r2, [pc, #160]	@ (8004038 <SystemInit+0xd8>)
 8003f96:	f043 0301 	orr.w	r3, r3, #1
 8003f9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003f9c:	4b26      	ldr	r3, [pc, #152]	@ (8004038 <SystemInit+0xd8>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003fa2:	4b25      	ldr	r3, [pc, #148]	@ (8004038 <SystemInit+0xd8>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4924      	ldr	r1, [pc, #144]	@ (8004038 <SystemInit+0xd8>)
 8003fa8:	4b24      	ldr	r3, [pc, #144]	@ (800403c <SystemInit+0xdc>)
 8003faa:	4013      	ands	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003fae:	4b21      	ldr	r3, [pc, #132]	@ (8004034 <SystemInit+0xd4>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0308 	and.w	r3, r3, #8
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d007      	beq.n	8003fca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003fba:	4b1e      	ldr	r3, [pc, #120]	@ (8004034 <SystemInit+0xd4>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f023 030f 	bic.w	r3, r3, #15
 8003fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8004034 <SystemInit+0xd4>)
 8003fc4:	f043 0307 	orr.w	r3, r3, #7
 8003fc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003fca:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <SystemInit+0xd8>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003fd0:	4b19      	ldr	r3, [pc, #100]	@ (8004038 <SystemInit+0xd8>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003fd6:	4b18      	ldr	r3, [pc, #96]	@ (8004038 <SystemInit+0xd8>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003fdc:	4b16      	ldr	r3, [pc, #88]	@ (8004038 <SystemInit+0xd8>)
 8003fde:	4a18      	ldr	r2, [pc, #96]	@ (8004040 <SystemInit+0xe0>)
 8003fe0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003fe2:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <SystemInit+0xd8>)
 8003fe4:	4a17      	ldr	r2, [pc, #92]	@ (8004044 <SystemInit+0xe4>)
 8003fe6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003fe8:	4b13      	ldr	r3, [pc, #76]	@ (8004038 <SystemInit+0xd8>)
 8003fea:	4a17      	ldr	r2, [pc, #92]	@ (8004048 <SystemInit+0xe8>)
 8003fec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <SystemInit+0xd8>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003ff4:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <SystemInit+0xd8>)
 8003ff6:	4a14      	ldr	r2, [pc, #80]	@ (8004048 <SystemInit+0xe8>)
 8003ff8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <SystemInit+0xd8>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004000:	4b0d      	ldr	r3, [pc, #52]	@ (8004038 <SystemInit+0xd8>)
 8004002:	4a11      	ldr	r2, [pc, #68]	@ (8004048 <SystemInit+0xe8>)
 8004004:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004006:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <SystemInit+0xd8>)
 8004008:	2200      	movs	r2, #0
 800400a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800400c:	4b0a      	ldr	r3, [pc, #40]	@ (8004038 <SystemInit+0xd8>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a09      	ldr	r2, [pc, #36]	@ (8004038 <SystemInit+0xd8>)
 8004012:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004016:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004018:	4b07      	ldr	r3, [pc, #28]	@ (8004038 <SystemInit+0xd8>)
 800401a:	2200      	movs	r2, #0
 800401c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <SystemInit+0xec>)
 8004020:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8004024:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004026:	bf00      	nop
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000ed00 	.word	0xe000ed00
 8004034:	52002000 	.word	0x52002000
 8004038:	58024400 	.word	0x58024400
 800403c:	eaf6ed7f 	.word	0xeaf6ed7f
 8004040:	02020200 	.word	0x02020200
 8004044:	01ff0000 	.word	0x01ff0000
 8004048:	01010280 	.word	0x01010280
 800404c:	52004000 	.word	0x52004000

08004050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8004050:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004088 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004054:	f7ff ff84 	bl	8003f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004058:	480c      	ldr	r0, [pc, #48]	@ (800408c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800405a:	490d      	ldr	r1, [pc, #52]	@ (8004090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800405c:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800405e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004060:	e002      	b.n	8004068 <LoopCopyDataInit>

08004062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004066:	3304      	adds	r3, #4

08004068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800406a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800406c:	d3f9      	bcc.n	8004062 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800406e:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004070:	4c0a      	ldr	r4, [pc, #40]	@ (800409c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004074:	e001      	b.n	800407a <LoopFillZerobss>

08004076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004078:	3204      	adds	r2, #4

0800407a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800407a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800407c:	d3fb      	bcc.n	8004076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800407e:	f00e ff17 	bl	8012eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004082:	f7fd fad1 	bl	8001628 <main>
  bx  lr
 8004086:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004088:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800408c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004090:	24000064 	.word	0x24000064
  ldr r2, =_sidata
 8004094:	08013910 	.word	0x08013910
  ldr r2, =_sbss
 8004098:	24000064 	.word	0x24000064
  ldr r4, =_ebss
 800409c:	240052f4 	.word	0x240052f4

080040a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040a0:	e7fe      	b.n	80040a0 <ADC3_IRQHandler>
	...

080040a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040aa:	2003      	movs	r0, #3
 80040ac:	f002 f8b0 	bl	8006210 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040b0:	f007 fb30 	bl	800b714 <HAL_RCC_GetSysClockFreq>
 80040b4:	4602      	mov	r2, r0
 80040b6:	4b15      	ldr	r3, [pc, #84]	@ (800410c <HAL_Init+0x68>)
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	0a1b      	lsrs	r3, r3, #8
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	4913      	ldr	r1, [pc, #76]	@ (8004110 <HAL_Init+0x6c>)
 80040c2:	5ccb      	ldrb	r3, [r1, r3]
 80040c4:	f003 031f 	and.w	r3, r3, #31
 80040c8:	fa22 f303 	lsr.w	r3, r2, r3
 80040cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040ce:	4b0f      	ldr	r3, [pc, #60]	@ (800410c <HAL_Init+0x68>)
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004110 <HAL_Init+0x6c>)
 80040d8:	5cd3      	ldrb	r3, [r2, r3]
 80040da:	f003 031f 	and.w	r3, r3, #31
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
 80040e4:	4a0b      	ldr	r2, [pc, #44]	@ (8004114 <HAL_Init+0x70>)
 80040e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004118 <HAL_Init+0x74>)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040ee:	200f      	movs	r0, #15
 80040f0:	f000 f814 	bl	800411c <HAL_InitTick>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e002      	b.n	8004104 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80040fe:	f7fe fd13 	bl	8002b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	58024400 	.word	0x58024400
 8004110:	0801387c 	.word	0x0801387c
 8004114:	24000004 	.word	0x24000004
 8004118:	24000000 	.word	0x24000000

0800411c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004124:	4b15      	ldr	r3, [pc, #84]	@ (800417c <HAL_InitTick+0x60>)
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e021      	b.n	8004174 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004130:	4b13      	ldr	r3, [pc, #76]	@ (8004180 <HAL_InitTick+0x64>)
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	4b11      	ldr	r3, [pc, #68]	@ (800417c <HAL_InitTick+0x60>)
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4619      	mov	r1, r3
 800413a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800413e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	4618      	mov	r0, r3
 8004148:	f002 f895 	bl	8006276 <HAL_SYSTICK_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d001      	beq.n	8004156 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e00e      	b.n	8004174 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b0f      	cmp	r3, #15
 800415a:	d80a      	bhi.n	8004172 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800415c:	2200      	movs	r2, #0
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004164:	f002 f85f 	bl	8006226 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004168:	4a06      	ldr	r2, [pc, #24]	@ (8004184 <HAL_InitTick+0x68>)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	e000      	b.n	8004174 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	2400000c 	.word	0x2400000c
 8004180:	24000000 	.word	0x24000000
 8004184:	24000008 	.word	0x24000008

08004188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004188:	b480      	push	{r7}
 800418a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <HAL_IncTick+0x20>)
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	461a      	mov	r2, r3
 8004192:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <HAL_IncTick+0x24>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4413      	add	r3, r2
 8004198:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <HAL_IncTick+0x24>)
 800419a:	6013      	str	r3, [r2, #0]
}
 800419c:	bf00      	nop
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	2400000c 	.word	0x2400000c
 80041ac:	24001454 	.word	0x24001454

080041b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041b0:	b480      	push	{r7}
 80041b2:	af00      	add	r7, sp, #0
  return uwTick;
 80041b4:	4b03      	ldr	r3, [pc, #12]	@ (80041c4 <HAL_GetTick+0x14>)
 80041b6:	681b      	ldr	r3, [r3, #0]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
 80041c2:	bf00      	nop
 80041c4:	24001454 	.word	0x24001454

080041c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041d0:	f7ff ffee 	bl	80041b0 <HAL_GetTick>
 80041d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041e0:	d005      	beq.n	80041ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041e2:	4b0a      	ldr	r3, [pc, #40]	@ (800420c <HAL_Delay+0x44>)
 80041e4:	781b      	ldrb	r3, [r3, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4413      	add	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ee:	bf00      	nop
 80041f0:	f7ff ffde 	bl	80041b0 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d8f7      	bhi.n	80041f0 <HAL_Delay+0x28>
  {
  }
}
 8004200:	bf00      	nop
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	2400000c 	.word	0x2400000c

08004210 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	431a      	orrs	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	609a      	str	r2, [r3, #8]
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	609a      	str	r2, [r3, #8]
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004278:	b480      	push	{r7}
 800427a:	b087      	sub	sp, #28
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
 8004284:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	3360      	adds	r3, #96	@ 0x60
 800428a:	461a      	mov	r2, r3
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a10      	ldr	r2, [pc, #64]	@ (80042d8 <LL_ADC_SetOffset+0x60>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d10b      	bne.n	80042b4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80042b2:	e00b      	b.n	80042cc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	430b      	orrs	r3, r1
 80042c6:	431a      	orrs	r2, r3
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	601a      	str	r2, [r3, #0]
}
 80042cc:	bf00      	nop
 80042ce:	371c      	adds	r7, #28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	58026000 	.word	0x58026000

080042dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	3360      	adds	r3, #96	@ 0x60
 80042ea:	461a      	mov	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	f003 031f 	and.w	r3, r3, #31
 8004322:	6879      	ldr	r1, [r7, #4]
 8004324:	fa01 f303 	lsl.w	r3, r1, r3
 8004328:	431a      	orrs	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	611a      	str	r2, [r3, #16]
}
 800432e:	bf00      	nop
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
	...

0800433c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800433c:	b480      	push	{r7}
 800433e:	b087      	sub	sp, #28
 8004340:	af00      	add	r7, sp, #0
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	60b9      	str	r1, [r7, #8]
 8004346:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a0c      	ldr	r2, [pc, #48]	@ (800437c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d00e      	beq.n	800436e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3360      	adds	r3, #96	@ 0x60
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	431a      	orrs	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	601a      	str	r2, [r3, #0]
  }
}
 800436e:	bf00      	nop
 8004370:	371c      	adds	r7, #28
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
 800437a:	bf00      	nop
 800437c:	58026000 	.word	0x58026000

08004380 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <LL_ADC_SetOffsetSaturation+0x40>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d10e      	bne.n	80043b2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3360      	adds	r3, #96	@ 0x60
 8004398:	461a      	mov	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	4413      	add	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80043b2:	bf00      	nop
 80043b4:	371c      	adds	r7, #28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	58026000 	.word	0x58026000

080043c4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b087      	sub	sp, #28
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a0c      	ldr	r2, [pc, #48]	@ (8004404 <LL_ADC_SetOffsetSign+0x40>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d10e      	bne.n	80043f6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3360      	adds	r3, #96	@ 0x60
 80043dc:	461a      	mov	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4413      	add	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	431a      	orrs	r2, r3
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80043f6:	bf00      	nop
 80043f8:	371c      	adds	r7, #28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	58026000 	.word	0x58026000

08004408 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	3360      	adds	r3, #96	@ 0x60
 8004418:	461a      	mov	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	4a0c      	ldr	r2, [pc, #48]	@ (8004458 <LL_ADC_SetOffsetState+0x50>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d108      	bne.n	800443c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	431a      	orrs	r2, r3
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 800443a:	e007      	b.n	800444c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	431a      	orrs	r2, r3
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	601a      	str	r2, [r3, #0]
}
 800444c:	bf00      	nop
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	58026000 	.word	0x58026000

0800445c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004470:	2301      	movs	r3, #1
 8004472:	e000      	b.n	8004476 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004482:	b480      	push	{r7}
 8004484:	b087      	sub	sp, #28
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3330      	adds	r3, #48	@ 0x30
 8004492:	461a      	mov	r2, r3
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	f003 030c 	and.w	r3, r3, #12
 800449e:	4413      	add	r3, r2
 80044a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	211f      	movs	r1, #31
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	43db      	mvns	r3, r3
 80044b4:	401a      	ands	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0e9b      	lsrs	r3, r3, #26
 80044ba:	f003 011f 	and.w	r1, r3, #31
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f003 031f 	and.w	r3, r3, #31
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	431a      	orrs	r2, r3
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80044da:	b480      	push	{r7}
 80044dc:	b083      	sub	sp, #12
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f023 0203 	bic.w	r2, r3, #3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	60da      	str	r2, [r3, #12]
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	f043 0201 	orr.w	r2, r3, #1
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a08      	ldr	r2, [pc, #32]	@ (8004550 <LL_ADC_REG_SetDMATransferMode+0x30>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d107      	bne.n	8004542 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f023 0203 	bic.w	r2, r3, #3
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	431a      	orrs	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60da      	str	r2, [r3, #12]
  }
}
 8004542:	bf00      	nop
 8004544:	370c      	adds	r7, #12
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	58026000 	.word	0x58026000

08004554 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	3314      	adds	r3, #20
 8004564:	461a      	mov	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	0e5b      	lsrs	r3, r3, #25
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	4413      	add	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	0d1b      	lsrs	r3, r3, #20
 800457c:	f003 031f 	and.w	r3, r3, #31
 8004580:	2107      	movs	r1, #7
 8004582:	fa01 f303 	lsl.w	r3, r1, r3
 8004586:	43db      	mvns	r3, r3
 8004588:	401a      	ands	r2, r3
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	0d1b      	lsrs	r3, r3, #20
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	6879      	ldr	r1, [r7, #4]
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	431a      	orrs	r2, r3
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
	...

080045ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b085      	sub	sp, #20
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	4a1a      	ldr	r2, [pc, #104]	@ (8004624 <LL_ADC_SetChannelSingleDiff+0x78>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d115      	bne.n	80045ec <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045cc:	43db      	mvns	r3, r3
 80045ce:	401a      	ands	r2, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0318 	and.w	r3, r3, #24
 80045d6:	4914      	ldr	r1, [pc, #80]	@ (8004628 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80045d8:	40d9      	lsrs	r1, r3
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	400b      	ands	r3, r1
 80045de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045e2:	431a      	orrs	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80045ea:	e014      	b.n	8004616 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045f8:	43db      	mvns	r3, r3
 80045fa:	401a      	ands	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f003 0318 	and.w	r3, r3, #24
 8004602:	4909      	ldr	r1, [pc, #36]	@ (8004628 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004604:	40d9      	lsrs	r1, r3
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	400b      	ands	r3, r1
 800460a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800460e:	431a      	orrs	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	58026000 	.word	0x58026000
 8004628:	000fffff 	.word	0x000fffff

0800462c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 031f 	and.w	r3, r3, #31
}
 800463c:	4618      	mov	r0, r3
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689a      	ldr	r2, [r3, #8]
 8004654:	4b04      	ldr	r3, [pc, #16]	@ (8004668 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004656:	4013      	ands	r3, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6093      	str	r3, [r2, #8]
}
 800465c:	bf00      	nop
 800465e:	370c      	adds	r7, #12
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr
 8004668:	5fffffc0 	.word	0x5fffffc0

0800466c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800467c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004680:	d101      	bne.n	8004686 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	370c      	adds	r7, #12
 800468c:	46bd      	mov	sp, r7
 800468e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004692:	4770      	bx	lr

08004694 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	4b05      	ldr	r3, [pc, #20]	@ (80046b8 <LL_ADC_EnableInternalRegulator+0x24>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	6fffffc0 	.word	0x6fffffc0

080046bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046d0:	d101      	bne.n	80046d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	4b05      	ldr	r3, [pc, #20]	@ (8004708 <LL_ADC_Enable+0x24>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	7fffffc0 	.word	0x7fffffc0

0800470c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <LL_ADC_Disable+0x24>)
 800471a:	4013      	ands	r3, r2
 800471c:	f043 0202 	orr.w	r2, r3, #2
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	7fffffc0 	.word	0x7fffffc0

08004734 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b01      	cmp	r3, #1
 8004746:	d101      	bne.n	800474c <LL_ADC_IsEnabled+0x18>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <LL_ADC_IsEnabled+0x1a>
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d101      	bne.n	8004772 <LL_ADC_IsDisableOngoing+0x18>
 800476e:	2301      	movs	r3, #1
 8004770:	e000      	b.n	8004774 <LL_ADC_IsDisableOngoing+0x1a>
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	4b05      	ldr	r3, [pc, #20]	@ (80047a4 <LL_ADC_REG_StartConversion+0x24>)
 800478e:	4013      	ands	r3, r2
 8004790:	f043 0204 	orr.w	r2, r3, #4
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr
 80047a4:	7fffffc0 	.word	0x7fffffc0

080047a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d101      	bne.n	80047c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	370c      	adds	r7, #12
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0308 	and.w	r3, r3, #8
 80047de:	2b08      	cmp	r3, #8
 80047e0:	d101      	bne.n	80047e6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047f4:	b590      	push	{r4, r7, lr}
 80047f6:	b089      	sub	sp, #36	@ 0x24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004800:	2300      	movs	r3, #0
 8004802:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e1ee      	b.n	8004bec <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f7fe f9a1 	bl	8002b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4618      	mov	r0, r3
 8004836:	f7ff ff19 	bl	800466c <LL_ADC_IsDeepPowerDownEnabled>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f7ff feff 	bl	8004648 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7ff ff34 	bl	80046bc <LL_ADC_IsInternalRegulatorEnabled>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d114      	bne.n	8004884 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f7ff ff18 	bl	8004694 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004864:	4b8e      	ldr	r3, [pc, #568]	@ (8004aa0 <HAL_ADC_Init+0x2ac>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	099b      	lsrs	r3, r3, #6
 800486a:	4a8e      	ldr	r2, [pc, #568]	@ (8004aa4 <HAL_ADC_Init+0x2b0>)
 800486c:	fba2 2303 	umull	r2, r3, r2, r3
 8004870:	099b      	lsrs	r3, r3, #6
 8004872:	3301      	adds	r3, #1
 8004874:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004876:	e002      	b.n	800487e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	3b01      	subs	r3, #1
 800487c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d1f9      	bne.n	8004878 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f7ff ff17 	bl	80046bc <LL_ADC_IsInternalRegulatorEnabled>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10d      	bne.n	80048b0 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004898:	f043 0210 	orr.w	r2, r3, #16
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048a4:	f043 0201 	orr.w	r2, r3, #1
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	665a      	str	r2, [r3, #100]	@ 0x64

    tmp_hal_status = HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ff77 	bl	80047a8 <LL_ADC_REG_IsConversionOngoing>
 80048ba:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048c0:	f003 0310 	and.w	r3, r3, #16
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f040 8188 	bne.w	8004bda <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f040 8184 	bne.w	8004bda <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048d6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80048da:	f043 0202 	orr.w	r2, r3, #2
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff ff24 	bl	8004734 <LL_ADC_IsEnabled>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d136      	bne.n	8004960 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a6c      	ldr	r2, [pc, #432]	@ (8004aa8 <HAL_ADC_Init+0x2b4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d004      	beq.n	8004906 <HAL_ADC_Init+0x112>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a6a      	ldr	r2, [pc, #424]	@ (8004aac <HAL_ADC_Init+0x2b8>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d10e      	bne.n	8004924 <HAL_ADC_Init+0x130>
 8004906:	4868      	ldr	r0, [pc, #416]	@ (8004aa8 <HAL_ADC_Init+0x2b4>)
 8004908:	f7ff ff14 	bl	8004734 <LL_ADC_IsEnabled>
 800490c:	4604      	mov	r4, r0
 800490e:	4867      	ldr	r0, [pc, #412]	@ (8004aac <HAL_ADC_Init+0x2b8>)
 8004910:	f7ff ff10 	bl	8004734 <LL_ADC_IsEnabled>
 8004914:	4603      	mov	r3, r0
 8004916:	4323      	orrs	r3, r4
 8004918:	2b00      	cmp	r3, #0
 800491a:	bf0c      	ite	eq
 800491c:	2301      	moveq	r3, #1
 800491e:	2300      	movne	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	e008      	b.n	8004936 <HAL_ADC_Init+0x142>
 8004924:	4862      	ldr	r0, [pc, #392]	@ (8004ab0 <HAL_ADC_Init+0x2bc>)
 8004926:	f7ff ff05 	bl	8004734 <LL_ADC_IsEnabled>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	bf0c      	ite	eq
 8004930:	2301      	moveq	r3, #1
 8004932:	2300      	movne	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d012      	beq.n	8004960 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a5a      	ldr	r2, [pc, #360]	@ (8004aa8 <HAL_ADC_Init+0x2b4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d004      	beq.n	800494e <HAL_ADC_Init+0x15a>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a58      	ldr	r2, [pc, #352]	@ (8004aac <HAL_ADC_Init+0x2b8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d101      	bne.n	8004952 <HAL_ADC_Init+0x15e>
 800494e:	4a59      	ldr	r2, [pc, #356]	@ (8004ab4 <HAL_ADC_Init+0x2c0>)
 8004950:	e000      	b.n	8004954 <HAL_ADC_Init+0x160>
 8004952:	4a59      	ldr	r2, [pc, #356]	@ (8004ab8 <HAL_ADC_Init+0x2c4>)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f7ff fc58 	bl	8004210 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a52      	ldr	r2, [pc, #328]	@ (8004ab0 <HAL_ADC_Init+0x2bc>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d129      	bne.n	80049be <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	7e5b      	ldrb	r3, [r3, #25]
 800496e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004974:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800497a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	2b08      	cmp	r3, #8
 8004982:	d013      	beq.n	80049ac <HAL_ADC_Init+0x1b8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d00d      	beq.n	80049a8 <HAL_ADC_Init+0x1b4>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2b1c      	cmp	r3, #28
 8004992:	d007      	beq.n	80049a4 <HAL_ADC_Init+0x1b0>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	2b18      	cmp	r3, #24
 800499a:	d101      	bne.n	80049a0 <HAL_ADC_Init+0x1ac>
 800499c:	2318      	movs	r3, #24
 800499e:	e006      	b.n	80049ae <HAL_ADC_Init+0x1ba>
 80049a0:	2300      	movs	r3, #0
 80049a2:	e004      	b.n	80049ae <HAL_ADC_Init+0x1ba>
 80049a4:	2310      	movs	r3, #16
 80049a6:	e002      	b.n	80049ae <HAL_ADC_Init+0x1ba>
 80049a8:	2308      	movs	r3, #8
 80049aa:	e000      	b.n	80049ae <HAL_ADC_Init+0x1ba>
 80049ac:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80049ae:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049b6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80049b8:	4313      	orrs	r3, r2
 80049ba:	61bb      	str	r3, [r7, #24]
 80049bc:	e00e      	b.n	80049dc <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	7e5b      	ldrb	r3, [r3, #25]
 80049c2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049c8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80049ce:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049d6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80049d8:	4313      	orrs	r3, r2
 80049da:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049e2:	2b01      	cmp	r3, #1
 80049e4:	d106      	bne.n	80049f4 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	3b01      	subs	r3, #1
 80049ec:	045b      	lsls	r3, r3, #17
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d009      	beq.n	8004a10 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a00:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a08:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a26      	ldr	r2, [pc, #152]	@ (8004ab0 <HAL_ADC_Init+0x2bc>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d115      	bne.n	8004a46 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	4b26      	ldr	r3, [pc, #152]	@ (8004abc <HAL_ADC_Init+0x2c8>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6812      	ldr	r2, [r2, #0]
 8004a28:	69b9      	ldr	r1, [r7, #24]
 8004a2a:	430b      	orrs	r3, r1
 8004a2c:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	611a      	str	r2, [r3, #16]
 8004a44:	e009      	b.n	8004a5a <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004ac0 <HAL_ADC_Init+0x2cc>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	69b9      	ldr	r1, [r7, #24]
 8004a56:	430b      	orrs	r3, r1
 8004a58:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fea2 	bl	80047a8 <LL_ADC_REG_IsConversionOngoing>
 8004a64:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7ff feaf 	bl	80047ce <LL_ADC_INJ_IsConversionOngoing>
 8004a70:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f040 808e 	bne.w	8004b96 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f040 808a 	bne.w	8004b96 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a0a      	ldr	r2, [pc, #40]	@ (8004ab0 <HAL_ADC_Init+0x2bc>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d11b      	bne.n	8004ac4 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	7e1b      	ldrb	r3, [r3, #24]
 8004a90:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a98:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
 8004a9e:	e018      	b.n	8004ad2 <HAL_ADC_Init+0x2de>
 8004aa0:	24000000 	.word	0x24000000
 8004aa4:	053e2d63 	.word	0x053e2d63
 8004aa8:	40022000 	.word	0x40022000
 8004aac:	40022100 	.word	0x40022100
 8004ab0:	58026000 	.word	0x58026000
 8004ab4:	40022300 	.word	0x40022300
 8004ab8:	58026300 	.word	0x58026300
 8004abc:	fff04007 	.word	0xfff04007
 8004ac0:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	7e1b      	ldrb	r3, [r3, #24]
 8004ac8:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        tmpCFGR = (
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68da      	ldr	r2, [r3, #12]
 8004ad8:	4b46      	ldr	r3, [pc, #280]	@ (8004bf4 <HAL_ADC_Init+0x400>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	69b9      	ldr	r1, [r7, #24]
 8004ae2:	430b      	orrs	r3, r1
 8004ae4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d137      	bne.n	8004b60 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004af4:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a3f      	ldr	r2, [pc, #252]	@ (8004bf8 <HAL_ADC_Init+0x404>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d116      	bne.n	8004b2e <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	4b3d      	ldr	r3, [pc, #244]	@ (8004bfc <HAL_ADC_Init+0x408>)
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6c91      	ldr	r1, [r2, #72]	@ 0x48
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b12:	4311      	orrs	r1, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b18:	4311      	orrs	r1, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	431a      	orrs	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	611a      	str	r2, [r3, #16]
 8004b2c:	e020      	b.n	8004b70 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	4b32      	ldr	r3, [pc, #200]	@ (8004c00 <HAL_ADC_Init+0x40c>)
 8004b36:	4013      	ands	r3, r2
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b3c:	3a01      	subs	r2, #1
 8004b3e:	0411      	lsls	r1, r2, #16
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004b44:	4311      	orrs	r1, r2
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b4a:	4311      	orrs	r1, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004b50:	430a      	orrs	r2, r1
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0201 	orr.w	r2, r2, #1
 8004b5c:	611a      	str	r2, [r3, #16]
 8004b5e:	e007      	b.n	8004b70 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	691a      	ldr	r2, [r3, #16]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f022 0201 	bic.w	r2, r2, #1
 8004b6e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8004bf8 <HAL_ADC_Init+0x404>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d002      	beq.n	8004b96 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 ffdf 	bl	8005b54 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d10c      	bne.n	8004bb8 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba4:	f023 010f 	bic.w	r1, r3, #15
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	1e5a      	subs	r2, r3, #1
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	631a      	str	r2, [r3, #48]	@ 0x30
 8004bb6:	e007      	b.n	8004bc8 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 020f 	bic.w	r2, r2, #15
 8004bc6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bcc:	f023 0303 	bic.w	r3, r3, #3
 8004bd0:	f043 0201 	orr.w	r2, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	661a      	str	r2, [r3, #96]	@ 0x60
 8004bd8:	e007      	b.n	8004bea <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bde:	f043 0210 	orr.w	r2, r3, #16
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004bea:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3724      	adds	r7, #36	@ 0x24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd90      	pop	{r4, r7, pc}
 8004bf4:	ffffbffc 	.word	0xffffbffc
 8004bf8:	58026000 	.word	0x58026000
 8004bfc:	fc00f81f 	.word	0xfc00f81f
 8004c00:	fc00f81e 	.word	0xfc00f81e

08004c04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b086      	sub	sp, #24
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a60      	ldr	r2, [pc, #384]	@ (8004d98 <HAL_ADC_Start_DMA+0x194>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_ADC_Start_DMA+0x20>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8004d9c <HAL_ADC_Start_DMA+0x198>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_Start_DMA+0x24>
 8004c24:	4b5e      	ldr	r3, [pc, #376]	@ (8004da0 <HAL_ADC_Start_DMA+0x19c>)
 8004c26:	e000      	b.n	8004c2a <HAL_ADC_Start_DMA+0x26>
 8004c28:	4b5e      	ldr	r3, [pc, #376]	@ (8004da4 <HAL_ADC_Start_DMA+0x1a0>)
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f7ff fcfe 	bl	800462c <LL_ADC_GetMultimode>
 8004c30:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7ff fdb6 	bl	80047a8 <LL_ADC_REG_IsConversionOngoing>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f040 80a2 	bne.w	8004d88 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_ADC_Start_DMA+0x4e>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e09d      	b.n	8004d8e <HAL_ADC_Start_DMA+0x18a>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d006      	beq.n	8004c6e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b05      	cmp	r3, #5
 8004c64:	d003      	beq.n	8004c6e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b09      	cmp	r3, #9
 8004c6a:	f040 8086 	bne.w	8004d7a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fdf2 	bl	8005858 <ADC_Enable>
 8004c74:	4603      	mov	r3, r0
 8004c76:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004c78:	7dfb      	ldrb	r3, [r7, #23]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d178      	bne.n	8004d70 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c82:	4b49      	ldr	r3, [pc, #292]	@ (8004da8 <HAL_ADC_Start_DMA+0x1a4>)
 8004c84:	4013      	ands	r3, r2
 8004c86:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a42      	ldr	r2, [pc, #264]	@ (8004d9c <HAL_ADC_Start_DMA+0x198>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d002      	beq.n	8004c9e <HAL_ADC_Start_DMA+0x9a>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	e000      	b.n	8004ca0 <HAL_ADC_Start_DMA+0x9c>
 8004c9e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d98 <HAL_ADC_Start_DMA+0x194>)
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d002      	beq.n	8004cae <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cb2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d006      	beq.n	8004cd4 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cca:	f023 0206 	bic.w	r2, r3, #6
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	665a      	str	r2, [r3, #100]	@ 0x64
 8004cd2:	e002      	b.n	8004cda <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cde:	4a33      	ldr	r2, [pc, #204]	@ (8004dac <HAL_ADC_Start_DMA+0x1a8>)
 8004ce0:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ce6:	4a32      	ldr	r2, [pc, #200]	@ (8004db0 <HAL_ADC_Start_DMA+0x1ac>)
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cee:	4a31      	ldr	r2, [pc, #196]	@ (8004db4 <HAL_ADC_Start_DMA+0x1b0>)
 8004cf0:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	221c      	movs	r2, #28
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f042 0210 	orr.w	r2, r2, #16
 8004d10:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a28      	ldr	r2, [pc, #160]	@ (8004db8 <HAL_ADC_Start_DMA+0x1b4>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d10f      	bne.n	8004d3c <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f7ff fbf8 	bl	8004520 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f7ff fbe3 	bl	8004500 <LL_ADC_EnableDMAReq>
 8004d3a:	e007      	b.n	8004d4c <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d44:	4619      	mov	r1, r3
 8004d46:	4610      	mov	r0, r2
 8004d48:	f7ff fbc7 	bl	80044da <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	3340      	adds	r3, #64	@ 0x40
 8004d56:	4619      	mov	r1, r3
 8004d58:	68ba      	ldr	r2, [r7, #8]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f001 fdf0 	bl	8006940 <HAL_DMA_Start_IT>
 8004d60:	4603      	mov	r3, r0
 8004d62:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff fd09 	bl	8004780 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004d6e:	e00d      	b.n	8004d8c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
      if (tmp_hal_status == HAL_OK)
 8004d78:	e008      	b.n	8004d8c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004d86:	e001      	b.n	8004d8c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40022000 	.word	0x40022000
 8004d9c:	40022100 	.word	0x40022100
 8004da0:	40022300 	.word	0x40022300
 8004da4:	58026300 	.word	0x58026300
 8004da8:	fffff0fe 	.word	0xfffff0fe
 8004dac:	08005a2b 	.word	0x08005a2b
 8004db0:	08005b03 	.word	0x08005b03
 8004db4:	08005b1f 	.word	0x08005b1f
 8004db8:	58026000 	.word	0x58026000

08004dbc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b0b9      	sub	sp, #228	@ 0xe4
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e02:	2300      	movs	r3, #0
 8004e04:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e12:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4aab      	ldr	r2, [pc, #684]	@ (80050c8 <HAL_ADC_ConfigChannel+0x2d0>)
 8004e1a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d102      	bne.n	8004e2c <HAL_ADC_ConfigChannel+0x34>
 8004e26:	2302      	movs	r3, #2
 8004e28:	f000 bcfe 	b.w	8005828 <HAL_ADC_ConfigChannel+0xa30>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff fcb5 	bl	80047a8 <LL_ADC_REG_IsConversionOngoing>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	f040 84e2 	bne.w	800580a <HAL_ADC_ConfigChannel+0xa12>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	db38      	blt.n	8004ec0 <HAL_ADC_ConfigChannel+0xc8>
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a9e      	ldr	r2, [pc, #632]	@ (80050cc <HAL_ADC_ConfigChannel+0x2d4>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d033      	beq.n	8004ec0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d108      	bne.n	8004e76 <HAL_ADC_ConfigChannel+0x7e>
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	0e9b      	lsrs	r3, r3, #26
 8004e6a:	f003 031f 	and.w	r3, r3, #31
 8004e6e:	2201      	movs	r2, #1
 8004e70:	fa02 f303 	lsl.w	r3, r2, r3
 8004e74:	e01d      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0xba>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e82:	fa93 f3a3 	rbit	r3, r3
 8004e86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004e8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004e92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_ADC_ConfigChannel+0xa6>
  {
    return 32U;
 8004e9a:	2320      	movs	r3, #32
 8004e9c:	e004      	b.n	8004ea8 <HAL_ADC_ConfigChannel+0xb0>
  }
  return __builtin_clz(value);
 8004e9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ea2:	fab3 f383 	clz	r3, r3
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f003 031f 	and.w	r3, r3, #31
 8004eac:	2201      	movs	r2, #1
 8004eae:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	69d1      	ldr	r1, [r2, #28]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	61d3      	str	r3, [r2, #28]
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6818      	ldr	r0, [r3, #0]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	461a      	mov	r2, r3
 8004ece:	f7ff fad8 	bl	8004482 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7ff fc66 	bl	80047a8 <LL_ADC_REG_IsConversionOngoing>
 8004edc:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f7ff fc72 	bl	80047ce <LL_ADC_INJ_IsConversionOngoing>
 8004eea:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f040 8270 	bne.w	80053d8 <HAL_ADC_ConfigChannel+0x5e0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ef8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 826b 	bne.w	80053d8 <HAL_ADC_ConfigChannel+0x5e0>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6818      	ldr	r0, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	f7ff fb20 	bl	8004554 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a6c      	ldr	r2, [pc, #432]	@ (80050cc <HAL_ADC_ConfigChannel+0x2d4>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d10d      	bne.n	8004f3a <HAL_ADC_ConfigChannel+0x142>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	695a      	ldr	r2, [r3, #20]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	08db      	lsrs	r3, r3, #3
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004f38:	e032      	b.n	8004fa0 <HAL_ADC_ConfigChannel+0x1a8>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004f3a:	4b65      	ldr	r3, [pc, #404]	@ (80050d0 <HAL_ADC_ConfigChannel+0x2d8>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004f42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f46:	d10b      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x168>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	695a      	ldr	r2, [r3, #20]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	089b      	lsrs	r3, r3, #2
 8004f54:	f003 0307 	and.w	r3, r3, #7
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	e01d      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x1a4>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10b      	bne.n	8004f86 <HAL_ADC_ConfigChannel+0x18e>
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	695a      	ldr	r2, [r3, #20]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	089b      	lsrs	r3, r3, #2
 8004f7a:	f003 0307 	and.w	r3, r3, #7
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	e00a      	b.n	8004f9c <HAL_ADC_ConfigChannel+0x1a4>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	089b      	lsrs	r3, r3, #2
 8004f92:	f003 0304 	and.w	r3, r3, #4
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d048      	beq.n	800503a <HAL_ADC_ConfigChannel+0x242>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6818      	ldr	r0, [r3, #0]
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	6919      	ldr	r1, [r3, #16]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fb8:	f7ff f95e 	bl	8004278 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a42      	ldr	r2, [pc, #264]	@ (80050cc <HAL_ADC_ConfigChannel+0x2d4>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d119      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x202>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6919      	ldr	r1, [r3, #16]
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f7ff f9f6 	bl	80043c4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	6919      	ldr	r1, [r3, #16]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d102      	bne.n	8004ff0 <HAL_ADC_ConfigChannel+0x1f8>
 8004fea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fee:	e000      	b.n	8004ff2 <HAL_ADC_ConfigChannel+0x1fa>
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f7ff f9c4 	bl	8004380 <LL_ADC_SetOffsetSaturation>
 8004ff8:	e1ee      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x5e0>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6919      	ldr	r1, [r3, #16]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005008:	2b01      	cmp	r3, #1
 800500a:	d102      	bne.n	8005012 <HAL_ADC_ConfigChannel+0x21a>
 800500c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005010:	e000      	b.n	8005014 <HAL_ADC_ConfigChannel+0x21c>
 8005012:	2300      	movs	r3, #0
 8005014:	461a      	mov	r2, r3
 8005016:	f7ff f991 	bl	800433c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6919      	ldr	r1, [r3, #16]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	7e1b      	ldrb	r3, [r3, #24]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d102      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x238>
 800502a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800502e:	e000      	b.n	8005032 <HAL_ADC_ConfigChannel+0x23a>
 8005030:	2300      	movs	r3, #0
 8005032:	461a      	mov	r2, r3
 8005034:	f7ff f968 	bl	8004308 <LL_ADC_SetDataRightShift>
 8005038:	e1ce      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x5e0>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a23      	ldr	r2, [pc, #140]	@ (80050cc <HAL_ADC_ConfigChannel+0x2d4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	f040 8181 	bne.w	8005348 <HAL_ADC_ConfigChannel+0x550>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2100      	movs	r1, #0
 800504c:	4618      	mov	r0, r3
 800504e:	f7ff f945 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8005052:	4603      	mov	r3, r0
 8005054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005058:	2b00      	cmp	r3, #0
 800505a:	d10a      	bne.n	8005072 <HAL_ADC_ConfigChannel+0x27a>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff f93a 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8005068:	4603      	mov	r3, r0
 800506a:	0e9b      	lsrs	r3, r3, #26
 800506c:	f003 021f 	and.w	r2, r3, #31
 8005070:	e01e      	b.n	80050b0 <HAL_ADC_ConfigChannel+0x2b8>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f7ff f92f 	bl	80042dc <LL_ADC_GetOffsetChannel>
 800507e:	4603      	mov	r3, r0
 8005080:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005084:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005088:	fa93 f3a3 	rbit	r3, r3
 800508c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  return result;
 8005090:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005094:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (value == 0U)
 8005098:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_ADC_ConfigChannel+0x2ac>
    return 32U;
 80050a0:	2320      	movs	r3, #32
 80050a2:	e004      	b.n	80050ae <HAL_ADC_ConfigChannel+0x2b6>
  return __builtin_clz(value);
 80050a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80050a8:	fab3 f383 	clz	r3, r3
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	461a      	mov	r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <HAL_ADC_ConfigChannel+0x2dc>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	0e9b      	lsrs	r3, r3, #26
 80050c2:	f003 031f 	and.w	r3, r3, #31
 80050c6:	e01e      	b.n	8005106 <HAL_ADC_ConfigChannel+0x30e>
 80050c8:	47ff0000 	.word	0x47ff0000
 80050cc:	58026000 	.word	0x58026000
 80050d0:	5c001000 	.word	0x5c001000
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80050e0:	fa93 f3a3 	rbit	r3, r3
 80050e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 80050e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80050ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80050f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 80050f8:	2320      	movs	r3, #32
 80050fa:	e004      	b.n	8005106 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 80050fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005100:	fab3 f383 	clz	r3, r3
 8005104:	b2db      	uxtb	r3, r3
 8005106:	429a      	cmp	r2, r3
 8005108:	d106      	bne.n	8005118 <HAL_ADC_ConfigChannel+0x320>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2200      	movs	r2, #0
 8005110:	2100      	movs	r1, #0
 8005112:	4618      	mov	r0, r3
 8005114:	f7ff f978 	bl	8004408 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2101      	movs	r1, #1
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff f8dc 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8005124:	4603      	mov	r3, r0
 8005126:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <HAL_ADC_ConfigChannel+0x34c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2101      	movs	r1, #1
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff f8d1 	bl	80042dc <LL_ADC_GetOffsetChannel>
 800513a:	4603      	mov	r3, r0
 800513c:	0e9b      	lsrs	r3, r3, #26
 800513e:	f003 021f 	and.w	r2, r3, #31
 8005142:	e01e      	b.n	8005182 <HAL_ADC_ConfigChannel+0x38a>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2101      	movs	r1, #1
 800514a:	4618      	mov	r0, r3
 800514c:	f7ff f8c6 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8005150:	4603      	mov	r3, r0
 8005152:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800515a:	fa93 f3a3 	rbit	r3, r3
 800515e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8005162:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005166:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800516a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_ADC_ConfigChannel+0x37e>
    return 32U;
 8005172:	2320      	movs	r3, #32
 8005174:	e004      	b.n	8005180 <HAL_ADC_ConfigChannel+0x388>
  return __builtin_clz(value);
 8005176:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800517a:	fab3 f383 	clz	r3, r3
 800517e:	b2db      	uxtb	r3, r3
 8005180:	461a      	mov	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800518a:	2b00      	cmp	r3, #0
 800518c:	d105      	bne.n	800519a <HAL_ADC_ConfigChannel+0x3a2>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	0e9b      	lsrs	r3, r3, #26
 8005194:	f003 031f 	and.w	r3, r3, #31
 8005198:	e018      	b.n	80051cc <HAL_ADC_ConfigChannel+0x3d4>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80051a6:	fa93 f3a3 	rbit	r3, r3
 80051aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80051ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80051b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80051b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_ADC_ConfigChannel+0x3ca>
    return 32U;
 80051be:	2320      	movs	r3, #32
 80051c0:	e004      	b.n	80051cc <HAL_ADC_ConfigChannel+0x3d4>
  return __builtin_clz(value);
 80051c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051c6:	fab3 f383 	clz	r3, r3
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d106      	bne.n	80051de <HAL_ADC_ConfigChannel+0x3e6>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2200      	movs	r2, #0
 80051d6:	2101      	movs	r1, #1
 80051d8:	4618      	mov	r0, r3
 80051da:	f7ff f915 	bl	8004408 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2102      	movs	r1, #2
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7ff f879 	bl	80042dc <LL_ADC_GetOffsetChannel>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10a      	bne.n	800520a <HAL_ADC_ConfigChannel+0x412>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2102      	movs	r1, #2
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7ff f86e 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8005200:	4603      	mov	r3, r0
 8005202:	0e9b      	lsrs	r3, r3, #26
 8005204:	f003 021f 	and.w	r2, r3, #31
 8005208:	e01e      	b.n	8005248 <HAL_ADC_ConfigChannel+0x450>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2102      	movs	r1, #2
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff f863 	bl	80042dc <LL_ADC_GetOffsetChannel>
 8005216:	4603      	mov	r3, r0
 8005218:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800521c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005220:	fa93 f3a3 	rbit	r3, r3
 8005224:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8005228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800522c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8005230:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <HAL_ADC_ConfigChannel+0x444>
    return 32U;
 8005238:	2320      	movs	r3, #32
 800523a:	e004      	b.n	8005246 <HAL_ADC_ConfigChannel+0x44e>
  return __builtin_clz(value);
 800523c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005240:	fab3 f383 	clz	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	461a      	mov	r2, r3
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005250:	2b00      	cmp	r3, #0
 8005252:	d105      	bne.n	8005260 <HAL_ADC_ConfigChannel+0x468>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	0e9b      	lsrs	r3, r3, #26
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	e014      	b.n	800528a <HAL_ADC_ConfigChannel+0x492>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005266:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005268:	fa93 f3a3 	rbit	r3, r3
 800526c:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800526e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8005274:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800527c:	2320      	movs	r3, #32
 800527e:	e004      	b.n	800528a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8005280:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005284:	fab3 f383 	clz	r3, r3
 8005288:	b2db      	uxtb	r3, r3
 800528a:	429a      	cmp	r2, r3
 800528c:	d106      	bne.n	800529c <HAL_ADC_ConfigChannel+0x4a4>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	2102      	movs	r1, #2
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff f8b6 	bl	8004408 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2103      	movs	r1, #3
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7ff f81a 	bl	80042dc <LL_ADC_GetOffsetChannel>
 80052a8:	4603      	mov	r3, r0
 80052aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10a      	bne.n	80052c8 <HAL_ADC_ConfigChannel+0x4d0>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2103      	movs	r1, #3
 80052b8:	4618      	mov	r0, r3
 80052ba:	f7ff f80f 	bl	80042dc <LL_ADC_GetOffsetChannel>
 80052be:	4603      	mov	r3, r0
 80052c0:	0e9b      	lsrs	r3, r3, #26
 80052c2:	f003 021f 	and.w	r2, r3, #31
 80052c6:	e017      	b.n	80052f8 <HAL_ADC_ConfigChannel+0x500>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2103      	movs	r1, #3
 80052ce:	4618      	mov	r0, r3
 80052d0:	f7ff f804 	bl	80042dc <LL_ADC_GetOffsetChannel>
 80052d4:	4603      	mov	r3, r0
 80052d6:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80052da:	fa93 f3a3 	rbit	r3, r3
 80052de:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80052e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052e2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80052e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_ADC_ConfigChannel+0x4f6>
    return 32U;
 80052ea:	2320      	movs	r3, #32
 80052ec:	e003      	b.n	80052f6 <HAL_ADC_ConfigChannel+0x4fe>
  return __builtin_clz(value);
 80052ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052f0:	fab3 f383 	clz	r3, r3
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005300:	2b00      	cmp	r3, #0
 8005302:	d105      	bne.n	8005310 <HAL_ADC_ConfigChannel+0x518>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	0e9b      	lsrs	r3, r3, #26
 800530a:	f003 031f 	and.w	r3, r3, #31
 800530e:	e011      	b.n	8005334 <HAL_ADC_ConfigChannel+0x53c>
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005316:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005318:	fa93 f3a3 	rbit	r3, r3
 800531c:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800531e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005320:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8005322:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_ADC_ConfigChannel+0x534>
    return 32U;
 8005328:	2320      	movs	r3, #32
 800532a:	e003      	b.n	8005334 <HAL_ADC_ConfigChannel+0x53c>
  return __builtin_clz(value);
 800532c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800532e:	fab3 f383 	clz	r3, r3
 8005332:	b2db      	uxtb	r3, r3
 8005334:	429a      	cmp	r2, r3
 8005336:	d14f      	bne.n	80053d8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2200      	movs	r2, #0
 800533e:	2103      	movs	r1, #3
 8005340:	4618      	mov	r0, r3
 8005342:	f7ff f861 	bl	8004408 <LL_ADC_SetOffsetState>
 8005346:	e047      	b.n	80053d8 <HAL_ADC_ConfigChannel+0x5e0>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800534e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	069b      	lsls	r3, r3, #26
 8005358:	429a      	cmp	r2, r3
 800535a:	d107      	bne.n	800536c <HAL_ADC_ConfigChannel+0x574>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800536a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005372:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	069b      	lsls	r3, r3, #26
 800537c:	429a      	cmp	r2, r3
 800537e:	d107      	bne.n	8005390 <HAL_ADC_ConfigChannel+0x598>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800538e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	069b      	lsls	r3, r3, #26
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d107      	bne.n	80053b4 <HAL_ADC_ConfigChannel+0x5bc>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80053b2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	069b      	lsls	r3, r3, #26
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d107      	bne.n	80053d8 <HAL_ADC_ConfigChannel+0x5e0>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80053d6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff f9a9 	bl	8004734 <LL_ADC_IsEnabled>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f040 8219 	bne.w	800581c <HAL_ADC_ConfigChannel+0xa24>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6819      	ldr	r1, [r3, #0]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	461a      	mov	r2, r3
 80053f8:	f7ff f8d8 	bl	80045ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	4aa1      	ldr	r2, [pc, #644]	@ (8005688 <HAL_ADC_ConfigChannel+0x890>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f040 812e 	bne.w	8005664 <HAL_ADC_ConfigChannel+0x86c>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x638>
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	0e9b      	lsrs	r3, r3, #26
 800541e:	3301      	adds	r3, #1
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	2b09      	cmp	r3, #9
 8005426:	bf94      	ite	ls
 8005428:	2301      	movls	r3, #1
 800542a:	2300      	movhi	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	e019      	b.n	8005464 <HAL_ADC_ConfigChannel+0x66c>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005436:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005438:	fa93 f3a3 	rbit	r3, r3
 800543c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800543e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005440:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8005442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8005448:	2320      	movs	r3, #32
 800544a:	e003      	b.n	8005454 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800544c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800544e:	fab3 f383 	clz	r3, r3
 8005452:	b2db      	uxtb	r3, r3
 8005454:	3301      	adds	r3, #1
 8005456:	f003 031f 	and.w	r3, r3, #31
 800545a:	2b09      	cmp	r3, #9
 800545c:	bf94      	ite	ls
 800545e:	2301      	movls	r3, #1
 8005460:	2300      	movhi	r3, #0
 8005462:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005464:	2b00      	cmp	r3, #0
 8005466:	d079      	beq.n	800555c <HAL_ADC_ConfigChannel+0x764>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005470:	2b00      	cmp	r3, #0
 8005472:	d107      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x68c>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	0e9b      	lsrs	r3, r3, #26
 800547a:	3301      	adds	r3, #1
 800547c:	069b      	lsls	r3, r3, #26
 800547e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005482:	e015      	b.n	80054b0 <HAL_ADC_ConfigChannel+0x6b8>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800548a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800548c:	fa93 f3a3 	rbit	r3, r3
 8005490:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8005492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005494:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8005496:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 800549c:	2320      	movs	r3, #32
 800549e:	e003      	b.n	80054a8 <HAL_ADC_ConfigChannel+0x6b0>
  return __builtin_clz(value);
 80054a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054a2:	fab3 f383 	clz	r3, r3
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	3301      	adds	r3, #1
 80054aa:	069b      	lsls	r3, r3, #26
 80054ac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d109      	bne.n	80054d0 <HAL_ADC_ConfigChannel+0x6d8>
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	0e9b      	lsrs	r3, r3, #26
 80054c2:	3301      	adds	r3, #1
 80054c4:	f003 031f 	and.w	r3, r3, #31
 80054c8:	2101      	movs	r1, #1
 80054ca:	fa01 f303 	lsl.w	r3, r1, r3
 80054ce:	e017      	b.n	8005500 <HAL_ADC_ConfigChannel+0x708>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054d8:	fa93 f3a3 	rbit	r3, r3
 80054dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80054de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054e0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80054e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 80054e8:	2320      	movs	r3, #32
 80054ea:	e003      	b.n	80054f4 <HAL_ADC_ConfigChannel+0x6fc>
  return __builtin_clz(value);
 80054ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054ee:	fab3 f383 	clz	r3, r3
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	3301      	adds	r3, #1
 80054f6:	f003 031f 	and.w	r3, r3, #31
 80054fa:	2101      	movs	r1, #1
 80054fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005500:	ea42 0103 	orr.w	r1, r2, r3
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10a      	bne.n	8005526 <HAL_ADC_ConfigChannel+0x72e>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	0e9b      	lsrs	r3, r3, #26
 8005516:	3301      	adds	r3, #1
 8005518:	f003 021f 	and.w	r2, r3, #31
 800551c:	4613      	mov	r3, r2
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	4413      	add	r3, r2
 8005522:	051b      	lsls	r3, r3, #20
 8005524:	e018      	b.n	8005558 <HAL_ADC_ConfigChannel+0x760>
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552e:	fa93 f3a3 	rbit	r3, r3
 8005532:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8005534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005536:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8005538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_ADC_ConfigChannel+0x74a>
    return 32U;
 800553e:	2320      	movs	r3, #32
 8005540:	e003      	b.n	800554a <HAL_ADC_ConfigChannel+0x752>
  return __builtin_clz(value);
 8005542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005544:	fab3 f383 	clz	r3, r3
 8005548:	b2db      	uxtb	r3, r3
 800554a:	3301      	adds	r3, #1
 800554c:	f003 021f 	and.w	r2, r3, #31
 8005550:	4613      	mov	r3, r2
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	4413      	add	r3, r2
 8005556:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005558:	430b      	orrs	r3, r1
 800555a:	e07e      	b.n	800565a <HAL_ADC_ConfigChannel+0x862>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005564:	2b00      	cmp	r3, #0
 8005566:	d107      	bne.n	8005578 <HAL_ADC_ConfigChannel+0x780>
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	0e9b      	lsrs	r3, r3, #26
 800556e:	3301      	adds	r3, #1
 8005570:	069b      	lsls	r3, r3, #26
 8005572:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005576:	e015      	b.n	80055a4 <HAL_ADC_ConfigChannel+0x7ac>
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	fa93 f3a3 	rbit	r3, r3
 8005584:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8005586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d101      	bne.n	8005594 <HAL_ADC_ConfigChannel+0x79c>
    return 32U;
 8005590:	2320      	movs	r3, #32
 8005592:	e003      	b.n	800559c <HAL_ADC_ConfigChannel+0x7a4>
  return __builtin_clz(value);
 8005594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005596:	fab3 f383 	clz	r3, r3
 800559a:	b2db      	uxtb	r3, r3
 800559c:	3301      	adds	r3, #1
 800559e:	069b      	lsls	r3, r3, #26
 80055a0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d109      	bne.n	80055c4 <HAL_ADC_ConfigChannel+0x7cc>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	0e9b      	lsrs	r3, r3, #26
 80055b6:	3301      	adds	r3, #1
 80055b8:	f003 031f 	and.w	r3, r3, #31
 80055bc:	2101      	movs	r1, #1
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	e017      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x7fc>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	fa93 f3a3 	rbit	r3, r3
 80055d0:	61bb      	str	r3, [r7, #24]
  return result;
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_ADC_ConfigChannel+0x7e8>
    return 32U;
 80055dc:	2320      	movs	r3, #32
 80055de:	e003      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x7f0>
  return __builtin_clz(value);
 80055e0:	6a3b      	ldr	r3, [r7, #32]
 80055e2:	fab3 f383 	clz	r3, r3
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	3301      	adds	r3, #1
 80055ea:	f003 031f 	and.w	r3, r3, #31
 80055ee:	2101      	movs	r1, #1
 80055f0:	fa01 f303 	lsl.w	r3, r1, r3
 80055f4:	ea42 0103 	orr.w	r1, r2, r3
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10d      	bne.n	8005620 <HAL_ADC_ConfigChannel+0x828>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	0e9b      	lsrs	r3, r3, #26
 800560a:	3301      	adds	r3, #1
 800560c:	f003 021f 	and.w	r2, r3, #31
 8005610:	4613      	mov	r3, r2
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	4413      	add	r3, r2
 8005616:	3b1e      	subs	r3, #30
 8005618:	051b      	lsls	r3, r3, #20
 800561a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800561e:	e01b      	b.n	8005658 <HAL_ADC_ConfigChannel+0x860>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	fa93 f3a3 	rbit	r3, r3
 800562c:	60fb      	str	r3, [r7, #12]
  return result;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <HAL_ADC_ConfigChannel+0x844>
    return 32U;
 8005638:	2320      	movs	r3, #32
 800563a:	e003      	b.n	8005644 <HAL_ADC_ConfigChannel+0x84c>
  return __builtin_clz(value);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	fab3 f383 	clz	r3, r3
 8005642:	b2db      	uxtb	r3, r3
 8005644:	3301      	adds	r3, #1
 8005646:	f003 021f 	and.w	r2, r3, #31
 800564a:	4613      	mov	r3, r2
 800564c:	005b      	lsls	r3, r3, #1
 800564e:	4413      	add	r3, r2
 8005650:	3b1e      	subs	r3, #30
 8005652:	051b      	lsls	r3, r3, #20
 8005654:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005658:	430b      	orrs	r3, r1
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	6892      	ldr	r2, [r2, #8]
 800565e:	4619      	mov	r1, r3
 8005660:	f7fe ff78 	bl	8004554 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	f280 80d7 	bge.w	800581c <HAL_ADC_ConfigChannel+0xa24>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a06      	ldr	r2, [pc, #24]	@ (800568c <HAL_ADC_ConfigChannel+0x894>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d004      	beq.n	8005682 <HAL_ADC_ConfigChannel+0x88a>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a04      	ldr	r2, [pc, #16]	@ (8005690 <HAL_ADC_ConfigChannel+0x898>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d10a      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x8a0>
 8005682:	4b04      	ldr	r3, [pc, #16]	@ (8005694 <HAL_ADC_ConfigChannel+0x89c>)
 8005684:	e009      	b.n	800569a <HAL_ADC_ConfigChannel+0x8a2>
 8005686:	bf00      	nop
 8005688:	47ff0000 	.word	0x47ff0000
 800568c:	40022000 	.word	0x40022000
 8005690:	40022100 	.word	0x40022100
 8005694:	40022300 	.word	0x40022300
 8005698:	4b65      	ldr	r3, [pc, #404]	@ (8005830 <HAL_ADC_ConfigChannel+0xa38>)
 800569a:	4618      	mov	r0, r3
 800569c:	f7fe fdde 	bl	800425c <LL_ADC_GetCommonPathInternalCh>
 80056a0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a62      	ldr	r2, [pc, #392]	@ (8005834 <HAL_ADC_ConfigChannel+0xa3c>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_ADC_ConfigChannel+0x8c0>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a61      	ldr	r2, [pc, #388]	@ (8005838 <HAL_ADC_ConfigChannel+0xa40>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d10e      	bne.n	80056d6 <HAL_ADC_ConfigChannel+0x8de>
 80056b8:	485e      	ldr	r0, [pc, #376]	@ (8005834 <HAL_ADC_ConfigChannel+0xa3c>)
 80056ba:	f7ff f83b 	bl	8004734 <LL_ADC_IsEnabled>
 80056be:	4604      	mov	r4, r0
 80056c0:	485d      	ldr	r0, [pc, #372]	@ (8005838 <HAL_ADC_ConfigChannel+0xa40>)
 80056c2:	f7ff f837 	bl	8004734 <LL_ADC_IsEnabled>
 80056c6:	4603      	mov	r3, r0
 80056c8:	4323      	orrs	r3, r4
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	bf0c      	ite	eq
 80056ce:	2301      	moveq	r3, #1
 80056d0:	2300      	movne	r3, #0
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	e008      	b.n	80056e8 <HAL_ADC_ConfigChannel+0x8f0>
 80056d6:	4859      	ldr	r0, [pc, #356]	@ (800583c <HAL_ADC_ConfigChannel+0xa44>)
 80056d8:	f7ff f82c 	bl	8004734 <LL_ADC_IsEnabled>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bf0c      	ite	eq
 80056e2:	2301      	moveq	r3, #1
 80056e4:	2300      	movne	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 8084 	beq.w	80057f6 <HAL_ADC_ConfigChannel+0x9fe>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a53      	ldr	r2, [pc, #332]	@ (8005840 <HAL_ADC_ConfigChannel+0xa48>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d132      	bne.n	800575e <HAL_ADC_ConfigChannel+0x966>
 80056f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80056fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005700:	2b00      	cmp	r3, #0
 8005702:	d12c      	bne.n	800575e <HAL_ADC_ConfigChannel+0x966>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a4c      	ldr	r2, [pc, #304]	@ (800583c <HAL_ADC_ConfigChannel+0xa44>)
 800570a:	4293      	cmp	r3, r2
 800570c:	f040 8086 	bne.w	800581c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a47      	ldr	r2, [pc, #284]	@ (8005834 <HAL_ADC_ConfigChannel+0xa3c>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d004      	beq.n	8005724 <HAL_ADC_ConfigChannel+0x92c>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a46      	ldr	r2, [pc, #280]	@ (8005838 <HAL_ADC_ConfigChannel+0xa40>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d101      	bne.n	8005728 <HAL_ADC_ConfigChannel+0x930>
 8005724:	4a47      	ldr	r2, [pc, #284]	@ (8005844 <HAL_ADC_ConfigChannel+0xa4c>)
 8005726:	e000      	b.n	800572a <HAL_ADC_ConfigChannel+0x932>
 8005728:	4a41      	ldr	r2, [pc, #260]	@ (8005830 <HAL_ADC_ConfigChannel+0xa38>)
 800572a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800572e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f7fe fd7e 	bl	8004236 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800573a:	4b43      	ldr	r3, [pc, #268]	@ (8005848 <HAL_ADC_ConfigChannel+0xa50>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	099b      	lsrs	r3, r3, #6
 8005740:	4a42      	ldr	r2, [pc, #264]	@ (800584c <HAL_ADC_ConfigChannel+0xa54>)
 8005742:	fba2 2303 	umull	r2, r3, r2, r3
 8005746:	099b      	lsrs	r3, r3, #6
 8005748:	3301      	adds	r3, #1
 800574a:	005b      	lsls	r3, r3, #1
 800574c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800574e:	e002      	b.n	8005756 <HAL_ADC_ConfigChannel+0x95e>
              {
                wait_loop_index--;
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	3b01      	subs	r3, #1
 8005754:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f9      	bne.n	8005750 <HAL_ADC_ConfigChannel+0x958>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800575c:	e05e      	b.n	800581c <HAL_ADC_ConfigChannel+0xa24>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a3b      	ldr	r2, [pc, #236]	@ (8005850 <HAL_ADC_ConfigChannel+0xa58>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d120      	bne.n	80057aa <HAL_ADC_ConfigChannel+0x9b2>
 8005768:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800576c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11a      	bne.n	80057aa <HAL_ADC_ConfigChannel+0x9b2>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a30      	ldr	r2, [pc, #192]	@ (800583c <HAL_ADC_ConfigChannel+0xa44>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d14e      	bne.n	800581c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a2c      	ldr	r2, [pc, #176]	@ (8005834 <HAL_ADC_ConfigChannel+0xa3c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d004      	beq.n	8005792 <HAL_ADC_ConfigChannel+0x99a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a2a      	ldr	r2, [pc, #168]	@ (8005838 <HAL_ADC_ConfigChannel+0xa40>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <HAL_ADC_ConfigChannel+0x99e>
 8005792:	4a2c      	ldr	r2, [pc, #176]	@ (8005844 <HAL_ADC_ConfigChannel+0xa4c>)
 8005794:	e000      	b.n	8005798 <HAL_ADC_ConfigChannel+0x9a0>
 8005796:	4a26      	ldr	r2, [pc, #152]	@ (8005830 <HAL_ADC_ConfigChannel+0xa38>)
 8005798:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800579c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f7fe fd47 	bl	8004236 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057a8:	e038      	b.n	800581c <HAL_ADC_ConfigChannel+0xa24>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a29      	ldr	r2, [pc, #164]	@ (8005854 <HAL_ADC_ConfigChannel+0xa5c>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d133      	bne.n	800581c <HAL_ADC_ConfigChannel+0xa24>
 80057b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d12d      	bne.n	800581c <HAL_ADC_ConfigChannel+0xa24>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1d      	ldr	r2, [pc, #116]	@ (800583c <HAL_ADC_ConfigChannel+0xa44>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d128      	bne.n	800581c <HAL_ADC_ConfigChannel+0xa24>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a19      	ldr	r2, [pc, #100]	@ (8005834 <HAL_ADC_ConfigChannel+0xa3c>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d004      	beq.n	80057de <HAL_ADC_ConfigChannel+0x9e6>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a17      	ldr	r2, [pc, #92]	@ (8005838 <HAL_ADC_ConfigChannel+0xa40>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d101      	bne.n	80057e2 <HAL_ADC_ConfigChannel+0x9ea>
 80057de:	4a19      	ldr	r2, [pc, #100]	@ (8005844 <HAL_ADC_ConfigChannel+0xa4c>)
 80057e0:	e000      	b.n	80057e4 <HAL_ADC_ConfigChannel+0x9ec>
 80057e2:	4a13      	ldr	r2, [pc, #76]	@ (8005830 <HAL_ADC_ConfigChannel+0xa38>)
 80057e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80057e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057ec:	4619      	mov	r1, r3
 80057ee:	4610      	mov	r0, r2
 80057f0:	f7fe fd21 	bl	8004236 <LL_ADC_SetCommonPathInternalCh>
 80057f4:	e012      	b.n	800581c <HAL_ADC_ConfigChannel+0xa24>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057fa:	f043 0220 	orr.w	r2, r3, #32
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	661a      	str	r2, [r3, #96]	@ 0x60

          tmp_hal_status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 8005808:	e008      	b.n	800581c <HAL_ADC_ConfigChannel+0xa24>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800580e:	f043 0220 	orr.w	r2, r3, #32
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005824:	f897 30df 	ldrb.w	r3, [r7, #223]	@ 0xdf
}
 8005828:	4618      	mov	r0, r3
 800582a:	37e4      	adds	r7, #228	@ 0xe4
 800582c:	46bd      	mov	sp, r7
 800582e:	bd90      	pop	{r4, r7, pc}
 8005830:	58026300 	.word	0x58026300
 8005834:	40022000 	.word	0x40022000
 8005838:	40022100 	.word	0x40022100
 800583c:	58026000 	.word	0x58026000
 8005840:	c7520000 	.word	0xc7520000
 8005844:	40022300 	.word	0x40022300
 8005848:	24000000 	.word	0x24000000
 800584c:	053e2d63 	.word	0x053e2d63
 8005850:	c3210000 	.word	0xc3210000
 8005854:	cb840000 	.word	0xcb840000

08005858 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe ff65 	bl	8004734 <LL_ADC_IsEnabled>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d16e      	bne.n	800594e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	4b38      	ldr	r3, [pc, #224]	@ (8005958 <ADC_Enable+0x100>)
 8005878:	4013      	ands	r3, r2
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00d      	beq.n	800589a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005882:	f043 0210 	orr.w	r2, r3, #16
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800588e:	f043 0201 	orr.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	665a      	str	r2, [r3, #100]	@ 0x64

      return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e05a      	b.n	8005950 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fe ff20 	bl	80046e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80058a4:	f7fe fc84 	bl	80041b0 <HAL_GetTick>
 80058a8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a2b      	ldr	r2, [pc, #172]	@ (800595c <ADC_Enable+0x104>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <ADC_Enable+0x66>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a29      	ldr	r2, [pc, #164]	@ (8005960 <ADC_Enable+0x108>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d101      	bne.n	80058c2 <ADC_Enable+0x6a>
 80058be:	4b29      	ldr	r3, [pc, #164]	@ (8005964 <ADC_Enable+0x10c>)
 80058c0:	e000      	b.n	80058c4 <ADC_Enable+0x6c>
 80058c2:	4b29      	ldr	r3, [pc, #164]	@ (8005968 <ADC_Enable+0x110>)
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe feb1 	bl	800462c <LL_ADC_GetMultimode>
 80058ca:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a23      	ldr	r2, [pc, #140]	@ (8005960 <ADC_Enable+0x108>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d002      	beq.n	80058dc <ADC_Enable+0x84>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	e000      	b.n	80058de <ADC_Enable+0x86>
 80058dc:	4b1f      	ldr	r3, [pc, #124]	@ (800595c <ADC_Enable+0x104>)
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	6812      	ldr	r2, [r2, #0]
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d02c      	beq.n	8005940 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d130      	bne.n	800594e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058ec:	e028      	b.n	8005940 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe ff1e 	bl	8004734 <LL_ADC_IsEnabled>
 80058f8:	4603      	mov	r3, r0
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe feee 	bl	80046e4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005908:	f7fe fc52 	bl	80041b0 <HAL_GetTick>
 800590c:	4602      	mov	r2, r0
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	2b02      	cmp	r3, #2
 8005914:	d914      	bls.n	8005940 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0301 	and.w	r3, r3, #1
 8005920:	2b01      	cmp	r3, #1
 8005922:	d00d      	beq.n	8005940 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005928:	f043 0210 	orr.w	r2, r3, #16
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	661a      	str	r2, [r3, #96]	@ 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005934:	f043 0201 	orr.w	r2, r3, #1
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	665a      	str	r2, [r3, #100]	@ 0x64

            return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e007      	b.n	8005950 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b01      	cmp	r3, #1
 800594c:	d1cf      	bne.n	80058ee <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	8000003f 	.word	0x8000003f
 800595c:	40022000 	.word	0x40022000
 8005960:	40022100 	.word	0x40022100
 8005964:	40022300 	.word	0x40022300
 8005968:	58026300 	.word	0x58026300

0800596c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4618      	mov	r0, r3
 800597a:	f7fe feee 	bl	800475a <LL_ADC_IsDisableOngoing>
 800597e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f7fe fed5 	bl	8004734 <LL_ADC_IsEnabled>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d047      	beq.n	8005a20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d144      	bne.n	8005a20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f003 030d 	and.w	r3, r3, #13
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d10c      	bne.n	80059be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fe feaf 	bl	800470c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2203      	movs	r2, #3
 80059b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80059b6:	f7fe fbfb 	bl	80041b0 <HAL_GetTick>
 80059ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059bc:	e029      	b.n	8005a12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059c2:	f043 0210 	orr.w	r2, r3, #16
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	661a      	str	r2, [r3, #96]	@ 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80059ce:	f043 0201 	orr.w	r2, r3, #1
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	665a      	str	r2, [r3, #100]	@ 0x64
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e023      	b.n	8005a22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80059da:	f7fe fbe9 	bl	80041b0 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d914      	bls.n	8005a12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00d      	beq.n	8005a12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059fa:	f043 0210 	orr.w	r2, r3, #16
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	661a      	str	r2, [r3, #96]	@ 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a06:	f043 0201 	orr.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	665a      	str	r2, [r3, #100]	@ 0x64

          return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e007      	b.n	8005a22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1dc      	bne.n	80059da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d14b      	bne.n	8005adc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0308 	and.w	r3, r3, #8
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d021      	beq.n	8005aa2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fcfa 	bl	800445c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d032      	beq.n	8005ad4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d12b      	bne.n	8005ad4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	661a      	str	r2, [r3, #96]	@ 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d11f      	bne.n	8005ad4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a98:	f043 0201 	orr.w	r2, r3, #1
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005aa0:	e018      	b.n	8005ad4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	f003 0303 	and.w	r3, r3, #3
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d111      	bne.n	8005ad4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ab4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	661a      	str	r2, [r3, #96]	@ 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ac0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005acc:	f043 0201 	orr.w	r2, r3, #1
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f7ff f971 	bl	8004dbc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005ada:	e00e      	b.n	8005afa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff f97b 	bl	8004de4 <HAL_ADC_ErrorCallback>
}
 8005aee:	e004      	b.n	8005afa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	4798      	blx	r3
}
 8005afa:	bf00      	nop
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	f7ff f95d 	bl	8004dd0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}

08005b1e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b084      	sub	sp, #16
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b3c:	f043 0204 	orr.w	r2, r3, #4
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff f94d 	bl	8004de4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
	...

08005b54 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a6c      	ldr	r2, [pc, #432]	@ (8005d14 <ADC_ConfigureBoostMode+0x1c0>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d004      	beq.n	8005b70 <ADC_ConfigureBoostMode+0x1c>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a6b      	ldr	r2, [pc, #428]	@ (8005d18 <ADC_ConfigureBoostMode+0x1c4>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d109      	bne.n	8005b84 <ADC_ConfigureBoostMode+0x30>
 8005b70:	4b6a      	ldr	r3, [pc, #424]	@ (8005d1c <ADC_ConfigureBoostMode+0x1c8>)
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bf14      	ite	ne
 8005b7c:	2301      	movne	r3, #1
 8005b7e:	2300      	moveq	r3, #0
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	e008      	b.n	8005b96 <ADC_ConfigureBoostMode+0x42>
 8005b84:	4b66      	ldr	r3, [pc, #408]	@ (8005d20 <ADC_ConfigureBoostMode+0x1cc>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d01c      	beq.n	8005bd4 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005b9a:	f005 ff35 	bl	800ba08 <HAL_RCC_GetHCLKFreq>
 8005b9e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005ba8:	d010      	beq.n	8005bcc <ADC_ConfigureBoostMode+0x78>
 8005baa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bae:	d873      	bhi.n	8005c98 <ADC_ConfigureBoostMode+0x144>
 8005bb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bb4:	d002      	beq.n	8005bbc <ADC_ConfigureBoostMode+0x68>
 8005bb6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bba:	d16d      	bne.n	8005c98 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	0c1b      	lsrs	r3, r3, #16
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	60fb      	str	r3, [r7, #12]
        break;
 8005bca:	e068      	b.n	8005c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	089b      	lsrs	r3, r3, #2
 8005bd0:	60fb      	str	r3, [r7, #12]
        break;
 8005bd2:	e064      	b.n	8005c9e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005bd4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005bd8:	f04f 0100 	mov.w	r1, #0
 8005bdc:	f007 f910 	bl	800ce00 <HAL_RCCEx_GetPeriphCLKFreq>
 8005be0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005bea:	d051      	beq.n	8005c90 <ADC_ConfigureBoostMode+0x13c>
 8005bec:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8005bf0:	d854      	bhi.n	8005c9c <ADC_ConfigureBoostMode+0x148>
 8005bf2:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005bf6:	d047      	beq.n	8005c88 <ADC_ConfigureBoostMode+0x134>
 8005bf8:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8005bfc:	d84e      	bhi.n	8005c9c <ADC_ConfigureBoostMode+0x148>
 8005bfe:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005c02:	d03d      	beq.n	8005c80 <ADC_ConfigureBoostMode+0x12c>
 8005c04:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8005c08:	d848      	bhi.n	8005c9c <ADC_ConfigureBoostMode+0x148>
 8005c0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c0e:	d033      	beq.n	8005c78 <ADC_ConfigureBoostMode+0x124>
 8005c10:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c14:	d842      	bhi.n	8005c9c <ADC_ConfigureBoostMode+0x148>
 8005c16:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005c1a:	d029      	beq.n	8005c70 <ADC_ConfigureBoostMode+0x11c>
 8005c1c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8005c20:	d83c      	bhi.n	8005c9c <ADC_ConfigureBoostMode+0x148>
 8005c22:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005c26:	d01a      	beq.n	8005c5e <ADC_ConfigureBoostMode+0x10a>
 8005c28:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8005c2c:	d836      	bhi.n	8005c9c <ADC_ConfigureBoostMode+0x148>
 8005c2e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005c32:	d014      	beq.n	8005c5e <ADC_ConfigureBoostMode+0x10a>
 8005c34:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8005c38:	d830      	bhi.n	8005c9c <ADC_ConfigureBoostMode+0x148>
 8005c3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c3e:	d00e      	beq.n	8005c5e <ADC_ConfigureBoostMode+0x10a>
 8005c40:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c44:	d82a      	bhi.n	8005c9c <ADC_ConfigureBoostMode+0x148>
 8005c46:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c4a:	d008      	beq.n	8005c5e <ADC_ConfigureBoostMode+0x10a>
 8005c4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005c50:	d824      	bhi.n	8005c9c <ADC_ConfigureBoostMode+0x148>
 8005c52:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c56:	d002      	beq.n	8005c5e <ADC_ConfigureBoostMode+0x10a>
 8005c58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005c5c:	d11e      	bne.n	8005c9c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	0c9b      	lsrs	r3, r3, #18
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c6c:	60fb      	str	r3, [r7, #12]
        break;
 8005c6e:	e016      	b.n	8005c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	091b      	lsrs	r3, r3, #4
 8005c74:	60fb      	str	r3, [r7, #12]
        break;
 8005c76:	e012      	b.n	8005c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	60fb      	str	r3, [r7, #12]
        break;
 8005c7e:	e00e      	b.n	8005c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	099b      	lsrs	r3, r3, #6
 8005c84:	60fb      	str	r3, [r7, #12]
        break;
 8005c86:	e00a      	b.n	8005c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	09db      	lsrs	r3, r3, #7
 8005c8c:	60fb      	str	r3, [r7, #12]
        break;
 8005c8e:	e006      	b.n	8005c9e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	60fb      	str	r3, [r7, #12]
        break;
 8005c96:	e002      	b.n	8005c9e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005c98:	bf00      	nop
 8005c9a:	e000      	b.n	8005c9e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005c9c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	085b      	lsrs	r3, r3, #1
 8005ca2:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4a1f      	ldr	r2, [pc, #124]	@ (8005d24 <ADC_ConfigureBoostMode+0x1d0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d808      	bhi.n	8005cbe <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005cba:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005cbc:	e025      	b.n	8005d0a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	4a19      	ldr	r2, [pc, #100]	@ (8005d28 <ADC_ConfigureBoostMode+0x1d4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d80a      	bhi.n	8005cdc <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cd8:	609a      	str	r2, [r3, #8]
}
 8005cda:	e016      	b.n	8005d0a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	4a13      	ldr	r2, [pc, #76]	@ (8005d2c <ADC_ConfigureBoostMode+0x1d8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d80a      	bhi.n	8005cfa <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cf6:	609a      	str	r2, [r3, #8]
}
 8005cf8:	e007      	b.n	8005d0a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005d08:	609a      	str	r2, [r3, #8]
}
 8005d0a:	bf00      	nop
 8005d0c:	3710      	adds	r7, #16
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	bf00      	nop
 8005d14:	40022000 	.word	0x40022000
 8005d18:	40022100 	.word	0x40022100
 8005d1c:	40022300 	.word	0x40022300
 8005d20:	58026300 	.word	0x58026300
 8005d24:	005f5e10 	.word	0x005f5e10
 8005d28:	00bebc20 	.word	0x00bebc20
 8005d2c:	017d7840 	.word	0x017d7840

08005d30 <LL_ADC_IsEnabled>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d101      	bne.n	8005d48 <LL_ADC_IsEnabled+0x18>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <LL_ADC_IsEnabled+0x1a>
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr
	...

08005d58 <LL_ADC_StartCalibration>:
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	60f8      	str	r0, [r7, #12]
 8005d60:	60b9      	str	r1, [r7, #8]
 8005d62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	4b09      	ldr	r3, [pc, #36]	@ (8005d90 <LL_ADC_StartCalibration+0x38>)
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	609a      	str	r2, [r3, #8]
}
 8005d84:	bf00      	nop
 8005d86:	3714      	adds	r7, #20
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	3ffeffc0 	.word	0x3ffeffc0

08005d94 <LL_ADC_IsCalibrationOnGoing>:
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005da4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005da8:	d101      	bne.n	8005dae <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005daa:	2301      	movs	r3, #1
 8005dac:	e000      	b.n	8005db0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <LL_ADC_REG_IsConversionOngoing>:
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f003 0304 	and.w	r3, r3, #4
 8005dcc:	2b04      	cmp	r3, #4
 8005dce:	d101      	bne.n	8005dd4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	e000      	b.n	8005dd6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005dd4:	2300      	movs	r3, #0
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005df0:	2300      	movs	r3, #0
 8005df2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <HAL_ADCEx_Calibration_Start+0x1e>
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e04c      	b.n	8005e9c <HAL_ADCEx_Calibration_Start+0xb8>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f7ff fdae 	bl	800596c <ADC_Disable>
 8005e10:	4603      	mov	r3, r0
 8005e12:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005e14:	7dfb      	ldrb	r3, [r7, #23]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d135      	bne.n	8005e86 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005e1e:	4b21      	ldr	r3, [pc, #132]	@ (8005ea4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005e20:	4013      	ands	r3, r2
 8005e22:	f043 0202 	orr.w	r2, r3, #2
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	661a      	str	r2, [r3, #96]	@ 0x60
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	68b9      	ldr	r1, [r7, #8]
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7ff ff90 	bl	8005d58 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e38:	e014      	b.n	8005e64 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	3301      	adds	r3, #1
 8005e3e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	4a19      	ldr	r2, [pc, #100]	@ (8005ea8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d30d      	bcc.n	8005e64 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e4c:	f023 0312 	bic.w	r3, r3, #18
 8005e50:	f043 0210 	orr.w	r2, r3, #16
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	661a      	str	r2, [r3, #96]	@ 0x60
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e01b      	b.n	8005e9c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff ff93 	bl	8005d94 <LL_ADC_IsCalibrationOnGoing>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d1e2      	bne.n	8005e3a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e78:	f023 0303 	bic.w	r3, r3, #3
 8005e7c:	f043 0201 	orr.w	r2, r3, #1
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e84:	e005      	b.n	8005e92 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e8a:	f043 0210 	orr.w	r2, r3, #16
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3718      	adds	r7, #24
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	ffffeefd 	.word	0xffffeefd
 8005ea8:	25c3f800 	.word	0x25c3f800

08005eac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005eac:	b590      	push	{r4, r7, lr}
 8005eae:	b0a3      	sub	sp, #140	@ 0x8c
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d101      	bne.n	8005eca <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005ec6:	2302      	movs	r3, #2
 8005ec8:	e0c1      	b.n	800604e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	673b      	str	r3, [r7, #112]	@ 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a5e      	ldr	r2, [pc, #376]	@ (8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d102      	bne.n	8005eea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005ee4:	4b5d      	ldr	r3, [pc, #372]	@ (800605c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	e001      	b.n	8005eee <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ef8:	f043 0220 	orr.w	r2, r3, #32
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    return HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0a0      	b.n	800604e <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7ff ff54 	bl	8005dbc <LL_ADC_REG_IsConversionOngoing>
 8005f14:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff ff4d 	bl	8005dbc <LL_ADC_REG_IsConversionOngoing>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f040 8081 	bne.w	800602c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d17c      	bne.n	800602c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a48      	ldr	r2, [pc, #288]	@ (8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d004      	beq.n	8005f46 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a46      	ldr	r2, [pc, #280]	@ (800605c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d101      	bne.n	8005f4a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005f46:	4b46      	ldr	r3, [pc, #280]	@ (8006060 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005f48:	e000      	b.n	8005f4c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005f4a:	4b46      	ldr	r3, [pc, #280]	@ (8006064 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005f4c:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d039      	beq.n	8005fca <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005f56:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	431a      	orrs	r2, r3
 8005f64:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a3a      	ldr	r2, [pc, #232]	@ (8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a39      	ldr	r2, [pc, #228]	@ (800605c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d10e      	bne.n	8005f9a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005f7c:	4836      	ldr	r0, [pc, #216]	@ (8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005f7e:	f7ff fed7 	bl	8005d30 <LL_ADC_IsEnabled>
 8005f82:	4604      	mov	r4, r0
 8005f84:	4835      	ldr	r0, [pc, #212]	@ (800605c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005f86:	f7ff fed3 	bl	8005d30 <LL_ADC_IsEnabled>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4323      	orrs	r3, r4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	bf0c      	ite	eq
 8005f92:	2301      	moveq	r3, #1
 8005f94:	2300      	movne	r3, #0
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	e008      	b.n	8005fac <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005f9a:	4833      	ldr	r0, [pc, #204]	@ (8006068 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005f9c:	f7ff fec8 	bl	8005d30 <LL_ADC_IsEnabled>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	bf0c      	ite	eq
 8005fa6:	2301      	moveq	r3, #1
 8005fa8:	2300      	movne	r3, #0
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d047      	beq.n	8006040 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005fb0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fb2:	689a      	ldr	r2, [r3, #8]
 8005fb4:	4b2d      	ldr	r3, [pc, #180]	@ (800606c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005fb6:	4013      	ands	r3, r2
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	6811      	ldr	r1, [r2, #0]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	6892      	ldr	r2, [r2, #8]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	431a      	orrs	r2, r3
 8005fc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fc6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005fc8:	e03a      	b.n	8006040 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005fca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005fd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1f      	ldr	r2, [pc, #124]	@ (8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d004      	beq.n	8005fea <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800605c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d10e      	bne.n	8006008 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8005fea:	481b      	ldr	r0, [pc, #108]	@ (8006058 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005fec:	f7ff fea0 	bl	8005d30 <LL_ADC_IsEnabled>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	481a      	ldr	r0, [pc, #104]	@ (800605c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005ff4:	f7ff fe9c 	bl	8005d30 <LL_ADC_IsEnabled>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	4323      	orrs	r3, r4
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	bf0c      	ite	eq
 8006000:	2301      	moveq	r3, #1
 8006002:	2300      	movne	r3, #0
 8006004:	b2db      	uxtb	r3, r3
 8006006:	e008      	b.n	800601a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8006008:	4817      	ldr	r0, [pc, #92]	@ (8006068 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800600a:	f7ff fe91 	bl	8005d30 <LL_ADC_IsEnabled>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	bf0c      	ite	eq
 8006014:	2301      	moveq	r3, #1
 8006016:	2300      	movne	r3, #0
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d010      	beq.n	8006040 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800601e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	4b12      	ldr	r3, [pc, #72]	@ (800606c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006024:	4013      	ands	r3, r2
 8006026:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006028:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800602a:	e009      	b.n	8006040 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006030:	f043 0220 	orr.w	r2, r3, #32
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 800603e:	e000      	b.n	8006042 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006040:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return tmp_hal_status;
 800604a:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 800604e:	4618      	mov	r0, r3
 8006050:	378c      	adds	r7, #140	@ 0x8c
 8006052:	46bd      	mov	sp, r7
 8006054:	bd90      	pop	{r4, r7, pc}
 8006056:	bf00      	nop
 8006058:	40022000 	.word	0x40022000
 800605c:	40022100 	.word	0x40022100
 8006060:	40022300 	.word	0x40022300
 8006064:	58026300 	.word	0x58026300
 8006068:	58026000 	.word	0x58026000
 800606c:	fffff0e0 	.word	0xfffff0e0

08006070 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006070:	b480      	push	{r7}
 8006072:	b085      	sub	sp, #20
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006080:	4b0b      	ldr	r3, [pc, #44]	@ (80060b0 <__NVIC_SetPriorityGrouping+0x40>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800608c:	4013      	ands	r3, r2
 800608e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006098:	4b06      	ldr	r3, [pc, #24]	@ (80060b4 <__NVIC_SetPriorityGrouping+0x44>)
 800609a:	4313      	orrs	r3, r2
 800609c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800609e:	4a04      	ldr	r2, [pc, #16]	@ (80060b0 <__NVIC_SetPriorityGrouping+0x40>)
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	60d3      	str	r3, [r2, #12]
}
 80060a4:	bf00      	nop
 80060a6:	3714      	adds	r7, #20
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	e000ed00 	.word	0xe000ed00
 80060b4:	05fa0000 	.word	0x05fa0000

080060b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80060b8:	b480      	push	{r7}
 80060ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060bc:	4b04      	ldr	r3, [pc, #16]	@ (80060d0 <__NVIC_GetPriorityGrouping+0x18>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	0a1b      	lsrs	r3, r3, #8
 80060c2:	f003 0307 	and.w	r3, r3, #7
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	e000ed00 	.word	0xe000ed00

080060d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80060de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	db0b      	blt.n	80060fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80060e6:	88fb      	ldrh	r3, [r7, #6]
 80060e8:	f003 021f 	and.w	r2, r3, #31
 80060ec:	4907      	ldr	r1, [pc, #28]	@ (800610c <__NVIC_EnableIRQ+0x38>)
 80060ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80060f2:	095b      	lsrs	r3, r3, #5
 80060f4:	2001      	movs	r0, #1
 80060f6:	fa00 f202 	lsl.w	r2, r0, r2
 80060fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	e000e100 	.word	0xe000e100

08006110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	6039      	str	r1, [r7, #0]
 800611a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800611c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	db0a      	blt.n	800613a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	b2da      	uxtb	r2, r3
 8006128:	490c      	ldr	r1, [pc, #48]	@ (800615c <__NVIC_SetPriority+0x4c>)
 800612a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800612e:	0112      	lsls	r2, r2, #4
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	440b      	add	r3, r1
 8006134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006138:	e00a      	b.n	8006150 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	4908      	ldr	r1, [pc, #32]	@ (8006160 <__NVIC_SetPriority+0x50>)
 8006140:	88fb      	ldrh	r3, [r7, #6]
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	3b04      	subs	r3, #4
 8006148:	0112      	lsls	r2, r2, #4
 800614a:	b2d2      	uxtb	r2, r2
 800614c:	440b      	add	r3, r1
 800614e:	761a      	strb	r2, [r3, #24]
}
 8006150:	bf00      	nop
 8006152:	370c      	adds	r7, #12
 8006154:	46bd      	mov	sp, r7
 8006156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615a:	4770      	bx	lr
 800615c:	e000e100 	.word	0xe000e100
 8006160:	e000ed00 	.word	0xe000ed00

08006164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006164:	b480      	push	{r7}
 8006166:	b089      	sub	sp, #36	@ 0x24
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f1c3 0307 	rsb	r3, r3, #7
 800617e:	2b04      	cmp	r3, #4
 8006180:	bf28      	it	cs
 8006182:	2304      	movcs	r3, #4
 8006184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	3304      	adds	r3, #4
 800618a:	2b06      	cmp	r3, #6
 800618c:	d902      	bls.n	8006194 <NVIC_EncodePriority+0x30>
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	3b03      	subs	r3, #3
 8006192:	e000      	b.n	8006196 <NVIC_EncodePriority+0x32>
 8006194:	2300      	movs	r3, #0
 8006196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	fa02 f303 	lsl.w	r3, r2, r3
 80061a2:	43da      	mvns	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	401a      	ands	r2, r3
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	fa01 f303 	lsl.w	r3, r1, r3
 80061b6:	43d9      	mvns	r1, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061bc:	4313      	orrs	r3, r2
         );
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3724      	adds	r7, #36	@ 0x24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
	...

080061cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	3b01      	subs	r3, #1
 80061d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061dc:	d301      	bcc.n	80061e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80061de:	2301      	movs	r3, #1
 80061e0:	e00f      	b.n	8006202 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061e2:	4a0a      	ldr	r2, [pc, #40]	@ (800620c <SysTick_Config+0x40>)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	3b01      	subs	r3, #1
 80061e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80061ea:	210f      	movs	r1, #15
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80061f0:	f7ff ff8e 	bl	8006110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061f4:	4b05      	ldr	r3, [pc, #20]	@ (800620c <SysTick_Config+0x40>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061fa:	4b04      	ldr	r3, [pc, #16]	@ (800620c <SysTick_Config+0x40>)
 80061fc:	2207      	movs	r2, #7
 80061fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	e000e010 	.word	0xe000e010

08006210 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7ff ff29 	bl	8006070 <__NVIC_SetPriorityGrouping>
}
 800621e:	bf00      	nop
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b086      	sub	sp, #24
 800622a:	af00      	add	r7, sp, #0
 800622c:	4603      	mov	r3, r0
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006234:	f7ff ff40 	bl	80060b8 <__NVIC_GetPriorityGrouping>
 8006238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	6978      	ldr	r0, [r7, #20]
 8006240:	f7ff ff90 	bl	8006164 <NVIC_EncodePriority>
 8006244:	4602      	mov	r2, r0
 8006246:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800624a:	4611      	mov	r1, r2
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff ff5f 	bl	8006110 <__NVIC_SetPriority>
}
 8006252:	bf00      	nop
 8006254:	3718      	adds	r7, #24
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	4603      	mov	r3, r0
 8006262:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006264:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff ff33 	bl	80060d4 <__NVIC_EnableIRQ>
}
 800626e:	bf00      	nop
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f7ff ffa4 	bl	80061cc <SysTick_Config>
 8006284:	4603      	mov	r3, r0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3708      	adds	r7, #8
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
	...

08006290 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006298:	f7fd ff8a 	bl	80041b0 <HAL_GetTick>
 800629c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d101      	bne.n	80062a8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e312      	b.n	80068ce <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a66      	ldr	r2, [pc, #408]	@ (8006448 <HAL_DMA_Init+0x1b8>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d04a      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a65      	ldr	r2, [pc, #404]	@ (800644c <HAL_DMA_Init+0x1bc>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d045      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a63      	ldr	r2, [pc, #396]	@ (8006450 <HAL_DMA_Init+0x1c0>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d040      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a62      	ldr	r2, [pc, #392]	@ (8006454 <HAL_DMA_Init+0x1c4>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d03b      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a60      	ldr	r2, [pc, #384]	@ (8006458 <HAL_DMA_Init+0x1c8>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d036      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a5f      	ldr	r2, [pc, #380]	@ (800645c <HAL_DMA_Init+0x1cc>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d031      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a5d      	ldr	r2, [pc, #372]	@ (8006460 <HAL_DMA_Init+0x1d0>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d02c      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a5c      	ldr	r2, [pc, #368]	@ (8006464 <HAL_DMA_Init+0x1d4>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d027      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a5a      	ldr	r2, [pc, #360]	@ (8006468 <HAL_DMA_Init+0x1d8>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d022      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a59      	ldr	r2, [pc, #356]	@ (800646c <HAL_DMA_Init+0x1dc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d01d      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a57      	ldr	r2, [pc, #348]	@ (8006470 <HAL_DMA_Init+0x1e0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d018      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a56      	ldr	r2, [pc, #344]	@ (8006474 <HAL_DMA_Init+0x1e4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d013      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a54      	ldr	r2, [pc, #336]	@ (8006478 <HAL_DMA_Init+0x1e8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d00e      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a53      	ldr	r2, [pc, #332]	@ (800647c <HAL_DMA_Init+0x1ec>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d009      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a51      	ldr	r2, [pc, #324]	@ (8006480 <HAL_DMA_Init+0x1f0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d004      	beq.n	8006348 <HAL_DMA_Init+0xb8>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a50      	ldr	r2, [pc, #320]	@ (8006484 <HAL_DMA_Init+0x1f4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d101      	bne.n	800634c <HAL_DMA_Init+0xbc>
 8006348:	2301      	movs	r3, #1
 800634a:	e000      	b.n	800634e <HAL_DMA_Init+0xbe>
 800634c:	2300      	movs	r3, #0
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 813c 	beq.w	80065cc <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2202      	movs	r2, #2
 8006358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a37      	ldr	r2, [pc, #220]	@ (8006448 <HAL_DMA_Init+0x1b8>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d04a      	beq.n	8006404 <HAL_DMA_Init+0x174>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a36      	ldr	r2, [pc, #216]	@ (800644c <HAL_DMA_Init+0x1bc>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d045      	beq.n	8006404 <HAL_DMA_Init+0x174>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a34      	ldr	r2, [pc, #208]	@ (8006450 <HAL_DMA_Init+0x1c0>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d040      	beq.n	8006404 <HAL_DMA_Init+0x174>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a33      	ldr	r2, [pc, #204]	@ (8006454 <HAL_DMA_Init+0x1c4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d03b      	beq.n	8006404 <HAL_DMA_Init+0x174>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a31      	ldr	r2, [pc, #196]	@ (8006458 <HAL_DMA_Init+0x1c8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d036      	beq.n	8006404 <HAL_DMA_Init+0x174>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a30      	ldr	r2, [pc, #192]	@ (800645c <HAL_DMA_Init+0x1cc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d031      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a2e      	ldr	r2, [pc, #184]	@ (8006460 <HAL_DMA_Init+0x1d0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d02c      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a2d      	ldr	r2, [pc, #180]	@ (8006464 <HAL_DMA_Init+0x1d4>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d027      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a2b      	ldr	r2, [pc, #172]	@ (8006468 <HAL_DMA_Init+0x1d8>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d022      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a2a      	ldr	r2, [pc, #168]	@ (800646c <HAL_DMA_Init+0x1dc>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d01d      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a28      	ldr	r2, [pc, #160]	@ (8006470 <HAL_DMA_Init+0x1e0>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d018      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a27      	ldr	r2, [pc, #156]	@ (8006474 <HAL_DMA_Init+0x1e4>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d013      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a25      	ldr	r2, [pc, #148]	@ (8006478 <HAL_DMA_Init+0x1e8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00e      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a24      	ldr	r2, [pc, #144]	@ (800647c <HAL_DMA_Init+0x1ec>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d009      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a22      	ldr	r2, [pc, #136]	@ (8006480 <HAL_DMA_Init+0x1f0>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <HAL_DMA_Init+0x174>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a21      	ldr	r2, [pc, #132]	@ (8006484 <HAL_DMA_Init+0x1f4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d108      	bne.n	8006416 <HAL_DMA_Init+0x186>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	e007      	b.n	8006426 <HAL_DMA_Init+0x196>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681a      	ldr	r2, [r3, #0]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f022 0201 	bic.w	r2, r2, #1
 8006424:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006426:	e02f      	b.n	8006488 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006428:	f7fd fec2 	bl	80041b0 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b05      	cmp	r3, #5
 8006434:	d928      	bls.n	8006488 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2203      	movs	r2, #3
 8006440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e242      	b.n	80068ce <HAL_DMA_Init+0x63e>
 8006448:	40020010 	.word	0x40020010
 800644c:	40020028 	.word	0x40020028
 8006450:	40020040 	.word	0x40020040
 8006454:	40020058 	.word	0x40020058
 8006458:	40020070 	.word	0x40020070
 800645c:	40020088 	.word	0x40020088
 8006460:	400200a0 	.word	0x400200a0
 8006464:	400200b8 	.word	0x400200b8
 8006468:	40020410 	.word	0x40020410
 800646c:	40020428 	.word	0x40020428
 8006470:	40020440 	.word	0x40020440
 8006474:	40020458 	.word	0x40020458
 8006478:	40020470 	.word	0x40020470
 800647c:	40020488 	.word	0x40020488
 8006480:	400204a0 	.word	0x400204a0
 8006484:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1c8      	bne.n	8006428 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800649e:	697a      	ldr	r2, [r7, #20]
 80064a0:	4b83      	ldr	r3, [pc, #524]	@ (80066b0 <HAL_DMA_Init+0x420>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80064ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	691b      	ldr	r3, [r3, #16]
 80064b4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80064ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80064c6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d8:	2b04      	cmp	r3, #4
 80064da:	d107      	bne.n	80064ec <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e4:	4313      	orrs	r3, r2
 80064e6:	697a      	ldr	r2, [r7, #20]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	2b28      	cmp	r3, #40	@ 0x28
 80064f2:	d903      	bls.n	80064fc <HAL_DMA_Init+0x26c>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80064fa:	d91f      	bls.n	800653c <HAL_DMA_Init+0x2ac>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b3e      	cmp	r3, #62	@ 0x3e
 8006502:	d903      	bls.n	800650c <HAL_DMA_Init+0x27c>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b42      	cmp	r3, #66	@ 0x42
 800650a:	d917      	bls.n	800653c <HAL_DMA_Init+0x2ac>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	2b46      	cmp	r3, #70	@ 0x46
 8006512:	d903      	bls.n	800651c <HAL_DMA_Init+0x28c>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	2b48      	cmp	r3, #72	@ 0x48
 800651a:	d90f      	bls.n	800653c <HAL_DMA_Init+0x2ac>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2b4e      	cmp	r3, #78	@ 0x4e
 8006522:	d903      	bls.n	800652c <HAL_DMA_Init+0x29c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	2b52      	cmp	r3, #82	@ 0x52
 800652a:	d907      	bls.n	800653c <HAL_DMA_Init+0x2ac>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	2b73      	cmp	r3, #115	@ 0x73
 8006532:	d905      	bls.n	8006540 <HAL_DMA_Init+0x2b0>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	2b77      	cmp	r3, #119	@ 0x77
 800653a:	d801      	bhi.n	8006540 <HAL_DMA_Init+0x2b0>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <HAL_DMA_Init+0x2b2>
 8006540:	2300      	movs	r3, #0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800654c:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	695b      	ldr	r3, [r3, #20]
 800655c:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	f023 0307 	bic.w	r3, r3, #7
 8006564:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	4313      	orrs	r3, r2
 800656e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006574:	2b04      	cmp	r3, #4
 8006576:	d117      	bne.n	80065a8 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	4313      	orrs	r3, r2
 8006580:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00e      	beq.n	80065a8 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f002 fb2e 	bl	8008bec <DMA_CheckFifoParam>
 8006590:	4603      	mov	r3, r0
 8006592:	2b00      	cmp	r3, #0
 8006594:	d008      	beq.n	80065a8 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2240      	movs	r2, #64	@ 0x40
 800659a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e192      	b.n	80068ce <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f002 fa69 	bl	8008a88 <DMA_CalcBaseAndBitshift>
 80065b6:	4603      	mov	r3, r0
 80065b8:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	223f      	movs	r2, #63	@ 0x3f
 80065c4:	409a      	lsls	r2, r3
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	609a      	str	r2, [r3, #8]
 80065ca:	e0c8      	b.n	800675e <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a38      	ldr	r2, [pc, #224]	@ (80066b4 <HAL_DMA_Init+0x424>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d022      	beq.n	800661c <HAL_DMA_Init+0x38c>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a37      	ldr	r2, [pc, #220]	@ (80066b8 <HAL_DMA_Init+0x428>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d01d      	beq.n	800661c <HAL_DMA_Init+0x38c>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a35      	ldr	r2, [pc, #212]	@ (80066bc <HAL_DMA_Init+0x42c>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d018      	beq.n	800661c <HAL_DMA_Init+0x38c>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a34      	ldr	r2, [pc, #208]	@ (80066c0 <HAL_DMA_Init+0x430>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d013      	beq.n	800661c <HAL_DMA_Init+0x38c>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a32      	ldr	r2, [pc, #200]	@ (80066c4 <HAL_DMA_Init+0x434>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00e      	beq.n	800661c <HAL_DMA_Init+0x38c>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a31      	ldr	r2, [pc, #196]	@ (80066c8 <HAL_DMA_Init+0x438>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d009      	beq.n	800661c <HAL_DMA_Init+0x38c>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a2f      	ldr	r2, [pc, #188]	@ (80066cc <HAL_DMA_Init+0x43c>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d004      	beq.n	800661c <HAL_DMA_Init+0x38c>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a2e      	ldr	r2, [pc, #184]	@ (80066d0 <HAL_DMA_Init+0x440>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d101      	bne.n	8006620 <HAL_DMA_Init+0x390>
 800661c:	2301      	movs	r3, #1
 800661e:	e000      	b.n	8006622 <HAL_DMA_Init+0x392>
 8006620:	2300      	movs	r3, #0
 8006622:	2b00      	cmp	r3, #0
 8006624:	f000 8092 	beq.w	800674c <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a21      	ldr	r2, [pc, #132]	@ (80066b4 <HAL_DMA_Init+0x424>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d021      	beq.n	8006676 <HAL_DMA_Init+0x3e6>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a20      	ldr	r2, [pc, #128]	@ (80066b8 <HAL_DMA_Init+0x428>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d01c      	beq.n	8006676 <HAL_DMA_Init+0x3e6>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a1e      	ldr	r2, [pc, #120]	@ (80066bc <HAL_DMA_Init+0x42c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d017      	beq.n	8006676 <HAL_DMA_Init+0x3e6>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a1d      	ldr	r2, [pc, #116]	@ (80066c0 <HAL_DMA_Init+0x430>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d012      	beq.n	8006676 <HAL_DMA_Init+0x3e6>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1b      	ldr	r2, [pc, #108]	@ (80066c4 <HAL_DMA_Init+0x434>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00d      	beq.n	8006676 <HAL_DMA_Init+0x3e6>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a1a      	ldr	r2, [pc, #104]	@ (80066c8 <HAL_DMA_Init+0x438>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d008      	beq.n	8006676 <HAL_DMA_Init+0x3e6>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a18      	ldr	r2, [pc, #96]	@ (80066cc <HAL_DMA_Init+0x43c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d003      	beq.n	8006676 <HAL_DMA_Init+0x3e6>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a17      	ldr	r2, [pc, #92]	@ (80066d0 <HAL_DMA_Init+0x440>)
 8006674:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2202      	movs	r2, #2
 800667a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4b10      	ldr	r3, [pc, #64]	@ (80066d4 <HAL_DMA_Init+0x444>)
 8006692:	4013      	ands	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	2b40      	cmp	r3, #64	@ 0x40
 800669c:	d01c      	beq.n	80066d8 <HAL_DMA_Init+0x448>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	2b80      	cmp	r3, #128	@ 0x80
 80066a4:	d102      	bne.n	80066ac <HAL_DMA_Init+0x41c>
 80066a6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80066aa:	e016      	b.n	80066da <HAL_DMA_Init+0x44a>
 80066ac:	2300      	movs	r3, #0
 80066ae:	e014      	b.n	80066da <HAL_DMA_Init+0x44a>
 80066b0:	fe10803f 	.word	0xfe10803f
 80066b4:	58025408 	.word	0x58025408
 80066b8:	5802541c 	.word	0x5802541c
 80066bc:	58025430 	.word	0x58025430
 80066c0:	58025444 	.word	0x58025444
 80066c4:	58025458 	.word	0x58025458
 80066c8:	5802546c 	.word	0x5802546c
 80066cc:	58025480 	.word	0x58025480
 80066d0:	58025494 	.word	0x58025494
 80066d4:	fffe000f 	.word	0xfffe000f
 80066d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	68d2      	ldr	r2, [r2, #12]
 80066de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80066e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80066e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80066f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80066f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	69db      	ldr	r3, [r3, #28]
 80066fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006708:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	461a      	mov	r2, r3
 800671e:	4b6e      	ldr	r3, [pc, #440]	@ (80068d8 <HAL_DMA_Init+0x648>)
 8006720:	4413      	add	r3, r2
 8006722:	4a6e      	ldr	r2, [pc, #440]	@ (80068dc <HAL_DMA_Init+0x64c>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	009a      	lsls	r2, r3, #2
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f002 f9a9 	bl	8008a88 <DMA_CalcBaseAndBitshift>
 8006736:	4603      	mov	r3, r0
 8006738:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800673e:	f003 031f 	and.w	r3, r3, #31
 8006742:	2201      	movs	r2, #1
 8006744:	409a      	lsls	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	e008      	b.n	800675e <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2240      	movs	r2, #64	@ 0x40
 8006750:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2203      	movs	r2, #3
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e0b7      	b.n	80068ce <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a5f      	ldr	r2, [pc, #380]	@ (80068e0 <HAL_DMA_Init+0x650>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d072      	beq.n	800684e <HAL_DMA_Init+0x5be>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a5d      	ldr	r2, [pc, #372]	@ (80068e4 <HAL_DMA_Init+0x654>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d06d      	beq.n	800684e <HAL_DMA_Init+0x5be>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a5c      	ldr	r2, [pc, #368]	@ (80068e8 <HAL_DMA_Init+0x658>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d068      	beq.n	800684e <HAL_DMA_Init+0x5be>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a5a      	ldr	r2, [pc, #360]	@ (80068ec <HAL_DMA_Init+0x65c>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d063      	beq.n	800684e <HAL_DMA_Init+0x5be>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a59      	ldr	r2, [pc, #356]	@ (80068f0 <HAL_DMA_Init+0x660>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d05e      	beq.n	800684e <HAL_DMA_Init+0x5be>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a57      	ldr	r2, [pc, #348]	@ (80068f4 <HAL_DMA_Init+0x664>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d059      	beq.n	800684e <HAL_DMA_Init+0x5be>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a56      	ldr	r2, [pc, #344]	@ (80068f8 <HAL_DMA_Init+0x668>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d054      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a54      	ldr	r2, [pc, #336]	@ (80068fc <HAL_DMA_Init+0x66c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d04f      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a53      	ldr	r2, [pc, #332]	@ (8006900 <HAL_DMA_Init+0x670>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d04a      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a51      	ldr	r2, [pc, #324]	@ (8006904 <HAL_DMA_Init+0x674>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d045      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a50      	ldr	r2, [pc, #320]	@ (8006908 <HAL_DMA_Init+0x678>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d040      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a4e      	ldr	r2, [pc, #312]	@ (800690c <HAL_DMA_Init+0x67c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d03b      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a4d      	ldr	r2, [pc, #308]	@ (8006910 <HAL_DMA_Init+0x680>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d036      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a4b      	ldr	r2, [pc, #300]	@ (8006914 <HAL_DMA_Init+0x684>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d031      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a4a      	ldr	r2, [pc, #296]	@ (8006918 <HAL_DMA_Init+0x688>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d02c      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a48      	ldr	r2, [pc, #288]	@ (800691c <HAL_DMA_Init+0x68c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d027      	beq.n	800684e <HAL_DMA_Init+0x5be>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a47      	ldr	r2, [pc, #284]	@ (8006920 <HAL_DMA_Init+0x690>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d022      	beq.n	800684e <HAL_DMA_Init+0x5be>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a45      	ldr	r2, [pc, #276]	@ (8006924 <HAL_DMA_Init+0x694>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d01d      	beq.n	800684e <HAL_DMA_Init+0x5be>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a44      	ldr	r2, [pc, #272]	@ (8006928 <HAL_DMA_Init+0x698>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d018      	beq.n	800684e <HAL_DMA_Init+0x5be>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a42      	ldr	r2, [pc, #264]	@ (800692c <HAL_DMA_Init+0x69c>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d013      	beq.n	800684e <HAL_DMA_Init+0x5be>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a41      	ldr	r2, [pc, #260]	@ (8006930 <HAL_DMA_Init+0x6a0>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d00e      	beq.n	800684e <HAL_DMA_Init+0x5be>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a3f      	ldr	r2, [pc, #252]	@ (8006934 <HAL_DMA_Init+0x6a4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d009      	beq.n	800684e <HAL_DMA_Init+0x5be>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a3e      	ldr	r2, [pc, #248]	@ (8006938 <HAL_DMA_Init+0x6a8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d004      	beq.n	800684e <HAL_DMA_Init+0x5be>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a3c      	ldr	r2, [pc, #240]	@ (800693c <HAL_DMA_Init+0x6ac>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d101      	bne.n	8006852 <HAL_DMA_Init+0x5c2>
 800684e:	2301      	movs	r3, #1
 8006850:	e000      	b.n	8006854 <HAL_DMA_Init+0x5c4>
 8006852:	2300      	movs	r3, #0
 8006854:	2b00      	cmp	r3, #0
 8006856:	d032      	beq.n	80068be <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f002 fa43 	bl	8008ce4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b80      	cmp	r3, #128	@ 0x80
 8006864:	d102      	bne.n	800686c <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685a      	ldr	r2, [r3, #4]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006880:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d010      	beq.n	80068ac <HAL_DMA_Init+0x61c>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	2b08      	cmp	r3, #8
 8006890:	d80c      	bhi.n	80068ac <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f002 fac0 	bl	8008e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800689c:	2200      	movs	r2, #0
 800689e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80068a8:	605a      	str	r2, [r3, #4]
 80068aa:	e008      	b.n	80068be <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2200      	movs	r2, #0
 80068b0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	a7fdabf8 	.word	0xa7fdabf8
 80068dc:	cccccccd 	.word	0xcccccccd
 80068e0:	40020010 	.word	0x40020010
 80068e4:	40020028 	.word	0x40020028
 80068e8:	40020040 	.word	0x40020040
 80068ec:	40020058 	.word	0x40020058
 80068f0:	40020070 	.word	0x40020070
 80068f4:	40020088 	.word	0x40020088
 80068f8:	400200a0 	.word	0x400200a0
 80068fc:	400200b8 	.word	0x400200b8
 8006900:	40020410 	.word	0x40020410
 8006904:	40020428 	.word	0x40020428
 8006908:	40020440 	.word	0x40020440
 800690c:	40020458 	.word	0x40020458
 8006910:	40020470 	.word	0x40020470
 8006914:	40020488 	.word	0x40020488
 8006918:	400204a0 	.word	0x400204a0
 800691c:	400204b8 	.word	0x400204b8
 8006920:	58025408 	.word	0x58025408
 8006924:	5802541c 	.word	0x5802541c
 8006928:	58025430 	.word	0x58025430
 800692c:	58025444 	.word	0x58025444
 8006930:	58025458 	.word	0x58025458
 8006934:	5802546c 	.word	0x5802546c
 8006938:	58025480 	.word	0x58025480
 800693c:	58025494 	.word	0x58025494

08006940 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
 800694c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800694e:	2300      	movs	r3, #0
 8006950:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d101      	bne.n	800695c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e226      	b.n	8006daa <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006962:	2b01      	cmp	r3, #1
 8006964:	d101      	bne.n	800696a <HAL_DMA_Start_IT+0x2a>
 8006966:	2302      	movs	r3, #2
 8006968:	e21f      	b.n	8006daa <HAL_DMA_Start_IT+0x46a>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b01      	cmp	r3, #1
 800697c:	f040 820a 	bne.w	8006d94 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a68      	ldr	r2, [pc, #416]	@ (8006b34 <HAL_DMA_Start_IT+0x1f4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d04a      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a66      	ldr	r2, [pc, #408]	@ (8006b38 <HAL_DMA_Start_IT+0x1f8>)
 800699e:	4293      	cmp	r3, r2
 80069a0:	d045      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a65      	ldr	r2, [pc, #404]	@ (8006b3c <HAL_DMA_Start_IT+0x1fc>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d040      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a63      	ldr	r2, [pc, #396]	@ (8006b40 <HAL_DMA_Start_IT+0x200>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d03b      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4a62      	ldr	r2, [pc, #392]	@ (8006b44 <HAL_DMA_Start_IT+0x204>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d036      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a60      	ldr	r2, [pc, #384]	@ (8006b48 <HAL_DMA_Start_IT+0x208>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d031      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a5f      	ldr	r2, [pc, #380]	@ (8006b4c <HAL_DMA_Start_IT+0x20c>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d02c      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a5d      	ldr	r2, [pc, #372]	@ (8006b50 <HAL_DMA_Start_IT+0x210>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d027      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a5c      	ldr	r2, [pc, #368]	@ (8006b54 <HAL_DMA_Start_IT+0x214>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d022      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a5a      	ldr	r2, [pc, #360]	@ (8006b58 <HAL_DMA_Start_IT+0x218>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d01d      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a59      	ldr	r2, [pc, #356]	@ (8006b5c <HAL_DMA_Start_IT+0x21c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d018      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a57      	ldr	r2, [pc, #348]	@ (8006b60 <HAL_DMA_Start_IT+0x220>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d013      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a56      	ldr	r2, [pc, #344]	@ (8006b64 <HAL_DMA_Start_IT+0x224>)
 8006a0c:	4293      	cmp	r3, r2
 8006a0e:	d00e      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	4a54      	ldr	r2, [pc, #336]	@ (8006b68 <HAL_DMA_Start_IT+0x228>)
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d009      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a53      	ldr	r2, [pc, #332]	@ (8006b6c <HAL_DMA_Start_IT+0x22c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d004      	beq.n	8006a2e <HAL_DMA_Start_IT+0xee>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a51      	ldr	r2, [pc, #324]	@ (8006b70 <HAL_DMA_Start_IT+0x230>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d108      	bne.n	8006a40 <HAL_DMA_Start_IT+0x100>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681a      	ldr	r2, [r3, #0]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f022 0201 	bic.w	r2, r2, #1
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	e007      	b.n	8006a50 <HAL_DMA_Start_IT+0x110>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0201 	bic.w	r2, r2, #1
 8006a4e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	68f8      	ldr	r0, [r7, #12]
 8006a58:	f001 fe6a 	bl	8008730 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a34      	ldr	r2, [pc, #208]	@ (8006b34 <HAL_DMA_Start_IT+0x1f4>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d04a      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a33      	ldr	r2, [pc, #204]	@ (8006b38 <HAL_DMA_Start_IT+0x1f8>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d045      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a31      	ldr	r2, [pc, #196]	@ (8006b3c <HAL_DMA_Start_IT+0x1fc>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d040      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a30      	ldr	r2, [pc, #192]	@ (8006b40 <HAL_DMA_Start_IT+0x200>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d03b      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a2e      	ldr	r2, [pc, #184]	@ (8006b44 <HAL_DMA_Start_IT+0x204>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d036      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2d      	ldr	r2, [pc, #180]	@ (8006b48 <HAL_DMA_Start_IT+0x208>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d031      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8006b4c <HAL_DMA_Start_IT+0x20c>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d02c      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a2a      	ldr	r2, [pc, #168]	@ (8006b50 <HAL_DMA_Start_IT+0x210>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d027      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a28      	ldr	r2, [pc, #160]	@ (8006b54 <HAL_DMA_Start_IT+0x214>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d022      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a27      	ldr	r2, [pc, #156]	@ (8006b58 <HAL_DMA_Start_IT+0x218>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d01d      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a25      	ldr	r2, [pc, #148]	@ (8006b5c <HAL_DMA_Start_IT+0x21c>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d018      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a24      	ldr	r2, [pc, #144]	@ (8006b60 <HAL_DMA_Start_IT+0x220>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d013      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a22      	ldr	r2, [pc, #136]	@ (8006b64 <HAL_DMA_Start_IT+0x224>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00e      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a21      	ldr	r2, [pc, #132]	@ (8006b68 <HAL_DMA_Start_IT+0x228>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d009      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a1f      	ldr	r2, [pc, #124]	@ (8006b6c <HAL_DMA_Start_IT+0x22c>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <HAL_DMA_Start_IT+0x1bc>
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a1e      	ldr	r2, [pc, #120]	@ (8006b70 <HAL_DMA_Start_IT+0x230>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d101      	bne.n	8006b00 <HAL_DMA_Start_IT+0x1c0>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <HAL_DMA_Start_IT+0x1c2>
 8006b00:	2300      	movs	r3, #0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d036      	beq.n	8006b74 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f023 021e 	bic.w	r2, r3, #30
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0216 	orr.w	r2, r2, #22
 8006b18:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d03e      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0208 	orr.w	r2, r2, #8
 8006b30:	601a      	str	r2, [r3, #0]
 8006b32:	e035      	b.n	8006ba0 <HAL_DMA_Start_IT+0x260>
 8006b34:	40020010 	.word	0x40020010
 8006b38:	40020028 	.word	0x40020028
 8006b3c:	40020040 	.word	0x40020040
 8006b40:	40020058 	.word	0x40020058
 8006b44:	40020070 	.word	0x40020070
 8006b48:	40020088 	.word	0x40020088
 8006b4c:	400200a0 	.word	0x400200a0
 8006b50:	400200b8 	.word	0x400200b8
 8006b54:	40020410 	.word	0x40020410
 8006b58:	40020428 	.word	0x40020428
 8006b5c:	40020440 	.word	0x40020440
 8006b60:	40020458 	.word	0x40020458
 8006b64:	40020470 	.word	0x40020470
 8006b68:	40020488 	.word	0x40020488
 8006b6c:	400204a0 	.word	0x400204a0
 8006b70:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f023 020e 	bic.w	r2, r3, #14
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 020a 	orr.w	r2, r2, #10
 8006b86:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0204 	orr.w	r2, r2, #4
 8006b9e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a83      	ldr	r2, [pc, #524]	@ (8006db4 <HAL_DMA_Start_IT+0x474>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d072      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a82      	ldr	r2, [pc, #520]	@ (8006db8 <HAL_DMA_Start_IT+0x478>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d06d      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a80      	ldr	r2, [pc, #512]	@ (8006dbc <HAL_DMA_Start_IT+0x47c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d068      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a7f      	ldr	r2, [pc, #508]	@ (8006dc0 <HAL_DMA_Start_IT+0x480>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d063      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a7d      	ldr	r2, [pc, #500]	@ (8006dc4 <HAL_DMA_Start_IT+0x484>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d05e      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8006dc8 <HAL_DMA_Start_IT+0x488>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d059      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a7a      	ldr	r2, [pc, #488]	@ (8006dcc <HAL_DMA_Start_IT+0x48c>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d054      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a79      	ldr	r2, [pc, #484]	@ (8006dd0 <HAL_DMA_Start_IT+0x490>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d04f      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a77      	ldr	r2, [pc, #476]	@ (8006dd4 <HAL_DMA_Start_IT+0x494>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d04a      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a76      	ldr	r2, [pc, #472]	@ (8006dd8 <HAL_DMA_Start_IT+0x498>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d045      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a74      	ldr	r2, [pc, #464]	@ (8006ddc <HAL_DMA_Start_IT+0x49c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d040      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	4a73      	ldr	r2, [pc, #460]	@ (8006de0 <HAL_DMA_Start_IT+0x4a0>)
 8006c14:	4293      	cmp	r3, r2
 8006c16:	d03b      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4a71      	ldr	r2, [pc, #452]	@ (8006de4 <HAL_DMA_Start_IT+0x4a4>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d036      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a70      	ldr	r2, [pc, #448]	@ (8006de8 <HAL_DMA_Start_IT+0x4a8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d031      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a6e      	ldr	r2, [pc, #440]	@ (8006dec <HAL_DMA_Start_IT+0x4ac>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d02c      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4a6d      	ldr	r2, [pc, #436]	@ (8006df0 <HAL_DMA_Start_IT+0x4b0>)
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d027      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a6b      	ldr	r2, [pc, #428]	@ (8006df4 <HAL_DMA_Start_IT+0x4b4>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d022      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a6a      	ldr	r2, [pc, #424]	@ (8006df8 <HAL_DMA_Start_IT+0x4b8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d01d      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a68      	ldr	r2, [pc, #416]	@ (8006dfc <HAL_DMA_Start_IT+0x4bc>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a67      	ldr	r2, [pc, #412]	@ (8006e00 <HAL_DMA_Start_IT+0x4c0>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a65      	ldr	r2, [pc, #404]	@ (8006e04 <HAL_DMA_Start_IT+0x4c4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a64      	ldr	r2, [pc, #400]	@ (8006e08 <HAL_DMA_Start_IT+0x4c8>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a62      	ldr	r2, [pc, #392]	@ (8006e0c <HAL_DMA_Start_IT+0x4cc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_DMA_Start_IT+0x350>
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a61      	ldr	r2, [pc, #388]	@ (8006e10 <HAL_DMA_Start_IT+0x4d0>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d101      	bne.n	8006c94 <HAL_DMA_Start_IT+0x354>
 8006c90:	2301      	movs	r3, #1
 8006c92:	e000      	b.n	8006c96 <HAL_DMA_Start_IT+0x356>
 8006c94:	2300      	movs	r3, #0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d01a      	beq.n	8006cd0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cb2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cb6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d007      	beq.n	8006cd0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006cce:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a37      	ldr	r2, [pc, #220]	@ (8006db4 <HAL_DMA_Start_IT+0x474>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d04a      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a36      	ldr	r2, [pc, #216]	@ (8006db8 <HAL_DMA_Start_IT+0x478>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d045      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a34      	ldr	r2, [pc, #208]	@ (8006dbc <HAL_DMA_Start_IT+0x47c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d040      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a33      	ldr	r2, [pc, #204]	@ (8006dc0 <HAL_DMA_Start_IT+0x480>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d03b      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a31      	ldr	r2, [pc, #196]	@ (8006dc4 <HAL_DMA_Start_IT+0x484>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d036      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a30      	ldr	r2, [pc, #192]	@ (8006dc8 <HAL_DMA_Start_IT+0x488>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d031      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a2e      	ldr	r2, [pc, #184]	@ (8006dcc <HAL_DMA_Start_IT+0x48c>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d02c      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a2d      	ldr	r2, [pc, #180]	@ (8006dd0 <HAL_DMA_Start_IT+0x490>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d027      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a2b      	ldr	r2, [pc, #172]	@ (8006dd4 <HAL_DMA_Start_IT+0x494>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d022      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006dd8 <HAL_DMA_Start_IT+0x498>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a28      	ldr	r2, [pc, #160]	@ (8006ddc <HAL_DMA_Start_IT+0x49c>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a27      	ldr	r2, [pc, #156]	@ (8006de0 <HAL_DMA_Start_IT+0x4a0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a25      	ldr	r2, [pc, #148]	@ (8006de4 <HAL_DMA_Start_IT+0x4a4>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a24      	ldr	r2, [pc, #144]	@ (8006de8 <HAL_DMA_Start_IT+0x4a8>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a22      	ldr	r2, [pc, #136]	@ (8006dec <HAL_DMA_Start_IT+0x4ac>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_DMA_Start_IT+0x430>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a21      	ldr	r2, [pc, #132]	@ (8006df0 <HAL_DMA_Start_IT+0x4b0>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d108      	bne.n	8006d82 <HAL_DMA_Start_IT+0x442>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0201 	orr.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e012      	b.n	8006da8 <HAL_DMA_Start_IT+0x468>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f042 0201 	orr.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e009      	b.n	8006da8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d9a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3718      	adds	r7, #24
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	40020010 	.word	0x40020010
 8006db8:	40020028 	.word	0x40020028
 8006dbc:	40020040 	.word	0x40020040
 8006dc0:	40020058 	.word	0x40020058
 8006dc4:	40020070 	.word	0x40020070
 8006dc8:	40020088 	.word	0x40020088
 8006dcc:	400200a0 	.word	0x400200a0
 8006dd0:	400200b8 	.word	0x400200b8
 8006dd4:	40020410 	.word	0x40020410
 8006dd8:	40020428 	.word	0x40020428
 8006ddc:	40020440 	.word	0x40020440
 8006de0:	40020458 	.word	0x40020458
 8006de4:	40020470 	.word	0x40020470
 8006de8:	40020488 	.word	0x40020488
 8006dec:	400204a0 	.word	0x400204a0
 8006df0:	400204b8 	.word	0x400204b8
 8006df4:	58025408 	.word	0x58025408
 8006df8:	5802541c 	.word	0x5802541c
 8006dfc:	58025430 	.word	0x58025430
 8006e00:	58025444 	.word	0x58025444
 8006e04:	58025458 	.word	0x58025458
 8006e08:	5802546c 	.word	0x5802546c
 8006e0c:	58025480 	.word	0x58025480
 8006e10:	58025494 	.word	0x58025494

08006e14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006e1c:	f7fd f9c8 	bl	80041b0 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006e28:	2301      	movs	r3, #1
 8006e2a:	e2dc      	b.n	80073e6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d008      	beq.n	8006e4a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2280      	movs	r2, #128	@ 0x80
 8006e3c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e2cd      	b.n	80073e6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a76      	ldr	r2, [pc, #472]	@ (8007028 <HAL_DMA_Abort+0x214>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d04a      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a74      	ldr	r2, [pc, #464]	@ (800702c <HAL_DMA_Abort+0x218>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d045      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a73      	ldr	r2, [pc, #460]	@ (8007030 <HAL_DMA_Abort+0x21c>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d040      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a71      	ldr	r2, [pc, #452]	@ (8007034 <HAL_DMA_Abort+0x220>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d03b      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a70      	ldr	r2, [pc, #448]	@ (8007038 <HAL_DMA_Abort+0x224>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d036      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a6e      	ldr	r2, [pc, #440]	@ (800703c <HAL_DMA_Abort+0x228>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d031      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a6d      	ldr	r2, [pc, #436]	@ (8007040 <HAL_DMA_Abort+0x22c>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d02c      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a6b      	ldr	r2, [pc, #428]	@ (8007044 <HAL_DMA_Abort+0x230>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d027      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a6a      	ldr	r2, [pc, #424]	@ (8007048 <HAL_DMA_Abort+0x234>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d022      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a68      	ldr	r2, [pc, #416]	@ (800704c <HAL_DMA_Abort+0x238>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d01d      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a67      	ldr	r2, [pc, #412]	@ (8007050 <HAL_DMA_Abort+0x23c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d018      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a65      	ldr	r2, [pc, #404]	@ (8007054 <HAL_DMA_Abort+0x240>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d013      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a64      	ldr	r2, [pc, #400]	@ (8007058 <HAL_DMA_Abort+0x244>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d00e      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a62      	ldr	r2, [pc, #392]	@ (800705c <HAL_DMA_Abort+0x248>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d009      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a61      	ldr	r2, [pc, #388]	@ (8007060 <HAL_DMA_Abort+0x24c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d004      	beq.n	8006eea <HAL_DMA_Abort+0xd6>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a5f      	ldr	r2, [pc, #380]	@ (8007064 <HAL_DMA_Abort+0x250>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d101      	bne.n	8006eee <HAL_DMA_Abort+0xda>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <HAL_DMA_Abort+0xdc>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d013      	beq.n	8006f1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 021e 	bic.w	r2, r2, #30
 8006f02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	695a      	ldr	r2, [r3, #20]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	e00a      	b.n	8006f32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f022 020e 	bic.w	r2, r2, #14
 8006f2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a3c      	ldr	r2, [pc, #240]	@ (8007028 <HAL_DMA_Abort+0x214>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d072      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a3a      	ldr	r2, [pc, #232]	@ (800702c <HAL_DMA_Abort+0x218>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d06d      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a39      	ldr	r2, [pc, #228]	@ (8007030 <HAL_DMA_Abort+0x21c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d068      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a37      	ldr	r2, [pc, #220]	@ (8007034 <HAL_DMA_Abort+0x220>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d063      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a36      	ldr	r2, [pc, #216]	@ (8007038 <HAL_DMA_Abort+0x224>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d05e      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a34      	ldr	r2, [pc, #208]	@ (800703c <HAL_DMA_Abort+0x228>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d059      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a33      	ldr	r2, [pc, #204]	@ (8007040 <HAL_DMA_Abort+0x22c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d054      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a31      	ldr	r2, [pc, #196]	@ (8007044 <HAL_DMA_Abort+0x230>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d04f      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a30      	ldr	r2, [pc, #192]	@ (8007048 <HAL_DMA_Abort+0x234>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d04a      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2e      	ldr	r2, [pc, #184]	@ (800704c <HAL_DMA_Abort+0x238>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d045      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a2d      	ldr	r2, [pc, #180]	@ (8007050 <HAL_DMA_Abort+0x23c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d040      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a2b      	ldr	r2, [pc, #172]	@ (8007054 <HAL_DMA_Abort+0x240>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d03b      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2a      	ldr	r2, [pc, #168]	@ (8007058 <HAL_DMA_Abort+0x244>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d036      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a28      	ldr	r2, [pc, #160]	@ (800705c <HAL_DMA_Abort+0x248>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d031      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a27      	ldr	r2, [pc, #156]	@ (8007060 <HAL_DMA_Abort+0x24c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d02c      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a25      	ldr	r2, [pc, #148]	@ (8007064 <HAL_DMA_Abort+0x250>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d027      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a24      	ldr	r2, [pc, #144]	@ (8007068 <HAL_DMA_Abort+0x254>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d022      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a22      	ldr	r2, [pc, #136]	@ (800706c <HAL_DMA_Abort+0x258>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d01d      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a21      	ldr	r2, [pc, #132]	@ (8007070 <HAL_DMA_Abort+0x25c>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d018      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8007074 <HAL_DMA_Abort+0x260>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d013      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8007078 <HAL_DMA_Abort+0x264>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d00e      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1c      	ldr	r2, [pc, #112]	@ (800707c <HAL_DMA_Abort+0x268>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d009      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1b      	ldr	r2, [pc, #108]	@ (8007080 <HAL_DMA_Abort+0x26c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d004      	beq.n	8007022 <HAL_DMA_Abort+0x20e>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a19      	ldr	r2, [pc, #100]	@ (8007084 <HAL_DMA_Abort+0x270>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d132      	bne.n	8007088 <HAL_DMA_Abort+0x274>
 8007022:	2301      	movs	r3, #1
 8007024:	e031      	b.n	800708a <HAL_DMA_Abort+0x276>
 8007026:	bf00      	nop
 8007028:	40020010 	.word	0x40020010
 800702c:	40020028 	.word	0x40020028
 8007030:	40020040 	.word	0x40020040
 8007034:	40020058 	.word	0x40020058
 8007038:	40020070 	.word	0x40020070
 800703c:	40020088 	.word	0x40020088
 8007040:	400200a0 	.word	0x400200a0
 8007044:	400200b8 	.word	0x400200b8
 8007048:	40020410 	.word	0x40020410
 800704c:	40020428 	.word	0x40020428
 8007050:	40020440 	.word	0x40020440
 8007054:	40020458 	.word	0x40020458
 8007058:	40020470 	.word	0x40020470
 800705c:	40020488 	.word	0x40020488
 8007060:	400204a0 	.word	0x400204a0
 8007064:	400204b8 	.word	0x400204b8
 8007068:	58025408 	.word	0x58025408
 800706c:	5802541c 	.word	0x5802541c
 8007070:	58025430 	.word	0x58025430
 8007074:	58025444 	.word	0x58025444
 8007078:	58025458 	.word	0x58025458
 800707c:	5802546c 	.word	0x5802546c
 8007080:	58025480 	.word	0x58025480
 8007084:	58025494 	.word	0x58025494
 8007088:	2300      	movs	r3, #0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007098:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800709c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a6d      	ldr	r2, [pc, #436]	@ (8007258 <HAL_DMA_Abort+0x444>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d04a      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a6b      	ldr	r2, [pc, #428]	@ (800725c <HAL_DMA_Abort+0x448>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d045      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a6a      	ldr	r2, [pc, #424]	@ (8007260 <HAL_DMA_Abort+0x44c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d040      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a68      	ldr	r2, [pc, #416]	@ (8007264 <HAL_DMA_Abort+0x450>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d03b      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a67      	ldr	r2, [pc, #412]	@ (8007268 <HAL_DMA_Abort+0x454>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d036      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a65      	ldr	r2, [pc, #404]	@ (800726c <HAL_DMA_Abort+0x458>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d031      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a64      	ldr	r2, [pc, #400]	@ (8007270 <HAL_DMA_Abort+0x45c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d02c      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a62      	ldr	r2, [pc, #392]	@ (8007274 <HAL_DMA_Abort+0x460>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d027      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a61      	ldr	r2, [pc, #388]	@ (8007278 <HAL_DMA_Abort+0x464>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d022      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a5f      	ldr	r2, [pc, #380]	@ (800727c <HAL_DMA_Abort+0x468>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d01d      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a5e      	ldr	r2, [pc, #376]	@ (8007280 <HAL_DMA_Abort+0x46c>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d018      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a5c      	ldr	r2, [pc, #368]	@ (8007284 <HAL_DMA_Abort+0x470>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d013      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a5b      	ldr	r2, [pc, #364]	@ (8007288 <HAL_DMA_Abort+0x474>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00e      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a59      	ldr	r2, [pc, #356]	@ (800728c <HAL_DMA_Abort+0x478>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d009      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a58      	ldr	r2, [pc, #352]	@ (8007290 <HAL_DMA_Abort+0x47c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d004      	beq.n	800713e <HAL_DMA_Abort+0x32a>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a56      	ldr	r2, [pc, #344]	@ (8007294 <HAL_DMA_Abort+0x480>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d108      	bne.n	8007150 <HAL_DMA_Abort+0x33c>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f022 0201 	bic.w	r2, r2, #1
 800714c:	601a      	str	r2, [r3, #0]
 800714e:	e007      	b.n	8007160 <HAL_DMA_Abort+0x34c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f022 0201 	bic.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007160:	e013      	b.n	800718a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007162:	f7fd f825 	bl	80041b0 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b05      	cmp	r3, #5
 800716e:	d90c      	bls.n	800718a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2203      	movs	r2, #3
 800717a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e12d      	b.n	80073e6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e5      	bne.n	8007162 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a2f      	ldr	r2, [pc, #188]	@ (8007258 <HAL_DMA_Abort+0x444>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d04a      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a2d      	ldr	r2, [pc, #180]	@ (800725c <HAL_DMA_Abort+0x448>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d045      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a2c      	ldr	r2, [pc, #176]	@ (8007260 <HAL_DMA_Abort+0x44c>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d040      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a2a      	ldr	r2, [pc, #168]	@ (8007264 <HAL_DMA_Abort+0x450>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d03b      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a29      	ldr	r2, [pc, #164]	@ (8007268 <HAL_DMA_Abort+0x454>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d036      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a27      	ldr	r2, [pc, #156]	@ (800726c <HAL_DMA_Abort+0x458>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d031      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a26      	ldr	r2, [pc, #152]	@ (8007270 <HAL_DMA_Abort+0x45c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d02c      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a24      	ldr	r2, [pc, #144]	@ (8007274 <HAL_DMA_Abort+0x460>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d027      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a23      	ldr	r2, [pc, #140]	@ (8007278 <HAL_DMA_Abort+0x464>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d022      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a21      	ldr	r2, [pc, #132]	@ (800727c <HAL_DMA_Abort+0x468>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d01d      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a20      	ldr	r2, [pc, #128]	@ (8007280 <HAL_DMA_Abort+0x46c>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d018      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a1e      	ldr	r2, [pc, #120]	@ (8007284 <HAL_DMA_Abort+0x470>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d013      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a1d      	ldr	r2, [pc, #116]	@ (8007288 <HAL_DMA_Abort+0x474>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d00e      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a1b      	ldr	r2, [pc, #108]	@ (800728c <HAL_DMA_Abort+0x478>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d009      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1a      	ldr	r2, [pc, #104]	@ (8007290 <HAL_DMA_Abort+0x47c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d004      	beq.n	8007236 <HAL_DMA_Abort+0x422>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a18      	ldr	r2, [pc, #96]	@ (8007294 <HAL_DMA_Abort+0x480>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d101      	bne.n	800723a <HAL_DMA_Abort+0x426>
 8007236:	2301      	movs	r3, #1
 8007238:	e000      	b.n	800723c <HAL_DMA_Abort+0x428>
 800723a:	2300      	movs	r3, #0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d02b      	beq.n	8007298 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007244:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800724a:	f003 031f 	and.w	r3, r3, #31
 800724e:	223f      	movs	r2, #63	@ 0x3f
 8007250:	409a      	lsls	r2, r3
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	609a      	str	r2, [r3, #8]
 8007256:	e02a      	b.n	80072ae <HAL_DMA_Abort+0x49a>
 8007258:	40020010 	.word	0x40020010
 800725c:	40020028 	.word	0x40020028
 8007260:	40020040 	.word	0x40020040
 8007264:	40020058 	.word	0x40020058
 8007268:	40020070 	.word	0x40020070
 800726c:	40020088 	.word	0x40020088
 8007270:	400200a0 	.word	0x400200a0
 8007274:	400200b8 	.word	0x400200b8
 8007278:	40020410 	.word	0x40020410
 800727c:	40020428 	.word	0x40020428
 8007280:	40020440 	.word	0x40020440
 8007284:	40020458 	.word	0x40020458
 8007288:	40020470 	.word	0x40020470
 800728c:	40020488 	.word	0x40020488
 8007290:	400204a0 	.word	0x400204a0
 8007294:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800729c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80072a2:	f003 031f 	and.w	r3, r3, #31
 80072a6:	2201      	movs	r2, #1
 80072a8:	409a      	lsls	r2, r3
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a4f      	ldr	r2, [pc, #316]	@ (80073f0 <HAL_DMA_Abort+0x5dc>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d072      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a4d      	ldr	r2, [pc, #308]	@ (80073f4 <HAL_DMA_Abort+0x5e0>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d06d      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a4c      	ldr	r2, [pc, #304]	@ (80073f8 <HAL_DMA_Abort+0x5e4>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d068      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a4a      	ldr	r2, [pc, #296]	@ (80073fc <HAL_DMA_Abort+0x5e8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d063      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a49      	ldr	r2, [pc, #292]	@ (8007400 <HAL_DMA_Abort+0x5ec>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d05e      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a47      	ldr	r2, [pc, #284]	@ (8007404 <HAL_DMA_Abort+0x5f0>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d059      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a46      	ldr	r2, [pc, #280]	@ (8007408 <HAL_DMA_Abort+0x5f4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d054      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a44      	ldr	r2, [pc, #272]	@ (800740c <HAL_DMA_Abort+0x5f8>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d04f      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a43      	ldr	r2, [pc, #268]	@ (8007410 <HAL_DMA_Abort+0x5fc>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d04a      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a41      	ldr	r2, [pc, #260]	@ (8007414 <HAL_DMA_Abort+0x600>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d045      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a40      	ldr	r2, [pc, #256]	@ (8007418 <HAL_DMA_Abort+0x604>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d040      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a3e      	ldr	r2, [pc, #248]	@ (800741c <HAL_DMA_Abort+0x608>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d03b      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a3d      	ldr	r2, [pc, #244]	@ (8007420 <HAL_DMA_Abort+0x60c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d036      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a3b      	ldr	r2, [pc, #236]	@ (8007424 <HAL_DMA_Abort+0x610>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d031      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a3a      	ldr	r2, [pc, #232]	@ (8007428 <HAL_DMA_Abort+0x614>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d02c      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a38      	ldr	r2, [pc, #224]	@ (800742c <HAL_DMA_Abort+0x618>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d027      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a37      	ldr	r2, [pc, #220]	@ (8007430 <HAL_DMA_Abort+0x61c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d022      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a35      	ldr	r2, [pc, #212]	@ (8007434 <HAL_DMA_Abort+0x620>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d01d      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a34      	ldr	r2, [pc, #208]	@ (8007438 <HAL_DMA_Abort+0x624>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d018      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a32      	ldr	r2, [pc, #200]	@ (800743c <HAL_DMA_Abort+0x628>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d013      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a31      	ldr	r2, [pc, #196]	@ (8007440 <HAL_DMA_Abort+0x62c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d00e      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a2f      	ldr	r2, [pc, #188]	@ (8007444 <HAL_DMA_Abort+0x630>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d009      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a2e      	ldr	r2, [pc, #184]	@ (8007448 <HAL_DMA_Abort+0x634>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d004      	beq.n	800739e <HAL_DMA_Abort+0x58a>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a2c      	ldr	r2, [pc, #176]	@ (800744c <HAL_DMA_Abort+0x638>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d101      	bne.n	80073a2 <HAL_DMA_Abort+0x58e>
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <HAL_DMA_Abort+0x590>
 80073a2:	2300      	movs	r3, #0
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d015      	beq.n	80073d4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80073b0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00c      	beq.n	80073d4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80073c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80073c8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80073d2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	40020010 	.word	0x40020010
 80073f4:	40020028 	.word	0x40020028
 80073f8:	40020040 	.word	0x40020040
 80073fc:	40020058 	.word	0x40020058
 8007400:	40020070 	.word	0x40020070
 8007404:	40020088 	.word	0x40020088
 8007408:	400200a0 	.word	0x400200a0
 800740c:	400200b8 	.word	0x400200b8
 8007410:	40020410 	.word	0x40020410
 8007414:	40020428 	.word	0x40020428
 8007418:	40020440 	.word	0x40020440
 800741c:	40020458 	.word	0x40020458
 8007420:	40020470 	.word	0x40020470
 8007424:	40020488 	.word	0x40020488
 8007428:	400204a0 	.word	0x400204a0
 800742c:	400204b8 	.word	0x400204b8
 8007430:	58025408 	.word	0x58025408
 8007434:	5802541c 	.word	0x5802541c
 8007438:	58025430 	.word	0x58025430
 800743c:	58025444 	.word	0x58025444
 8007440:	58025458 	.word	0x58025458
 8007444:	5802546c 	.word	0x5802546c
 8007448:	58025480 	.word	0x58025480
 800744c:	58025494 	.word	0x58025494

08007450 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d101      	bne.n	8007462 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e237      	b.n	80078d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d004      	beq.n	8007478 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2280      	movs	r2, #128	@ 0x80
 8007472:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e22c      	b.n	80078d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a5c      	ldr	r2, [pc, #368]	@ (80075f0 <HAL_DMA_Abort_IT+0x1a0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d04a      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a5b      	ldr	r2, [pc, #364]	@ (80075f4 <HAL_DMA_Abort_IT+0x1a4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d045      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a59      	ldr	r2, [pc, #356]	@ (80075f8 <HAL_DMA_Abort_IT+0x1a8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d040      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a58      	ldr	r2, [pc, #352]	@ (80075fc <HAL_DMA_Abort_IT+0x1ac>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d03b      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a56      	ldr	r2, [pc, #344]	@ (8007600 <HAL_DMA_Abort_IT+0x1b0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d036      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a55      	ldr	r2, [pc, #340]	@ (8007604 <HAL_DMA_Abort_IT+0x1b4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d031      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a53      	ldr	r2, [pc, #332]	@ (8007608 <HAL_DMA_Abort_IT+0x1b8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d02c      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a52      	ldr	r2, [pc, #328]	@ (800760c <HAL_DMA_Abort_IT+0x1bc>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d027      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a50      	ldr	r2, [pc, #320]	@ (8007610 <HAL_DMA_Abort_IT+0x1c0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d022      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a4f      	ldr	r2, [pc, #316]	@ (8007614 <HAL_DMA_Abort_IT+0x1c4>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d01d      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a4d      	ldr	r2, [pc, #308]	@ (8007618 <HAL_DMA_Abort_IT+0x1c8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d018      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a4c      	ldr	r2, [pc, #304]	@ (800761c <HAL_DMA_Abort_IT+0x1cc>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d013      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4a4a      	ldr	r2, [pc, #296]	@ (8007620 <HAL_DMA_Abort_IT+0x1d0>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d00e      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4a49      	ldr	r2, [pc, #292]	@ (8007624 <HAL_DMA_Abort_IT+0x1d4>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d009      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a47      	ldr	r2, [pc, #284]	@ (8007628 <HAL_DMA_Abort_IT+0x1d8>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d004      	beq.n	8007518 <HAL_DMA_Abort_IT+0xc8>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a46      	ldr	r2, [pc, #280]	@ (800762c <HAL_DMA_Abort_IT+0x1dc>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d101      	bne.n	800751c <HAL_DMA_Abort_IT+0xcc>
 8007518:	2301      	movs	r3, #1
 800751a:	e000      	b.n	800751e <HAL_DMA_Abort_IT+0xce>
 800751c:	2300      	movs	r3, #0
 800751e:	2b00      	cmp	r3, #0
 8007520:	f000 8086 	beq.w	8007630 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2204      	movs	r2, #4
 8007528:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a2f      	ldr	r2, [pc, #188]	@ (80075f0 <HAL_DMA_Abort_IT+0x1a0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d04a      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a2e      	ldr	r2, [pc, #184]	@ (80075f4 <HAL_DMA_Abort_IT+0x1a4>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d045      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a2c      	ldr	r2, [pc, #176]	@ (80075f8 <HAL_DMA_Abort_IT+0x1a8>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d040      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a2b      	ldr	r2, [pc, #172]	@ (80075fc <HAL_DMA_Abort_IT+0x1ac>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d03b      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a29      	ldr	r2, [pc, #164]	@ (8007600 <HAL_DMA_Abort_IT+0x1b0>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d036      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a28      	ldr	r2, [pc, #160]	@ (8007604 <HAL_DMA_Abort_IT+0x1b4>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d031      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a26      	ldr	r2, [pc, #152]	@ (8007608 <HAL_DMA_Abort_IT+0x1b8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d02c      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a25      	ldr	r2, [pc, #148]	@ (800760c <HAL_DMA_Abort_IT+0x1bc>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d027      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a23      	ldr	r2, [pc, #140]	@ (8007610 <HAL_DMA_Abort_IT+0x1c0>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d022      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a22      	ldr	r2, [pc, #136]	@ (8007614 <HAL_DMA_Abort_IT+0x1c4>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d01d      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a20      	ldr	r2, [pc, #128]	@ (8007618 <HAL_DMA_Abort_IT+0x1c8>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d018      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a1f      	ldr	r2, [pc, #124]	@ (800761c <HAL_DMA_Abort_IT+0x1cc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d013      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007620 <HAL_DMA_Abort_IT+0x1d0>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d00e      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a1c      	ldr	r2, [pc, #112]	@ (8007624 <HAL_DMA_Abort_IT+0x1d4>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d009      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a1a      	ldr	r2, [pc, #104]	@ (8007628 <HAL_DMA_Abort_IT+0x1d8>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d004      	beq.n	80075cc <HAL_DMA_Abort_IT+0x17c>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a19      	ldr	r2, [pc, #100]	@ (800762c <HAL_DMA_Abort_IT+0x1dc>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d108      	bne.n	80075de <HAL_DMA_Abort_IT+0x18e>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0201 	bic.w	r2, r2, #1
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	e178      	b.n	80078d0 <HAL_DMA_Abort_IT+0x480>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	681a      	ldr	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f022 0201 	bic.w	r2, r2, #1
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e16f      	b.n	80078d0 <HAL_DMA_Abort_IT+0x480>
 80075f0:	40020010 	.word	0x40020010
 80075f4:	40020028 	.word	0x40020028
 80075f8:	40020040 	.word	0x40020040
 80075fc:	40020058 	.word	0x40020058
 8007600:	40020070 	.word	0x40020070
 8007604:	40020088 	.word	0x40020088
 8007608:	400200a0 	.word	0x400200a0
 800760c:	400200b8 	.word	0x400200b8
 8007610:	40020410 	.word	0x40020410
 8007614:	40020428 	.word	0x40020428
 8007618:	40020440 	.word	0x40020440
 800761c:	40020458 	.word	0x40020458
 8007620:	40020470 	.word	0x40020470
 8007624:	40020488 	.word	0x40020488
 8007628:	400204a0 	.word	0x400204a0
 800762c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f022 020e 	bic.w	r2, r2, #14
 800763e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a6c      	ldr	r2, [pc, #432]	@ (80077f8 <HAL_DMA_Abort_IT+0x3a8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d04a      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a6b      	ldr	r2, [pc, #428]	@ (80077fc <HAL_DMA_Abort_IT+0x3ac>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d045      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a69      	ldr	r2, [pc, #420]	@ (8007800 <HAL_DMA_Abort_IT+0x3b0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d040      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a68      	ldr	r2, [pc, #416]	@ (8007804 <HAL_DMA_Abort_IT+0x3b4>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d03b      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a66      	ldr	r2, [pc, #408]	@ (8007808 <HAL_DMA_Abort_IT+0x3b8>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d036      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a65      	ldr	r2, [pc, #404]	@ (800780c <HAL_DMA_Abort_IT+0x3bc>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d031      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a63      	ldr	r2, [pc, #396]	@ (8007810 <HAL_DMA_Abort_IT+0x3c0>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d02c      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a62      	ldr	r2, [pc, #392]	@ (8007814 <HAL_DMA_Abort_IT+0x3c4>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d027      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a60      	ldr	r2, [pc, #384]	@ (8007818 <HAL_DMA_Abort_IT+0x3c8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d022      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a5f      	ldr	r2, [pc, #380]	@ (800781c <HAL_DMA_Abort_IT+0x3cc>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d01d      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a5d      	ldr	r2, [pc, #372]	@ (8007820 <HAL_DMA_Abort_IT+0x3d0>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d018      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a5c      	ldr	r2, [pc, #368]	@ (8007824 <HAL_DMA_Abort_IT+0x3d4>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d013      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a5a      	ldr	r2, [pc, #360]	@ (8007828 <HAL_DMA_Abort_IT+0x3d8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d00e      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a59      	ldr	r2, [pc, #356]	@ (800782c <HAL_DMA_Abort_IT+0x3dc>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d009      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a57      	ldr	r2, [pc, #348]	@ (8007830 <HAL_DMA_Abort_IT+0x3e0>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d004      	beq.n	80076e0 <HAL_DMA_Abort_IT+0x290>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a56      	ldr	r2, [pc, #344]	@ (8007834 <HAL_DMA_Abort_IT+0x3e4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d108      	bne.n	80076f2 <HAL_DMA_Abort_IT+0x2a2>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	601a      	str	r2, [r3, #0]
 80076f0:	e007      	b.n	8007702 <HAL_DMA_Abort_IT+0x2b2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a3c      	ldr	r2, [pc, #240]	@ (80077f8 <HAL_DMA_Abort_IT+0x3a8>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d072      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a3a      	ldr	r2, [pc, #232]	@ (80077fc <HAL_DMA_Abort_IT+0x3ac>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d06d      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a39      	ldr	r2, [pc, #228]	@ (8007800 <HAL_DMA_Abort_IT+0x3b0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d068      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a37      	ldr	r2, [pc, #220]	@ (8007804 <HAL_DMA_Abort_IT+0x3b4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d063      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a36      	ldr	r2, [pc, #216]	@ (8007808 <HAL_DMA_Abort_IT+0x3b8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d05e      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a34      	ldr	r2, [pc, #208]	@ (800780c <HAL_DMA_Abort_IT+0x3bc>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d059      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a33      	ldr	r2, [pc, #204]	@ (8007810 <HAL_DMA_Abort_IT+0x3c0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d054      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a31      	ldr	r2, [pc, #196]	@ (8007814 <HAL_DMA_Abort_IT+0x3c4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d04f      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a30      	ldr	r2, [pc, #192]	@ (8007818 <HAL_DMA_Abort_IT+0x3c8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d04a      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a2e      	ldr	r2, [pc, #184]	@ (800781c <HAL_DMA_Abort_IT+0x3cc>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d045      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a2d      	ldr	r2, [pc, #180]	@ (8007820 <HAL_DMA_Abort_IT+0x3d0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d040      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a2b      	ldr	r2, [pc, #172]	@ (8007824 <HAL_DMA_Abort_IT+0x3d4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d03b      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a2a      	ldr	r2, [pc, #168]	@ (8007828 <HAL_DMA_Abort_IT+0x3d8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d036      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a28      	ldr	r2, [pc, #160]	@ (800782c <HAL_DMA_Abort_IT+0x3dc>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d031      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a27      	ldr	r2, [pc, #156]	@ (8007830 <HAL_DMA_Abort_IT+0x3e0>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d02c      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a25      	ldr	r2, [pc, #148]	@ (8007834 <HAL_DMA_Abort_IT+0x3e4>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d027      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a24      	ldr	r2, [pc, #144]	@ (8007838 <HAL_DMA_Abort_IT+0x3e8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d022      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a22      	ldr	r2, [pc, #136]	@ (800783c <HAL_DMA_Abort_IT+0x3ec>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d01d      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a21      	ldr	r2, [pc, #132]	@ (8007840 <HAL_DMA_Abort_IT+0x3f0>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d018      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007844 <HAL_DMA_Abort_IT+0x3f4>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d013      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007848 <HAL_DMA_Abort_IT+0x3f8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d00e      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a1c      	ldr	r2, [pc, #112]	@ (800784c <HAL_DMA_Abort_IT+0x3fc>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d009      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007850 <HAL_DMA_Abort_IT+0x400>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d004      	beq.n	80077f2 <HAL_DMA_Abort_IT+0x3a2>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a19      	ldr	r2, [pc, #100]	@ (8007854 <HAL_DMA_Abort_IT+0x404>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d132      	bne.n	8007858 <HAL_DMA_Abort_IT+0x408>
 80077f2:	2301      	movs	r3, #1
 80077f4:	e031      	b.n	800785a <HAL_DMA_Abort_IT+0x40a>
 80077f6:	bf00      	nop
 80077f8:	40020010 	.word	0x40020010
 80077fc:	40020028 	.word	0x40020028
 8007800:	40020040 	.word	0x40020040
 8007804:	40020058 	.word	0x40020058
 8007808:	40020070 	.word	0x40020070
 800780c:	40020088 	.word	0x40020088
 8007810:	400200a0 	.word	0x400200a0
 8007814:	400200b8 	.word	0x400200b8
 8007818:	40020410 	.word	0x40020410
 800781c:	40020428 	.word	0x40020428
 8007820:	40020440 	.word	0x40020440
 8007824:	40020458 	.word	0x40020458
 8007828:	40020470 	.word	0x40020470
 800782c:	40020488 	.word	0x40020488
 8007830:	400204a0 	.word	0x400204a0
 8007834:	400204b8 	.word	0x400204b8
 8007838:	58025408 	.word	0x58025408
 800783c:	5802541c 	.word	0x5802541c
 8007840:	58025430 	.word	0x58025430
 8007844:	58025444 	.word	0x58025444
 8007848:	58025458 	.word	0x58025458
 800784c:	5802546c 	.word	0x5802546c
 8007850:	58025480 	.word	0x58025480
 8007854:	58025494 	.word	0x58025494
 8007858:	2300      	movs	r3, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d028      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007868:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800786c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007872:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007878:	f003 031f 	and.w	r3, r3, #31
 800787c:	2201      	movs	r2, #1
 800787e:	409a      	lsls	r2, r3
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800788c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00c      	beq.n	80078b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078aa:	687a      	ldr	r2, [r7, #4]
 80078ac:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80078ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3710      	adds	r7, #16
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop

080078dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b08a      	sub	sp, #40	@ 0x28
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80078e4:	2300      	movs	r3, #0
 80078e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80078e8:	4b67      	ldr	r3, [pc, #412]	@ (8007a88 <HAL_DMA_IRQHandler+0x1ac>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	4a67      	ldr	r2, [pc, #412]	@ (8007a8c <HAL_DMA_IRQHandler+0x1b0>)
 80078ee:	fba2 2303 	umull	r2, r3, r2, r3
 80078f2:	0a9b      	lsrs	r3, r3, #10
 80078f4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80078fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007900:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007902:	6a3b      	ldr	r3, [r7, #32]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a5f      	ldr	r2, [pc, #380]	@ (8007a90 <HAL_DMA_IRQHandler+0x1b4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d04a      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a5d      	ldr	r2, [pc, #372]	@ (8007a94 <HAL_DMA_IRQHandler+0x1b8>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d045      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a5c      	ldr	r2, [pc, #368]	@ (8007a98 <HAL_DMA_IRQHandler+0x1bc>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d040      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a5a      	ldr	r2, [pc, #360]	@ (8007a9c <HAL_DMA_IRQHandler+0x1c0>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d03b      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	4a59      	ldr	r2, [pc, #356]	@ (8007aa0 <HAL_DMA_IRQHandler+0x1c4>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d036      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	4a57      	ldr	r2, [pc, #348]	@ (8007aa4 <HAL_DMA_IRQHandler+0x1c8>)
 8007946:	4293      	cmp	r3, r2
 8007948:	d031      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a56      	ldr	r2, [pc, #344]	@ (8007aa8 <HAL_DMA_IRQHandler+0x1cc>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d02c      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a54      	ldr	r2, [pc, #336]	@ (8007aac <HAL_DMA_IRQHandler+0x1d0>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d027      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a53      	ldr	r2, [pc, #332]	@ (8007ab0 <HAL_DMA_IRQHandler+0x1d4>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d022      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a51      	ldr	r2, [pc, #324]	@ (8007ab4 <HAL_DMA_IRQHandler+0x1d8>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d01d      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a50      	ldr	r2, [pc, #320]	@ (8007ab8 <HAL_DMA_IRQHandler+0x1dc>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d018      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a4e      	ldr	r2, [pc, #312]	@ (8007abc <HAL_DMA_IRQHandler+0x1e0>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d013      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a4d      	ldr	r2, [pc, #308]	@ (8007ac0 <HAL_DMA_IRQHandler+0x1e4>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d00e      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a4b      	ldr	r2, [pc, #300]	@ (8007ac4 <HAL_DMA_IRQHandler+0x1e8>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d009      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a4a      	ldr	r2, [pc, #296]	@ (8007ac8 <HAL_DMA_IRQHandler+0x1ec>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d004      	beq.n	80079ae <HAL_DMA_IRQHandler+0xd2>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a48      	ldr	r2, [pc, #288]	@ (8007acc <HAL_DMA_IRQHandler+0x1f0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d101      	bne.n	80079b2 <HAL_DMA_IRQHandler+0xd6>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <HAL_DMA_IRQHandler+0xd8>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 842b 	beq.w	8008210 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2208      	movs	r2, #8
 80079c4:	409a      	lsls	r2, r3
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	4013      	ands	r3, r2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	f000 80a2 	beq.w	8007b14 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007a90 <HAL_DMA_IRQHandler+0x1b4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d04a      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a2d      	ldr	r2, [pc, #180]	@ (8007a94 <HAL_DMA_IRQHandler+0x1b8>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d045      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a2b      	ldr	r2, [pc, #172]	@ (8007a98 <HAL_DMA_IRQHandler+0x1bc>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d040      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a2a      	ldr	r2, [pc, #168]	@ (8007a9c <HAL_DMA_IRQHandler+0x1c0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d03b      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a28      	ldr	r2, [pc, #160]	@ (8007aa0 <HAL_DMA_IRQHandler+0x1c4>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d036      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a27      	ldr	r2, [pc, #156]	@ (8007aa4 <HAL_DMA_IRQHandler+0x1c8>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d031      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a25      	ldr	r2, [pc, #148]	@ (8007aa8 <HAL_DMA_IRQHandler+0x1cc>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d02c      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4a24      	ldr	r2, [pc, #144]	@ (8007aac <HAL_DMA_IRQHandler+0x1d0>)
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	d027      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4a22      	ldr	r2, [pc, #136]	@ (8007ab0 <HAL_DMA_IRQHandler+0x1d4>)
 8007a26:	4293      	cmp	r3, r2
 8007a28:	d022      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a21      	ldr	r2, [pc, #132]	@ (8007ab4 <HAL_DMA_IRQHandler+0x1d8>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d01d      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a1f      	ldr	r2, [pc, #124]	@ (8007ab8 <HAL_DMA_IRQHandler+0x1dc>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d018      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	4a1e      	ldr	r2, [pc, #120]	@ (8007abc <HAL_DMA_IRQHandler+0x1e0>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d013      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a1c      	ldr	r2, [pc, #112]	@ (8007ac0 <HAL_DMA_IRQHandler+0x1e4>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d00e      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a1b      	ldr	r2, [pc, #108]	@ (8007ac4 <HAL_DMA_IRQHandler+0x1e8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d009      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a19      	ldr	r2, [pc, #100]	@ (8007ac8 <HAL_DMA_IRQHandler+0x1ec>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d004      	beq.n	8007a70 <HAL_DMA_IRQHandler+0x194>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a18      	ldr	r2, [pc, #96]	@ (8007acc <HAL_DMA_IRQHandler+0x1f0>)
 8007a6c:	4293      	cmp	r3, r2
 8007a6e:	d12f      	bne.n	8007ad0 <HAL_DMA_IRQHandler+0x1f4>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f003 0304 	and.w	r3, r3, #4
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	bf14      	ite	ne
 8007a7e:	2301      	movne	r3, #1
 8007a80:	2300      	moveq	r3, #0
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	e02e      	b.n	8007ae4 <HAL_DMA_IRQHandler+0x208>
 8007a86:	bf00      	nop
 8007a88:	24000000 	.word	0x24000000
 8007a8c:	1b4e81b5 	.word	0x1b4e81b5
 8007a90:	40020010 	.word	0x40020010
 8007a94:	40020028 	.word	0x40020028
 8007a98:	40020040 	.word	0x40020040
 8007a9c:	40020058 	.word	0x40020058
 8007aa0:	40020070 	.word	0x40020070
 8007aa4:	40020088 	.word	0x40020088
 8007aa8:	400200a0 	.word	0x400200a0
 8007aac:	400200b8 	.word	0x400200b8
 8007ab0:	40020410 	.word	0x40020410
 8007ab4:	40020428 	.word	0x40020428
 8007ab8:	40020440 	.word	0x40020440
 8007abc:	40020458 	.word	0x40020458
 8007ac0:	40020470 	.word	0x40020470
 8007ac4:	40020488 	.word	0x40020488
 8007ac8:	400204a0 	.word	0x400204a0
 8007acc:	400204b8 	.word	0x400204b8
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d015      	beq.n	8007b14 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f022 0204 	bic.w	r2, r2, #4
 8007af6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007afc:	f003 031f 	and.w	r3, r3, #31
 8007b00:	2208      	movs	r2, #8
 8007b02:	409a      	lsls	r2, r3
 8007b04:	6a3b      	ldr	r3, [r7, #32]
 8007b06:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b0c:	f043 0201 	orr.w	r2, r3, #1
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b18:	f003 031f 	and.w	r3, r3, #31
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8007b22:	f003 0301 	and.w	r3, r3, #1
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d06e      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a69      	ldr	r2, [pc, #420]	@ (8007cd4 <HAL_DMA_IRQHandler+0x3f8>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d04a      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a67      	ldr	r2, [pc, #412]	@ (8007cd8 <HAL_DMA_IRQHandler+0x3fc>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d045      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a66      	ldr	r2, [pc, #408]	@ (8007cdc <HAL_DMA_IRQHandler+0x400>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d040      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a64      	ldr	r2, [pc, #400]	@ (8007ce0 <HAL_DMA_IRQHandler+0x404>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d03b      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a63      	ldr	r2, [pc, #396]	@ (8007ce4 <HAL_DMA_IRQHandler+0x408>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d036      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a61      	ldr	r2, [pc, #388]	@ (8007ce8 <HAL_DMA_IRQHandler+0x40c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d031      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a60      	ldr	r2, [pc, #384]	@ (8007cec <HAL_DMA_IRQHandler+0x410>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d02c      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a5e      	ldr	r2, [pc, #376]	@ (8007cf0 <HAL_DMA_IRQHandler+0x414>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d027      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a5d      	ldr	r2, [pc, #372]	@ (8007cf4 <HAL_DMA_IRQHandler+0x418>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d022      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a5b      	ldr	r2, [pc, #364]	@ (8007cf8 <HAL_DMA_IRQHandler+0x41c>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d01d      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a5a      	ldr	r2, [pc, #360]	@ (8007cfc <HAL_DMA_IRQHandler+0x420>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d018      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a58      	ldr	r2, [pc, #352]	@ (8007d00 <HAL_DMA_IRQHandler+0x424>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d013      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a57      	ldr	r2, [pc, #348]	@ (8007d04 <HAL_DMA_IRQHandler+0x428>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d00e      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a55      	ldr	r2, [pc, #340]	@ (8007d08 <HAL_DMA_IRQHandler+0x42c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d009      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a54      	ldr	r2, [pc, #336]	@ (8007d0c <HAL_DMA_IRQHandler+0x430>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d004      	beq.n	8007bca <HAL_DMA_IRQHandler+0x2ee>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a52      	ldr	r2, [pc, #328]	@ (8007d10 <HAL_DMA_IRQHandler+0x434>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d10a      	bne.n	8007be0 <HAL_DMA_IRQHandler+0x304>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	e003      	b.n	8007be8 <HAL_DMA_IRQHandler+0x30c>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2300      	movs	r3, #0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d00d      	beq.n	8007c08 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bf0:	f003 031f 	and.w	r3, r3, #31
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	409a      	lsls	r2, r3
 8007bf8:	6a3b      	ldr	r3, [r7, #32]
 8007bfa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c00:	f043 0202 	orr.w	r2, r3, #2
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c0c:	f003 031f 	and.w	r3, r3, #31
 8007c10:	2204      	movs	r2, #4
 8007c12:	409a      	lsls	r2, r3
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	4013      	ands	r3, r2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 808f 	beq.w	8007d3c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a2c      	ldr	r2, [pc, #176]	@ (8007cd4 <HAL_DMA_IRQHandler+0x3f8>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d04a      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a2a      	ldr	r2, [pc, #168]	@ (8007cd8 <HAL_DMA_IRQHandler+0x3fc>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d045      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a29      	ldr	r2, [pc, #164]	@ (8007cdc <HAL_DMA_IRQHandler+0x400>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d040      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a27      	ldr	r2, [pc, #156]	@ (8007ce0 <HAL_DMA_IRQHandler+0x404>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d03b      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a26      	ldr	r2, [pc, #152]	@ (8007ce4 <HAL_DMA_IRQHandler+0x408>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d036      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a24      	ldr	r2, [pc, #144]	@ (8007ce8 <HAL_DMA_IRQHandler+0x40c>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d031      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a23      	ldr	r2, [pc, #140]	@ (8007cec <HAL_DMA_IRQHandler+0x410>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d02c      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a21      	ldr	r2, [pc, #132]	@ (8007cf0 <HAL_DMA_IRQHandler+0x414>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d027      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a20      	ldr	r2, [pc, #128]	@ (8007cf4 <HAL_DMA_IRQHandler+0x418>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d022      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8007cf8 <HAL_DMA_IRQHandler+0x41c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d01d      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a1d      	ldr	r2, [pc, #116]	@ (8007cfc <HAL_DMA_IRQHandler+0x420>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d018      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a1b      	ldr	r2, [pc, #108]	@ (8007d00 <HAL_DMA_IRQHandler+0x424>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d013      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8007d04 <HAL_DMA_IRQHandler+0x428>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d00e      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a18      	ldr	r2, [pc, #96]	@ (8007d08 <HAL_DMA_IRQHandler+0x42c>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d009      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a17      	ldr	r2, [pc, #92]	@ (8007d0c <HAL_DMA_IRQHandler+0x430>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d004      	beq.n	8007cbe <HAL_DMA_IRQHandler+0x3e2>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a15      	ldr	r2, [pc, #84]	@ (8007d10 <HAL_DMA_IRQHandler+0x434>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d12a      	bne.n	8007d14 <HAL_DMA_IRQHandler+0x438>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	bf14      	ite	ne
 8007ccc:	2301      	movne	r3, #1
 8007cce:	2300      	moveq	r3, #0
 8007cd0:	b2db      	uxtb	r3, r3
 8007cd2:	e023      	b.n	8007d1c <HAL_DMA_IRQHandler+0x440>
 8007cd4:	40020010 	.word	0x40020010
 8007cd8:	40020028 	.word	0x40020028
 8007cdc:	40020040 	.word	0x40020040
 8007ce0:	40020058 	.word	0x40020058
 8007ce4:	40020070 	.word	0x40020070
 8007ce8:	40020088 	.word	0x40020088
 8007cec:	400200a0 	.word	0x400200a0
 8007cf0:	400200b8 	.word	0x400200b8
 8007cf4:	40020410 	.word	0x40020410
 8007cf8:	40020428 	.word	0x40020428
 8007cfc:	40020440 	.word	0x40020440
 8007d00:	40020458 	.word	0x40020458
 8007d04:	40020470 	.word	0x40020470
 8007d08:	40020488 	.word	0x40020488
 8007d0c:	400204a0 	.word	0x400204a0
 8007d10:	400204b8 	.word	0x400204b8
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00d      	beq.n	8007d3c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d24:	f003 031f 	and.w	r3, r3, #31
 8007d28:	2204      	movs	r2, #4
 8007d2a:	409a      	lsls	r2, r3
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d34:	f043 0204 	orr.w	r2, r3, #4
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007d40:	f003 031f 	and.w	r3, r3, #31
 8007d44:	2210      	movs	r2, #16
 8007d46:	409a      	lsls	r2, r3
 8007d48:	69bb      	ldr	r3, [r7, #24]
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	f000 80a6 	beq.w	8007e9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a85      	ldr	r2, [pc, #532]	@ (8007f6c <HAL_DMA_IRQHandler+0x690>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d04a      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a83      	ldr	r2, [pc, #524]	@ (8007f70 <HAL_DMA_IRQHandler+0x694>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d045      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a82      	ldr	r2, [pc, #520]	@ (8007f74 <HAL_DMA_IRQHandler+0x698>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d040      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a80      	ldr	r2, [pc, #512]	@ (8007f78 <HAL_DMA_IRQHandler+0x69c>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d03b      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a7f      	ldr	r2, [pc, #508]	@ (8007f7c <HAL_DMA_IRQHandler+0x6a0>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d036      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a7d      	ldr	r2, [pc, #500]	@ (8007f80 <HAL_DMA_IRQHandler+0x6a4>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d031      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a7c      	ldr	r2, [pc, #496]	@ (8007f84 <HAL_DMA_IRQHandler+0x6a8>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d02c      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a7a      	ldr	r2, [pc, #488]	@ (8007f88 <HAL_DMA_IRQHandler+0x6ac>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d027      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a79      	ldr	r2, [pc, #484]	@ (8007f8c <HAL_DMA_IRQHandler+0x6b0>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d022      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a77      	ldr	r2, [pc, #476]	@ (8007f90 <HAL_DMA_IRQHandler+0x6b4>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d01d      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a76      	ldr	r2, [pc, #472]	@ (8007f94 <HAL_DMA_IRQHandler+0x6b8>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d018      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a74      	ldr	r2, [pc, #464]	@ (8007f98 <HAL_DMA_IRQHandler+0x6bc>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d013      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a73      	ldr	r2, [pc, #460]	@ (8007f9c <HAL_DMA_IRQHandler+0x6c0>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d00e      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a71      	ldr	r2, [pc, #452]	@ (8007fa0 <HAL_DMA_IRQHandler+0x6c4>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d009      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a70      	ldr	r2, [pc, #448]	@ (8007fa4 <HAL_DMA_IRQHandler+0x6c8>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d004      	beq.n	8007df2 <HAL_DMA_IRQHandler+0x516>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a6e      	ldr	r2, [pc, #440]	@ (8007fa8 <HAL_DMA_IRQHandler+0x6cc>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d10a      	bne.n	8007e08 <HAL_DMA_IRQHandler+0x52c>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0308 	and.w	r3, r3, #8
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	bf14      	ite	ne
 8007e00:	2301      	movne	r3, #1
 8007e02:	2300      	moveq	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	e009      	b.n	8007e1c <HAL_DMA_IRQHandler+0x540>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0304 	and.w	r3, r3, #4
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bf14      	ite	ne
 8007e16:	2301      	movne	r3, #1
 8007e18:	2300      	moveq	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d03e      	beq.n	8007e9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007e24:	f003 031f 	and.w	r3, r3, #31
 8007e28:	2210      	movs	r2, #16
 8007e2a:	409a      	lsls	r2, r3
 8007e2c:	6a3b      	ldr	r3, [r7, #32]
 8007e2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d018      	beq.n	8007e70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d108      	bne.n	8007e5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d024      	beq.n	8007e9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	4798      	blx	r3
 8007e5c:	e01f      	b.n	8007e9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d01b      	beq.n	8007e9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	4798      	blx	r3
 8007e6e:	e016      	b.n	8007e9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d107      	bne.n	8007e8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0208 	bic.w	r2, r2, #8
 8007e8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007ea2:	f003 031f 	and.w	r3, r3, #31
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	409a      	lsls	r2, r3
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	4013      	ands	r3, r2
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	f000 8110 	beq.w	80080d4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8007f6c <HAL_DMA_IRQHandler+0x690>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d04a      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a2b      	ldr	r2, [pc, #172]	@ (8007f70 <HAL_DMA_IRQHandler+0x694>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d045      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a29      	ldr	r2, [pc, #164]	@ (8007f74 <HAL_DMA_IRQHandler+0x698>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d040      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a28      	ldr	r2, [pc, #160]	@ (8007f78 <HAL_DMA_IRQHandler+0x69c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d03b      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a26      	ldr	r2, [pc, #152]	@ (8007f7c <HAL_DMA_IRQHandler+0x6a0>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d036      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a25      	ldr	r2, [pc, #148]	@ (8007f80 <HAL_DMA_IRQHandler+0x6a4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d031      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a23      	ldr	r2, [pc, #140]	@ (8007f84 <HAL_DMA_IRQHandler+0x6a8>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d02c      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a22      	ldr	r2, [pc, #136]	@ (8007f88 <HAL_DMA_IRQHandler+0x6ac>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d027      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a20      	ldr	r2, [pc, #128]	@ (8007f8c <HAL_DMA_IRQHandler+0x6b0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d022      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a1f      	ldr	r2, [pc, #124]	@ (8007f90 <HAL_DMA_IRQHandler+0x6b4>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d01d      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8007f94 <HAL_DMA_IRQHandler+0x6b8>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d018      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1c      	ldr	r2, [pc, #112]	@ (8007f98 <HAL_DMA_IRQHandler+0x6bc>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d013      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a1a      	ldr	r2, [pc, #104]	@ (8007f9c <HAL_DMA_IRQHandler+0x6c0>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00e      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4a19      	ldr	r2, [pc, #100]	@ (8007fa0 <HAL_DMA_IRQHandler+0x6c4>)
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d009      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a17      	ldr	r2, [pc, #92]	@ (8007fa4 <HAL_DMA_IRQHandler+0x6c8>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d004      	beq.n	8007f54 <HAL_DMA_IRQHandler+0x678>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	4a16      	ldr	r2, [pc, #88]	@ (8007fa8 <HAL_DMA_IRQHandler+0x6cc>)
 8007f50:	4293      	cmp	r3, r2
 8007f52:	d12b      	bne.n	8007fac <HAL_DMA_IRQHandler+0x6d0>
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0310 	and.w	r3, r3, #16
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	bf14      	ite	ne
 8007f62:	2301      	movne	r3, #1
 8007f64:	2300      	moveq	r3, #0
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	e02a      	b.n	8007fc0 <HAL_DMA_IRQHandler+0x6e4>
 8007f6a:	bf00      	nop
 8007f6c:	40020010 	.word	0x40020010
 8007f70:	40020028 	.word	0x40020028
 8007f74:	40020040 	.word	0x40020040
 8007f78:	40020058 	.word	0x40020058
 8007f7c:	40020070 	.word	0x40020070
 8007f80:	40020088 	.word	0x40020088
 8007f84:	400200a0 	.word	0x400200a0
 8007f88:	400200b8 	.word	0x400200b8
 8007f8c:	40020410 	.word	0x40020410
 8007f90:	40020428 	.word	0x40020428
 8007f94:	40020440 	.word	0x40020440
 8007f98:	40020458 	.word	0x40020458
 8007f9c:	40020470 	.word	0x40020470
 8007fa0:	40020488 	.word	0x40020488
 8007fa4:	400204a0 	.word	0x400204a0
 8007fa8:	400204b8 	.word	0x400204b8
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0302 	and.w	r3, r3, #2
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bf14      	ite	ne
 8007fba:	2301      	movne	r3, #1
 8007fbc:	2300      	moveq	r3, #0
 8007fbe:	b2db      	uxtb	r3, r3
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f000 8087 	beq.w	80080d4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fca:	f003 031f 	and.w	r3, r3, #31
 8007fce:	2220      	movs	r2, #32
 8007fd0:	409a      	lsls	r2, r3
 8007fd2:	6a3b      	ldr	r3, [r7, #32]
 8007fd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d139      	bne.n	8008056 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f022 0216 	bic.w	r2, r2, #22
 8007ff0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	695a      	ldr	r2, [r3, #20]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008000:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008006:	2b00      	cmp	r3, #0
 8008008:	d103      	bne.n	8008012 <HAL_DMA_IRQHandler+0x736>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 0208 	bic.w	r2, r2, #8
 8008020:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008026:	f003 031f 	and.w	r3, r3, #31
 800802a:	223f      	movs	r2, #63	@ 0x3f
 800802c:	409a      	lsls	r2, r3
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2201      	movs	r2, #1
 8008036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008046:	2b00      	cmp	r3, #0
 8008048:	f000 834a 	beq.w	80086e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	4798      	blx	r3
          }
          return;
 8008054:	e344      	b.n	80086e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d018      	beq.n	8008096 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d108      	bne.n	8008084 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008076:	2b00      	cmp	r3, #0
 8008078:	d02c      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	4798      	blx	r3
 8008082:	e027      	b.n	80080d4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008088:	2b00      	cmp	r3, #0
 800808a:	d023      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	4798      	blx	r3
 8008094:	e01e      	b.n	80080d4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d10f      	bne.n	80080c4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f022 0210 	bic.w	r2, r2, #16
 80080b2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8306 	beq.w	80086ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	f000 8088 	beq.w	80081fc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2204      	movs	r2, #4
 80080f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a7a      	ldr	r2, [pc, #488]	@ (80082e4 <HAL_DMA_IRQHandler+0xa08>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d04a      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a79      	ldr	r2, [pc, #484]	@ (80082e8 <HAL_DMA_IRQHandler+0xa0c>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d045      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a77      	ldr	r2, [pc, #476]	@ (80082ec <HAL_DMA_IRQHandler+0xa10>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d040      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a76      	ldr	r2, [pc, #472]	@ (80082f0 <HAL_DMA_IRQHandler+0xa14>)
 8008118:	4293      	cmp	r3, r2
 800811a:	d03b      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a74      	ldr	r2, [pc, #464]	@ (80082f4 <HAL_DMA_IRQHandler+0xa18>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d036      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a73      	ldr	r2, [pc, #460]	@ (80082f8 <HAL_DMA_IRQHandler+0xa1c>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d031      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a71      	ldr	r2, [pc, #452]	@ (80082fc <HAL_DMA_IRQHandler+0xa20>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d02c      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a70      	ldr	r2, [pc, #448]	@ (8008300 <HAL_DMA_IRQHandler+0xa24>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d027      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a6e      	ldr	r2, [pc, #440]	@ (8008304 <HAL_DMA_IRQHandler+0xa28>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d022      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a6d      	ldr	r2, [pc, #436]	@ (8008308 <HAL_DMA_IRQHandler+0xa2c>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d01d      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a6b      	ldr	r2, [pc, #428]	@ (800830c <HAL_DMA_IRQHandler+0xa30>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d018      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a6a      	ldr	r2, [pc, #424]	@ (8008310 <HAL_DMA_IRQHandler+0xa34>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d013      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a68      	ldr	r2, [pc, #416]	@ (8008314 <HAL_DMA_IRQHandler+0xa38>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d00e      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a67      	ldr	r2, [pc, #412]	@ (8008318 <HAL_DMA_IRQHandler+0xa3c>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d009      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a65      	ldr	r2, [pc, #404]	@ (800831c <HAL_DMA_IRQHandler+0xa40>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d004      	beq.n	8008194 <HAL_DMA_IRQHandler+0x8b8>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	4a64      	ldr	r2, [pc, #400]	@ (8008320 <HAL_DMA_IRQHandler+0xa44>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d108      	bne.n	80081a6 <HAL_DMA_IRQHandler+0x8ca>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f022 0201 	bic.w	r2, r2, #1
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	e007      	b.n	80081b6 <HAL_DMA_IRQHandler+0x8da>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f022 0201 	bic.w	r2, r2, #1
 80081b4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3301      	adds	r3, #1
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081be:	429a      	cmp	r2, r3
 80081c0:	d307      	bcc.n	80081d2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1f2      	bne.n	80081b6 <HAL_DMA_IRQHandler+0x8da>
 80081d0:	e000      	b.n	80081d4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80081d2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d004      	beq.n	80081ec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2203      	movs	r2, #3
 80081e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80081ea:	e003      	b.n	80081f4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008200:	2b00      	cmp	r3, #0
 8008202:	f000 8272 	beq.w	80086ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	4798      	blx	r3
 800820e:	e26c      	b.n	80086ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a43      	ldr	r2, [pc, #268]	@ (8008324 <HAL_DMA_IRQHandler+0xa48>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d022      	beq.n	8008260 <HAL_DMA_IRQHandler+0x984>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a42      	ldr	r2, [pc, #264]	@ (8008328 <HAL_DMA_IRQHandler+0xa4c>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d01d      	beq.n	8008260 <HAL_DMA_IRQHandler+0x984>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a40      	ldr	r2, [pc, #256]	@ (800832c <HAL_DMA_IRQHandler+0xa50>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d018      	beq.n	8008260 <HAL_DMA_IRQHandler+0x984>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a3f      	ldr	r2, [pc, #252]	@ (8008330 <HAL_DMA_IRQHandler+0xa54>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d013      	beq.n	8008260 <HAL_DMA_IRQHandler+0x984>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a3d      	ldr	r2, [pc, #244]	@ (8008334 <HAL_DMA_IRQHandler+0xa58>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d00e      	beq.n	8008260 <HAL_DMA_IRQHandler+0x984>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a3c      	ldr	r2, [pc, #240]	@ (8008338 <HAL_DMA_IRQHandler+0xa5c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d009      	beq.n	8008260 <HAL_DMA_IRQHandler+0x984>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a3a      	ldr	r2, [pc, #232]	@ (800833c <HAL_DMA_IRQHandler+0xa60>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d004      	beq.n	8008260 <HAL_DMA_IRQHandler+0x984>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a39      	ldr	r2, [pc, #228]	@ (8008340 <HAL_DMA_IRQHandler+0xa64>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d101      	bne.n	8008264 <HAL_DMA_IRQHandler+0x988>
 8008260:	2301      	movs	r3, #1
 8008262:	e000      	b.n	8008266 <HAL_DMA_IRQHandler+0x98a>
 8008264:	2300      	movs	r3, #0
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 823f 	beq.w	80086ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008278:	f003 031f 	and.w	r3, r3, #31
 800827c:	2204      	movs	r2, #4
 800827e:	409a      	lsls	r2, r3
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	4013      	ands	r3, r2
 8008284:	2b00      	cmp	r3, #0
 8008286:	f000 80cd 	beq.w	8008424 <HAL_DMA_IRQHandler+0xb48>
 800828a:	693b      	ldr	r3, [r7, #16]
 800828c:	f003 0304 	and.w	r3, r3, #4
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 80c7 	beq.w	8008424 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800829a:	f003 031f 	and.w	r3, r3, #31
 800829e:	2204      	movs	r2, #4
 80082a0:	409a      	lsls	r2, r3
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082a6:	693b      	ldr	r3, [r7, #16]
 80082a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d049      	beq.n	8008344 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80082b0:	693b      	ldr	r3, [r7, #16]
 80082b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d109      	bne.n	80082ce <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082be:	2b00      	cmp	r3, #0
 80082c0:	f000 8210 	beq.w	80086e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082cc:	e20a      	b.n	80086e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 8206 	beq.w	80086e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082e0:	e200      	b.n	80086e4 <HAL_DMA_IRQHandler+0xe08>
 80082e2:	bf00      	nop
 80082e4:	40020010 	.word	0x40020010
 80082e8:	40020028 	.word	0x40020028
 80082ec:	40020040 	.word	0x40020040
 80082f0:	40020058 	.word	0x40020058
 80082f4:	40020070 	.word	0x40020070
 80082f8:	40020088 	.word	0x40020088
 80082fc:	400200a0 	.word	0x400200a0
 8008300:	400200b8 	.word	0x400200b8
 8008304:	40020410 	.word	0x40020410
 8008308:	40020428 	.word	0x40020428
 800830c:	40020440 	.word	0x40020440
 8008310:	40020458 	.word	0x40020458
 8008314:	40020470 	.word	0x40020470
 8008318:	40020488 	.word	0x40020488
 800831c:	400204a0 	.word	0x400204a0
 8008320:	400204b8 	.word	0x400204b8
 8008324:	58025408 	.word	0x58025408
 8008328:	5802541c 	.word	0x5802541c
 800832c:	58025430 	.word	0x58025430
 8008330:	58025444 	.word	0x58025444
 8008334:	58025458 	.word	0x58025458
 8008338:	5802546c 	.word	0x5802546c
 800833c:	58025480 	.word	0x58025480
 8008340:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	d160      	bne.n	8008410 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a7f      	ldr	r2, [pc, #508]	@ (8008550 <HAL_DMA_IRQHandler+0xc74>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d04a      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a7d      	ldr	r2, [pc, #500]	@ (8008554 <HAL_DMA_IRQHandler+0xc78>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d045      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a7c      	ldr	r2, [pc, #496]	@ (8008558 <HAL_DMA_IRQHandler+0xc7c>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d040      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a7a      	ldr	r2, [pc, #488]	@ (800855c <HAL_DMA_IRQHandler+0xc80>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d03b      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a79      	ldr	r2, [pc, #484]	@ (8008560 <HAL_DMA_IRQHandler+0xc84>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d036      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a77      	ldr	r2, [pc, #476]	@ (8008564 <HAL_DMA_IRQHandler+0xc88>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d031      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a76      	ldr	r2, [pc, #472]	@ (8008568 <HAL_DMA_IRQHandler+0xc8c>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d02c      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a74      	ldr	r2, [pc, #464]	@ (800856c <HAL_DMA_IRQHandler+0xc90>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d027      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a73      	ldr	r2, [pc, #460]	@ (8008570 <HAL_DMA_IRQHandler+0xc94>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d022      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a71      	ldr	r2, [pc, #452]	@ (8008574 <HAL_DMA_IRQHandler+0xc98>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d01d      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a70      	ldr	r2, [pc, #448]	@ (8008578 <HAL_DMA_IRQHandler+0xc9c>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d018      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a6e      	ldr	r2, [pc, #440]	@ (800857c <HAL_DMA_IRQHandler+0xca0>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d013      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a6d      	ldr	r2, [pc, #436]	@ (8008580 <HAL_DMA_IRQHandler+0xca4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d00e      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a6b      	ldr	r2, [pc, #428]	@ (8008584 <HAL_DMA_IRQHandler+0xca8>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d009      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a6a      	ldr	r2, [pc, #424]	@ (8008588 <HAL_DMA_IRQHandler+0xcac>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d004      	beq.n	80083ee <HAL_DMA_IRQHandler+0xb12>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a68      	ldr	r2, [pc, #416]	@ (800858c <HAL_DMA_IRQHandler+0xcb0>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d108      	bne.n	8008400 <HAL_DMA_IRQHandler+0xb24>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f022 0208 	bic.w	r2, r2, #8
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	e007      	b.n	8008410 <HAL_DMA_IRQHandler+0xb34>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	681a      	ldr	r2, [r3, #0]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0204 	bic.w	r2, r2, #4
 800840e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008414:	2b00      	cmp	r3, #0
 8008416:	f000 8165 	beq.w	80086e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008422:	e15f      	b.n	80086e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	2202      	movs	r2, #2
 800842e:	409a      	lsls	r2, r3
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	4013      	ands	r3, r2
 8008434:	2b00      	cmp	r3, #0
 8008436:	f000 80c5 	beq.w	80085c4 <HAL_DMA_IRQHandler+0xce8>
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f003 0302 	and.w	r3, r3, #2
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80bf 	beq.w	80085c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800844a:	f003 031f 	and.w	r3, r3, #31
 800844e:	2202      	movs	r2, #2
 8008450:	409a      	lsls	r2, r3
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800845c:	2b00      	cmp	r3, #0
 800845e:	d018      	beq.n	8008492 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008466:	2b00      	cmp	r3, #0
 8008468:	d109      	bne.n	800847e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 813a 	beq.w	80086e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800847c:	e134      	b.n	80086e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 8130 	beq.w	80086e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008490:	e12a      	b.n	80086e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	f003 0320 	and.w	r3, r3, #32
 8008498:	2b00      	cmp	r3, #0
 800849a:	f040 8089 	bne.w	80085b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a2b      	ldr	r2, [pc, #172]	@ (8008550 <HAL_DMA_IRQHandler+0xc74>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d04a      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a29      	ldr	r2, [pc, #164]	@ (8008554 <HAL_DMA_IRQHandler+0xc78>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d045      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a28      	ldr	r2, [pc, #160]	@ (8008558 <HAL_DMA_IRQHandler+0xc7c>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d040      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a26      	ldr	r2, [pc, #152]	@ (800855c <HAL_DMA_IRQHandler+0xc80>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d03b      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4a25      	ldr	r2, [pc, #148]	@ (8008560 <HAL_DMA_IRQHandler+0xc84>)
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d036      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	4a23      	ldr	r2, [pc, #140]	@ (8008564 <HAL_DMA_IRQHandler+0xc88>)
 80084d6:	4293      	cmp	r3, r2
 80084d8:	d031      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a22      	ldr	r2, [pc, #136]	@ (8008568 <HAL_DMA_IRQHandler+0xc8c>)
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d02c      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	4a20      	ldr	r2, [pc, #128]	@ (800856c <HAL_DMA_IRQHandler+0xc90>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d027      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008570 <HAL_DMA_IRQHandler+0xc94>)
 80084f4:	4293      	cmp	r3, r2
 80084f6:	d022      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008574 <HAL_DMA_IRQHandler+0xc98>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d01d      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a1c      	ldr	r2, [pc, #112]	@ (8008578 <HAL_DMA_IRQHandler+0xc9c>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d018      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a1a      	ldr	r2, [pc, #104]	@ (800857c <HAL_DMA_IRQHandler+0xca0>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a19      	ldr	r2, [pc, #100]	@ (8008580 <HAL_DMA_IRQHandler+0xca4>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d00e      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a17      	ldr	r2, [pc, #92]	@ (8008584 <HAL_DMA_IRQHandler+0xca8>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d009      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4a16      	ldr	r2, [pc, #88]	@ (8008588 <HAL_DMA_IRQHandler+0xcac>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d004      	beq.n	800853e <HAL_DMA_IRQHandler+0xc62>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a14      	ldr	r2, [pc, #80]	@ (800858c <HAL_DMA_IRQHandler+0xcb0>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d128      	bne.n	8008590 <HAL_DMA_IRQHandler+0xcb4>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	681a      	ldr	r2, [r3, #0]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f022 0214 	bic.w	r2, r2, #20
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	e027      	b.n	80085a0 <HAL_DMA_IRQHandler+0xcc4>
 8008550:	40020010 	.word	0x40020010
 8008554:	40020028 	.word	0x40020028
 8008558:	40020040 	.word	0x40020040
 800855c:	40020058 	.word	0x40020058
 8008560:	40020070 	.word	0x40020070
 8008564:	40020088 	.word	0x40020088
 8008568:	400200a0 	.word	0x400200a0
 800856c:	400200b8 	.word	0x400200b8
 8008570:	40020410 	.word	0x40020410
 8008574:	40020428 	.word	0x40020428
 8008578:	40020440 	.word	0x40020440
 800857c:	40020458 	.word	0x40020458
 8008580:	40020470 	.word	0x40020470
 8008584:	40020488 	.word	0x40020488
 8008588:	400204a0 	.word	0x400204a0
 800858c:	400204b8 	.word	0x400204b8
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 020a 	bic.w	r2, r2, #10
 800859e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	f000 8097 	beq.w	80086e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80085c2:	e091      	b.n	80086e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085c8:	f003 031f 	and.w	r3, r3, #31
 80085cc:	2208      	movs	r2, #8
 80085ce:	409a      	lsls	r2, r3
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	4013      	ands	r3, r2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 8088 	beq.w	80086ea <HAL_DMA_IRQHandler+0xe0e>
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	f000 8082 	beq.w	80086ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a41      	ldr	r2, [pc, #260]	@ (80086f0 <HAL_DMA_IRQHandler+0xe14>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d04a      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a3f      	ldr	r2, [pc, #252]	@ (80086f4 <HAL_DMA_IRQHandler+0xe18>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d045      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a3e      	ldr	r2, [pc, #248]	@ (80086f8 <HAL_DMA_IRQHandler+0xe1c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d040      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a3c      	ldr	r2, [pc, #240]	@ (80086fc <HAL_DMA_IRQHandler+0xe20>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d03b      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a3b      	ldr	r2, [pc, #236]	@ (8008700 <HAL_DMA_IRQHandler+0xe24>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d036      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a39      	ldr	r2, [pc, #228]	@ (8008704 <HAL_DMA_IRQHandler+0xe28>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d031      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a38      	ldr	r2, [pc, #224]	@ (8008708 <HAL_DMA_IRQHandler+0xe2c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d02c      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a36      	ldr	r2, [pc, #216]	@ (800870c <HAL_DMA_IRQHandler+0xe30>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d027      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a35      	ldr	r2, [pc, #212]	@ (8008710 <HAL_DMA_IRQHandler+0xe34>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d022      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a33      	ldr	r2, [pc, #204]	@ (8008714 <HAL_DMA_IRQHandler+0xe38>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d01d      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a32      	ldr	r2, [pc, #200]	@ (8008718 <HAL_DMA_IRQHandler+0xe3c>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d018      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a30      	ldr	r2, [pc, #192]	@ (800871c <HAL_DMA_IRQHandler+0xe40>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d013      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a2f      	ldr	r2, [pc, #188]	@ (8008720 <HAL_DMA_IRQHandler+0xe44>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d00e      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a2d      	ldr	r2, [pc, #180]	@ (8008724 <HAL_DMA_IRQHandler+0xe48>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d009      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a2c      	ldr	r2, [pc, #176]	@ (8008728 <HAL_DMA_IRQHandler+0xe4c>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d004      	beq.n	8008686 <HAL_DMA_IRQHandler+0xdaa>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a2a      	ldr	r2, [pc, #168]	@ (800872c <HAL_DMA_IRQHandler+0xe50>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d108      	bne.n	8008698 <HAL_DMA_IRQHandler+0xdbc>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f022 021c 	bic.w	r2, r2, #28
 8008694:	601a      	str	r2, [r3, #0]
 8008696:	e007      	b.n	80086a8 <HAL_DMA_IRQHandler+0xdcc>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 020e 	bic.w	r2, r2, #14
 80086a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086ac:	f003 031f 	and.w	r3, r3, #31
 80086b0:	2201      	movs	r2, #1
 80086b2:	409a      	lsls	r2, r3
 80086b4:	69fb      	ldr	r3, [r7, #28]
 80086b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2201      	movs	r2, #1
 80086c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d009      	beq.n	80086ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	4798      	blx	r3
 80086de:	e004      	b.n	80086ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80086e0:	bf00      	nop
 80086e2:	e002      	b.n	80086ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086e4:	bf00      	nop
 80086e6:	e000      	b.n	80086ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80086e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80086ea:	3728      	adds	r7, #40	@ 0x28
 80086ec:	46bd      	mov	sp, r7
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	40020010 	.word	0x40020010
 80086f4:	40020028 	.word	0x40020028
 80086f8:	40020040 	.word	0x40020040
 80086fc:	40020058 	.word	0x40020058
 8008700:	40020070 	.word	0x40020070
 8008704:	40020088 	.word	0x40020088
 8008708:	400200a0 	.word	0x400200a0
 800870c:	400200b8 	.word	0x400200b8
 8008710:	40020410 	.word	0x40020410
 8008714:	40020428 	.word	0x40020428
 8008718:	40020440 	.word	0x40020440
 800871c:	40020458 	.word	0x40020458
 8008720:	40020470 	.word	0x40020470
 8008724:	40020488 	.word	0x40020488
 8008728:	400204a0 	.word	0x400204a0
 800872c:	400204b8 	.word	0x400204b8

08008730 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008730:	b480      	push	{r7}
 8008732:	b087      	sub	sp, #28
 8008734:	af00      	add	r7, sp, #0
 8008736:	60f8      	str	r0, [r7, #12]
 8008738:	60b9      	str	r1, [r7, #8]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008742:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008748:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a7f      	ldr	r2, [pc, #508]	@ (800894c <DMA_SetConfig+0x21c>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d072      	beq.n	800883a <DMA_SetConfig+0x10a>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a7d      	ldr	r2, [pc, #500]	@ (8008950 <DMA_SetConfig+0x220>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d06d      	beq.n	800883a <DMA_SetConfig+0x10a>
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a7c      	ldr	r2, [pc, #496]	@ (8008954 <DMA_SetConfig+0x224>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d068      	beq.n	800883a <DMA_SetConfig+0x10a>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a7a      	ldr	r2, [pc, #488]	@ (8008958 <DMA_SetConfig+0x228>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d063      	beq.n	800883a <DMA_SetConfig+0x10a>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a79      	ldr	r2, [pc, #484]	@ (800895c <DMA_SetConfig+0x22c>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d05e      	beq.n	800883a <DMA_SetConfig+0x10a>
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a77      	ldr	r2, [pc, #476]	@ (8008960 <DMA_SetConfig+0x230>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d059      	beq.n	800883a <DMA_SetConfig+0x10a>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a76      	ldr	r2, [pc, #472]	@ (8008964 <DMA_SetConfig+0x234>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d054      	beq.n	800883a <DMA_SetConfig+0x10a>
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a74      	ldr	r2, [pc, #464]	@ (8008968 <DMA_SetConfig+0x238>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d04f      	beq.n	800883a <DMA_SetConfig+0x10a>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a73      	ldr	r2, [pc, #460]	@ (800896c <DMA_SetConfig+0x23c>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d04a      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a71      	ldr	r2, [pc, #452]	@ (8008970 <DMA_SetConfig+0x240>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d045      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a70      	ldr	r2, [pc, #448]	@ (8008974 <DMA_SetConfig+0x244>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d040      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a6e      	ldr	r2, [pc, #440]	@ (8008978 <DMA_SetConfig+0x248>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d03b      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a6d      	ldr	r2, [pc, #436]	@ (800897c <DMA_SetConfig+0x24c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d036      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a6b      	ldr	r2, [pc, #428]	@ (8008980 <DMA_SetConfig+0x250>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d031      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a6a      	ldr	r2, [pc, #424]	@ (8008984 <DMA_SetConfig+0x254>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d02c      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a68      	ldr	r2, [pc, #416]	@ (8008988 <DMA_SetConfig+0x258>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d027      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a67      	ldr	r2, [pc, #412]	@ (800898c <DMA_SetConfig+0x25c>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d022      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a65      	ldr	r2, [pc, #404]	@ (8008990 <DMA_SetConfig+0x260>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d01d      	beq.n	800883a <DMA_SetConfig+0x10a>
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a64      	ldr	r2, [pc, #400]	@ (8008994 <DMA_SetConfig+0x264>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d018      	beq.n	800883a <DMA_SetConfig+0x10a>
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a62      	ldr	r2, [pc, #392]	@ (8008998 <DMA_SetConfig+0x268>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d013      	beq.n	800883a <DMA_SetConfig+0x10a>
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a61      	ldr	r2, [pc, #388]	@ (800899c <DMA_SetConfig+0x26c>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d00e      	beq.n	800883a <DMA_SetConfig+0x10a>
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a5f      	ldr	r2, [pc, #380]	@ (80089a0 <DMA_SetConfig+0x270>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d009      	beq.n	800883a <DMA_SetConfig+0x10a>
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a5e      	ldr	r2, [pc, #376]	@ (80089a4 <DMA_SetConfig+0x274>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d004      	beq.n	800883a <DMA_SetConfig+0x10a>
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a5c      	ldr	r2, [pc, #368]	@ (80089a8 <DMA_SetConfig+0x278>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d101      	bne.n	800883e <DMA_SetConfig+0x10e>
 800883a:	2301      	movs	r3, #1
 800883c:	e000      	b.n	8008840 <DMA_SetConfig+0x110>
 800883e:	2300      	movs	r3, #0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00d      	beq.n	8008860 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008848:	68fa      	ldr	r2, [r7, #12]
 800884a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800884c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008852:	2b00      	cmp	r3, #0
 8008854:	d004      	beq.n	8008860 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800885a:	68fa      	ldr	r2, [r7, #12]
 800885c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800885e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a39      	ldr	r2, [pc, #228]	@ (800894c <DMA_SetConfig+0x21c>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d04a      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a38      	ldr	r2, [pc, #224]	@ (8008950 <DMA_SetConfig+0x220>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d045      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a36      	ldr	r2, [pc, #216]	@ (8008954 <DMA_SetConfig+0x224>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d040      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a35      	ldr	r2, [pc, #212]	@ (8008958 <DMA_SetConfig+0x228>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d03b      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a33      	ldr	r2, [pc, #204]	@ (800895c <DMA_SetConfig+0x22c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d036      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a32      	ldr	r2, [pc, #200]	@ (8008960 <DMA_SetConfig+0x230>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d031      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a30      	ldr	r2, [pc, #192]	@ (8008964 <DMA_SetConfig+0x234>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d02c      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a2f      	ldr	r2, [pc, #188]	@ (8008968 <DMA_SetConfig+0x238>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d027      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a2d      	ldr	r2, [pc, #180]	@ (800896c <DMA_SetConfig+0x23c>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d022      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a2c      	ldr	r2, [pc, #176]	@ (8008970 <DMA_SetConfig+0x240>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d01d      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a2a      	ldr	r2, [pc, #168]	@ (8008974 <DMA_SetConfig+0x244>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d018      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a29      	ldr	r2, [pc, #164]	@ (8008978 <DMA_SetConfig+0x248>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d013      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a27      	ldr	r2, [pc, #156]	@ (800897c <DMA_SetConfig+0x24c>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d00e      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a26      	ldr	r2, [pc, #152]	@ (8008980 <DMA_SetConfig+0x250>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d009      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a24      	ldr	r2, [pc, #144]	@ (8008984 <DMA_SetConfig+0x254>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d004      	beq.n	8008900 <DMA_SetConfig+0x1d0>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	4a23      	ldr	r2, [pc, #140]	@ (8008988 <DMA_SetConfig+0x258>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d101      	bne.n	8008904 <DMA_SetConfig+0x1d4>
 8008900:	2301      	movs	r3, #1
 8008902:	e000      	b.n	8008906 <DMA_SetConfig+0x1d6>
 8008904:	2300      	movs	r3, #0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d059      	beq.n	80089be <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800890e:	f003 031f 	and.w	r3, r3, #31
 8008912:	223f      	movs	r2, #63	@ 0x3f
 8008914:	409a      	lsls	r2, r3
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008928:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	683a      	ldr	r2, [r7, #0]
 8008930:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	2b40      	cmp	r3, #64	@ 0x40
 8008938:	d138      	bne.n	80089ac <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	687a      	ldr	r2, [r7, #4]
 8008940:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800894a:	e086      	b.n	8008a5a <DMA_SetConfig+0x32a>
 800894c:	40020010 	.word	0x40020010
 8008950:	40020028 	.word	0x40020028
 8008954:	40020040 	.word	0x40020040
 8008958:	40020058 	.word	0x40020058
 800895c:	40020070 	.word	0x40020070
 8008960:	40020088 	.word	0x40020088
 8008964:	400200a0 	.word	0x400200a0
 8008968:	400200b8 	.word	0x400200b8
 800896c:	40020410 	.word	0x40020410
 8008970:	40020428 	.word	0x40020428
 8008974:	40020440 	.word	0x40020440
 8008978:	40020458 	.word	0x40020458
 800897c:	40020470 	.word	0x40020470
 8008980:	40020488 	.word	0x40020488
 8008984:	400204a0 	.word	0x400204a0
 8008988:	400204b8 	.word	0x400204b8
 800898c:	58025408 	.word	0x58025408
 8008990:	5802541c 	.word	0x5802541c
 8008994:	58025430 	.word	0x58025430
 8008998:	58025444 	.word	0x58025444
 800899c:	58025458 	.word	0x58025458
 80089a0:	5802546c 	.word	0x5802546c
 80089a4:	58025480 	.word	0x58025480
 80089a8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68ba      	ldr	r2, [r7, #8]
 80089b2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	60da      	str	r2, [r3, #12]
}
 80089bc:	e04d      	b.n	8008a5a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a29      	ldr	r2, [pc, #164]	@ (8008a68 <DMA_SetConfig+0x338>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d022      	beq.n	8008a0e <DMA_SetConfig+0x2de>
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a27      	ldr	r2, [pc, #156]	@ (8008a6c <DMA_SetConfig+0x33c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d01d      	beq.n	8008a0e <DMA_SetConfig+0x2de>
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a26      	ldr	r2, [pc, #152]	@ (8008a70 <DMA_SetConfig+0x340>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d018      	beq.n	8008a0e <DMA_SetConfig+0x2de>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a24      	ldr	r2, [pc, #144]	@ (8008a74 <DMA_SetConfig+0x344>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d013      	beq.n	8008a0e <DMA_SetConfig+0x2de>
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a23      	ldr	r2, [pc, #140]	@ (8008a78 <DMA_SetConfig+0x348>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00e      	beq.n	8008a0e <DMA_SetConfig+0x2de>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a21      	ldr	r2, [pc, #132]	@ (8008a7c <DMA_SetConfig+0x34c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d009      	beq.n	8008a0e <DMA_SetConfig+0x2de>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a20      	ldr	r2, [pc, #128]	@ (8008a80 <DMA_SetConfig+0x350>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d004      	beq.n	8008a0e <DMA_SetConfig+0x2de>
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a1e      	ldr	r2, [pc, #120]	@ (8008a84 <DMA_SetConfig+0x354>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d101      	bne.n	8008a12 <DMA_SetConfig+0x2e2>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e000      	b.n	8008a14 <DMA_SetConfig+0x2e4>
 8008a12:	2300      	movs	r3, #0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d020      	beq.n	8008a5a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a1c:	f003 031f 	and.w	r3, r3, #31
 8008a20:	2201      	movs	r2, #1
 8008a22:	409a      	lsls	r2, r3
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	2b40      	cmp	r3, #64	@ 0x40
 8008a36:	d108      	bne.n	8008a4a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	60da      	str	r2, [r3, #12]
}
 8008a48:	e007      	b.n	8008a5a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	60da      	str	r2, [r3, #12]
}
 8008a5a:	bf00      	nop
 8008a5c:	371c      	adds	r7, #28
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	58025408 	.word	0x58025408
 8008a6c:	5802541c 	.word	0x5802541c
 8008a70:	58025430 	.word	0x58025430
 8008a74:	58025444 	.word	0x58025444
 8008a78:	58025458 	.word	0x58025458
 8008a7c:	5802546c 	.word	0x5802546c
 8008a80:	58025480 	.word	0x58025480
 8008a84:	58025494 	.word	0x58025494

08008a88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b085      	sub	sp, #20
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a42      	ldr	r2, [pc, #264]	@ (8008ba0 <DMA_CalcBaseAndBitshift+0x118>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d04a      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a41      	ldr	r2, [pc, #260]	@ (8008ba4 <DMA_CalcBaseAndBitshift+0x11c>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d045      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a3f      	ldr	r2, [pc, #252]	@ (8008ba8 <DMA_CalcBaseAndBitshift+0x120>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d040      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a3e      	ldr	r2, [pc, #248]	@ (8008bac <DMA_CalcBaseAndBitshift+0x124>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d03b      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a3c      	ldr	r2, [pc, #240]	@ (8008bb0 <DMA_CalcBaseAndBitshift+0x128>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d036      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a3b      	ldr	r2, [pc, #236]	@ (8008bb4 <DMA_CalcBaseAndBitshift+0x12c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d031      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a39      	ldr	r2, [pc, #228]	@ (8008bb8 <DMA_CalcBaseAndBitshift+0x130>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d02c      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a38      	ldr	r2, [pc, #224]	@ (8008bbc <DMA_CalcBaseAndBitshift+0x134>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d027      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a36      	ldr	r2, [pc, #216]	@ (8008bc0 <DMA_CalcBaseAndBitshift+0x138>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d022      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a35      	ldr	r2, [pc, #212]	@ (8008bc4 <DMA_CalcBaseAndBitshift+0x13c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d01d      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4a33      	ldr	r2, [pc, #204]	@ (8008bc8 <DMA_CalcBaseAndBitshift+0x140>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d018      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4a32      	ldr	r2, [pc, #200]	@ (8008bcc <DMA_CalcBaseAndBitshift+0x144>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d013      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a30      	ldr	r2, [pc, #192]	@ (8008bd0 <DMA_CalcBaseAndBitshift+0x148>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d00e      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a2f      	ldr	r2, [pc, #188]	@ (8008bd4 <DMA_CalcBaseAndBitshift+0x14c>)
 8008b18:	4293      	cmp	r3, r2
 8008b1a:	d009      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4a2d      	ldr	r2, [pc, #180]	@ (8008bd8 <DMA_CalcBaseAndBitshift+0x150>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d004      	beq.n	8008b30 <DMA_CalcBaseAndBitshift+0xa8>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8008bdc <DMA_CalcBaseAndBitshift+0x154>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d101      	bne.n	8008b34 <DMA_CalcBaseAndBitshift+0xac>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <DMA_CalcBaseAndBitshift+0xae>
 8008b34:	2300      	movs	r3, #0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d024      	beq.n	8008b84 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	3b10      	subs	r3, #16
 8008b42:	4a27      	ldr	r2, [pc, #156]	@ (8008be0 <DMA_CalcBaseAndBitshift+0x158>)
 8008b44:	fba2 2303 	umull	r2, r3, r2, r3
 8008b48:	091b      	lsrs	r3, r3, #4
 8008b4a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	4a24      	ldr	r2, [pc, #144]	@ (8008be4 <DMA_CalcBaseAndBitshift+0x15c>)
 8008b54:	5cd3      	ldrb	r3, [r2, r3]
 8008b56:	461a      	mov	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2b03      	cmp	r3, #3
 8008b60:	d908      	bls.n	8008b74 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	4b1f      	ldr	r3, [pc, #124]	@ (8008be8 <DMA_CalcBaseAndBitshift+0x160>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	1d1a      	adds	r2, r3, #4
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	659a      	str	r2, [r3, #88]	@ 0x58
 8008b72:	e00d      	b.n	8008b90 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	4b1b      	ldr	r3, [pc, #108]	@ (8008be8 <DMA_CalcBaseAndBitshift+0x160>)
 8008b7c:	4013      	ands	r3, r2
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b82:	e005      	b.n	8008b90 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3714      	adds	r7, #20
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	40020010 	.word	0x40020010
 8008ba4:	40020028 	.word	0x40020028
 8008ba8:	40020040 	.word	0x40020040
 8008bac:	40020058 	.word	0x40020058
 8008bb0:	40020070 	.word	0x40020070
 8008bb4:	40020088 	.word	0x40020088
 8008bb8:	400200a0 	.word	0x400200a0
 8008bbc:	400200b8 	.word	0x400200b8
 8008bc0:	40020410 	.word	0x40020410
 8008bc4:	40020428 	.word	0x40020428
 8008bc8:	40020440 	.word	0x40020440
 8008bcc:	40020458 	.word	0x40020458
 8008bd0:	40020470 	.word	0x40020470
 8008bd4:	40020488 	.word	0x40020488
 8008bd8:	400204a0 	.word	0x400204a0
 8008bdc:	400204b8 	.word	0x400204b8
 8008be0:	aaaaaaab 	.word	0xaaaaaaab
 8008be4:	0801388c 	.word	0x0801388c
 8008be8:	fffffc00 	.word	0xfffffc00

08008bec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	699b      	ldr	r3, [r3, #24]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d120      	bne.n	8008c42 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d858      	bhi.n	8008cba <DMA_CheckFifoParam+0xce>
 8008c08:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <DMA_CheckFifoParam+0x24>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c33 	.word	0x08008c33
 8008c18:	08008c21 	.word	0x08008c21
 8008c1c:	08008cbb 	.word	0x08008cbb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d048      	beq.n	8008cbe <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c30:	e045      	b.n	8008cbe <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008c3a:	d142      	bne.n	8008cc2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c40:	e03f      	b.n	8008cc2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c4a:	d123      	bne.n	8008c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c50:	2b03      	cmp	r3, #3
 8008c52:	d838      	bhi.n	8008cc6 <DMA_CheckFifoParam+0xda>
 8008c54:	a201      	add	r2, pc, #4	@ (adr r2, 8008c5c <DMA_CheckFifoParam+0x70>)
 8008c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5a:	bf00      	nop
 8008c5c:	08008c6d 	.word	0x08008c6d
 8008c60:	08008c73 	.word	0x08008c73
 8008c64:	08008c6d 	.word	0x08008c6d
 8008c68:	08008c85 	.word	0x08008c85
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
        break;
 8008c70:	e030      	b.n	8008cd4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d025      	beq.n	8008cca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c82:	e022      	b.n	8008cca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008c8c:	d11f      	bne.n	8008cce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008c8e:	2301      	movs	r3, #1
 8008c90:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008c92:	e01c      	b.n	8008cce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c98:	2b02      	cmp	r3, #2
 8008c9a:	d902      	bls.n	8008ca2 <DMA_CheckFifoParam+0xb6>
 8008c9c:	2b03      	cmp	r3, #3
 8008c9e:	d003      	beq.n	8008ca8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008ca0:	e018      	b.n	8008cd4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	73fb      	strb	r3, [r7, #15]
        break;
 8008ca6:	e015      	b.n	8008cd4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d00e      	beq.n	8008cd2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cb8:	e00b      	b.n	8008cd2 <DMA_CheckFifoParam+0xe6>
        break;
 8008cba:	bf00      	nop
 8008cbc:	e00a      	b.n	8008cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cbe:	bf00      	nop
 8008cc0:	e008      	b.n	8008cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cc2:	bf00      	nop
 8008cc4:	e006      	b.n	8008cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cc6:	bf00      	nop
 8008cc8:	e004      	b.n	8008cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cca:	bf00      	nop
 8008ccc:	e002      	b.n	8008cd4 <DMA_CheckFifoParam+0xe8>
        break;
 8008cce:	bf00      	nop
 8008cd0:	e000      	b.n	8008cd4 <DMA_CheckFifoParam+0xe8>
    break;
 8008cd2:	bf00      	nop
    }
  }

  return status;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3714      	adds	r7, #20
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop

08008ce4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a38      	ldr	r2, [pc, #224]	@ (8008dd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d022      	beq.n	8008d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a36      	ldr	r2, [pc, #216]	@ (8008ddc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d01d      	beq.n	8008d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a35      	ldr	r2, [pc, #212]	@ (8008de0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d018      	beq.n	8008d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a33      	ldr	r2, [pc, #204]	@ (8008de4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d013      	beq.n	8008d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	4a32      	ldr	r2, [pc, #200]	@ (8008de8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008d20:	4293      	cmp	r3, r2
 8008d22:	d00e      	beq.n	8008d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	4a30      	ldr	r2, [pc, #192]	@ (8008dec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d009      	beq.n	8008d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	4a2f      	ldr	r2, [pc, #188]	@ (8008df0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d004      	beq.n	8008d42 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8008df4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d101      	bne.n	8008d46 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008d42:	2301      	movs	r3, #1
 8008d44:	e000      	b.n	8008d48 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8008d46:	2300      	movs	r3, #0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d01a      	beq.n	8008d82 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	3b08      	subs	r3, #8
 8008d54:	4a28      	ldr	r2, [pc, #160]	@ (8008df8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8008d56:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5a:	091b      	lsrs	r3, r3, #4
 8008d5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	4b26      	ldr	r3, [pc, #152]	@ (8008dfc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008d62:	4413      	add	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	461a      	mov	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a24      	ldr	r2, [pc, #144]	@ (8008e00 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008d70:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f003 031f 	and.w	r3, r3, #31
 8008d78:	2201      	movs	r2, #1
 8008d7a:	409a      	lsls	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008d80:	e024      	b.n	8008dcc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	3b10      	subs	r3, #16
 8008d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8008e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d90:	091b      	lsrs	r3, r3, #4
 8008d92:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4a1c      	ldr	r2, [pc, #112]	@ (8008e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d806      	bhi.n	8008daa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	4a1b      	ldr	r2, [pc, #108]	@ (8008e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d902      	bls.n	8008daa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	3308      	adds	r3, #8
 8008da8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8008daa:	68fa      	ldr	r2, [r7, #12]
 8008dac:	4b18      	ldr	r3, [pc, #96]	@ (8008e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	461a      	mov	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a16      	ldr	r2, [pc, #88]	@ (8008e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008dbc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f003 031f 	and.w	r3, r3, #31
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	409a      	lsls	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8008dcc:	bf00      	nop
 8008dce:	3714      	adds	r7, #20
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr
 8008dd8:	58025408 	.word	0x58025408
 8008ddc:	5802541c 	.word	0x5802541c
 8008de0:	58025430 	.word	0x58025430
 8008de4:	58025444 	.word	0x58025444
 8008de8:	58025458 	.word	0x58025458
 8008dec:	5802546c 	.word	0x5802546c
 8008df0:	58025480 	.word	0x58025480
 8008df4:	58025494 	.word	0x58025494
 8008df8:	cccccccd 	.word	0xcccccccd
 8008dfc:	16009600 	.word	0x16009600
 8008e00:	58025880 	.word	0x58025880
 8008e04:	aaaaaaab 	.word	0xaaaaaaab
 8008e08:	400204b8 	.word	0x400204b8
 8008e0c:	4002040f 	.word	0x4002040f
 8008e10:	10008200 	.word	0x10008200
 8008e14:	40020880 	.word	0x40020880

08008e18 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d04a      	beq.n	8008ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b08      	cmp	r3, #8
 8008e32:	d847      	bhi.n	8008ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a25      	ldr	r2, [pc, #148]	@ (8008ed0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d022      	beq.n	8008e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a24      	ldr	r2, [pc, #144]	@ (8008ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d01d      	beq.n	8008e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a22      	ldr	r2, [pc, #136]	@ (8008ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d018      	beq.n	8008e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a21      	ldr	r2, [pc, #132]	@ (8008edc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d013      	beq.n	8008e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a1f      	ldr	r2, [pc, #124]	@ (8008ee0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d00e      	beq.n	8008e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d009      	beq.n	8008e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a1c      	ldr	r2, [pc, #112]	@ (8008ee8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d004      	beq.n	8008e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a1b      	ldr	r2, [pc, #108]	@ (8008eec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d101      	bne.n	8008e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008e84:	2301      	movs	r3, #1
 8008e86:	e000      	b.n	8008e8a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d00a      	beq.n	8008ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008e8e:	68fa      	ldr	r2, [r7, #12]
 8008e90:	4b17      	ldr	r3, [pc, #92]	@ (8008ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008e92:	4413      	add	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	461a      	mov	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a15      	ldr	r2, [pc, #84]	@ (8008ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008ea0:	671a      	str	r2, [r3, #112]	@ 0x70
 8008ea2:	e009      	b.n	8008eb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	4b14      	ldr	r3, [pc, #80]	@ (8008ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8008ea8:	4413      	add	r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	461a      	mov	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a11      	ldr	r2, [pc, #68]	@ (8008efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8008eb6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	409a      	lsls	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	58025408 	.word	0x58025408
 8008ed4:	5802541c 	.word	0x5802541c
 8008ed8:	58025430 	.word	0x58025430
 8008edc:	58025444 	.word	0x58025444
 8008ee0:	58025458 	.word	0x58025458
 8008ee4:	5802546c 	.word	0x5802546c
 8008ee8:	58025480 	.word	0x58025480
 8008eec:	58025494 	.word	0x58025494
 8008ef0:	1600963f 	.word	0x1600963f
 8008ef4:	58025940 	.word	0x58025940
 8008ef8:	1000823f 	.word	0x1000823f
 8008efc:	40020940 	.word	0x40020940

08008f00 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b098      	sub	sp, #96	@ 0x60
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8008f08:	4a84      	ldr	r2, [pc, #528]	@ (800911c <HAL_FDCAN_Init+0x21c>)
 8008f0a:	f107 030c 	add.w	r3, r7, #12
 8008f0e:	4611      	mov	r1, r2
 8008f10:	224c      	movs	r2, #76	@ 0x4c
 8008f12:	4618      	mov	r0, r3
 8008f14:	f009 fff2 	bl	8012efc <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e1c6      	b.n	80092b0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a7e      	ldr	r2, [pc, #504]	@ (8009120 <HAL_FDCAN_Init+0x220>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d106      	bne.n	8008f3a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8008f34:	461a      	mov	r2, r3
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d106      	bne.n	8008f54 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7f9 ff56 	bl	8002e00 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0210 	bic.w	r2, r2, #16
 8008f62:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f64:	f7fb f924 	bl	80041b0 <HAL_GetTick>
 8008f68:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008f6a:	e014      	b.n	8008f96 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008f6c:	f7fb f920 	bl	80041b0 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b0a      	cmp	r3, #10
 8008f78:	d90d      	bls.n	8008f96 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008f80:	f043 0201 	orr.w	r2, r3, #1
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2203      	movs	r2, #3
 8008f8e:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e18c      	b.n	80092b0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	699b      	ldr	r3, [r3, #24]
 8008f9c:	f003 0308 	and.w	r3, r3, #8
 8008fa0:	2b08      	cmp	r3, #8
 8008fa2:	d0e3      	beq.n	8008f6c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	699a      	ldr	r2, [r3, #24]
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0201 	orr.w	r2, r2, #1
 8008fb2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fb4:	f7fb f8fc 	bl	80041b0 <HAL_GetTick>
 8008fb8:	65f8      	str	r0, [r7, #92]	@ 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008fba:	e014      	b.n	8008fe6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8008fbc:	f7fb f8f8 	bl	80041b0 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	2b0a      	cmp	r3, #10
 8008fc8:	d90d      	bls.n	8008fe6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008fd0:	f043 0201 	orr.w	r2, r3, #1
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2203      	movs	r2, #3
 8008fde:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

      return HAL_ERROR;
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e164      	b.n	80092b0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	f003 0301 	and.w	r3, r3, #1
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0e3      	beq.n	8008fbc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	699a      	ldr	r2, [r3, #24]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f042 0202 	orr.w	r2, r2, #2
 8009002:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	7c1b      	ldrb	r3, [r3, #16]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d108      	bne.n	800901e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699a      	ldr	r2, [r3, #24]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800901a:	619a      	str	r2, [r3, #24]
 800901c:	e007      	b.n	800902e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	699a      	ldr	r2, [r3, #24]
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800902c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	7c5b      	ldrb	r3, [r3, #17]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d108      	bne.n	8009048 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	699a      	ldr	r2, [r3, #24]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009044:	619a      	str	r2, [r3, #24]
 8009046:	e007      	b.n	8009058 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	699a      	ldr	r2, [r3, #24]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009056:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	7c9b      	ldrb	r3, [r3, #18]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d108      	bne.n	8009072 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800906e:	619a      	str	r2, [r3, #24]
 8009070:	e007      	b.n	8009082 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	699a      	ldr	r2, [r3, #24]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009080:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	699b      	ldr	r3, [r3, #24]
 8009088:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	430a      	orrs	r2, r1
 8009096:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	699a      	ldr	r2, [r3, #24]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80090a6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	691a      	ldr	r2, [r3, #16]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f022 0210 	bic.w	r2, r2, #16
 80090b6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d108      	bne.n	80090d2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f042 0204 	orr.w	r2, r2, #4
 80090ce:	619a      	str	r2, [r3, #24]
 80090d0:	e030      	b.n	8009134 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d02c      	beq.n	8009134 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d020      	beq.n	8009124 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	699a      	ldr	r2, [r3, #24]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80090f0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	691a      	ldr	r2, [r3, #16]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0210 	orr.w	r2, r2, #16
 8009100:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	68db      	ldr	r3, [r3, #12]
 8009106:	2b03      	cmp	r3, #3
 8009108:	d114      	bne.n	8009134 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	699a      	ldr	r2, [r3, #24]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f042 0220 	orr.w	r2, r2, #32
 8009118:	619a      	str	r2, [r3, #24]
 800911a:	e00b      	b.n	8009134 <HAL_FDCAN_Init+0x234>
 800911c:	08013828 	.word	0x08013828
 8009120:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	699a      	ldr	r2, [r3, #24]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f042 0220 	orr.w	r2, r2, #32
 8009132:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	3b01      	subs	r3, #1
 800913a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	69db      	ldr	r3, [r3, #28]
 8009140:	3b01      	subs	r3, #1
 8009142:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009144:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a1b      	ldr	r3, [r3, #32]
 800914a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800914c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	695b      	ldr	r3, [r3, #20]
 8009154:	3b01      	subs	r3, #1
 8009156:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800915c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800915e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009168:	d115      	bne.n	8009196 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800916e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009174:	3b01      	subs	r3, #1
 8009176:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009178:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917e:	3b01      	subs	r3, #1
 8009180:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8009182:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800918a:	3b01      	subs	r3, #1
 800918c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8009192:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8009194:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	430a      	orrs	r2, r1
 80091b0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80091bc:	4413      	add	r3, r2
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d011      	beq.n	80091e6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 80091ca:	f023 0107 	bic.w	r1, r3, #7
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80091d2:	009b      	lsls	r3, r3, #2
 80091d4:	3360      	adds	r3, #96	@ 0x60
 80091d6:	443b      	add	r3, r7
 80091d8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	430a      	orrs	r2, r1
 80091e2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d011      	beq.n	8009212 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS,
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80091f6:	f023 0107 	bic.w	r1, r3, #7
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	3360      	adds	r3, #96	@ 0x60
 8009202:	443b      	add	r3, r7
 8009204:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	430a      	orrs	r2, r1
 800920e:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009216:	2b00      	cmp	r3, #0
 8009218:	d012      	beq.n	8009240 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS,
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009222:	f023 0170 	bic.w	r1, r3, #112	@ 0x70
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	3360      	adds	r3, #96	@ 0x60
 800922e:	443b      	add	r3, r7
 8009230:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009234:	011a      	lsls	r2, r3, #4
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	430a      	orrs	r2, r1
 800923c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
               (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009244:	2b00      	cmp	r3, #0
 8009246:	d012      	beq.n	800926e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS,
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009250:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009258:	009b      	lsls	r3, r3, #2
 800925a:	3360      	adds	r3, #96	@ 0x60
 800925c:	443b      	add	r3, r7
 800925e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009262:	021a      	lsls	r2, r3, #8
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	430a      	orrs	r2, r1
 800926a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4a11      	ldr	r2, [pc, #68]	@ (80092b8 <HAL_FDCAN_Init+0x3b8>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d107      	bne.n	8009288 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	685b      	ldr	r3, [r3, #4]
 800927c:	689a      	ldr	r2, [r3, #8]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	f022 0203 	bic.w	r2, r2, #3
 8009286:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2200      	movs	r2, #0
 8009294:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2201      	movs	r2, #1
 800929c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fe5f 	bl	8009f64 <FDCAN_CalcultateRamBlockAddresses>
 80092a6:	4603      	mov	r3, r0
 80092a8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

  /* Return function status */
  return status;
 80092ac:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3760      	adds	r7, #96	@ 0x60
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}
 80092b8:	4000a000 	.word	0x4000a000

080092bc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 80092bc:	b480      	push	{r7}
 80092be:	b087      	sub	sp, #28
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
 80092c4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80092cc:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d002      	beq.n	80092da <HAL_FDCAN_ConfigFilter+0x1e>
 80092d4:	7bfb      	ldrb	r3, [r7, #15]
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d157      	bne.n	800938a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d12b      	bne.n	800933a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68db      	ldr	r3, [r3, #12]
 80092e6:	2b07      	cmp	r3, #7
 80092e8:	d10d      	bne.n	8009306 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	691b      	ldr	r3, [r3, #16]
 80092ee:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	69db      	ldr	r3, [r3, #28]
 80092f4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80092f6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80092fc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80092fe:	f043 5360 	orr.w	r3, r3, #939524096	@ 0x38000000
 8009302:	617b      	str	r3, [r7, #20]
 8009304:	e00e      	b.n	8009324 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8009312:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800931a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8009320:	4313      	orrs	r3, r2
 8009322:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	697a      	ldr	r2, [r7, #20]
 8009336:	601a      	str	r2, [r3, #0]
 8009338:	e025      	b.n	8009386 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	075a      	lsls	r2, r3, #29
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	4313      	orrs	r3, r2
 8009346:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	2b07      	cmp	r3, #7
 800934e:	d103      	bne.n	8009358 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	613b      	str	r3, [r7, #16]
 8009356:	e006      	b.n	8009366 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	079a      	lsls	r2, r3, #30
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	695b      	ldr	r3, [r3, #20]
 8009362:	4313      	orrs	r3, r2
 8009364:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	00db      	lsls	r3, r3, #3
 8009370:	4413      	add	r3, r2
 8009372:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	697a      	ldr	r2, [r7, #20]
 8009378:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	3304      	adds	r3, #4
 800937e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	693a      	ldr	r2, [r7, #16]
 8009384:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	e008      	b.n	800939c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009390:	f043 0202 	orr.w	r2, r3, #2
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800939a:	2301      	movs	r3, #1
  }
}
 800939c:	4618      	mov	r0, r3
 800939e:	371c      	adds	r7, #28
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr

080093a8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	60f8      	str	r0, [r7, #12]
 80093b0:	60b9      	str	r1, [r7, #8]
 80093b2:	607a      	str	r2, [r7, #4]
 80093b4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d110      	bne.n	80093e4 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80093ca:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80093d0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80093dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	e008      	b.n	80093f6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80093ea:	f043 0204 	orr.w	r2, r3, #4
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
  }
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3714      	adds	r7, #20
 80093fa:	46bd      	mov	sp, r7
 80093fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009400:	4770      	bx	lr

08009402 <HAL_FDCAN_ConfigFifoWatermark>:
  *           - 0 and 32, if FIFO is FDCAN_CFG_TX_EVENT_FIFO
  *           - 0 and 64, if FIFO is FDCAN_CFG_RX_FIFO0 or FDCAN_CFG_RX_FIFO1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFifoWatermark(FDCAN_HandleTypeDef *hfdcan, uint32_t FIFO, uint32_t Watermark)
{
 8009402:	b480      	push	{r7}
 8009404:	b085      	sub	sp, #20
 8009406:	af00      	add	r7, sp, #0
 8009408:	60f8      	str	r0, [r7, #12]
 800940a:	60b9      	str	r1, [r7, #8]
 800940c:	607a      	str	r2, [r7, #4]
  else /* (FIFO == FDCAN_CFG_RX_FIFO0) || (FIFO == FDCAN_CFG_RX_FIFO1) */
  {
    assert_param(IS_FDCAN_MAX_VALUE(Watermark, 64U));
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b01      	cmp	r3, #1
 8009418:	d130      	bne.n	800947c <HAL_FDCAN_ConfigFifoWatermark+0x7a>
  {
    /* Set the level for FIFO watermark interrupt */
    if (FIFO == FDCAN_CFG_TX_EVENT_FIFO)
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10d      	bne.n	800943c <HAL_FDCAN_ConfigFifoWatermark+0x3a>
    {
      MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFWM, (Watermark << FDCAN_TXEFC_EFWM_Pos));
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8009428:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	061a      	lsls	r2, r3, #24
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800943a:	e01d      	b.n	8009478 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else if (FIFO == FDCAN_CFG_RX_FIFO0)
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	2b01      	cmp	r3, #1
 8009440:	d10d      	bne.n	800945e <HAL_FDCAN_ConfigFifoWatermark+0x5c>
    {
      MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0WM, (Watermark << FDCAN_RXF0C_F0WM_Pos));
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800944a:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	061a      	lsls	r2, r3, #24
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	430a      	orrs	r2, r1
 8009458:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800945c:	e00c      	b.n	8009478 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else /* FIFO == FDCAN_CFG_RX_FIFO1 */
    {
      MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1WM, (Watermark << FDCAN_RXF1C_F1WM_Pos));
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009466:	f023 41fe 	bic.w	r1, r3, #2130706432	@ 0x7f000000
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	061a      	lsls	r2, r3, #24
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	430a      	orrs	r2, r1
 8009474:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    }

    /* Return function status */
    return HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	e008      	b.n	800948e <HAL_FDCAN_ConfigFifoWatermark+0x8c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009482:	f043 0204 	orr.w	r2, r3, #4
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
  }
}
 800948e:	4618      	mov	r0, r3
 8009490:	3714      	adds	r7, #20
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800949a:	b480      	push	{r7}
 800949c:	b083      	sub	sp, #12
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d111      	bne.n	80094d2 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2202      	movs	r2, #2
 80094b2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	699a      	ldr	r2, [r3, #24]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 0201 	bic.w	r2, r2, #1
 80094c4:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Return function status */
    return HAL_OK;
 80094ce:	2300      	movs	r3, #0
 80094d0:	e008      	b.n	80094e4 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094d8:	f043 0204 	orr.w	r2, r3, #4
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
  }
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009502:	b2db      	uxtb	r3, r3
 8009504:	2b02      	cmp	r3, #2
 8009506:	d141      	bne.n	800958c <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009510:	f003 537c 	and.w	r3, r3, #1056964608	@ 0x3f000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d109      	bne.n	800952c <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800951e:	f043 0220 	orr.w	r2, r3, #32
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 8009528:	2301      	movs	r3, #1
 800952a:	e038      	b.n	800959e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d009      	beq.n	8009550 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009542:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

      return HAL_ERROR;
 800954c:	2301      	movs	r3, #1
 800954e:	e026      	b.n	800959e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8009558:	0c1b      	lsrs	r3, r3, #16
 800955a:	f003 031f 	and.w	r3, r3, #31
 800955e:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	68b9      	ldr	r1, [r7, #8]
 8009566:	68f8      	ldr	r0, [r7, #12]
 8009568:	f000 fe82 	bl	800a270 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2101      	movs	r1, #1
 8009572:	697a      	ldr	r2, [r7, #20]
 8009574:	fa01 f202 	lsl.w	r2, r1, r2
 8009578:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800957c:	2201      	movs	r2, #1
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	409a      	lsls	r2, r3
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    }

    /* Return function status */
    return HAL_OK;
 8009588:	2300      	movs	r3, #0
 800958a:	e008      	b.n	800959e <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009592:	f043 0208 	orr.w	r2, r3, #8
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800959c:	2301      	movs	r3, #1
  }
}
 800959e:	4618      	mov	r0, r3
 80095a0:	3718      	adds	r7, #24
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
	...

080095a8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b08b      	sub	sp, #44	@ 0x2c
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80095b6:	2300      	movs	r3, #0
 80095b8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80095c0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80095c2:	7efb      	ldrb	r3, [r7, #27]
 80095c4:	2b02      	cmp	r3, #2
 80095c6:	f040 8149 	bne.w	800985c <HAL_FDCAN_GetRxMessage+0x2b4>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	2b40      	cmp	r3, #64	@ 0x40
 80095ce:	d14c      	bne.n	800966a <HAL_FDCAN_GetRxMessage+0xc2>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80095d8:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d109      	bne.n	80095f4 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80095e6:	f043 0220 	orr.w	r2, r3, #32
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e13c      	b.n	800986e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80095fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009600:	2b00      	cmp	r3, #0
 8009602:	d109      	bne.n	8009618 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800960a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e12a      	b.n	800986e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009620:	0e1b      	lsrs	r3, r3, #24
 8009622:	f003 0301 	and.w	r3, r3, #1
 8009626:	2b01      	cmp	r3, #1
 8009628:	d10a      	bne.n	8009640 <HAL_FDCAN_GetRxMessage+0x98>
        {
          if (((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009632:	0fdb      	lsrs	r3, r3, #31
 8009634:	f003 0301 	and.w	r3, r3, #1
 8009638:	2b01      	cmp	r3, #1
 800963a:	d101      	bne.n	8009640 <HAL_FDCAN_GetRxMessage+0x98>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800963c:	2301      	movs	r3, #1
 800963e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009648:	0a1b      	lsrs	r3, r3, #8
 800964a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800964e:	69fa      	ldr	r2, [r7, #28]
 8009650:	4413      	add	r3, r2
 8009652:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800965c:	69f9      	ldr	r1, [r7, #28]
 800965e:	fb01 f303 	mul.w	r3, r1, r3
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4413      	add	r3, r2
 8009666:	627b      	str	r3, [r7, #36]	@ 0x24
 8009668:	e068      	b.n	800973c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2b41      	cmp	r3, #65	@ 0x41
 800966e:	d14c      	bne.n	800970a <HAL_FDCAN_GetRxMessage+0x162>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009678:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d109      	bne.n	8009694 <HAL_FDCAN_GetRxMessage+0xec>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009686:	f043 0220 	orr.w	r2, r3, #32
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009690:	2301      	movs	r3, #1
 8009692:	e0ec      	b.n	800986e <HAL_FDCAN_GetRxMessage+0x2c6>
      }

      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800969c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d109      	bne.n	80096b8 <HAL_FDCAN_GetRxMessage+0x110>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096aa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e0da      	b.n	800986e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096c0:	0e1b      	lsrs	r3, r3, #24
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d10a      	bne.n	80096e0 <HAL_FDCAN_GetRxMessage+0x138>
        {
          if (((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80096d2:	0fdb      	lsrs	r3, r3, #31
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d101      	bne.n	80096e0 <HAL_FDCAN_GetRxMessage+0x138>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80096dc:	2301      	movs	r3, #1
 80096de:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80096e8:	0a1b      	lsrs	r3, r3, #8
 80096ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80096ee:	69fa      	ldr	r2, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096fc:	69f9      	ldr	r1, [r7, #28]
 80096fe:	fb01 f303 	mul.w	r3, r1, r3
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	4413      	add	r3, r2
 8009706:	627b      	str	r3, [r7, #36]	@ 0x24
 8009708:	e018      	b.n	800973c <HAL_FDCAN_GetRxMessage+0x194>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800970e:	68ba      	ldr	r2, [r7, #8]
 8009710:	429a      	cmp	r2, r3
 8009712:	d309      	bcc.n	8009728 <HAL_FDCAN_GetRxMessage+0x180>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800971a:	f043 0220 	orr.w	r2, r3, #32
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

        return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e0a2      	b.n	800986e <HAL_FDCAN_GetRxMessage+0x2c6>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009730:	68b9      	ldr	r1, [r7, #8]
 8009732:	fb01 f303 	mul.w	r3, r1, r3
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	4413      	add	r3, r2
 800973a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800973c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d107      	bne.n	8009760 <HAL_FDCAN_GetRxMessage+0x1b8>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8009750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	0c9b      	lsrs	r3, r3, #18
 8009756:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	e005      	b.n	800976c <HAL_FDCAN_GetRxMessage+0x1c4>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800976c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8009778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	3304      	adds	r3, #4
 8009788:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800978a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	b29a      	uxth	r2, r3
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	0c1b      	lsrs	r3, r3, #16
 800979a:	f003 020f 	and.w	r2, r3, #15
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80097a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80097ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80097ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	0e1b      	lsrs	r3, r3, #24
 80097c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	0fda      	lsrs	r2, r3, #31
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80097d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097d4:	3304      	adds	r3, #4
 80097d6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80097d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097da:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80097dc:	2300      	movs	r3, #0
 80097de:	623b      	str	r3, [r7, #32]
 80097e0:	e00a      	b.n	80097f8 <HAL_FDCAN_GetRxMessage+0x250>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	441a      	add	r2, r3
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6a3b      	ldr	r3, [r7, #32]
 80097ec:	440b      	add	r3, r1
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	3301      	adds	r3, #1
 80097f6:	623b      	str	r3, [r7, #32]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	4a1f      	ldr	r2, [pc, #124]	@ (800987c <HAL_FDCAN_GetRxMessage+0x2d4>)
 80097fe:	5cd3      	ldrb	r3, [r2, r3]
 8009800:	461a      	mov	r2, r3
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	4293      	cmp	r3, r2
 8009806:	d3ec      	bcc.n	80097e2 <HAL_FDCAN_GetRxMessage+0x23a>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b40      	cmp	r3, #64	@ 0x40
 800980c:	d105      	bne.n	800981a <HAL_FDCAN_GetRxMessage+0x272>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	69fa      	ldr	r2, [r7, #28]
 8009814:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
 8009818:	e01e      	b.n	8009858 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	2b41      	cmp	r3, #65	@ 0x41
 800981e:	d105      	bne.n	800982c <HAL_FDCAN_GetRxMessage+0x284>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69fa      	ldr	r2, [r7, #28]
 8009826:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
 800982a:	e015      	b.n	8009858 <HAL_FDCAN_GetRxMessage+0x2b0>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2b1f      	cmp	r3, #31
 8009830:	d808      	bhi.n	8009844 <HAL_FDCAN_GetRxMessage+0x29c>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1U << RxLocation);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	2101      	movs	r1, #1
 8009838:	68ba      	ldr	r2, [r7, #8]
 800983a:	fa01 f202 	lsl.w	r2, r1, r2
 800983e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8009842:	e009      	b.n	8009858 <HAL_FDCAN_GetRxMessage+0x2b0>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1U << (RxLocation & 0x1FU));
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	f003 021f 	and.w	r2, r3, #31
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	2101      	movs	r1, #1
 8009850:	fa01 f202 	lsl.w	r2, r1, r2
 8009854:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8009858:	2300      	movs	r3, #0
 800985a:	e008      	b.n	800986e <HAL_FDCAN_GetRxMessage+0x2c6>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009862:	f043 0208 	orr.w	r2, r3, #8
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
  }
}
 800986e:	4618      	mov	r0, r3
 8009870:	372c      	adds	r7, #44	@ 0x2c
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	08013894 	.word	0x08013894

08009880 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8009892:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	2b01      	cmp	r3, #1
 8009898:	d002      	beq.n	80098a0 <HAL_FDCAN_ActivateNotification+0x20>
 800989a:	7dfb      	ldrb	r3, [r7, #23]
 800989c:	2b02      	cmp	r3, #2
 800989e:	d155      	bne.n	800994c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	4013      	ands	r3, r2
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d108      	bne.n	80098c0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f042 0201 	orr.w	r2, r2, #1
 80098bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80098be:	e014      	b.n	80098ea <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	4013      	ands	r3, r2
 80098ca:	68ba      	ldr	r2, [r7, #8]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d108      	bne.n	80098e2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0202 	orr.w	r2, r2, #2
 80098de:	65da      	str	r2, [r3, #92]	@ 0x5c
 80098e0:	e003      	b.n	80098ea <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	2203      	movs	r2, #3
 80098e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d009      	beq.n	8009908 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	430a      	orrs	r2, r1
 8009904:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800990e:	2b00      	cmp	r3, #0
 8009910:	d009      	beq.n	8009926 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f8d3 10e4 	ldr.w	r1, [r3, #228]	@ 0xe4
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	430a      	orrs	r2, r1
 8009922:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800992c:	68ba      	ldr	r2, [r7, #8]
 800992e:	4b0f      	ldr	r3, [pc, #60]	@ (800996c <HAL_FDCAN_ActivateNotification+0xec>)
 8009930:	4013      	ands	r3, r2
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	6812      	ldr	r2, [r2, #0]
 8009936:	430b      	orrs	r3, r1
 8009938:	6553      	str	r3, [r2, #84]	@ 0x54
 800993a:	4b0d      	ldr	r3, [pc, #52]	@ (8009970 <HAL_FDCAN_ActivateNotification+0xf0>)
 800993c:	695a      	ldr	r2, [r3, #20]
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	0f9b      	lsrs	r3, r3, #30
 8009942:	490b      	ldr	r1, [pc, #44]	@ (8009970 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009944:	4313      	orrs	r3, r2
 8009946:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	e008      	b.n	800995e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009952:	f043 0202 	orr.w	r2, r3, #2
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    return HAL_ERROR;
 800995c:	2301      	movs	r3, #1
  }
}
 800995e:	4618      	mov	r0, r3
 8009960:	371c      	adds	r7, #28
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	3fcfffff 	.word	0x3fcfffff
 8009970:	4000a800 	.word	0x4000a800

08009974 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b096      	sub	sp, #88	@ 0x58
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800997c:	4b95      	ldr	r3, [pc, #596]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 800997e:	691b      	ldr	r3, [r3, #16]
 8009980:	079b      	lsls	r3, r3, #30
 8009982:	657b      	str	r3, [r7, #84]	@ 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8009984:	4b93      	ldr	r3, [pc, #588]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009986:	695b      	ldr	r3, [r3, #20]
 8009988:	079b      	lsls	r3, r3, #30
 800998a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800998c:	4013      	ands	r3, r2
 800998e:	657b      	str	r3, [r7, #84]	@ 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009996:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800999a:	653b      	str	r3, [r7, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099a4:	4013      	ands	r3, r2
 80099a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099ae:	f003 030f 	and.w	r3, r3, #15
 80099b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099bc:	4013      	ands	r3, r2
 80099be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80099d4:	4013      	ands	r3, r2
 80099d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099de:	f003 5371 	and.w	r3, r3, #1010827264	@ 0x3c400000
 80099e2:	647b      	str	r3, [r7, #68]	@ 0x44
  Errors &= hfdcan->Instance->IE;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099ec:	4013      	ands	r3, r2
 80099ee:	647b      	str	r3, [r7, #68]	@ 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099f6:	f003 7360 	and.w	r3, r3, #58720256	@ 0x3800000
 80099fa:	643b      	str	r3, [r7, #64]	@ 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a04:	4013      	ands	r3, r2
 8009a06:	643b      	str	r3, [r7, #64]	@ 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  itflagIR = hfdcan->Instance->IR;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a16:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00f      	beq.n	8009a42 <HAL_FDCAN_IRQHandler+0xce>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d00a      	beq.n	8009a42 <HAL_FDCAN_IRQHandler+0xce>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a34:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a36:	4b67      	ldr	r3, [pc, #412]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009a38:	2200      	movs	r2, #0
 8009a3a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 fa44 	bl	8009eca <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009a42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01c      	beq.n	8009a86 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d017      	beq.n	8009a86 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009a5e:	637b      	str	r3, [r7, #52]	@ 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8009a68:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a6a:	4013      	ands	r3, r2
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009a76:	651a      	str	r2, [r3, #80]	@ 0x50
 8009a78:	4b56      	ldr	r3, [pc, #344]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009a7e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f9f9 	bl	8009e78 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8009a86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d00d      	beq.n	8009aa8 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a92:	4b51      	ldr	r3, [pc, #324]	@ (8009bd8 <HAL_FDCAN_IRQHandler+0x264>)
 8009a94:	400b      	ands	r3, r1
 8009a96:	6513      	str	r3, [r2, #80]	@ 0x50
 8009a98:	4a4e      	ldr	r2, [pc, #312]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a9c:	0f9b      	lsrs	r3, r3, #30
 8009a9e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8009aa0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f9b2 	bl	8009e0c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009aa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d00d      	beq.n	8009aca <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ab4:	4b48      	ldr	r3, [pc, #288]	@ (8009bd8 <HAL_FDCAN_IRQHandler+0x264>)
 8009ab6:	400b      	ands	r3, r1
 8009ab8:	6513      	str	r3, [r2, #80]	@ 0x50
 8009aba:	4a46      	ldr	r2, [pc, #280]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009abc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009abe:	0f9b      	lsrs	r3, r3, #30
 8009ac0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009ac2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f000 f9ac 	bl	8009e22 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d00d      	beq.n	8009aec <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009ad6:	4b40      	ldr	r3, [pc, #256]	@ (8009bd8 <HAL_FDCAN_IRQHandler+0x264>)
 8009ad8:	400b      	ands	r3, r1
 8009ada:	6513      	str	r3, [r2, #80]	@ 0x50
 8009adc:	4a3d      	ldr	r2, [pc, #244]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009ade:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ae0:	0f9b      	lsrs	r3, r3, #30
 8009ae2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009ae4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f7f6 fee8 	bl	80008bc <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009aec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d00d      	beq.n	8009b0e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009af8:	4b37      	ldr	r3, [pc, #220]	@ (8009bd8 <HAL_FDCAN_IRQHandler+0x264>)
 8009afa:	400b      	ands	r3, r1
 8009afc:	6513      	str	r3, [r2, #80]	@ 0x50
 8009afe:	4a35      	ldr	r2, [pc, #212]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009b02:	0f9b      	lsrs	r3, r3, #30
 8009b04:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009b06:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f995 	bl	8009e38 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00f      	beq.n	8009b38 <HAL_FDCAN_IRQHandler+0x1c4>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d00a      	beq.n	8009b38 <HAL_FDCAN_IRQHandler+0x1c4>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b2a:	651a      	str	r2, [r3, #80]	@ 0x50
 8009b2c:	4b29      	ldr	r3, [pc, #164]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009b2e:	2200      	movs	r2, #0
 8009b30:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f98b 	bl	8009e4e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8009b38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d01c      	beq.n	8009b7c <HAL_FDCAN_IRQHandler+0x208>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d017      	beq.n	8009b7c <HAL_FDCAN_IRQHandler+0x208>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009b54:	633b      	str	r3, [r7, #48]	@ 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b60:	4013      	ands	r3, r2
 8009b62:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b6c:	651a      	str	r2, [r3, #80]	@ 0x50
 8009b6e:	4b19      	ldr	r3, [pc, #100]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009b74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 f973 	bl	8009e62 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b7e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00f      	beq.n	8009ba6 <HAL_FDCAN_IRQHandler+0x232>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00a      	beq.n	8009ba6 <HAL_FDCAN_IRQHandler+0x232>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8009b98:	651a      	str	r2, [r3, #80]	@ 0x50
 8009b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f000 f974 	bl	8009e8e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d015      	beq.n	8009bdc <HAL_FDCAN_IRQHandler+0x268>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8009bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d010      	beq.n	8009bdc <HAL_FDCAN_IRQHandler+0x268>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009bc2:	651a      	str	r2, [r3, #80]	@ 0x50
 8009bc4:	4b03      	ldr	r3, [pc, #12]	@ (8009bd4 <HAL_FDCAN_IRQHandler+0x260>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f969 	bl	8009ea2 <HAL_FDCAN_TimestampWraparoundCallback>
 8009bd0:	e004      	b.n	8009bdc <HAL_FDCAN_IRQHandler+0x268>
 8009bd2:	bf00      	nop
 8009bd4:	4000a800 	.word	0x4000a800
 8009bd8:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bde:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d00f      	beq.n	8009c06 <HAL_FDCAN_IRQHandler+0x292>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8009be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009be8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d00a      	beq.n	8009c06 <HAL_FDCAN_IRQHandler+0x292>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8009bf8:	651a      	str	r2, [r3, #80]	@ 0x50
 8009bfa:	4b81      	ldr	r3, [pc, #516]	@ (8009e00 <HAL_FDCAN_IRQHandler+0x48c>)
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f958 	bl	8009eb6 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8009c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d014      	beq.n	8009c3a <HAL_FDCAN_IRQHandler+0x2c6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00f      	beq.n	8009c3a <HAL_FDCAN_IRQHandler+0x2c6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8009c22:	651a      	str	r2, [r3, #80]	@ 0x50
 8009c24:	4b76      	ldr	r3, [pc, #472]	@ (8009e00 <HAL_FDCAN_IRQHandler+0x48c>)
 8009c26:	2200      	movs	r2, #0
 8009c28:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8009c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00d      	beq.n	8009c5c <HAL_FDCAN_IRQHandler+0x2e8>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681a      	ldr	r2, [r3, #0]
 8009c44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c46:	4b6f      	ldr	r3, [pc, #444]	@ (8009e04 <HAL_FDCAN_IRQHandler+0x490>)
 8009c48:	400b      	ands	r3, r1
 8009c4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c4c:	4a6c      	ldr	r2, [pc, #432]	@ (8009e00 <HAL_FDCAN_IRQHandler+0x48c>)
 8009c4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c50:	0f9b      	lsrs	r3, r3, #30
 8009c52:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8009c54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f94b 	bl	8009ef2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8009c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d011      	beq.n	8009c86 <HAL_FDCAN_IRQHandler+0x312>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c68:	4b66      	ldr	r3, [pc, #408]	@ (8009e04 <HAL_FDCAN_IRQHandler+0x490>)
 8009c6a:	400b      	ands	r3, r1
 8009c6c:	6513      	str	r3, [r2, #80]	@ 0x50
 8009c6e:	4a64      	ldr	r2, [pc, #400]	@ (8009e00 <HAL_FDCAN_IRQHandler+0x48c>)
 8009c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c72:	0f9b      	lsrs	r3, r3, #30
 8009c74:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a5f      	ldr	r2, [pc, #380]	@ (8009e08 <HAL_FDCAN_IRQHandler+0x494>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	f040 80aa 	bne.w	8009de6 <HAL_FDCAN_IRQHandler+0x472>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	f003 0303 	and.w	r3, r3, #3
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	f000 80a2 	beq.w	8009de6 <HAL_FDCAN_IRQHandler+0x472>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	f003 030f 	and.w	r3, r3, #15
 8009cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009cb6:	4013      	ands	r3, r2
 8009cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	6a1b      	ldr	r3, [r3, #32]
 8009cc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ccc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009cce:	4013      	ands	r3, r2
 8009cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	6a1b      	ldr	r3, [r3, #32]
 8009cd8:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8009cdc:	627b      	str	r3, [r7, #36]	@ 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	627b      	str	r3, [r7, #36]	@ 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	f403 43fc 	and.w	r3, r3, #32256	@ 0x7e00
 8009cf4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cfc:	6a3a      	ldr	r2, [r7, #32]
 8009cfe:	4013      	ands	r3, r2
 8009d00:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	f403 23f0 	and.w	r3, r3, #491520	@ 0x78000
 8009d0c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d14:	69fa      	ldr	r2, [r7, #28]
 8009d16:	4013      	ands	r3, r2
 8009d18:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d20:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8009d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d007      	beq.n	8009d40 <HAL_FDCAN_IRQHandler+0x3cc>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d36:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8009d38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f000 f8e4 	bl	8009f08 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8009d40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d007      	beq.n	8009d56 <HAL_FDCAN_IRQHandler+0x3e2>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d4c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8009d4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f000 f8e4 	bl	8009f1e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d019      	beq.n	8009d94 <HAL_FDCAN_IRQHandler+0x420>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d014      	beq.n	8009d94 <HAL_FDCAN_IRQHandler+0x420>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d70:	0c1b      	lsrs	r3, r3, #16
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009d80:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	2240      	movs	r2, #64	@ 0x40
 8009d88:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	6939      	ldr	r1, [r7, #16]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 f8d0 	bl	8009f34 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8009d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d007      	beq.n	8009daa <HAL_FDCAN_IRQHandler+0x436>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009da0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8009da2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f8d1 	bl	8009f4c <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8009daa:	6a3b      	ldr	r3, [r7, #32]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d00b      	beq.n	8009dc8 <HAL_FDCAN_IRQHandler+0x454>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	6a3a      	ldr	r2, [r7, #32]
 8009db6:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009dbe:	6a3b      	ldr	r3, [r7, #32]
 8009dc0:	431a      	orrs	r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8009dc8:	69fb      	ldr	r3, [r7, #28]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00b      	beq.n	8009de6 <HAL_FDCAN_IRQHandler+0x472>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	69fa      	ldr	r2, [r7, #28]
 8009dd4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	431a      	orrs	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d002      	beq.n	8009df6 <HAL_FDCAN_IRQHandler+0x482>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 f874 	bl	8009ede <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8009df6:	bf00      	nop
 8009df8:	3758      	adds	r7, #88	@ 0x58
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	4000a800 	.word	0x4000a800
 8009e04:	3fcfffff 	.word	0x3fcfffff
 8009e08:	4000a000 	.word	0x4000a000

08009e0c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8009e16:	bf00      	nop
 8009e18:	370c      	adds	r7, #12
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e20:	4770      	bx	lr

08009e22 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009e22:	b480      	push	{r7}
 8009e24:	b083      	sub	sp, #12
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	6078      	str	r0, [r7, #4]
 8009e2a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8009e2c:	bf00      	nop
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8009e42:	bf00      	nop
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
 8009e6a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
 8009e80:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8009f12:	bf00      	nop
 8009f14:	370c      	adds	r7, #12
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b083      	sub	sp, #12
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8009f40:	bf00      	nop
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8009f56:	bf00      	nop
 8009f58:	370c      	adds	r7, #12
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
	...

08009f64 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f70:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8009f7a:	4ba7      	ldr	r3, [pc, #668]	@ (800a218 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009f7c:	4013      	ands	r3, r2
 8009f7e:	68ba      	ldr	r2, [r7, #8]
 8009f80:	0091      	lsls	r1, r2, #2
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6812      	ldr	r2, [r2, #0]
 8009f86:	430b      	orrs	r3, r1
 8009f88:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009f94:	f423 017f 	bic.w	r1, r3, #16711680	@ 0xff0000
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f9c:	041a      	lsls	r2, r3, #16
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	430a      	orrs	r2, r1
 8009fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fac:	68ba      	ldr	r2, [r7, #8]
 8009fae:	4413      	add	r3, r2
 8009fb0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009fba:	4b97      	ldr	r3, [pc, #604]	@ (800a218 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	68ba      	ldr	r2, [r7, #8]
 8009fc0:	0091      	lsls	r1, r2, #2
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	6812      	ldr	r2, [r2, #0]
 8009fc6:	430b      	orrs	r3, r1
 8009fc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fd4:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fdc:	041a      	lsls	r2, r3, #16
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	430a      	orrs	r2, r1
 8009fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fec:	005b      	lsls	r3, r3, #1
 8009fee:	68ba      	ldr	r2, [r7, #8]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8009ffc:	4b86      	ldr	r3, [pc, #536]	@ (800a218 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8009ffe:	4013      	ands	r3, r2
 800a000:	68ba      	ldr	r2, [r7, #8]
 800a002:	0091      	lsls	r1, r2, #2
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	6812      	ldr	r2, [r2, #0]
 800a008:	430b      	orrs	r3, r1
 800a00a:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a016:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01e:	041a      	lsls	r2, r3, #16
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	430a      	orrs	r2, r1
 800a026:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a02e:	687a      	ldr	r2, [r7, #4]
 800a030:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800a032:	fb02 f303 	mul.w	r3, r2, r3
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	4413      	add	r3, r2
 800a03a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800a044:	4b74      	ldr	r3, [pc, #464]	@ (800a218 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a046:	4013      	ands	r3, r2
 800a048:	68ba      	ldr	r2, [r7, #8]
 800a04a:	0091      	lsls	r1, r2, #2
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	6812      	ldr	r2, [r2, #0]
 800a050:	430b      	orrs	r3, r1
 800a052:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a05e:	f423 01fe 	bic.w	r1, r3, #8323072	@ 0x7f0000
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a066:	041a      	lsls	r2, r3, #16
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800a07a:	fb02 f303 	mul.w	r3, r2, r3
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	4413      	add	r3, r2
 800a082:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 800a08c:	4b62      	ldr	r3, [pc, #392]	@ (800a218 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a08e:	4013      	ands	r3, r2
 800a090:	68ba      	ldr	r2, [r7, #8]
 800a092:	0091      	lsls	r1, r2, #2
 800a094:	687a      	ldr	r2, [r7, #4]
 800a096:	6812      	ldr	r2, [r2, #0]
 800a098:	430b      	orrs	r3, r1
 800a09a:	f8c2 30ac 	str.w	r3, [r2, #172]	@ 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a0a6:	fb02 f303 	mul.w	r3, r2, r3
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800a0b8:	4b57      	ldr	r3, [pc, #348]	@ (800a218 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	0091      	lsls	r1, r2, #2
 800a0c0:	687a      	ldr	r2, [r7, #4]
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	430b      	orrs	r3, r1
 800a0c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800a0d2:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0da:	041a      	lsls	r2, r3, #16
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0ea:	005b      	lsls	r3, r3, #1
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	4413      	add	r3, r2
 800a0f0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800a0fa:	4b47      	ldr	r3, [pc, #284]	@ (800a218 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	68ba      	ldr	r2, [r7, #8]
 800a100:	0091      	lsls	r1, r2, #2
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	6812      	ldr	r2, [r2, #0]
 800a106:	430b      	orrs	r3, r1
 800a108:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a114:	f423 117c 	bic.w	r1, r3, #4128768	@ 0x3f0000
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a11c:	041a      	lsls	r2, r3, #16
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a130:	f023 517c 	bic.w	r1, r3, #1056964608	@ 0x3f000000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a138:	061a      	lsls	r2, r3, #24
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a148:	4b34      	ldr	r3, [pc, #208]	@ (800a21c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800a14a:	4413      	add	r3, r2
 800a14c:	009a      	lsls	r2, r3, #2
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	66da      	str	r2, [r3, #108]	@ 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	441a      	add	r2, r3
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	671a      	str	r2, [r3, #112]	@ 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a16a:	00db      	lsls	r3, r3, #3
 800a16c:	441a      	add	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	675a      	str	r2, [r3, #116]	@ 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
                             (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a17a:	6879      	ldr	r1, [r7, #4]
 800a17c:	6c49      	ldr	r1, [r1, #68]	@ 0x44
 800a17e:	fb01 f303 	mul.w	r3, r1, r3
 800a182:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA +
 800a184:	441a      	add	r2, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	679a      	str	r2, [r3, #120]	@ 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
                              (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a192:	6879      	ldr	r1, [r7, #4]
 800a194:	6cc9      	ldr	r1, [r1, #76]	@ 0x4c
 800a196:	fb01 f303 	mul.w	r3, r1, r3
 800a19a:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA +
 800a19c:	441a      	add	r2, r3
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	67da      	str	r2, [r3, #124]	@ 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
                                 (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	6d49      	ldr	r1, [r1, #84]	@ 0x54
 800a1ae:	fb01 f303 	mul.w	r3, r1, r3
 800a1b2:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA +
 800a1b4:	441a      	add	r2, r3
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a1c6:	00db      	lsls	r3, r3, #3
 800a1c8:	441a      	add	r2, r3
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1da:	6879      	ldr	r1, [r7, #4]
 800a1dc:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a1de:	fb01 f303 	mul.w	r3, r1, r3
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	441a      	add	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
                              (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1f6:	6879      	ldr	r1, [r7, #4]
 800a1f8:	6e89      	ldr	r1, [r1, #104]	@ 0x68
 800a1fa:	fb01 f303 	mul.w	r3, r1, r3
 800a1fe:	009b      	lsls	r3, r3, #2
  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA +
 800a200:	441a      	add	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a20e:	4a04      	ldr	r2, [pc, #16]	@ (800a220 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d915      	bls.n	800a240 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800a214:	e006      	b.n	800a224 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800a216:	bf00      	nop
 800a218:	ffff0003 	.word	0xffff0003
 800a21c:	10002b00 	.word	0x10002b00
 800a220:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a22a:	f043 0220 	orr.w	r2, r3, #32
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2203      	movs	r2, #3
 800a238:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98

    return HAL_ERROR;
 800a23c:	2301      	movs	r3, #1
 800a23e:	e010      	b.n	800a262 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a244:	60fb      	str	r3, [r7, #12]
 800a246:	e005      	b.n	800a254 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3304      	adds	r3, #4
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a25a:	68fa      	ldr	r2, [r7, #12]
 800a25c:	429a      	cmp	r2, r3
 800a25e:	d3f3      	bcc.n	800a248 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a260:	2300      	movs	r3, #0
}
 800a262:	4618      	mov	r0, r3
 800a264:	3714      	adds	r7, #20
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr
 800a26e:	bf00      	nop

0800a270 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800a270:	b480      	push	{r7}
 800a272:	b089      	sub	sp, #36	@ 0x24
 800a274:	af00      	add	r7, sp, #0
 800a276:	60f8      	str	r0, [r7, #12]
 800a278:	60b9      	str	r1, [r7, #8]
 800a27a:	607a      	str	r2, [r7, #4]
 800a27c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d10a      	bne.n	800a29c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800a28e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a296:	4313      	orrs	r3, r2
 800a298:	61fb      	str	r3, [r7, #28]
 800a29a:	e00a      	b.n	800a2b2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800a2a4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800a2aa:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a2ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2b0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a2bc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800a2c2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800a2c8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	68db      	ldr	r3, [r3, #12]
 800a2ce:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a2de:	6839      	ldr	r1, [r7, #0]
 800a2e0:	fb01 f303 	mul.w	r3, r1, r3
 800a2e4:	009b      	lsls	r3, r3, #2
 800a2e6:	4413      	add	r3, r2
 800a2e8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a2f0:	69bb      	ldr	r3, [r7, #24]
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800a2f6:	69bb      	ldr	r3, [r7, #24]
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	3304      	adds	r3, #4
 800a300:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a302:	2300      	movs	r3, #0
 800a304:	617b      	str	r3, [r7, #20]
 800a306:	e020      	b.n	800a34a <FDCAN_CopyMessageToRAM+0xda>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	3303      	adds	r3, #3
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	4413      	add	r3, r2
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	3302      	adds	r3, #2
 800a318:	6879      	ldr	r1, [r7, #4]
 800a31a:	440b      	add	r3, r1
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a320:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	3301      	adds	r3, #1
 800a326:	6879      	ldr	r1, [r7, #4]
 800a328:	440b      	add	r3, r1
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800a32e:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800a330:	6879      	ldr	r1, [r7, #4]
 800a332:	697a      	ldr	r2, [r7, #20]
 800a334:	440a      	add	r2, r1
 800a336:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800a338:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	3304      	adds	r3, #4
 800a342:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	3304      	adds	r3, #4
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	4a06      	ldr	r2, [pc, #24]	@ (800a368 <FDCAN_CopyMessageToRAM+0xf8>)
 800a350:	5cd3      	ldrb	r3, [r2, r3]
 800a352:	461a      	mov	r2, r3
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	4293      	cmp	r3, r2
 800a358:	d3d6      	bcc.n	800a308 <FDCAN_CopyMessageToRAM+0x98>
  }
}
 800a35a:	bf00      	nop
 800a35c:	bf00      	nop
 800a35e:	3724      	adds	r7, #36	@ 0x24
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	08013894 	.word	0x08013894

0800a36c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b089      	sub	sp, #36	@ 0x24
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a376:	2300      	movs	r3, #0
 800a378:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a37a:	4b86      	ldr	r3, [pc, #536]	@ (800a594 <HAL_GPIO_Init+0x228>)
 800a37c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a37e:	e18c      	b.n	800a69a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	2101      	movs	r1, #1
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	fa01 f303 	lsl.w	r3, r1, r3
 800a38c:	4013      	ands	r3, r2
 800a38e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	f000 817e 	beq.w	800a694 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	685b      	ldr	r3, [r3, #4]
 800a39c:	f003 0303 	and.w	r3, r3, #3
 800a3a0:	2b01      	cmp	r3, #1
 800a3a2:	d005      	beq.n	800a3b0 <HAL_GPIO_Init+0x44>
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	685b      	ldr	r3, [r3, #4]
 800a3a8:	f003 0303 	and.w	r3, r3, #3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d130      	bne.n	800a412 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	689b      	ldr	r3, [r3, #8]
 800a3b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a3b6:	69fb      	ldr	r3, [r7, #28]
 800a3b8:	005b      	lsls	r3, r3, #1
 800a3ba:	2203      	movs	r2, #3
 800a3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c0:	43db      	mvns	r3, r3
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	4013      	ands	r3, r2
 800a3c6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	68da      	ldr	r2, [r3, #12]
 800a3cc:	69fb      	ldr	r3, [r7, #28]
 800a3ce:	005b      	lsls	r3, r3, #1
 800a3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a3d4:	69ba      	ldr	r2, [r7, #24]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ee:	43db      	mvns	r3, r3
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	091b      	lsrs	r3, r3, #4
 800a3fc:	f003 0201 	and.w	r2, r3, #1
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	fa02 f303 	lsl.w	r3, r2, r3
 800a406:	69ba      	ldr	r2, [r7, #24]
 800a408:	4313      	orrs	r3, r2
 800a40a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	69ba      	ldr	r2, [r7, #24]
 800a410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	f003 0303 	and.w	r3, r3, #3
 800a41a:	2b03      	cmp	r3, #3
 800a41c:	d017      	beq.n	800a44e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a424:	69fb      	ldr	r3, [r7, #28]
 800a426:	005b      	lsls	r3, r3, #1
 800a428:	2203      	movs	r2, #3
 800a42a:	fa02 f303 	lsl.w	r3, r2, r3
 800a42e:	43db      	mvns	r3, r3
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	4013      	ands	r3, r2
 800a434:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	689a      	ldr	r2, [r3, #8]
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	005b      	lsls	r3, r3, #1
 800a43e:	fa02 f303 	lsl.w	r3, r2, r3
 800a442:	69ba      	ldr	r2, [r7, #24]
 800a444:	4313      	orrs	r3, r2
 800a446:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	69ba      	ldr	r2, [r7, #24]
 800a44c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f003 0303 	and.w	r3, r3, #3
 800a456:	2b02      	cmp	r3, #2
 800a458:	d123      	bne.n	800a4a2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a45a:	69fb      	ldr	r3, [r7, #28]
 800a45c:	08da      	lsrs	r2, r3, #3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	3208      	adds	r2, #8
 800a462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a466:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	f003 0307 	and.w	r3, r3, #7
 800a46e:	009b      	lsls	r3, r3, #2
 800a470:	220f      	movs	r2, #15
 800a472:	fa02 f303 	lsl.w	r3, r2, r3
 800a476:	43db      	mvns	r3, r3
 800a478:	69ba      	ldr	r2, [r7, #24]
 800a47a:	4013      	ands	r3, r2
 800a47c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	69fb      	ldr	r3, [r7, #28]
 800a484:	f003 0307 	and.w	r3, r3, #7
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	fa02 f303 	lsl.w	r3, r2, r3
 800a48e:	69ba      	ldr	r2, [r7, #24]
 800a490:	4313      	orrs	r3, r2
 800a492:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a494:	69fb      	ldr	r3, [r7, #28]
 800a496:	08da      	lsrs	r2, r3, #3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	3208      	adds	r2, #8
 800a49c:	69b9      	ldr	r1, [r7, #24]
 800a49e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	005b      	lsls	r3, r3, #1
 800a4ac:	2203      	movs	r2, #3
 800a4ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b2:	43db      	mvns	r3, r3
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	f003 0203 	and.w	r2, r3, #3
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	005b      	lsls	r3, r3, #1
 800a4c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a4ca:	69ba      	ldr	r2, [r7, #24]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	69ba      	ldr	r2, [r7, #24]
 800a4d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 80d8 	beq.w	800a694 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a4e4:	4b2c      	ldr	r3, [pc, #176]	@ (800a598 <HAL_GPIO_Init+0x22c>)
 800a4e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4ea:	4a2b      	ldr	r2, [pc, #172]	@ (800a598 <HAL_GPIO_Init+0x22c>)
 800a4ec:	f043 0302 	orr.w	r3, r3, #2
 800a4f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800a4f4:	4b28      	ldr	r3, [pc, #160]	@ (800a598 <HAL_GPIO_Init+0x22c>)
 800a4f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800a4fa:	f003 0302 	and.w	r3, r3, #2
 800a4fe:	60fb      	str	r3, [r7, #12]
 800a500:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a502:	4a26      	ldr	r2, [pc, #152]	@ (800a59c <HAL_GPIO_Init+0x230>)
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	089b      	lsrs	r3, r3, #2
 800a508:	3302      	adds	r3, #2
 800a50a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a50e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	f003 0303 	and.w	r3, r3, #3
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	220f      	movs	r2, #15
 800a51a:	fa02 f303 	lsl.w	r3, r2, r3
 800a51e:	43db      	mvns	r3, r3
 800a520:	69ba      	ldr	r2, [r7, #24]
 800a522:	4013      	ands	r3, r2
 800a524:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	4a1d      	ldr	r2, [pc, #116]	@ (800a5a0 <HAL_GPIO_Init+0x234>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d04a      	beq.n	800a5c4 <HAL_GPIO_Init+0x258>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	4a1c      	ldr	r2, [pc, #112]	@ (800a5a4 <HAL_GPIO_Init+0x238>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d02b      	beq.n	800a58e <HAL_GPIO_Init+0x222>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a1b      	ldr	r2, [pc, #108]	@ (800a5a8 <HAL_GPIO_Init+0x23c>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d025      	beq.n	800a58a <HAL_GPIO_Init+0x21e>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a1a      	ldr	r2, [pc, #104]	@ (800a5ac <HAL_GPIO_Init+0x240>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d01f      	beq.n	800a586 <HAL_GPIO_Init+0x21a>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a19      	ldr	r2, [pc, #100]	@ (800a5b0 <HAL_GPIO_Init+0x244>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d019      	beq.n	800a582 <HAL_GPIO_Init+0x216>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a18      	ldr	r2, [pc, #96]	@ (800a5b4 <HAL_GPIO_Init+0x248>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d013      	beq.n	800a57e <HAL_GPIO_Init+0x212>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a17      	ldr	r2, [pc, #92]	@ (800a5b8 <HAL_GPIO_Init+0x24c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d00d      	beq.n	800a57a <HAL_GPIO_Init+0x20e>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	4a16      	ldr	r2, [pc, #88]	@ (800a5bc <HAL_GPIO_Init+0x250>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d007      	beq.n	800a576 <HAL_GPIO_Init+0x20a>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	4a15      	ldr	r2, [pc, #84]	@ (800a5c0 <HAL_GPIO_Init+0x254>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	d101      	bne.n	800a572 <HAL_GPIO_Init+0x206>
 800a56e:	2309      	movs	r3, #9
 800a570:	e029      	b.n	800a5c6 <HAL_GPIO_Init+0x25a>
 800a572:	230a      	movs	r3, #10
 800a574:	e027      	b.n	800a5c6 <HAL_GPIO_Init+0x25a>
 800a576:	2307      	movs	r3, #7
 800a578:	e025      	b.n	800a5c6 <HAL_GPIO_Init+0x25a>
 800a57a:	2306      	movs	r3, #6
 800a57c:	e023      	b.n	800a5c6 <HAL_GPIO_Init+0x25a>
 800a57e:	2305      	movs	r3, #5
 800a580:	e021      	b.n	800a5c6 <HAL_GPIO_Init+0x25a>
 800a582:	2304      	movs	r3, #4
 800a584:	e01f      	b.n	800a5c6 <HAL_GPIO_Init+0x25a>
 800a586:	2303      	movs	r3, #3
 800a588:	e01d      	b.n	800a5c6 <HAL_GPIO_Init+0x25a>
 800a58a:	2302      	movs	r3, #2
 800a58c:	e01b      	b.n	800a5c6 <HAL_GPIO_Init+0x25a>
 800a58e:	2301      	movs	r3, #1
 800a590:	e019      	b.n	800a5c6 <HAL_GPIO_Init+0x25a>
 800a592:	bf00      	nop
 800a594:	58000080 	.word	0x58000080
 800a598:	58024400 	.word	0x58024400
 800a59c:	58000400 	.word	0x58000400
 800a5a0:	58020000 	.word	0x58020000
 800a5a4:	58020400 	.word	0x58020400
 800a5a8:	58020800 	.word	0x58020800
 800a5ac:	58020c00 	.word	0x58020c00
 800a5b0:	58021000 	.word	0x58021000
 800a5b4:	58021400 	.word	0x58021400
 800a5b8:	58021800 	.word	0x58021800
 800a5bc:	58021c00 	.word	0x58021c00
 800a5c0:	58022400 	.word	0x58022400
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	69fa      	ldr	r2, [r7, #28]
 800a5c8:	f002 0203 	and.w	r2, r2, #3
 800a5cc:	0092      	lsls	r2, r2, #2
 800a5ce:	4093      	lsls	r3, r2
 800a5d0:	69ba      	ldr	r2, [r7, #24]
 800a5d2:	4313      	orrs	r3, r2
 800a5d4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a5d6:	4938      	ldr	r1, [pc, #224]	@ (800a6b8 <HAL_GPIO_Init+0x34c>)
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	089b      	lsrs	r3, r3, #2
 800a5dc:	3302      	adds	r3, #2
 800a5de:	69ba      	ldr	r2, [r7, #24]
 800a5e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a5e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	43db      	mvns	r3, r3
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	4013      	ands	r3, r2
 800a5f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800a602:	69ba      	ldr	r2, [r7, #24]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	4313      	orrs	r3, r2
 800a608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a60a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	43db      	mvns	r3, r3
 800a61e:	69ba      	ldr	r2, [r7, #24]
 800a620:	4013      	ands	r3, r2
 800a622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d003      	beq.n	800a638 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800a630:	69ba      	ldr	r2, [r7, #24]
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	4313      	orrs	r3, r2
 800a636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a638:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a640:	697b      	ldr	r3, [r7, #20]
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	43db      	mvns	r3, r3
 800a64a:	69ba      	ldr	r2, [r7, #24]
 800a64c:	4013      	ands	r3, r2
 800a64e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d003      	beq.n	800a664 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800a65c:	69ba      	ldr	r2, [r7, #24]
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	4313      	orrs	r3, r2
 800a662:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a664:	697b      	ldr	r3, [r7, #20]
 800a666:	69ba      	ldr	r2, [r7, #24]
 800a668:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	43db      	mvns	r3, r3
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	4013      	ands	r3, r2
 800a678:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a682:	2b00      	cmp	r3, #0
 800a684:	d003      	beq.n	800a68e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	69ba      	ldr	r2, [r7, #24]
 800a692:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	3301      	adds	r3, #1
 800a698:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f47f ae6b 	bne.w	800a380 <HAL_GPIO_Init+0x14>
  }
}
 800a6aa:	bf00      	nop
 800a6ac:	bf00      	nop
 800a6ae:	3724      	adds	r7, #36	@ 0x24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr
 800a6b8:	58000400 	.word	0x58000400

0800a6bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b083      	sub	sp, #12
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	460b      	mov	r3, r1
 800a6c6:	807b      	strh	r3, [r7, #2]
 800a6c8:	4613      	mov	r3, r2
 800a6ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a6cc:	787b      	ldrb	r3, [r7, #1]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d003      	beq.n	800a6da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a6d2:	887a      	ldrh	r2, [r7, #2]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a6d8:	e003      	b.n	800a6e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a6da:	887b      	ldrh	r3, [r7, #2]
 800a6dc:	041a      	lsls	r2, r3, #16
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	619a      	str	r2, [r3, #24]
}
 800a6e2:	bf00      	nop
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr

0800a6ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a6ee:	b480      	push	{r7}
 800a6f0:	b085      	sub	sp, #20
 800a6f2:	af00      	add	r7, sp, #0
 800a6f4:	6078      	str	r0, [r7, #4]
 800a6f6:	460b      	mov	r3, r1
 800a6f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a700:	887a      	ldrh	r2, [r7, #2]
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	4013      	ands	r3, r2
 800a706:	041a      	lsls	r2, r3, #16
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	43d9      	mvns	r1, r3
 800a70c:	887b      	ldrh	r3, [r7, #2]
 800a70e:	400b      	ands	r3, r1
 800a710:	431a      	orrs	r2, r3
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	619a      	str	r2, [r3, #24]
}
 800a716:	bf00      	nop
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
	...

0800a724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a732:	2301      	movs	r3, #1
 800a734:	e08b      	b.n	800a84e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d106      	bne.n	800a750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	2200      	movs	r2, #0
 800a746:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a74a:	6878      	ldr	r0, [r7, #4]
 800a74c:	f7f8 fc5e 	bl	800300c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2224      	movs	r2, #36	@ 0x24
 800a754:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f022 0201 	bic.w	r2, r2, #1
 800a766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689a      	ldr	r2, [r3, #8]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	2b01      	cmp	r3, #1
 800a78c:	d107      	bne.n	800a79e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	689a      	ldr	r2, [r3, #8]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a79a:	609a      	str	r2, [r3, #8]
 800a79c:	e006      	b.n	800a7ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	689a      	ldr	r2, [r3, #8]
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a7aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	68db      	ldr	r3, [r3, #12]
 800a7b0:	2b02      	cmp	r3, #2
 800a7b2:	d108      	bne.n	800a7c6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	685a      	ldr	r2, [r3, #4]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a7c2:	605a      	str	r2, [r3, #4]
 800a7c4:	e007      	b.n	800a7d6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	685a      	ldr	r2, [r3, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a7d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6859      	ldr	r1, [r3, #4]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a858 <HAL_I2C_Init+0x134>)
 800a7e2:	430b      	orrs	r3, r1
 800a7e4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68da      	ldr	r2, [r3, #12]
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a7f4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	691a      	ldr	r2, [r3, #16]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	695b      	ldr	r3, [r3, #20]
 800a7fe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	430a      	orrs	r2, r1
 800a80e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	69d9      	ldr	r1, [r3, #28]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a1a      	ldr	r2, [r3, #32]
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	430a      	orrs	r2, r1
 800a81e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f042 0201 	orr.w	r2, r2, #1
 800a82e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2200      	movs	r2, #0
 800a834:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2220      	movs	r2, #32
 800a83a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3708      	adds	r7, #8
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	02008000 	.word	0x02008000

0800a85c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b083      	sub	sp, #12
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b20      	cmp	r3, #32
 800a870:	d138      	bne.n	800a8e4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d101      	bne.n	800a880 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a87c:	2302      	movs	r3, #2
 800a87e:	e032      	b.n	800a8e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2224      	movs	r2, #36	@ 0x24
 800a88c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f022 0201 	bic.w	r2, r2, #1
 800a89e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a8ae:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6819      	ldr	r1, [r3, #0]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	430a      	orrs	r2, r1
 800a8be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2220      	movs	r2, #32
 800a8d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	e000      	b.n	800a8e6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a8e4:	2302      	movs	r3, #2
  }
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	370c      	adds	r7, #12
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f0:	4770      	bx	lr

0800a8f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a8f2:	b480      	push	{r7}
 800a8f4:	b085      	sub	sp, #20
 800a8f6:	af00      	add	r7, sp, #0
 800a8f8:	6078      	str	r0, [r7, #4]
 800a8fa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a902:	b2db      	uxtb	r3, r3
 800a904:	2b20      	cmp	r3, #32
 800a906:	d139      	bne.n	800a97c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d101      	bne.n	800a916 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a912:	2302      	movs	r3, #2
 800a914:	e033      	b.n	800a97e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2224      	movs	r2, #36	@ 0x24
 800a922:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f022 0201 	bic.w	r2, r2, #1
 800a934:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800a944:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	021b      	lsls	r3, r3, #8
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	4313      	orrs	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	68fa      	ldr	r2, [r7, #12]
 800a956:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f042 0201 	orr.w	r2, r2, #1
 800a966:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2220      	movs	r2, #32
 800a96c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2200      	movs	r2, #0
 800a974:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800a978:	2300      	movs	r3, #0
 800a97a:	e000      	b.n	800a97e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a97c:	2302      	movs	r3, #2
  }
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
	...

0800a98c <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a994:	2300      	movs	r3, #0
 800a996:	73fb      	strb	r3, [r7, #15]
  uint32_t updateotrlpotr;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if(hopamp == NULL)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d101      	bne.n	800a9a2 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e0b1      	b.n	800ab06 <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b05      	cmp	r3, #5
 800a9ac:	d101      	bne.n	800a9b2 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	e0a9      	b.n	800ab06 <HAL_OPAMP_Init+0x17a>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d101      	bne.n	800a9c2 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e0a1      	b.n	800ab06 <HAL_OPAMP_Init+0x17a>
    }


    assert_param(IS_OPAMP_TRIMMING(hopamp->Init.UserTrimming));

    if ((hopamp->Init.UserTrimming) == OPAMP_TRIMMING_USER)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	69db      	ldr	r3, [r3, #28]
 800a9c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValuePHighSpeed));
        assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueNHighSpeed));
      }
    }

    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800a9d0:	b2db      	uxtb	r3, r3
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d103      	bne.n	800a9de <HAL_OPAMP_Init+0x52>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7f8 fbce 	bl	8003180 <HAL_OPAMP_MspInit>
#endif /* USE_HAL_OPAMP_REGISTER_CALLBACKS */

    /* Set operating mode */
    CLEAR_BIT(hopamp->Instance->CSR, OPAMP_CSR_CALON);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a9f2:	601a      	str	r2, [r3, #0]
    /* In PGA mode InvertingInput is Not Applicable  */
    if (hopamp->Init.Mode == OPAMP_PGA_MODE)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	2b40      	cmp	r3, #64	@ 0x40
 800a9fa:	d119      	bne.n	800aa30 <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_PGA, \
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	4b43      	ldr	r3, [pc, #268]	@ (800ab10 <HAL_OPAMP_Init+0x184>)
 800aa04:	4013      	ands	r3, r2
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	6851      	ldr	r1, [r2, #4]
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	6892      	ldr	r2, [r2, #8]
 800aa0e:	4311      	orrs	r1, r2
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	6952      	ldr	r2, [r2, #20]
 800aa14:	4311      	orrs	r1, r2
 800aa16:	687a      	ldr	r2, [r7, #4]
 800aa18:	6992      	ldr	r2, [r2, #24]
 800aa1a:	4311      	orrs	r1, r2
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	6912      	ldr	r2, [r2, #16]
 800aa20:	4311      	orrs	r1, r2
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	69d2      	ldr	r2, [r2, #28]
 800aa26:	4311      	orrs	r1, r2
 800aa28:	687a      	ldr	r2, [r7, #4]
 800aa2a:	6812      	ldr	r2, [r2, #0]
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.PgaConnect | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	2b60      	cmp	r3, #96	@ 0x60
 800aa36:	d113      	bne.n	800aa60 <HAL_OPAMP_Init+0xd4>
    {
  /* In Follower mode InvertingInput is Not Applicable  */
    MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_FOLLOWER, \
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	4b35      	ldr	r3, [pc, #212]	@ (800ab14 <HAL_OPAMP_Init+0x188>)
 800aa40:	4013      	ands	r3, r2
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	6851      	ldr	r1, [r2, #4]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	6892      	ldr	r2, [r2, #8]
 800aa4a:	4311      	orrs	r1, r2
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	6912      	ldr	r2, [r2, #16]
 800aa50:	4311      	orrs	r1, r2
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	69d2      	ldr	r2, [r2, #28]
 800aa56:	4311      	orrs	r1, r2
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	6812      	ldr	r2, [r2, #0]
 800aa5c:	430b      	orrs	r3, r1
 800aa5e:	6013      	str	r3, [r2, #0]
                                              hopamp->Init.Mode | \
                                              hopamp->Init.NonInvertingInput | \
                                              hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.Mode == OPAMP_STANDALONE_MODE)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d116      	bne.n	800aa96 <HAL_OPAMP_Init+0x10a>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_INIT_MASK_STANDALONE, \
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	4b29      	ldr	r3, [pc, #164]	@ (800ab14 <HAL_OPAMP_Init+0x188>)
 800aa70:	4013      	ands	r3, r2
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	6851      	ldr	r1, [r2, #4]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	6892      	ldr	r2, [r2, #8]
 800aa7a:	4311      	orrs	r1, r2
 800aa7c:	687a      	ldr	r2, [r7, #4]
 800aa7e:	68d2      	ldr	r2, [r2, #12]
 800aa80:	4311      	orrs	r1, r2
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	6912      	ldr	r2, [r2, #16]
 800aa86:	4311      	orrs	r1, r2
 800aa88:	687a      	ldr	r2, [r7, #4]
 800aa8a:	69d2      	ldr	r2, [r2, #28]
 800aa8c:	4311      	orrs	r1, r2
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	6812      	ldr	r2, [r2, #0]
 800aa92:	430b      	orrs	r3, r1
 800aa94:	6013      	str	r3, [r2, #0]
                                        hopamp->Init.InvertingInput    | \
                                        hopamp->Init.NonInvertingInput | \
                                        hopamp->Init.UserTrimming);
    }

    if (hopamp->Init.UserTrimming == OPAMP_TRIMMING_USER)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	69db      	ldr	r3, [r3, #28]
 800aa9a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800aa9e:	d127      	bne.n	800aaf0 <HAL_OPAMP_Init+0x164>
    {
      /* Set power mode and associated calibration parameters */
      if (hopamp->Init.PowerMode != OPAMP_POWERMODE_HIGHSPEED)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	685b      	ldr	r3, [r3, #4]
 800aaa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaa8:	d011      	beq.n	800aace <HAL_OPAMP_Init+0x142>
      {
        /* OPAMP_POWERMODE_NORMAL */
        /* Set calibration mode (factory or user) and values for            */
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* normal mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6a1b      	ldr	r3, [r3, #32]
 800aaae:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueN));
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        updateotrlpotr = (((hopamp->Init.TrimmingValueP) << (OPAMP_INPUT_NONINVERTING)) \
 800aab4:	4313      	orrs	r3, r2
 800aab6:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->OTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	4b16      	ldr	r3, [pc, #88]	@ (800ab18 <HAL_OPAMP_Init+0x18c>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	6812      	ldr	r2, [r2, #0]
 800aac6:	68b9      	ldr	r1, [r7, #8]
 800aac8:	430b      	orrs	r3, r1
 800aaca:	6053      	str	r3, [r2, #4]
 800aacc:	e010      	b.n	800aaf0 <HAL_OPAMP_Init+0x164>
      else
      {
        /* OPAMP_POWERMODE_HIGHSPEED*/
        /* transistors differential pair high (PMOS) and low (NMOS) for     */
        /* high speed mode.                                                     */
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad2:	021a      	lsls	r2, r3, #8
                         | (hopamp->Init.TrimmingValueNHighSpeed));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        updateotrlpotr = (((hopamp->Init.TrimmingValuePHighSpeed) << (OPAMP_INPUT_NONINVERTING)) \
 800aad8:	4313      	orrs	r3, r2
 800aada:	60bb      	str	r3, [r7, #8]
        MODIFY_REG(hopamp->Instance->HSOTR, OPAMP_OTR_TRIMOFFSETN | OPAMP_OTR_TRIMOFFSETP, updateotrlpotr);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689a      	ldr	r2, [r3, #8]
 800aae2:	4b0d      	ldr	r3, [pc, #52]	@ (800ab18 <HAL_OPAMP_Init+0x18c>)
 800aae4:	4013      	ands	r3, r2
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	6812      	ldr	r2, [r2, #0]
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	430b      	orrs	r3, r1
 800aaee:	6093      	str	r3, [r2, #8]
      }
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d103      	bne.n	800ab04 <HAL_OPAMP_Init+0x178>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
    return status;
 800ab04:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	fff83e93 	.word	0xfff83e93
 800ab14:	fffbfe93 	.word	0xfffbfe93
 800ab18:	ffffe0e0 	.word	0xffffe0e0

0800ab1c <HAL_OPAMP_Start>:
  * @brief  Start the OPAMP.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ab24:	2300      	movs	r3, #0
 800ab26:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if(hopamp == NULL)
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d102      	bne.n	800ab34 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800ab2e:	2301      	movs	r3, #1
 800ab30:	73fb      	strb	r3, [r7, #15]
 800ab32:	e01d      	b.n	800ab70 <HAL_OPAMP_Start+0x54>
  }
  else if(hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ab3a:	b2db      	uxtb	r3, r3
 800ab3c:	2b05      	cmp	r3, #5
 800ab3e:	d102      	bne.n	800ab46 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	73fb      	strb	r3, [r7, #15]
 800ab44:	e014      	b.n	800ab70 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if(hopamp->State == HAL_OPAMP_STATE_READY)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d10c      	bne.n	800ab6c <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT (hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f042 0201 	orr.w	r2, r2, #1
 800ab60:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2204      	movs	r2, #4
 800ab66:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
 800ab6a:	e001      	b.n	800ab70 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	73fb      	strb	r3, [r7, #15]
    }

   }
  return status;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3714      	adds	r7, #20
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
	...

0800ab80 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b084      	sub	sp, #16
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ab88:	4b19      	ldr	r3, [pc, #100]	@ (800abf0 <HAL_PWREx_ConfigSupply+0x70>)
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b04      	cmp	r3, #4
 800ab92:	d00a      	beq.n	800abaa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ab94:	4b16      	ldr	r3, [pc, #88]	@ (800abf0 <HAL_PWREx_ConfigSupply+0x70>)
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	f003 0307 	and.w	r3, r3, #7
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d001      	beq.n	800aba6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800aba2:	2301      	movs	r3, #1
 800aba4:	e01f      	b.n	800abe6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800aba6:	2300      	movs	r3, #0
 800aba8:	e01d      	b.n	800abe6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800abaa:	4b11      	ldr	r3, [pc, #68]	@ (800abf0 <HAL_PWREx_ConfigSupply+0x70>)
 800abac:	68db      	ldr	r3, [r3, #12]
 800abae:	f023 0207 	bic.w	r2, r3, #7
 800abb2:	490f      	ldr	r1, [pc, #60]	@ (800abf0 <HAL_PWREx_ConfigSupply+0x70>)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	4313      	orrs	r3, r2
 800abb8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800abba:	f7f9 faf9 	bl	80041b0 <HAL_GetTick>
 800abbe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800abc0:	e009      	b.n	800abd6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800abc2:	f7f9 faf5 	bl	80041b0 <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800abd0:	d901      	bls.n	800abd6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e007      	b.n	800abe6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800abd6:	4b06      	ldr	r3, [pc, #24]	@ (800abf0 <HAL_PWREx_ConfigSupply+0x70>)
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800abde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abe2:	d1ee      	bne.n	800abc2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	58024800 	.word	0x58024800

0800abf4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b08c      	sub	sp, #48	@ 0x30
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e3c8      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f003 0301 	and.w	r3, r3, #1
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f000 8087 	beq.w	800ad22 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac14:	4b88      	ldr	r3, [pc, #544]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ac1e:	4b86      	ldr	r3, [pc, #536]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac22:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ac24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac26:	2b10      	cmp	r3, #16
 800ac28:	d007      	beq.n	800ac3a <HAL_RCC_OscConfig+0x46>
 800ac2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac2c:	2b18      	cmp	r3, #24
 800ac2e:	d110      	bne.n	800ac52 <HAL_RCC_OscConfig+0x5e>
 800ac30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac32:	f003 0303 	and.w	r3, r3, #3
 800ac36:	2b02      	cmp	r3, #2
 800ac38:	d10b      	bne.n	800ac52 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ac3a:	4b7f      	ldr	r3, [pc, #508]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d06c      	beq.n	800ad20 <HAL_RCC_OscConfig+0x12c>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d168      	bne.n	800ad20 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e3a2      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac5a:	d106      	bne.n	800ac6a <HAL_RCC_OscConfig+0x76>
 800ac5c:	4b76      	ldr	r3, [pc, #472]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a75      	ldr	r2, [pc, #468]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ac66:	6013      	str	r3, [r2, #0]
 800ac68:	e02e      	b.n	800acc8 <HAL_RCC_OscConfig+0xd4>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d10c      	bne.n	800ac8c <HAL_RCC_OscConfig+0x98>
 800ac72:	4b71      	ldr	r3, [pc, #452]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a70      	ldr	r2, [pc, #448]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ac7c:	6013      	str	r3, [r2, #0]
 800ac7e:	4b6e      	ldr	r3, [pc, #440]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a6d      	ldr	r2, [pc, #436]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ac88:	6013      	str	r3, [r2, #0]
 800ac8a:	e01d      	b.n	800acc8 <HAL_RCC_OscConfig+0xd4>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ac94:	d10c      	bne.n	800acb0 <HAL_RCC_OscConfig+0xbc>
 800ac96:	4b68      	ldr	r3, [pc, #416]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a67      	ldr	r2, [pc, #412]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ac9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800aca0:	6013      	str	r3, [r2, #0]
 800aca2:	4b65      	ldr	r3, [pc, #404]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4a64      	ldr	r2, [pc, #400]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800aca8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800acac:	6013      	str	r3, [r2, #0]
 800acae:	e00b      	b.n	800acc8 <HAL_RCC_OscConfig+0xd4>
 800acb0:	4b61      	ldr	r3, [pc, #388]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a60      	ldr	r2, [pc, #384]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800acb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800acba:	6013      	str	r3, [r2, #0]
 800acbc:	4b5e      	ldr	r3, [pc, #376]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a5d      	ldr	r2, [pc, #372]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800acc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800acc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	685b      	ldr	r3, [r3, #4]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d013      	beq.n	800acf8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acd0:	f7f9 fa6e 	bl	80041b0 <HAL_GetTick>
 800acd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acd6:	e008      	b.n	800acea <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800acd8:	f7f9 fa6a 	bl	80041b0 <HAL_GetTick>
 800acdc:	4602      	mov	r2, r0
 800acde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace0:	1ad3      	subs	r3, r2, r3
 800ace2:	2b64      	cmp	r3, #100	@ 0x64
 800ace4:	d901      	bls.n	800acea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800ace6:	2303      	movs	r3, #3
 800ace8:	e356      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800acea:	4b53      	ldr	r3, [pc, #332]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0f0      	beq.n	800acd8 <HAL_RCC_OscConfig+0xe4>
 800acf6:	e014      	b.n	800ad22 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acf8:	f7f9 fa5a 	bl	80041b0 <HAL_GetTick>
 800acfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800acfe:	e008      	b.n	800ad12 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ad00:	f7f9 fa56 	bl	80041b0 <HAL_GetTick>
 800ad04:	4602      	mov	r2, r0
 800ad06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	2b64      	cmp	r3, #100	@ 0x64
 800ad0c:	d901      	bls.n	800ad12 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800ad0e:	2303      	movs	r3, #3
 800ad10:	e342      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800ad12:	4b49      	ldr	r3, [pc, #292]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1f0      	bne.n	800ad00 <HAL_RCC_OscConfig+0x10c>
 800ad1e:	e000      	b.n	800ad22 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f003 0302 	and.w	r3, r3, #2
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f000 808c 	beq.w	800ae48 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ad30:	4b41      	ldr	r3, [pc, #260]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ad38:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ad3a:	4b3f      	ldr	r3, [pc, #252]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ad3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad3e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800ad40:	6a3b      	ldr	r3, [r7, #32]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d007      	beq.n	800ad56 <HAL_RCC_OscConfig+0x162>
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	2b18      	cmp	r3, #24
 800ad4a:	d137      	bne.n	800adbc <HAL_RCC_OscConfig+0x1c8>
 800ad4c:	69fb      	ldr	r3, [r7, #28]
 800ad4e:	f003 0303 	and.w	r3, r3, #3
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d132      	bne.n	800adbc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ad56:	4b38      	ldr	r3, [pc, #224]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f003 0304 	and.w	r3, r3, #4
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d005      	beq.n	800ad6e <HAL_RCC_OscConfig+0x17a>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e314      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800ad6e:	4b32      	ldr	r3, [pc, #200]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f023 0219 	bic.w	r2, r3, #25
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	68db      	ldr	r3, [r3, #12]
 800ad7a:	492f      	ldr	r1, [pc, #188]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad80:	f7f9 fa16 	bl	80041b0 <HAL_GetTick>
 800ad84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad86:	e008      	b.n	800ad9a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ad88:	f7f9 fa12 	bl	80041b0 <HAL_GetTick>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d901      	bls.n	800ad9a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800ad96:	2303      	movs	r3, #3
 800ad98:	e2fe      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ad9a:	4b27      	ldr	r3, [pc, #156]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f003 0304 	and.w	r3, r3, #4
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0f0      	beq.n	800ad88 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ada6:	4b24      	ldr	r3, [pc, #144]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	691b      	ldr	r3, [r3, #16]
 800adb2:	061b      	lsls	r3, r3, #24
 800adb4:	4920      	ldr	r1, [pc, #128]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800adb6:	4313      	orrs	r3, r2
 800adb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800adba:	e045      	b.n	800ae48 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d026      	beq.n	800ae12 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800adc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f023 0219 	bic.w	r2, r3, #25
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	4919      	ldr	r1, [pc, #100]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800add2:	4313      	orrs	r3, r2
 800add4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800add6:	f7f9 f9eb 	bl	80041b0 <HAL_GetTick>
 800adda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800addc:	e008      	b.n	800adf0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800adde:	f7f9 f9e7 	bl	80041b0 <HAL_GetTick>
 800ade2:	4602      	mov	r2, r0
 800ade4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ade6:	1ad3      	subs	r3, r2, r3
 800ade8:	2b02      	cmp	r3, #2
 800adea:	d901      	bls.n	800adf0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800adec:	2303      	movs	r3, #3
 800adee:	e2d3      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800adf0:	4b11      	ldr	r3, [pc, #68]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d0f0      	beq.n	800adde <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800adfc:	4b0e      	ldr	r3, [pc, #56]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800adfe:	685b      	ldr	r3, [r3, #4]
 800ae00:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	691b      	ldr	r3, [r3, #16]
 800ae08:	061b      	lsls	r3, r3, #24
 800ae0a:	490b      	ldr	r1, [pc, #44]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	604b      	str	r3, [r1, #4]
 800ae10:	e01a      	b.n	800ae48 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ae12:	4b09      	ldr	r3, [pc, #36]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a08      	ldr	r2, [pc, #32]	@ (800ae38 <HAL_RCC_OscConfig+0x244>)
 800ae18:	f023 0301 	bic.w	r3, r3, #1
 800ae1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae1e:	f7f9 f9c7 	bl	80041b0 <HAL_GetTick>
 800ae22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ae24:	e00a      	b.n	800ae3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ae26:	f7f9 f9c3 	bl	80041b0 <HAL_GetTick>
 800ae2a:	4602      	mov	r2, r0
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d903      	bls.n	800ae3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800ae34:	2303      	movs	r3, #3
 800ae36:	e2af      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
 800ae38:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ae3c:	4b96      	ldr	r3, [pc, #600]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1ee      	bne.n	800ae26 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0310 	and.w	r3, r3, #16
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d06a      	beq.n	800af2a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae54:	4b90      	ldr	r3, [pc, #576]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800ae56:	691b      	ldr	r3, [r3, #16]
 800ae58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ae5c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae5e:	4b8e      	ldr	r3, [pc, #568]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800ae60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae62:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ae64:	69bb      	ldr	r3, [r7, #24]
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d007      	beq.n	800ae7a <HAL_RCC_OscConfig+0x286>
 800ae6a:	69bb      	ldr	r3, [r7, #24]
 800ae6c:	2b18      	cmp	r3, #24
 800ae6e:	d11b      	bne.n	800aea8 <HAL_RCC_OscConfig+0x2b4>
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d116      	bne.n	800aea8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ae7a:	4b87      	ldr	r3, [pc, #540]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d005      	beq.n	800ae92 <HAL_RCC_OscConfig+0x29e>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	69db      	ldr	r3, [r3, #28]
 800ae8a:	2b80      	cmp	r3, #128	@ 0x80
 800ae8c:	d001      	beq.n	800ae92 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ae8e:	2301      	movs	r3, #1
 800ae90:	e282      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ae92:	4b81      	ldr	r3, [pc, #516]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a1b      	ldr	r3, [r3, #32]
 800ae9e:	061b      	lsls	r3, r3, #24
 800aea0:	497d      	ldr	r1, [pc, #500]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800aea2:	4313      	orrs	r3, r2
 800aea4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aea6:	e040      	b.n	800af2a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	69db      	ldr	r3, [r3, #28]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d023      	beq.n	800aef8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800aeb0:	4b79      	ldr	r3, [pc, #484]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a78      	ldr	r2, [pc, #480]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800aeb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aeba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aebc:	f7f9 f978 	bl	80041b0 <HAL_GetTick>
 800aec0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aec2:	e008      	b.n	800aed6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aec4:	f7f9 f974 	bl	80041b0 <HAL_GetTick>
 800aec8:	4602      	mov	r2, r0
 800aeca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aecc:	1ad3      	subs	r3, r2, r3
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d901      	bls.n	800aed6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800aed2:	2303      	movs	r3, #3
 800aed4:	e260      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800aed6:	4b70      	ldr	r3, [pc, #448]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d0f0      	beq.n	800aec4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aee2:	4b6d      	ldr	r3, [pc, #436]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	061b      	lsls	r3, r3, #24
 800aef0:	4969      	ldr	r1, [pc, #420]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	60cb      	str	r3, [r1, #12]
 800aef6:	e018      	b.n	800af2a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aef8:	4b67      	ldr	r3, [pc, #412]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	4a66      	ldr	r2, [pc, #408]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800aefe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800af02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af04:	f7f9 f954 	bl	80041b0 <HAL_GetTick>
 800af08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af0a:	e008      	b.n	800af1e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800af0c:	f7f9 f950 	bl	80041b0 <HAL_GetTick>
 800af10:	4602      	mov	r2, r0
 800af12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af14:	1ad3      	subs	r3, r2, r3
 800af16:	2b02      	cmp	r3, #2
 800af18:	d901      	bls.n	800af1e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800af1a:	2303      	movs	r3, #3
 800af1c:	e23c      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800af1e:	4b5e      	ldr	r3, [pc, #376]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af26:	2b00      	cmp	r3, #0
 800af28:	d1f0      	bne.n	800af0c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0308 	and.w	r3, r3, #8
 800af32:	2b00      	cmp	r3, #0
 800af34:	d036      	beq.n	800afa4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	695b      	ldr	r3, [r3, #20]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d019      	beq.n	800af72 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af3e:	4b56      	ldr	r3, [pc, #344]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800af40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af42:	4a55      	ldr	r2, [pc, #340]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800af44:	f043 0301 	orr.w	r3, r3, #1
 800af48:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af4a:	f7f9 f931 	bl	80041b0 <HAL_GetTick>
 800af4e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af50:	e008      	b.n	800af64 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af52:	f7f9 f92d 	bl	80041b0 <HAL_GetTick>
 800af56:	4602      	mov	r2, r0
 800af58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d901      	bls.n	800af64 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800af60:	2303      	movs	r3, #3
 800af62:	e219      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800af64:	4b4c      	ldr	r3, [pc, #304]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800af66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af68:	f003 0302 	and.w	r3, r3, #2
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d0f0      	beq.n	800af52 <HAL_RCC_OscConfig+0x35e>
 800af70:	e018      	b.n	800afa4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af72:	4b49      	ldr	r3, [pc, #292]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800af74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af76:	4a48      	ldr	r2, [pc, #288]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800af78:	f023 0301 	bic.w	r3, r3, #1
 800af7c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af7e:	f7f9 f917 	bl	80041b0 <HAL_GetTick>
 800af82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af84:	e008      	b.n	800af98 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af86:	f7f9 f913 	bl	80041b0 <HAL_GetTick>
 800af8a:	4602      	mov	r2, r0
 800af8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	2b02      	cmp	r3, #2
 800af92:	d901      	bls.n	800af98 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800af94:	2303      	movs	r3, #3
 800af96:	e1ff      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800af98:	4b3f      	ldr	r3, [pc, #252]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800af9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af9c:	f003 0302 	and.w	r3, r3, #2
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1f0      	bne.n	800af86 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0320 	and.w	r3, r3, #32
 800afac:	2b00      	cmp	r3, #0
 800afae:	d036      	beq.n	800b01e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	699b      	ldr	r3, [r3, #24]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d019      	beq.n	800afec <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800afb8:	4b37      	ldr	r3, [pc, #220]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a36      	ldr	r2, [pc, #216]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800afbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800afc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800afc4:	f7f9 f8f4 	bl	80041b0 <HAL_GetTick>
 800afc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800afca:	e008      	b.n	800afde <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800afcc:	f7f9 f8f0 	bl	80041b0 <HAL_GetTick>
 800afd0:	4602      	mov	r2, r0
 800afd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afd4:	1ad3      	subs	r3, r2, r3
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d901      	bls.n	800afde <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800afda:	2303      	movs	r3, #3
 800afdc:	e1dc      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800afde:	4b2e      	ldr	r3, [pc, #184]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d0f0      	beq.n	800afcc <HAL_RCC_OscConfig+0x3d8>
 800afea:	e018      	b.n	800b01e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800afec:	4b2a      	ldr	r3, [pc, #168]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a29      	ldr	r2, [pc, #164]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800aff2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aff6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aff8:	f7f9 f8da 	bl	80041b0 <HAL_GetTick>
 800affc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800affe:	e008      	b.n	800b012 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b000:	f7f9 f8d6 	bl	80041b0 <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d901      	bls.n	800b012 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800b00e:	2303      	movs	r3, #3
 800b010:	e1c2      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b012:	4b21      	ldr	r3, [pc, #132]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d1f0      	bne.n	800b000 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0304 	and.w	r3, r3, #4
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 8086 	beq.w	800b138 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b02c:	4b1b      	ldr	r3, [pc, #108]	@ (800b09c <HAL_RCC_OscConfig+0x4a8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a1a      	ldr	r2, [pc, #104]	@ (800b09c <HAL_RCC_OscConfig+0x4a8>)
 800b032:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b038:	f7f9 f8ba 	bl	80041b0 <HAL_GetTick>
 800b03c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b03e:	e008      	b.n	800b052 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b040:	f7f9 f8b6 	bl	80041b0 <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	2b64      	cmp	r3, #100	@ 0x64
 800b04c:	d901      	bls.n	800b052 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800b04e:	2303      	movs	r3, #3
 800b050:	e1a2      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b052:	4b12      	ldr	r3, [pc, #72]	@ (800b09c <HAL_RCC_OscConfig+0x4a8>)
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0f0      	beq.n	800b040 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	2b01      	cmp	r3, #1
 800b064:	d106      	bne.n	800b074 <HAL_RCC_OscConfig+0x480>
 800b066:	4b0c      	ldr	r3, [pc, #48]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800b068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b06a:	4a0b      	ldr	r2, [pc, #44]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800b06c:	f043 0301 	orr.w	r3, r3, #1
 800b070:	6713      	str	r3, [r2, #112]	@ 0x70
 800b072:	e032      	b.n	800b0da <HAL_RCC_OscConfig+0x4e6>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	689b      	ldr	r3, [r3, #8]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d111      	bne.n	800b0a0 <HAL_RCC_OscConfig+0x4ac>
 800b07c:	4b06      	ldr	r3, [pc, #24]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800b07e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b080:	4a05      	ldr	r2, [pc, #20]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800b082:	f023 0301 	bic.w	r3, r3, #1
 800b086:	6713      	str	r3, [r2, #112]	@ 0x70
 800b088:	4b03      	ldr	r3, [pc, #12]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800b08a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b08c:	4a02      	ldr	r2, [pc, #8]	@ (800b098 <HAL_RCC_OscConfig+0x4a4>)
 800b08e:	f023 0304 	bic.w	r3, r3, #4
 800b092:	6713      	str	r3, [r2, #112]	@ 0x70
 800b094:	e021      	b.n	800b0da <HAL_RCC_OscConfig+0x4e6>
 800b096:	bf00      	nop
 800b098:	58024400 	.word	0x58024400
 800b09c:	58024800 	.word	0x58024800
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	689b      	ldr	r3, [r3, #8]
 800b0a4:	2b05      	cmp	r3, #5
 800b0a6:	d10c      	bne.n	800b0c2 <HAL_RCC_OscConfig+0x4ce>
 800b0a8:	4b83      	ldr	r3, [pc, #524]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b0aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0ac:	4a82      	ldr	r2, [pc, #520]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b0ae:	f043 0304 	orr.w	r3, r3, #4
 800b0b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0b4:	4b80      	ldr	r3, [pc, #512]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b0b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0b8:	4a7f      	ldr	r2, [pc, #508]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b0ba:	f043 0301 	orr.w	r3, r3, #1
 800b0be:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0c0:	e00b      	b.n	800b0da <HAL_RCC_OscConfig+0x4e6>
 800b0c2:	4b7d      	ldr	r3, [pc, #500]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b0c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0c6:	4a7c      	ldr	r2, [pc, #496]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b0c8:	f023 0301 	bic.w	r3, r3, #1
 800b0cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800b0ce:	4b7a      	ldr	r3, [pc, #488]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b0d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0d2:	4a79      	ldr	r2, [pc, #484]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b0d4:	f023 0304 	bic.w	r3, r3, #4
 800b0d8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d015      	beq.n	800b10e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b0e2:	f7f9 f865 	bl	80041b0 <HAL_GetTick>
 800b0e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b0e8:	e00a      	b.n	800b100 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0ea:	f7f9 f861 	bl	80041b0 <HAL_GetTick>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d901      	bls.n	800b100 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e14b      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b100:	4b6d      	ldr	r3, [pc, #436]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b104:	f003 0302 	and.w	r3, r3, #2
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d0ee      	beq.n	800b0ea <HAL_RCC_OscConfig+0x4f6>
 800b10c:	e014      	b.n	800b138 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b10e:	f7f9 f84f 	bl	80041b0 <HAL_GetTick>
 800b112:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b114:	e00a      	b.n	800b12c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b116:	f7f9 f84b 	bl	80041b0 <HAL_GetTick>
 800b11a:	4602      	mov	r2, r0
 800b11c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b11e:	1ad3      	subs	r3, r2, r3
 800b120:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b124:	4293      	cmp	r3, r2
 800b126:	d901      	bls.n	800b12c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800b128:	2303      	movs	r3, #3
 800b12a:	e135      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b12c:	4b62      	ldr	r3, [pc, #392]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b12e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b130:	f003 0302 	and.w	r3, r3, #2
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1ee      	bne.n	800b116 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 812a 	beq.w	800b396 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b142:	4b5d      	ldr	r3, [pc, #372]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b14a:	2b18      	cmp	r3, #24
 800b14c:	f000 80ba 	beq.w	800b2c4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b154:	2b02      	cmp	r3, #2
 800b156:	f040 8095 	bne.w	800b284 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b15a:	4b57      	ldr	r3, [pc, #348]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4a56      	ldr	r2, [pc, #344]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b160:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b166:	f7f9 f823 	bl	80041b0 <HAL_GetTick>
 800b16a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b16c:	e008      	b.n	800b180 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b16e:	f7f9 f81f 	bl	80041b0 <HAL_GetTick>
 800b172:	4602      	mov	r2, r0
 800b174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	2b02      	cmp	r3, #2
 800b17a:	d901      	bls.n	800b180 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800b17c:	2303      	movs	r3, #3
 800b17e:	e10b      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b180:	4b4d      	ldr	r3, [pc, #308]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1f0      	bne.n	800b16e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b18c:	4b4a      	ldr	r3, [pc, #296]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b18e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b190:	4b4a      	ldr	r3, [pc, #296]	@ (800b2bc <HAL_RCC_OscConfig+0x6c8>)
 800b192:	4013      	ands	r3, r2
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800b19c:	0112      	lsls	r2, r2, #4
 800b19e:	430a      	orrs	r2, r1
 800b1a0:	4945      	ldr	r1, [pc, #276]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b1a2:	4313      	orrs	r3, r2
 800b1a4:	628b      	str	r3, [r1, #40]	@ 0x28
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b1aa:	3b01      	subs	r3, #1
 800b1ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	025b      	lsls	r3, r3, #9
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	431a      	orrs	r2, r3
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	041b      	lsls	r3, r3, #16
 800b1c4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b1c8:	431a      	orrs	r2, r3
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b1ce:	3b01      	subs	r3, #1
 800b1d0:	061b      	lsls	r3, r3, #24
 800b1d2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b1d6:	4938      	ldr	r1, [pc, #224]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800b1dc:	4b36      	ldr	r3, [pc, #216]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b1de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1e0:	4a35      	ldr	r2, [pc, #212]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b1e2:	f023 0301 	bic.w	r3, r3, #1
 800b1e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b1e8:	4b33      	ldr	r3, [pc, #204]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b1ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b1ec:	4b34      	ldr	r3, [pc, #208]	@ (800b2c0 <HAL_RCC_OscConfig+0x6cc>)
 800b1ee:	4013      	ands	r3, r2
 800b1f0:	687a      	ldr	r2, [r7, #4]
 800b1f2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b1f4:	00d2      	lsls	r2, r2, #3
 800b1f6:	4930      	ldr	r1, [pc, #192]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b1fc:	4b2e      	ldr	r3, [pc, #184]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b1fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b200:	f023 020c 	bic.w	r2, r3, #12
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b208:	492b      	ldr	r1, [pc, #172]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b20a:	4313      	orrs	r3, r2
 800b20c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b20e:	4b2a      	ldr	r3, [pc, #168]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b212:	f023 0202 	bic.w	r2, r3, #2
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b21a:	4927      	ldr	r1, [pc, #156]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b21c:	4313      	orrs	r3, r2
 800b21e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b220:	4b25      	ldr	r3, [pc, #148]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b224:	4a24      	ldr	r2, [pc, #144]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b22a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b22c:	4b22      	ldr	r3, [pc, #136]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b230:	4a21      	ldr	r2, [pc, #132]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b232:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b236:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b238:	4b1f      	ldr	r3, [pc, #124]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b23a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b23c:	4a1e      	ldr	r2, [pc, #120]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b23e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800b244:	4b1c      	ldr	r3, [pc, #112]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b248:	4a1b      	ldr	r2, [pc, #108]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b24a:	f043 0301 	orr.w	r3, r3, #1
 800b24e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b250:	4b19      	ldr	r3, [pc, #100]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	4a18      	ldr	r2, [pc, #96]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b256:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b25a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b25c:	f7f8 ffa8 	bl	80041b0 <HAL_GetTick>
 800b260:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b262:	e008      	b.n	800b276 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b264:	f7f8 ffa4 	bl	80041b0 <HAL_GetTick>
 800b268:	4602      	mov	r2, r0
 800b26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b26c:	1ad3      	subs	r3, r2, r3
 800b26e:	2b02      	cmp	r3, #2
 800b270:	d901      	bls.n	800b276 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800b272:	2303      	movs	r3, #3
 800b274:	e090      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b276:	4b10      	ldr	r3, [pc, #64]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0f0      	beq.n	800b264 <HAL_RCC_OscConfig+0x670>
 800b282:	e088      	b.n	800b396 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b284:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4a0b      	ldr	r2, [pc, #44]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b28a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b28e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b290:	f7f8 ff8e 	bl	80041b0 <HAL_GetTick>
 800b294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b296:	e008      	b.n	800b2aa <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b298:	f7f8 ff8a 	bl	80041b0 <HAL_GetTick>
 800b29c:	4602      	mov	r2, r0
 800b29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	2b02      	cmp	r3, #2
 800b2a4:	d901      	bls.n	800b2aa <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800b2a6:	2303      	movs	r3, #3
 800b2a8:	e076      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b2aa:	4b03      	ldr	r3, [pc, #12]	@ (800b2b8 <HAL_RCC_OscConfig+0x6c4>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1f0      	bne.n	800b298 <HAL_RCC_OscConfig+0x6a4>
 800b2b6:	e06e      	b.n	800b396 <HAL_RCC_OscConfig+0x7a2>
 800b2b8:	58024400 	.word	0x58024400
 800b2bc:	fffffc0c 	.word	0xfffffc0c
 800b2c0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b2c4:	4b36      	ldr	r3, [pc, #216]	@ (800b3a0 <HAL_RCC_OscConfig+0x7ac>)
 800b2c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b2ca:	4b35      	ldr	r3, [pc, #212]	@ (800b3a0 <HAL_RCC_OscConfig+0x7ac>)
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d031      	beq.n	800b33c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	f003 0203 	and.w	r2, r3, #3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d12a      	bne.n	800b33c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	091b      	lsrs	r3, r3, #4
 800b2ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d122      	bne.n	800b33c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b300:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b302:	429a      	cmp	r2, r3
 800b304:	d11a      	bne.n	800b33c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	0a5b      	lsrs	r3, r3, #9
 800b30a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b312:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b314:	429a      	cmp	r2, r3
 800b316:	d111      	bne.n	800b33c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	0c1b      	lsrs	r3, r3, #16
 800b31c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b324:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b326:	429a      	cmp	r2, r3
 800b328:	d108      	bne.n	800b33c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	0e1b      	lsrs	r3, r3, #24
 800b32e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b336:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b338:	429a      	cmp	r2, r3
 800b33a:	d001      	beq.n	800b340 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800b33c:	2301      	movs	r3, #1
 800b33e:	e02b      	b.n	800b398 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b340:	4b17      	ldr	r3, [pc, #92]	@ (800b3a0 <HAL_RCC_OscConfig+0x7ac>)
 800b342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b344:	08db      	lsrs	r3, r3, #3
 800b346:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b34a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b350:	693a      	ldr	r2, [r7, #16]
 800b352:	429a      	cmp	r2, r3
 800b354:	d01f      	beq.n	800b396 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b356:	4b12      	ldr	r3, [pc, #72]	@ (800b3a0 <HAL_RCC_OscConfig+0x7ac>)
 800b358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b35a:	4a11      	ldr	r2, [pc, #68]	@ (800b3a0 <HAL_RCC_OscConfig+0x7ac>)
 800b35c:	f023 0301 	bic.w	r3, r3, #1
 800b360:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b362:	f7f8 ff25 	bl	80041b0 <HAL_GetTick>
 800b366:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b368:	bf00      	nop
 800b36a:	f7f8 ff21 	bl	80041b0 <HAL_GetTick>
 800b36e:	4602      	mov	r2, r0
 800b370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b372:	4293      	cmp	r3, r2
 800b374:	d0f9      	beq.n	800b36a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b376:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a0 <HAL_RCC_OscConfig+0x7ac>)
 800b378:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b37a:	4b0a      	ldr	r3, [pc, #40]	@ (800b3a4 <HAL_RCC_OscConfig+0x7b0>)
 800b37c:	4013      	ands	r3, r2
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b382:	00d2      	lsls	r2, r2, #3
 800b384:	4906      	ldr	r1, [pc, #24]	@ (800b3a0 <HAL_RCC_OscConfig+0x7ac>)
 800b386:	4313      	orrs	r3, r2
 800b388:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b38a:	4b05      	ldr	r3, [pc, #20]	@ (800b3a0 <HAL_RCC_OscConfig+0x7ac>)
 800b38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38e:	4a04      	ldr	r2, [pc, #16]	@ (800b3a0 <HAL_RCC_OscConfig+0x7ac>)
 800b390:	f043 0301 	orr.w	r3, r3, #1
 800b394:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3730      	adds	r7, #48	@ 0x30
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	58024400 	.word	0x58024400
 800b3a4:	ffff0007 	.word	0xffff0007

0800b3a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d101      	bne.n	800b3bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3b8:	2301      	movs	r3, #1
 800b3ba:	e19c      	b.n	800b6f6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3bc:	4b8a      	ldr	r3, [pc, #552]	@ (800b5e8 <HAL_RCC_ClockConfig+0x240>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	f003 030f 	and.w	r3, r3, #15
 800b3c4:	683a      	ldr	r2, [r7, #0]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d910      	bls.n	800b3ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ca:	4b87      	ldr	r3, [pc, #540]	@ (800b5e8 <HAL_RCC_ClockConfig+0x240>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f023 020f 	bic.w	r2, r3, #15
 800b3d2:	4985      	ldr	r1, [pc, #532]	@ (800b5e8 <HAL_RCC_ClockConfig+0x240>)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	4313      	orrs	r3, r2
 800b3d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3da:	4b83      	ldr	r3, [pc, #524]	@ (800b5e8 <HAL_RCC_ClockConfig+0x240>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f003 030f 	and.w	r3, r3, #15
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d001      	beq.n	800b3ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e184      	b.n	800b6f6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	f003 0304 	and.w	r3, r3, #4
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d010      	beq.n	800b41a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	691a      	ldr	r2, [r3, #16]
 800b3fc:	4b7b      	ldr	r3, [pc, #492]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b3fe:	699b      	ldr	r3, [r3, #24]
 800b400:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b404:	429a      	cmp	r2, r3
 800b406:	d908      	bls.n	800b41a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b408:	4b78      	ldr	r3, [pc, #480]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	4975      	ldr	r1, [pc, #468]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b416:	4313      	orrs	r3, r2
 800b418:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 0308 	and.w	r3, r3, #8
 800b422:	2b00      	cmp	r3, #0
 800b424:	d010      	beq.n	800b448 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	695a      	ldr	r2, [r3, #20]
 800b42a:	4b70      	ldr	r3, [pc, #448]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b42c:	69db      	ldr	r3, [r3, #28]
 800b42e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b432:	429a      	cmp	r2, r3
 800b434:	d908      	bls.n	800b448 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b436:	4b6d      	ldr	r3, [pc, #436]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b438:	69db      	ldr	r3, [r3, #28]
 800b43a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	695b      	ldr	r3, [r3, #20]
 800b442:	496a      	ldr	r1, [pc, #424]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b444:	4313      	orrs	r3, r2
 800b446:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	f003 0310 	and.w	r3, r3, #16
 800b450:	2b00      	cmp	r3, #0
 800b452:	d010      	beq.n	800b476 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	699a      	ldr	r2, [r3, #24]
 800b458:	4b64      	ldr	r3, [pc, #400]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b45a:	69db      	ldr	r3, [r3, #28]
 800b45c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b460:	429a      	cmp	r2, r3
 800b462:	d908      	bls.n	800b476 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b464:	4b61      	ldr	r3, [pc, #388]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b466:	69db      	ldr	r3, [r3, #28]
 800b468:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	495e      	ldr	r1, [pc, #376]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b472:	4313      	orrs	r3, r2
 800b474:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f003 0320 	and.w	r3, r3, #32
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d010      	beq.n	800b4a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	69da      	ldr	r2, [r3, #28]
 800b486:	4b59      	ldr	r3, [pc, #356]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b488:	6a1b      	ldr	r3, [r3, #32]
 800b48a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b48e:	429a      	cmp	r2, r3
 800b490:	d908      	bls.n	800b4a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b492:	4b56      	ldr	r3, [pc, #344]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	69db      	ldr	r3, [r3, #28]
 800b49e:	4953      	ldr	r1, [pc, #332]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f003 0302 	and.w	r3, r3, #2
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d010      	beq.n	800b4d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68da      	ldr	r2, [r3, #12]
 800b4b4:	4b4d      	ldr	r3, [pc, #308]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	f003 030f 	and.w	r3, r3, #15
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d908      	bls.n	800b4d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4c0:	4b4a      	ldr	r3, [pc, #296]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b4c2:	699b      	ldr	r3, [r3, #24]
 800b4c4:	f023 020f 	bic.w	r2, r3, #15
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	4947      	ldr	r1, [pc, #284]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 0301 	and.w	r3, r3, #1
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d055      	beq.n	800b58a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b4de:	4b43      	ldr	r3, [pc, #268]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b4e0:	699b      	ldr	r3, [r3, #24]
 800b4e2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	689b      	ldr	r3, [r3, #8]
 800b4ea:	4940      	ldr	r1, [pc, #256]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b4ec:	4313      	orrs	r3, r2
 800b4ee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	2b02      	cmp	r3, #2
 800b4f6:	d107      	bne.n	800b508 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b4f8:	4b3c      	ldr	r3, [pc, #240]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b500:	2b00      	cmp	r3, #0
 800b502:	d121      	bne.n	800b548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b504:	2301      	movs	r3, #1
 800b506:	e0f6      	b.n	800b6f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	2b03      	cmp	r3, #3
 800b50e:	d107      	bne.n	800b520 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b510:	4b36      	ldr	r3, [pc, #216]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d115      	bne.n	800b548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b51c:	2301      	movs	r3, #1
 800b51e:	e0ea      	b.n	800b6f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	2b01      	cmp	r3, #1
 800b526:	d107      	bne.n	800b538 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b528:	4b30      	ldr	r3, [pc, #192]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b530:	2b00      	cmp	r3, #0
 800b532:	d109      	bne.n	800b548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b534:	2301      	movs	r3, #1
 800b536:	e0de      	b.n	800b6f6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b538:	4b2c      	ldr	r3, [pc, #176]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 0304 	and.w	r3, r3, #4
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b544:	2301      	movs	r3, #1
 800b546:	e0d6      	b.n	800b6f6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b548:	4b28      	ldr	r3, [pc, #160]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	f023 0207 	bic.w	r2, r3, #7
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	4925      	ldr	r1, [pc, #148]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b556:	4313      	orrs	r3, r2
 800b558:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b55a:	f7f8 fe29 	bl	80041b0 <HAL_GetTick>
 800b55e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b560:	e00a      	b.n	800b578 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b562:	f7f8 fe25 	bl	80041b0 <HAL_GetTick>
 800b566:	4602      	mov	r2, r0
 800b568:	697b      	ldr	r3, [r7, #20]
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b570:	4293      	cmp	r3, r2
 800b572:	d901      	bls.n	800b578 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b574:	2303      	movs	r3, #3
 800b576:	e0be      	b.n	800b6f6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b578:	4b1c      	ldr	r3, [pc, #112]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	00db      	lsls	r3, r3, #3
 800b586:	429a      	cmp	r2, r3
 800b588:	d1eb      	bne.n	800b562 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 0302 	and.w	r3, r3, #2
 800b592:	2b00      	cmp	r3, #0
 800b594:	d010      	beq.n	800b5b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	68da      	ldr	r2, [r3, #12]
 800b59a:	4b14      	ldr	r3, [pc, #80]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b59c:	699b      	ldr	r3, [r3, #24]
 800b59e:	f003 030f 	and.w	r3, r3, #15
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d208      	bcs.n	800b5b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b5a6:	4b11      	ldr	r3, [pc, #68]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b5a8:	699b      	ldr	r3, [r3, #24]
 800b5aa:	f023 020f 	bic.w	r2, r3, #15
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	68db      	ldr	r3, [r3, #12]
 800b5b2:	490e      	ldr	r1, [pc, #56]	@ (800b5ec <HAL_RCC_ClockConfig+0x244>)
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e8 <HAL_RCC_ClockConfig+0x240>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 030f 	and.w	r3, r3, #15
 800b5c0:	683a      	ldr	r2, [r7, #0]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d214      	bcs.n	800b5f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5c6:	4b08      	ldr	r3, [pc, #32]	@ (800b5e8 <HAL_RCC_ClockConfig+0x240>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f023 020f 	bic.w	r2, r3, #15
 800b5ce:	4906      	ldr	r1, [pc, #24]	@ (800b5e8 <HAL_RCC_ClockConfig+0x240>)
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	4313      	orrs	r3, r2
 800b5d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5d6:	4b04      	ldr	r3, [pc, #16]	@ (800b5e8 <HAL_RCC_ClockConfig+0x240>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 030f 	and.w	r3, r3, #15
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	d005      	beq.n	800b5f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e086      	b.n	800b6f6 <HAL_RCC_ClockConfig+0x34e>
 800b5e8:	52002000 	.word	0x52002000
 800b5ec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 0304 	and.w	r3, r3, #4
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d010      	beq.n	800b61e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	691a      	ldr	r2, [r3, #16]
 800b600:	4b3f      	ldr	r3, [pc, #252]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b602:	699b      	ldr	r3, [r3, #24]
 800b604:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b608:	429a      	cmp	r2, r3
 800b60a:	d208      	bcs.n	800b61e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b60c:	4b3c      	ldr	r3, [pc, #240]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b60e:	699b      	ldr	r3, [r3, #24]
 800b610:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	4939      	ldr	r1, [pc, #228]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b61a:	4313      	orrs	r3, r2
 800b61c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 0308 	and.w	r3, r3, #8
 800b626:	2b00      	cmp	r3, #0
 800b628:	d010      	beq.n	800b64c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	695a      	ldr	r2, [r3, #20]
 800b62e:	4b34      	ldr	r3, [pc, #208]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b630:	69db      	ldr	r3, [r3, #28]
 800b632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b636:	429a      	cmp	r2, r3
 800b638:	d208      	bcs.n	800b64c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b63a:	4b31      	ldr	r3, [pc, #196]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b63c:	69db      	ldr	r3, [r3, #28]
 800b63e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	492e      	ldr	r1, [pc, #184]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b648:	4313      	orrs	r3, r2
 800b64a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0310 	and.w	r3, r3, #16
 800b654:	2b00      	cmp	r3, #0
 800b656:	d010      	beq.n	800b67a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	699a      	ldr	r2, [r3, #24]
 800b65c:	4b28      	ldr	r3, [pc, #160]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b65e:	69db      	ldr	r3, [r3, #28]
 800b660:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b664:	429a      	cmp	r2, r3
 800b666:	d208      	bcs.n	800b67a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b668:	4b25      	ldr	r3, [pc, #148]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b66a:	69db      	ldr	r3, [r3, #28]
 800b66c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	699b      	ldr	r3, [r3, #24]
 800b674:	4922      	ldr	r1, [pc, #136]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b676:	4313      	orrs	r3, r2
 800b678:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f003 0320 	and.w	r3, r3, #32
 800b682:	2b00      	cmp	r3, #0
 800b684:	d010      	beq.n	800b6a8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	69da      	ldr	r2, [r3, #28]
 800b68a:	4b1d      	ldr	r3, [pc, #116]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b68c:	6a1b      	ldr	r3, [r3, #32]
 800b68e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b692:	429a      	cmp	r2, r3
 800b694:	d208      	bcs.n	800b6a8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b696:	4b1a      	ldr	r3, [pc, #104]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	69db      	ldr	r3, [r3, #28]
 800b6a2:	4917      	ldr	r1, [pc, #92]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6a8:	f000 f834 	bl	800b714 <HAL_RCC_GetSysClockFreq>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	4b14      	ldr	r3, [pc, #80]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b6b0:	699b      	ldr	r3, [r3, #24]
 800b6b2:	0a1b      	lsrs	r3, r3, #8
 800b6b4:	f003 030f 	and.w	r3, r3, #15
 800b6b8:	4912      	ldr	r1, [pc, #72]	@ (800b704 <HAL_RCC_ClockConfig+0x35c>)
 800b6ba:	5ccb      	ldrb	r3, [r1, r3]
 800b6bc:	f003 031f 	and.w	r3, r3, #31
 800b6c0:	fa22 f303 	lsr.w	r3, r2, r3
 800b6c4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b700 <HAL_RCC_ClockConfig+0x358>)
 800b6c8:	699b      	ldr	r3, [r3, #24]
 800b6ca:	f003 030f 	and.w	r3, r3, #15
 800b6ce:	4a0d      	ldr	r2, [pc, #52]	@ (800b704 <HAL_RCC_ClockConfig+0x35c>)
 800b6d0:	5cd3      	ldrb	r3, [r2, r3]
 800b6d2:	f003 031f 	and.w	r3, r3, #31
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b6dc:	4a0a      	ldr	r2, [pc, #40]	@ (800b708 <HAL_RCC_ClockConfig+0x360>)
 800b6de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b6e0:	4a0a      	ldr	r2, [pc, #40]	@ (800b70c <HAL_RCC_ClockConfig+0x364>)
 800b6e2:	693b      	ldr	r3, [r7, #16]
 800b6e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b6e6:	4b0a      	ldr	r3, [pc, #40]	@ (800b710 <HAL_RCC_ClockConfig+0x368>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7f8 fd16 	bl	800411c <HAL_InitTick>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3718      	adds	r7, #24
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}
 800b6fe:	bf00      	nop
 800b700:	58024400 	.word	0x58024400
 800b704:	0801387c 	.word	0x0801387c
 800b708:	24000004 	.word	0x24000004
 800b70c:	24000000 	.word	0x24000000
 800b710:	24000008 	.word	0x24000008

0800b714 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b714:	b480      	push	{r7}
 800b716:	b089      	sub	sp, #36	@ 0x24
 800b718:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b71a:	4bb3      	ldr	r3, [pc, #716]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b71c:	691b      	ldr	r3, [r3, #16]
 800b71e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b722:	2b18      	cmp	r3, #24
 800b724:	f200 8155 	bhi.w	800b9d2 <HAL_RCC_GetSysClockFreq+0x2be>
 800b728:	a201      	add	r2, pc, #4	@ (adr r2, 800b730 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72e:	bf00      	nop
 800b730:	0800b795 	.word	0x0800b795
 800b734:	0800b9d3 	.word	0x0800b9d3
 800b738:	0800b9d3 	.word	0x0800b9d3
 800b73c:	0800b9d3 	.word	0x0800b9d3
 800b740:	0800b9d3 	.word	0x0800b9d3
 800b744:	0800b9d3 	.word	0x0800b9d3
 800b748:	0800b9d3 	.word	0x0800b9d3
 800b74c:	0800b9d3 	.word	0x0800b9d3
 800b750:	0800b7bb 	.word	0x0800b7bb
 800b754:	0800b9d3 	.word	0x0800b9d3
 800b758:	0800b9d3 	.word	0x0800b9d3
 800b75c:	0800b9d3 	.word	0x0800b9d3
 800b760:	0800b9d3 	.word	0x0800b9d3
 800b764:	0800b9d3 	.word	0x0800b9d3
 800b768:	0800b9d3 	.word	0x0800b9d3
 800b76c:	0800b9d3 	.word	0x0800b9d3
 800b770:	0800b7c1 	.word	0x0800b7c1
 800b774:	0800b9d3 	.word	0x0800b9d3
 800b778:	0800b9d3 	.word	0x0800b9d3
 800b77c:	0800b9d3 	.word	0x0800b9d3
 800b780:	0800b9d3 	.word	0x0800b9d3
 800b784:	0800b9d3 	.word	0x0800b9d3
 800b788:	0800b9d3 	.word	0x0800b9d3
 800b78c:	0800b9d3 	.word	0x0800b9d3
 800b790:	0800b7c7 	.word	0x0800b7c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b794:	4b94      	ldr	r3, [pc, #592]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f003 0320 	and.w	r3, r3, #32
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d009      	beq.n	800b7b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7a0:	4b91      	ldr	r3, [pc, #580]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	08db      	lsrs	r3, r3, #3
 800b7a6:	f003 0303 	and.w	r3, r3, #3
 800b7aa:	4a90      	ldr	r2, [pc, #576]	@ (800b9ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7ac:	fa22 f303 	lsr.w	r3, r2, r3
 800b7b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b7b2:	e111      	b.n	800b9d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b7b4:	4b8d      	ldr	r3, [pc, #564]	@ (800b9ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b7b6:	61bb      	str	r3, [r7, #24]
      break;
 800b7b8:	e10e      	b.n	800b9d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b7ba:	4b8d      	ldr	r3, [pc, #564]	@ (800b9f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b7bc:	61bb      	str	r3, [r7, #24]
      break;
 800b7be:	e10b      	b.n	800b9d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b7c0:	4b8c      	ldr	r3, [pc, #560]	@ (800b9f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b7c2:	61bb      	str	r3, [r7, #24]
      break;
 800b7c4:	e108      	b.n	800b9d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b7c6:	4b88      	ldr	r3, [pc, #544]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ca:	f003 0303 	and.w	r3, r3, #3
 800b7ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b7d0:	4b85      	ldr	r3, [pc, #532]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7d4:	091b      	lsrs	r3, r3, #4
 800b7d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b7dc:	4b82      	ldr	r3, [pc, #520]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e0:	f003 0301 	and.w	r3, r3, #1
 800b7e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b7e6:	4b80      	ldr	r3, [pc, #512]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7ea:	08db      	lsrs	r3, r3, #3
 800b7ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	fb02 f303 	mul.w	r3, r2, r3
 800b7f6:	ee07 3a90 	vmov	s15, r3
 800b7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	2b00      	cmp	r3, #0
 800b806:	f000 80e1 	beq.w	800b9cc <HAL_RCC_GetSysClockFreq+0x2b8>
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	2b02      	cmp	r3, #2
 800b80e:	f000 8083 	beq.w	800b918 <HAL_RCC_GetSysClockFreq+0x204>
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	2b02      	cmp	r3, #2
 800b816:	f200 80a1 	bhi.w	800b95c <HAL_RCC_GetSysClockFreq+0x248>
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <HAL_RCC_GetSysClockFreq+0x114>
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d056      	beq.n	800b8d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b826:	e099      	b.n	800b95c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b828:	4b6f      	ldr	r3, [pc, #444]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f003 0320 	and.w	r3, r3, #32
 800b830:	2b00      	cmp	r3, #0
 800b832:	d02d      	beq.n	800b890 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b834:	4b6c      	ldr	r3, [pc, #432]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	08db      	lsrs	r3, r3, #3
 800b83a:	f003 0303 	and.w	r3, r3, #3
 800b83e:	4a6b      	ldr	r2, [pc, #428]	@ (800b9ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b840:	fa22 f303 	lsr.w	r3, r2, r3
 800b844:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	ee07 3a90 	vmov	s15, r3
 800b84c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b850:	693b      	ldr	r3, [r7, #16]
 800b852:	ee07 3a90 	vmov	s15, r3
 800b856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b85e:	4b62      	ldr	r3, [pc, #392]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b866:	ee07 3a90 	vmov	s15, r3
 800b86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b86e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b872:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b9f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b87e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b88a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b88e:	e087      	b.n	800b9a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	ee07 3a90 	vmov	s15, r3
 800b896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b89a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b9fc <HAL_RCC_GetSysClockFreq+0x2e8>
 800b89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8a2:	4b51      	ldr	r3, [pc, #324]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8aa:	ee07 3a90 	vmov	s15, r3
 800b8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b9f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b8d2:	e065      	b.n	800b9a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	ee07 3a90 	vmov	s15, r3
 800b8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800ba00 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8e6:	4b40      	ldr	r3, [pc, #256]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8ee:	ee07 3a90 	vmov	s15, r3
 800b8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b8fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b9f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b912:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b916:	e043      	b.n	800b9a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	ee07 3a90 	vmov	s15, r3
 800b91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b922:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800ba04 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b92a:	4b2f      	ldr	r3, [pc, #188]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b92c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b932:	ee07 3a90 	vmov	s15, r3
 800b936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b93a:	ed97 6a02 	vldr	s12, [r7, #8]
 800b93e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b9f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b94a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b956:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b95a:	e021      	b.n	800b9a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b966:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800ba00 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b96a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b96e:	4b1e      	ldr	r3, [pc, #120]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b976:	ee07 3a90 	vmov	s15, r3
 800b97a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b97e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b982:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b9f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b98a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b98e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b99a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b99e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b9a0:	4b11      	ldr	r3, [pc, #68]	@ (800b9e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9a4:	0a5b      	lsrs	r3, r3, #9
 800b9a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	ee07 3a90 	vmov	s15, r3
 800b9b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9c4:	ee17 3a90 	vmov	r3, s15
 800b9c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b9ca:	e005      	b.n	800b9d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	61bb      	str	r3, [r7, #24]
      break;
 800b9d0:	e002      	b.n	800b9d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b9d2:	4b07      	ldr	r3, [pc, #28]	@ (800b9f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b9d4:	61bb      	str	r3, [r7, #24]
      break;
 800b9d6:	bf00      	nop
  }

  return sysclockfreq;
 800b9d8:	69bb      	ldr	r3, [r7, #24]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3724      	adds	r7, #36	@ 0x24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	58024400 	.word	0x58024400
 800b9ec:	03d09000 	.word	0x03d09000
 800b9f0:	003d0900 	.word	0x003d0900
 800b9f4:	00b71b00 	.word	0x00b71b00
 800b9f8:	46000000 	.word	0x46000000
 800b9fc:	4c742400 	.word	0x4c742400
 800ba00:	4a742400 	.word	0x4a742400
 800ba04:	4b371b00 	.word	0x4b371b00

0800ba08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ba0e:	f7ff fe81 	bl	800b714 <HAL_RCC_GetSysClockFreq>
 800ba12:	4602      	mov	r2, r0
 800ba14:	4b10      	ldr	r3, [pc, #64]	@ (800ba58 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba16:	699b      	ldr	r3, [r3, #24]
 800ba18:	0a1b      	lsrs	r3, r3, #8
 800ba1a:	f003 030f 	and.w	r3, r3, #15
 800ba1e:	490f      	ldr	r1, [pc, #60]	@ (800ba5c <HAL_RCC_GetHCLKFreq+0x54>)
 800ba20:	5ccb      	ldrb	r3, [r1, r3]
 800ba22:	f003 031f 	and.w	r3, r3, #31
 800ba26:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ba58 <HAL_RCC_GetHCLKFreq+0x50>)
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	f003 030f 	and.w	r3, r3, #15
 800ba34:	4a09      	ldr	r2, [pc, #36]	@ (800ba5c <HAL_RCC_GetHCLKFreq+0x54>)
 800ba36:	5cd3      	ldrb	r3, [r2, r3]
 800ba38:	f003 031f 	and.w	r3, r3, #31
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	fa22 f303 	lsr.w	r3, r2, r3
 800ba42:	4a07      	ldr	r2, [pc, #28]	@ (800ba60 <HAL_RCC_GetHCLKFreq+0x58>)
 800ba44:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba46:	4a07      	ldr	r2, [pc, #28]	@ (800ba64 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ba4c:	4b04      	ldr	r3, [pc, #16]	@ (800ba60 <HAL_RCC_GetHCLKFreq+0x58>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	58024400 	.word	0x58024400
 800ba5c:	0801387c 	.word	0x0801387c
 800ba60:	24000004 	.word	0x24000004
 800ba64:	24000000 	.word	0x24000000

0800ba68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ba6c:	f7ff ffcc 	bl	800ba08 <HAL_RCC_GetHCLKFreq>
 800ba70:	4602      	mov	r2, r0
 800ba72:	4b06      	ldr	r3, [pc, #24]	@ (800ba8c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	091b      	lsrs	r3, r3, #4
 800ba78:	f003 0307 	and.w	r3, r3, #7
 800ba7c:	4904      	ldr	r1, [pc, #16]	@ (800ba90 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ba7e:	5ccb      	ldrb	r3, [r1, r3]
 800ba80:	f003 031f 	and.w	r3, r3, #31
 800ba84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	58024400 	.word	0x58024400
 800ba90:	0801387c 	.word	0x0801387c

0800ba94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ba98:	f7ff ffb6 	bl	800ba08 <HAL_RCC_GetHCLKFreq>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	4b06      	ldr	r3, [pc, #24]	@ (800bab8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800baa0:	69db      	ldr	r3, [r3, #28]
 800baa2:	0a1b      	lsrs	r3, r3, #8
 800baa4:	f003 0307 	and.w	r3, r3, #7
 800baa8:	4904      	ldr	r1, [pc, #16]	@ (800babc <HAL_RCC_GetPCLK2Freq+0x28>)
 800baaa:	5ccb      	ldrb	r3, [r1, r3]
 800baac:	f003 031f 	and.w	r3, r3, #31
 800bab0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	58024400 	.word	0x58024400
 800babc:	0801387c 	.word	0x0801387c

0800bac0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bac4:	b0c6      	sub	sp, #280	@ 0x118
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bacc:	2300      	movs	r3, #0
 800bace:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bad2:	2300      	movs	r3, #0
 800bad4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800badc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800bae4:	2500      	movs	r5, #0
 800bae6:	ea54 0305 	orrs.w	r3, r4, r5
 800baea:	d049      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800baec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800baf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800baf6:	d02f      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800baf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bafc:	d828      	bhi.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bafe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb02:	d01a      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800bb04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bb08:	d822      	bhi.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800bb0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb12:	d007      	beq.n	800bb24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bb14:	e01c      	b.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb16:	4bab      	ldr	r3, [pc, #684]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb1a:	4aaa      	ldr	r2, [pc, #680]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb22:	e01a      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb28:	3308      	adds	r3, #8
 800bb2a:	2102      	movs	r1, #2
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f002 fa49 	bl	800dfc4 <RCCEx_PLL2_Config>
 800bb32:	4603      	mov	r3, r0
 800bb34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb38:	e00f      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb3e:	3328      	adds	r3, #40	@ 0x28
 800bb40:	2102      	movs	r1, #2
 800bb42:	4618      	mov	r0, r3
 800bb44:	f002 faf0 	bl	800e128 <RCCEx_PLL3_Config>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800bb4e:	e004      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb50:	2301      	movs	r3, #1
 800bb52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bb56:	e000      	b.n	800bb5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800bb58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb5a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d10a      	bne.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bb62:	4b98      	ldr	r3, [pc, #608]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800bb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb70:	4a94      	ldr	r2, [pc, #592]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bb72:	430b      	orrs	r3, r1
 800bb74:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb76:	e003      	b.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bb7c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800bb8c:	f04f 0900 	mov.w	r9, #0
 800bb90:	ea58 0309 	orrs.w	r3, r8, r9
 800bb94:	d047      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800bb96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bb9c:	2b04      	cmp	r3, #4
 800bb9e:	d82a      	bhi.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800bba0:	a201      	add	r2, pc, #4	@ (adr r2, 800bba8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800bba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bba6:	bf00      	nop
 800bba8:	0800bbbd 	.word	0x0800bbbd
 800bbac:	0800bbcb 	.word	0x0800bbcb
 800bbb0:	0800bbe1 	.word	0x0800bbe1
 800bbb4:	0800bbff 	.word	0x0800bbff
 800bbb8:	0800bbff 	.word	0x0800bbff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbbc:	4b81      	ldr	r3, [pc, #516]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc0:	4a80      	ldr	r2, [pc, #512]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bbc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbc8:	e01a      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbce:	3308      	adds	r3, #8
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f002 f9f6 	bl	800dfc4 <RCCEx_PLL2_Config>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbde:	e00f      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbe4:	3328      	adds	r3, #40	@ 0x28
 800bbe6:	2100      	movs	r1, #0
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f002 fa9d 	bl	800e128 <RCCEx_PLL3_Config>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bbf4:	e004      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbf6:	2301      	movs	r3, #1
 800bbf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bbfc:	e000      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800bbfe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d10a      	bne.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bc08:	4b6e      	ldr	r3, [pc, #440]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc0c:	f023 0107 	bic.w	r1, r3, #7
 800bc10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc16:	4a6b      	ldr	r2, [pc, #428]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc18:	430b      	orrs	r3, r1
 800bc1a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bc1c:	e003      	b.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc1e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bc22:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800bc32:	f04f 0b00 	mov.w	fp, #0
 800bc36:	ea5a 030b 	orrs.w	r3, sl, fp
 800bc3a:	d05b      	beq.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800bc3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bc44:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bc48:	d03b      	beq.n	800bcc2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bc4a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800bc4e:	d834      	bhi.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bc50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc54:	d037      	beq.n	800bcc6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bc56:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bc5a:	d82e      	bhi.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bc5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bc60:	d033      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800bc62:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bc66:	d828      	bhi.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bc68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc6c:	d01a      	beq.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800bc6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bc72:	d822      	bhi.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d003      	beq.n	800bc80 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800bc78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bc7c:	d007      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800bc7e:	e01c      	b.n	800bcba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc80:	4b50      	ldr	r3, [pc, #320]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc84:	4a4f      	ldr	r2, [pc, #316]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bc86:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bc8c:	e01e      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc92:	3308      	adds	r3, #8
 800bc94:	2100      	movs	r1, #0
 800bc96:	4618      	mov	r0, r3
 800bc98:	f002 f994 	bl	800dfc4 <RCCEx_PLL2_Config>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bca2:	e013      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bca8:	3328      	adds	r3, #40	@ 0x28
 800bcaa:	2100      	movs	r1, #0
 800bcac:	4618      	mov	r0, r3
 800bcae:	f002 fa3b 	bl	800e128 <RCCEx_PLL3_Config>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bcb8:	e008      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bcba:	2301      	movs	r3, #1
 800bcbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bcc0:	e004      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bcc2:	bf00      	nop
 800bcc4:	e002      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bcc6:	bf00      	nop
 800bcc8:	e000      	b.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800bcca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bccc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d10b      	bne.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bcd4:	4b3b      	ldr	r3, [pc, #236]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bcd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcd8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800bcdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bce0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800bce4:	4a37      	ldr	r2, [pc, #220]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bce6:	430b      	orrs	r3, r1
 800bce8:	6593      	str	r3, [r2, #88]	@ 0x58
 800bcea:	e003      	b.n	800bcf4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bcf0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bcf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800bd00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bd04:	2300      	movs	r3, #0
 800bd06:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bd0a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4313      	orrs	r3, r2
 800bd12:	d05d      	beq.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800bd14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bd1c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bd20:	d03b      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bd22:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800bd26:	d834      	bhi.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd2c:	d037      	beq.n	800bd9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800bd2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bd32:	d82e      	bhi.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd34:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bd38:	d033      	beq.n	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800bd3a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bd3e:	d828      	bhi.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd44:	d01a      	beq.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800bd46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bd4a:	d822      	bhi.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d003      	beq.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bd50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd54:	d007      	beq.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bd56:	e01c      	b.n	800bd92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd58:	4b1a      	ldr	r3, [pc, #104]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd5c:	4a19      	ldr	r2, [pc, #100]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bd5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd64:	e01e      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd6a:	3308      	adds	r3, #8
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f002 f928 	bl	800dfc4 <RCCEx_PLL2_Config>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800bd7a:	e013      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd80:	3328      	adds	r3, #40	@ 0x28
 800bd82:	2100      	movs	r1, #0
 800bd84:	4618      	mov	r0, r3
 800bd86:	f002 f9cf 	bl	800e128 <RCCEx_PLL3_Config>
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800bd90:	e008      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800bd92:	2301      	movs	r3, #1
 800bd94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bd98:	e004      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bd9a:	bf00      	nop
 800bd9c:	e002      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bd9e:	bf00      	nop
 800bda0:	e000      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800bda2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bda4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10d      	bne.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bdac:	4b05      	ldr	r3, [pc, #20]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdb0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800bdb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdb8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800bdbc:	4a01      	ldr	r2, [pc, #4]	@ (800bdc4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800bdbe:	430b      	orrs	r3, r1
 800bdc0:	6593      	str	r3, [r2, #88]	@ 0x58
 800bdc2:	e005      	b.n	800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bdc4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bdcc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bdd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bddc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bde0:	2300      	movs	r3, #0
 800bde2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bde6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bdea:	460b      	mov	r3, r1
 800bdec:	4313      	orrs	r3, r2
 800bdee:	d03a      	beq.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdf6:	2b30      	cmp	r3, #48	@ 0x30
 800bdf8:	d01f      	beq.n	800be3a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800bdfa:	2b30      	cmp	r3, #48	@ 0x30
 800bdfc:	d819      	bhi.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	d00c      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800be02:	2b20      	cmp	r3, #32
 800be04:	d815      	bhi.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800be06:	2b00      	cmp	r3, #0
 800be08:	d019      	beq.n	800be3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800be0a:	2b10      	cmp	r3, #16
 800be0c:	d111      	bne.n	800be32 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be0e:	4baa      	ldr	r3, [pc, #680]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be12:	4aa9      	ldr	r2, [pc, #676]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be18:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800be1a:	e011      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800be1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be20:	3308      	adds	r3, #8
 800be22:	2102      	movs	r1, #2
 800be24:	4618      	mov	r0, r3
 800be26:	f002 f8cd 	bl	800dfc4 <RCCEx_PLL2_Config>
 800be2a:	4603      	mov	r3, r0
 800be2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800be30:	e006      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800be32:	2301      	movs	r3, #1
 800be34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800be38:	e002      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800be3a:	bf00      	nop
 800be3c:	e000      	b.n	800be40 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800be3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be40:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10a      	bne.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800be48:	4b9b      	ldr	r3, [pc, #620]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be4c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800be50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be56:	4a98      	ldr	r2, [pc, #608]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be58:	430b      	orrs	r3, r1
 800be5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800be5c:	e003      	b.n	800be66 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800be62:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800be66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800be72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800be76:	2300      	movs	r3, #0
 800be78:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800be7c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800be80:	460b      	mov	r3, r1
 800be82:	4313      	orrs	r3, r2
 800be84:	d051      	beq.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800be86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be90:	d035      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800be92:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800be96:	d82e      	bhi.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800be98:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800be9c:	d031      	beq.n	800bf02 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800be9e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bea2:	d828      	bhi.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800bea4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bea8:	d01a      	beq.n	800bee0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800beaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beae:	d822      	bhi.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d003      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800beb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800beb8:	d007      	beq.n	800beca <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800beba:	e01c      	b.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bebc:	4b7e      	ldr	r3, [pc, #504]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bec0:	4a7d      	ldr	r2, [pc, #500]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bec2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bec6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bec8:	e01c      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800beca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bece:	3308      	adds	r3, #8
 800bed0:	2100      	movs	r1, #0
 800bed2:	4618      	mov	r0, r3
 800bed4:	f002 f876 	bl	800dfc4 <RCCEx_PLL2_Config>
 800bed8:	4603      	mov	r3, r0
 800beda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bede:	e011      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee4:	3328      	adds	r3, #40	@ 0x28
 800bee6:	2100      	movs	r1, #0
 800bee8:	4618      	mov	r0, r3
 800beea:	f002 f91d 	bl	800e128 <RCCEx_PLL3_Config>
 800beee:	4603      	mov	r3, r0
 800bef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bef4:	e006      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bef6:	2301      	movs	r3, #1
 800bef8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800befc:	e002      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800befe:	bf00      	nop
 800bf00:	e000      	b.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800bf02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d10a      	bne.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bf0c:	4b6a      	ldr	r3, [pc, #424]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf10:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bf1a:	4a67      	ldr	r2, [pc, #412]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	6513      	str	r3, [r2, #80]	@ 0x50
 800bf20:	e003      	b.n	800bf2a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf22:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bf26:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bf2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf32:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bf36:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bf40:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4313      	orrs	r3, r2
 800bf48:	d053      	beq.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bf4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bf50:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bf54:	d033      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800bf56:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bf5a:	d82c      	bhi.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bf5c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bf60:	d02f      	beq.n	800bfc2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800bf62:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bf66:	d826      	bhi.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bf68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bf6c:	d02b      	beq.n	800bfc6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800bf6e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bf72:	d820      	bhi.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bf74:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf78:	d012      	beq.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800bf7a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bf7e:	d81a      	bhi.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d022      	beq.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800bf84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bf88:	d115      	bne.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf8e:	3308      	adds	r3, #8
 800bf90:	2101      	movs	r1, #1
 800bf92:	4618      	mov	r0, r3
 800bf94:	f002 f816 	bl	800dfc4 <RCCEx_PLL2_Config>
 800bf98:	4603      	mov	r3, r0
 800bf9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bf9e:	e015      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bfa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfa4:	3328      	adds	r3, #40	@ 0x28
 800bfa6:	2101      	movs	r1, #1
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f002 f8bd 	bl	800e128 <RCCEx_PLL3_Config>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bfb4:	e00a      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800bfbc:	e006      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bfbe:	bf00      	nop
 800bfc0:	e004      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bfc2:	bf00      	nop
 800bfc4:	e002      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bfc6:	bf00      	nop
 800bfc8:	e000      	b.n	800bfcc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800bfca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d10a      	bne.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bfd4:	4b38      	ldr	r3, [pc, #224]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bfd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bfd8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bfdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bfe0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bfe2:	4a35      	ldr	r2, [pc, #212]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bfe4:	430b      	orrs	r3, r1
 800bfe6:	6513      	str	r3, [r2, #80]	@ 0x50
 800bfe8:	e003      	b.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800bfee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bffa:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c002:	2300      	movs	r3, #0
 800c004:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c008:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800c00c:	460b      	mov	r3, r1
 800c00e:	4313      	orrs	r3, r2
 800c010:	d058      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800c012:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c016:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c01a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c01e:	d033      	beq.n	800c088 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800c020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c024:	d82c      	bhi.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c026:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c02a:	d02f      	beq.n	800c08c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800c02c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c030:	d826      	bhi.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c032:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c036:	d02b      	beq.n	800c090 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800c038:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c03c:	d820      	bhi.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c03e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c042:	d012      	beq.n	800c06a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800c044:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c048:	d81a      	bhi.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d022      	beq.n	800c094 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800c04e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c052:	d115      	bne.n	800c080 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c054:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c058:	3308      	adds	r3, #8
 800c05a:	2101      	movs	r1, #1
 800c05c:	4618      	mov	r0, r3
 800c05e:	f001 ffb1 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c062:	4603      	mov	r3, r0
 800c064:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c068:	e015      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c06a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c06e:	3328      	adds	r3, #40	@ 0x28
 800c070:	2101      	movs	r1, #1
 800c072:	4618      	mov	r0, r3
 800c074:	f002 f858 	bl	800e128 <RCCEx_PLL3_Config>
 800c078:	4603      	mov	r3, r0
 800c07a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800c07e:	e00a      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800c080:	2301      	movs	r3, #1
 800c082:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c086:	e006      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c088:	bf00      	nop
 800c08a:	e004      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c08c:	bf00      	nop
 800c08e:	e002      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c090:	bf00      	nop
 800c092:	e000      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800c094:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d10e      	bne.n	800c0bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c09e:	4b06      	ldr	r3, [pc, #24]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c0a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0aa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c0ae:	4a02      	ldr	r2, [pc, #8]	@ (800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800c0b0:	430b      	orrs	r3, r1
 800c0b2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c0b4:	e006      	b.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800c0b6:	bf00      	nop
 800c0b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c0c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0cc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800c0d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c0da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800c0de:	460b      	mov	r3, r1
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	d037      	beq.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800c0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c0e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c0ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0ee:	d00e      	beq.n	800c10e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800c0f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0f4:	d816      	bhi.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d018      	beq.n	800c12c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800c0fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0fe:	d111      	bne.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c100:	4bc4      	ldr	r3, [pc, #784]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c104:	4ac3      	ldr	r2, [pc, #780]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c106:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c10a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c10c:	e00f      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c112:	3308      	adds	r3, #8
 800c114:	2101      	movs	r1, #1
 800c116:	4618      	mov	r0, r3
 800c118:	f001 ff54 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c11c:	4603      	mov	r3, r0
 800c11e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800c122:	e004      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c12a:	e000      	b.n	800c12e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800c12c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c12e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10a      	bne.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c136:	4bb7      	ldr	r3, [pc, #732]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c13a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c144:	4ab3      	ldr	r2, [pc, #716]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c146:	430b      	orrs	r3, r1
 800c148:	6513      	str	r3, [r2, #80]	@ 0x50
 800c14a:	e003      	b.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c14c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800c160:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c164:	2300      	movs	r3, #0
 800c166:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c16a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c16e:	460b      	mov	r3, r1
 800c170:	4313      	orrs	r3, r2
 800c172:	d039      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800c174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c17a:	2b03      	cmp	r3, #3
 800c17c:	d81c      	bhi.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800c17e:	a201      	add	r2, pc, #4	@ (adr r2, 800c184 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800c180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c184:	0800c1c1 	.word	0x0800c1c1
 800c188:	0800c195 	.word	0x0800c195
 800c18c:	0800c1a3 	.word	0x0800c1a3
 800c190:	0800c1c1 	.word	0x0800c1c1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c194:	4b9f      	ldr	r3, [pc, #636]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c198:	4a9e      	ldr	r2, [pc, #632]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c19a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c19e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c1a0:	e00f      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c1a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1a6:	3308      	adds	r3, #8
 800c1a8:	2102      	movs	r1, #2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f001 ff0a 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800c1b6:	e004      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c1be:	e000      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800c1c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10a      	bne.n	800c1e0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c1ca:	4b92      	ldr	r3, [pc, #584]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c1ce:	f023 0103 	bic.w	r1, r3, #3
 800c1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c1d8:	4a8e      	ldr	r2, [pc, #568]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c1da:	430b      	orrs	r3, r1
 800c1dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c1de:	e003      	b.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c1e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c1f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c1fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c202:	460b      	mov	r3, r1
 800c204:	4313      	orrs	r3, r2
 800c206:	f000 8099 	beq.w	800c33c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c20a:	4b83      	ldr	r3, [pc, #524]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a82      	ldr	r2, [pc, #520]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c214:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c216:	f7f7 ffcb 	bl	80041b0 <HAL_GetTick>
 800c21a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c21e:	e00b      	b.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c220:	f7f7 ffc6 	bl	80041b0 <HAL_GetTick>
 800c224:	4602      	mov	r2, r0
 800c226:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c22a:	1ad3      	subs	r3, r2, r3
 800c22c:	2b64      	cmp	r3, #100	@ 0x64
 800c22e:	d903      	bls.n	800c238 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c236:	e005      	b.n	800c244 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c238:	4b77      	ldr	r3, [pc, #476]	@ (800c418 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c240:	2b00      	cmp	r3, #0
 800c242:	d0ed      	beq.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c244:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d173      	bne.n	800c334 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c24c:	4b71      	ldr	r3, [pc, #452]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c24e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c250:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c254:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c258:	4053      	eors	r3, r2
 800c25a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d015      	beq.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c262:	4b6c      	ldr	r3, [pc, #432]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c266:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c26a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c26e:	4b69      	ldr	r3, [pc, #420]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c272:	4a68      	ldr	r2, [pc, #416]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c274:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c278:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c27a:	4b66      	ldr	r3, [pc, #408]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c27c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c27e:	4a65      	ldr	r2, [pc, #404]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c280:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c284:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c286:	4a63      	ldr	r2, [pc, #396]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c28c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c292:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c296:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c29a:	d118      	bne.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c29c:	f7f7 ff88 	bl	80041b0 <HAL_GetTick>
 800c2a0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c2a4:	e00d      	b.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c2a6:	f7f7 ff83 	bl	80041b0 <HAL_GetTick>
 800c2aa:	4602      	mov	r2, r0
 800c2ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800c2b0:	1ad2      	subs	r2, r2, r3
 800c2b2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c2b6:	429a      	cmp	r2, r3
 800c2b8:	d903      	bls.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c2ba:	2303      	movs	r3, #3
 800c2bc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 800c2c0:	e005      	b.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c2c2:	4b54      	ldr	r3, [pc, #336]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c2c6:	f003 0302 	and.w	r3, r3, #2
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d0eb      	beq.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c2ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d129      	bne.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c2d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c2de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c2e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c2e6:	d10e      	bne.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c2e8:	4b4a      	ldr	r3, [pc, #296]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c2ea:	691b      	ldr	r3, [r3, #16]
 800c2ec:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c2f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c2f8:	091a      	lsrs	r2, r3, #4
 800c2fa:	4b48      	ldr	r3, [pc, #288]	@ (800c41c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	4a45      	ldr	r2, [pc, #276]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c300:	430b      	orrs	r3, r1
 800c302:	6113      	str	r3, [r2, #16]
 800c304:	e005      	b.n	800c312 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c306:	4b43      	ldr	r3, [pc, #268]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	4a42      	ldr	r2, [pc, #264]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c30c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c310:	6113      	str	r3, [r2, #16]
 800c312:	4b40      	ldr	r3, [pc, #256]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c314:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c31a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800c31e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c322:	4a3c      	ldr	r2, [pc, #240]	@ (800c414 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c324:	430b      	orrs	r3, r1
 800c326:	6713      	str	r3, [r2, #112]	@ 0x70
 800c328:	e008      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c32a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c32e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 800c332:	e003      	b.n	800c33c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c334:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c338:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c33c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c344:	f002 0301 	and.w	r3, r2, #1
 800c348:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c34c:	2300      	movs	r3, #0
 800c34e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c352:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c356:	460b      	mov	r3, r1
 800c358:	4313      	orrs	r3, r2
 800c35a:	f000 808f 	beq.w	800c47c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c35e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c362:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c364:	2b28      	cmp	r3, #40	@ 0x28
 800c366:	d871      	bhi.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c368:	a201      	add	r2, pc, #4	@ (adr r2, 800c370 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c36a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c36e:	bf00      	nop
 800c370:	0800c455 	.word	0x0800c455
 800c374:	0800c44d 	.word	0x0800c44d
 800c378:	0800c44d 	.word	0x0800c44d
 800c37c:	0800c44d 	.word	0x0800c44d
 800c380:	0800c44d 	.word	0x0800c44d
 800c384:	0800c44d 	.word	0x0800c44d
 800c388:	0800c44d 	.word	0x0800c44d
 800c38c:	0800c44d 	.word	0x0800c44d
 800c390:	0800c421 	.word	0x0800c421
 800c394:	0800c44d 	.word	0x0800c44d
 800c398:	0800c44d 	.word	0x0800c44d
 800c39c:	0800c44d 	.word	0x0800c44d
 800c3a0:	0800c44d 	.word	0x0800c44d
 800c3a4:	0800c44d 	.word	0x0800c44d
 800c3a8:	0800c44d 	.word	0x0800c44d
 800c3ac:	0800c44d 	.word	0x0800c44d
 800c3b0:	0800c437 	.word	0x0800c437
 800c3b4:	0800c44d 	.word	0x0800c44d
 800c3b8:	0800c44d 	.word	0x0800c44d
 800c3bc:	0800c44d 	.word	0x0800c44d
 800c3c0:	0800c44d 	.word	0x0800c44d
 800c3c4:	0800c44d 	.word	0x0800c44d
 800c3c8:	0800c44d 	.word	0x0800c44d
 800c3cc:	0800c44d 	.word	0x0800c44d
 800c3d0:	0800c455 	.word	0x0800c455
 800c3d4:	0800c44d 	.word	0x0800c44d
 800c3d8:	0800c44d 	.word	0x0800c44d
 800c3dc:	0800c44d 	.word	0x0800c44d
 800c3e0:	0800c44d 	.word	0x0800c44d
 800c3e4:	0800c44d 	.word	0x0800c44d
 800c3e8:	0800c44d 	.word	0x0800c44d
 800c3ec:	0800c44d 	.word	0x0800c44d
 800c3f0:	0800c455 	.word	0x0800c455
 800c3f4:	0800c44d 	.word	0x0800c44d
 800c3f8:	0800c44d 	.word	0x0800c44d
 800c3fc:	0800c44d 	.word	0x0800c44d
 800c400:	0800c44d 	.word	0x0800c44d
 800c404:	0800c44d 	.word	0x0800c44d
 800c408:	0800c44d 	.word	0x0800c44d
 800c40c:	0800c44d 	.word	0x0800c44d
 800c410:	0800c455 	.word	0x0800c455
 800c414:	58024400 	.word	0x58024400
 800c418:	58024800 	.word	0x58024800
 800c41c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c424:	3308      	adds	r3, #8
 800c426:	2101      	movs	r1, #1
 800c428:	4618      	mov	r0, r3
 800c42a:	f001 fdcb 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c42e:	4603      	mov	r3, r0
 800c430:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c434:	e00f      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c43a:	3328      	adds	r3, #40	@ 0x28
 800c43c:	2101      	movs	r1, #1
 800c43e:	4618      	mov	r0, r3
 800c440:	f001 fe72 	bl	800e128 <RCCEx_PLL3_Config>
 800c444:	4603      	mov	r3, r0
 800c446:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c44a:	e004      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c44c:	2301      	movs	r3, #1
 800c44e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c452:	e000      	b.n	800c456 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c454:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c456:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d10a      	bne.n	800c474 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c45e:	4bbf      	ldr	r3, [pc, #764]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c462:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c466:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c46a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c46c:	4abb      	ldr	r2, [pc, #748]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c46e:	430b      	orrs	r3, r1
 800c470:	6553      	str	r3, [r2, #84]	@ 0x54
 800c472:	e003      	b.n	800c47c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c478:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c47c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	f002 0302 	and.w	r3, r2, #2
 800c488:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c48c:	2300      	movs	r3, #0
 800c48e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c492:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c496:	460b      	mov	r3, r1
 800c498:	4313      	orrs	r3, r2
 800c49a:	d041      	beq.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c4a2:	2b05      	cmp	r3, #5
 800c4a4:	d824      	bhi.n	800c4f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800c4a6:	a201      	add	r2, pc, #4	@ (adr r2, 800c4ac <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800c4a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4ac:	0800c4f9 	.word	0x0800c4f9
 800c4b0:	0800c4c5 	.word	0x0800c4c5
 800c4b4:	0800c4db 	.word	0x0800c4db
 800c4b8:	0800c4f9 	.word	0x0800c4f9
 800c4bc:	0800c4f9 	.word	0x0800c4f9
 800c4c0:	0800c4f9 	.word	0x0800c4f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c8:	3308      	adds	r3, #8
 800c4ca:	2101      	movs	r1, #1
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f001 fd79 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c4d8:	e00f      	b.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c4da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4de:	3328      	adds	r3, #40	@ 0x28
 800c4e0:	2101      	movs	r1, #1
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f001 fe20 	bl	800e128 <RCCEx_PLL3_Config>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c4ee:	e004      	b.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c4f6:	e000      	b.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800c4f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d10a      	bne.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c502:	4b96      	ldr	r3, [pc, #600]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c506:	f023 0107 	bic.w	r1, r3, #7
 800c50a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c50e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c510:	4a92      	ldr	r2, [pc, #584]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c512:	430b      	orrs	r3, r1
 800c514:	6553      	str	r3, [r2, #84]	@ 0x54
 800c516:	e003      	b.n	800c520 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c518:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c51c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	f002 0304 	and.w	r3, r2, #4
 800c52c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c530:	2300      	movs	r3, #0
 800c532:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c536:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c53a:	460b      	mov	r3, r1
 800c53c:	4313      	orrs	r3, r2
 800c53e:	d044      	beq.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c548:	2b05      	cmp	r3, #5
 800c54a:	d825      	bhi.n	800c598 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800c54c:	a201      	add	r2, pc, #4	@ (adr r2, 800c554 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800c54e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c552:	bf00      	nop
 800c554:	0800c5a1 	.word	0x0800c5a1
 800c558:	0800c56d 	.word	0x0800c56d
 800c55c:	0800c583 	.word	0x0800c583
 800c560:	0800c5a1 	.word	0x0800c5a1
 800c564:	0800c5a1 	.word	0x0800c5a1
 800c568:	0800c5a1 	.word	0x0800c5a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c56c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c570:	3308      	adds	r3, #8
 800c572:	2101      	movs	r1, #1
 800c574:	4618      	mov	r0, r3
 800c576:	f001 fd25 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c57a:	4603      	mov	r3, r0
 800c57c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c580:	e00f      	b.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c586:	3328      	adds	r3, #40	@ 0x28
 800c588:	2101      	movs	r1, #1
 800c58a:	4618      	mov	r0, r3
 800c58c:	f001 fdcc 	bl	800e128 <RCCEx_PLL3_Config>
 800c590:	4603      	mov	r3, r0
 800c592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c596:	e004      	b.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c598:	2301      	movs	r3, #1
 800c59a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c59e:	e000      	b.n	800c5a2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800c5a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c5a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d10b      	bne.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c5aa:	4b6c      	ldr	r3, [pc, #432]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5ae:	f023 0107 	bic.w	r1, r3, #7
 800c5b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5ba:	4a68      	ldr	r2, [pc, #416]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c5bc:	430b      	orrs	r3, r1
 800c5be:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5c0:	e003      	b.n	800c5ca <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c5c6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5d2:	f002 0320 	and.w	r3, r2, #32
 800c5d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c5da:	2300      	movs	r3, #0
 800c5dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c5e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	4313      	orrs	r3, r2
 800c5e8:	d055      	beq.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c5ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c5f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c5f6:	d033      	beq.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800c5f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c5fc:	d82c      	bhi.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c5fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c602:	d02f      	beq.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c608:	d826      	bhi.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c60a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c60e:	d02b      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c610:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c614:	d820      	bhi.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c61a:	d012      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800c61c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c620:	d81a      	bhi.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800c622:	2b00      	cmp	r3, #0
 800c624:	d022      	beq.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c626:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c62a:	d115      	bne.n	800c658 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c62c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c630:	3308      	adds	r3, #8
 800c632:	2100      	movs	r1, #0
 800c634:	4618      	mov	r0, r3
 800c636:	f001 fcc5 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c63a:	4603      	mov	r3, r0
 800c63c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c640:	e015      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c646:	3328      	adds	r3, #40	@ 0x28
 800c648:	2102      	movs	r1, #2
 800c64a:	4618      	mov	r0, r3
 800c64c:	f001 fd6c 	bl	800e128 <RCCEx_PLL3_Config>
 800c650:	4603      	mov	r3, r0
 800c652:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c656:	e00a      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c658:	2301      	movs	r3, #1
 800c65a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c65e:	e006      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c660:	bf00      	nop
 800c662:	e004      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c664:	bf00      	nop
 800c666:	e002      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c668:	bf00      	nop
 800c66a:	e000      	b.n	800c66e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800c66c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c66e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c672:	2b00      	cmp	r3, #0
 800c674:	d10b      	bne.n	800c68e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c676:	4b39      	ldr	r3, [pc, #228]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c67a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c682:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c686:	4a35      	ldr	r2, [pc, #212]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c688:	430b      	orrs	r3, r1
 800c68a:	6553      	str	r3, [r2, #84]	@ 0x54
 800c68c:	e003      	b.n	800c696 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c68e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c692:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c696:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c69e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c6a2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c6ac:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	4313      	orrs	r3, r2
 800c6b4:	d058      	beq.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c6be:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c6c2:	d033      	beq.n	800c72c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800c6c4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c6c8:	d82c      	bhi.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c6ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6ce:	d02f      	beq.n	800c730 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c6d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c6d4:	d826      	bhi.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c6d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c6da:	d02b      	beq.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c6dc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c6e0:	d820      	bhi.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c6e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6e6:	d012      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800c6e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c6ec:	d81a      	bhi.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d022      	beq.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c6f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c6f6:	d115      	bne.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c6f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6fc:	3308      	adds	r3, #8
 800c6fe:	2100      	movs	r1, #0
 800c700:	4618      	mov	r0, r3
 800c702:	f001 fc5f 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c706:	4603      	mov	r3, r0
 800c708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c70c:	e015      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c712:	3328      	adds	r3, #40	@ 0x28
 800c714:	2102      	movs	r1, #2
 800c716:	4618      	mov	r0, r3
 800c718:	f001 fd06 	bl	800e128 <RCCEx_PLL3_Config>
 800c71c:	4603      	mov	r3, r0
 800c71e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c722:	e00a      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c724:	2301      	movs	r3, #1
 800c726:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c72a:	e006      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c72c:	bf00      	nop
 800c72e:	e004      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c730:	bf00      	nop
 800c732:	e002      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c734:	bf00      	nop
 800c736:	e000      	b.n	800c73a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800c738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c73a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d10e      	bne.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c742:	4b06      	ldr	r3, [pc, #24]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c746:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c74a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c74e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c752:	4a02      	ldr	r2, [pc, #8]	@ (800c75c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800c754:	430b      	orrs	r3, r1
 800c756:	6593      	str	r3, [r2, #88]	@ 0x58
 800c758:	e006      	b.n	800c768 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800c75a:	bf00      	nop
 800c75c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c764:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c770:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c774:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c778:	2300      	movs	r3, #0
 800c77a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c77e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c782:	460b      	mov	r3, r1
 800c784:	4313      	orrs	r3, r2
 800c786:	d055      	beq.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c788:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c78c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c790:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c794:	d033      	beq.n	800c7fe <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800c796:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c79a:	d82c      	bhi.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c79c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7a0:	d02f      	beq.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c7a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c7a6:	d826      	bhi.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c7a8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c7ac:	d02b      	beq.n	800c806 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c7ae:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c7b2:	d820      	bhi.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c7b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c7b8:	d012      	beq.n	800c7e0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800c7ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c7be:	d81a      	bhi.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d022      	beq.n	800c80a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c7c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c7c8:	d115      	bne.n	800c7f6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	2100      	movs	r1, #0
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f001 fbf6 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c7d8:	4603      	mov	r3, r0
 800c7da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c7de:	e015      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c7e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c7e4:	3328      	adds	r3, #40	@ 0x28
 800c7e6:	2102      	movs	r1, #2
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	f001 fc9d 	bl	800e128 <RCCEx_PLL3_Config>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c7f4:	e00a      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c7fc:	e006      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c7fe:	bf00      	nop
 800c800:	e004      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c802:	bf00      	nop
 800c804:	e002      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c806:	bf00      	nop
 800c808:	e000      	b.n	800c80c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800c80a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c80c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10b      	bne.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c814:	4ba0      	ldr	r3, [pc, #640]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c818:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c820:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c824:	4a9c      	ldr	r2, [pc, #624]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c826:	430b      	orrs	r3, r1
 800c828:	6593      	str	r3, [r2, #88]	@ 0x58
 800c82a:	e003      	b.n	800c834 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c82c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c830:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800c834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83c:	f002 0308 	and.w	r3, r2, #8
 800c840:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c844:	2300      	movs	r3, #0
 800c846:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c84a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c84e:	460b      	mov	r3, r1
 800c850:	4313      	orrs	r3, r2
 800c852:	d01e      	beq.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800c854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c85c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c860:	d10c      	bne.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c862:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c866:	3328      	adds	r3, #40	@ 0x28
 800c868:	2102      	movs	r1, #2
 800c86a:	4618      	mov	r0, r3
 800c86c:	f001 fc5c 	bl	800e128 <RCCEx_PLL3_Config>
 800c870:	4603      	mov	r3, r0
 800c872:	2b00      	cmp	r3, #0
 800c874:	d002      	beq.n	800c87c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800c876:	2301      	movs	r3, #1
 800c878:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800c87c:	4b86      	ldr	r3, [pc, #536]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c87e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c880:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c88c:	4a82      	ldr	r2, [pc, #520]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c88e:	430b      	orrs	r3, r1
 800c890:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c892:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c89a:	f002 0310 	and.w	r3, r2, #16
 800c89e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c8a8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c8ac:	460b      	mov	r3, r1
 800c8ae:	4313      	orrs	r3, r2
 800c8b0:	d01e      	beq.n	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c8b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8be:	d10c      	bne.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c8c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8c4:	3328      	adds	r3, #40	@ 0x28
 800c8c6:	2102      	movs	r1, #2
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f001 fc2d 	bl	800e128 <RCCEx_PLL3_Config>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d002      	beq.n	800c8da <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c8da:	4b6f      	ldr	r3, [pc, #444]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c8de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8ea:	4a6b      	ldr	r2, [pc, #428]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c8ec:	430b      	orrs	r3, r1
 800c8ee:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c8fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c8fe:	2300      	movs	r3, #0
 800c900:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c902:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c906:	460b      	mov	r3, r1
 800c908:	4313      	orrs	r3, r2
 800c90a:	d03e      	beq.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c90c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c914:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c918:	d022      	beq.n	800c960 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c91a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c91e:	d81b      	bhi.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800c920:	2b00      	cmp	r3, #0
 800c922:	d003      	beq.n	800c92c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800c924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c928:	d00b      	beq.n	800c942 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800c92a:	e015      	b.n	800c958 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c92c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c930:	3308      	adds	r3, #8
 800c932:	2100      	movs	r1, #0
 800c934:	4618      	mov	r0, r3
 800c936:	f001 fb45 	bl	800dfc4 <RCCEx_PLL2_Config>
 800c93a:	4603      	mov	r3, r0
 800c93c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c940:	e00f      	b.n	800c962 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c946:	3328      	adds	r3, #40	@ 0x28
 800c948:	2102      	movs	r1, #2
 800c94a:	4618      	mov	r0, r3
 800c94c:	f001 fbec 	bl	800e128 <RCCEx_PLL3_Config>
 800c950:	4603      	mov	r3, r0
 800c952:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c956:	e004      	b.n	800c962 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c958:	2301      	movs	r3, #1
 800c95a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c95e:	e000      	b.n	800c962 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800c960:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c962:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10b      	bne.n	800c982 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c96a:	4b4b      	ldr	r3, [pc, #300]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c96c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c96e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c972:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c97a:	4a47      	ldr	r2, [pc, #284]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c97c:	430b      	orrs	r3, r1
 800c97e:	6593      	str	r3, [r2, #88]	@ 0x58
 800c980:	e003      	b.n	800c98a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c982:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c986:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c992:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c996:	673b      	str	r3, [r7, #112]	@ 0x70
 800c998:	2300      	movs	r3, #0
 800c99a:	677b      	str	r3, [r7, #116]	@ 0x74
 800c99c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	d03b      	beq.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c9b2:	d01f      	beq.n	800c9f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c9b4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c9b8:	d818      	bhi.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800c9ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c9be:	d003      	beq.n	800c9c8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800c9c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c9c4:	d007      	beq.n	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800c9c6:	e011      	b.n	800c9ec <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9c8:	4b33      	ldr	r3, [pc, #204]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9cc:	4a32      	ldr	r2, [pc, #200]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800c9ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c9d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c9d4:	e00f      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c9d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c9da:	3328      	adds	r3, #40	@ 0x28
 800c9dc:	2101      	movs	r1, #1
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f001 fba2 	bl	800e128 <RCCEx_PLL3_Config>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800c9ea:	e004      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800c9f2:	e000      	b.n	800c9f6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800c9f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c9f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d10b      	bne.n	800ca16 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c9fe:	4b26      	ldr	r3, [pc, #152]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca02:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ca06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca0e:	4a22      	ldr	r2, [pc, #136]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca10:	430b      	orrs	r3, r1
 800ca12:	6553      	str	r3, [r2, #84]	@ 0x54
 800ca14:	e003      	b.n	800ca1e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca1a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ca1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca26:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ca2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ca30:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ca34:	460b      	mov	r3, r1
 800ca36:	4313      	orrs	r3, r2
 800ca38:	d034      	beq.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ca3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d003      	beq.n	800ca4c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ca44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca48:	d007      	beq.n	800ca5a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ca4a:	e011      	b.n	800ca70 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca4c:	4b12      	ldr	r3, [pc, #72]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca50:	4a11      	ldr	r2, [pc, #68]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ca56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ca58:	e00e      	b.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ca5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca5e:	3308      	adds	r3, #8
 800ca60:	2102      	movs	r1, #2
 800ca62:	4618      	mov	r0, r3
 800ca64:	f001 faae 	bl	800dfc4 <RCCEx_PLL2_Config>
 800ca68:	4603      	mov	r3, r0
 800ca6a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ca6e:	e003      	b.n	800ca78 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800ca76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ca78:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d10d      	bne.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ca80:	4b05      	ldr	r3, [pc, #20]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca84:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ca88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ca8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca8e:	4a02      	ldr	r2, [pc, #8]	@ (800ca98 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ca90:	430b      	orrs	r3, r1
 800ca92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ca94:	e006      	b.n	800caa4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800ca96:	bf00      	nop
 800ca98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800caa0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800caa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caac:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800cab0:	663b      	str	r3, [r7, #96]	@ 0x60
 800cab2:	2300      	movs	r3, #0
 800cab4:	667b      	str	r3, [r7, #100]	@ 0x64
 800cab6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800caba:	460b      	mov	r3, r1
 800cabc:	4313      	orrs	r3, r2
 800cabe:	d00c      	beq.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800cac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cac4:	3328      	adds	r3, #40	@ 0x28
 800cac6:	2102      	movs	r1, #2
 800cac8:	4618      	mov	r0, r3
 800caca:	f001 fb2d 	bl	800e128 <RCCEx_PLL3_Config>
 800cace:	4603      	mov	r3, r0
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800cad4:	2301      	movs	r3, #1
 800cad6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cada:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800cae6:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cae8:	2300      	movs	r3, #0
 800caea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800caec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800caf0:	460b      	mov	r3, r1
 800caf2:	4313      	orrs	r3, r2
 800caf4:	d036      	beq.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800caf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cafa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cafc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb00:	d018      	beq.n	800cb34 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800cb02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cb06:	d811      	bhi.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cb08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb0c:	d014      	beq.n	800cb38 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800cb0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cb12:	d80b      	bhi.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d011      	beq.n	800cb3c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800cb18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb1c:	d106      	bne.n	800cb2c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb1e:	4bb7      	ldr	r3, [pc, #732]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb22:	4ab6      	ldr	r2, [pc, #728]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cb28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800cb2a:	e008      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800cb32:	e004      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cb34:	bf00      	nop
 800cb36:	e002      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cb38:	bf00      	nop
 800cb3a:	e000      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800cb3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cb3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10a      	bne.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cb46:	4bad      	ldr	r3, [pc, #692]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cb4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cb54:	4aa9      	ldr	r2, [pc, #676]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb56:	430b      	orrs	r3, r1
 800cb58:	6553      	str	r3, [r2, #84]	@ 0x54
 800cb5a:	e003      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cb60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cb64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800cb70:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb72:	2300      	movs	r3, #0
 800cb74:	657b      	str	r3, [r7, #84]	@ 0x54
 800cb76:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800cb7a:	460b      	mov	r3, r1
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	d009      	beq.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cb80:	4b9e      	ldr	r3, [pc, #632]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cb84:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800cb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cb8e:	4a9b      	ldr	r2, [pc, #620]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cb90:	430b      	orrs	r3, r1
 800cb92:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cb94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800cba0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cba2:	2300      	movs	r3, #0
 800cba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cba6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800cbaa:	460b      	mov	r3, r1
 800cbac:	4313      	orrs	r3, r2
 800cbae:	d009      	beq.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cbb0:	4b92      	ldr	r3, [pc, #584]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbb4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800cbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800cbbe:	4a8f      	ldr	r2, [pc, #572]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbc0:	430b      	orrs	r3, r1
 800cbc2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cbc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbcc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800cbd0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cbd6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800cbda:	460b      	mov	r3, r1
 800cbdc:	4313      	orrs	r3, r2
 800cbde:	d00e      	beq.n	800cbfe <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cbe0:	4b86      	ldr	r3, [pc, #536]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbe2:	691b      	ldr	r3, [r3, #16]
 800cbe4:	4a85      	ldr	r2, [pc, #532]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbe6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cbea:	6113      	str	r3, [r2, #16]
 800cbec:	4b83      	ldr	r3, [pc, #524]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbee:	6919      	ldr	r1, [r3, #16]
 800cbf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cbf4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800cbf8:	4a80      	ldr	r2, [pc, #512]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cbfa:	430b      	orrs	r3, r1
 800cbfc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc06:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800cc0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc10:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800cc14:	460b      	mov	r3, r1
 800cc16:	4313      	orrs	r3, r2
 800cc18:	d009      	beq.n	800cc2e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cc1a:	4b78      	ldr	r3, [pc, #480]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800cc22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc28:	4a74      	ldr	r2, [pc, #464]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc2a:	430b      	orrs	r3, r1
 800cc2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cc2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc36:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800cc3a:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc40:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cc44:	460b      	mov	r3, r1
 800cc46:	4313      	orrs	r3, r2
 800cc48:	d00a      	beq.n	800cc60 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cc4a:	4b6c      	ldr	r3, [pc, #432]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc4e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cc52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc5a:	4a68      	ldr	r2, [pc, #416]	@ (800cdfc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800cc5c:	430b      	orrs	r3, r1
 800cc5e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc68:	2100      	movs	r1, #0
 800cc6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cc6c:	f003 0301 	and.w	r3, r3, #1
 800cc70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc72:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cc76:	460b      	mov	r3, r1
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	d011      	beq.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cc7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cc80:	3308      	adds	r3, #8
 800cc82:	2100      	movs	r1, #0
 800cc84:	4618      	mov	r0, r3
 800cc86:	f001 f99d 	bl	800dfc4 <RCCEx_PLL2_Config>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cc90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d003      	beq.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cc9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca8:	2100      	movs	r1, #0
 800ccaa:	6239      	str	r1, [r7, #32]
 800ccac:	f003 0302 	and.w	r3, r3, #2
 800ccb0:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccb2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	4313      	orrs	r3, r2
 800ccba:	d011      	beq.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ccbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ccc0:	3308      	adds	r3, #8
 800ccc2:	2101      	movs	r1, #1
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	f001 f97d 	bl	800dfc4 <RCCEx_PLL2_Config>
 800ccca:	4603      	mov	r3, r0
 800cccc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800ccd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d003      	beq.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800ccdc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce8:	2100      	movs	r1, #0
 800ccea:	61b9      	str	r1, [r7, #24]
 800ccec:	f003 0304 	and.w	r3, r3, #4
 800ccf0:	61fb      	str	r3, [r7, #28]
 800ccf2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	d011      	beq.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ccfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd00:	3308      	adds	r3, #8
 800cd02:	2102      	movs	r1, #2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f001 f95d 	bl	800dfc4 <RCCEx_PLL2_Config>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cd10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d003      	beq.n	800cd20 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd1c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cd20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	2100      	movs	r1, #0
 800cd2a:	6139      	str	r1, [r7, #16]
 800cd2c:	f003 0308 	and.w	r3, r3, #8
 800cd30:	617b      	str	r3, [r7, #20]
 800cd32:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cd36:	460b      	mov	r3, r1
 800cd38:	4313      	orrs	r3, r2
 800cd3a:	d011      	beq.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd40:	3328      	adds	r3, #40	@ 0x28
 800cd42:	2100      	movs	r1, #0
 800cd44:	4618      	mov	r0, r3
 800cd46:	f001 f9ef 	bl	800e128 <RCCEx_PLL3_Config>
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800cd50:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d003      	beq.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd68:	2100      	movs	r1, #0
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	f003 0310 	and.w	r3, r3, #16
 800cd70:	60fb      	str	r3, [r7, #12]
 800cd72:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cd76:	460b      	mov	r3, r1
 800cd78:	4313      	orrs	r3, r2
 800cd7a:	d011      	beq.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cd80:	3328      	adds	r3, #40	@ 0x28
 800cd82:	2101      	movs	r1, #1
 800cd84:	4618      	mov	r0, r3
 800cd86:	f001 f9cf 	bl	800e128 <RCCEx_PLL3_Config>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cd90:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d003      	beq.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd98:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cd9c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cda0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cda8:	2100      	movs	r1, #0
 800cdaa:	6039      	str	r1, [r7, #0]
 800cdac:	f003 0320 	and.w	r3, r3, #32
 800cdb0:	607b      	str	r3, [r7, #4]
 800cdb2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	d011      	beq.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cdbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800cdc0:	3328      	adds	r3, #40	@ 0x28
 800cdc2:	2102      	movs	r1, #2
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	f001 f9af 	bl	800e128 <RCCEx_PLL3_Config>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800cdd0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d003      	beq.n	800cde0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cdd8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800cddc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800cde0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d101      	bne.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	e000      	b.n	800cdee <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800cdec:	2301      	movs	r3, #1
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cdfa:	bf00      	nop
 800cdfc:	58024400 	.word	0x58024400

0800ce00 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b090      	sub	sp, #64	@ 0x40
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ce0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce0e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ce12:	430b      	orrs	r3, r1
 800ce14:	f040 8094 	bne.w	800cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ce18:	4b9b      	ldr	r3, [pc, #620]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1c:	f003 0307 	and.w	r3, r3, #7
 800ce20:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ce22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce24:	2b04      	cmp	r3, #4
 800ce26:	f200 8087 	bhi.w	800cf38 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ce2a:	a201      	add	r2, pc, #4	@ (adr r2, 800ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ce2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce30:	0800ce45 	.word	0x0800ce45
 800ce34:	0800ce6d 	.word	0x0800ce6d
 800ce38:	0800ce95 	.word	0x0800ce95
 800ce3c:	0800cf31 	.word	0x0800cf31
 800ce40:	0800cebd 	.word	0x0800cebd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce44:	4b90      	ldr	r3, [pc, #576]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce50:	d108      	bne.n	800ce64 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 ff62 	bl	800dd20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce60:	f000 bc93 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce64:	2300      	movs	r3, #0
 800ce66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce68:	f000 bc8f 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce6c:	4b86      	ldr	r3, [pc, #536]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce74:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce78:	d108      	bne.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce7a:	f107 0318 	add.w	r3, r7, #24
 800ce7e:	4618      	mov	r0, r3
 800ce80:	f000 fca6 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce84:	69bb      	ldr	r3, [r7, #24]
 800ce86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce88:	f000 bc7f 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce90:	f000 bc7b 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce94:	4b7c      	ldr	r3, [pc, #496]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cea0:	d108      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cea2:	f107 030c 	add.w	r3, r7, #12
 800cea6:	4618      	mov	r0, r3
 800cea8:	f000 fde6 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceb0:	f000 bc6b 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceb8:	f000 bc67 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cebc:	4b72      	ldr	r3, [pc, #456]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cec0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cec4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cec6:	4b70      	ldr	r3, [pc, #448]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f003 0304 	and.w	r3, r3, #4
 800cece:	2b04      	cmp	r3, #4
 800ced0:	d10c      	bne.n	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ced2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d109      	bne.n	800ceec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ced8:	4b6b      	ldr	r3, [pc, #428]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	08db      	lsrs	r3, r3, #3
 800cede:	f003 0303 	and.w	r3, r3, #3
 800cee2:	4a6a      	ldr	r2, [pc, #424]	@ (800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800cee4:	fa22 f303 	lsr.w	r3, r2, r3
 800cee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceea:	e01f      	b.n	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ceec:	4b66      	ldr	r3, [pc, #408]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cef4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cef8:	d106      	bne.n	800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cefa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cefc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf00:	d102      	bne.n	800cf08 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf02:	4b63      	ldr	r3, [pc, #396]	@ (800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800cf04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf06:	e011      	b.n	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf08:	4b5f      	ldr	r3, [pc, #380]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf14:	d106      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cf16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf1c:	d102      	bne.n	800cf24 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf1e:	4b5d      	ldr	r3, [pc, #372]	@ (800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800cf20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf22:	e003      	b.n	800cf2c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf24:	2300      	movs	r3, #0
 800cf26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cf28:	f000 bc2f 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800cf2c:	f000 bc2d 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf30:	4b59      	ldr	r3, [pc, #356]	@ (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800cf32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf34:	f000 bc29 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800cf38:	2300      	movs	r3, #0
 800cf3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf3c:	f000 bc25 	b.w	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800cf40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf44:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cf48:	430b      	orrs	r3, r1
 800cf4a:	f040 80a7 	bne.w	800d09c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800cf4e:	4b4e      	ldr	r3, [pc, #312]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cf50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cf52:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800cf56:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cf58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cf5e:	d054      	beq.n	800d00a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800cf60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cf66:	f200 808b 	bhi.w	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cf6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf6c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cf70:	f000 8083 	beq.w	800d07a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800cf74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf76:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800cf7a:	f200 8081 	bhi.w	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cf7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf84:	d02f      	beq.n	800cfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800cf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf88:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cf8c:	d878      	bhi.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800cf8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d004      	beq.n	800cf9e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800cf94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cf9a:	d012      	beq.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800cf9c:	e070      	b.n	800d080 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf9e:	4b3a      	ldr	r3, [pc, #232]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cfa6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cfaa:	d107      	bne.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cfac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 feb5 	bl	800dd20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cfb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfba:	e3e6      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfc0:	e3e3      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cfc2:	4b31      	ldr	r3, [pc, #196]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cfca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cfce:	d107      	bne.n	800cfe0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cfd0:	f107 0318 	add.w	r3, r7, #24
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f000 fbfb 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfde:	e3d4      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfe4:	e3d1      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cfe6:	4b28      	ldr	r3, [pc, #160]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cff2:	d107      	bne.n	800d004 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cff4:	f107 030c 	add.w	r3, r7, #12
 800cff8:	4618      	mov	r0, r3
 800cffa:	f000 fd3d 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d002:	e3c2      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d004:	2300      	movs	r3, #0
 800d006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d008:	e3bf      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d00a:	4b1f      	ldr	r3, [pc, #124]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d00c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d00e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d012:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d014:	4b1c      	ldr	r3, [pc, #112]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	f003 0304 	and.w	r3, r3, #4
 800d01c:	2b04      	cmp	r3, #4
 800d01e:	d10c      	bne.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800d020:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d022:	2b00      	cmp	r3, #0
 800d024:	d109      	bne.n	800d03a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d026:	4b18      	ldr	r3, [pc, #96]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	08db      	lsrs	r3, r3, #3
 800d02c:	f003 0303 	and.w	r3, r3, #3
 800d030:	4a16      	ldr	r2, [pc, #88]	@ (800d08c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800d032:	fa22 f303 	lsr.w	r3, r2, r3
 800d036:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d038:	e01e      	b.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d03a:	4b13      	ldr	r3, [pc, #76]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d046:	d106      	bne.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800d048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d04a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d04e:	d102      	bne.n	800d056 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d050:	4b0f      	ldr	r3, [pc, #60]	@ (800d090 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800d052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d054:	e010      	b.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d056:	4b0c      	ldr	r3, [pc, #48]	@ (800d088 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d05e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d062:	d106      	bne.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800d064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d06a:	d102      	bne.n	800d072 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d06c:	4b09      	ldr	r3, [pc, #36]	@ (800d094 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800d06e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d070:	e002      	b.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d072:	2300      	movs	r3, #0
 800d074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d076:	e388      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d078:	e387      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d07a:	4b07      	ldr	r3, [pc, #28]	@ (800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800d07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d07e:	e384      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d080:	2300      	movs	r3, #0
 800d082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d084:	e381      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d086:	bf00      	nop
 800d088:	58024400 	.word	0x58024400
 800d08c:	03d09000 	.word	0x03d09000
 800d090:	003d0900 	.word	0x003d0900
 800d094:	00b71b00 	.word	0x00b71b00
 800d098:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d09c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0a0:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800d0a4:	430b      	orrs	r3, r1
 800d0a6:	f040 809c 	bne.w	800d1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d0aa:	4b9e      	ldr	r3, [pc, #632]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0ae:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800d0b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800d0b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d0ba:	d054      	beq.n	800d166 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0be:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800d0c2:	f200 808b 	bhi.w	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d0c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d0cc:	f000 8083 	beq.w	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800d0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800d0d6:	f200 8081 	bhi.w	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0e0:	d02f      	beq.n	800d142 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800d0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0e8:	d878      	bhi.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d004      	beq.n	800d0fa <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800d0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d0f6:	d012      	beq.n	800d11e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800d0f8:	e070      	b.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d0fa:	4b8a      	ldr	r3, [pc, #552]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d106:	d107      	bne.n	800d118 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d10c:	4618      	mov	r0, r3
 800d10e:	f000 fe07 	bl	800dd20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d116:	e338      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d118:	2300      	movs	r3, #0
 800d11a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d11c:	e335      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d11e:	4b81      	ldr	r3, [pc, #516]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d126:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d12a:	d107      	bne.n	800d13c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d12c:	f107 0318 	add.w	r3, r7, #24
 800d130:	4618      	mov	r0, r3
 800d132:	f000 fb4d 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d13a:	e326      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d13c:	2300      	movs	r3, #0
 800d13e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d140:	e323      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d142:	4b78      	ldr	r3, [pc, #480]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d14a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d14e:	d107      	bne.n	800d160 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d150:	f107 030c 	add.w	r3, r7, #12
 800d154:	4618      	mov	r0, r3
 800d156:	f000 fc8f 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d15e:	e314      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d160:	2300      	movs	r3, #0
 800d162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d164:	e311      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d166:	4b6f      	ldr	r3, [pc, #444]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d16a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d16e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d170:	4b6c      	ldr	r3, [pc, #432]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	f003 0304 	and.w	r3, r3, #4
 800d178:	2b04      	cmp	r3, #4
 800d17a:	d10c      	bne.n	800d196 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800d17c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d109      	bne.n	800d196 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d182:	4b68      	ldr	r3, [pc, #416]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	08db      	lsrs	r3, r3, #3
 800d188:	f003 0303 	and.w	r3, r3, #3
 800d18c:	4a66      	ldr	r2, [pc, #408]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d18e:	fa22 f303 	lsr.w	r3, r2, r3
 800d192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d194:	e01e      	b.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d196:	4b63      	ldr	r3, [pc, #396]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d19e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d1a2:	d106      	bne.n	800d1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800d1a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d1aa:	d102      	bne.n	800d1b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d1ac:	4b5f      	ldr	r3, [pc, #380]	@ (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1b0:	e010      	b.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d1b2:	4b5c      	ldr	r3, [pc, #368]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1be:	d106      	bne.n	800d1ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d1c6:	d102      	bne.n	800d1ce <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d1c8:	4b59      	ldr	r3, [pc, #356]	@ (800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d1ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d1cc:	e002      	b.n	800d1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d1d2:	e2da      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d1d4:	e2d9      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d1d6:	4b57      	ldr	r3, [pc, #348]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1da:	e2d6      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1e0:	e2d3      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d1e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1e6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d1ea:	430b      	orrs	r3, r1
 800d1ec:	f040 80a7 	bne.w	800d33e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d1f0:	4b4c      	ldr	r3, [pc, #304]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d1f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1f4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d1f8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d1fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d200:	d055      	beq.n	800d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800d202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d208:	f200 8096 	bhi.w	800d338 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d20c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d20e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d212:	f000 8084 	beq.w	800d31e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800d216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d218:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d21c:	f200 808c 	bhi.w	800d338 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d222:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d226:	d030      	beq.n	800d28a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800d228:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d22a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d22e:	f200 8083 	bhi.w	800d338 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800d232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d234:	2b00      	cmp	r3, #0
 800d236:	d004      	beq.n	800d242 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800d238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d23a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d23e:	d012      	beq.n	800d266 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800d240:	e07a      	b.n	800d338 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d242:	4b38      	ldr	r3, [pc, #224]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d24a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d24e:	d107      	bne.n	800d260 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d254:	4618      	mov	r0, r3
 800d256:	f000 fd63 	bl	800dd20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d25e:	e294      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d260:	2300      	movs	r3, #0
 800d262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d264:	e291      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d266:	4b2f      	ldr	r3, [pc, #188]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d26e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d272:	d107      	bne.n	800d284 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d274:	f107 0318 	add.w	r3, r7, #24
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 faa9 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d282:	e282      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d284:	2300      	movs	r3, #0
 800d286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d288:	e27f      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d28a:	4b26      	ldr	r3, [pc, #152]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d292:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d296:	d107      	bne.n	800d2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d298:	f107 030c 	add.w	r3, r7, #12
 800d29c:	4618      	mov	r0, r3
 800d29e:	f000 fbeb 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2a6:	e270      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2ac:	e26d      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d2ae:	4b1d      	ldr	r3, [pc, #116]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d2b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d2b6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d2b8:	4b1a      	ldr	r3, [pc, #104]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 0304 	and.w	r3, r3, #4
 800d2c0:	2b04      	cmp	r3, #4
 800d2c2:	d10c      	bne.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800d2c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d109      	bne.n	800d2de <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2ca:	4b16      	ldr	r3, [pc, #88]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	08db      	lsrs	r3, r3, #3
 800d2d0:	f003 0303 	and.w	r3, r3, #3
 800d2d4:	4a14      	ldr	r2, [pc, #80]	@ (800d328 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800d2d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d2da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2dc:	e01e      	b.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d2de:	4b11      	ldr	r3, [pc, #68]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d2e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2ea:	d106      	bne.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800d2ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d2ee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d2f2:	d102      	bne.n	800d2fa <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d2f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d32c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800d2f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d2f8:	e010      	b.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d2fa:	4b0a      	ldr	r3, [pc, #40]	@ (800d324 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d302:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d306:	d106      	bne.n	800d316 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800d308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d30a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d30e:	d102      	bne.n	800d316 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d310:	4b07      	ldr	r3, [pc, #28]	@ (800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800d312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d314:	e002      	b.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d316:	2300      	movs	r3, #0
 800d318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d31a:	e236      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d31c:	e235      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d31e:	4b05      	ldr	r3, [pc, #20]	@ (800d334 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800d320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d322:	e232      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d324:	58024400 	.word	0x58024400
 800d328:	03d09000 	.word	0x03d09000
 800d32c:	003d0900 	.word	0x003d0900
 800d330:	00b71b00 	.word	0x00b71b00
 800d334:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d338:	2300      	movs	r3, #0
 800d33a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d33c:	e225      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d33e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d342:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d346:	430b      	orrs	r3, r1
 800d348:	f040 8085 	bne.w	800d456 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d34c:	4b9c      	ldr	r3, [pc, #624]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d34e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d350:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d354:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d35c:	d06b      	beq.n	800d436 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800d35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d364:	d874      	bhi.n	800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d368:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d36c:	d056      	beq.n	800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800d36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d370:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d374:	d86c      	bhi.n	800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d378:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d37c:	d03b      	beq.n	800d3f6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800d37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d380:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d384:	d864      	bhi.n	800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d38c:	d021      	beq.n	800d3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800d38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d390:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d394:	d85c      	bhi.n	800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800d396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d004      	beq.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800d39c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d39e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3a2:	d004      	beq.n	800d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800d3a4:	e054      	b.n	800d450 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d3a6:	f7fe fb5f 	bl	800ba68 <HAL_RCC_GetPCLK1Freq>
 800d3aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3ac:	e1ed      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3ae:	4b84      	ldr	r3, [pc, #528]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3ba:	d107      	bne.n	800d3cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3bc:	f107 0318 	add.w	r3, r7, #24
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	f000 fa05 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
 800d3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3ca:	e1de      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3d0:	e1db      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d3d2:	4b7b      	ldr	r3, [pc, #492]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d3da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d3de:	d107      	bne.n	800d3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3e0:	f107 030c 	add.w	r3, r7, #12
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	f000 fb47 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3ee:	e1cc      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3f4:	e1c9      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d3f6:	4b72      	ldr	r3, [pc, #456]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	f003 0304 	and.w	r3, r3, #4
 800d3fe:	2b04      	cmp	r3, #4
 800d400:	d109      	bne.n	800d416 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d402:	4b6f      	ldr	r3, [pc, #444]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	08db      	lsrs	r3, r3, #3
 800d408:	f003 0303 	and.w	r3, r3, #3
 800d40c:	4a6d      	ldr	r2, [pc, #436]	@ (800d5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d40e:	fa22 f303 	lsr.w	r3, r2, r3
 800d412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d414:	e1b9      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d41a:	e1b6      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d41c:	4b68      	ldr	r3, [pc, #416]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d428:	d102      	bne.n	800d430 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800d42a:	4b67      	ldr	r3, [pc, #412]	@ (800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d42e:	e1ac      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d430:	2300      	movs	r3, #0
 800d432:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d434:	e1a9      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d436:	4b62      	ldr	r3, [pc, #392]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d43e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d442:	d102      	bne.n	800d44a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800d444:	4b61      	ldr	r3, [pc, #388]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d448:	e19f      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d44a:	2300      	movs	r3, #0
 800d44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d44e:	e19c      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d450:	2300      	movs	r3, #0
 800d452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d454:	e199      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d45a:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d45e:	430b      	orrs	r3, r1
 800d460:	d173      	bne.n	800d54a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d462:	4b57      	ldr	r3, [pc, #348]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d466:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d46a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d46c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d46e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d472:	d02f      	beq.n	800d4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800d474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d476:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d47a:	d863      	bhi.n	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800d47c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d004      	beq.n	800d48c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800d482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d484:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d488:	d012      	beq.n	800d4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800d48a:	e05b      	b.n	800d544 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d48c:	4b4c      	ldr	r3, [pc, #304]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d494:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d498:	d107      	bne.n	800d4aa <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d49a:	f107 0318 	add.w	r3, r7, #24
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f000 f996 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d4a4:	69bb      	ldr	r3, [r7, #24]
 800d4a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4a8:	e16f      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4ae:	e16c      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d4b0:	4b43      	ldr	r3, [pc, #268]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4bc:	d107      	bne.n	800d4ce <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4be:	f107 030c 	add.w	r3, r7, #12
 800d4c2:	4618      	mov	r0, r3
 800d4c4:	f000 fad8 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4cc:	e15d      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4d2:	e15a      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d4d4:	4b3a      	ldr	r3, [pc, #232]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d4d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d4dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d4de:	4b38      	ldr	r3, [pc, #224]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	f003 0304 	and.w	r3, r3, #4
 800d4e6:	2b04      	cmp	r3, #4
 800d4e8:	d10c      	bne.n	800d504 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800d4ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d109      	bne.n	800d504 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4f0:	4b33      	ldr	r3, [pc, #204]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	08db      	lsrs	r3, r3, #3
 800d4f6:	f003 0303 	and.w	r3, r3, #3
 800d4fa:	4a32      	ldr	r2, [pc, #200]	@ (800d5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800d4fc:	fa22 f303 	lsr.w	r3, r2, r3
 800d500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d502:	e01e      	b.n	800d542 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d504:	4b2e      	ldr	r3, [pc, #184]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d50c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d510:	d106      	bne.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800d512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d514:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d518:	d102      	bne.n	800d520 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d51a:	4b2b      	ldr	r3, [pc, #172]	@ (800d5c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800d51c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d51e:	e010      	b.n	800d542 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d520:	4b27      	ldr	r3, [pc, #156]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d528:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d52c:	d106      	bne.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800d52e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d534:	d102      	bne.n	800d53c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d536:	4b25      	ldr	r3, [pc, #148]	@ (800d5cc <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800d538:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d53a:	e002      	b.n	800d542 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d540:	e123      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d542:	e122      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d544:	2300      	movs	r3, #0
 800d546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d548:	e11f      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d54a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d54e:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d552:	430b      	orrs	r3, r1
 800d554:	d13c      	bne.n	800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d556:	4b1a      	ldr	r3, [pc, #104]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d55a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d55e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d562:	2b00      	cmp	r3, #0
 800d564:	d004      	beq.n	800d570 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800d566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d56c:	d012      	beq.n	800d594 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800d56e:	e023      	b.n	800d5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d570:	4b13      	ldr	r3, [pc, #76]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d578:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d57c:	d107      	bne.n	800d58e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d57e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d582:	4618      	mov	r0, r3
 800d584:	f000 fbcc 	bl	800dd20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d58c:	e0fd      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d58e:	2300      	movs	r3, #0
 800d590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d592:	e0fa      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d594:	4b0a      	ldr	r3, [pc, #40]	@ (800d5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d59c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5a0:	d107      	bne.n	800d5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5a2:	f107 0318 	add.w	r3, r7, #24
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 f912 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d5ac:	6a3b      	ldr	r3, [r7, #32]
 800d5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5b0:	e0eb      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5b6:	e0e8      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5bc:	e0e5      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800d5be:	bf00      	nop
 800d5c0:	58024400 	.word	0x58024400
 800d5c4:	03d09000 	.word	0x03d09000
 800d5c8:	003d0900 	.word	0x003d0900
 800d5cc:	00b71b00 	.word	0x00b71b00
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d5d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d5d4:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d5d8:	430b      	orrs	r3, r1
 800d5da:	f040 8085 	bne.w	800d6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d5de:	4b6d      	ldr	r3, [pc, #436]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d5e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d5e2:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d5e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d5ee:	d06b      	beq.n	800d6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800d5f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d5f6:	d874      	bhi.n	800d6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5fe:	d056      	beq.n	800d6ae <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800d600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d606:	d86c      	bhi.n	800d6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d60a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d60e:	d03b      	beq.n	800d688 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800d610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d612:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d616:	d864      	bhi.n	800d6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d61a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d61e:	d021      	beq.n	800d664 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800d620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d626:	d85c      	bhi.n	800d6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800d628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d004      	beq.n	800d638 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800d62e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d634:	d004      	beq.n	800d640 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800d636:	e054      	b.n	800d6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d638:	f000 f8b4 	bl	800d7a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800d63c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d63e:	e0a4      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d640:	4b54      	ldr	r3, [pc, #336]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d648:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d64c:	d107      	bne.n	800d65e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d64e:	f107 0318 	add.w	r3, r7, #24
 800d652:	4618      	mov	r0, r3
 800d654:	f000 f8bc 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d65c:	e095      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d65e:	2300      	movs	r3, #0
 800d660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d662:	e092      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d664:	4b4b      	ldr	r3, [pc, #300]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d66c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d670:	d107      	bne.n	800d682 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d672:	f107 030c 	add.w	r3, r7, #12
 800d676:	4618      	mov	r0, r3
 800d678:	f000 f9fe 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d680:	e083      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d682:	2300      	movs	r3, #0
 800d684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d686:	e080      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d688:	4b42      	ldr	r3, [pc, #264]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f003 0304 	and.w	r3, r3, #4
 800d690:	2b04      	cmp	r3, #4
 800d692:	d109      	bne.n	800d6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d694:	4b3f      	ldr	r3, [pc, #252]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	08db      	lsrs	r3, r3, #3
 800d69a:	f003 0303 	and.w	r3, r3, #3
 800d69e:	4a3e      	ldr	r2, [pc, #248]	@ (800d798 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800d6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800d6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6a6:	e070      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6ac:	e06d      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d6ae:	4b39      	ldr	r3, [pc, #228]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d6b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6ba:	d102      	bne.n	800d6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800d6bc:	4b37      	ldr	r3, [pc, #220]	@ (800d79c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6c0:	e063      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6c6:	e060      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d6c8:	4b32      	ldr	r3, [pc, #200]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d6d4:	d102      	bne.n	800d6dc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800d6d6:	4b32      	ldr	r3, [pc, #200]	@ (800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d6da:	e056      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d6dc:	2300      	movs	r3, #0
 800d6de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6e0:	e053      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d6e6:	e050      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d6e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6ec:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d6f0:	430b      	orrs	r3, r1
 800d6f2:	d148      	bne.n	800d786 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d6f4:	4b27      	ldr	r3, [pc, #156]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d6f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d6f8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d6fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d700:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d704:	d02a      	beq.n	800d75c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800d706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d70c:	d838      	bhi.n	800d780 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800d70e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d710:	2b00      	cmp	r3, #0
 800d712:	d004      	beq.n	800d71e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800d714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d71a:	d00d      	beq.n	800d738 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800d71c:	e030      	b.n	800d780 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d71e:	4b1d      	ldr	r3, [pc, #116]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d72a:	d102      	bne.n	800d732 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800d72c:	4b1c      	ldr	r3, [pc, #112]	@ (800d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d72e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d730:	e02b      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d732:	2300      	movs	r3, #0
 800d734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d736:	e028      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d738:	4b16      	ldr	r3, [pc, #88]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d740:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d744:	d107      	bne.n	800d756 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d74a:	4618      	mov	r0, r3
 800d74c:	f000 fae8 	bl	800dd20 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d754:	e019      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d75a:	e016      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d75c:	4b0d      	ldr	r3, [pc, #52]	@ (800d794 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d764:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d768:	d107      	bne.n	800d77a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d76a:	f107 0318 	add.w	r3, r7, #24
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 f82e 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d774:	69fb      	ldr	r3, [r7, #28]
 800d776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d778:	e007      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800d77a:	2300      	movs	r3, #0
 800d77c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d77e:	e004      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800d780:	2300      	movs	r3, #0
 800d782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d784:	e001      	b.n	800d78a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800d786:	2300      	movs	r3, #0
 800d788:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3740      	adds	r7, #64	@ 0x40
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	58024400 	.word	0x58024400
 800d798:	03d09000 	.word	0x03d09000
 800d79c:	003d0900 	.word	0x003d0900
 800d7a0:	00b71b00 	.word	0x00b71b00

0800d7a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d7a8:	f7fe f92e 	bl	800ba08 <HAL_RCC_GetHCLKFreq>
 800d7ac:	4602      	mov	r2, r0
 800d7ae:	4b06      	ldr	r3, [pc, #24]	@ (800d7c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d7b0:	6a1b      	ldr	r3, [r3, #32]
 800d7b2:	091b      	lsrs	r3, r3, #4
 800d7b4:	f003 0307 	and.w	r3, r3, #7
 800d7b8:	4904      	ldr	r1, [pc, #16]	@ (800d7cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d7ba:	5ccb      	ldrb	r3, [r1, r3]
 800d7bc:	f003 031f 	and.w	r3, r3, #31
 800d7c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d7c4:	4618      	mov	r0, r3
 800d7c6:	bd80      	pop	{r7, pc}
 800d7c8:	58024400 	.word	0x58024400
 800d7cc:	0801387c 	.word	0x0801387c

0800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b089      	sub	sp, #36	@ 0x24
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d7d8:	4ba1      	ldr	r3, [pc, #644]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7dc:	f003 0303 	and.w	r3, r3, #3
 800d7e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d7e2:	4b9f      	ldr	r3, [pc, #636]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d7e6:	0b1b      	lsrs	r3, r3, #12
 800d7e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d7ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d7ee:	4b9c      	ldr	r3, [pc, #624]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7f2:	091b      	lsrs	r3, r3, #4
 800d7f4:	f003 0301 	and.w	r3, r3, #1
 800d7f8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d7fa:	4b99      	ldr	r3, [pc, #612]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7fe:	08db      	lsrs	r3, r3, #3
 800d800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d804:	693a      	ldr	r2, [r7, #16]
 800d806:	fb02 f303 	mul.w	r3, r2, r3
 800d80a:	ee07 3a90 	vmov	s15, r3
 800d80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d812:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	f000 8111 	beq.w	800da40 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	2b02      	cmp	r3, #2
 800d822:	f000 8083 	beq.w	800d92c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d826:	69bb      	ldr	r3, [r7, #24]
 800d828:	2b02      	cmp	r3, #2
 800d82a:	f200 80a1 	bhi.w	800d970 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d003      	beq.n	800d83c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	2b01      	cmp	r3, #1
 800d838:	d056      	beq.n	800d8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d83a:	e099      	b.n	800d970 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d83c:	4b88      	ldr	r3, [pc, #544]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f003 0320 	and.w	r3, r3, #32
 800d844:	2b00      	cmp	r3, #0
 800d846:	d02d      	beq.n	800d8a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d848:	4b85      	ldr	r3, [pc, #532]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	08db      	lsrs	r3, r3, #3
 800d84e:	f003 0303 	and.w	r3, r3, #3
 800d852:	4a84      	ldr	r2, [pc, #528]	@ (800da64 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d854:	fa22 f303 	lsr.w	r3, r2, r3
 800d858:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	ee07 3a90 	vmov	s15, r3
 800d860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d864:	697b      	ldr	r3, [r7, #20]
 800d866:	ee07 3a90 	vmov	s15, r3
 800d86a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d872:	4b7b      	ldr	r3, [pc, #492]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d87a:	ee07 3a90 	vmov	s15, r3
 800d87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d882:	ed97 6a03 	vldr	s12, [r7, #12]
 800d886:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800da68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d88a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d89e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d8a2:	e087      	b.n	800d9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d8a4:	697b      	ldr	r3, [r7, #20]
 800d8a6:	ee07 3a90 	vmov	s15, r3
 800d8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800da6c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8b6:	4b6a      	ldr	r3, [pc, #424]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d8be:	ee07 3a90 	vmov	s15, r3
 800d8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800da68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8e6:	e065      	b.n	800d9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	ee07 3a90 	vmov	s15, r3
 800d8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800da70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d8fa:	4b59      	ldr	r3, [pc, #356]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d902:	ee07 3a90 	vmov	s15, r3
 800d906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d90e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800da68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d91a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d92a:	e043      	b.n	800d9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	ee07 3a90 	vmov	s15, r3
 800d932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d936:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800da74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d93a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d93e:	4b48      	ldr	r3, [pc, #288]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d946:	ee07 3a90 	vmov	s15, r3
 800d94a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d94e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d952:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800da68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d95a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d95e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d96a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d96e:	e021      	b.n	800d9b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d970:	697b      	ldr	r3, [r7, #20]
 800d972:	ee07 3a90 	vmov	s15, r3
 800d976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d97a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800da70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d97e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d982:	4b37      	ldr	r3, [pc, #220]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d98a:	ee07 3a90 	vmov	s15, r3
 800d98e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d992:	ed97 6a03 	vldr	s12, [r7, #12]
 800d996:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800da68 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d99a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d99e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d9b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d9b4:	4b2a      	ldr	r3, [pc, #168]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9b8:	0a5b      	lsrs	r3, r3, #9
 800d9ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9be:	ee07 3a90 	vmov	s15, r3
 800d9c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d9ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800d9d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d9d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d9da:	ee17 2a90 	vmov	r2, s15
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d9e2:	4b1f      	ldr	r3, [pc, #124]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e6:	0c1b      	lsrs	r3, r3, #16
 800d9e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9ec:	ee07 3a90 	vmov	s15, r3
 800d9f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d9f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d9fc:	edd7 6a07 	vldr	s13, [r7, #28]
 800da00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da08:	ee17 2a90 	vmov	r2, s15
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800da10:	4b13      	ldr	r3, [pc, #76]	@ (800da60 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da14:	0e1b      	lsrs	r3, r3, #24
 800da16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800da1a:	ee07 3a90 	vmov	s15, r3
 800da1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800da26:	ee37 7a87 	vadd.f32	s14, s15, s14
 800da2a:	edd7 6a07 	vldr	s13, [r7, #28]
 800da2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800da32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800da36:	ee17 2a90 	vmov	r2, s15
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800da3e:	e008      	b.n	800da52 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	2200      	movs	r2, #0
 800da4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	609a      	str	r2, [r3, #8]
}
 800da52:	bf00      	nop
 800da54:	3724      	adds	r7, #36	@ 0x24
 800da56:	46bd      	mov	sp, r7
 800da58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop
 800da60:	58024400 	.word	0x58024400
 800da64:	03d09000 	.word	0x03d09000
 800da68:	46000000 	.word	0x46000000
 800da6c:	4c742400 	.word	0x4c742400
 800da70:	4a742400 	.word	0x4a742400
 800da74:	4b371b00 	.word	0x4b371b00

0800da78 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800da78:	b480      	push	{r7}
 800da7a:	b089      	sub	sp, #36	@ 0x24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800da80:	4ba1      	ldr	r3, [pc, #644]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da84:	f003 0303 	and.w	r3, r3, #3
 800da88:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800da8a:	4b9f      	ldr	r3, [pc, #636]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800da8e:	0d1b      	lsrs	r3, r3, #20
 800da90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800da94:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800da96:	4b9c      	ldr	r3, [pc, #624]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da9a:	0a1b      	lsrs	r3, r3, #8
 800da9c:	f003 0301 	and.w	r3, r3, #1
 800daa0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800daa2:	4b99      	ldr	r3, [pc, #612]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800daa6:	08db      	lsrs	r3, r3, #3
 800daa8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800daac:	693a      	ldr	r2, [r7, #16]
 800daae:	fb02 f303 	mul.w	r3, r2, r3
 800dab2:	ee07 3a90 	vmov	s15, r3
 800dab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	f000 8111 	beq.w	800dce8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dac6:	69bb      	ldr	r3, [r7, #24]
 800dac8:	2b02      	cmp	r3, #2
 800daca:	f000 8083 	beq.w	800dbd4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dace:	69bb      	ldr	r3, [r7, #24]
 800dad0:	2b02      	cmp	r3, #2
 800dad2:	f200 80a1 	bhi.w	800dc18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d003      	beq.n	800dae4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dadc:	69bb      	ldr	r3, [r7, #24]
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d056      	beq.n	800db90 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dae2:	e099      	b.n	800dc18 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dae4:	4b88      	ldr	r3, [pc, #544]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	f003 0320 	and.w	r3, r3, #32
 800daec:	2b00      	cmp	r3, #0
 800daee:	d02d      	beq.n	800db4c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800daf0:	4b85      	ldr	r3, [pc, #532]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	08db      	lsrs	r3, r3, #3
 800daf6:	f003 0303 	and.w	r3, r3, #3
 800dafa:	4a84      	ldr	r2, [pc, #528]	@ (800dd0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dafc:	fa22 f303 	lsr.w	r3, r2, r3
 800db00:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	ee07 3a90 	vmov	s15, r3
 800db08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	ee07 3a90 	vmov	s15, r3
 800db12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db1a:	4b7b      	ldr	r3, [pc, #492]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db22:	ee07 3a90 	vmov	s15, r3
 800db26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800db2e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800dd10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db46:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800db4a:	e087      	b.n	800dc5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	ee07 3a90 	vmov	s15, r3
 800db52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db56:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800dd14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800db5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db5e:	4b6a      	ldr	r3, [pc, #424]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db66:	ee07 3a90 	vmov	s15, r3
 800db6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800db72:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800dd10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800db76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db8e:	e065      	b.n	800dc5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	ee07 3a90 	vmov	s15, r3
 800db96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db9a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800dd18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800db9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dba2:	4b59      	ldr	r3, [pc, #356]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbaa:	ee07 3a90 	vmov	s15, r3
 800dbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbb6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800dd10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dbc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dbce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dbd2:	e043      	b.n	800dc5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	ee07 3a90 	vmov	s15, r3
 800dbda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbde:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800dd1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dbe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dbe6:	4b48      	ldr	r3, [pc, #288]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbee:	ee07 3a90 	vmov	s15, r3
 800dbf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dbf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800dbfa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800dd10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dbfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc16:	e021      	b.n	800dc5c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	ee07 3a90 	vmov	s15, r3
 800dc1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800dd18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dc26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc2a:	4b37      	ldr	r3, [pc, #220]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc32:	ee07 3a90 	vmov	s15, r3
 800dc36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc3e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800dd10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dc5a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800dc5c:	4b2a      	ldr	r3, [pc, #168]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc60:	0a5b      	lsrs	r3, r3, #9
 800dc62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc66:	ee07 3a90 	vmov	s15, r3
 800dc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dc72:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dc76:	edd7 6a07 	vldr	s13, [r7, #28]
 800dc7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dc7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dc82:	ee17 2a90 	vmov	r2, s15
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800dc8a:	4b1f      	ldr	r3, [pc, #124]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc8e:	0c1b      	lsrs	r3, r3, #16
 800dc90:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dc94:	ee07 3a90 	vmov	s15, r3
 800dc98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc9c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dca0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dca4:	edd7 6a07 	vldr	s13, [r7, #28]
 800dca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcb0:	ee17 2a90 	vmov	r2, s15
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800dcb8:	4b13      	ldr	r3, [pc, #76]	@ (800dd08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcbc:	0e1b      	lsrs	r3, r3, #24
 800dcbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dcc2:	ee07 3a90 	vmov	s15, r3
 800dcc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dcce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dcd2:	edd7 6a07 	vldr	s13, [r7, #28]
 800dcd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dcda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dcde:	ee17 2a90 	vmov	r2, s15
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800dce6:	e008      	b.n	800dcfa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2200      	movs	r2, #0
 800dcec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2200      	movs	r2, #0
 800dcf2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	609a      	str	r2, [r3, #8]
}
 800dcfa:	bf00      	nop
 800dcfc:	3724      	adds	r7, #36	@ 0x24
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop
 800dd08:	58024400 	.word	0x58024400
 800dd0c:	03d09000 	.word	0x03d09000
 800dd10:	46000000 	.word	0x46000000
 800dd14:	4c742400 	.word	0x4c742400
 800dd18:	4a742400 	.word	0x4a742400
 800dd1c:	4b371b00 	.word	0x4b371b00

0800dd20 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800dd20:	b480      	push	{r7}
 800dd22:	b089      	sub	sp, #36	@ 0x24
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dd28:	4ba0      	ldr	r3, [pc, #640]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd2c:	f003 0303 	and.w	r3, r3, #3
 800dd30:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800dd32:	4b9e      	ldr	r3, [pc, #632]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd36:	091b      	lsrs	r3, r3, #4
 800dd38:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dd3c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800dd3e:	4b9b      	ldr	r3, [pc, #620]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd42:	f003 0301 	and.w	r3, r3, #1
 800dd46:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dd48:	4b98      	ldr	r3, [pc, #608]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dd4c:	08db      	lsrs	r3, r3, #3
 800dd4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dd52:	693a      	ldr	r2, [r7, #16]
 800dd54:	fb02 f303 	mul.w	r3, r2, r3
 800dd58:	ee07 3a90 	vmov	s15, r3
 800dd5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd60:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dd64:	697b      	ldr	r3, [r7, #20]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	f000 8111 	beq.w	800df8e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	2b02      	cmp	r3, #2
 800dd70:	f000 8083 	beq.w	800de7a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dd74:	69bb      	ldr	r3, [r7, #24]
 800dd76:	2b02      	cmp	r3, #2
 800dd78:	f200 80a1 	bhi.w	800debe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d003      	beq.n	800dd8a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dd82:	69bb      	ldr	r3, [r7, #24]
 800dd84:	2b01      	cmp	r3, #1
 800dd86:	d056      	beq.n	800de36 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dd88:	e099      	b.n	800debe <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd8a:	4b88      	ldr	r3, [pc, #544]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	f003 0320 	and.w	r3, r3, #32
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d02d      	beq.n	800ddf2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dd96:	4b85      	ldr	r3, [pc, #532]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	08db      	lsrs	r3, r3, #3
 800dd9c:	f003 0303 	and.w	r3, r3, #3
 800dda0:	4a83      	ldr	r2, [pc, #524]	@ (800dfb0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800dda2:	fa22 f303 	lsr.w	r3, r2, r3
 800dda6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	ee07 3a90 	vmov	s15, r3
 800ddae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	ee07 3a90 	vmov	s15, r3
 800ddb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ddc0:	4b7a      	ldr	r3, [pc, #488]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ddc8:	ee07 3a90 	vmov	s15, r3
 800ddcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ddd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800ddd4:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800dfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ddd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dddc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dde0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dde4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dde8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ddec:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ddf0:	e087      	b.n	800df02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ddf2:	697b      	ldr	r3, [r7, #20]
 800ddf4:	ee07 3a90 	vmov	s15, r3
 800ddf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddfc:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800dfb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800de00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de04:	4b69      	ldr	r3, [pc, #420]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de0c:	ee07 3a90 	vmov	s15, r3
 800de10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de14:	ed97 6a03 	vldr	s12, [r7, #12]
 800de18:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800dfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800de1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de34:	e065      	b.n	800df02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	ee07 3a90 	vmov	s15, r3
 800de3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de40:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800dfbc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800de44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de48:	4b58      	ldr	r3, [pc, #352]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de50:	ee07 3a90 	vmov	s15, r3
 800de54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de58:	ed97 6a03 	vldr	s12, [r7, #12]
 800de5c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800dfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800de60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800de64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800de68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800de6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800de70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800de78:	e043      	b.n	800df02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	ee07 3a90 	vmov	s15, r3
 800de80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800de84:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dfc0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800de88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800de8c:	4b47      	ldr	r3, [pc, #284]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800de8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de94:	ee07 3a90 	vmov	s15, r3
 800de98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800de9c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dea0:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800dfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dea4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dea8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800deac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800deb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800deb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800deb8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800debc:	e021      	b.n	800df02 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	ee07 3a90 	vmov	s15, r3
 800dec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dec8:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800dfb8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800decc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ded0:	4b36      	ldr	r3, [pc, #216]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ded2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ded4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ded8:	ee07 3a90 	vmov	s15, r3
 800dedc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dee0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dee4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dfb4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dee8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800deec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800def0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800def4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800def8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800defc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800df00:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800df02:	4b2a      	ldr	r3, [pc, #168]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df06:	0a5b      	lsrs	r3, r3, #9
 800df08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df0c:	ee07 3a90 	vmov	s15, r3
 800df10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800df20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df28:	ee17 2a90 	vmov	r2, s15
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800df30:	4b1e      	ldr	r3, [pc, #120]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df34:	0c1b      	lsrs	r3, r3, #16
 800df36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df3a:	ee07 3a90 	vmov	s15, r3
 800df3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800df4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df56:	ee17 2a90 	vmov	r2, s15
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800df5e:	4b13      	ldr	r3, [pc, #76]	@ (800dfac <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800df60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df62:	0e1b      	lsrs	r3, r3, #24
 800df64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df68:	ee07 3a90 	vmov	s15, r3
 800df6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800df70:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800df74:	ee37 7a87 	vadd.f32	s14, s15, s14
 800df78:	edd7 6a07 	vldr	s13, [r7, #28]
 800df7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800df80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800df84:	ee17 2a90 	vmov	r2, s15
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800df8c:	e008      	b.n	800dfa0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	2200      	movs	r2, #0
 800df92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	2200      	movs	r2, #0
 800df98:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	2200      	movs	r2, #0
 800df9e:	609a      	str	r2, [r3, #8]
}
 800dfa0:	bf00      	nop
 800dfa2:	3724      	adds	r7, #36	@ 0x24
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr
 800dfac:	58024400 	.word	0x58024400
 800dfb0:	03d09000 	.word	0x03d09000
 800dfb4:	46000000 	.word	0x46000000
 800dfb8:	4c742400 	.word	0x4c742400
 800dfbc:	4a742400 	.word	0x4a742400
 800dfc0:	4b371b00 	.word	0x4b371b00

0800dfc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dfd2:	4b53      	ldr	r3, [pc, #332]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800dfd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfd6:	f003 0303 	and.w	r3, r3, #3
 800dfda:	2b03      	cmp	r3, #3
 800dfdc:	d101      	bne.n	800dfe2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dfde:	2301      	movs	r3, #1
 800dfe0:	e099      	b.n	800e116 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dfe2:	4b4f      	ldr	r3, [pc, #316]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a4e      	ldr	r2, [pc, #312]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800dfe8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dfec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfee:	f7f6 f8df 	bl	80041b0 <HAL_GetTick>
 800dff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dff4:	e008      	b.n	800e008 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dff6:	f7f6 f8db 	bl	80041b0 <HAL_GetTick>
 800dffa:	4602      	mov	r2, r0
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	2b02      	cmp	r3, #2
 800e002:	d901      	bls.n	800e008 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e004:	2303      	movs	r3, #3
 800e006:	e086      	b.n	800e116 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e008:	4b45      	ldr	r3, [pc, #276]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e010:	2b00      	cmp	r3, #0
 800e012:	d1f0      	bne.n	800dff6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e014:	4b42      	ldr	r3, [pc, #264]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e018:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	031b      	lsls	r3, r3, #12
 800e022:	493f      	ldr	r1, [pc, #252]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e024:	4313      	orrs	r3, r2
 800e026:	628b      	str	r3, [r1, #40]	@ 0x28
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	3b01      	subs	r3, #1
 800e02e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	689b      	ldr	r3, [r3, #8]
 800e036:	3b01      	subs	r3, #1
 800e038:	025b      	lsls	r3, r3, #9
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	431a      	orrs	r2, r3
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	68db      	ldr	r3, [r3, #12]
 800e042:	3b01      	subs	r3, #1
 800e044:	041b      	lsls	r3, r3, #16
 800e046:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e04a:	431a      	orrs	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	691b      	ldr	r3, [r3, #16]
 800e050:	3b01      	subs	r3, #1
 800e052:	061b      	lsls	r3, r3, #24
 800e054:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e058:	4931      	ldr	r1, [pc, #196]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e05a:	4313      	orrs	r3, r2
 800e05c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e05e:	4b30      	ldr	r3, [pc, #192]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e062:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	695b      	ldr	r3, [r3, #20]
 800e06a:	492d      	ldr	r1, [pc, #180]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e06c:	4313      	orrs	r3, r2
 800e06e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e070:	4b2b      	ldr	r3, [pc, #172]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e074:	f023 0220 	bic.w	r2, r3, #32
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	699b      	ldr	r3, [r3, #24]
 800e07c:	4928      	ldr	r1, [pc, #160]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e07e:	4313      	orrs	r3, r2
 800e080:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e082:	4b27      	ldr	r3, [pc, #156]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e086:	4a26      	ldr	r2, [pc, #152]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e088:	f023 0310 	bic.w	r3, r3, #16
 800e08c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e08e:	4b24      	ldr	r3, [pc, #144]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e092:	4b24      	ldr	r3, [pc, #144]	@ (800e124 <RCCEx_PLL2_Config+0x160>)
 800e094:	4013      	ands	r3, r2
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	69d2      	ldr	r2, [r2, #28]
 800e09a:	00d2      	lsls	r2, r2, #3
 800e09c:	4920      	ldr	r1, [pc, #128]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e0a2:	4b1f      	ldr	r3, [pc, #124]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a6:	4a1e      	ldr	r2, [pc, #120]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0a8:	f043 0310 	orr.w	r3, r3, #16
 800e0ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d106      	bne.n	800e0c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e0b4:	4b1a      	ldr	r3, [pc, #104]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b8:	4a19      	ldr	r2, [pc, #100]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e0be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0c0:	e00f      	b.n	800e0e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e0c2:	683b      	ldr	r3, [r7, #0]
 800e0c4:	2b01      	cmp	r3, #1
 800e0c6:	d106      	bne.n	800e0d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e0c8:	4b15      	ldr	r3, [pc, #84]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0cc:	4a14      	ldr	r2, [pc, #80]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e0d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0d4:	e005      	b.n	800e0e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e0d6:	4b12      	ldr	r3, [pc, #72]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0da:	4a11      	ldr	r2, [pc, #68]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800e0e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e0e2:	4b0f      	ldr	r3, [pc, #60]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4a0e      	ldr	r2, [pc, #56]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e0e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e0ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0ee:	f7f6 f85f 	bl	80041b0 <HAL_GetTick>
 800e0f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e0f4:	e008      	b.n	800e108 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e0f6:	f7f6 f85b 	bl	80041b0 <HAL_GetTick>
 800e0fa:	4602      	mov	r2, r0
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	1ad3      	subs	r3, r2, r3
 800e100:	2b02      	cmp	r3, #2
 800e102:	d901      	bls.n	800e108 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e104:	2303      	movs	r3, #3
 800e106:	e006      	b.n	800e116 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e108:	4b05      	ldr	r3, [pc, #20]	@ (800e120 <RCCEx_PLL2_Config+0x15c>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e110:	2b00      	cmp	r3, #0
 800e112:	d0f0      	beq.n	800e0f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e114:	7bfb      	ldrb	r3, [r7, #15]
}
 800e116:	4618      	mov	r0, r3
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	58024400 	.word	0x58024400
 800e124:	ffff0007 	.word	0xffff0007

0800e128 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e128:	b580      	push	{r7, lr}
 800e12a:	b084      	sub	sp, #16
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
 800e130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e132:	2300      	movs	r3, #0
 800e134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e136:	4b53      	ldr	r3, [pc, #332]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e13a:	f003 0303 	and.w	r3, r3, #3
 800e13e:	2b03      	cmp	r3, #3
 800e140:	d101      	bne.n	800e146 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	e099      	b.n	800e27a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e146:	4b4f      	ldr	r3, [pc, #316]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	4a4e      	ldr	r2, [pc, #312]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e14c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e152:	f7f6 f82d 	bl	80041b0 <HAL_GetTick>
 800e156:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e158:	e008      	b.n	800e16c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e15a:	f7f6 f829 	bl	80041b0 <HAL_GetTick>
 800e15e:	4602      	mov	r2, r0
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	1ad3      	subs	r3, r2, r3
 800e164:	2b02      	cmp	r3, #2
 800e166:	d901      	bls.n	800e16c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e168:	2303      	movs	r3, #3
 800e16a:	e086      	b.n	800e27a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e16c:	4b45      	ldr	r3, [pc, #276]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e16e:	681b      	ldr	r3, [r3, #0]
 800e170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e174:	2b00      	cmp	r3, #0
 800e176:	d1f0      	bne.n	800e15a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e178:	4b42      	ldr	r3, [pc, #264]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e17c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	051b      	lsls	r3, r3, #20
 800e186:	493f      	ldr	r1, [pc, #252]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e188:	4313      	orrs	r3, r2
 800e18a:	628b      	str	r3, [r1, #40]	@ 0x28
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	685b      	ldr	r3, [r3, #4]
 800e190:	3b01      	subs	r3, #1
 800e192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	689b      	ldr	r3, [r3, #8]
 800e19a:	3b01      	subs	r3, #1
 800e19c:	025b      	lsls	r3, r3, #9
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	431a      	orrs	r2, r3
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	3b01      	subs	r3, #1
 800e1a8:	041b      	lsls	r3, r3, #16
 800e1aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e1ae:	431a      	orrs	r2, r3
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	691b      	ldr	r3, [r3, #16]
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	061b      	lsls	r3, r3, #24
 800e1b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e1bc:	4931      	ldr	r1, [pc, #196]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e1be:	4313      	orrs	r3, r2
 800e1c0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e1c2:	4b30      	ldr	r3, [pc, #192]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	695b      	ldr	r3, [r3, #20]
 800e1ce:	492d      	ldr	r1, [pc, #180]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e1d0:	4313      	orrs	r3, r2
 800e1d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e1d4:	4b2b      	ldr	r3, [pc, #172]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	699b      	ldr	r3, [r3, #24]
 800e1e0:	4928      	ldr	r1, [pc, #160]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e1e2:	4313      	orrs	r3, r2
 800e1e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e1e6:	4b27      	ldr	r3, [pc, #156]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e1e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1ea:	4a26      	ldr	r2, [pc, #152]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e1ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e1f2:	4b24      	ldr	r3, [pc, #144]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e1f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e1f6:	4b24      	ldr	r3, [pc, #144]	@ (800e288 <RCCEx_PLL3_Config+0x160>)
 800e1f8:	4013      	ands	r3, r2
 800e1fa:	687a      	ldr	r2, [r7, #4]
 800e1fc:	69d2      	ldr	r2, [r2, #28]
 800e1fe:	00d2      	lsls	r2, r2, #3
 800e200:	4920      	ldr	r1, [pc, #128]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e202:	4313      	orrs	r3, r2
 800e204:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e206:	4b1f      	ldr	r3, [pc, #124]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e20a:	4a1e      	ldr	r2, [pc, #120]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e20c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e212:	683b      	ldr	r3, [r7, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d106      	bne.n	800e226 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e218:	4b1a      	ldr	r3, [pc, #104]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e21c:	4a19      	ldr	r2, [pc, #100]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e21e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e222:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e224:	e00f      	b.n	800e246 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d106      	bne.n	800e23a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e22c:	4b15      	ldr	r3, [pc, #84]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e230:	4a14      	ldr	r2, [pc, #80]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e232:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e238:	e005      	b.n	800e246 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e23a:	4b12      	ldr	r3, [pc, #72]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e23e:	4a11      	ldr	r2, [pc, #68]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e240:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e244:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e246:	4b0f      	ldr	r3, [pc, #60]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4a0e      	ldr	r2, [pc, #56]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e24c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e252:	f7f5 ffad 	bl	80041b0 <HAL_GetTick>
 800e256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e258:	e008      	b.n	800e26c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e25a:	f7f5 ffa9 	bl	80041b0 <HAL_GetTick>
 800e25e:	4602      	mov	r2, r0
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	1ad3      	subs	r3, r2, r3
 800e264:	2b02      	cmp	r3, #2
 800e266:	d901      	bls.n	800e26c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e268:	2303      	movs	r3, #3
 800e26a:	e006      	b.n	800e27a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e26c:	4b05      	ldr	r3, [pc, #20]	@ (800e284 <RCCEx_PLL3_Config+0x15c>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e274:	2b00      	cmp	r3, #0
 800e276:	d0f0      	beq.n	800e25a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e278:	7bfb      	ldrb	r3, [r7, #15]
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3710      	adds	r7, #16
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}
 800e282:	bf00      	nop
 800e284:	58024400 	.word	0x58024400
 800e288:	ffff0007 	.word	0xffff0007

0800e28c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d101      	bne.n	800e29e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e29a:	2301      	movs	r3, #1
 800e29c:	e049      	b.n	800e332 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2a4:	b2db      	uxtb	r3, r3
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d106      	bne.n	800e2b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f7f5 f82c 	bl	8003310 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2202      	movs	r2, #2
 800e2bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	4610      	mov	r0, r2
 800e2cc:	f000 fc34 	bl	800eb38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2201      	movs	r2, #1
 800e2d4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2201      	movs	r2, #1
 800e2dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	2201      	movs	r2, #1
 800e2f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2201      	movs	r2, #1
 800e304:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	2201      	movs	r2, #1
 800e30c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2201      	movs	r2, #1
 800e31c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2201      	movs	r2, #1
 800e32c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	3708      	adds	r7, #8
 800e336:	46bd      	mov	sp, r7
 800e338:	bd80      	pop	{r7, pc}
	...

0800e33c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e33c:	b480      	push	{r7}
 800e33e:	b085      	sub	sp, #20
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e34a:	b2db      	uxtb	r3, r3
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d001      	beq.n	800e354 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e350:	2301      	movs	r3, #1
 800e352:	e056      	b.n	800e402 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2202      	movs	r2, #2
 800e358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	4a2b      	ldr	r2, [pc, #172]	@ (800e410 <HAL_TIM_Base_Start+0xd4>)
 800e362:	4293      	cmp	r3, r2
 800e364:	d02c      	beq.n	800e3c0 <HAL_TIM_Base_Start+0x84>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e36e:	d027      	beq.n	800e3c0 <HAL_TIM_Base_Start+0x84>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	4a27      	ldr	r2, [pc, #156]	@ (800e414 <HAL_TIM_Base_Start+0xd8>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d022      	beq.n	800e3c0 <HAL_TIM_Base_Start+0x84>
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	4a26      	ldr	r2, [pc, #152]	@ (800e418 <HAL_TIM_Base_Start+0xdc>)
 800e380:	4293      	cmp	r3, r2
 800e382:	d01d      	beq.n	800e3c0 <HAL_TIM_Base_Start+0x84>
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	4a24      	ldr	r2, [pc, #144]	@ (800e41c <HAL_TIM_Base_Start+0xe0>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d018      	beq.n	800e3c0 <HAL_TIM_Base_Start+0x84>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4a23      	ldr	r2, [pc, #140]	@ (800e420 <HAL_TIM_Base_Start+0xe4>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d013      	beq.n	800e3c0 <HAL_TIM_Base_Start+0x84>
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a21      	ldr	r2, [pc, #132]	@ (800e424 <HAL_TIM_Base_Start+0xe8>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d00e      	beq.n	800e3c0 <HAL_TIM_Base_Start+0x84>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	4a20      	ldr	r2, [pc, #128]	@ (800e428 <HAL_TIM_Base_Start+0xec>)
 800e3a8:	4293      	cmp	r3, r2
 800e3aa:	d009      	beq.n	800e3c0 <HAL_TIM_Base_Start+0x84>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a1e      	ldr	r2, [pc, #120]	@ (800e42c <HAL_TIM_Base_Start+0xf0>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d004      	beq.n	800e3c0 <HAL_TIM_Base_Start+0x84>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a1d      	ldr	r2, [pc, #116]	@ (800e430 <HAL_TIM_Base_Start+0xf4>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d115      	bne.n	800e3ec <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	689a      	ldr	r2, [r3, #8]
 800e3c6:	4b1b      	ldr	r3, [pc, #108]	@ (800e434 <HAL_TIM_Base_Start+0xf8>)
 800e3c8:	4013      	ands	r3, r2
 800e3ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b06      	cmp	r3, #6
 800e3d0:	d015      	beq.n	800e3fe <HAL_TIM_Base_Start+0xc2>
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e3d8:	d011      	beq.n	800e3fe <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f042 0201 	orr.w	r2, r2, #1
 800e3e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3ea:	e008      	b.n	800e3fe <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f042 0201 	orr.w	r2, r2, #1
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	e000      	b.n	800e400 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3714      	adds	r7, #20
 800e406:	46bd      	mov	sp, r7
 800e408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40c:	4770      	bx	lr
 800e40e:	bf00      	nop
 800e410:	40010000 	.word	0x40010000
 800e414:	40000400 	.word	0x40000400
 800e418:	40000800 	.word	0x40000800
 800e41c:	40000c00 	.word	0x40000c00
 800e420:	40010400 	.word	0x40010400
 800e424:	40001800 	.word	0x40001800
 800e428:	40014000 	.word	0x40014000
 800e42c:	4000e000 	.word	0x4000e000
 800e430:	4000e400 	.word	0x4000e400
 800e434:	00010007 	.word	0x00010007

0800e438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d101      	bne.n	800e44a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e446:	2301      	movs	r3, #1
 800e448:	e049      	b.n	800e4de <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e450:	b2db      	uxtb	r3, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	d106      	bne.n	800e464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	2200      	movs	r2, #0
 800e45a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e45e:	6878      	ldr	r0, [r7, #4]
 800e460:	f7f4 ff90 	bl	8003384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2202      	movs	r2, #2
 800e468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681a      	ldr	r2, [r3, #0]
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	3304      	adds	r3, #4
 800e474:	4619      	mov	r1, r3
 800e476:	4610      	mov	r0, r2
 800e478:	f000 fb5e 	bl	800eb38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	2201      	movs	r2, #1
 800e480:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2201      	movs	r2, #1
 800e488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2201      	movs	r2, #1
 800e490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2201      	movs	r2, #1
 800e498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2201      	movs	r2, #1
 800e4b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	2201      	movs	r2, #1
 800e4c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2201      	movs	r2, #1
 800e4c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
	...

0800e4e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e4f2:	683b      	ldr	r3, [r7, #0]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d109      	bne.n	800e50c <HAL_TIM_PWM_Start+0x24>
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e4fe:	b2db      	uxtb	r3, r3
 800e500:	2b01      	cmp	r3, #1
 800e502:	bf14      	ite	ne
 800e504:	2301      	movne	r3, #1
 800e506:	2300      	moveq	r3, #0
 800e508:	b2db      	uxtb	r3, r3
 800e50a:	e03c      	b.n	800e586 <HAL_TIM_PWM_Start+0x9e>
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	2b04      	cmp	r3, #4
 800e510:	d109      	bne.n	800e526 <HAL_TIM_PWM_Start+0x3e>
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e518:	b2db      	uxtb	r3, r3
 800e51a:	2b01      	cmp	r3, #1
 800e51c:	bf14      	ite	ne
 800e51e:	2301      	movne	r3, #1
 800e520:	2300      	moveq	r3, #0
 800e522:	b2db      	uxtb	r3, r3
 800e524:	e02f      	b.n	800e586 <HAL_TIM_PWM_Start+0x9e>
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	2b08      	cmp	r3, #8
 800e52a:	d109      	bne.n	800e540 <HAL_TIM_PWM_Start+0x58>
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b01      	cmp	r3, #1
 800e536:	bf14      	ite	ne
 800e538:	2301      	movne	r3, #1
 800e53a:	2300      	moveq	r3, #0
 800e53c:	b2db      	uxtb	r3, r3
 800e53e:	e022      	b.n	800e586 <HAL_TIM_PWM_Start+0x9e>
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	2b0c      	cmp	r3, #12
 800e544:	d109      	bne.n	800e55a <HAL_TIM_PWM_Start+0x72>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e54c:	b2db      	uxtb	r3, r3
 800e54e:	2b01      	cmp	r3, #1
 800e550:	bf14      	ite	ne
 800e552:	2301      	movne	r3, #1
 800e554:	2300      	moveq	r3, #0
 800e556:	b2db      	uxtb	r3, r3
 800e558:	e015      	b.n	800e586 <HAL_TIM_PWM_Start+0x9e>
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	2b10      	cmp	r3, #16
 800e55e:	d109      	bne.n	800e574 <HAL_TIM_PWM_Start+0x8c>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e566:	b2db      	uxtb	r3, r3
 800e568:	2b01      	cmp	r3, #1
 800e56a:	bf14      	ite	ne
 800e56c:	2301      	movne	r3, #1
 800e56e:	2300      	moveq	r3, #0
 800e570:	b2db      	uxtb	r3, r3
 800e572:	e008      	b.n	800e586 <HAL_TIM_PWM_Start+0x9e>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	2b01      	cmp	r3, #1
 800e57e:	bf14      	ite	ne
 800e580:	2301      	movne	r3, #1
 800e582:	2300      	moveq	r3, #0
 800e584:	b2db      	uxtb	r3, r3
 800e586:	2b00      	cmp	r3, #0
 800e588:	d001      	beq.n	800e58e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	e0ab      	b.n	800e6e6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	2b00      	cmp	r3, #0
 800e592:	d104      	bne.n	800e59e <HAL_TIM_PWM_Start+0xb6>
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2202      	movs	r2, #2
 800e598:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e59c:	e023      	b.n	800e5e6 <HAL_TIM_PWM_Start+0xfe>
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	2b04      	cmp	r3, #4
 800e5a2:	d104      	bne.n	800e5ae <HAL_TIM_PWM_Start+0xc6>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2202      	movs	r2, #2
 800e5a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e5ac:	e01b      	b.n	800e5e6 <HAL_TIM_PWM_Start+0xfe>
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b08      	cmp	r3, #8
 800e5b2:	d104      	bne.n	800e5be <HAL_TIM_PWM_Start+0xd6>
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2202      	movs	r2, #2
 800e5b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e5bc:	e013      	b.n	800e5e6 <HAL_TIM_PWM_Start+0xfe>
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	2b0c      	cmp	r3, #12
 800e5c2:	d104      	bne.n	800e5ce <HAL_TIM_PWM_Start+0xe6>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2202      	movs	r2, #2
 800e5c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800e5cc:	e00b      	b.n	800e5e6 <HAL_TIM_PWM_Start+0xfe>
 800e5ce:	683b      	ldr	r3, [r7, #0]
 800e5d0:	2b10      	cmp	r3, #16
 800e5d2:	d104      	bne.n	800e5de <HAL_TIM_PWM_Start+0xf6>
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	2202      	movs	r2, #2
 800e5d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e5dc:	e003      	b.n	800e5e6 <HAL_TIM_PWM_Start+0xfe>
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2202      	movs	r2, #2
 800e5e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	6839      	ldr	r1, [r7, #0]
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f000 fec8 	bl	800f384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a3d      	ldr	r2, [pc, #244]	@ (800e6f0 <HAL_TIM_PWM_Start+0x208>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d013      	beq.n	800e626 <HAL_TIM_PWM_Start+0x13e>
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a3c      	ldr	r2, [pc, #240]	@ (800e6f4 <HAL_TIM_PWM_Start+0x20c>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d00e      	beq.n	800e626 <HAL_TIM_PWM_Start+0x13e>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a3a      	ldr	r2, [pc, #232]	@ (800e6f8 <HAL_TIM_PWM_Start+0x210>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d009      	beq.n	800e626 <HAL_TIM_PWM_Start+0x13e>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a39      	ldr	r2, [pc, #228]	@ (800e6fc <HAL_TIM_PWM_Start+0x214>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d004      	beq.n	800e626 <HAL_TIM_PWM_Start+0x13e>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a37      	ldr	r2, [pc, #220]	@ (800e700 <HAL_TIM_PWM_Start+0x218>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d101      	bne.n	800e62a <HAL_TIM_PWM_Start+0x142>
 800e626:	2301      	movs	r3, #1
 800e628:	e000      	b.n	800e62c <HAL_TIM_PWM_Start+0x144>
 800e62a:	2300      	movs	r3, #0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d007      	beq.n	800e640 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e63e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	4a2a      	ldr	r2, [pc, #168]	@ (800e6f0 <HAL_TIM_PWM_Start+0x208>)
 800e646:	4293      	cmp	r3, r2
 800e648:	d02c      	beq.n	800e6a4 <HAL_TIM_PWM_Start+0x1bc>
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e652:	d027      	beq.n	800e6a4 <HAL_TIM_PWM_Start+0x1bc>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	4a2a      	ldr	r2, [pc, #168]	@ (800e704 <HAL_TIM_PWM_Start+0x21c>)
 800e65a:	4293      	cmp	r3, r2
 800e65c:	d022      	beq.n	800e6a4 <HAL_TIM_PWM_Start+0x1bc>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a29      	ldr	r2, [pc, #164]	@ (800e708 <HAL_TIM_PWM_Start+0x220>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d01d      	beq.n	800e6a4 <HAL_TIM_PWM_Start+0x1bc>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a27      	ldr	r2, [pc, #156]	@ (800e70c <HAL_TIM_PWM_Start+0x224>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d018      	beq.n	800e6a4 <HAL_TIM_PWM_Start+0x1bc>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a1f      	ldr	r2, [pc, #124]	@ (800e6f4 <HAL_TIM_PWM_Start+0x20c>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d013      	beq.n	800e6a4 <HAL_TIM_PWM_Start+0x1bc>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a23      	ldr	r2, [pc, #140]	@ (800e710 <HAL_TIM_PWM_Start+0x228>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d00e      	beq.n	800e6a4 <HAL_TIM_PWM_Start+0x1bc>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a1b      	ldr	r2, [pc, #108]	@ (800e6f8 <HAL_TIM_PWM_Start+0x210>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d009      	beq.n	800e6a4 <HAL_TIM_PWM_Start+0x1bc>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a1f      	ldr	r2, [pc, #124]	@ (800e714 <HAL_TIM_PWM_Start+0x22c>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d004      	beq.n	800e6a4 <HAL_TIM_PWM_Start+0x1bc>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a1e      	ldr	r2, [pc, #120]	@ (800e718 <HAL_TIM_PWM_Start+0x230>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d115      	bne.n	800e6d0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	689a      	ldr	r2, [r3, #8]
 800e6aa:	4b1c      	ldr	r3, [pc, #112]	@ (800e71c <HAL_TIM_PWM_Start+0x234>)
 800e6ac:	4013      	ands	r3, r2
 800e6ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2b06      	cmp	r3, #6
 800e6b4:	d015      	beq.n	800e6e2 <HAL_TIM_PWM_Start+0x1fa>
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e6bc:	d011      	beq.n	800e6e2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	681a      	ldr	r2, [r3, #0]
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	f042 0201 	orr.w	r2, r2, #1
 800e6cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6ce:	e008      	b.n	800e6e2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	681a      	ldr	r2, [r3, #0]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	f042 0201 	orr.w	r2, r2, #1
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	e000      	b.n	800e6e4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3710      	adds	r7, #16
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	40010000 	.word	0x40010000
 800e6f4:	40010400 	.word	0x40010400
 800e6f8:	40014000 	.word	0x40014000
 800e6fc:	40014400 	.word	0x40014400
 800e700:	40014800 	.word	0x40014800
 800e704:	40000400 	.word	0x40000400
 800e708:	40000800 	.word	0x40000800
 800e70c:	40000c00 	.word	0x40000c00
 800e710:	40001800 	.word	0x40001800
 800e714:	4000e000 	.word	0x4000e000
 800e718:	4000e400 	.word	0x4000e400
 800e71c:	00010007 	.word	0x00010007

0800e720 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b086      	sub	sp, #24
 800e724:	af00      	add	r7, sp, #0
 800e726:	60f8      	str	r0, [r7, #12]
 800e728:	60b9      	str	r1, [r7, #8]
 800e72a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e72c:	2300      	movs	r3, #0
 800e72e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e736:	2b01      	cmp	r3, #1
 800e738:	d101      	bne.n	800e73e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e73a:	2302      	movs	r3, #2
 800e73c:	e0ff      	b.n	800e93e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2201      	movs	r2, #1
 800e742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b14      	cmp	r3, #20
 800e74a:	f200 80f0 	bhi.w	800e92e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800e74e:	a201      	add	r2, pc, #4	@ (adr r2, 800e754 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e754:	0800e7a9 	.word	0x0800e7a9
 800e758:	0800e92f 	.word	0x0800e92f
 800e75c:	0800e92f 	.word	0x0800e92f
 800e760:	0800e92f 	.word	0x0800e92f
 800e764:	0800e7e9 	.word	0x0800e7e9
 800e768:	0800e92f 	.word	0x0800e92f
 800e76c:	0800e92f 	.word	0x0800e92f
 800e770:	0800e92f 	.word	0x0800e92f
 800e774:	0800e82b 	.word	0x0800e82b
 800e778:	0800e92f 	.word	0x0800e92f
 800e77c:	0800e92f 	.word	0x0800e92f
 800e780:	0800e92f 	.word	0x0800e92f
 800e784:	0800e86b 	.word	0x0800e86b
 800e788:	0800e92f 	.word	0x0800e92f
 800e78c:	0800e92f 	.word	0x0800e92f
 800e790:	0800e92f 	.word	0x0800e92f
 800e794:	0800e8ad 	.word	0x0800e8ad
 800e798:	0800e92f 	.word	0x0800e92f
 800e79c:	0800e92f 	.word	0x0800e92f
 800e7a0:	0800e92f 	.word	0x0800e92f
 800e7a4:	0800e8ed 	.word	0x0800e8ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	68b9      	ldr	r1, [r7, #8]
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	f000 fa74 	bl	800ec9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	699a      	ldr	r2, [r3, #24]
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f042 0208 	orr.w	r2, r2, #8
 800e7c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	699a      	ldr	r2, [r3, #24]
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f022 0204 	bic.w	r2, r2, #4
 800e7d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	6999      	ldr	r1, [r3, #24]
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	691a      	ldr	r2, [r3, #16]
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	430a      	orrs	r2, r1
 800e7e4:	619a      	str	r2, [r3, #24]
      break;
 800e7e6:	e0a5      	b.n	800e934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	68b9      	ldr	r1, [r7, #8]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f000 fae4 	bl	800edbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	699a      	ldr	r2, [r3, #24]
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	699a      	ldr	r2, [r3, #24]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	6999      	ldr	r1, [r3, #24]
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	691b      	ldr	r3, [r3, #16]
 800e81e:	021a      	lsls	r2, r3, #8
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	430a      	orrs	r2, r1
 800e826:	619a      	str	r2, [r3, #24]
      break;
 800e828:	e084      	b.n	800e934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68b9      	ldr	r1, [r7, #8]
 800e830:	4618      	mov	r0, r3
 800e832:	f000 fb4d 	bl	800eed0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	69da      	ldr	r2, [r3, #28]
 800e83c:	68fb      	ldr	r3, [r7, #12]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f042 0208 	orr.w	r2, r2, #8
 800e844:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	69da      	ldr	r2, [r3, #28]
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f022 0204 	bic.w	r2, r2, #4
 800e854:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	69d9      	ldr	r1, [r3, #28]
 800e85c:	68bb      	ldr	r3, [r7, #8]
 800e85e:	691a      	ldr	r2, [r3, #16]
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	430a      	orrs	r2, r1
 800e866:	61da      	str	r2, [r3, #28]
      break;
 800e868:	e064      	b.n	800e934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	68b9      	ldr	r1, [r7, #8]
 800e870:	4618      	mov	r0, r3
 800e872:	f000 fbb5 	bl	800efe0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	69da      	ldr	r2, [r3, #28]
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	69da      	ldr	r2, [r3, #28]
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	69d9      	ldr	r1, [r3, #28]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	691b      	ldr	r3, [r3, #16]
 800e8a0:	021a      	lsls	r2, r3, #8
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	430a      	orrs	r2, r1
 800e8a8:	61da      	str	r2, [r3, #28]
      break;
 800e8aa:	e043      	b.n	800e934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	68b9      	ldr	r1, [r7, #8]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f000 fbfe 	bl	800f0b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	f042 0208 	orr.w	r2, r2, #8
 800e8c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	f022 0204 	bic.w	r2, r2, #4
 800e8d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	691a      	ldr	r2, [r3, #16]
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	430a      	orrs	r2, r1
 800e8e8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e8ea:	e023      	b.n	800e934 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	68b9      	ldr	r1, [r7, #8]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	f000 fc42 	bl	800f17c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e906:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e916:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800e91e:	68bb      	ldr	r3, [r7, #8]
 800e920:	691b      	ldr	r3, [r3, #16]
 800e922:	021a      	lsls	r2, r3, #8
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	430a      	orrs	r2, r1
 800e92a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800e92c:	e002      	b.n	800e934 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800e92e:	2301      	movs	r3, #1
 800e930:	75fb      	strb	r3, [r7, #23]
      break;
 800e932:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	2200      	movs	r2, #0
 800e938:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3718      	adds	r7, #24
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}
 800e946:	bf00      	nop

0800e948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b084      	sub	sp, #16
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e952:	2300      	movs	r3, #0
 800e954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d101      	bne.n	800e964 <HAL_TIM_ConfigClockSource+0x1c>
 800e960:	2302      	movs	r3, #2
 800e962:	e0dc      	b.n	800eb1e <HAL_TIM_ConfigClockSource+0x1d6>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2201      	movs	r2, #1
 800e968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2202      	movs	r2, #2
 800e970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	4b6a      	ldr	r3, [pc, #424]	@ (800eb28 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e980:	4013      	ands	r3, r2
 800e982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e98a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	68ba      	ldr	r2, [r7, #8]
 800e992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	4a64      	ldr	r2, [pc, #400]	@ (800eb2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800e99a:	4293      	cmp	r3, r2
 800e99c:	f000 80a9 	beq.w	800eaf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e9a0:	4a62      	ldr	r2, [pc, #392]	@ (800eb2c <HAL_TIM_ConfigClockSource+0x1e4>)
 800e9a2:	4293      	cmp	r3, r2
 800e9a4:	f200 80ae 	bhi.w	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9a8:	4a61      	ldr	r2, [pc, #388]	@ (800eb30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	f000 80a1 	beq.w	800eaf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e9b0:	4a5f      	ldr	r2, [pc, #380]	@ (800eb30 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	f200 80a6 	bhi.w	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9b8:	4a5e      	ldr	r2, [pc, #376]	@ (800eb34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	f000 8099 	beq.w	800eaf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e9c0:	4a5c      	ldr	r2, [pc, #368]	@ (800eb34 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	f200 809e 	bhi.w	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e9cc:	f000 8091 	beq.w	800eaf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e9d0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800e9d4:	f200 8096 	bhi.w	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e9dc:	f000 8089 	beq.w	800eaf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800e9e0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e9e4:	f200 808e 	bhi.w	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e9ec:	d03e      	beq.n	800ea6c <HAL_TIM_ConfigClockSource+0x124>
 800e9ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e9f2:	f200 8087 	bhi.w	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800e9f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9fa:	f000 8086 	beq.w	800eb0a <HAL_TIM_ConfigClockSource+0x1c2>
 800e9fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ea02:	d87f      	bhi.n	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea04:	2b70      	cmp	r3, #112	@ 0x70
 800ea06:	d01a      	beq.n	800ea3e <HAL_TIM_ConfigClockSource+0xf6>
 800ea08:	2b70      	cmp	r3, #112	@ 0x70
 800ea0a:	d87b      	bhi.n	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea0c:	2b60      	cmp	r3, #96	@ 0x60
 800ea0e:	d050      	beq.n	800eab2 <HAL_TIM_ConfigClockSource+0x16a>
 800ea10:	2b60      	cmp	r3, #96	@ 0x60
 800ea12:	d877      	bhi.n	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea14:	2b50      	cmp	r3, #80	@ 0x50
 800ea16:	d03c      	beq.n	800ea92 <HAL_TIM_ConfigClockSource+0x14a>
 800ea18:	2b50      	cmp	r3, #80	@ 0x50
 800ea1a:	d873      	bhi.n	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea1c:	2b40      	cmp	r3, #64	@ 0x40
 800ea1e:	d058      	beq.n	800ead2 <HAL_TIM_ConfigClockSource+0x18a>
 800ea20:	2b40      	cmp	r3, #64	@ 0x40
 800ea22:	d86f      	bhi.n	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea24:	2b30      	cmp	r3, #48	@ 0x30
 800ea26:	d064      	beq.n	800eaf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea28:	2b30      	cmp	r3, #48	@ 0x30
 800ea2a:	d86b      	bhi.n	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea2c:	2b20      	cmp	r3, #32
 800ea2e:	d060      	beq.n	800eaf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea30:	2b20      	cmp	r3, #32
 800ea32:	d867      	bhi.n	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d05c      	beq.n	800eaf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea38:	2b10      	cmp	r3, #16
 800ea3a:	d05a      	beq.n	800eaf2 <HAL_TIM_ConfigClockSource+0x1aa>
 800ea3c:	e062      	b.n	800eb04 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea4e:	f000 fc79 	bl	800f344 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ea60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68ba      	ldr	r2, [r7, #8]
 800ea68:	609a      	str	r2, [r3, #8]
      break;
 800ea6a:	e04f      	b.n	800eb0c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ea7c:	f000 fc62 	bl	800f344 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	689a      	ldr	r2, [r3, #8]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ea8e:	609a      	str	r2, [r3, #8]
      break;
 800ea90:	e03c      	b.n	800eb0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	f000 fbd2 	bl	800f248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2150      	movs	r1, #80	@ 0x50
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f000 fc2c 	bl	800f308 <TIM_ITRx_SetConfig>
      break;
 800eab0:	e02c      	b.n	800eb0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800eab6:	683b      	ldr	r3, [r7, #0]
 800eab8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800eabe:	461a      	mov	r2, r3
 800eac0:	f000 fbf1 	bl	800f2a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	2160      	movs	r1, #96	@ 0x60
 800eaca:	4618      	mov	r0, r3
 800eacc:	f000 fc1c 	bl	800f308 <TIM_ITRx_SetConfig>
      break;
 800ead0:	e01c      	b.n	800eb0c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eade:	461a      	mov	r2, r3
 800eae0:	f000 fbb2 	bl	800f248 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	2140      	movs	r1, #64	@ 0x40
 800eaea:	4618      	mov	r0, r3
 800eaec:	f000 fc0c 	bl	800f308 <TIM_ITRx_SetConfig>
      break;
 800eaf0:	e00c      	b.n	800eb0c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4619      	mov	r1, r3
 800eafc:	4610      	mov	r0, r2
 800eafe:	f000 fc03 	bl	800f308 <TIM_ITRx_SetConfig>
      break;
 800eb02:	e003      	b.n	800eb0c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800eb04:	2301      	movs	r3, #1
 800eb06:	73fb      	strb	r3, [r7, #15]
      break;
 800eb08:	e000      	b.n	800eb0c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800eb0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2200      	movs	r2, #0
 800eb18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eb1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	3710      	adds	r7, #16
 800eb22:	46bd      	mov	sp, r7
 800eb24:	bd80      	pop	{r7, pc}
 800eb26:	bf00      	nop
 800eb28:	ffceff88 	.word	0xffceff88
 800eb2c:	00100040 	.word	0x00100040
 800eb30:	00100030 	.word	0x00100030
 800eb34:	00100020 	.word	0x00100020

0800eb38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b085      	sub	sp, #20
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	4a4a      	ldr	r2, [pc, #296]	@ (800ec74 <TIM_Base_SetConfig+0x13c>)
 800eb4c:	4293      	cmp	r3, r2
 800eb4e:	d013      	beq.n	800eb78 <TIM_Base_SetConfig+0x40>
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb56:	d00f      	beq.n	800eb78 <TIM_Base_SetConfig+0x40>
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	4a47      	ldr	r2, [pc, #284]	@ (800ec78 <TIM_Base_SetConfig+0x140>)
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d00b      	beq.n	800eb78 <TIM_Base_SetConfig+0x40>
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4a46      	ldr	r2, [pc, #280]	@ (800ec7c <TIM_Base_SetConfig+0x144>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d007      	beq.n	800eb78 <TIM_Base_SetConfig+0x40>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a45      	ldr	r2, [pc, #276]	@ (800ec80 <TIM_Base_SetConfig+0x148>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d003      	beq.n	800eb78 <TIM_Base_SetConfig+0x40>
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	4a44      	ldr	r2, [pc, #272]	@ (800ec84 <TIM_Base_SetConfig+0x14c>)
 800eb74:	4293      	cmp	r3, r2
 800eb76:	d108      	bne.n	800eb8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eb78:	68fb      	ldr	r3, [r7, #12]
 800eb7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800eb7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800eb80:	683b      	ldr	r3, [r7, #0]
 800eb82:	685b      	ldr	r3, [r3, #4]
 800eb84:	68fa      	ldr	r2, [r7, #12]
 800eb86:	4313      	orrs	r3, r2
 800eb88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	4a39      	ldr	r2, [pc, #228]	@ (800ec74 <TIM_Base_SetConfig+0x13c>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d027      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb98:	d023      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4a36      	ldr	r2, [pc, #216]	@ (800ec78 <TIM_Base_SetConfig+0x140>)
 800eb9e:	4293      	cmp	r3, r2
 800eba0:	d01f      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	4a35      	ldr	r2, [pc, #212]	@ (800ec7c <TIM_Base_SetConfig+0x144>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d01b      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4a34      	ldr	r2, [pc, #208]	@ (800ec80 <TIM_Base_SetConfig+0x148>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d017      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	4a33      	ldr	r2, [pc, #204]	@ (800ec84 <TIM_Base_SetConfig+0x14c>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d013      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	4a32      	ldr	r2, [pc, #200]	@ (800ec88 <TIM_Base_SetConfig+0x150>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d00f      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	4a31      	ldr	r2, [pc, #196]	@ (800ec8c <TIM_Base_SetConfig+0x154>)
 800ebc6:	4293      	cmp	r3, r2
 800ebc8:	d00b      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	4a30      	ldr	r2, [pc, #192]	@ (800ec90 <TIM_Base_SetConfig+0x158>)
 800ebce:	4293      	cmp	r3, r2
 800ebd0:	d007      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	4a2f      	ldr	r2, [pc, #188]	@ (800ec94 <TIM_Base_SetConfig+0x15c>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d003      	beq.n	800ebe2 <TIM_Base_SetConfig+0xaa>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	4a2e      	ldr	r2, [pc, #184]	@ (800ec98 <TIM_Base_SetConfig+0x160>)
 800ebde:	4293      	cmp	r3, r2
 800ebe0:	d108      	bne.n	800ebf4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ebe8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	68db      	ldr	r3, [r3, #12]
 800ebee:	68fa      	ldr	r2, [r7, #12]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	695b      	ldr	r3, [r3, #20]
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	689a      	ldr	r2, [r3, #8]
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ec10:	683b      	ldr	r3, [r7, #0]
 800ec12:	681a      	ldr	r2, [r3, #0]
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	4a16      	ldr	r2, [pc, #88]	@ (800ec74 <TIM_Base_SetConfig+0x13c>)
 800ec1c:	4293      	cmp	r3, r2
 800ec1e:	d00f      	beq.n	800ec40 <TIM_Base_SetConfig+0x108>
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	4a18      	ldr	r2, [pc, #96]	@ (800ec84 <TIM_Base_SetConfig+0x14c>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d00b      	beq.n	800ec40 <TIM_Base_SetConfig+0x108>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	4a17      	ldr	r2, [pc, #92]	@ (800ec88 <TIM_Base_SetConfig+0x150>)
 800ec2c:	4293      	cmp	r3, r2
 800ec2e:	d007      	beq.n	800ec40 <TIM_Base_SetConfig+0x108>
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	4a16      	ldr	r2, [pc, #88]	@ (800ec8c <TIM_Base_SetConfig+0x154>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	d003      	beq.n	800ec40 <TIM_Base_SetConfig+0x108>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	4a15      	ldr	r2, [pc, #84]	@ (800ec90 <TIM_Base_SetConfig+0x158>)
 800ec3c:	4293      	cmp	r3, r2
 800ec3e:	d103      	bne.n	800ec48 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	691a      	ldr	r2, [r3, #16]
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	691b      	ldr	r3, [r3, #16]
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d105      	bne.n	800ec66 <TIM_Base_SetConfig+0x12e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	f023 0201 	bic.w	r2, r3, #1
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	611a      	str	r2, [r3, #16]
  }
}
 800ec66:	bf00      	nop
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	40010000 	.word	0x40010000
 800ec78:	40000400 	.word	0x40000400
 800ec7c:	40000800 	.word	0x40000800
 800ec80:	40000c00 	.word	0x40000c00
 800ec84:	40010400 	.word	0x40010400
 800ec88:	40014000 	.word	0x40014000
 800ec8c:	40014400 	.word	0x40014400
 800ec90:	40014800 	.word	0x40014800
 800ec94:	4000e000 	.word	0x4000e000
 800ec98:	4000e400 	.word	0x4000e400

0800ec9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b087      	sub	sp, #28
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	6078      	str	r0, [r7, #4]
 800eca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6a1b      	ldr	r3, [r3, #32]
 800ecaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6a1b      	ldr	r3, [r3, #32]
 800ecb0:	f023 0201 	bic.w	r2, r3, #1
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	699b      	ldr	r3, [r3, #24]
 800ecc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ecc4:	68fa      	ldr	r2, [r7, #12]
 800ecc6:	4b37      	ldr	r3, [pc, #220]	@ (800eda4 <TIM_OC1_SetConfig+0x108>)
 800ecc8:	4013      	ands	r3, r2
 800ecca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	f023 0303 	bic.w	r3, r3, #3
 800ecd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	68fa      	ldr	r2, [r7, #12]
 800ecda:	4313      	orrs	r3, r2
 800ecdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	f023 0302 	bic.w	r3, r3, #2
 800ece4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ece6:	683b      	ldr	r3, [r7, #0]
 800ece8:	689b      	ldr	r3, [r3, #8]
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	4313      	orrs	r3, r2
 800ecee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4a2d      	ldr	r2, [pc, #180]	@ (800eda8 <TIM_OC1_SetConfig+0x10c>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d00f      	beq.n	800ed18 <TIM_OC1_SetConfig+0x7c>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4a2c      	ldr	r2, [pc, #176]	@ (800edac <TIM_OC1_SetConfig+0x110>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d00b      	beq.n	800ed18 <TIM_OC1_SetConfig+0x7c>
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	4a2b      	ldr	r2, [pc, #172]	@ (800edb0 <TIM_OC1_SetConfig+0x114>)
 800ed04:	4293      	cmp	r3, r2
 800ed06:	d007      	beq.n	800ed18 <TIM_OC1_SetConfig+0x7c>
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4a2a      	ldr	r2, [pc, #168]	@ (800edb4 <TIM_OC1_SetConfig+0x118>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d003      	beq.n	800ed18 <TIM_OC1_SetConfig+0x7c>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	4a29      	ldr	r2, [pc, #164]	@ (800edb8 <TIM_OC1_SetConfig+0x11c>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d10c      	bne.n	800ed32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ed18:	697b      	ldr	r3, [r7, #20]
 800ed1a:	f023 0308 	bic.w	r3, r3, #8
 800ed1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	68db      	ldr	r3, [r3, #12]
 800ed24:	697a      	ldr	r2, [r7, #20]
 800ed26:	4313      	orrs	r3, r2
 800ed28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	f023 0304 	bic.w	r3, r3, #4
 800ed30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4a1c      	ldr	r2, [pc, #112]	@ (800eda8 <TIM_OC1_SetConfig+0x10c>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d00f      	beq.n	800ed5a <TIM_OC1_SetConfig+0xbe>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a1b      	ldr	r2, [pc, #108]	@ (800edac <TIM_OC1_SetConfig+0x110>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d00b      	beq.n	800ed5a <TIM_OC1_SetConfig+0xbe>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4a1a      	ldr	r2, [pc, #104]	@ (800edb0 <TIM_OC1_SetConfig+0x114>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d007      	beq.n	800ed5a <TIM_OC1_SetConfig+0xbe>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4a19      	ldr	r2, [pc, #100]	@ (800edb4 <TIM_OC1_SetConfig+0x118>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d003      	beq.n	800ed5a <TIM_OC1_SetConfig+0xbe>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4a18      	ldr	r2, [pc, #96]	@ (800edb8 <TIM_OC1_SetConfig+0x11c>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d111      	bne.n	800ed7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ed60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ed68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ed6a:	683b      	ldr	r3, [r7, #0]
 800ed6c:	695b      	ldr	r3, [r3, #20]
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	4313      	orrs	r3, r2
 800ed72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	699b      	ldr	r3, [r3, #24]
 800ed78:	693a      	ldr	r2, [r7, #16]
 800ed7a:	4313      	orrs	r3, r2
 800ed7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	693a      	ldr	r2, [r7, #16]
 800ed82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	68fa      	ldr	r2, [r7, #12]
 800ed88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ed8a:	683b      	ldr	r3, [r7, #0]
 800ed8c:	685a      	ldr	r2, [r3, #4]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	697a      	ldr	r2, [r7, #20]
 800ed96:	621a      	str	r2, [r3, #32]
}
 800ed98:	bf00      	nop
 800ed9a:	371c      	adds	r7, #28
 800ed9c:	46bd      	mov	sp, r7
 800ed9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda2:	4770      	bx	lr
 800eda4:	fffeff8f 	.word	0xfffeff8f
 800eda8:	40010000 	.word	0x40010000
 800edac:	40010400 	.word	0x40010400
 800edb0:	40014000 	.word	0x40014000
 800edb4:	40014400 	.word	0x40014400
 800edb8:	40014800 	.word	0x40014800

0800edbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800edbc:	b480      	push	{r7}
 800edbe:	b087      	sub	sp, #28
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
 800edc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	6a1b      	ldr	r3, [r3, #32]
 800edca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6a1b      	ldr	r3, [r3, #32]
 800edd0:	f023 0210 	bic.w	r2, r3, #16
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ede4:	68fa      	ldr	r2, [r7, #12]
 800ede6:	4b34      	ldr	r3, [pc, #208]	@ (800eeb8 <TIM_OC2_SetConfig+0xfc>)
 800ede8:	4013      	ands	r3, r2
 800edea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800edec:	68fb      	ldr	r3, [r7, #12]
 800edee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800edf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800edf4:	683b      	ldr	r3, [r7, #0]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	021b      	lsls	r3, r3, #8
 800edfa:	68fa      	ldr	r2, [r7, #12]
 800edfc:	4313      	orrs	r3, r2
 800edfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ee00:	697b      	ldr	r3, [r7, #20]
 800ee02:	f023 0320 	bic.w	r3, r3, #32
 800ee06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	011b      	lsls	r3, r3, #4
 800ee0e:	697a      	ldr	r2, [r7, #20]
 800ee10:	4313      	orrs	r3, r2
 800ee12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	4a29      	ldr	r2, [pc, #164]	@ (800eebc <TIM_OC2_SetConfig+0x100>)
 800ee18:	4293      	cmp	r3, r2
 800ee1a:	d003      	beq.n	800ee24 <TIM_OC2_SetConfig+0x68>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	4a28      	ldr	r2, [pc, #160]	@ (800eec0 <TIM_OC2_SetConfig+0x104>)
 800ee20:	4293      	cmp	r3, r2
 800ee22:	d10d      	bne.n	800ee40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ee2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	011b      	lsls	r3, r3, #4
 800ee32:	697a      	ldr	r2, [r7, #20]
 800ee34:	4313      	orrs	r3, r2
 800ee36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	4a1e      	ldr	r2, [pc, #120]	@ (800eebc <TIM_OC2_SetConfig+0x100>)
 800ee44:	4293      	cmp	r3, r2
 800ee46:	d00f      	beq.n	800ee68 <TIM_OC2_SetConfig+0xac>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a1d      	ldr	r2, [pc, #116]	@ (800eec0 <TIM_OC2_SetConfig+0x104>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d00b      	beq.n	800ee68 <TIM_OC2_SetConfig+0xac>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4a1c      	ldr	r2, [pc, #112]	@ (800eec4 <TIM_OC2_SetConfig+0x108>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d007      	beq.n	800ee68 <TIM_OC2_SetConfig+0xac>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4a1b      	ldr	r2, [pc, #108]	@ (800eec8 <TIM_OC2_SetConfig+0x10c>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d003      	beq.n	800ee68 <TIM_OC2_SetConfig+0xac>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	4a1a      	ldr	r2, [pc, #104]	@ (800eecc <TIM_OC2_SetConfig+0x110>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d113      	bne.n	800ee90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ee6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ee76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	695b      	ldr	r3, [r3, #20]
 800ee7c:	009b      	lsls	r3, r3, #2
 800ee7e:	693a      	ldr	r2, [r7, #16]
 800ee80:	4313      	orrs	r3, r2
 800ee82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	699b      	ldr	r3, [r3, #24]
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	693a      	ldr	r2, [r7, #16]
 800ee8c:	4313      	orrs	r3, r2
 800ee8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	693a      	ldr	r2, [r7, #16]
 800ee94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	68fa      	ldr	r2, [r7, #12]
 800ee9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	697a      	ldr	r2, [r7, #20]
 800eea8:	621a      	str	r2, [r3, #32]
}
 800eeaa:	bf00      	nop
 800eeac:	371c      	adds	r7, #28
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb4:	4770      	bx	lr
 800eeb6:	bf00      	nop
 800eeb8:	feff8fff 	.word	0xfeff8fff
 800eebc:	40010000 	.word	0x40010000
 800eec0:	40010400 	.word	0x40010400
 800eec4:	40014000 	.word	0x40014000
 800eec8:	40014400 	.word	0x40014400
 800eecc:	40014800 	.word	0x40014800

0800eed0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b087      	sub	sp, #28
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6a1b      	ldr	r3, [r3, #32]
 800eede:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	6a1b      	ldr	r3, [r3, #32]
 800eee4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	69db      	ldr	r3, [r3, #28]
 800eef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800eef8:	68fa      	ldr	r2, [r7, #12]
 800eefa:	4b33      	ldr	r3, [pc, #204]	@ (800efc8 <TIM_OC3_SetConfig+0xf8>)
 800eefc:	4013      	ands	r3, r2
 800eefe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	f023 0303 	bic.w	r3, r3, #3
 800ef06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ef12:	697b      	ldr	r3, [r7, #20]
 800ef14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ef18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	021b      	lsls	r3, r3, #8
 800ef20:	697a      	ldr	r2, [r7, #20]
 800ef22:	4313      	orrs	r3, r2
 800ef24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	4a28      	ldr	r2, [pc, #160]	@ (800efcc <TIM_OC3_SetConfig+0xfc>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d003      	beq.n	800ef36 <TIM_OC3_SetConfig+0x66>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	4a27      	ldr	r2, [pc, #156]	@ (800efd0 <TIM_OC3_SetConfig+0x100>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d10d      	bne.n	800ef52 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ef3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	021b      	lsls	r3, r3, #8
 800ef44:	697a      	ldr	r2, [r7, #20]
 800ef46:	4313      	orrs	r3, r2
 800ef48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ef50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	4a1d      	ldr	r2, [pc, #116]	@ (800efcc <TIM_OC3_SetConfig+0xfc>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d00f      	beq.n	800ef7a <TIM_OC3_SetConfig+0xaa>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	4a1c      	ldr	r2, [pc, #112]	@ (800efd0 <TIM_OC3_SetConfig+0x100>)
 800ef5e:	4293      	cmp	r3, r2
 800ef60:	d00b      	beq.n	800ef7a <TIM_OC3_SetConfig+0xaa>
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	4a1b      	ldr	r2, [pc, #108]	@ (800efd4 <TIM_OC3_SetConfig+0x104>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d007      	beq.n	800ef7a <TIM_OC3_SetConfig+0xaa>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	4a1a      	ldr	r2, [pc, #104]	@ (800efd8 <TIM_OC3_SetConfig+0x108>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d003      	beq.n	800ef7a <TIM_OC3_SetConfig+0xaa>
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	4a19      	ldr	r2, [pc, #100]	@ (800efdc <TIM_OC3_SetConfig+0x10c>)
 800ef76:	4293      	cmp	r3, r2
 800ef78:	d113      	bne.n	800efa2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ef7a:	693b      	ldr	r3, [r7, #16]
 800ef7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ef80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ef88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	695b      	ldr	r3, [r3, #20]
 800ef8e:	011b      	lsls	r3, r3, #4
 800ef90:	693a      	ldr	r2, [r7, #16]
 800ef92:	4313      	orrs	r3, r2
 800ef94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	699b      	ldr	r3, [r3, #24]
 800ef9a:	011b      	lsls	r3, r3, #4
 800ef9c:	693a      	ldr	r2, [r7, #16]
 800ef9e:	4313      	orrs	r3, r2
 800efa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	693a      	ldr	r2, [r7, #16]
 800efa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	68fa      	ldr	r2, [r7, #12]
 800efac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	685a      	ldr	r2, [r3, #4]
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	697a      	ldr	r2, [r7, #20]
 800efba:	621a      	str	r2, [r3, #32]
}
 800efbc:	bf00      	nop
 800efbe:	371c      	adds	r7, #28
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	fffeff8f 	.word	0xfffeff8f
 800efcc:	40010000 	.word	0x40010000
 800efd0:	40010400 	.word	0x40010400
 800efd4:	40014000 	.word	0x40014000
 800efd8:	40014400 	.word	0x40014400
 800efdc:	40014800 	.word	0x40014800

0800efe0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800efe0:	b480      	push	{r7}
 800efe2:	b087      	sub	sp, #28
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
 800efe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6a1b      	ldr	r3, [r3, #32]
 800efee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	6a1b      	ldr	r3, [r3, #32]
 800eff4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	69db      	ldr	r3, [r3, #28]
 800f006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f008:	68fa      	ldr	r2, [r7, #12]
 800f00a:	4b24      	ldr	r3, [pc, #144]	@ (800f09c <TIM_OC4_SetConfig+0xbc>)
 800f00c:	4013      	ands	r3, r2
 800f00e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	021b      	lsls	r3, r3, #8
 800f01e:	68fa      	ldr	r2, [r7, #12]
 800f020:	4313      	orrs	r3, r2
 800f022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f02a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f02c:	683b      	ldr	r3, [r7, #0]
 800f02e:	689b      	ldr	r3, [r3, #8]
 800f030:	031b      	lsls	r3, r3, #12
 800f032:	693a      	ldr	r2, [r7, #16]
 800f034:	4313      	orrs	r3, r2
 800f036:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	4a19      	ldr	r2, [pc, #100]	@ (800f0a0 <TIM_OC4_SetConfig+0xc0>)
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d00f      	beq.n	800f060 <TIM_OC4_SetConfig+0x80>
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	4a18      	ldr	r2, [pc, #96]	@ (800f0a4 <TIM_OC4_SetConfig+0xc4>)
 800f044:	4293      	cmp	r3, r2
 800f046:	d00b      	beq.n	800f060 <TIM_OC4_SetConfig+0x80>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	4a17      	ldr	r2, [pc, #92]	@ (800f0a8 <TIM_OC4_SetConfig+0xc8>)
 800f04c:	4293      	cmp	r3, r2
 800f04e:	d007      	beq.n	800f060 <TIM_OC4_SetConfig+0x80>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	4a16      	ldr	r2, [pc, #88]	@ (800f0ac <TIM_OC4_SetConfig+0xcc>)
 800f054:	4293      	cmp	r3, r2
 800f056:	d003      	beq.n	800f060 <TIM_OC4_SetConfig+0x80>
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4a15      	ldr	r2, [pc, #84]	@ (800f0b0 <TIM_OC4_SetConfig+0xd0>)
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d109      	bne.n	800f074 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f060:	697b      	ldr	r3, [r7, #20]
 800f062:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f066:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	695b      	ldr	r3, [r3, #20]
 800f06c:	019b      	lsls	r3, r3, #6
 800f06e:	697a      	ldr	r2, [r7, #20]
 800f070:	4313      	orrs	r3, r2
 800f072:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	697a      	ldr	r2, [r7, #20]
 800f078:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	68fa      	ldr	r2, [r7, #12]
 800f07e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	685a      	ldr	r2, [r3, #4]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	693a      	ldr	r2, [r7, #16]
 800f08c:	621a      	str	r2, [r3, #32]
}
 800f08e:	bf00      	nop
 800f090:	371c      	adds	r7, #28
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	feff8fff 	.word	0xfeff8fff
 800f0a0:	40010000 	.word	0x40010000
 800f0a4:	40010400 	.word	0x40010400
 800f0a8:	40014000 	.word	0x40014000
 800f0ac:	40014400 	.word	0x40014400
 800f0b0:	40014800 	.word	0x40014800

0800f0b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b087      	sub	sp, #28
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a1b      	ldr	r3, [r3, #32]
 800f0c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6a1b      	ldr	r3, [r3, #32]
 800f0c8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	685b      	ldr	r3, [r3, #4]
 800f0d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f0da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f0dc:	68fa      	ldr	r2, [r7, #12]
 800f0de:	4b21      	ldr	r3, [pc, #132]	@ (800f164 <TIM_OC5_SetConfig+0xb0>)
 800f0e0:	4013      	ands	r3, r2
 800f0e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	68fa      	ldr	r2, [r7, #12]
 800f0ea:	4313      	orrs	r3, r2
 800f0ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f0ee:	693b      	ldr	r3, [r7, #16]
 800f0f0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800f0f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	689b      	ldr	r3, [r3, #8]
 800f0fa:	041b      	lsls	r3, r3, #16
 800f0fc:	693a      	ldr	r2, [r7, #16]
 800f0fe:	4313      	orrs	r3, r2
 800f100:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	4a18      	ldr	r2, [pc, #96]	@ (800f168 <TIM_OC5_SetConfig+0xb4>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d00f      	beq.n	800f12a <TIM_OC5_SetConfig+0x76>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	4a17      	ldr	r2, [pc, #92]	@ (800f16c <TIM_OC5_SetConfig+0xb8>)
 800f10e:	4293      	cmp	r3, r2
 800f110:	d00b      	beq.n	800f12a <TIM_OC5_SetConfig+0x76>
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	4a16      	ldr	r2, [pc, #88]	@ (800f170 <TIM_OC5_SetConfig+0xbc>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d007      	beq.n	800f12a <TIM_OC5_SetConfig+0x76>
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	4a15      	ldr	r2, [pc, #84]	@ (800f174 <TIM_OC5_SetConfig+0xc0>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d003      	beq.n	800f12a <TIM_OC5_SetConfig+0x76>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	4a14      	ldr	r2, [pc, #80]	@ (800f178 <TIM_OC5_SetConfig+0xc4>)
 800f126:	4293      	cmp	r3, r2
 800f128:	d109      	bne.n	800f13e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f130:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f132:	683b      	ldr	r3, [r7, #0]
 800f134:	695b      	ldr	r3, [r3, #20]
 800f136:	021b      	lsls	r3, r3, #8
 800f138:	697a      	ldr	r2, [r7, #20]
 800f13a:	4313      	orrs	r3, r2
 800f13c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	697a      	ldr	r2, [r7, #20]
 800f142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	68fa      	ldr	r2, [r7, #12]
 800f148:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	685a      	ldr	r2, [r3, #4]
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	693a      	ldr	r2, [r7, #16]
 800f156:	621a      	str	r2, [r3, #32]
}
 800f158:	bf00      	nop
 800f15a:	371c      	adds	r7, #28
 800f15c:	46bd      	mov	sp, r7
 800f15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f162:	4770      	bx	lr
 800f164:	fffeff8f 	.word	0xfffeff8f
 800f168:	40010000 	.word	0x40010000
 800f16c:	40010400 	.word	0x40010400
 800f170:	40014000 	.word	0x40014000
 800f174:	40014400 	.word	0x40014400
 800f178:	40014800 	.word	0x40014800

0800f17c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f17c:	b480      	push	{r7}
 800f17e:	b087      	sub	sp, #28
 800f180:	af00      	add	r7, sp, #0
 800f182:	6078      	str	r0, [r7, #4]
 800f184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	6a1b      	ldr	r3, [r3, #32]
 800f18a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6a1b      	ldr	r3, [r3, #32]
 800f190:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f1a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f1a4:	68fa      	ldr	r2, [r7, #12]
 800f1a6:	4b22      	ldr	r3, [pc, #136]	@ (800f230 <TIM_OC6_SetConfig+0xb4>)
 800f1a8:	4013      	ands	r3, r2
 800f1aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	681b      	ldr	r3, [r3, #0]
 800f1b0:	021b      	lsls	r3, r3, #8
 800f1b2:	68fa      	ldr	r2, [r7, #12]
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f1be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	689b      	ldr	r3, [r3, #8]
 800f1c4:	051b      	lsls	r3, r3, #20
 800f1c6:	693a      	ldr	r2, [r7, #16]
 800f1c8:	4313      	orrs	r3, r2
 800f1ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4a19      	ldr	r2, [pc, #100]	@ (800f234 <TIM_OC6_SetConfig+0xb8>)
 800f1d0:	4293      	cmp	r3, r2
 800f1d2:	d00f      	beq.n	800f1f4 <TIM_OC6_SetConfig+0x78>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	4a18      	ldr	r2, [pc, #96]	@ (800f238 <TIM_OC6_SetConfig+0xbc>)
 800f1d8:	4293      	cmp	r3, r2
 800f1da:	d00b      	beq.n	800f1f4 <TIM_OC6_SetConfig+0x78>
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	4a17      	ldr	r2, [pc, #92]	@ (800f23c <TIM_OC6_SetConfig+0xc0>)
 800f1e0:	4293      	cmp	r3, r2
 800f1e2:	d007      	beq.n	800f1f4 <TIM_OC6_SetConfig+0x78>
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	4a16      	ldr	r2, [pc, #88]	@ (800f240 <TIM_OC6_SetConfig+0xc4>)
 800f1e8:	4293      	cmp	r3, r2
 800f1ea:	d003      	beq.n	800f1f4 <TIM_OC6_SetConfig+0x78>
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	4a15      	ldr	r2, [pc, #84]	@ (800f244 <TIM_OC6_SetConfig+0xc8>)
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d109      	bne.n	800f208 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f1fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	695b      	ldr	r3, [r3, #20]
 800f200:	029b      	lsls	r3, r3, #10
 800f202:	697a      	ldr	r2, [r7, #20]
 800f204:	4313      	orrs	r3, r2
 800f206:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	697a      	ldr	r2, [r7, #20]
 800f20c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	68fa      	ldr	r2, [r7, #12]
 800f212:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	685a      	ldr	r2, [r3, #4]
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	693a      	ldr	r2, [r7, #16]
 800f220:	621a      	str	r2, [r3, #32]
}
 800f222:	bf00      	nop
 800f224:	371c      	adds	r7, #28
 800f226:	46bd      	mov	sp, r7
 800f228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22c:	4770      	bx	lr
 800f22e:	bf00      	nop
 800f230:	feff8fff 	.word	0xfeff8fff
 800f234:	40010000 	.word	0x40010000
 800f238:	40010400 	.word	0x40010400
 800f23c:	40014000 	.word	0x40014000
 800f240:	40014400 	.word	0x40014400
 800f244:	40014800 	.word	0x40014800

0800f248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f248:	b480      	push	{r7}
 800f24a:	b087      	sub	sp, #28
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	60f8      	str	r0, [r7, #12]
 800f250:	60b9      	str	r1, [r7, #8]
 800f252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	6a1b      	ldr	r3, [r3, #32]
 800f258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	6a1b      	ldr	r3, [r3, #32]
 800f25e:	f023 0201 	bic.w	r2, r3, #1
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	699b      	ldr	r3, [r3, #24]
 800f26a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f26c:	693b      	ldr	r3, [r7, #16]
 800f26e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	011b      	lsls	r3, r3, #4
 800f278:	693a      	ldr	r2, [r7, #16]
 800f27a:	4313      	orrs	r3, r2
 800f27c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	f023 030a 	bic.w	r3, r3, #10
 800f284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f286:	697a      	ldr	r2, [r7, #20]
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	4313      	orrs	r3, r2
 800f28c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	693a      	ldr	r2, [r7, #16]
 800f292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	697a      	ldr	r2, [r7, #20]
 800f298:	621a      	str	r2, [r3, #32]
}
 800f29a:	bf00      	nop
 800f29c:	371c      	adds	r7, #28
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a4:	4770      	bx	lr

0800f2a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f2a6:	b480      	push	{r7}
 800f2a8:	b087      	sub	sp, #28
 800f2aa:	af00      	add	r7, sp, #0
 800f2ac:	60f8      	str	r0, [r7, #12]
 800f2ae:	60b9      	str	r1, [r7, #8]
 800f2b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	6a1b      	ldr	r3, [r3, #32]
 800f2b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	6a1b      	ldr	r3, [r3, #32]
 800f2bc:	f023 0210 	bic.w	r2, r3, #16
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f2d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	031b      	lsls	r3, r3, #12
 800f2d6:	693a      	ldr	r2, [r7, #16]
 800f2d8:	4313      	orrs	r3, r2
 800f2da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f2e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	011b      	lsls	r3, r3, #4
 800f2e8:	697a      	ldr	r2, [r7, #20]
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	693a      	ldr	r2, [r7, #16]
 800f2f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	697a      	ldr	r2, [r7, #20]
 800f2f8:	621a      	str	r2, [r3, #32]
}
 800f2fa:	bf00      	nop
 800f2fc:	371c      	adds	r7, #28
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr
	...

0800f308 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f308:	b480      	push	{r7}
 800f30a:	b085      	sub	sp, #20
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	6078      	str	r0, [r7, #4]
 800f310:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	4b09      	ldr	r3, [pc, #36]	@ (800f340 <TIM_ITRx_SetConfig+0x38>)
 800f31c:	4013      	ands	r3, r2
 800f31e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f320:	683a      	ldr	r2, [r7, #0]
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	4313      	orrs	r3, r2
 800f326:	f043 0307 	orr.w	r3, r3, #7
 800f32a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	609a      	str	r2, [r3, #8]
}
 800f332:	bf00      	nop
 800f334:	3714      	adds	r7, #20
 800f336:	46bd      	mov	sp, r7
 800f338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33c:	4770      	bx	lr
 800f33e:	bf00      	nop
 800f340:	ffcfff8f 	.word	0xffcfff8f

0800f344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f344:	b480      	push	{r7}
 800f346:	b087      	sub	sp, #28
 800f348:	af00      	add	r7, sp, #0
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
 800f350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	689b      	ldr	r3, [r3, #8]
 800f356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f358:	697b      	ldr	r3, [r7, #20]
 800f35a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f35e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	021a      	lsls	r2, r3, #8
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	431a      	orrs	r2, r3
 800f368:	68bb      	ldr	r3, [r7, #8]
 800f36a:	4313      	orrs	r3, r2
 800f36c:	697a      	ldr	r2, [r7, #20]
 800f36e:	4313      	orrs	r3, r2
 800f370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	697a      	ldr	r2, [r7, #20]
 800f376:	609a      	str	r2, [r3, #8]
}
 800f378:	bf00      	nop
 800f37a:	371c      	adds	r7, #28
 800f37c:	46bd      	mov	sp, r7
 800f37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f382:	4770      	bx	lr

0800f384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f384:	b480      	push	{r7}
 800f386:	b087      	sub	sp, #28
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	f003 031f 	and.w	r3, r3, #31
 800f396:	2201      	movs	r2, #1
 800f398:	fa02 f303 	lsl.w	r3, r2, r3
 800f39c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	6a1a      	ldr	r2, [r3, #32]
 800f3a2:	697b      	ldr	r3, [r7, #20]
 800f3a4:	43db      	mvns	r3, r3
 800f3a6:	401a      	ands	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	6a1a      	ldr	r2, [r3, #32]
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	f003 031f 	and.w	r3, r3, #31
 800f3b6:	6879      	ldr	r1, [r7, #4]
 800f3b8:	fa01 f303 	lsl.w	r3, r1, r3
 800f3bc:	431a      	orrs	r2, r3
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	621a      	str	r2, [r3, #32]
}
 800f3c2:	bf00      	nop
 800f3c4:	371c      	adds	r7, #28
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
	...

0800f3d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f3d0:	b480      	push	{r7}
 800f3d2:	b085      	sub	sp, #20
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d101      	bne.n	800f3e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f3e4:	2302      	movs	r3, #2
 800f3e6:	e077      	b.n	800f4d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2201      	movs	r2, #1
 800f3ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	2202      	movs	r2, #2
 800f3f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	685b      	ldr	r3, [r3, #4]
 800f3fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	689b      	ldr	r3, [r3, #8]
 800f406:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4a35      	ldr	r2, [pc, #212]	@ (800f4e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d004      	beq.n	800f41c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	4a34      	ldr	r2, [pc, #208]	@ (800f4e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	d108      	bne.n	800f42e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800f422:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f424:	683b      	ldr	r3, [r7, #0]
 800f426:	685b      	ldr	r3, [r3, #4]
 800f428:	68fa      	ldr	r2, [r7, #12]
 800f42a:	4313      	orrs	r3, r2
 800f42c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f434:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	681b      	ldr	r3, [r3, #0]
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	4313      	orrs	r3, r2
 800f43e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	68fa      	ldr	r2, [r7, #12]
 800f446:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a25      	ldr	r2, [pc, #148]	@ (800f4e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d02c      	beq.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f45a:	d027      	beq.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681b      	ldr	r3, [r3, #0]
 800f460:	4a22      	ldr	r2, [pc, #136]	@ (800f4ec <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800f462:	4293      	cmp	r3, r2
 800f464:	d022      	beq.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	4a21      	ldr	r2, [pc, #132]	@ (800f4f0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800f46c:	4293      	cmp	r3, r2
 800f46e:	d01d      	beq.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4a1f      	ldr	r2, [pc, #124]	@ (800f4f4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800f476:	4293      	cmp	r3, r2
 800f478:	d018      	beq.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	4a1a      	ldr	r2, [pc, #104]	@ (800f4e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d013      	beq.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	4a1b      	ldr	r2, [pc, #108]	@ (800f4f8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d00e      	beq.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	4a1a      	ldr	r2, [pc, #104]	@ (800f4fc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800f494:	4293      	cmp	r3, r2
 800f496:	d009      	beq.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4a18      	ldr	r2, [pc, #96]	@ (800f500 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d004      	beq.n	800f4ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	4a17      	ldr	r2, [pc, #92]	@ (800f504 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d10c      	bne.n	800f4c6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f4b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	689b      	ldr	r3, [r3, #8]
 800f4b8:	68ba      	ldr	r2, [r7, #8]
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	68ba      	ldr	r2, [r7, #8]
 800f4c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2201      	movs	r2, #1
 800f4ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f4d6:	2300      	movs	r3, #0
}
 800f4d8:	4618      	mov	r0, r3
 800f4da:	3714      	adds	r7, #20
 800f4dc:	46bd      	mov	sp, r7
 800f4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e2:	4770      	bx	lr
 800f4e4:	40010000 	.word	0x40010000
 800f4e8:	40010400 	.word	0x40010400
 800f4ec:	40000400 	.word	0x40000400
 800f4f0:	40000800 	.word	0x40000800
 800f4f4:	40000c00 	.word	0x40000c00
 800f4f8:	40001800 	.word	0x40001800
 800f4fc:	40014000 	.word	0x40014000
 800f500:	4000e000 	.word	0x4000e000
 800f504:	4000e400 	.word	0x4000e400

0800f508 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f508:	b480      	push	{r7}
 800f50a:	b085      	sub	sp, #20
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f512:	2300      	movs	r3, #0
 800f514:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f51c:	2b01      	cmp	r3, #1
 800f51e:	d101      	bne.n	800f524 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f520:	2302      	movs	r3, #2
 800f522:	e073      	b.n	800f60c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2201      	movs	r2, #1
 800f528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800f532:	683b      	ldr	r3, [r7, #0]
 800f534:	68db      	ldr	r3, [r3, #12]
 800f536:	4313      	orrs	r3, r2
 800f538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	689b      	ldr	r3, [r3, #8]
 800f544:	4313      	orrs	r3, r2
 800f546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	685b      	ldr	r3, [r3, #4]
 800f552:	4313      	orrs	r3, r2
 800f554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	4313      	orrs	r3, r2
 800f562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	691b      	ldr	r3, [r3, #16]
 800f56e:	4313      	orrs	r3, r2
 800f570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	695b      	ldr	r3, [r3, #20]
 800f57c:	4313      	orrs	r3, r2
 800f57e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800f586:	683b      	ldr	r3, [r7, #0]
 800f588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f58a:	4313      	orrs	r3, r2
 800f58c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	699b      	ldr	r3, [r3, #24]
 800f598:	041b      	lsls	r3, r3, #16
 800f59a:	4313      	orrs	r3, r2
 800f59c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800f5a4:	683b      	ldr	r3, [r7, #0]
 800f5a6:	69db      	ldr	r3, [r3, #28]
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	4a19      	ldr	r2, [pc, #100]	@ (800f618 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800f5b2:	4293      	cmp	r3, r2
 800f5b4:	d004      	beq.n	800f5c0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4a18      	ldr	r2, [pc, #96]	@ (800f61c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800f5bc:	4293      	cmp	r3, r2
 800f5be:	d11c      	bne.n	800f5fa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800f5c6:	683b      	ldr	r3, [r7, #0]
 800f5c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5ca:	051b      	lsls	r3, r3, #20
 800f5cc:	4313      	orrs	r3, r2
 800f5ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800f5d6:	683b      	ldr	r3, [r7, #0]
 800f5d8:	6a1b      	ldr	r3, [r3, #32]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f5e8:	4313      	orrs	r3, r2
 800f5ea:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5f6:	4313      	orrs	r3, r2
 800f5f8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	68fa      	ldr	r2, [r7, #12]
 800f600:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	2200      	movs	r2, #0
 800f606:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f60a:	2300      	movs	r3, #0
}
 800f60c:	4618      	mov	r0, r3
 800f60e:	3714      	adds	r7, #20
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr
 800f618:	40010000 	.word	0x40010000
 800f61c:	40010400 	.word	0x40010400

0800f620 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d101      	bne.n	800f632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f62e:	2301      	movs	r3, #1
 800f630:	e042      	b.n	800f6b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d106      	bne.n	800f64a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2200      	movs	r2, #0
 800f640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f644:	6878      	ldr	r0, [r7, #4]
 800f646:	f7f3 ff89 	bl	800355c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2224      	movs	r2, #36	@ 0x24
 800f64e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	f022 0201 	bic.w	r2, r2, #1
 800f660:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f666:	2b00      	cmp	r3, #0
 800f668:	d002      	beq.n	800f670 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800f66a:	6878      	ldr	r0, [r7, #4]
 800f66c:	f001 fb00 	bl	8010c70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f670:	6878      	ldr	r0, [r7, #4]
 800f672:	f000 fc91 	bl	800ff98 <UART_SetConfig>
 800f676:	4603      	mov	r3, r0
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d101      	bne.n	800f680 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800f67c:	2301      	movs	r3, #1
 800f67e:	e01b      	b.n	800f6b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	685a      	ldr	r2, [r3, #4]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f68e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	689a      	ldr	r2, [r3, #8]
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f69e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	681a      	ldr	r2, [r3, #0]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	f042 0201 	orr.w	r2, r2, #1
 800f6ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f6b0:	6878      	ldr	r0, [r7, #4]
 800f6b2:	f001 fb7f 	bl	8010db4 <UART_CheckIdleState>
 800f6b6:	4603      	mov	r3, r0
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3708      	adds	r7, #8
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b08a      	sub	sp, #40	@ 0x28
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800f6d4:	2b20      	cmp	r3, #32
 800f6d6:	d167      	bne.n	800f7a8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d002      	beq.n	800f6e4 <HAL_UART_Transmit_DMA+0x24>
 800f6de:	88fb      	ldrh	r3, [r7, #6]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d101      	bne.n	800f6e8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800f6e4:	2301      	movs	r3, #1
 800f6e6:	e060      	b.n	800f7aa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	68ba      	ldr	r2, [r7, #8]
 800f6ec:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	88fa      	ldrh	r2, [r7, #6]
 800f6f2:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	88fa      	ldrh	r2, [r7, #6]
 800f6fa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	2200      	movs	r2, #0
 800f702:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2221      	movs	r2, #33	@ 0x21
 800f70a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f712:	2b00      	cmp	r3, #0
 800f714:	d028      	beq.n	800f768 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f71a:	4a26      	ldr	r2, [pc, #152]	@ (800f7b4 <HAL_UART_Transmit_DMA+0xf4>)
 800f71c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f722:	4a25      	ldr	r2, [pc, #148]	@ (800f7b8 <HAL_UART_Transmit_DMA+0xf8>)
 800f724:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f72a:	4a24      	ldr	r2, [pc, #144]	@ (800f7bc <HAL_UART_Transmit_DMA+0xfc>)
 800f72c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f732:	2200      	movs	r2, #0
 800f734:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f73e:	4619      	mov	r1, r3
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	3328      	adds	r3, #40	@ 0x28
 800f746:	461a      	mov	r2, r3
 800f748:	88fb      	ldrh	r3, [r7, #6]
 800f74a:	f7f7 f8f9 	bl	8006940 <HAL_DMA_Start_IT>
 800f74e:	4603      	mov	r3, r0
 800f750:	2b00      	cmp	r3, #0
 800f752:	d009      	beq.n	800f768 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	2210      	movs	r2, #16
 800f758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	2220      	movs	r2, #32
 800f760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800f764:	2301      	movs	r3, #1
 800f766:	e020      	b.n	800f7aa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	2240      	movs	r2, #64	@ 0x40
 800f76e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	3308      	adds	r3, #8
 800f776:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	e853 3f00 	ldrex	r3, [r3]
 800f77e:	613b      	str	r3, [r7, #16]
   return(result);
 800f780:	693b      	ldr	r3, [r7, #16]
 800f782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f786:	627b      	str	r3, [r7, #36]	@ 0x24
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	3308      	adds	r3, #8
 800f78e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f790:	623a      	str	r2, [r7, #32]
 800f792:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f794:	69f9      	ldr	r1, [r7, #28]
 800f796:	6a3a      	ldr	r2, [r7, #32]
 800f798:	e841 2300 	strex	r3, r2, [r1]
 800f79c:	61bb      	str	r3, [r7, #24]
   return(result);
 800f79e:	69bb      	ldr	r3, [r7, #24]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1e5      	bne.n	800f770 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	e000      	b.n	800f7aa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800f7a8:	2302      	movs	r3, #2
  }
}
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	3728      	adds	r7, #40	@ 0x28
 800f7ae:	46bd      	mov	sp, r7
 800f7b0:	bd80      	pop	{r7, pc}
 800f7b2:	bf00      	nop
 800f7b4:	08011281 	.word	0x08011281
 800f7b8:	08011317 	.word	0x08011317
 800f7bc:	08011499 	.word	0x08011499

0800f7c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b0ba      	sub	sp, #232	@ 0xe8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	681b      	ldr	r3, [r3, #0]
 800f7cc:	69db      	ldr	r3, [r3, #28]
 800f7ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	689b      	ldr	r3, [r3, #8]
 800f7e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f7e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800f7ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 800f7ee:	4013      	ands	r3, r2
 800f7f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800f7f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d11b      	bne.n	800f834 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f800:	f003 0320 	and.w	r3, r3, #32
 800f804:	2b00      	cmp	r3, #0
 800f806:	d015      	beq.n	800f834 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f80c:	f003 0320 	and.w	r3, r3, #32
 800f810:	2b00      	cmp	r3, #0
 800f812:	d105      	bne.n	800f820 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f818:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d009      	beq.n	800f834 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f824:	2b00      	cmp	r3, #0
 800f826:	f000 8377 	beq.w	800ff18 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f82e:	6878      	ldr	r0, [r7, #4]
 800f830:	4798      	blx	r3
      }
      return;
 800f832:	e371      	b.n	800ff18 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f834:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f838:	2b00      	cmp	r3, #0
 800f83a:	f000 8123 	beq.w	800fa84 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800f83e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f842:	4b8d      	ldr	r3, [pc, #564]	@ (800fa78 <HAL_UART_IRQHandler+0x2b8>)
 800f844:	4013      	ands	r3, r2
 800f846:	2b00      	cmp	r3, #0
 800f848:	d106      	bne.n	800f858 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800f84a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800f84e:	4b8b      	ldr	r3, [pc, #556]	@ (800fa7c <HAL_UART_IRQHandler+0x2bc>)
 800f850:	4013      	ands	r3, r2
 800f852:	2b00      	cmp	r3, #0
 800f854:	f000 8116 	beq.w	800fa84 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f85c:	f003 0301 	and.w	r3, r3, #1
 800f860:	2b00      	cmp	r3, #0
 800f862:	d011      	beq.n	800f888 <HAL_UART_IRQHandler+0xc8>
 800f864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d00b      	beq.n	800f888 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	2201      	movs	r2, #1
 800f876:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f87e:	f043 0201 	orr.w	r2, r3, #1
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f88c:	f003 0302 	and.w	r3, r3, #2
 800f890:	2b00      	cmp	r3, #0
 800f892:	d011      	beq.n	800f8b8 <HAL_UART_IRQHandler+0xf8>
 800f894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f898:	f003 0301 	and.w	r3, r3, #1
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d00b      	beq.n	800f8b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	2202      	movs	r2, #2
 800f8a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8ae:	f043 0204 	orr.w	r2, r3, #4
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800f8b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8bc:	f003 0304 	and.w	r3, r3, #4
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d011      	beq.n	800f8e8 <HAL_UART_IRQHandler+0x128>
 800f8c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f8c8:	f003 0301 	and.w	r3, r3, #1
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d00b      	beq.n	800f8e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	2204      	movs	r2, #4
 800f8d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f8de:	f043 0202 	orr.w	r2, r3, #2
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800f8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f8ec:	f003 0308 	and.w	r3, r3, #8
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d017      	beq.n	800f924 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8f8:	f003 0320 	and.w	r3, r3, #32
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d105      	bne.n	800f90c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800f900:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800f904:	4b5c      	ldr	r3, [pc, #368]	@ (800fa78 <HAL_UART_IRQHandler+0x2b8>)
 800f906:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00b      	beq.n	800f924 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	2208      	movs	r2, #8
 800f912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f91a:	f043 0208 	orr.w	r2, r3, #8
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800f924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d012      	beq.n	800f956 <HAL_UART_IRQHandler+0x196>
 800f930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f934:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d00c      	beq.n	800f956 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f944:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f94c:	f043 0220 	orr.w	r2, r3, #32
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	f000 82dd 	beq.w	800ff1c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800f962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f966:	f003 0320 	and.w	r3, r3, #32
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d013      	beq.n	800f996 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800f96e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f972:	f003 0320 	and.w	r3, r3, #32
 800f976:	2b00      	cmp	r3, #0
 800f978:	d105      	bne.n	800f986 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800f97a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f97e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800f982:	2b00      	cmp	r3, #0
 800f984:	d007      	beq.n	800f996 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d003      	beq.n	800f996 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f99c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	681b      	ldr	r3, [r3, #0]
 800f9a4:	689b      	ldr	r3, [r3, #8]
 800f9a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9aa:	2b40      	cmp	r3, #64	@ 0x40
 800f9ac:	d005      	beq.n	800f9ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800f9ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f9b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d054      	beq.n	800fa64 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f001 fbfa 	bl	80111b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	689b      	ldr	r3, [r3, #8]
 800f9c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ca:	2b40      	cmp	r3, #64	@ 0x40
 800f9cc:	d146      	bne.n	800fa5c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	3308      	adds	r3, #8
 800f9d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f9dc:	e853 3f00 	ldrex	r3, [r3]
 800f9e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f9e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f9e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	3308      	adds	r3, #8
 800f9f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f9fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f9fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800fa06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800fa0a:	e841 2300 	strex	r3, r2, [r1]
 800fa0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800fa12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d1d9      	bne.n	800f9ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d017      	beq.n	800fa54 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa2a:	4a15      	ldr	r2, [pc, #84]	@ (800fa80 <HAL_UART_IRQHandler+0x2c0>)
 800fa2c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7f7 fd0b 	bl	8007450 <HAL_DMA_Abort_IT>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d019      	beq.n	800fa74 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fa46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fa48:	687a      	ldr	r2, [r7, #4]
 800fa4a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800fa4e:	4610      	mov	r0, r2
 800fa50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa52:	e00f      	b.n	800fa74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f000 fa95 	bl	800ff84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa5a:	e00b      	b.n	800fa74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f000 fa91 	bl	800ff84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa62:	e007      	b.n	800fa74 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f000 fa8d 	bl	800ff84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800fa72:	e253      	b.n	800ff1c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fa74:	bf00      	nop
    return;
 800fa76:	e251      	b.n	800ff1c <HAL_UART_IRQHandler+0x75c>
 800fa78:	10000001 	.word	0x10000001
 800fa7c:	04000120 	.word	0x04000120
 800fa80:	08011519 	.word	0x08011519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fa88:	2b01      	cmp	r3, #1
 800fa8a:	f040 81e7 	bne.w	800fe5c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fa8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fa92:	f003 0310 	and.w	r3, r3, #16
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	f000 81e0 	beq.w	800fe5c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fa9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800faa0:	f003 0310 	and.w	r3, r3, #16
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	f000 81d9 	beq.w	800fe5c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	2210      	movs	r2, #16
 800fab0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	689b      	ldr	r3, [r3, #8]
 800fab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fabc:	2b40      	cmp	r3, #64	@ 0x40
 800fabe:	f040 8151 	bne.w	800fd64 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	4a96      	ldr	r2, [pc, #600]	@ (800fd24 <HAL_UART_IRQHandler+0x564>)
 800facc:	4293      	cmp	r3, r2
 800face:	d068      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4a93      	ldr	r2, [pc, #588]	@ (800fd28 <HAL_UART_IRQHandler+0x568>)
 800fada:	4293      	cmp	r3, r2
 800fadc:	d061      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	4a91      	ldr	r2, [pc, #580]	@ (800fd2c <HAL_UART_IRQHandler+0x56c>)
 800fae8:	4293      	cmp	r3, r2
 800faea:	d05a      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a8e      	ldr	r2, [pc, #568]	@ (800fd30 <HAL_UART_IRQHandler+0x570>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d053      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	4a8c      	ldr	r2, [pc, #560]	@ (800fd34 <HAL_UART_IRQHandler+0x574>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d04c      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	4a89      	ldr	r2, [pc, #548]	@ (800fd38 <HAL_UART_IRQHandler+0x578>)
 800fb12:	4293      	cmp	r3, r2
 800fb14:	d045      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	4a87      	ldr	r2, [pc, #540]	@ (800fd3c <HAL_UART_IRQHandler+0x57c>)
 800fb20:	4293      	cmp	r3, r2
 800fb22:	d03e      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	4a84      	ldr	r2, [pc, #528]	@ (800fd40 <HAL_UART_IRQHandler+0x580>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d037      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a82      	ldr	r2, [pc, #520]	@ (800fd44 <HAL_UART_IRQHandler+0x584>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d030      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4a7f      	ldr	r2, [pc, #508]	@ (800fd48 <HAL_UART_IRQHandler+0x588>)
 800fb4a:	4293      	cmp	r3, r2
 800fb4c:	d029      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	4a7d      	ldr	r2, [pc, #500]	@ (800fd4c <HAL_UART_IRQHandler+0x58c>)
 800fb58:	4293      	cmp	r3, r2
 800fb5a:	d022      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4a7a      	ldr	r2, [pc, #488]	@ (800fd50 <HAL_UART_IRQHandler+0x590>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d01b      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	4a78      	ldr	r2, [pc, #480]	@ (800fd54 <HAL_UART_IRQHandler+0x594>)
 800fb74:	4293      	cmp	r3, r2
 800fb76:	d014      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a75      	ldr	r2, [pc, #468]	@ (800fd58 <HAL_UART_IRQHandler+0x598>)
 800fb82:	4293      	cmp	r3, r2
 800fb84:	d00d      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4a73      	ldr	r2, [pc, #460]	@ (800fd5c <HAL_UART_IRQHandler+0x59c>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d006      	beq.n	800fba2 <HAL_UART_IRQHandler+0x3e2>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	4a70      	ldr	r2, [pc, #448]	@ (800fd60 <HAL_UART_IRQHandler+0x5a0>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d106      	bne.n	800fbb0 <HAL_UART_IRQHandler+0x3f0>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	e005      	b.n	800fbbc <HAL_UART_IRQHandler+0x3fc>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbb6:	681b      	ldr	r3, [r3, #0]
 800fbb8:	685b      	ldr	r3, [r3, #4]
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fbc0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	f000 81ab 	beq.w	800ff20 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800fbd0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	f080 81a3 	bcs.w	800ff20 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800fbe0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fbea:	69db      	ldr	r3, [r3, #28]
 800fbec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fbf0:	f000 8087 	beq.w	800fd02 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800fc00:	e853 3f00 	ldrex	r3, [r3]
 800fc04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800fc08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800fc0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fc10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	461a      	mov	r2, r3
 800fc1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800fc1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800fc22:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800fc2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800fc2e:	e841 2300 	strex	r3, r2, [r1]
 800fc32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800fc36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d1da      	bne.n	800fbf4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	3308      	adds	r3, #8
 800fc44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800fc48:	e853 3f00 	ldrex	r3, [r3]
 800fc4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800fc4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fc50:	f023 0301 	bic.w	r3, r3, #1
 800fc54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	3308      	adds	r3, #8
 800fc5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800fc62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800fc66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800fc6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fc6e:	e841 2300 	strex	r3, r2, [r1]
 800fc72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800fc74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d1e1      	bne.n	800fc3e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	3308      	adds	r3, #8
 800fc80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fc84:	e853 3f00 	ldrex	r3, [r3]
 800fc88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800fc8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fc8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fc90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	3308      	adds	r3, #8
 800fc9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800fc9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800fca0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fca2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800fca4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800fca6:	e841 2300 	strex	r3, r2, [r1]
 800fcaa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800fcac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d1e3      	bne.n	800fc7a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2220      	movs	r2, #32
 800fcb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	2200      	movs	r2, #0
 800fcbe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcc8:	e853 3f00 	ldrex	r3, [r3]
 800fccc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fcce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcd0:	f023 0310 	bic.w	r3, r3, #16
 800fcd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	461a      	mov	r2, r3
 800fcde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800fce2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fce4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fce6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fce8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fcea:	e841 2300 	strex	r3, r2, [r1]
 800fcee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fcf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d1e4      	bne.n	800fcc0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7f7 f889 	bl	8006e14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2202      	movs	r2, #2
 800fd06:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd14:	b29b      	uxth	r3, r3
 800fd16:	1ad3      	subs	r3, r2, r3
 800fd18:	b29b      	uxth	r3, r3
 800fd1a:	4619      	mov	r1, r3
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f7f1 fac7 	bl	80012b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd22:	e0fd      	b.n	800ff20 <HAL_UART_IRQHandler+0x760>
 800fd24:	40020010 	.word	0x40020010
 800fd28:	40020028 	.word	0x40020028
 800fd2c:	40020040 	.word	0x40020040
 800fd30:	40020058 	.word	0x40020058
 800fd34:	40020070 	.word	0x40020070
 800fd38:	40020088 	.word	0x40020088
 800fd3c:	400200a0 	.word	0x400200a0
 800fd40:	400200b8 	.word	0x400200b8
 800fd44:	40020410 	.word	0x40020410
 800fd48:	40020428 	.word	0x40020428
 800fd4c:	40020440 	.word	0x40020440
 800fd50:	40020458 	.word	0x40020458
 800fd54:	40020470 	.word	0x40020470
 800fd58:	40020488 	.word	0x40020488
 800fd5c:	400204a0 	.word	0x400204a0
 800fd60:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd70:	b29b      	uxth	r3, r3
 800fd72:	1ad3      	subs	r3, r2, r3
 800fd74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	f000 80cf 	beq.w	800ff24 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800fd86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	f000 80ca 	beq.w	800ff24 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd98:	e853 3f00 	ldrex	r3, [r3]
 800fd9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fd9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fda0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fda4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	461a      	mov	r2, r3
 800fdae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800fdb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800fdb4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdb6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fdb8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fdba:	e841 2300 	strex	r3, r2, [r1]
 800fdbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fdc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d1e4      	bne.n	800fd90 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	3308      	adds	r3, #8
 800fdcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd0:	e853 3f00 	ldrex	r3, [r3]
 800fdd4:	623b      	str	r3, [r7, #32]
   return(result);
 800fdd6:	6a3a      	ldr	r2, [r7, #32]
 800fdd8:	4b55      	ldr	r3, [pc, #340]	@ (800ff30 <HAL_UART_IRQHandler+0x770>)
 800fdda:	4013      	ands	r3, r2
 800fddc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	3308      	adds	r3, #8
 800fde6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800fdea:	633a      	str	r2, [r7, #48]	@ 0x30
 800fdec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fdee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fdf0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fdf2:	e841 2300 	strex	r3, r2, [r1]
 800fdf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fdf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d1e3      	bne.n	800fdc6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2220      	movs	r2, #32
 800fe02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	2200      	movs	r2, #0
 800fe0a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	2200      	movs	r2, #0
 800fe10:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	e853 3f00 	ldrex	r3, [r3]
 800fe1e:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f023 0310 	bic.w	r3, r3, #16
 800fe26:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	461a      	mov	r2, r3
 800fe30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800fe34:	61fb      	str	r3, [r7, #28]
 800fe36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe38:	69b9      	ldr	r1, [r7, #24]
 800fe3a:	69fa      	ldr	r2, [r7, #28]
 800fe3c:	e841 2300 	strex	r3, r2, [r1]
 800fe40:	617b      	str	r3, [r7, #20]
   return(result);
 800fe42:	697b      	ldr	r3, [r7, #20]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d1e4      	bne.n	800fe12 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2202      	movs	r2, #2
 800fe4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fe4e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fe52:	4619      	mov	r1, r3
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f7f1 fa2b 	bl	80012b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fe5a:	e063      	b.n	800ff24 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800fe5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe60:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d00e      	beq.n	800fe86 <HAL_UART_IRQHandler+0x6c6>
 800fe68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fe6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d008      	beq.n	800fe86 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800fe7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f001 fbf6 	bl	8011670 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fe84:	e051      	b.n	800ff2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800fe86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fe8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d014      	beq.n	800febc <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800fe92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fe96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d105      	bne.n	800feaa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800fe9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d008      	beq.n	800febc <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d03a      	beq.n	800ff28 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800feb6:	6878      	ldr	r0, [r7, #4]
 800feb8:	4798      	blx	r3
    }
    return;
 800feba:	e035      	b.n	800ff28 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800febc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d009      	beq.n	800fedc <HAL_UART_IRQHandler+0x71c>
 800fec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fecc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d003      	beq.n	800fedc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f001 fb35 	bl	8011544 <UART_EndTransmit_IT>
    return;
 800feda:	e026      	b.n	800ff2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800fedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fee0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d009      	beq.n	800fefc <HAL_UART_IRQHandler+0x73c>
 800fee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800feec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d003      	beq.n	800fefc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800fef4:	6878      	ldr	r0, [r7, #4]
 800fef6:	f001 fbcf 	bl	8011698 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800fefa:	e016      	b.n	800ff2a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800fefc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d010      	beq.n	800ff2a <HAL_UART_IRQHandler+0x76a>
 800ff08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	da0c      	bge.n	800ff2a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f001 fbb7 	bl	8011684 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ff16:	e008      	b.n	800ff2a <HAL_UART_IRQHandler+0x76a>
      return;
 800ff18:	bf00      	nop
 800ff1a:	e006      	b.n	800ff2a <HAL_UART_IRQHandler+0x76a>
    return;
 800ff1c:	bf00      	nop
 800ff1e:	e004      	b.n	800ff2a <HAL_UART_IRQHandler+0x76a>
      return;
 800ff20:	bf00      	nop
 800ff22:	e002      	b.n	800ff2a <HAL_UART_IRQHandler+0x76a>
      return;
 800ff24:	bf00      	nop
 800ff26:	e000      	b.n	800ff2a <HAL_UART_IRQHandler+0x76a>
    return;
 800ff28:	bf00      	nop
  }
}
 800ff2a:	37e8      	adds	r7, #232	@ 0xe8
 800ff2c:	46bd      	mov	sp, r7
 800ff2e:	bd80      	pop	{r7, pc}
 800ff30:	effffffe 	.word	0xeffffffe

0800ff34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ff3c:	bf00      	nop
 800ff3e:	370c      	adds	r7, #12
 800ff40:	46bd      	mov	sp, r7
 800ff42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff46:	4770      	bx	lr

0800ff48 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b083      	sub	sp, #12
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800ff50:	bf00      	nop
 800ff52:	370c      	adds	r7, #12
 800ff54:	46bd      	mov	sp, r7
 800ff56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5a:	4770      	bx	lr

0800ff5c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ff5c:	b480      	push	{r7}
 800ff5e:	b083      	sub	sp, #12
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800ff64:	bf00      	nop
 800ff66:	370c      	adds	r7, #12
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6e:	4770      	bx	lr

0800ff70 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800ff78:	bf00      	nop
 800ff7a:	370c      	adds	r7, #12
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff82:	4770      	bx	lr

0800ff84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ff84:	b480      	push	{r7}
 800ff86:	b083      	sub	sp, #12
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ff8c:	bf00      	nop
 800ff8e:	370c      	adds	r7, #12
 800ff90:	46bd      	mov	sp, r7
 800ff92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff96:	4770      	bx	lr

0800ff98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ff9c:	b092      	sub	sp, #72	@ 0x48
 800ff9e:	af00      	add	r7, sp, #0
 800ffa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	689a      	ldr	r2, [r3, #8]
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	691b      	ldr	r3, [r3, #16]
 800ffb0:	431a      	orrs	r2, r3
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	695b      	ldr	r3, [r3, #20]
 800ffb6:	431a      	orrs	r2, r3
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	69db      	ldr	r3, [r3, #28]
 800ffbc:	4313      	orrs	r3, r2
 800ffbe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	4bbe      	ldr	r3, [pc, #760]	@ (80102c0 <UART_SetConfig+0x328>)
 800ffc8:	4013      	ands	r3, r2
 800ffca:	697a      	ldr	r2, [r7, #20]
 800ffcc:	6812      	ldr	r2, [r2, #0]
 800ffce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ffd0:	430b      	orrs	r3, r1
 800ffd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ffd4:	697b      	ldr	r3, [r7, #20]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	685b      	ldr	r3, [r3, #4]
 800ffda:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ffde:	697b      	ldr	r3, [r7, #20]
 800ffe0:	68da      	ldr	r2, [r3, #12]
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	430a      	orrs	r2, r1
 800ffe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	699b      	ldr	r3, [r3, #24]
 800ffee:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	4ab3      	ldr	r2, [pc, #716]	@ (80102c4 <UART_SetConfig+0x32c>)
 800fff6:	4293      	cmp	r3, r2
 800fff8:	d004      	beq.n	8010004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	6a1b      	ldr	r3, [r3, #32]
 800fffe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010000:	4313      	orrs	r3, r2
 8010002:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010004:	697b      	ldr	r3, [r7, #20]
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	689a      	ldr	r2, [r3, #8]
 801000a:	4baf      	ldr	r3, [pc, #700]	@ (80102c8 <UART_SetConfig+0x330>)
 801000c:	4013      	ands	r3, r2
 801000e:	697a      	ldr	r2, [r7, #20]
 8010010:	6812      	ldr	r2, [r2, #0]
 8010012:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010014:	430b      	orrs	r3, r1
 8010016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801001e:	f023 010f 	bic.w	r1, r3, #15
 8010022:	697b      	ldr	r3, [r7, #20]
 8010024:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	430a      	orrs	r2, r1
 801002c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	4aa6      	ldr	r2, [pc, #664]	@ (80102cc <UART_SetConfig+0x334>)
 8010034:	4293      	cmp	r3, r2
 8010036:	d177      	bne.n	8010128 <UART_SetConfig+0x190>
 8010038:	4ba5      	ldr	r3, [pc, #660]	@ (80102d0 <UART_SetConfig+0x338>)
 801003a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801003c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8010040:	2b28      	cmp	r3, #40	@ 0x28
 8010042:	d86d      	bhi.n	8010120 <UART_SetConfig+0x188>
 8010044:	a201      	add	r2, pc, #4	@ (adr r2, 801004c <UART_SetConfig+0xb4>)
 8010046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801004a:	bf00      	nop
 801004c:	080100f1 	.word	0x080100f1
 8010050:	08010121 	.word	0x08010121
 8010054:	08010121 	.word	0x08010121
 8010058:	08010121 	.word	0x08010121
 801005c:	08010121 	.word	0x08010121
 8010060:	08010121 	.word	0x08010121
 8010064:	08010121 	.word	0x08010121
 8010068:	08010121 	.word	0x08010121
 801006c:	080100f9 	.word	0x080100f9
 8010070:	08010121 	.word	0x08010121
 8010074:	08010121 	.word	0x08010121
 8010078:	08010121 	.word	0x08010121
 801007c:	08010121 	.word	0x08010121
 8010080:	08010121 	.word	0x08010121
 8010084:	08010121 	.word	0x08010121
 8010088:	08010121 	.word	0x08010121
 801008c:	08010101 	.word	0x08010101
 8010090:	08010121 	.word	0x08010121
 8010094:	08010121 	.word	0x08010121
 8010098:	08010121 	.word	0x08010121
 801009c:	08010121 	.word	0x08010121
 80100a0:	08010121 	.word	0x08010121
 80100a4:	08010121 	.word	0x08010121
 80100a8:	08010121 	.word	0x08010121
 80100ac:	08010109 	.word	0x08010109
 80100b0:	08010121 	.word	0x08010121
 80100b4:	08010121 	.word	0x08010121
 80100b8:	08010121 	.word	0x08010121
 80100bc:	08010121 	.word	0x08010121
 80100c0:	08010121 	.word	0x08010121
 80100c4:	08010121 	.word	0x08010121
 80100c8:	08010121 	.word	0x08010121
 80100cc:	08010111 	.word	0x08010111
 80100d0:	08010121 	.word	0x08010121
 80100d4:	08010121 	.word	0x08010121
 80100d8:	08010121 	.word	0x08010121
 80100dc:	08010121 	.word	0x08010121
 80100e0:	08010121 	.word	0x08010121
 80100e4:	08010121 	.word	0x08010121
 80100e8:	08010121 	.word	0x08010121
 80100ec:	08010119 	.word	0x08010119
 80100f0:	2301      	movs	r3, #1
 80100f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100f6:	e326      	b.n	8010746 <UART_SetConfig+0x7ae>
 80100f8:	2304      	movs	r3, #4
 80100fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80100fe:	e322      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010100:	2308      	movs	r3, #8
 8010102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010106:	e31e      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010108:	2310      	movs	r3, #16
 801010a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801010e:	e31a      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010110:	2320      	movs	r3, #32
 8010112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010116:	e316      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010118:	2340      	movs	r3, #64	@ 0x40
 801011a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801011e:	e312      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010120:	2380      	movs	r3, #128	@ 0x80
 8010122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010126:	e30e      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010128:	697b      	ldr	r3, [r7, #20]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	4a69      	ldr	r2, [pc, #420]	@ (80102d4 <UART_SetConfig+0x33c>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d130      	bne.n	8010194 <UART_SetConfig+0x1fc>
 8010132:	4b67      	ldr	r3, [pc, #412]	@ (80102d0 <UART_SetConfig+0x338>)
 8010134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010136:	f003 0307 	and.w	r3, r3, #7
 801013a:	2b05      	cmp	r3, #5
 801013c:	d826      	bhi.n	801018c <UART_SetConfig+0x1f4>
 801013e:	a201      	add	r2, pc, #4	@ (adr r2, 8010144 <UART_SetConfig+0x1ac>)
 8010140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010144:	0801015d 	.word	0x0801015d
 8010148:	08010165 	.word	0x08010165
 801014c:	0801016d 	.word	0x0801016d
 8010150:	08010175 	.word	0x08010175
 8010154:	0801017d 	.word	0x0801017d
 8010158:	08010185 	.word	0x08010185
 801015c:	2300      	movs	r3, #0
 801015e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010162:	e2f0      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010164:	2304      	movs	r3, #4
 8010166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801016a:	e2ec      	b.n	8010746 <UART_SetConfig+0x7ae>
 801016c:	2308      	movs	r3, #8
 801016e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010172:	e2e8      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010174:	2310      	movs	r3, #16
 8010176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801017a:	e2e4      	b.n	8010746 <UART_SetConfig+0x7ae>
 801017c:	2320      	movs	r3, #32
 801017e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010182:	e2e0      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010184:	2340      	movs	r3, #64	@ 0x40
 8010186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801018a:	e2dc      	b.n	8010746 <UART_SetConfig+0x7ae>
 801018c:	2380      	movs	r3, #128	@ 0x80
 801018e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010192:	e2d8      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010194:	697b      	ldr	r3, [r7, #20]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	4a4f      	ldr	r2, [pc, #316]	@ (80102d8 <UART_SetConfig+0x340>)
 801019a:	4293      	cmp	r3, r2
 801019c:	d130      	bne.n	8010200 <UART_SetConfig+0x268>
 801019e:	4b4c      	ldr	r3, [pc, #304]	@ (80102d0 <UART_SetConfig+0x338>)
 80101a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80101a2:	f003 0307 	and.w	r3, r3, #7
 80101a6:	2b05      	cmp	r3, #5
 80101a8:	d826      	bhi.n	80101f8 <UART_SetConfig+0x260>
 80101aa:	a201      	add	r2, pc, #4	@ (adr r2, 80101b0 <UART_SetConfig+0x218>)
 80101ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101b0:	080101c9 	.word	0x080101c9
 80101b4:	080101d1 	.word	0x080101d1
 80101b8:	080101d9 	.word	0x080101d9
 80101bc:	080101e1 	.word	0x080101e1
 80101c0:	080101e9 	.word	0x080101e9
 80101c4:	080101f1 	.word	0x080101f1
 80101c8:	2300      	movs	r3, #0
 80101ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101ce:	e2ba      	b.n	8010746 <UART_SetConfig+0x7ae>
 80101d0:	2304      	movs	r3, #4
 80101d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101d6:	e2b6      	b.n	8010746 <UART_SetConfig+0x7ae>
 80101d8:	2308      	movs	r3, #8
 80101da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101de:	e2b2      	b.n	8010746 <UART_SetConfig+0x7ae>
 80101e0:	2310      	movs	r3, #16
 80101e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101e6:	e2ae      	b.n	8010746 <UART_SetConfig+0x7ae>
 80101e8:	2320      	movs	r3, #32
 80101ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101ee:	e2aa      	b.n	8010746 <UART_SetConfig+0x7ae>
 80101f0:	2340      	movs	r3, #64	@ 0x40
 80101f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101f6:	e2a6      	b.n	8010746 <UART_SetConfig+0x7ae>
 80101f8:	2380      	movs	r3, #128	@ 0x80
 80101fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80101fe:	e2a2      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	4a35      	ldr	r2, [pc, #212]	@ (80102dc <UART_SetConfig+0x344>)
 8010206:	4293      	cmp	r3, r2
 8010208:	d130      	bne.n	801026c <UART_SetConfig+0x2d4>
 801020a:	4b31      	ldr	r3, [pc, #196]	@ (80102d0 <UART_SetConfig+0x338>)
 801020c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801020e:	f003 0307 	and.w	r3, r3, #7
 8010212:	2b05      	cmp	r3, #5
 8010214:	d826      	bhi.n	8010264 <UART_SetConfig+0x2cc>
 8010216:	a201      	add	r2, pc, #4	@ (adr r2, 801021c <UART_SetConfig+0x284>)
 8010218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801021c:	08010235 	.word	0x08010235
 8010220:	0801023d 	.word	0x0801023d
 8010224:	08010245 	.word	0x08010245
 8010228:	0801024d 	.word	0x0801024d
 801022c:	08010255 	.word	0x08010255
 8010230:	0801025d 	.word	0x0801025d
 8010234:	2300      	movs	r3, #0
 8010236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801023a:	e284      	b.n	8010746 <UART_SetConfig+0x7ae>
 801023c:	2304      	movs	r3, #4
 801023e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010242:	e280      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010244:	2308      	movs	r3, #8
 8010246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801024a:	e27c      	b.n	8010746 <UART_SetConfig+0x7ae>
 801024c:	2310      	movs	r3, #16
 801024e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010252:	e278      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010254:	2320      	movs	r3, #32
 8010256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801025a:	e274      	b.n	8010746 <UART_SetConfig+0x7ae>
 801025c:	2340      	movs	r3, #64	@ 0x40
 801025e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010262:	e270      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010264:	2380      	movs	r3, #128	@ 0x80
 8010266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801026a:	e26c      	b.n	8010746 <UART_SetConfig+0x7ae>
 801026c:	697b      	ldr	r3, [r7, #20]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	4a1b      	ldr	r2, [pc, #108]	@ (80102e0 <UART_SetConfig+0x348>)
 8010272:	4293      	cmp	r3, r2
 8010274:	d142      	bne.n	80102fc <UART_SetConfig+0x364>
 8010276:	4b16      	ldr	r3, [pc, #88]	@ (80102d0 <UART_SetConfig+0x338>)
 8010278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801027a:	f003 0307 	and.w	r3, r3, #7
 801027e:	2b05      	cmp	r3, #5
 8010280:	d838      	bhi.n	80102f4 <UART_SetConfig+0x35c>
 8010282:	a201      	add	r2, pc, #4	@ (adr r2, 8010288 <UART_SetConfig+0x2f0>)
 8010284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010288:	080102a1 	.word	0x080102a1
 801028c:	080102a9 	.word	0x080102a9
 8010290:	080102b1 	.word	0x080102b1
 8010294:	080102b9 	.word	0x080102b9
 8010298:	080102e5 	.word	0x080102e5
 801029c:	080102ed 	.word	0x080102ed
 80102a0:	2300      	movs	r3, #0
 80102a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102a6:	e24e      	b.n	8010746 <UART_SetConfig+0x7ae>
 80102a8:	2304      	movs	r3, #4
 80102aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ae:	e24a      	b.n	8010746 <UART_SetConfig+0x7ae>
 80102b0:	2308      	movs	r3, #8
 80102b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102b6:	e246      	b.n	8010746 <UART_SetConfig+0x7ae>
 80102b8:	2310      	movs	r3, #16
 80102ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102be:	e242      	b.n	8010746 <UART_SetConfig+0x7ae>
 80102c0:	cfff69f3 	.word	0xcfff69f3
 80102c4:	58000c00 	.word	0x58000c00
 80102c8:	11fff4ff 	.word	0x11fff4ff
 80102cc:	40011000 	.word	0x40011000
 80102d0:	58024400 	.word	0x58024400
 80102d4:	40004400 	.word	0x40004400
 80102d8:	40004800 	.word	0x40004800
 80102dc:	40004c00 	.word	0x40004c00
 80102e0:	40005000 	.word	0x40005000
 80102e4:	2320      	movs	r3, #32
 80102e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102ea:	e22c      	b.n	8010746 <UART_SetConfig+0x7ae>
 80102ec:	2340      	movs	r3, #64	@ 0x40
 80102ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102f2:	e228      	b.n	8010746 <UART_SetConfig+0x7ae>
 80102f4:	2380      	movs	r3, #128	@ 0x80
 80102f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80102fa:	e224      	b.n	8010746 <UART_SetConfig+0x7ae>
 80102fc:	697b      	ldr	r3, [r7, #20]
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4ab1      	ldr	r2, [pc, #708]	@ (80105c8 <UART_SetConfig+0x630>)
 8010302:	4293      	cmp	r3, r2
 8010304:	d176      	bne.n	80103f4 <UART_SetConfig+0x45c>
 8010306:	4bb1      	ldr	r3, [pc, #708]	@ (80105cc <UART_SetConfig+0x634>)
 8010308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801030a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801030e:	2b28      	cmp	r3, #40	@ 0x28
 8010310:	d86c      	bhi.n	80103ec <UART_SetConfig+0x454>
 8010312:	a201      	add	r2, pc, #4	@ (adr r2, 8010318 <UART_SetConfig+0x380>)
 8010314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010318:	080103bd 	.word	0x080103bd
 801031c:	080103ed 	.word	0x080103ed
 8010320:	080103ed 	.word	0x080103ed
 8010324:	080103ed 	.word	0x080103ed
 8010328:	080103ed 	.word	0x080103ed
 801032c:	080103ed 	.word	0x080103ed
 8010330:	080103ed 	.word	0x080103ed
 8010334:	080103ed 	.word	0x080103ed
 8010338:	080103c5 	.word	0x080103c5
 801033c:	080103ed 	.word	0x080103ed
 8010340:	080103ed 	.word	0x080103ed
 8010344:	080103ed 	.word	0x080103ed
 8010348:	080103ed 	.word	0x080103ed
 801034c:	080103ed 	.word	0x080103ed
 8010350:	080103ed 	.word	0x080103ed
 8010354:	080103ed 	.word	0x080103ed
 8010358:	080103cd 	.word	0x080103cd
 801035c:	080103ed 	.word	0x080103ed
 8010360:	080103ed 	.word	0x080103ed
 8010364:	080103ed 	.word	0x080103ed
 8010368:	080103ed 	.word	0x080103ed
 801036c:	080103ed 	.word	0x080103ed
 8010370:	080103ed 	.word	0x080103ed
 8010374:	080103ed 	.word	0x080103ed
 8010378:	080103d5 	.word	0x080103d5
 801037c:	080103ed 	.word	0x080103ed
 8010380:	080103ed 	.word	0x080103ed
 8010384:	080103ed 	.word	0x080103ed
 8010388:	080103ed 	.word	0x080103ed
 801038c:	080103ed 	.word	0x080103ed
 8010390:	080103ed 	.word	0x080103ed
 8010394:	080103ed 	.word	0x080103ed
 8010398:	080103dd 	.word	0x080103dd
 801039c:	080103ed 	.word	0x080103ed
 80103a0:	080103ed 	.word	0x080103ed
 80103a4:	080103ed 	.word	0x080103ed
 80103a8:	080103ed 	.word	0x080103ed
 80103ac:	080103ed 	.word	0x080103ed
 80103b0:	080103ed 	.word	0x080103ed
 80103b4:	080103ed 	.word	0x080103ed
 80103b8:	080103e5 	.word	0x080103e5
 80103bc:	2301      	movs	r3, #1
 80103be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103c2:	e1c0      	b.n	8010746 <UART_SetConfig+0x7ae>
 80103c4:	2304      	movs	r3, #4
 80103c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103ca:	e1bc      	b.n	8010746 <UART_SetConfig+0x7ae>
 80103cc:	2308      	movs	r3, #8
 80103ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103d2:	e1b8      	b.n	8010746 <UART_SetConfig+0x7ae>
 80103d4:	2310      	movs	r3, #16
 80103d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103da:	e1b4      	b.n	8010746 <UART_SetConfig+0x7ae>
 80103dc:	2320      	movs	r3, #32
 80103de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103e2:	e1b0      	b.n	8010746 <UART_SetConfig+0x7ae>
 80103e4:	2340      	movs	r3, #64	@ 0x40
 80103e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103ea:	e1ac      	b.n	8010746 <UART_SetConfig+0x7ae>
 80103ec:	2380      	movs	r3, #128	@ 0x80
 80103ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80103f2:	e1a8      	b.n	8010746 <UART_SetConfig+0x7ae>
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	4a75      	ldr	r2, [pc, #468]	@ (80105d0 <UART_SetConfig+0x638>)
 80103fa:	4293      	cmp	r3, r2
 80103fc:	d130      	bne.n	8010460 <UART_SetConfig+0x4c8>
 80103fe:	4b73      	ldr	r3, [pc, #460]	@ (80105cc <UART_SetConfig+0x634>)
 8010400:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010402:	f003 0307 	and.w	r3, r3, #7
 8010406:	2b05      	cmp	r3, #5
 8010408:	d826      	bhi.n	8010458 <UART_SetConfig+0x4c0>
 801040a:	a201      	add	r2, pc, #4	@ (adr r2, 8010410 <UART_SetConfig+0x478>)
 801040c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010410:	08010429 	.word	0x08010429
 8010414:	08010431 	.word	0x08010431
 8010418:	08010439 	.word	0x08010439
 801041c:	08010441 	.word	0x08010441
 8010420:	08010449 	.word	0x08010449
 8010424:	08010451 	.word	0x08010451
 8010428:	2300      	movs	r3, #0
 801042a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801042e:	e18a      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010430:	2304      	movs	r3, #4
 8010432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010436:	e186      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010438:	2308      	movs	r3, #8
 801043a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801043e:	e182      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010440:	2310      	movs	r3, #16
 8010442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010446:	e17e      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010448:	2320      	movs	r3, #32
 801044a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801044e:	e17a      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010450:	2340      	movs	r3, #64	@ 0x40
 8010452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010456:	e176      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010458:	2380      	movs	r3, #128	@ 0x80
 801045a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801045e:	e172      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	4a5b      	ldr	r2, [pc, #364]	@ (80105d4 <UART_SetConfig+0x63c>)
 8010466:	4293      	cmp	r3, r2
 8010468:	d130      	bne.n	80104cc <UART_SetConfig+0x534>
 801046a:	4b58      	ldr	r3, [pc, #352]	@ (80105cc <UART_SetConfig+0x634>)
 801046c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801046e:	f003 0307 	and.w	r3, r3, #7
 8010472:	2b05      	cmp	r3, #5
 8010474:	d826      	bhi.n	80104c4 <UART_SetConfig+0x52c>
 8010476:	a201      	add	r2, pc, #4	@ (adr r2, 801047c <UART_SetConfig+0x4e4>)
 8010478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801047c:	08010495 	.word	0x08010495
 8010480:	0801049d 	.word	0x0801049d
 8010484:	080104a5 	.word	0x080104a5
 8010488:	080104ad 	.word	0x080104ad
 801048c:	080104b5 	.word	0x080104b5
 8010490:	080104bd 	.word	0x080104bd
 8010494:	2300      	movs	r3, #0
 8010496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801049a:	e154      	b.n	8010746 <UART_SetConfig+0x7ae>
 801049c:	2304      	movs	r3, #4
 801049e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104a2:	e150      	b.n	8010746 <UART_SetConfig+0x7ae>
 80104a4:	2308      	movs	r3, #8
 80104a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104aa:	e14c      	b.n	8010746 <UART_SetConfig+0x7ae>
 80104ac:	2310      	movs	r3, #16
 80104ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104b2:	e148      	b.n	8010746 <UART_SetConfig+0x7ae>
 80104b4:	2320      	movs	r3, #32
 80104b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ba:	e144      	b.n	8010746 <UART_SetConfig+0x7ae>
 80104bc:	2340      	movs	r3, #64	@ 0x40
 80104be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104c2:	e140      	b.n	8010746 <UART_SetConfig+0x7ae>
 80104c4:	2380      	movs	r3, #128	@ 0x80
 80104c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80104ca:	e13c      	b.n	8010746 <UART_SetConfig+0x7ae>
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a41      	ldr	r2, [pc, #260]	@ (80105d8 <UART_SetConfig+0x640>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	f040 8082 	bne.w	80105dc <UART_SetConfig+0x644>
 80104d8:	4b3c      	ldr	r3, [pc, #240]	@ (80105cc <UART_SetConfig+0x634>)
 80104da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104dc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80104e0:	2b28      	cmp	r3, #40	@ 0x28
 80104e2:	d86d      	bhi.n	80105c0 <UART_SetConfig+0x628>
 80104e4:	a201      	add	r2, pc, #4	@ (adr r2, 80104ec <UART_SetConfig+0x554>)
 80104e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104ea:	bf00      	nop
 80104ec:	08010591 	.word	0x08010591
 80104f0:	080105c1 	.word	0x080105c1
 80104f4:	080105c1 	.word	0x080105c1
 80104f8:	080105c1 	.word	0x080105c1
 80104fc:	080105c1 	.word	0x080105c1
 8010500:	080105c1 	.word	0x080105c1
 8010504:	080105c1 	.word	0x080105c1
 8010508:	080105c1 	.word	0x080105c1
 801050c:	08010599 	.word	0x08010599
 8010510:	080105c1 	.word	0x080105c1
 8010514:	080105c1 	.word	0x080105c1
 8010518:	080105c1 	.word	0x080105c1
 801051c:	080105c1 	.word	0x080105c1
 8010520:	080105c1 	.word	0x080105c1
 8010524:	080105c1 	.word	0x080105c1
 8010528:	080105c1 	.word	0x080105c1
 801052c:	080105a1 	.word	0x080105a1
 8010530:	080105c1 	.word	0x080105c1
 8010534:	080105c1 	.word	0x080105c1
 8010538:	080105c1 	.word	0x080105c1
 801053c:	080105c1 	.word	0x080105c1
 8010540:	080105c1 	.word	0x080105c1
 8010544:	080105c1 	.word	0x080105c1
 8010548:	080105c1 	.word	0x080105c1
 801054c:	080105a9 	.word	0x080105a9
 8010550:	080105c1 	.word	0x080105c1
 8010554:	080105c1 	.word	0x080105c1
 8010558:	080105c1 	.word	0x080105c1
 801055c:	080105c1 	.word	0x080105c1
 8010560:	080105c1 	.word	0x080105c1
 8010564:	080105c1 	.word	0x080105c1
 8010568:	080105c1 	.word	0x080105c1
 801056c:	080105b1 	.word	0x080105b1
 8010570:	080105c1 	.word	0x080105c1
 8010574:	080105c1 	.word	0x080105c1
 8010578:	080105c1 	.word	0x080105c1
 801057c:	080105c1 	.word	0x080105c1
 8010580:	080105c1 	.word	0x080105c1
 8010584:	080105c1 	.word	0x080105c1
 8010588:	080105c1 	.word	0x080105c1
 801058c:	080105b9 	.word	0x080105b9
 8010590:	2301      	movs	r3, #1
 8010592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010596:	e0d6      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010598:	2304      	movs	r3, #4
 801059a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801059e:	e0d2      	b.n	8010746 <UART_SetConfig+0x7ae>
 80105a0:	2308      	movs	r3, #8
 80105a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105a6:	e0ce      	b.n	8010746 <UART_SetConfig+0x7ae>
 80105a8:	2310      	movs	r3, #16
 80105aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105ae:	e0ca      	b.n	8010746 <UART_SetConfig+0x7ae>
 80105b0:	2320      	movs	r3, #32
 80105b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105b6:	e0c6      	b.n	8010746 <UART_SetConfig+0x7ae>
 80105b8:	2340      	movs	r3, #64	@ 0x40
 80105ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105be:	e0c2      	b.n	8010746 <UART_SetConfig+0x7ae>
 80105c0:	2380      	movs	r3, #128	@ 0x80
 80105c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80105c6:	e0be      	b.n	8010746 <UART_SetConfig+0x7ae>
 80105c8:	40011400 	.word	0x40011400
 80105cc:	58024400 	.word	0x58024400
 80105d0:	40007800 	.word	0x40007800
 80105d4:	40007c00 	.word	0x40007c00
 80105d8:	40011800 	.word	0x40011800
 80105dc:	697b      	ldr	r3, [r7, #20]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	4aad      	ldr	r2, [pc, #692]	@ (8010898 <UART_SetConfig+0x900>)
 80105e2:	4293      	cmp	r3, r2
 80105e4:	d176      	bne.n	80106d4 <UART_SetConfig+0x73c>
 80105e6:	4bad      	ldr	r3, [pc, #692]	@ (801089c <UART_SetConfig+0x904>)
 80105e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80105ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80105ee:	2b28      	cmp	r3, #40	@ 0x28
 80105f0:	d86c      	bhi.n	80106cc <UART_SetConfig+0x734>
 80105f2:	a201      	add	r2, pc, #4	@ (adr r2, 80105f8 <UART_SetConfig+0x660>)
 80105f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105f8:	0801069d 	.word	0x0801069d
 80105fc:	080106cd 	.word	0x080106cd
 8010600:	080106cd 	.word	0x080106cd
 8010604:	080106cd 	.word	0x080106cd
 8010608:	080106cd 	.word	0x080106cd
 801060c:	080106cd 	.word	0x080106cd
 8010610:	080106cd 	.word	0x080106cd
 8010614:	080106cd 	.word	0x080106cd
 8010618:	080106a5 	.word	0x080106a5
 801061c:	080106cd 	.word	0x080106cd
 8010620:	080106cd 	.word	0x080106cd
 8010624:	080106cd 	.word	0x080106cd
 8010628:	080106cd 	.word	0x080106cd
 801062c:	080106cd 	.word	0x080106cd
 8010630:	080106cd 	.word	0x080106cd
 8010634:	080106cd 	.word	0x080106cd
 8010638:	080106ad 	.word	0x080106ad
 801063c:	080106cd 	.word	0x080106cd
 8010640:	080106cd 	.word	0x080106cd
 8010644:	080106cd 	.word	0x080106cd
 8010648:	080106cd 	.word	0x080106cd
 801064c:	080106cd 	.word	0x080106cd
 8010650:	080106cd 	.word	0x080106cd
 8010654:	080106cd 	.word	0x080106cd
 8010658:	080106b5 	.word	0x080106b5
 801065c:	080106cd 	.word	0x080106cd
 8010660:	080106cd 	.word	0x080106cd
 8010664:	080106cd 	.word	0x080106cd
 8010668:	080106cd 	.word	0x080106cd
 801066c:	080106cd 	.word	0x080106cd
 8010670:	080106cd 	.word	0x080106cd
 8010674:	080106cd 	.word	0x080106cd
 8010678:	080106bd 	.word	0x080106bd
 801067c:	080106cd 	.word	0x080106cd
 8010680:	080106cd 	.word	0x080106cd
 8010684:	080106cd 	.word	0x080106cd
 8010688:	080106cd 	.word	0x080106cd
 801068c:	080106cd 	.word	0x080106cd
 8010690:	080106cd 	.word	0x080106cd
 8010694:	080106cd 	.word	0x080106cd
 8010698:	080106c5 	.word	0x080106c5
 801069c:	2301      	movs	r3, #1
 801069e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106a2:	e050      	b.n	8010746 <UART_SetConfig+0x7ae>
 80106a4:	2304      	movs	r3, #4
 80106a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106aa:	e04c      	b.n	8010746 <UART_SetConfig+0x7ae>
 80106ac:	2308      	movs	r3, #8
 80106ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106b2:	e048      	b.n	8010746 <UART_SetConfig+0x7ae>
 80106b4:	2310      	movs	r3, #16
 80106b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ba:	e044      	b.n	8010746 <UART_SetConfig+0x7ae>
 80106bc:	2320      	movs	r3, #32
 80106be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106c2:	e040      	b.n	8010746 <UART_SetConfig+0x7ae>
 80106c4:	2340      	movs	r3, #64	@ 0x40
 80106c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106ca:	e03c      	b.n	8010746 <UART_SetConfig+0x7ae>
 80106cc:	2380      	movs	r3, #128	@ 0x80
 80106ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80106d2:	e038      	b.n	8010746 <UART_SetConfig+0x7ae>
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	4a71      	ldr	r2, [pc, #452]	@ (80108a0 <UART_SetConfig+0x908>)
 80106da:	4293      	cmp	r3, r2
 80106dc:	d130      	bne.n	8010740 <UART_SetConfig+0x7a8>
 80106de:	4b6f      	ldr	r3, [pc, #444]	@ (801089c <UART_SetConfig+0x904>)
 80106e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80106e2:	f003 0307 	and.w	r3, r3, #7
 80106e6:	2b05      	cmp	r3, #5
 80106e8:	d826      	bhi.n	8010738 <UART_SetConfig+0x7a0>
 80106ea:	a201      	add	r2, pc, #4	@ (adr r2, 80106f0 <UART_SetConfig+0x758>)
 80106ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f0:	08010709 	.word	0x08010709
 80106f4:	08010711 	.word	0x08010711
 80106f8:	08010719 	.word	0x08010719
 80106fc:	08010721 	.word	0x08010721
 8010700:	08010729 	.word	0x08010729
 8010704:	08010731 	.word	0x08010731
 8010708:	2302      	movs	r3, #2
 801070a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801070e:	e01a      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010710:	2304      	movs	r3, #4
 8010712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010716:	e016      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010718:	2308      	movs	r3, #8
 801071a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801071e:	e012      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010720:	2310      	movs	r3, #16
 8010722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010726:	e00e      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010728:	2320      	movs	r3, #32
 801072a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801072e:	e00a      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010730:	2340      	movs	r3, #64	@ 0x40
 8010732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8010736:	e006      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010738:	2380      	movs	r3, #128	@ 0x80
 801073a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801073e:	e002      	b.n	8010746 <UART_SetConfig+0x7ae>
 8010740:	2380      	movs	r3, #128	@ 0x80
 8010742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	4a55      	ldr	r2, [pc, #340]	@ (80108a0 <UART_SetConfig+0x908>)
 801074c:	4293      	cmp	r3, r2
 801074e:	f040 80f8 	bne.w	8010942 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010752:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010756:	2b20      	cmp	r3, #32
 8010758:	dc46      	bgt.n	80107e8 <UART_SetConfig+0x850>
 801075a:	2b02      	cmp	r3, #2
 801075c:	db75      	blt.n	801084a <UART_SetConfig+0x8b2>
 801075e:	3b02      	subs	r3, #2
 8010760:	2b1e      	cmp	r3, #30
 8010762:	d872      	bhi.n	801084a <UART_SetConfig+0x8b2>
 8010764:	a201      	add	r2, pc, #4	@ (adr r2, 801076c <UART_SetConfig+0x7d4>)
 8010766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801076a:	bf00      	nop
 801076c:	080107ef 	.word	0x080107ef
 8010770:	0801084b 	.word	0x0801084b
 8010774:	080107f7 	.word	0x080107f7
 8010778:	0801084b 	.word	0x0801084b
 801077c:	0801084b 	.word	0x0801084b
 8010780:	0801084b 	.word	0x0801084b
 8010784:	08010807 	.word	0x08010807
 8010788:	0801084b 	.word	0x0801084b
 801078c:	0801084b 	.word	0x0801084b
 8010790:	0801084b 	.word	0x0801084b
 8010794:	0801084b 	.word	0x0801084b
 8010798:	0801084b 	.word	0x0801084b
 801079c:	0801084b 	.word	0x0801084b
 80107a0:	0801084b 	.word	0x0801084b
 80107a4:	08010817 	.word	0x08010817
 80107a8:	0801084b 	.word	0x0801084b
 80107ac:	0801084b 	.word	0x0801084b
 80107b0:	0801084b 	.word	0x0801084b
 80107b4:	0801084b 	.word	0x0801084b
 80107b8:	0801084b 	.word	0x0801084b
 80107bc:	0801084b 	.word	0x0801084b
 80107c0:	0801084b 	.word	0x0801084b
 80107c4:	0801084b 	.word	0x0801084b
 80107c8:	0801084b 	.word	0x0801084b
 80107cc:	0801084b 	.word	0x0801084b
 80107d0:	0801084b 	.word	0x0801084b
 80107d4:	0801084b 	.word	0x0801084b
 80107d8:	0801084b 	.word	0x0801084b
 80107dc:	0801084b 	.word	0x0801084b
 80107e0:	0801084b 	.word	0x0801084b
 80107e4:	0801083d 	.word	0x0801083d
 80107e8:	2b40      	cmp	r3, #64	@ 0x40
 80107ea:	d02a      	beq.n	8010842 <UART_SetConfig+0x8aa>
 80107ec:	e02d      	b.n	801084a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80107ee:	f7fc ffd9 	bl	800d7a4 <HAL_RCCEx_GetD3PCLK1Freq>
 80107f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80107f4:	e02f      	b.n	8010856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7fc ffe8 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010804:	e027      	b.n	8010856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010806:	f107 0318 	add.w	r3, r7, #24
 801080a:	4618      	mov	r0, r3
 801080c:	f7fd f934 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010810:	69fb      	ldr	r3, [r7, #28]
 8010812:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010814:	e01f      	b.n	8010856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010816:	4b21      	ldr	r3, [pc, #132]	@ (801089c <UART_SetConfig+0x904>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	f003 0320 	and.w	r3, r3, #32
 801081e:	2b00      	cmp	r3, #0
 8010820:	d009      	beq.n	8010836 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010822:	4b1e      	ldr	r3, [pc, #120]	@ (801089c <UART_SetConfig+0x904>)
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	08db      	lsrs	r3, r3, #3
 8010828:	f003 0303 	and.w	r3, r3, #3
 801082c:	4a1d      	ldr	r2, [pc, #116]	@ (80108a4 <UART_SetConfig+0x90c>)
 801082e:	fa22 f303 	lsr.w	r3, r2, r3
 8010832:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010834:	e00f      	b.n	8010856 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010836:	4b1b      	ldr	r3, [pc, #108]	@ (80108a4 <UART_SetConfig+0x90c>)
 8010838:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801083a:	e00c      	b.n	8010856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801083c:	4b1a      	ldr	r3, [pc, #104]	@ (80108a8 <UART_SetConfig+0x910>)
 801083e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010840:	e009      	b.n	8010856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010848:	e005      	b.n	8010856 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801084a:	2300      	movs	r3, #0
 801084c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801084e:	2301      	movs	r3, #1
 8010850:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010856:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010858:	2b00      	cmp	r3, #0
 801085a:	f000 81ee 	beq.w	8010c3a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010862:	4a12      	ldr	r2, [pc, #72]	@ (80108ac <UART_SetConfig+0x914>)
 8010864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010868:	461a      	mov	r2, r3
 801086a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801086c:	fbb3 f3f2 	udiv	r3, r3, r2
 8010870:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010872:	697b      	ldr	r3, [r7, #20]
 8010874:	685a      	ldr	r2, [r3, #4]
 8010876:	4613      	mov	r3, r2
 8010878:	005b      	lsls	r3, r3, #1
 801087a:	4413      	add	r3, r2
 801087c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801087e:	429a      	cmp	r2, r3
 8010880:	d305      	bcc.n	801088e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801088a:	429a      	cmp	r2, r3
 801088c:	d910      	bls.n	80108b0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801088e:	2301      	movs	r3, #1
 8010890:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010894:	e1d1      	b.n	8010c3a <UART_SetConfig+0xca2>
 8010896:	bf00      	nop
 8010898:	40011c00 	.word	0x40011c00
 801089c:	58024400 	.word	0x58024400
 80108a0:	58000c00 	.word	0x58000c00
 80108a4:	03d09000 	.word	0x03d09000
 80108a8:	003d0900 	.word	0x003d0900
 80108ac:	080138a4 	.word	0x080138a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108b2:	2200      	movs	r2, #0
 80108b4:	60bb      	str	r3, [r7, #8]
 80108b6:	60fa      	str	r2, [r7, #12]
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108bc:	4ac0      	ldr	r2, [pc, #768]	@ (8010bc0 <UART_SetConfig+0xc28>)
 80108be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108c2:	b29b      	uxth	r3, r3
 80108c4:	2200      	movs	r2, #0
 80108c6:	603b      	str	r3, [r7, #0]
 80108c8:	607a      	str	r2, [r7, #4]
 80108ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80108d2:	f7ef fd6d 	bl	80003b0 <__aeabi_uldivmod>
 80108d6:	4602      	mov	r2, r0
 80108d8:	460b      	mov	r3, r1
 80108da:	4610      	mov	r0, r2
 80108dc:	4619      	mov	r1, r3
 80108de:	f04f 0200 	mov.w	r2, #0
 80108e2:	f04f 0300 	mov.w	r3, #0
 80108e6:	020b      	lsls	r3, r1, #8
 80108e8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80108ec:	0202      	lsls	r2, r0, #8
 80108ee:	6979      	ldr	r1, [r7, #20]
 80108f0:	6849      	ldr	r1, [r1, #4]
 80108f2:	0849      	lsrs	r1, r1, #1
 80108f4:	2000      	movs	r0, #0
 80108f6:	460c      	mov	r4, r1
 80108f8:	4605      	mov	r5, r0
 80108fa:	eb12 0804 	adds.w	r8, r2, r4
 80108fe:	eb43 0905 	adc.w	r9, r3, r5
 8010902:	697b      	ldr	r3, [r7, #20]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	2200      	movs	r2, #0
 8010908:	469a      	mov	sl, r3
 801090a:	4693      	mov	fp, r2
 801090c:	4652      	mov	r2, sl
 801090e:	465b      	mov	r3, fp
 8010910:	4640      	mov	r0, r8
 8010912:	4649      	mov	r1, r9
 8010914:	f7ef fd4c 	bl	80003b0 <__aeabi_uldivmod>
 8010918:	4602      	mov	r2, r0
 801091a:	460b      	mov	r3, r1
 801091c:	4613      	mov	r3, r2
 801091e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010922:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010926:	d308      	bcc.n	801093a <UART_SetConfig+0x9a2>
 8010928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801092a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801092e:	d204      	bcs.n	801093a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010936:	60da      	str	r2, [r3, #12]
 8010938:	e17f      	b.n	8010c3a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801093a:	2301      	movs	r3, #1
 801093c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010940:	e17b      	b.n	8010c3a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	69db      	ldr	r3, [r3, #28]
 8010946:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801094a:	f040 80bd 	bne.w	8010ac8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801094e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010952:	2b20      	cmp	r3, #32
 8010954:	dc48      	bgt.n	80109e8 <UART_SetConfig+0xa50>
 8010956:	2b00      	cmp	r3, #0
 8010958:	db7b      	blt.n	8010a52 <UART_SetConfig+0xaba>
 801095a:	2b20      	cmp	r3, #32
 801095c:	d879      	bhi.n	8010a52 <UART_SetConfig+0xaba>
 801095e:	a201      	add	r2, pc, #4	@ (adr r2, 8010964 <UART_SetConfig+0x9cc>)
 8010960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010964:	080109ef 	.word	0x080109ef
 8010968:	080109f7 	.word	0x080109f7
 801096c:	08010a53 	.word	0x08010a53
 8010970:	08010a53 	.word	0x08010a53
 8010974:	080109ff 	.word	0x080109ff
 8010978:	08010a53 	.word	0x08010a53
 801097c:	08010a53 	.word	0x08010a53
 8010980:	08010a53 	.word	0x08010a53
 8010984:	08010a0f 	.word	0x08010a0f
 8010988:	08010a53 	.word	0x08010a53
 801098c:	08010a53 	.word	0x08010a53
 8010990:	08010a53 	.word	0x08010a53
 8010994:	08010a53 	.word	0x08010a53
 8010998:	08010a53 	.word	0x08010a53
 801099c:	08010a53 	.word	0x08010a53
 80109a0:	08010a53 	.word	0x08010a53
 80109a4:	08010a1f 	.word	0x08010a1f
 80109a8:	08010a53 	.word	0x08010a53
 80109ac:	08010a53 	.word	0x08010a53
 80109b0:	08010a53 	.word	0x08010a53
 80109b4:	08010a53 	.word	0x08010a53
 80109b8:	08010a53 	.word	0x08010a53
 80109bc:	08010a53 	.word	0x08010a53
 80109c0:	08010a53 	.word	0x08010a53
 80109c4:	08010a53 	.word	0x08010a53
 80109c8:	08010a53 	.word	0x08010a53
 80109cc:	08010a53 	.word	0x08010a53
 80109d0:	08010a53 	.word	0x08010a53
 80109d4:	08010a53 	.word	0x08010a53
 80109d8:	08010a53 	.word	0x08010a53
 80109dc:	08010a53 	.word	0x08010a53
 80109e0:	08010a53 	.word	0x08010a53
 80109e4:	08010a45 	.word	0x08010a45
 80109e8:	2b40      	cmp	r3, #64	@ 0x40
 80109ea:	d02e      	beq.n	8010a4a <UART_SetConfig+0xab2>
 80109ec:	e031      	b.n	8010a52 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80109ee:	f7fb f83b 	bl	800ba68 <HAL_RCC_GetPCLK1Freq>
 80109f2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80109f4:	e033      	b.n	8010a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80109f6:	f7fb f84d 	bl	800ba94 <HAL_RCC_GetPCLK2Freq>
 80109fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80109fc:	e02f      	b.n	8010a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80109fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fc fee4 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a0c:	e027      	b.n	8010a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010a0e:	f107 0318 	add.w	r3, r7, #24
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fd f830 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010a18:	69fb      	ldr	r3, [r7, #28]
 8010a1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a1c:	e01f      	b.n	8010a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a1e:	4b69      	ldr	r3, [pc, #420]	@ (8010bc4 <UART_SetConfig+0xc2c>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	f003 0320 	and.w	r3, r3, #32
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d009      	beq.n	8010a3e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010a2a:	4b66      	ldr	r3, [pc, #408]	@ (8010bc4 <UART_SetConfig+0xc2c>)
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	08db      	lsrs	r3, r3, #3
 8010a30:	f003 0303 	and.w	r3, r3, #3
 8010a34:	4a64      	ldr	r2, [pc, #400]	@ (8010bc8 <UART_SetConfig+0xc30>)
 8010a36:	fa22 f303 	lsr.w	r3, r2, r3
 8010a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010a3c:	e00f      	b.n	8010a5e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010a3e:	4b62      	ldr	r3, [pc, #392]	@ (8010bc8 <UART_SetConfig+0xc30>)
 8010a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a42:	e00c      	b.n	8010a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010a44:	4b61      	ldr	r3, [pc, #388]	@ (8010bcc <UART_SetConfig+0xc34>)
 8010a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a48:	e009      	b.n	8010a5e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010a50:	e005      	b.n	8010a5e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010a52:	2300      	movs	r3, #0
 8010a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010a56:	2301      	movs	r3, #1
 8010a58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010a5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010a5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	f000 80ea 	beq.w	8010c3a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a6a:	4a55      	ldr	r2, [pc, #340]	@ (8010bc0 <UART_SetConfig+0xc28>)
 8010a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a70:	461a      	mov	r2, r3
 8010a72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a74:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a78:	005a      	lsls	r2, r3, #1
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	685b      	ldr	r3, [r3, #4]
 8010a7e:	085b      	lsrs	r3, r3, #1
 8010a80:	441a      	add	r2, r3
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	685b      	ldr	r3, [r3, #4]
 8010a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010a8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a8e:	2b0f      	cmp	r3, #15
 8010a90:	d916      	bls.n	8010ac0 <UART_SetConfig+0xb28>
 8010a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010a98:	d212      	bcs.n	8010ac0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a9c:	b29b      	uxth	r3, r3
 8010a9e:	f023 030f 	bic.w	r3, r3, #15
 8010aa2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aa6:	085b      	lsrs	r3, r3, #1
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	f003 0307 	and.w	r3, r3, #7
 8010aae:	b29a      	uxth	r2, r3
 8010ab0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010ab2:	4313      	orrs	r3, r2
 8010ab4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8010abc:	60da      	str	r2, [r3, #12]
 8010abe:	e0bc      	b.n	8010c3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8010ac6:	e0b8      	b.n	8010c3a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010ac8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8010acc:	2b20      	cmp	r3, #32
 8010ace:	dc4b      	bgt.n	8010b68 <UART_SetConfig+0xbd0>
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	f2c0 8087 	blt.w	8010be4 <UART_SetConfig+0xc4c>
 8010ad6:	2b20      	cmp	r3, #32
 8010ad8:	f200 8084 	bhi.w	8010be4 <UART_SetConfig+0xc4c>
 8010adc:	a201      	add	r2, pc, #4	@ (adr r2, 8010ae4 <UART_SetConfig+0xb4c>)
 8010ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae2:	bf00      	nop
 8010ae4:	08010b6f 	.word	0x08010b6f
 8010ae8:	08010b77 	.word	0x08010b77
 8010aec:	08010be5 	.word	0x08010be5
 8010af0:	08010be5 	.word	0x08010be5
 8010af4:	08010b7f 	.word	0x08010b7f
 8010af8:	08010be5 	.word	0x08010be5
 8010afc:	08010be5 	.word	0x08010be5
 8010b00:	08010be5 	.word	0x08010be5
 8010b04:	08010b8f 	.word	0x08010b8f
 8010b08:	08010be5 	.word	0x08010be5
 8010b0c:	08010be5 	.word	0x08010be5
 8010b10:	08010be5 	.word	0x08010be5
 8010b14:	08010be5 	.word	0x08010be5
 8010b18:	08010be5 	.word	0x08010be5
 8010b1c:	08010be5 	.word	0x08010be5
 8010b20:	08010be5 	.word	0x08010be5
 8010b24:	08010b9f 	.word	0x08010b9f
 8010b28:	08010be5 	.word	0x08010be5
 8010b2c:	08010be5 	.word	0x08010be5
 8010b30:	08010be5 	.word	0x08010be5
 8010b34:	08010be5 	.word	0x08010be5
 8010b38:	08010be5 	.word	0x08010be5
 8010b3c:	08010be5 	.word	0x08010be5
 8010b40:	08010be5 	.word	0x08010be5
 8010b44:	08010be5 	.word	0x08010be5
 8010b48:	08010be5 	.word	0x08010be5
 8010b4c:	08010be5 	.word	0x08010be5
 8010b50:	08010be5 	.word	0x08010be5
 8010b54:	08010be5 	.word	0x08010be5
 8010b58:	08010be5 	.word	0x08010be5
 8010b5c:	08010be5 	.word	0x08010be5
 8010b60:	08010be5 	.word	0x08010be5
 8010b64:	08010bd7 	.word	0x08010bd7
 8010b68:	2b40      	cmp	r3, #64	@ 0x40
 8010b6a:	d037      	beq.n	8010bdc <UART_SetConfig+0xc44>
 8010b6c:	e03a      	b.n	8010be4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b6e:	f7fa ff7b 	bl	800ba68 <HAL_RCC_GetPCLK1Freq>
 8010b72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010b74:	e03c      	b.n	8010bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010b76:	f7fa ff8d 	bl	800ba94 <HAL_RCC_GetPCLK2Freq>
 8010b7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8010b7c:	e038      	b.n	8010bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fc fe24 	bl	800d7d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b8c:	e030      	b.n	8010bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010b8e:	f107 0318 	add.w	r3, r7, #24
 8010b92:	4618      	mov	r0, r3
 8010b94:	f7fc ff70 	bl	800da78 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010b98:	69fb      	ldr	r3, [r7, #28]
 8010b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010b9c:	e028      	b.n	8010bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b9e:	4b09      	ldr	r3, [pc, #36]	@ (8010bc4 <UART_SetConfig+0xc2c>)
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f003 0320 	and.w	r3, r3, #32
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d012      	beq.n	8010bd0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010baa:	4b06      	ldr	r3, [pc, #24]	@ (8010bc4 <UART_SetConfig+0xc2c>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	08db      	lsrs	r3, r3, #3
 8010bb0:	f003 0303 	and.w	r3, r3, #3
 8010bb4:	4a04      	ldr	r2, [pc, #16]	@ (8010bc8 <UART_SetConfig+0xc30>)
 8010bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8010bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010bbc:	e018      	b.n	8010bf0 <UART_SetConfig+0xc58>
 8010bbe:	bf00      	nop
 8010bc0:	080138a4 	.word	0x080138a4
 8010bc4:	58024400 	.word	0x58024400
 8010bc8:	03d09000 	.word	0x03d09000
 8010bcc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010bd0:	4b24      	ldr	r3, [pc, #144]	@ (8010c64 <UART_SetConfig+0xccc>)
 8010bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bd4:	e00c      	b.n	8010bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010bd6:	4b24      	ldr	r3, [pc, #144]	@ (8010c68 <UART_SetConfig+0xcd0>)
 8010bd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010bda:	e009      	b.n	8010bf0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010bdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8010be2:	e005      	b.n	8010bf0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8010be4:	2300      	movs	r3, #0
 8010be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8010be8:	2301      	movs	r3, #1
 8010bea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8010bee:	bf00      	nop
    }

    if (pclk != 0U)
 8010bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d021      	beq.n	8010c3a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010bf6:	697b      	ldr	r3, [r7, #20]
 8010bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010bfa:	4a1c      	ldr	r2, [pc, #112]	@ (8010c6c <UART_SetConfig+0xcd4>)
 8010bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c00:	461a      	mov	r2, r3
 8010c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010c04:	fbb3 f2f2 	udiv	r2, r3, r2
 8010c08:	697b      	ldr	r3, [r7, #20]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	085b      	lsrs	r3, r3, #1
 8010c0e:	441a      	add	r2, r3
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8010c18:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c1c:	2b0f      	cmp	r3, #15
 8010c1e:	d909      	bls.n	8010c34 <UART_SetConfig+0xc9c>
 8010c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010c26:	d205      	bcs.n	8010c34 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c2a:	b29a      	uxth	r2, r3
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	60da      	str	r2, [r3, #12]
 8010c32:	e002      	b.n	8010c3a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010c34:	2301      	movs	r3, #1
 8010c36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	2201      	movs	r2, #1
 8010c3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010c42:	697b      	ldr	r3, [r7, #20]
 8010c44:	2201      	movs	r2, #1
 8010c46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010c4a:	697b      	ldr	r3, [r7, #20]
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	2200      	movs	r2, #0
 8010c54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010c56:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3748      	adds	r7, #72	@ 0x48
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010c64:	03d09000 	.word	0x03d09000
 8010c68:	003d0900 	.word	0x003d0900
 8010c6c:	080138a4 	.word	0x080138a4

08010c70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b083      	sub	sp, #12
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c7c:	f003 0308 	and.w	r3, r3, #8
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d00a      	beq.n	8010c9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	685b      	ldr	r3, [r3, #4]
 8010c8a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	430a      	orrs	r2, r1
 8010c98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c9e:	f003 0301 	and.w	r3, r3, #1
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d00a      	beq.n	8010cbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	430a      	orrs	r2, r1
 8010cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cc0:	f003 0302 	and.w	r3, r3, #2
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d00a      	beq.n	8010cde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	430a      	orrs	r2, r1
 8010cdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ce2:	f003 0304 	and.w	r3, r3, #4
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d00a      	beq.n	8010d00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	681b      	ldr	r3, [r3, #0]
 8010cee:	685b      	ldr	r3, [r3, #4]
 8010cf0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	430a      	orrs	r2, r1
 8010cfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d04:	f003 0310 	and.w	r3, r3, #16
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d00a      	beq.n	8010d22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	689b      	ldr	r3, [r3, #8]
 8010d12:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	430a      	orrs	r2, r1
 8010d20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d26:	f003 0320 	and.w	r3, r3, #32
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00a      	beq.n	8010d44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	689b      	ldr	r3, [r3, #8]
 8010d34:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	430a      	orrs	r2, r1
 8010d42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d01a      	beq.n	8010d86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	430a      	orrs	r2, r1
 8010d64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010d6e:	d10a      	bne.n	8010d86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	430a      	orrs	r2, r1
 8010d84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d00a      	beq.n	8010da8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	681b      	ldr	r3, [r3, #0]
 8010da4:	430a      	orrs	r2, r1
 8010da6:	605a      	str	r2, [r3, #4]
  }
}
 8010da8:	bf00      	nop
 8010daa:	370c      	adds	r7, #12
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b098      	sub	sp, #96	@ 0x60
 8010db8:	af02      	add	r7, sp, #8
 8010dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010dc4:	f7f3 f9f4 	bl	80041b0 <HAL_GetTick>
 8010dc8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f003 0308 	and.w	r3, r3, #8
 8010dd4:	2b08      	cmp	r3, #8
 8010dd6:	d12f      	bne.n	8010e38 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010dd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010ddc:	9300      	str	r3, [sp, #0]
 8010dde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010de0:	2200      	movs	r2, #0
 8010de2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010de6:	6878      	ldr	r0, [r7, #4]
 8010de8:	f000 f88e 	bl	8010f08 <UART_WaitOnFlagUntilTimeout>
 8010dec:	4603      	mov	r3, r0
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d022      	beq.n	8010e38 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010dfa:	e853 3f00 	ldrex	r3, [r3]
 8010dfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010e06:	653b      	str	r3, [r7, #80]	@ 0x50
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	461a      	mov	r2, r3
 8010e0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010e10:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e12:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e14:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010e16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010e18:	e841 2300 	strex	r3, r2, [r1]
 8010e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e20:	2b00      	cmp	r3, #0
 8010e22:	d1e6      	bne.n	8010df2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010e24:	687b      	ldr	r3, [r7, #4]
 8010e26:	2220      	movs	r2, #32
 8010e28:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e34:	2303      	movs	r3, #3
 8010e36:	e063      	b.n	8010f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	681b      	ldr	r3, [r3, #0]
 8010e3e:	f003 0304 	and.w	r3, r3, #4
 8010e42:	2b04      	cmp	r3, #4
 8010e44:	d149      	bne.n	8010eda <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e46:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010e4a:	9300      	str	r3, [sp, #0]
 8010e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010e4e:	2200      	movs	r2, #0
 8010e50:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 f857 	bl	8010f08 <UART_WaitOnFlagUntilTimeout>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d03c      	beq.n	8010eda <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e68:	e853 3f00 	ldrex	r3, [r3]
 8010e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8010e6e:	6a3b      	ldr	r3, [r7, #32]
 8010e70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010e7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e80:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010e84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e86:	e841 2300 	strex	r3, r2, [r1]
 8010e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1e6      	bne.n	8010e60 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	3308      	adds	r3, #8
 8010e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e9a:	693b      	ldr	r3, [r7, #16]
 8010e9c:	e853 3f00 	ldrex	r3, [r3]
 8010ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	f023 0301 	bic.w	r3, r3, #1
 8010ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	3308      	adds	r3, #8
 8010eb0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010eb2:	61fa      	str	r2, [r7, #28]
 8010eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010eb6:	69b9      	ldr	r1, [r7, #24]
 8010eb8:	69fa      	ldr	r2, [r7, #28]
 8010eba:	e841 2300 	strex	r3, r2, [r1]
 8010ebe:	617b      	str	r3, [r7, #20]
   return(result);
 8010ec0:	697b      	ldr	r3, [r7, #20]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d1e5      	bne.n	8010e92 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2220      	movs	r2, #32
 8010eca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	2200      	movs	r2, #0
 8010ed2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010ed6:	2303      	movs	r3, #3
 8010ed8:	e012      	b.n	8010f00 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2220      	movs	r2, #32
 8010ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	2220      	movs	r2, #32
 8010ee6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	2200      	movs	r2, #0
 8010eee:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2200      	movs	r2, #0
 8010ef4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2200      	movs	r2, #0
 8010efa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010efe:	2300      	movs	r3, #0
}
 8010f00:	4618      	mov	r0, r3
 8010f02:	3758      	adds	r7, #88	@ 0x58
 8010f04:	46bd      	mov	sp, r7
 8010f06:	bd80      	pop	{r7, pc}

08010f08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	60f8      	str	r0, [r7, #12]
 8010f10:	60b9      	str	r1, [r7, #8]
 8010f12:	603b      	str	r3, [r7, #0]
 8010f14:	4613      	mov	r3, r2
 8010f16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f18:	e04f      	b.n	8010fba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010f1a:	69bb      	ldr	r3, [r7, #24]
 8010f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8010f20:	d04b      	beq.n	8010fba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010f22:	f7f3 f945 	bl	80041b0 <HAL_GetTick>
 8010f26:	4602      	mov	r2, r0
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	1ad3      	subs	r3, r2, r3
 8010f2c:	69ba      	ldr	r2, [r7, #24]
 8010f2e:	429a      	cmp	r2, r3
 8010f30:	d302      	bcc.n	8010f38 <UART_WaitOnFlagUntilTimeout+0x30>
 8010f32:	69bb      	ldr	r3, [r7, #24]
 8010f34:	2b00      	cmp	r3, #0
 8010f36:	d101      	bne.n	8010f3c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010f38:	2303      	movs	r3, #3
 8010f3a:	e04e      	b.n	8010fda <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	f003 0304 	and.w	r3, r3, #4
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d037      	beq.n	8010fba <UART_WaitOnFlagUntilTimeout+0xb2>
 8010f4a:	68bb      	ldr	r3, [r7, #8]
 8010f4c:	2b80      	cmp	r3, #128	@ 0x80
 8010f4e:	d034      	beq.n	8010fba <UART_WaitOnFlagUntilTimeout+0xb2>
 8010f50:	68bb      	ldr	r3, [r7, #8]
 8010f52:	2b40      	cmp	r3, #64	@ 0x40
 8010f54:	d031      	beq.n	8010fba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	69db      	ldr	r3, [r3, #28]
 8010f5c:	f003 0308 	and.w	r3, r3, #8
 8010f60:	2b08      	cmp	r3, #8
 8010f62:	d110      	bne.n	8010f86 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2208      	movs	r2, #8
 8010f6a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f000 f921 	bl	80111b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2208      	movs	r2, #8
 8010f76:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	2200      	movs	r2, #0
 8010f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010f82:	2301      	movs	r3, #1
 8010f84:	e029      	b.n	8010fda <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	69db      	ldr	r3, [r3, #28]
 8010f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010f90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010f94:	d111      	bne.n	8010fba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010fa0:	68f8      	ldr	r0, [r7, #12]
 8010fa2:	f000 f907 	bl	80111b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	2220      	movs	r2, #32
 8010faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2200      	movs	r2, #0
 8010fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010fb6:	2303      	movs	r3, #3
 8010fb8:	e00f      	b.n	8010fda <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	69da      	ldr	r2, [r3, #28]
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	4013      	ands	r3, r2
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	429a      	cmp	r2, r3
 8010fc8:	bf0c      	ite	eq
 8010fca:	2301      	moveq	r3, #1
 8010fcc:	2300      	movne	r3, #0
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	461a      	mov	r2, r3
 8010fd2:	79fb      	ldrb	r3, [r7, #7]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d0a0      	beq.n	8010f1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010fd8:	2300      	movs	r3, #0
}
 8010fda:	4618      	mov	r0, r3
 8010fdc:	3710      	adds	r7, #16
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	bd80      	pop	{r7, pc}
	...

08010fe4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b096      	sub	sp, #88	@ 0x58
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	68ba      	ldr	r2, [r7, #8]
 8010ff6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	88fa      	ldrh	r2, [r7, #6]
 8010ffc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	2200      	movs	r2, #0
 8011004:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	2222      	movs	r2, #34	@ 0x22
 801100c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011016:	2b00      	cmp	r3, #0
 8011018:	d02d      	beq.n	8011076 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801101a:	68fb      	ldr	r3, [r7, #12]
 801101c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011020:	4a40      	ldr	r2, [pc, #256]	@ (8011124 <UART_Start_Receive_DMA+0x140>)
 8011022:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801102a:	4a3f      	ldr	r2, [pc, #252]	@ (8011128 <UART_Start_Receive_DMA+0x144>)
 801102c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8011034:	4a3d      	ldr	r2, [pc, #244]	@ (801112c <UART_Start_Receive_DMA+0x148>)
 8011036:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801103e:	2200      	movs	r2, #0
 8011040:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	3324      	adds	r3, #36	@ 0x24
 801104e:	4619      	mov	r1, r3
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011054:	461a      	mov	r2, r3
 8011056:	88fb      	ldrh	r3, [r7, #6]
 8011058:	f7f5 fc72 	bl	8006940 <HAL_DMA_Start_IT>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d009      	beq.n	8011076 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2210      	movs	r2, #16
 8011066:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	2220      	movs	r2, #32
 801106e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8011072:	2301      	movs	r3, #1
 8011074:	e051      	b.n	801111a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8011076:	68fb      	ldr	r3, [r7, #12]
 8011078:	691b      	ldr	r3, [r3, #16]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d018      	beq.n	80110b0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801107e:	68fb      	ldr	r3, [r7, #12]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011086:	e853 3f00 	ldrex	r3, [r3]
 801108a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801108c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801108e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011092:	657b      	str	r3, [r7, #84]	@ 0x54
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	681b      	ldr	r3, [r3, #0]
 8011098:	461a      	mov	r2, r3
 801109a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801109c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801109e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80110a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80110a4:	e841 2300 	strex	r3, r2, [r1]
 80110a8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80110aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d1e6      	bne.n	801107e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	3308      	adds	r3, #8
 80110b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ba:	e853 3f00 	ldrex	r3, [r3]
 80110be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80110c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110c2:	f043 0301 	orr.w	r3, r3, #1
 80110c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	681b      	ldr	r3, [r3, #0]
 80110cc:	3308      	adds	r3, #8
 80110ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80110d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80110d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80110d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80110d8:	e841 2300 	strex	r3, r2, [r1]
 80110dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80110de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	d1e5      	bne.n	80110b0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	3308      	adds	r3, #8
 80110ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ec:	697b      	ldr	r3, [r7, #20]
 80110ee:	e853 3f00 	ldrex	r3, [r3]
 80110f2:	613b      	str	r3, [r7, #16]
   return(result);
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80110fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	3308      	adds	r3, #8
 8011102:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011104:	623a      	str	r2, [r7, #32]
 8011106:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011108:	69f9      	ldr	r1, [r7, #28]
 801110a:	6a3a      	ldr	r2, [r7, #32]
 801110c:	e841 2300 	strex	r3, r2, [r1]
 8011110:	61bb      	str	r3, [r7, #24]
   return(result);
 8011112:	69bb      	ldr	r3, [r7, #24]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d1e5      	bne.n	80110e4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8011118:	2300      	movs	r3, #0
}
 801111a:	4618      	mov	r0, r3
 801111c:	3758      	adds	r7, #88	@ 0x58
 801111e:	46bd      	mov	sp, r7
 8011120:	bd80      	pop	{r7, pc}
 8011122:	bf00      	nop
 8011124:	08011333 	.word	0x08011333
 8011128:	0801145b 	.word	0x0801145b
 801112c:	08011499 	.word	0x08011499

08011130 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8011130:	b480      	push	{r7}
 8011132:	b08f      	sub	sp, #60	@ 0x3c
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801113e:	6a3b      	ldr	r3, [r7, #32]
 8011140:	e853 3f00 	ldrex	r3, [r3]
 8011144:	61fb      	str	r3, [r7, #28]
   return(result);
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 801114c:	637b      	str	r3, [r7, #52]	@ 0x34
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	681b      	ldr	r3, [r3, #0]
 8011152:	461a      	mov	r2, r3
 8011154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011156:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011158:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801115a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801115c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801115e:	e841 2300 	strex	r3, r2, [r1]
 8011162:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011166:	2b00      	cmp	r3, #0
 8011168:	d1e6      	bne.n	8011138 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	3308      	adds	r3, #8
 8011170:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	e853 3f00 	ldrex	r3, [r3]
 8011178:	60bb      	str	r3, [r7, #8]
   return(result);
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8011180:	633b      	str	r3, [r7, #48]	@ 0x30
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	3308      	adds	r3, #8
 8011188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801118a:	61ba      	str	r2, [r7, #24]
 801118c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801118e:	6979      	ldr	r1, [r7, #20]
 8011190:	69ba      	ldr	r2, [r7, #24]
 8011192:	e841 2300 	strex	r3, r2, [r1]
 8011196:	613b      	str	r3, [r7, #16]
   return(result);
 8011198:	693b      	ldr	r3, [r7, #16]
 801119a:	2b00      	cmp	r3, #0
 801119c:	d1e5      	bne.n	801116a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	2220      	movs	r2, #32
 80111a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 80111a6:	bf00      	nop
 80111a8:	373c      	adds	r7, #60	@ 0x3c
 80111aa:	46bd      	mov	sp, r7
 80111ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b0:	4770      	bx	lr
	...

080111b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b095      	sub	sp, #84	@ 0x54
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111c4:	e853 3f00 	ldrex	r3, [r3]
 80111c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80111ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80111cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80111d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	681b      	ldr	r3, [r3, #0]
 80111d6:	461a      	mov	r2, r3
 80111d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80111da:	643b      	str	r3, [r7, #64]	@ 0x40
 80111dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80111e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80111e2:	e841 2300 	strex	r3, r2, [r1]
 80111e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80111e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1e6      	bne.n	80111bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	3308      	adds	r3, #8
 80111f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111f6:	6a3b      	ldr	r3, [r7, #32]
 80111f8:	e853 3f00 	ldrex	r3, [r3]
 80111fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80111fe:	69fa      	ldr	r2, [r7, #28]
 8011200:	4b1e      	ldr	r3, [pc, #120]	@ (801127c <UART_EndRxTransfer+0xc8>)
 8011202:	4013      	ands	r3, r2
 8011204:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	3308      	adds	r3, #8
 801120c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801120e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011210:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011212:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011216:	e841 2300 	strex	r3, r2, [r1]
 801121a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801121c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801121e:	2b00      	cmp	r3, #0
 8011220:	d1e5      	bne.n	80111ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011226:	2b01      	cmp	r3, #1
 8011228:	d118      	bne.n	801125c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	e853 3f00 	ldrex	r3, [r3]
 8011236:	60bb      	str	r3, [r7, #8]
   return(result);
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	f023 0310 	bic.w	r3, r3, #16
 801123e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	461a      	mov	r2, r3
 8011246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011248:	61bb      	str	r3, [r7, #24]
 801124a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801124c:	6979      	ldr	r1, [r7, #20]
 801124e:	69ba      	ldr	r2, [r7, #24]
 8011250:	e841 2300 	strex	r3, r2, [r1]
 8011254:	613b      	str	r3, [r7, #16]
   return(result);
 8011256:	693b      	ldr	r3, [r7, #16]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1e6      	bne.n	801122a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2220      	movs	r2, #32
 8011260:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	2200      	movs	r2, #0
 8011268:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	2200      	movs	r2, #0
 801126e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8011270:	bf00      	nop
 8011272:	3754      	adds	r7, #84	@ 0x54
 8011274:	46bd      	mov	sp, r7
 8011276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801127a:	4770      	bx	lr
 801127c:	effffffe 	.word	0xeffffffe

08011280 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b090      	sub	sp, #64	@ 0x40
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801128c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	69db      	ldr	r3, [r3, #28]
 8011292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011296:	d037      	beq.n	8011308 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801129a:	2200      	movs	r2, #0
 801129c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80112a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	3308      	adds	r3, #8
 80112a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112aa:	e853 3f00 	ldrex	r3, [r3]
 80112ae:	623b      	str	r3, [r7, #32]
   return(result);
 80112b0:	6a3b      	ldr	r3, [r7, #32]
 80112b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80112b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80112b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	3308      	adds	r3, #8
 80112be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80112c0:	633a      	str	r2, [r7, #48]	@ 0x30
 80112c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80112c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80112c8:	e841 2300 	strex	r3, r2, [r1]
 80112cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80112ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d1e5      	bne.n	80112a0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80112d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	e853 3f00 	ldrex	r3, [r3]
 80112e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80112e2:	68fb      	ldr	r3, [r7, #12]
 80112e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80112ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	461a      	mov	r2, r3
 80112f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80112f2:	61fb      	str	r3, [r7, #28]
 80112f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112f6:	69b9      	ldr	r1, [r7, #24]
 80112f8:	69fa      	ldr	r2, [r7, #28]
 80112fa:	e841 2300 	strex	r3, r2, [r1]
 80112fe:	617b      	str	r3, [r7, #20]
   return(result);
 8011300:	697b      	ldr	r3, [r7, #20]
 8011302:	2b00      	cmp	r3, #0
 8011304:	d1e6      	bne.n	80112d4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011306:	e002      	b.n	801130e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011308:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801130a:	f7fe fe13 	bl	800ff34 <HAL_UART_TxCpltCallback>
}
 801130e:	bf00      	nop
 8011310:	3740      	adds	r7, #64	@ 0x40
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b084      	sub	sp, #16
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011322:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011324:	68f8      	ldr	r0, [r7, #12]
 8011326:	f7fe fe0f 	bl	800ff48 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801132a:	bf00      	nop
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}

08011332 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8011332:	b580      	push	{r7, lr}
 8011334:	b09c      	sub	sp, #112	@ 0x70
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801133e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	69db      	ldr	r3, [r3, #28]
 8011344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011348:	d071      	beq.n	801142e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 801134a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801134c:	2200      	movs	r2, #0
 801134e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801135a:	e853 3f00 	ldrex	r3, [r3]
 801135e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011360:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011362:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011366:	66bb      	str	r3, [r7, #104]	@ 0x68
 8011368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	461a      	mov	r2, r3
 801136e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011370:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011372:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011374:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011376:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011378:	e841 2300 	strex	r3, r2, [r1]
 801137c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801137e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011380:	2b00      	cmp	r3, #0
 8011382:	d1e6      	bne.n	8011352 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011384:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	3308      	adds	r3, #8
 801138a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801138c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801138e:	e853 3f00 	ldrex	r3, [r3]
 8011392:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011396:	f023 0301 	bic.w	r3, r3, #1
 801139a:	667b      	str	r3, [r7, #100]	@ 0x64
 801139c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	3308      	adds	r3, #8
 80113a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80113a4:	647a      	str	r2, [r7, #68]	@ 0x44
 80113a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80113aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80113ac:	e841 2300 	strex	r3, r2, [r1]
 80113b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80113b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d1e5      	bne.n	8011384 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80113b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	3308      	adds	r3, #8
 80113be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113c2:	e853 3f00 	ldrex	r3, [r3]
 80113c6:	623b      	str	r3, [r7, #32]
   return(result);
 80113c8:	6a3b      	ldr	r3, [r7, #32]
 80113ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80113ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80113d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	3308      	adds	r3, #8
 80113d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80113d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80113da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80113de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80113e0:	e841 2300 	strex	r3, r2, [r1]
 80113e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80113e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d1e5      	bne.n	80113b8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80113ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113ee:	2220      	movs	r2, #32
 80113f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80113f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80113f8:	2b01      	cmp	r3, #1
 80113fa:	d118      	bne.n	801142e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80113fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011402:	693b      	ldr	r3, [r7, #16]
 8011404:	e853 3f00 	ldrex	r3, [r3]
 8011408:	60fb      	str	r3, [r7, #12]
   return(result);
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	f023 0310 	bic.w	r3, r3, #16
 8011410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011412:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	461a      	mov	r2, r3
 8011418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801141a:	61fb      	str	r3, [r7, #28]
 801141c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801141e:	69b9      	ldr	r1, [r7, #24]
 8011420:	69fa      	ldr	r2, [r7, #28]
 8011422:	e841 2300 	strex	r3, r2, [r1]
 8011426:	617b      	str	r3, [r7, #20]
   return(result);
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d1e6      	bne.n	80113fc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801142e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011430:	2200      	movs	r2, #0
 8011432:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011434:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011436:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011438:	2b01      	cmp	r3, #1
 801143a:	d107      	bne.n	801144c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801143c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801143e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011442:	4619      	mov	r1, r3
 8011444:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8011446:	f7ef ff33 	bl	80012b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801144a:	e002      	b.n	8011452 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 801144c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801144e:	f7fe fd85 	bl	800ff5c <HAL_UART_RxCpltCallback>
}
 8011452:	bf00      	nop
 8011454:	3770      	adds	r7, #112	@ 0x70
 8011456:	46bd      	mov	sp, r7
 8011458:	bd80      	pop	{r7, pc}

0801145a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801145a:	b580      	push	{r7, lr}
 801145c:	b084      	sub	sp, #16
 801145e:	af00      	add	r7, sp, #0
 8011460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011466:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	2201      	movs	r2, #1
 801146c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011472:	2b01      	cmp	r3, #1
 8011474:	d109      	bne.n	801148a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011476:	68fb      	ldr	r3, [r7, #12]
 8011478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801147c:	085b      	lsrs	r3, r3, #1
 801147e:	b29b      	uxth	r3, r3
 8011480:	4619      	mov	r1, r3
 8011482:	68f8      	ldr	r0, [r7, #12]
 8011484:	f7ef ff14 	bl	80012b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011488:	e002      	b.n	8011490 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 801148a:	68f8      	ldr	r0, [r7, #12]
 801148c:	f7fe fd70 	bl	800ff70 <HAL_UART_RxHalfCpltCallback>
}
 8011490:	bf00      	nop
 8011492:	3710      	adds	r7, #16
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b086      	sub	sp, #24
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80114a6:	697b      	ldr	r3, [r7, #20]
 80114a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114ac:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80114ae:	697b      	ldr	r3, [r7, #20]
 80114b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80114b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	689b      	ldr	r3, [r3, #8]
 80114bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80114c0:	2b80      	cmp	r3, #128	@ 0x80
 80114c2:	d109      	bne.n	80114d8 <UART_DMAError+0x40>
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	2b21      	cmp	r3, #33	@ 0x21
 80114c8:	d106      	bne.n	80114d8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	2200      	movs	r2, #0
 80114ce:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80114d2:	6978      	ldr	r0, [r7, #20]
 80114d4:	f7ff fe2c 	bl	8011130 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80114d8:	697b      	ldr	r3, [r7, #20]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	689b      	ldr	r3, [r3, #8]
 80114de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80114e2:	2b40      	cmp	r3, #64	@ 0x40
 80114e4:	d109      	bne.n	80114fa <UART_DMAError+0x62>
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2b22      	cmp	r3, #34	@ 0x22
 80114ea:	d106      	bne.n	80114fa <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80114ec:	697b      	ldr	r3, [r7, #20]
 80114ee:	2200      	movs	r2, #0
 80114f0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80114f4:	6978      	ldr	r0, [r7, #20]
 80114f6:	f7ff fe5d 	bl	80111b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80114fa:	697b      	ldr	r3, [r7, #20]
 80114fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011500:	f043 0210 	orr.w	r2, r3, #16
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801150a:	6978      	ldr	r0, [r7, #20]
 801150c:	f7fe fd3a 	bl	800ff84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011510:	bf00      	nop
 8011512:	3718      	adds	r7, #24
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2200      	movs	r2, #0
 801152a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2200      	movs	r2, #0
 8011532:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011536:	68f8      	ldr	r0, [r7, #12]
 8011538:	f7fe fd24 	bl	800ff84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801153c:	bf00      	nop
 801153e:	3710      	adds	r7, #16
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}

08011544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011544:	b580      	push	{r7, lr}
 8011546:	b088      	sub	sp, #32
 8011548:	af00      	add	r7, sp, #0
 801154a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	e853 3f00 	ldrex	r3, [r3]
 8011558:	60bb      	str	r3, [r7, #8]
   return(result);
 801155a:	68bb      	ldr	r3, [r7, #8]
 801155c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011560:	61fb      	str	r3, [r7, #28]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	461a      	mov	r2, r3
 8011568:	69fb      	ldr	r3, [r7, #28]
 801156a:	61bb      	str	r3, [r7, #24]
 801156c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801156e:	6979      	ldr	r1, [r7, #20]
 8011570:	69ba      	ldr	r2, [r7, #24]
 8011572:	e841 2300 	strex	r3, r2, [r1]
 8011576:	613b      	str	r3, [r7, #16]
   return(result);
 8011578:	693b      	ldr	r3, [r7, #16]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d1e6      	bne.n	801154c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2220      	movs	r2, #32
 8011582:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2200      	movs	r2, #0
 801158a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801158c:	6878      	ldr	r0, [r7, #4]
 801158e:	f7fe fcd1 	bl	800ff34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011592:	bf00      	nop
 8011594:	3720      	adds	r7, #32
 8011596:	46bd      	mov	sp, r7
 8011598:	bd80      	pop	{r7, pc}
	...

0801159c <HAL_RS485Ex_Init>:
  *       oversampling rate).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RS485Ex_Init(UART_HandleTypeDef *huart, uint32_t Polarity, uint32_t AssertionTime,
                                   uint32_t DeassertionTime)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	b086      	sub	sp, #24
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	607a      	str	r2, [r7, #4]
 80115a8:	603b      	str	r3, [r7, #0]
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d101      	bne.n	80115b4 <HAL_RS485Ex_Init+0x18>
  {
    return HAL_ERROR;
 80115b0:	2301      	movs	r3, #1
 80115b2:	e056      	b.n	8011662 <HAL_RS485Ex_Init+0xc6>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));

  if (huart->gState == HAL_UART_STATE_RESET)
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d106      	bne.n	80115cc <HAL_RS485Ex_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2200      	movs	r2, #0
 80115c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX */
    HAL_UART_MspInit(huart);
 80115c6:	68f8      	ldr	r0, [r7, #12]
 80115c8:	f7f1 ffc8 	bl	800355c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2224      	movs	r2, #36	@ 0x24
 80115d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80115d4:	68fb      	ldr	r3, [r7, #12]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	f022 0201 	bic.w	r2, r2, #1
 80115e2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d002      	beq.n	80115f2 <HAL_RS485Ex_Init+0x56>
  {
    UART_AdvFeatureConfig(huart);
 80115ec:	68f8      	ldr	r0, [r7, #12]
 80115ee:	f7ff fb3f 	bl	8010c70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80115f2:	68f8      	ldr	r0, [r7, #12]
 80115f4:	f7fe fcd0 	bl	800ff98 <UART_SetConfig>
 80115f8:	4603      	mov	r3, r0
 80115fa:	2b01      	cmp	r3, #1
 80115fc:	d101      	bne.n	8011602 <HAL_RS485Ex_Init+0x66>
  {
    return HAL_ERROR;
 80115fe:	2301      	movs	r3, #1
 8011600:	e02f      	b.n	8011662 <HAL_RS485Ex_Init+0xc6>
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	689a      	ldr	r2, [r3, #8]
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8011610:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	681b      	ldr	r3, [r3, #0]
 8011616:	689b      	ldr	r3, [r3, #8]
 8011618:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	430a      	orrs	r2, r1
 8011624:	609a      	str	r2, [r3, #8]

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	055b      	lsls	r3, r3, #21
 801162a:	617b      	str	r3, [r7, #20]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	041b      	lsls	r3, r3, #16
 8011630:	697a      	ldr	r2, [r7, #20]
 8011632:	4313      	orrs	r3, r2
 8011634:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	4b0b      	ldr	r3, [pc, #44]	@ (801166c <HAL_RS485Ex_Init+0xd0>)
 801163e:	4013      	ands	r3, r2
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	6812      	ldr	r2, [r2, #0]
 8011644:	6979      	ldr	r1, [r7, #20]
 8011646:	430b      	orrs	r3, r1
 8011648:	6013      	str	r3, [r2, #0]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	681a      	ldr	r2, [r3, #0]
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	f042 0201 	orr.w	r2, r2, #1
 8011658:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f7ff fbaa 	bl	8010db4 <UART_CheckIdleState>
 8011660:	4603      	mov	r3, r0
}
 8011662:	4618      	mov	r0, r3
 8011664:	3718      	adds	r7, #24
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	fc00ffff 	.word	0xfc00ffff

08011670 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011670:	b480      	push	{r7}
 8011672:	b083      	sub	sp, #12
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011678:	bf00      	nop
 801167a:	370c      	adds	r7, #12
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011684:	b480      	push	{r7}
 8011686:	b083      	sub	sp, #12
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801168c:	bf00      	nop
 801168e:	370c      	adds	r7, #12
 8011690:	46bd      	mov	sp, r7
 8011692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011696:	4770      	bx	lr

08011698 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011698:	b480      	push	{r7}
 801169a:	b083      	sub	sp, #12
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80116a0:	bf00      	nop
 80116a2:	370c      	adds	r7, #12
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr

080116ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80116ba:	2b01      	cmp	r3, #1
 80116bc:	d101      	bne.n	80116c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80116be:	2302      	movs	r3, #2
 80116c0:	e027      	b.n	8011712 <HAL_UARTEx_DisableFifoMode+0x66>
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2201      	movs	r2, #1
 80116c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2224      	movs	r2, #36	@ 0x24
 80116ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	681b      	ldr	r3, [r3, #0]
 80116de:	681a      	ldr	r2, [r3, #0]
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f022 0201 	bic.w	r2, r2, #1
 80116e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80116f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	681b      	ldr	r3, [r3, #0]
 80116fc:	68fa      	ldr	r2, [r7, #12]
 80116fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2220      	movs	r2, #32
 8011704:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2200      	movs	r2, #0
 801170c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011710:	2300      	movs	r3, #0
}
 8011712:	4618      	mov	r0, r3
 8011714:	3714      	adds	r7, #20
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr

0801171e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801171e:	b580      	push	{r7, lr}
 8011720:	b084      	sub	sp, #16
 8011722:	af00      	add	r7, sp, #0
 8011724:	6078      	str	r0, [r7, #4]
 8011726:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801172e:	2b01      	cmp	r3, #1
 8011730:	d101      	bne.n	8011736 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011732:	2302      	movs	r3, #2
 8011734:	e02d      	b.n	8011792 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	2201      	movs	r2, #1
 801173a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	2224      	movs	r2, #36	@ 0x24
 8011742:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f022 0201 	bic.w	r2, r2, #1
 801175c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	689b      	ldr	r3, [r3, #8]
 8011764:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	683a      	ldr	r2, [r7, #0]
 801176e:	430a      	orrs	r2, r1
 8011770:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011772:	6878      	ldr	r0, [r7, #4]
 8011774:	f000 f8a4 	bl	80118c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	68fa      	ldr	r2, [r7, #12]
 801177e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2220      	movs	r2, #32
 8011784:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011790:	2300      	movs	r3, #0
}
 8011792:	4618      	mov	r0, r3
 8011794:	3710      	adds	r7, #16
 8011796:	46bd      	mov	sp, r7
 8011798:	bd80      	pop	{r7, pc}

0801179a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801179a:	b580      	push	{r7, lr}
 801179c:	b084      	sub	sp, #16
 801179e:	af00      	add	r7, sp, #0
 80117a0:	6078      	str	r0, [r7, #4]
 80117a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80117aa:	2b01      	cmp	r3, #1
 80117ac:	d101      	bne.n	80117b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80117ae:	2302      	movs	r3, #2
 80117b0:	e02d      	b.n	801180e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	2201      	movs	r2, #1
 80117b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	2224      	movs	r2, #36	@ 0x24
 80117be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	f022 0201 	bic.w	r2, r2, #1
 80117d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	689b      	ldr	r3, [r3, #8]
 80117e0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	683a      	ldr	r2, [r7, #0]
 80117ea:	430a      	orrs	r2, r1
 80117ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80117ee:	6878      	ldr	r0, [r7, #4]
 80117f0:	f000 f866 	bl	80118c0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	68fa      	ldr	r2, [r7, #12]
 80117fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2220      	movs	r2, #32
 8011800:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2200      	movs	r2, #0
 8011808:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801180c:	2300      	movs	r3, #0
}
 801180e:	4618      	mov	r0, r3
 8011810:	3710      	adds	r7, #16
 8011812:	46bd      	mov	sp, r7
 8011814:	bd80      	pop	{r7, pc}

08011816 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011816:	b580      	push	{r7, lr}
 8011818:	b08c      	sub	sp, #48	@ 0x30
 801181a:	af00      	add	r7, sp, #0
 801181c:	60f8      	str	r0, [r7, #12]
 801181e:	60b9      	str	r1, [r7, #8]
 8011820:	4613      	mov	r3, r2
 8011822:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011824:	68fb      	ldr	r3, [r7, #12]
 8011826:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801182a:	2b20      	cmp	r3, #32
 801182c:	d142      	bne.n	80118b4 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801182e:	68bb      	ldr	r3, [r7, #8]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d002      	beq.n	801183a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8011834:	88fb      	ldrh	r3, [r7, #6]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d101      	bne.n	801183e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 801183a:	2301      	movs	r3, #1
 801183c:	e03b      	b.n	80118b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	2201      	movs	r2, #1
 8011842:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	2200      	movs	r2, #0
 8011848:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 801184a:	88fb      	ldrh	r3, [r7, #6]
 801184c:	461a      	mov	r2, r3
 801184e:	68b9      	ldr	r1, [r7, #8]
 8011850:	68f8      	ldr	r0, [r7, #12]
 8011852:	f7ff fbc7 	bl	8010fe4 <UART_Start_Receive_DMA>
 8011856:	4603      	mov	r3, r0
 8011858:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801185c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8011860:	2b00      	cmp	r3, #0
 8011862:	d124      	bne.n	80118ae <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011868:	2b01      	cmp	r3, #1
 801186a:	d11d      	bne.n	80118a8 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2210      	movs	r2, #16
 8011872:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801187a:	69bb      	ldr	r3, [r7, #24]
 801187c:	e853 3f00 	ldrex	r3, [r3]
 8011880:	617b      	str	r3, [r7, #20]
   return(result);
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	f043 0310 	orr.w	r3, r3, #16
 8011888:	62bb      	str	r3, [r7, #40]	@ 0x28
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	461a      	mov	r2, r3
 8011890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011892:	627b      	str	r3, [r7, #36]	@ 0x24
 8011894:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011896:	6a39      	ldr	r1, [r7, #32]
 8011898:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801189a:	e841 2300 	strex	r3, r2, [r1]
 801189e:	61fb      	str	r3, [r7, #28]
   return(result);
 80118a0:	69fb      	ldr	r3, [r7, #28]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d1e6      	bne.n	8011874 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 80118a6:	e002      	b.n	80118ae <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80118a8:	2301      	movs	r3, #1
 80118aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80118ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80118b2:	e000      	b.n	80118b6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80118b4:	2302      	movs	r3, #2
  }
}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3730      	adds	r7, #48	@ 0x30
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
	...

080118c0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80118c0:	b480      	push	{r7}
 80118c2:	b085      	sub	sp, #20
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d108      	bne.n	80118e2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2201      	movs	r2, #1
 80118d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	2201      	movs	r2, #1
 80118dc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80118e0:	e031      	b.n	8011946 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80118e2:	2310      	movs	r3, #16
 80118e4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80118e6:	2310      	movs	r3, #16
 80118e8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	689b      	ldr	r3, [r3, #8]
 80118f0:	0e5b      	lsrs	r3, r3, #25
 80118f2:	b2db      	uxtb	r3, r3
 80118f4:	f003 0307 	and.w	r3, r3, #7
 80118f8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	689b      	ldr	r3, [r3, #8]
 8011900:	0f5b      	lsrs	r3, r3, #29
 8011902:	b2db      	uxtb	r3, r3
 8011904:	f003 0307 	and.w	r3, r3, #7
 8011908:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801190a:	7bbb      	ldrb	r3, [r7, #14]
 801190c:	7b3a      	ldrb	r2, [r7, #12]
 801190e:	4911      	ldr	r1, [pc, #68]	@ (8011954 <UARTEx_SetNbDataToProcess+0x94>)
 8011910:	5c8a      	ldrb	r2, [r1, r2]
 8011912:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011916:	7b3a      	ldrb	r2, [r7, #12]
 8011918:	490f      	ldr	r1, [pc, #60]	@ (8011958 <UARTEx_SetNbDataToProcess+0x98>)
 801191a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801191c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011920:	b29a      	uxth	r2, r3
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011928:	7bfb      	ldrb	r3, [r7, #15]
 801192a:	7b7a      	ldrb	r2, [r7, #13]
 801192c:	4909      	ldr	r1, [pc, #36]	@ (8011954 <UARTEx_SetNbDataToProcess+0x94>)
 801192e:	5c8a      	ldrb	r2, [r1, r2]
 8011930:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011934:	7b7a      	ldrb	r2, [r7, #13]
 8011936:	4908      	ldr	r1, [pc, #32]	@ (8011958 <UARTEx_SetNbDataToProcess+0x98>)
 8011938:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801193a:	fb93 f3f2 	sdiv	r3, r3, r2
 801193e:	b29a      	uxth	r2, r3
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8011946:	bf00      	nop
 8011948:	3714      	adds	r7, #20
 801194a:	46bd      	mov	sp, r7
 801194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011950:	4770      	bx	lr
 8011952:	bf00      	nop
 8011954:	080138bc 	.word	0x080138bc
 8011958:	080138c4 	.word	0x080138c4

0801195c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801195c:	b480      	push	{r7}
 801195e:	b085      	sub	sp, #20
 8011960:	af00      	add	r7, sp, #0
 8011962:	4603      	mov	r3, r0
 8011964:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011966:	2300      	movs	r3, #0
 8011968:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801196a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801196e:	2b84      	cmp	r3, #132	@ 0x84
 8011970:	d005      	beq.n	801197e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	4413      	add	r3, r2
 801197a:	3303      	adds	r3, #3
 801197c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801197e:	68fb      	ldr	r3, [r7, #12]
}
 8011980:	4618      	mov	r0, r3
 8011982:	3714      	adds	r7, #20
 8011984:	46bd      	mov	sp, r7
 8011986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198a:	4770      	bx	lr

0801198c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011990:	f000 fae4 	bl	8011f5c <vTaskStartScheduler>
  
  return osOK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	bd80      	pop	{r7, pc}

0801199a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801199a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801199c:	b089      	sub	sp, #36	@ 0x24
 801199e:	af04      	add	r7, sp, #16
 80119a0:	6078      	str	r0, [r7, #4]
 80119a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	695b      	ldr	r3, [r3, #20]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d020      	beq.n	80119ee <osThreadCreate+0x54>
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	699b      	ldr	r3, [r3, #24]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d01c      	beq.n	80119ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	685c      	ldr	r4, [r3, #4]
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	691e      	ldr	r6, [r3, #16]
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7ff ffc8 	bl	801195c <makeFreeRtosPriority>
 80119cc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	695b      	ldr	r3, [r3, #20]
 80119d2:	687a      	ldr	r2, [r7, #4]
 80119d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119d6:	9202      	str	r2, [sp, #8]
 80119d8:	9301      	str	r3, [sp, #4]
 80119da:	9100      	str	r1, [sp, #0]
 80119dc:	683b      	ldr	r3, [r7, #0]
 80119de:	4632      	mov	r2, r6
 80119e0:	4629      	mov	r1, r5
 80119e2:	4620      	mov	r0, r4
 80119e4:	f000 f8ed 	bl	8011bc2 <xTaskCreateStatic>
 80119e8:	4603      	mov	r3, r0
 80119ea:	60fb      	str	r3, [r7, #12]
 80119ec:	e01c      	b.n	8011a28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	685c      	ldr	r4, [r3, #4]
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80119fa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011a02:	4618      	mov	r0, r3
 8011a04:	f7ff ffaa 	bl	801195c <makeFreeRtosPriority>
 8011a08:	4602      	mov	r2, r0
 8011a0a:	f107 030c 	add.w	r3, r7, #12
 8011a0e:	9301      	str	r3, [sp, #4]
 8011a10:	9200      	str	r2, [sp, #0]
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	4632      	mov	r2, r6
 8011a16:	4629      	mov	r1, r5
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f000 f932 	bl	8011c82 <xTaskCreate>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	2b01      	cmp	r3, #1
 8011a22:	d001      	beq.n	8011a28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011a24:	2300      	movs	r3, #0
 8011a26:	e000      	b.n	8011a2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011a28:	68fb      	ldr	r3, [r7, #12]
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	3714      	adds	r7, #20
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011a32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b084      	sub	sp, #16
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d001      	beq.n	8011a48 <osDelay+0x16>
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	e000      	b.n	8011a4a <osDelay+0x18>
 8011a48:	2301      	movs	r3, #1
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f000 fa50 	bl	8011ef0 <vTaskDelay>
  
  return osOK;
 8011a50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}

08011a5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011a5a:	b480      	push	{r7}
 8011a5c:	b083      	sub	sp, #12
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f103 0208 	add.w	r2, r3, #8
 8011a68:	687b      	ldr	r3, [r7, #4]
 8011a6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011a72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f103 0208 	add.w	r2, r3, #8
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	f103 0208 	add.w	r2, r3, #8
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011a8e:	bf00      	nop
 8011a90:	370c      	adds	r7, #12
 8011a92:	46bd      	mov	sp, r7
 8011a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a98:	4770      	bx	lr

08011a9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011a9a:	b480      	push	{r7}
 8011a9c:	b083      	sub	sp, #12
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8011aa8:	bf00      	nop
 8011aaa:	370c      	adds	r7, #12
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr

08011ab4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011ab4:	b480      	push	{r7}
 8011ab6:	b085      	sub	sp, #20
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	6078      	str	r0, [r7, #4]
 8011abc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	685b      	ldr	r3, [r3, #4]
 8011ac2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011ac4:	683b      	ldr	r3, [r7, #0]
 8011ac6:	68fa      	ldr	r2, [r7, #12]
 8011ac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	689a      	ldr	r2, [r3, #8]
 8011ace:	683b      	ldr	r3, [r7, #0]
 8011ad0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	689b      	ldr	r3, [r3, #8]
 8011ad6:	683a      	ldr	r2, [r7, #0]
 8011ad8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	683a      	ldr	r2, [r7, #0]
 8011ade:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011ae0:	683b      	ldr	r3, [r7, #0]
 8011ae2:	687a      	ldr	r2, [r7, #4]
 8011ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	681b      	ldr	r3, [r3, #0]
 8011aea:	1c5a      	adds	r2, r3, #1
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	601a      	str	r2, [r3, #0]
}
 8011af0:	bf00      	nop
 8011af2:	3714      	adds	r7, #20
 8011af4:	46bd      	mov	sp, r7
 8011af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afa:	4770      	bx	lr

08011afc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011afc:	b480      	push	{r7}
 8011afe:	b085      	sub	sp, #20
 8011b00:	af00      	add	r7, sp, #0
 8011b02:	6078      	str	r0, [r7, #4]
 8011b04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011b12:	d103      	bne.n	8011b1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	691b      	ldr	r3, [r3, #16]
 8011b18:	60fb      	str	r3, [r7, #12]
 8011b1a:	e00c      	b.n	8011b36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	3308      	adds	r3, #8
 8011b20:	60fb      	str	r3, [r7, #12]
 8011b22:	e002      	b.n	8011b2a <vListInsert+0x2e>
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	685b      	ldr	r3, [r3, #4]
 8011b28:	60fb      	str	r3, [r7, #12]
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	68ba      	ldr	r2, [r7, #8]
 8011b32:	429a      	cmp	r2, r3
 8011b34:	d2f6      	bcs.n	8011b24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	685a      	ldr	r2, [r3, #4]
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	683a      	ldr	r2, [r7, #0]
 8011b44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	68fa      	ldr	r2, [r7, #12]
 8011b4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	687a      	ldr	r2, [r7, #4]
 8011b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	1c5a      	adds	r2, r3, #1
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	601a      	str	r2, [r3, #0]
}
 8011b62:	bf00      	nop
 8011b64:	3714      	adds	r7, #20
 8011b66:	46bd      	mov	sp, r7
 8011b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6c:	4770      	bx	lr

08011b6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011b6e:	b480      	push	{r7}
 8011b70:	b085      	sub	sp, #20
 8011b72:	af00      	add	r7, sp, #0
 8011b74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	691b      	ldr	r3, [r3, #16]
 8011b7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	685b      	ldr	r3, [r3, #4]
 8011b80:	687a      	ldr	r2, [r7, #4]
 8011b82:	6892      	ldr	r2, [r2, #8]
 8011b84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	689b      	ldr	r3, [r3, #8]
 8011b8a:	687a      	ldr	r2, [r7, #4]
 8011b8c:	6852      	ldr	r2, [r2, #4]
 8011b8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	685b      	ldr	r3, [r3, #4]
 8011b94:	687a      	ldr	r2, [r7, #4]
 8011b96:	429a      	cmp	r2, r3
 8011b98:	d103      	bne.n	8011ba2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	689a      	ldr	r2, [r3, #8]
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	1e5a      	subs	r2, r3, #1
 8011bae:	68fb      	ldr	r3, [r7, #12]
 8011bb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	681b      	ldr	r3, [r3, #0]
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3714      	adds	r7, #20
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr

08011bc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011bc2:	b580      	push	{r7, lr}
 8011bc4:	b08e      	sub	sp, #56	@ 0x38
 8011bc6:	af04      	add	r7, sp, #16
 8011bc8:	60f8      	str	r0, [r7, #12]
 8011bca:	60b9      	str	r1, [r7, #8]
 8011bcc:	607a      	str	r2, [r7, #4]
 8011bce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011bd2:	2b00      	cmp	r3, #0
 8011bd4:	d10b      	bne.n	8011bee <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bda:	f383 8811 	msr	BASEPRI, r3
 8011bde:	f3bf 8f6f 	isb	sy
 8011be2:	f3bf 8f4f 	dsb	sy
 8011be6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011be8:	bf00      	nop
 8011bea:	bf00      	nop
 8011bec:	e7fd      	b.n	8011bea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8011bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d10b      	bne.n	8011c0c <xTaskCreateStatic+0x4a>
	__asm volatile
 8011bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bf8:	f383 8811 	msr	BASEPRI, r3
 8011bfc:	f3bf 8f6f 	isb	sy
 8011c00:	f3bf 8f4f 	dsb	sy
 8011c04:	61fb      	str	r3, [r7, #28]
}
 8011c06:	bf00      	nop
 8011c08:	bf00      	nop
 8011c0a:	e7fd      	b.n	8011c08 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011c0c:	2354      	movs	r3, #84	@ 0x54
 8011c0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	2b54      	cmp	r3, #84	@ 0x54
 8011c14:	d00b      	beq.n	8011c2e <xTaskCreateStatic+0x6c>
	__asm volatile
 8011c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c1a:	f383 8811 	msr	BASEPRI, r3
 8011c1e:	f3bf 8f6f 	isb	sy
 8011c22:	f3bf 8f4f 	dsb	sy
 8011c26:	61bb      	str	r3, [r7, #24]
}
 8011c28:	bf00      	nop
 8011c2a:	bf00      	nop
 8011c2c:	e7fd      	b.n	8011c2a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011c2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d01e      	beq.n	8011c74 <xTaskCreateStatic+0xb2>
 8011c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d01b      	beq.n	8011c74 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c3e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011c44:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c48:	2202      	movs	r2, #2
 8011c4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011c4e:	2300      	movs	r3, #0
 8011c50:	9303      	str	r3, [sp, #12]
 8011c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c54:	9302      	str	r3, [sp, #8]
 8011c56:	f107 0314 	add.w	r3, r7, #20
 8011c5a:	9301      	str	r3, [sp, #4]
 8011c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c5e:	9300      	str	r3, [sp, #0]
 8011c60:	683b      	ldr	r3, [r7, #0]
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	68b9      	ldr	r1, [r7, #8]
 8011c66:	68f8      	ldr	r0, [r7, #12]
 8011c68:	f000 f850 	bl	8011d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011c6e:	f000 f8d5 	bl	8011e1c <prvAddNewTaskToReadyList>
 8011c72:	e001      	b.n	8011c78 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8011c74:	2300      	movs	r3, #0
 8011c76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011c78:	697b      	ldr	r3, [r7, #20]
	}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	3728      	adds	r7, #40	@ 0x28
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}

08011c82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011c82:	b580      	push	{r7, lr}
 8011c84:	b08c      	sub	sp, #48	@ 0x30
 8011c86:	af04      	add	r7, sp, #16
 8011c88:	60f8      	str	r0, [r7, #12]
 8011c8a:	60b9      	str	r1, [r7, #8]
 8011c8c:	603b      	str	r3, [r7, #0]
 8011c8e:	4613      	mov	r3, r2
 8011c90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011c92:	88fb      	ldrh	r3, [r7, #6]
 8011c94:	009b      	lsls	r3, r3, #2
 8011c96:	4618      	mov	r0, r3
 8011c98:	f000 feee 	bl	8012a78 <pvPortMalloc>
 8011c9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d00e      	beq.n	8011cc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011ca4:	2054      	movs	r0, #84	@ 0x54
 8011ca6:	f000 fee7 	bl	8012a78 <pvPortMalloc>
 8011caa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011cac:	69fb      	ldr	r3, [r7, #28]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d003      	beq.n	8011cba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011cb2:	69fb      	ldr	r3, [r7, #28]
 8011cb4:	697a      	ldr	r2, [r7, #20]
 8011cb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8011cb8:	e005      	b.n	8011cc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011cba:	6978      	ldr	r0, [r7, #20]
 8011cbc:	f000 ffaa 	bl	8012c14 <vPortFree>
 8011cc0:	e001      	b.n	8011cc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011cc6:	69fb      	ldr	r3, [r7, #28]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d017      	beq.n	8011cfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011cd4:	88fa      	ldrh	r2, [r7, #6]
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	9303      	str	r3, [sp, #12]
 8011cda:	69fb      	ldr	r3, [r7, #28]
 8011cdc:	9302      	str	r3, [sp, #8]
 8011cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce0:	9301      	str	r3, [sp, #4]
 8011ce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ce4:	9300      	str	r3, [sp, #0]
 8011ce6:	683b      	ldr	r3, [r7, #0]
 8011ce8:	68b9      	ldr	r1, [r7, #8]
 8011cea:	68f8      	ldr	r0, [r7, #12]
 8011cec:	f000 f80e 	bl	8011d0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011cf0:	69f8      	ldr	r0, [r7, #28]
 8011cf2:	f000 f893 	bl	8011e1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011cf6:	2301      	movs	r3, #1
 8011cf8:	61bb      	str	r3, [r7, #24]
 8011cfa:	e002      	b.n	8011d02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011cfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8011d00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011d02:	69bb      	ldr	r3, [r7, #24]
	}
 8011d04:	4618      	mov	r0, r3
 8011d06:	3720      	adds	r7, #32
 8011d08:	46bd      	mov	sp, r7
 8011d0a:	bd80      	pop	{r7, pc}

08011d0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b088      	sub	sp, #32
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60f8      	str	r0, [r7, #12]
 8011d14:	60b9      	str	r1, [r7, #8]
 8011d16:	607a      	str	r2, [r7, #4]
 8011d18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011d1e:	6879      	ldr	r1, [r7, #4]
 8011d20:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011d24:	440b      	add	r3, r1
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4413      	add	r3, r2
 8011d2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011d2c:	69bb      	ldr	r3, [r7, #24]
 8011d2e:	f023 0307 	bic.w	r3, r3, #7
 8011d32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	f003 0307 	and.w	r3, r3, #7
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d00b      	beq.n	8011d56 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8011d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d42:	f383 8811 	msr	BASEPRI, r3
 8011d46:	f3bf 8f6f 	isb	sy
 8011d4a:	f3bf 8f4f 	dsb	sy
 8011d4e:	617b      	str	r3, [r7, #20]
}
 8011d50:	bf00      	nop
 8011d52:	bf00      	nop
 8011d54:	e7fd      	b.n	8011d52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011d56:	68bb      	ldr	r3, [r7, #8]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d01f      	beq.n	8011d9c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	61fb      	str	r3, [r7, #28]
 8011d60:	e012      	b.n	8011d88 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011d62:	68ba      	ldr	r2, [r7, #8]
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	4413      	add	r3, r2
 8011d68:	7819      	ldrb	r1, [r3, #0]
 8011d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	4413      	add	r3, r2
 8011d70:	3334      	adds	r3, #52	@ 0x34
 8011d72:	460a      	mov	r2, r1
 8011d74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011d76:	68ba      	ldr	r2, [r7, #8]
 8011d78:	69fb      	ldr	r3, [r7, #28]
 8011d7a:	4413      	add	r3, r2
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d006      	beq.n	8011d90 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d82:	69fb      	ldr	r3, [r7, #28]
 8011d84:	3301      	adds	r3, #1
 8011d86:	61fb      	str	r3, [r7, #28]
 8011d88:	69fb      	ldr	r3, [r7, #28]
 8011d8a:	2b0f      	cmp	r3, #15
 8011d8c:	d9e9      	bls.n	8011d62 <prvInitialiseNewTask+0x56>
 8011d8e:	e000      	b.n	8011d92 <prvInitialiseNewTask+0x86>
			{
				break;
 8011d90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d94:	2200      	movs	r2, #0
 8011d96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011d9a:	e003      	b.n	8011da4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d9e:	2200      	movs	r2, #0
 8011da0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011da6:	2b06      	cmp	r3, #6
 8011da8:	d901      	bls.n	8011dae <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011daa:	2306      	movs	r3, #6
 8011dac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011db2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011db8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dbc:	2200      	movs	r2, #0
 8011dbe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dc2:	3304      	adds	r3, #4
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7ff fe68 	bl	8011a9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dcc:	3318      	adds	r3, #24
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7ff fe63 	bl	8011a9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011dd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ddc:	f1c3 0207 	rsb	r2, r3, #7
 8011de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011de2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011de6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011de8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011dec:	2200      	movs	r2, #0
 8011dee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011df2:	2200      	movs	r2, #0
 8011df4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011df8:	683a      	ldr	r2, [r7, #0]
 8011dfa:	68f9      	ldr	r1, [r7, #12]
 8011dfc:	69b8      	ldr	r0, [r7, #24]
 8011dfe:	f000 fc2b 	bl	8012658 <pxPortInitialiseStack>
 8011e02:	4602      	mov	r2, r0
 8011e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d002      	beq.n	8011e14 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e14:	bf00      	nop
 8011e16:	3720      	adds	r7, #32
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b082      	sub	sp, #8
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011e24:	f000 fd48 	bl	80128b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011e28:	4b2a      	ldr	r3, [pc, #168]	@ (8011ed4 <prvAddNewTaskToReadyList+0xb8>)
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	4a29      	ldr	r2, [pc, #164]	@ (8011ed4 <prvAddNewTaskToReadyList+0xb8>)
 8011e30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011e32:	4b29      	ldr	r3, [pc, #164]	@ (8011ed8 <prvAddNewTaskToReadyList+0xbc>)
 8011e34:	681b      	ldr	r3, [r3, #0]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d109      	bne.n	8011e4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011e3a:	4a27      	ldr	r2, [pc, #156]	@ (8011ed8 <prvAddNewTaskToReadyList+0xbc>)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011e40:	4b24      	ldr	r3, [pc, #144]	@ (8011ed4 <prvAddNewTaskToReadyList+0xb8>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b01      	cmp	r3, #1
 8011e46:	d110      	bne.n	8011e6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011e48:	f000 fac4 	bl	80123d4 <prvInitialiseTaskLists>
 8011e4c:	e00d      	b.n	8011e6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011e4e:	4b23      	ldr	r3, [pc, #140]	@ (8011edc <prvAddNewTaskToReadyList+0xc0>)
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d109      	bne.n	8011e6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011e56:	4b20      	ldr	r3, [pc, #128]	@ (8011ed8 <prvAddNewTaskToReadyList+0xbc>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d802      	bhi.n	8011e6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011e64:	4a1c      	ldr	r2, [pc, #112]	@ (8011ed8 <prvAddNewTaskToReadyList+0xbc>)
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8011ee0 <prvAddNewTaskToReadyList+0xc4>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	3301      	adds	r3, #1
 8011e70:	4a1b      	ldr	r2, [pc, #108]	@ (8011ee0 <prvAddNewTaskToReadyList+0xc4>)
 8011e72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e78:	2201      	movs	r2, #1
 8011e7a:	409a      	lsls	r2, r3
 8011e7c:	4b19      	ldr	r3, [pc, #100]	@ (8011ee4 <prvAddNewTaskToReadyList+0xc8>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	4313      	orrs	r3, r2
 8011e82:	4a18      	ldr	r2, [pc, #96]	@ (8011ee4 <prvAddNewTaskToReadyList+0xc8>)
 8011e84:	6013      	str	r3, [r2, #0]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e8a:	4613      	mov	r3, r2
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	4413      	add	r3, r2
 8011e90:	009b      	lsls	r3, r3, #2
 8011e92:	4a15      	ldr	r2, [pc, #84]	@ (8011ee8 <prvAddNewTaskToReadyList+0xcc>)
 8011e94:	441a      	add	r2, r3
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	3304      	adds	r3, #4
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	4610      	mov	r0, r2
 8011e9e:	f7ff fe09 	bl	8011ab4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011ea2:	f000 fd3b 	bl	801291c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8011edc <prvAddNewTaskToReadyList+0xc0>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d00e      	beq.n	8011ecc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011eae:	4b0a      	ldr	r3, [pc, #40]	@ (8011ed8 <prvAddNewTaskToReadyList+0xbc>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eb8:	429a      	cmp	r2, r3
 8011eba:	d207      	bcs.n	8011ecc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8011eec <prvAddNewTaskToReadyList+0xd0>)
 8011ebe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011ec2:	601a      	str	r2, [r3, #0]
 8011ec4:	f3bf 8f4f 	dsb	sy
 8011ec8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011ecc:	bf00      	nop
 8011ece:	3708      	adds	r7, #8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	24001558 	.word	0x24001558
 8011ed8:	24001458 	.word	0x24001458
 8011edc:	24001564 	.word	0x24001564
 8011ee0:	24001574 	.word	0x24001574
 8011ee4:	24001560 	.word	0x24001560
 8011ee8:	2400145c 	.word	0x2400145c
 8011eec:	e000ed04 	.word	0xe000ed04

08011ef0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011ef0:	b580      	push	{r7, lr}
 8011ef2:	b084      	sub	sp, #16
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011ef8:	2300      	movs	r3, #0
 8011efa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d018      	beq.n	8011f34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011f02:	4b14      	ldr	r3, [pc, #80]	@ (8011f54 <vTaskDelay+0x64>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	d00b      	beq.n	8011f22 <vTaskDelay+0x32>
	__asm volatile
 8011f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f0e:	f383 8811 	msr	BASEPRI, r3
 8011f12:	f3bf 8f6f 	isb	sy
 8011f16:	f3bf 8f4f 	dsb	sy
 8011f1a:	60bb      	str	r3, [r7, #8]
}
 8011f1c:	bf00      	nop
 8011f1e:	bf00      	nop
 8011f20:	e7fd      	b.n	8011f1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011f22:	f000 f87d 	bl	8012020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011f26:	2100      	movs	r1, #0
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f000 fb2f 	bl	801258c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011f2e:	f000 f885 	bl	801203c <xTaskResumeAll>
 8011f32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d107      	bne.n	8011f4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8011f3a:	4b07      	ldr	r3, [pc, #28]	@ (8011f58 <vTaskDelay+0x68>)
 8011f3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f40:	601a      	str	r2, [r3, #0]
 8011f42:	f3bf 8f4f 	dsb	sy
 8011f46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011f4a:	bf00      	nop
 8011f4c:	3710      	adds	r7, #16
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	24001580 	.word	0x24001580
 8011f58:	e000ed04 	.word	0xe000ed04

08011f5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b08a      	sub	sp, #40	@ 0x28
 8011f60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011f62:	2300      	movs	r3, #0
 8011f64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011f66:	2300      	movs	r3, #0
 8011f68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011f6a:	463a      	mov	r2, r7
 8011f6c:	1d39      	adds	r1, r7, #4
 8011f6e:	f107 0308 	add.w	r3, r7, #8
 8011f72:	4618      	mov	r0, r3
 8011f74:	f7ef fb3e 	bl	80015f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011f78:	6839      	ldr	r1, [r7, #0]
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	68ba      	ldr	r2, [r7, #8]
 8011f7e:	9202      	str	r2, [sp, #8]
 8011f80:	9301      	str	r3, [sp, #4]
 8011f82:	2300      	movs	r3, #0
 8011f84:	9300      	str	r3, [sp, #0]
 8011f86:	2300      	movs	r3, #0
 8011f88:	460a      	mov	r2, r1
 8011f8a:	491f      	ldr	r1, [pc, #124]	@ (8012008 <vTaskStartScheduler+0xac>)
 8011f8c:	481f      	ldr	r0, [pc, #124]	@ (801200c <vTaskStartScheduler+0xb0>)
 8011f8e:	f7ff fe18 	bl	8011bc2 <xTaskCreateStatic>
 8011f92:	4603      	mov	r3, r0
 8011f94:	4a1e      	ldr	r2, [pc, #120]	@ (8012010 <vTaskStartScheduler+0xb4>)
 8011f96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011f98:	4b1d      	ldr	r3, [pc, #116]	@ (8012010 <vTaskStartScheduler+0xb4>)
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d002      	beq.n	8011fa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	617b      	str	r3, [r7, #20]
 8011fa4:	e001      	b.n	8011faa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d116      	bne.n	8011fde <vTaskStartScheduler+0x82>
	__asm volatile
 8011fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fb4:	f383 8811 	msr	BASEPRI, r3
 8011fb8:	f3bf 8f6f 	isb	sy
 8011fbc:	f3bf 8f4f 	dsb	sy
 8011fc0:	613b      	str	r3, [r7, #16]
}
 8011fc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011fc4:	4b13      	ldr	r3, [pc, #76]	@ (8012014 <vTaskStartScheduler+0xb8>)
 8011fc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8011fca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011fcc:	4b12      	ldr	r3, [pc, #72]	@ (8012018 <vTaskStartScheduler+0xbc>)
 8011fce:	2201      	movs	r2, #1
 8011fd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011fd2:	4b12      	ldr	r3, [pc, #72]	@ (801201c <vTaskStartScheduler+0xc0>)
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011fd8:	f000 fbca 	bl	8012770 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011fdc:	e00f      	b.n	8011ffe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011fde:	697b      	ldr	r3, [r7, #20]
 8011fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011fe4:	d10b      	bne.n	8011ffe <vTaskStartScheduler+0xa2>
	__asm volatile
 8011fe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fea:	f383 8811 	msr	BASEPRI, r3
 8011fee:	f3bf 8f6f 	isb	sy
 8011ff2:	f3bf 8f4f 	dsb	sy
 8011ff6:	60fb      	str	r3, [r7, #12]
}
 8011ff8:	bf00      	nop
 8011ffa:	bf00      	nop
 8011ffc:	e7fd      	b.n	8011ffa <vTaskStartScheduler+0x9e>
}
 8011ffe:	bf00      	nop
 8012000:	3718      	adds	r7, #24
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	08013874 	.word	0x08013874
 801200c:	080123a5 	.word	0x080123a5
 8012010:	2400157c 	.word	0x2400157c
 8012014:	24001578 	.word	0x24001578
 8012018:	24001564 	.word	0x24001564
 801201c:	2400155c 	.word	0x2400155c

08012020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012020:	b480      	push	{r7}
 8012022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012024:	4b04      	ldr	r3, [pc, #16]	@ (8012038 <vTaskSuspendAll+0x18>)
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	3301      	adds	r3, #1
 801202a:	4a03      	ldr	r2, [pc, #12]	@ (8012038 <vTaskSuspendAll+0x18>)
 801202c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801202e:	bf00      	nop
 8012030:	46bd      	mov	sp, r7
 8012032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012036:	4770      	bx	lr
 8012038:	24001580 	.word	0x24001580

0801203c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801203c:	b580      	push	{r7, lr}
 801203e:	b084      	sub	sp, #16
 8012040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012042:	2300      	movs	r3, #0
 8012044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012046:	2300      	movs	r3, #0
 8012048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801204a:	4b42      	ldr	r3, [pc, #264]	@ (8012154 <xTaskResumeAll+0x118>)
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d10b      	bne.n	801206a <xTaskResumeAll+0x2e>
	__asm volatile
 8012052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012056:	f383 8811 	msr	BASEPRI, r3
 801205a:	f3bf 8f6f 	isb	sy
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	603b      	str	r3, [r7, #0]
}
 8012064:	bf00      	nop
 8012066:	bf00      	nop
 8012068:	e7fd      	b.n	8012066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801206a:	f000 fc25 	bl	80128b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801206e:	4b39      	ldr	r3, [pc, #228]	@ (8012154 <xTaskResumeAll+0x118>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	3b01      	subs	r3, #1
 8012074:	4a37      	ldr	r2, [pc, #220]	@ (8012154 <xTaskResumeAll+0x118>)
 8012076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012078:	4b36      	ldr	r3, [pc, #216]	@ (8012154 <xTaskResumeAll+0x118>)
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d161      	bne.n	8012144 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012080:	4b35      	ldr	r3, [pc, #212]	@ (8012158 <xTaskResumeAll+0x11c>)
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d05d      	beq.n	8012144 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012088:	e02e      	b.n	80120e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801208a:	4b34      	ldr	r3, [pc, #208]	@ (801215c <xTaskResumeAll+0x120>)
 801208c:	68db      	ldr	r3, [r3, #12]
 801208e:	68db      	ldr	r3, [r3, #12]
 8012090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	3318      	adds	r3, #24
 8012096:	4618      	mov	r0, r3
 8012098:	f7ff fd69 	bl	8011b6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	3304      	adds	r3, #4
 80120a0:	4618      	mov	r0, r3
 80120a2:	f7ff fd64 	bl	8011b6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120aa:	2201      	movs	r2, #1
 80120ac:	409a      	lsls	r2, r3
 80120ae:	4b2c      	ldr	r3, [pc, #176]	@ (8012160 <xTaskResumeAll+0x124>)
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	4313      	orrs	r3, r2
 80120b4:	4a2a      	ldr	r2, [pc, #168]	@ (8012160 <xTaskResumeAll+0x124>)
 80120b6:	6013      	str	r3, [r2, #0]
 80120b8:	68fb      	ldr	r3, [r7, #12]
 80120ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120bc:	4613      	mov	r3, r2
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	4413      	add	r3, r2
 80120c2:	009b      	lsls	r3, r3, #2
 80120c4:	4a27      	ldr	r2, [pc, #156]	@ (8012164 <xTaskResumeAll+0x128>)
 80120c6:	441a      	add	r2, r3
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	3304      	adds	r3, #4
 80120cc:	4619      	mov	r1, r3
 80120ce:	4610      	mov	r0, r2
 80120d0:	f7ff fcf0 	bl	8011ab4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80120d8:	4b23      	ldr	r3, [pc, #140]	@ (8012168 <xTaskResumeAll+0x12c>)
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120de:	429a      	cmp	r2, r3
 80120e0:	d302      	bcc.n	80120e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80120e2:	4b22      	ldr	r3, [pc, #136]	@ (801216c <xTaskResumeAll+0x130>)
 80120e4:	2201      	movs	r2, #1
 80120e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80120e8:	4b1c      	ldr	r3, [pc, #112]	@ (801215c <xTaskResumeAll+0x120>)
 80120ea:	681b      	ldr	r3, [r3, #0]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d1cc      	bne.n	801208a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	d001      	beq.n	80120fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80120f6:	f000 fa0b 	bl	8012510 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80120fa:	4b1d      	ldr	r3, [pc, #116]	@ (8012170 <xTaskResumeAll+0x134>)
 80120fc:	681b      	ldr	r3, [r3, #0]
 80120fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	2b00      	cmp	r3, #0
 8012104:	d010      	beq.n	8012128 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012106:	f000 f837 	bl	8012178 <xTaskIncrementTick>
 801210a:	4603      	mov	r3, r0
 801210c:	2b00      	cmp	r3, #0
 801210e:	d002      	beq.n	8012116 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012110:	4b16      	ldr	r3, [pc, #88]	@ (801216c <xTaskResumeAll+0x130>)
 8012112:	2201      	movs	r2, #1
 8012114:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	3b01      	subs	r3, #1
 801211a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d1f1      	bne.n	8012106 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012122:	4b13      	ldr	r3, [pc, #76]	@ (8012170 <xTaskResumeAll+0x134>)
 8012124:	2200      	movs	r2, #0
 8012126:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012128:	4b10      	ldr	r3, [pc, #64]	@ (801216c <xTaskResumeAll+0x130>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d009      	beq.n	8012144 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012130:	2301      	movs	r3, #1
 8012132:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012134:	4b0f      	ldr	r3, [pc, #60]	@ (8012174 <xTaskResumeAll+0x138>)
 8012136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801213a:	601a      	str	r2, [r3, #0]
 801213c:	f3bf 8f4f 	dsb	sy
 8012140:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012144:	f000 fbea 	bl	801291c <vPortExitCritical>

	return xAlreadyYielded;
 8012148:	68bb      	ldr	r3, [r7, #8]
}
 801214a:	4618      	mov	r0, r3
 801214c:	3710      	adds	r7, #16
 801214e:	46bd      	mov	sp, r7
 8012150:	bd80      	pop	{r7, pc}
 8012152:	bf00      	nop
 8012154:	24001580 	.word	0x24001580
 8012158:	24001558 	.word	0x24001558
 801215c:	24001518 	.word	0x24001518
 8012160:	24001560 	.word	0x24001560
 8012164:	2400145c 	.word	0x2400145c
 8012168:	24001458 	.word	0x24001458
 801216c:	2400156c 	.word	0x2400156c
 8012170:	24001568 	.word	0x24001568
 8012174:	e000ed04 	.word	0xe000ed04

08012178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b086      	sub	sp, #24
 801217c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801217e:	2300      	movs	r3, #0
 8012180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012182:	4b4f      	ldr	r3, [pc, #316]	@ (80122c0 <xTaskIncrementTick+0x148>)
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	f040 808f 	bne.w	80122aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801218c:	4b4d      	ldr	r3, [pc, #308]	@ (80122c4 <xTaskIncrementTick+0x14c>)
 801218e:	681b      	ldr	r3, [r3, #0]
 8012190:	3301      	adds	r3, #1
 8012192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012194:	4a4b      	ldr	r2, [pc, #300]	@ (80122c4 <xTaskIncrementTick+0x14c>)
 8012196:	693b      	ldr	r3, [r7, #16]
 8012198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801219a:	693b      	ldr	r3, [r7, #16]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d121      	bne.n	80121e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80121a0:	4b49      	ldr	r3, [pc, #292]	@ (80122c8 <xTaskIncrementTick+0x150>)
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d00b      	beq.n	80121c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80121aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80121ae:	f383 8811 	msr	BASEPRI, r3
 80121b2:	f3bf 8f6f 	isb	sy
 80121b6:	f3bf 8f4f 	dsb	sy
 80121ba:	603b      	str	r3, [r7, #0]
}
 80121bc:	bf00      	nop
 80121be:	bf00      	nop
 80121c0:	e7fd      	b.n	80121be <xTaskIncrementTick+0x46>
 80121c2:	4b41      	ldr	r3, [pc, #260]	@ (80122c8 <xTaskIncrementTick+0x150>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	60fb      	str	r3, [r7, #12]
 80121c8:	4b40      	ldr	r3, [pc, #256]	@ (80122cc <xTaskIncrementTick+0x154>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	4a3e      	ldr	r2, [pc, #248]	@ (80122c8 <xTaskIncrementTick+0x150>)
 80121ce:	6013      	str	r3, [r2, #0]
 80121d0:	4a3e      	ldr	r2, [pc, #248]	@ (80122cc <xTaskIncrementTick+0x154>)
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	6013      	str	r3, [r2, #0]
 80121d6:	4b3e      	ldr	r3, [pc, #248]	@ (80122d0 <xTaskIncrementTick+0x158>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	3301      	adds	r3, #1
 80121dc:	4a3c      	ldr	r2, [pc, #240]	@ (80122d0 <xTaskIncrementTick+0x158>)
 80121de:	6013      	str	r3, [r2, #0]
 80121e0:	f000 f996 	bl	8012510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80121e4:	4b3b      	ldr	r3, [pc, #236]	@ (80122d4 <xTaskIncrementTick+0x15c>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	693a      	ldr	r2, [r7, #16]
 80121ea:	429a      	cmp	r2, r3
 80121ec:	d348      	bcc.n	8012280 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121ee:	4b36      	ldr	r3, [pc, #216]	@ (80122c8 <xTaskIncrementTick+0x150>)
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d104      	bne.n	8012202 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121f8:	4b36      	ldr	r3, [pc, #216]	@ (80122d4 <xTaskIncrementTick+0x15c>)
 80121fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80121fe:	601a      	str	r2, [r3, #0]
					break;
 8012200:	e03e      	b.n	8012280 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012202:	4b31      	ldr	r3, [pc, #196]	@ (80122c8 <xTaskIncrementTick+0x150>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	68db      	ldr	r3, [r3, #12]
 8012208:	68db      	ldr	r3, [r3, #12]
 801220a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	685b      	ldr	r3, [r3, #4]
 8012210:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012212:	693a      	ldr	r2, [r7, #16]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	429a      	cmp	r2, r3
 8012218:	d203      	bcs.n	8012222 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801221a:	4a2e      	ldr	r2, [pc, #184]	@ (80122d4 <xTaskIncrementTick+0x15c>)
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012220:	e02e      	b.n	8012280 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	3304      	adds	r3, #4
 8012226:	4618      	mov	r0, r3
 8012228:	f7ff fca1 	bl	8011b6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012230:	2b00      	cmp	r3, #0
 8012232:	d004      	beq.n	801223e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	3318      	adds	r3, #24
 8012238:	4618      	mov	r0, r3
 801223a:	f7ff fc98 	bl	8011b6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012242:	2201      	movs	r2, #1
 8012244:	409a      	lsls	r2, r3
 8012246:	4b24      	ldr	r3, [pc, #144]	@ (80122d8 <xTaskIncrementTick+0x160>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	4313      	orrs	r3, r2
 801224c:	4a22      	ldr	r2, [pc, #136]	@ (80122d8 <xTaskIncrementTick+0x160>)
 801224e:	6013      	str	r3, [r2, #0]
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012254:	4613      	mov	r3, r2
 8012256:	009b      	lsls	r3, r3, #2
 8012258:	4413      	add	r3, r2
 801225a:	009b      	lsls	r3, r3, #2
 801225c:	4a1f      	ldr	r2, [pc, #124]	@ (80122dc <xTaskIncrementTick+0x164>)
 801225e:	441a      	add	r2, r3
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	3304      	adds	r3, #4
 8012264:	4619      	mov	r1, r3
 8012266:	4610      	mov	r0, r2
 8012268:	f7ff fc24 	bl	8011ab4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012270:	4b1b      	ldr	r3, [pc, #108]	@ (80122e0 <xTaskIncrementTick+0x168>)
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012276:	429a      	cmp	r2, r3
 8012278:	d3b9      	bcc.n	80121ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801227a:	2301      	movs	r3, #1
 801227c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801227e:	e7b6      	b.n	80121ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012280:	4b17      	ldr	r3, [pc, #92]	@ (80122e0 <xTaskIncrementTick+0x168>)
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012286:	4915      	ldr	r1, [pc, #84]	@ (80122dc <xTaskIncrementTick+0x164>)
 8012288:	4613      	mov	r3, r2
 801228a:	009b      	lsls	r3, r3, #2
 801228c:	4413      	add	r3, r2
 801228e:	009b      	lsls	r3, r3, #2
 8012290:	440b      	add	r3, r1
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	2b01      	cmp	r3, #1
 8012296:	d901      	bls.n	801229c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012298:	2301      	movs	r3, #1
 801229a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801229c:	4b11      	ldr	r3, [pc, #68]	@ (80122e4 <xTaskIncrementTick+0x16c>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d007      	beq.n	80122b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80122a4:	2301      	movs	r3, #1
 80122a6:	617b      	str	r3, [r7, #20]
 80122a8:	e004      	b.n	80122b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80122aa:	4b0f      	ldr	r3, [pc, #60]	@ (80122e8 <xTaskIncrementTick+0x170>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	3301      	adds	r3, #1
 80122b0:	4a0d      	ldr	r2, [pc, #52]	@ (80122e8 <xTaskIncrementTick+0x170>)
 80122b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80122b4:	697b      	ldr	r3, [r7, #20]
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3718      	adds	r7, #24
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	24001580 	.word	0x24001580
 80122c4:	2400155c 	.word	0x2400155c
 80122c8:	24001510 	.word	0x24001510
 80122cc:	24001514 	.word	0x24001514
 80122d0:	24001570 	.word	0x24001570
 80122d4:	24001578 	.word	0x24001578
 80122d8:	24001560 	.word	0x24001560
 80122dc:	2400145c 	.word	0x2400145c
 80122e0:	24001458 	.word	0x24001458
 80122e4:	2400156c 	.word	0x2400156c
 80122e8:	24001568 	.word	0x24001568

080122ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80122ec:	b480      	push	{r7}
 80122ee:	b087      	sub	sp, #28
 80122f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80122f2:	4b27      	ldr	r3, [pc, #156]	@ (8012390 <vTaskSwitchContext+0xa4>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d003      	beq.n	8012302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80122fa:	4b26      	ldr	r3, [pc, #152]	@ (8012394 <vTaskSwitchContext+0xa8>)
 80122fc:	2201      	movs	r2, #1
 80122fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012300:	e040      	b.n	8012384 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012302:	4b24      	ldr	r3, [pc, #144]	@ (8012394 <vTaskSwitchContext+0xa8>)
 8012304:	2200      	movs	r2, #0
 8012306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012308:	4b23      	ldr	r3, [pc, #140]	@ (8012398 <vTaskSwitchContext+0xac>)
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	fab3 f383 	clz	r3, r3
 8012314:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012316:	7afb      	ldrb	r3, [r7, #11]
 8012318:	f1c3 031f 	rsb	r3, r3, #31
 801231c:	617b      	str	r3, [r7, #20]
 801231e:	491f      	ldr	r1, [pc, #124]	@ (801239c <vTaskSwitchContext+0xb0>)
 8012320:	697a      	ldr	r2, [r7, #20]
 8012322:	4613      	mov	r3, r2
 8012324:	009b      	lsls	r3, r3, #2
 8012326:	4413      	add	r3, r2
 8012328:	009b      	lsls	r3, r3, #2
 801232a:	440b      	add	r3, r1
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d10b      	bne.n	801234a <vTaskSwitchContext+0x5e>
	__asm volatile
 8012332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012336:	f383 8811 	msr	BASEPRI, r3
 801233a:	f3bf 8f6f 	isb	sy
 801233e:	f3bf 8f4f 	dsb	sy
 8012342:	607b      	str	r3, [r7, #4]
}
 8012344:	bf00      	nop
 8012346:	bf00      	nop
 8012348:	e7fd      	b.n	8012346 <vTaskSwitchContext+0x5a>
 801234a:	697a      	ldr	r2, [r7, #20]
 801234c:	4613      	mov	r3, r2
 801234e:	009b      	lsls	r3, r3, #2
 8012350:	4413      	add	r3, r2
 8012352:	009b      	lsls	r3, r3, #2
 8012354:	4a11      	ldr	r2, [pc, #68]	@ (801239c <vTaskSwitchContext+0xb0>)
 8012356:	4413      	add	r3, r2
 8012358:	613b      	str	r3, [r7, #16]
 801235a:	693b      	ldr	r3, [r7, #16]
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	685a      	ldr	r2, [r3, #4]
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	605a      	str	r2, [r3, #4]
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	685a      	ldr	r2, [r3, #4]
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	3308      	adds	r3, #8
 801236c:	429a      	cmp	r2, r3
 801236e:	d104      	bne.n	801237a <vTaskSwitchContext+0x8e>
 8012370:	693b      	ldr	r3, [r7, #16]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	685a      	ldr	r2, [r3, #4]
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	605a      	str	r2, [r3, #4]
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	4a07      	ldr	r2, [pc, #28]	@ (80123a0 <vTaskSwitchContext+0xb4>)
 8012382:	6013      	str	r3, [r2, #0]
}
 8012384:	bf00      	nop
 8012386:	371c      	adds	r7, #28
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr
 8012390:	24001580 	.word	0x24001580
 8012394:	2400156c 	.word	0x2400156c
 8012398:	24001560 	.word	0x24001560
 801239c:	2400145c 	.word	0x2400145c
 80123a0:	24001458 	.word	0x24001458

080123a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80123ac:	f000 f852 	bl	8012454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80123b0:	4b06      	ldr	r3, [pc, #24]	@ (80123cc <prvIdleTask+0x28>)
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	2b01      	cmp	r3, #1
 80123b6:	d9f9      	bls.n	80123ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80123b8:	4b05      	ldr	r3, [pc, #20]	@ (80123d0 <prvIdleTask+0x2c>)
 80123ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80123be:	601a      	str	r2, [r3, #0]
 80123c0:	f3bf 8f4f 	dsb	sy
 80123c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80123c8:	e7f0      	b.n	80123ac <prvIdleTask+0x8>
 80123ca:	bf00      	nop
 80123cc:	2400145c 	.word	0x2400145c
 80123d0:	e000ed04 	.word	0xe000ed04

080123d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80123da:	2300      	movs	r3, #0
 80123dc:	607b      	str	r3, [r7, #4]
 80123de:	e00c      	b.n	80123fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80123e0:	687a      	ldr	r2, [r7, #4]
 80123e2:	4613      	mov	r3, r2
 80123e4:	009b      	lsls	r3, r3, #2
 80123e6:	4413      	add	r3, r2
 80123e8:	009b      	lsls	r3, r3, #2
 80123ea:	4a12      	ldr	r2, [pc, #72]	@ (8012434 <prvInitialiseTaskLists+0x60>)
 80123ec:	4413      	add	r3, r2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7ff fb33 	bl	8011a5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	3301      	adds	r3, #1
 80123f8:	607b      	str	r3, [r7, #4]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	2b06      	cmp	r3, #6
 80123fe:	d9ef      	bls.n	80123e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012400:	480d      	ldr	r0, [pc, #52]	@ (8012438 <prvInitialiseTaskLists+0x64>)
 8012402:	f7ff fb2a 	bl	8011a5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012406:	480d      	ldr	r0, [pc, #52]	@ (801243c <prvInitialiseTaskLists+0x68>)
 8012408:	f7ff fb27 	bl	8011a5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801240c:	480c      	ldr	r0, [pc, #48]	@ (8012440 <prvInitialiseTaskLists+0x6c>)
 801240e:	f7ff fb24 	bl	8011a5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012412:	480c      	ldr	r0, [pc, #48]	@ (8012444 <prvInitialiseTaskLists+0x70>)
 8012414:	f7ff fb21 	bl	8011a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012418:	480b      	ldr	r0, [pc, #44]	@ (8012448 <prvInitialiseTaskLists+0x74>)
 801241a:	f7ff fb1e 	bl	8011a5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801241e:	4b0b      	ldr	r3, [pc, #44]	@ (801244c <prvInitialiseTaskLists+0x78>)
 8012420:	4a05      	ldr	r2, [pc, #20]	@ (8012438 <prvInitialiseTaskLists+0x64>)
 8012422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012424:	4b0a      	ldr	r3, [pc, #40]	@ (8012450 <prvInitialiseTaskLists+0x7c>)
 8012426:	4a05      	ldr	r2, [pc, #20]	@ (801243c <prvInitialiseTaskLists+0x68>)
 8012428:	601a      	str	r2, [r3, #0]
}
 801242a:	bf00      	nop
 801242c:	3708      	adds	r7, #8
 801242e:	46bd      	mov	sp, r7
 8012430:	bd80      	pop	{r7, pc}
 8012432:	bf00      	nop
 8012434:	2400145c 	.word	0x2400145c
 8012438:	240014e8 	.word	0x240014e8
 801243c:	240014fc 	.word	0x240014fc
 8012440:	24001518 	.word	0x24001518
 8012444:	2400152c 	.word	0x2400152c
 8012448:	24001544 	.word	0x24001544
 801244c:	24001510 	.word	0x24001510
 8012450:	24001514 	.word	0x24001514

08012454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012454:	b580      	push	{r7, lr}
 8012456:	b082      	sub	sp, #8
 8012458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801245a:	e019      	b.n	8012490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801245c:	f000 fa2c 	bl	80128b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012460:	4b10      	ldr	r3, [pc, #64]	@ (80124a4 <prvCheckTasksWaitingTermination+0x50>)
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	3304      	adds	r3, #4
 801246c:	4618      	mov	r0, r3
 801246e:	f7ff fb7e 	bl	8011b6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012472:	4b0d      	ldr	r3, [pc, #52]	@ (80124a8 <prvCheckTasksWaitingTermination+0x54>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	3b01      	subs	r3, #1
 8012478:	4a0b      	ldr	r2, [pc, #44]	@ (80124a8 <prvCheckTasksWaitingTermination+0x54>)
 801247a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801247c:	4b0b      	ldr	r3, [pc, #44]	@ (80124ac <prvCheckTasksWaitingTermination+0x58>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	3b01      	subs	r3, #1
 8012482:	4a0a      	ldr	r2, [pc, #40]	@ (80124ac <prvCheckTasksWaitingTermination+0x58>)
 8012484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012486:	f000 fa49 	bl	801291c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f000 f810 	bl	80124b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012490:	4b06      	ldr	r3, [pc, #24]	@ (80124ac <prvCheckTasksWaitingTermination+0x58>)
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1e1      	bne.n	801245c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012498:	bf00      	nop
 801249a:	bf00      	nop
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	2400152c 	.word	0x2400152c
 80124a8:	24001558 	.word	0x24001558
 80124ac:	24001540 	.word	0x24001540

080124b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80124b8:	687b      	ldr	r3, [r7, #4]
 80124ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d108      	bne.n	80124d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80124c6:	4618      	mov	r0, r3
 80124c8:	f000 fba4 	bl	8012c14 <vPortFree>
				vPortFree( pxTCB );
 80124cc:	6878      	ldr	r0, [r7, #4]
 80124ce:	f000 fba1 	bl	8012c14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80124d2:	e019      	b.n	8012508 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80124da:	2b01      	cmp	r3, #1
 80124dc:	d103      	bne.n	80124e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80124de:	6878      	ldr	r0, [r7, #4]
 80124e0:	f000 fb98 	bl	8012c14 <vPortFree>
	}
 80124e4:	e010      	b.n	8012508 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80124ec:	2b02      	cmp	r3, #2
 80124ee:	d00b      	beq.n	8012508 <prvDeleteTCB+0x58>
	__asm volatile
 80124f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124f4:	f383 8811 	msr	BASEPRI, r3
 80124f8:	f3bf 8f6f 	isb	sy
 80124fc:	f3bf 8f4f 	dsb	sy
 8012500:	60fb      	str	r3, [r7, #12]
}
 8012502:	bf00      	nop
 8012504:	bf00      	nop
 8012506:	e7fd      	b.n	8012504 <prvDeleteTCB+0x54>
	}
 8012508:	bf00      	nop
 801250a:	3710      	adds	r7, #16
 801250c:	46bd      	mov	sp, r7
 801250e:	bd80      	pop	{r7, pc}

08012510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012510:	b480      	push	{r7}
 8012512:	b083      	sub	sp, #12
 8012514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012516:	4b0c      	ldr	r3, [pc, #48]	@ (8012548 <prvResetNextTaskUnblockTime+0x38>)
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	2b00      	cmp	r3, #0
 801251e:	d104      	bne.n	801252a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012520:	4b0a      	ldr	r3, [pc, #40]	@ (801254c <prvResetNextTaskUnblockTime+0x3c>)
 8012522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012526:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012528:	e008      	b.n	801253c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801252a:	4b07      	ldr	r3, [pc, #28]	@ (8012548 <prvResetNextTaskUnblockTime+0x38>)
 801252c:	681b      	ldr	r3, [r3, #0]
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	68db      	ldr	r3, [r3, #12]
 8012532:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	685b      	ldr	r3, [r3, #4]
 8012538:	4a04      	ldr	r2, [pc, #16]	@ (801254c <prvResetNextTaskUnblockTime+0x3c>)
 801253a:	6013      	str	r3, [r2, #0]
}
 801253c:	bf00      	nop
 801253e:	370c      	adds	r7, #12
 8012540:	46bd      	mov	sp, r7
 8012542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012546:	4770      	bx	lr
 8012548:	24001510 	.word	0x24001510
 801254c:	24001578 	.word	0x24001578

08012550 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012550:	b480      	push	{r7}
 8012552:	b083      	sub	sp, #12
 8012554:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012556:	4b0b      	ldr	r3, [pc, #44]	@ (8012584 <xTaskGetSchedulerState+0x34>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d102      	bne.n	8012564 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801255e:	2301      	movs	r3, #1
 8012560:	607b      	str	r3, [r7, #4]
 8012562:	e008      	b.n	8012576 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012564:	4b08      	ldr	r3, [pc, #32]	@ (8012588 <xTaskGetSchedulerState+0x38>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d102      	bne.n	8012572 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801256c:	2302      	movs	r3, #2
 801256e:	607b      	str	r3, [r7, #4]
 8012570:	e001      	b.n	8012576 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012572:	2300      	movs	r3, #0
 8012574:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012576:	687b      	ldr	r3, [r7, #4]
	}
 8012578:	4618      	mov	r0, r3
 801257a:	370c      	adds	r7, #12
 801257c:	46bd      	mov	sp, r7
 801257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012582:	4770      	bx	lr
 8012584:	24001564 	.word	0x24001564
 8012588:	24001580 	.word	0x24001580

0801258c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012596:	4b29      	ldr	r3, [pc, #164]	@ (801263c <prvAddCurrentTaskToDelayedList+0xb0>)
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801259c:	4b28      	ldr	r3, [pc, #160]	@ (8012640 <prvAddCurrentTaskToDelayedList+0xb4>)
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	3304      	adds	r3, #4
 80125a2:	4618      	mov	r0, r3
 80125a4:	f7ff fae3 	bl	8011b6e <uxListRemove>
 80125a8:	4603      	mov	r3, r0
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d10b      	bne.n	80125c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80125ae:	4b24      	ldr	r3, [pc, #144]	@ (8012640 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125b4:	2201      	movs	r2, #1
 80125b6:	fa02 f303 	lsl.w	r3, r2, r3
 80125ba:	43da      	mvns	r2, r3
 80125bc:	4b21      	ldr	r3, [pc, #132]	@ (8012644 <prvAddCurrentTaskToDelayedList+0xb8>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	4013      	ands	r3, r2
 80125c2:	4a20      	ldr	r2, [pc, #128]	@ (8012644 <prvAddCurrentTaskToDelayedList+0xb8>)
 80125c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80125cc:	d10a      	bne.n	80125e4 <prvAddCurrentTaskToDelayedList+0x58>
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d007      	beq.n	80125e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125d4:	4b1a      	ldr	r3, [pc, #104]	@ (8012640 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	3304      	adds	r3, #4
 80125da:	4619      	mov	r1, r3
 80125dc:	481a      	ldr	r0, [pc, #104]	@ (8012648 <prvAddCurrentTaskToDelayedList+0xbc>)
 80125de:	f7ff fa69 	bl	8011ab4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80125e2:	e026      	b.n	8012632 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80125e4:	68fa      	ldr	r2, [r7, #12]
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	4413      	add	r3, r2
 80125ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80125ec:	4b14      	ldr	r3, [pc, #80]	@ (8012640 <prvAddCurrentTaskToDelayedList+0xb4>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	68ba      	ldr	r2, [r7, #8]
 80125f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d209      	bcs.n	8012610 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80125fc:	4b13      	ldr	r3, [pc, #76]	@ (801264c <prvAddCurrentTaskToDelayedList+0xc0>)
 80125fe:	681a      	ldr	r2, [r3, #0]
 8012600:	4b0f      	ldr	r3, [pc, #60]	@ (8012640 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	3304      	adds	r3, #4
 8012606:	4619      	mov	r1, r3
 8012608:	4610      	mov	r0, r2
 801260a:	f7ff fa77 	bl	8011afc <vListInsert>
}
 801260e:	e010      	b.n	8012632 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012610:	4b0f      	ldr	r3, [pc, #60]	@ (8012650 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	4b0a      	ldr	r3, [pc, #40]	@ (8012640 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	3304      	adds	r3, #4
 801261a:	4619      	mov	r1, r3
 801261c:	4610      	mov	r0, r2
 801261e:	f7ff fa6d 	bl	8011afc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012622:	4b0c      	ldr	r3, [pc, #48]	@ (8012654 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	68ba      	ldr	r2, [r7, #8]
 8012628:	429a      	cmp	r2, r3
 801262a:	d202      	bcs.n	8012632 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801262c:	4a09      	ldr	r2, [pc, #36]	@ (8012654 <prvAddCurrentTaskToDelayedList+0xc8>)
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	6013      	str	r3, [r2, #0]
}
 8012632:	bf00      	nop
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}
 801263a:	bf00      	nop
 801263c:	2400155c 	.word	0x2400155c
 8012640:	24001458 	.word	0x24001458
 8012644:	24001560 	.word	0x24001560
 8012648:	24001544 	.word	0x24001544
 801264c:	24001514 	.word	0x24001514
 8012650:	24001510 	.word	0x24001510
 8012654:	24001578 	.word	0x24001578

08012658 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012658:	b480      	push	{r7}
 801265a:	b085      	sub	sp, #20
 801265c:	af00      	add	r7, sp, #0
 801265e:	60f8      	str	r0, [r7, #12]
 8012660:	60b9      	str	r1, [r7, #8]
 8012662:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	3b04      	subs	r3, #4
 8012668:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012670:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	3b04      	subs	r3, #4
 8012676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	f023 0201 	bic.w	r2, r3, #1
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	3b04      	subs	r3, #4
 8012686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012688:	4a0c      	ldr	r2, [pc, #48]	@ (80126bc <pxPortInitialiseStack+0x64>)
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	3b14      	subs	r3, #20
 8012692:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012694:	687a      	ldr	r2, [r7, #4]
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	3b04      	subs	r3, #4
 801269e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	f06f 0202 	mvn.w	r2, #2
 80126a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80126a8:	68fb      	ldr	r3, [r7, #12]
 80126aa:	3b20      	subs	r3, #32
 80126ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80126ae:	68fb      	ldr	r3, [r7, #12]
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3714      	adds	r7, #20
 80126b4:	46bd      	mov	sp, r7
 80126b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ba:	4770      	bx	lr
 80126bc:	080126c1 	.word	0x080126c1

080126c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80126c0:	b480      	push	{r7}
 80126c2:	b085      	sub	sp, #20
 80126c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80126c6:	2300      	movs	r3, #0
 80126c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80126ca:	4b13      	ldr	r3, [pc, #76]	@ (8012718 <prvTaskExitError+0x58>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80126d2:	d00b      	beq.n	80126ec <prvTaskExitError+0x2c>
	__asm volatile
 80126d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126d8:	f383 8811 	msr	BASEPRI, r3
 80126dc:	f3bf 8f6f 	isb	sy
 80126e0:	f3bf 8f4f 	dsb	sy
 80126e4:	60fb      	str	r3, [r7, #12]
}
 80126e6:	bf00      	nop
 80126e8:	bf00      	nop
 80126ea:	e7fd      	b.n	80126e8 <prvTaskExitError+0x28>
	__asm volatile
 80126ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126f0:	f383 8811 	msr	BASEPRI, r3
 80126f4:	f3bf 8f6f 	isb	sy
 80126f8:	f3bf 8f4f 	dsb	sy
 80126fc:	60bb      	str	r3, [r7, #8]
}
 80126fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012700:	bf00      	nop
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d0fc      	beq.n	8012702 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012708:	bf00      	nop
 801270a:	bf00      	nop
 801270c:	3714      	adds	r7, #20
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	24000010 	.word	0x24000010
 801271c:	00000000 	.word	0x00000000

08012720 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012720:	4b07      	ldr	r3, [pc, #28]	@ (8012740 <pxCurrentTCBConst2>)
 8012722:	6819      	ldr	r1, [r3, #0]
 8012724:	6808      	ldr	r0, [r1, #0]
 8012726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801272a:	f380 8809 	msr	PSP, r0
 801272e:	f3bf 8f6f 	isb	sy
 8012732:	f04f 0000 	mov.w	r0, #0
 8012736:	f380 8811 	msr	BASEPRI, r0
 801273a:	4770      	bx	lr
 801273c:	f3af 8000 	nop.w

08012740 <pxCurrentTCBConst2>:
 8012740:	24001458 	.word	0x24001458
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012744:	bf00      	nop
 8012746:	bf00      	nop

08012748 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012748:	4808      	ldr	r0, [pc, #32]	@ (801276c <prvPortStartFirstTask+0x24>)
 801274a:	6800      	ldr	r0, [r0, #0]
 801274c:	6800      	ldr	r0, [r0, #0]
 801274e:	f380 8808 	msr	MSP, r0
 8012752:	f04f 0000 	mov.w	r0, #0
 8012756:	f380 8814 	msr	CONTROL, r0
 801275a:	b662      	cpsie	i
 801275c:	b661      	cpsie	f
 801275e:	f3bf 8f4f 	dsb	sy
 8012762:	f3bf 8f6f 	isb	sy
 8012766:	df00      	svc	0
 8012768:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801276a:	bf00      	nop
 801276c:	e000ed08 	.word	0xe000ed08

08012770 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b086      	sub	sp, #24
 8012774:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012776:	4b47      	ldr	r3, [pc, #284]	@ (8012894 <xPortStartScheduler+0x124>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4a47      	ldr	r2, [pc, #284]	@ (8012898 <xPortStartScheduler+0x128>)
 801277c:	4293      	cmp	r3, r2
 801277e:	d10b      	bne.n	8012798 <xPortStartScheduler+0x28>
	__asm volatile
 8012780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012784:	f383 8811 	msr	BASEPRI, r3
 8012788:	f3bf 8f6f 	isb	sy
 801278c:	f3bf 8f4f 	dsb	sy
 8012790:	613b      	str	r3, [r7, #16]
}
 8012792:	bf00      	nop
 8012794:	bf00      	nop
 8012796:	e7fd      	b.n	8012794 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012798:	4b3e      	ldr	r3, [pc, #248]	@ (8012894 <xPortStartScheduler+0x124>)
 801279a:	681b      	ldr	r3, [r3, #0]
 801279c:	4a3f      	ldr	r2, [pc, #252]	@ (801289c <xPortStartScheduler+0x12c>)
 801279e:	4293      	cmp	r3, r2
 80127a0:	d10b      	bne.n	80127ba <xPortStartScheduler+0x4a>
	__asm volatile
 80127a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127a6:	f383 8811 	msr	BASEPRI, r3
 80127aa:	f3bf 8f6f 	isb	sy
 80127ae:	f3bf 8f4f 	dsb	sy
 80127b2:	60fb      	str	r3, [r7, #12]
}
 80127b4:	bf00      	nop
 80127b6:	bf00      	nop
 80127b8:	e7fd      	b.n	80127b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80127ba:	4b39      	ldr	r3, [pc, #228]	@ (80128a0 <xPortStartScheduler+0x130>)
 80127bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80127be:	697b      	ldr	r3, [r7, #20]
 80127c0:	781b      	ldrb	r3, [r3, #0]
 80127c2:	b2db      	uxtb	r3, r3
 80127c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	22ff      	movs	r2, #255	@ 0xff
 80127ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80127cc:	697b      	ldr	r3, [r7, #20]
 80127ce:	781b      	ldrb	r3, [r3, #0]
 80127d0:	b2db      	uxtb	r3, r3
 80127d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80127d4:	78fb      	ldrb	r3, [r7, #3]
 80127d6:	b2db      	uxtb	r3, r3
 80127d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80127dc:	b2da      	uxtb	r2, r3
 80127de:	4b31      	ldr	r3, [pc, #196]	@ (80128a4 <xPortStartScheduler+0x134>)
 80127e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80127e2:	4b31      	ldr	r3, [pc, #196]	@ (80128a8 <xPortStartScheduler+0x138>)
 80127e4:	2207      	movs	r2, #7
 80127e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127e8:	e009      	b.n	80127fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80127ea:	4b2f      	ldr	r3, [pc, #188]	@ (80128a8 <xPortStartScheduler+0x138>)
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	3b01      	subs	r3, #1
 80127f0:	4a2d      	ldr	r2, [pc, #180]	@ (80128a8 <xPortStartScheduler+0x138>)
 80127f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80127f4:	78fb      	ldrb	r3, [r7, #3]
 80127f6:	b2db      	uxtb	r3, r3
 80127f8:	005b      	lsls	r3, r3, #1
 80127fa:	b2db      	uxtb	r3, r3
 80127fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127fe:	78fb      	ldrb	r3, [r7, #3]
 8012800:	b2db      	uxtb	r3, r3
 8012802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012806:	2b80      	cmp	r3, #128	@ 0x80
 8012808:	d0ef      	beq.n	80127ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801280a:	4b27      	ldr	r3, [pc, #156]	@ (80128a8 <xPortStartScheduler+0x138>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	f1c3 0307 	rsb	r3, r3, #7
 8012812:	2b04      	cmp	r3, #4
 8012814:	d00b      	beq.n	801282e <xPortStartScheduler+0xbe>
	__asm volatile
 8012816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801281a:	f383 8811 	msr	BASEPRI, r3
 801281e:	f3bf 8f6f 	isb	sy
 8012822:	f3bf 8f4f 	dsb	sy
 8012826:	60bb      	str	r3, [r7, #8]
}
 8012828:	bf00      	nop
 801282a:	bf00      	nop
 801282c:	e7fd      	b.n	801282a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801282e:	4b1e      	ldr	r3, [pc, #120]	@ (80128a8 <xPortStartScheduler+0x138>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	021b      	lsls	r3, r3, #8
 8012834:	4a1c      	ldr	r2, [pc, #112]	@ (80128a8 <xPortStartScheduler+0x138>)
 8012836:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012838:	4b1b      	ldr	r3, [pc, #108]	@ (80128a8 <xPortStartScheduler+0x138>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012840:	4a19      	ldr	r2, [pc, #100]	@ (80128a8 <xPortStartScheduler+0x138>)
 8012842:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	b2da      	uxtb	r2, r3
 8012848:	697b      	ldr	r3, [r7, #20]
 801284a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801284c:	4b17      	ldr	r3, [pc, #92]	@ (80128ac <xPortStartScheduler+0x13c>)
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	4a16      	ldr	r2, [pc, #88]	@ (80128ac <xPortStartScheduler+0x13c>)
 8012852:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012856:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012858:	4b14      	ldr	r3, [pc, #80]	@ (80128ac <xPortStartScheduler+0x13c>)
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	4a13      	ldr	r2, [pc, #76]	@ (80128ac <xPortStartScheduler+0x13c>)
 801285e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012862:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012864:	f000 f8da 	bl	8012a1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012868:	4b11      	ldr	r3, [pc, #68]	@ (80128b0 <xPortStartScheduler+0x140>)
 801286a:	2200      	movs	r2, #0
 801286c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801286e:	f000 f8f9 	bl	8012a64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012872:	4b10      	ldr	r3, [pc, #64]	@ (80128b4 <xPortStartScheduler+0x144>)
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	4a0f      	ldr	r2, [pc, #60]	@ (80128b4 <xPortStartScheduler+0x144>)
 8012878:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801287c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801287e:	f7ff ff63 	bl	8012748 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012882:	f7ff fd33 	bl	80122ec <vTaskSwitchContext>
	prvTaskExitError();
 8012886:	f7ff ff1b 	bl	80126c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801288a:	2300      	movs	r3, #0
}
 801288c:	4618      	mov	r0, r3
 801288e:	3718      	adds	r7, #24
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	e000ed00 	.word	0xe000ed00
 8012898:	410fc271 	.word	0x410fc271
 801289c:	410fc270 	.word	0x410fc270
 80128a0:	e000e400 	.word	0xe000e400
 80128a4:	24001584 	.word	0x24001584
 80128a8:	24001588 	.word	0x24001588
 80128ac:	e000ed20 	.word	0xe000ed20
 80128b0:	24000010 	.word	0x24000010
 80128b4:	e000ef34 	.word	0xe000ef34

080128b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
	__asm volatile
 80128be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128c2:	f383 8811 	msr	BASEPRI, r3
 80128c6:	f3bf 8f6f 	isb	sy
 80128ca:	f3bf 8f4f 	dsb	sy
 80128ce:	607b      	str	r3, [r7, #4]
}
 80128d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80128d2:	4b10      	ldr	r3, [pc, #64]	@ (8012914 <vPortEnterCritical+0x5c>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	3301      	adds	r3, #1
 80128d8:	4a0e      	ldr	r2, [pc, #56]	@ (8012914 <vPortEnterCritical+0x5c>)
 80128da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80128dc:	4b0d      	ldr	r3, [pc, #52]	@ (8012914 <vPortEnterCritical+0x5c>)
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	d110      	bne.n	8012906 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80128e4:	4b0c      	ldr	r3, [pc, #48]	@ (8012918 <vPortEnterCritical+0x60>)
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d00b      	beq.n	8012906 <vPortEnterCritical+0x4e>
	__asm volatile
 80128ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128f2:	f383 8811 	msr	BASEPRI, r3
 80128f6:	f3bf 8f6f 	isb	sy
 80128fa:	f3bf 8f4f 	dsb	sy
 80128fe:	603b      	str	r3, [r7, #0]
}
 8012900:	bf00      	nop
 8012902:	bf00      	nop
 8012904:	e7fd      	b.n	8012902 <vPortEnterCritical+0x4a>
	}
}
 8012906:	bf00      	nop
 8012908:	370c      	adds	r7, #12
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	24000010 	.word	0x24000010
 8012918:	e000ed04 	.word	0xe000ed04

0801291c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801291c:	b480      	push	{r7}
 801291e:	b083      	sub	sp, #12
 8012920:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012922:	4b12      	ldr	r3, [pc, #72]	@ (801296c <vPortExitCritical+0x50>)
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d10b      	bne.n	8012942 <vPortExitCritical+0x26>
	__asm volatile
 801292a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801292e:	f383 8811 	msr	BASEPRI, r3
 8012932:	f3bf 8f6f 	isb	sy
 8012936:	f3bf 8f4f 	dsb	sy
 801293a:	607b      	str	r3, [r7, #4]
}
 801293c:	bf00      	nop
 801293e:	bf00      	nop
 8012940:	e7fd      	b.n	801293e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012942:	4b0a      	ldr	r3, [pc, #40]	@ (801296c <vPortExitCritical+0x50>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	3b01      	subs	r3, #1
 8012948:	4a08      	ldr	r2, [pc, #32]	@ (801296c <vPortExitCritical+0x50>)
 801294a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801294c:	4b07      	ldr	r3, [pc, #28]	@ (801296c <vPortExitCritical+0x50>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d105      	bne.n	8012960 <vPortExitCritical+0x44>
 8012954:	2300      	movs	r3, #0
 8012956:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012958:	683b      	ldr	r3, [r7, #0]
 801295a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801295e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012960:	bf00      	nop
 8012962:	370c      	adds	r7, #12
 8012964:	46bd      	mov	sp, r7
 8012966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296a:	4770      	bx	lr
 801296c:	24000010 	.word	0x24000010

08012970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012970:	f3ef 8009 	mrs	r0, PSP
 8012974:	f3bf 8f6f 	isb	sy
 8012978:	4b15      	ldr	r3, [pc, #84]	@ (80129d0 <pxCurrentTCBConst>)
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	f01e 0f10 	tst.w	lr, #16
 8012980:	bf08      	it	eq
 8012982:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012986:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801298a:	6010      	str	r0, [r2, #0]
 801298c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012990:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012994:	f380 8811 	msr	BASEPRI, r0
 8012998:	f3bf 8f4f 	dsb	sy
 801299c:	f3bf 8f6f 	isb	sy
 80129a0:	f7ff fca4 	bl	80122ec <vTaskSwitchContext>
 80129a4:	f04f 0000 	mov.w	r0, #0
 80129a8:	f380 8811 	msr	BASEPRI, r0
 80129ac:	bc09      	pop	{r0, r3}
 80129ae:	6819      	ldr	r1, [r3, #0]
 80129b0:	6808      	ldr	r0, [r1, #0]
 80129b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129b6:	f01e 0f10 	tst.w	lr, #16
 80129ba:	bf08      	it	eq
 80129bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80129c0:	f380 8809 	msr	PSP, r0
 80129c4:	f3bf 8f6f 	isb	sy
 80129c8:	4770      	bx	lr
 80129ca:	bf00      	nop
 80129cc:	f3af 8000 	nop.w

080129d0 <pxCurrentTCBConst>:
 80129d0:	24001458 	.word	0x24001458
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80129d4:	bf00      	nop
 80129d6:	bf00      	nop

080129d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
	__asm volatile
 80129de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129e2:	f383 8811 	msr	BASEPRI, r3
 80129e6:	f3bf 8f6f 	isb	sy
 80129ea:	f3bf 8f4f 	dsb	sy
 80129ee:	607b      	str	r3, [r7, #4]
}
 80129f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80129f2:	f7ff fbc1 	bl	8012178 <xTaskIncrementTick>
 80129f6:	4603      	mov	r3, r0
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d003      	beq.n	8012a04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80129fc:	4b06      	ldr	r3, [pc, #24]	@ (8012a18 <xPortSysTickHandler+0x40>)
 80129fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012a02:	601a      	str	r2, [r3, #0]
 8012a04:	2300      	movs	r3, #0
 8012a06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	f383 8811 	msr	BASEPRI, r3
}
 8012a0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a10:	bf00      	nop
 8012a12:	3708      	adds	r7, #8
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}
 8012a18:	e000ed04 	.word	0xe000ed04

08012a1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a1c:	b480      	push	{r7}
 8012a1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a20:	4b0b      	ldr	r3, [pc, #44]	@ (8012a50 <vPortSetupTimerInterrupt+0x34>)
 8012a22:	2200      	movs	r2, #0
 8012a24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a26:	4b0b      	ldr	r3, [pc, #44]	@ (8012a54 <vPortSetupTimerInterrupt+0x38>)
 8012a28:	2200      	movs	r2, #0
 8012a2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8012a58 <vPortSetupTimerInterrupt+0x3c>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	4a0a      	ldr	r2, [pc, #40]	@ (8012a5c <vPortSetupTimerInterrupt+0x40>)
 8012a32:	fba2 2303 	umull	r2, r3, r2, r3
 8012a36:	099b      	lsrs	r3, r3, #6
 8012a38:	4a09      	ldr	r2, [pc, #36]	@ (8012a60 <vPortSetupTimerInterrupt+0x44>)
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a3e:	4b04      	ldr	r3, [pc, #16]	@ (8012a50 <vPortSetupTimerInterrupt+0x34>)
 8012a40:	2207      	movs	r2, #7
 8012a42:	601a      	str	r2, [r3, #0]
}
 8012a44:	bf00      	nop
 8012a46:	46bd      	mov	sp, r7
 8012a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4c:	4770      	bx	lr
 8012a4e:	bf00      	nop
 8012a50:	e000e010 	.word	0xe000e010
 8012a54:	e000e018 	.word	0xe000e018
 8012a58:	24000000 	.word	0x24000000
 8012a5c:	10624dd3 	.word	0x10624dd3
 8012a60:	e000e014 	.word	0xe000e014

08012a64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012a64:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012a74 <vPortEnableVFP+0x10>
 8012a68:	6801      	ldr	r1, [r0, #0]
 8012a6a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012a6e:	6001      	str	r1, [r0, #0]
 8012a70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012a72:	bf00      	nop
 8012a74:	e000ed88 	.word	0xe000ed88

08012a78 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012a78:	b580      	push	{r7, lr}
 8012a7a:	b08a      	sub	sp, #40	@ 0x28
 8012a7c:	af00      	add	r7, sp, #0
 8012a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012a80:	2300      	movs	r3, #0
 8012a82:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012a84:	f7ff facc 	bl	8012020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012a88:	4b5c      	ldr	r3, [pc, #368]	@ (8012bfc <pvPortMalloc+0x184>)
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d101      	bne.n	8012a94 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012a90:	f000 f924 	bl	8012cdc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012a94:	4b5a      	ldr	r3, [pc, #360]	@ (8012c00 <pvPortMalloc+0x188>)
 8012a96:	681a      	ldr	r2, [r3, #0]
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	4013      	ands	r3, r2
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	f040 8095 	bne.w	8012bcc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d01e      	beq.n	8012ae6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8012aa8:	2208      	movs	r2, #8
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	4413      	add	r3, r2
 8012aae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	f003 0307 	and.w	r3, r3, #7
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d015      	beq.n	8012ae6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f023 0307 	bic.w	r3, r3, #7
 8012ac0:	3308      	adds	r3, #8
 8012ac2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	f003 0307 	and.w	r3, r3, #7
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d00b      	beq.n	8012ae6 <pvPortMalloc+0x6e>
	__asm volatile
 8012ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012ad2:	f383 8811 	msr	BASEPRI, r3
 8012ad6:	f3bf 8f6f 	isb	sy
 8012ada:	f3bf 8f4f 	dsb	sy
 8012ade:	617b      	str	r3, [r7, #20]
}
 8012ae0:	bf00      	nop
 8012ae2:	bf00      	nop
 8012ae4:	e7fd      	b.n	8012ae2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d06f      	beq.n	8012bcc <pvPortMalloc+0x154>
 8012aec:	4b45      	ldr	r3, [pc, #276]	@ (8012c04 <pvPortMalloc+0x18c>)
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	687a      	ldr	r2, [r7, #4]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d86a      	bhi.n	8012bcc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012af6:	4b44      	ldr	r3, [pc, #272]	@ (8012c08 <pvPortMalloc+0x190>)
 8012af8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012afa:	4b43      	ldr	r3, [pc, #268]	@ (8012c08 <pvPortMalloc+0x190>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b00:	e004      	b.n	8012b0c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	687a      	ldr	r2, [r7, #4]
 8012b12:	429a      	cmp	r2, r3
 8012b14:	d903      	bls.n	8012b1e <pvPortMalloc+0xa6>
 8012b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d1f1      	bne.n	8012b02 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012b1e:	4b37      	ldr	r3, [pc, #220]	@ (8012bfc <pvPortMalloc+0x184>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d051      	beq.n	8012bcc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012b28:	6a3b      	ldr	r3, [r7, #32]
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2208      	movs	r2, #8
 8012b2e:	4413      	add	r3, r2
 8012b30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b34:	681a      	ldr	r2, [r3, #0]
 8012b36:	6a3b      	ldr	r3, [r7, #32]
 8012b38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b3c:	685a      	ldr	r2, [r3, #4]
 8012b3e:	687b      	ldr	r3, [r7, #4]
 8012b40:	1ad2      	subs	r2, r2, r3
 8012b42:	2308      	movs	r3, #8
 8012b44:	005b      	lsls	r3, r3, #1
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d920      	bls.n	8012b8c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	4413      	add	r3, r2
 8012b50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b52:	69bb      	ldr	r3, [r7, #24]
 8012b54:	f003 0307 	and.w	r3, r3, #7
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d00b      	beq.n	8012b74 <pvPortMalloc+0xfc>
	__asm volatile
 8012b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b60:	f383 8811 	msr	BASEPRI, r3
 8012b64:	f3bf 8f6f 	isb	sy
 8012b68:	f3bf 8f4f 	dsb	sy
 8012b6c:	613b      	str	r3, [r7, #16]
}
 8012b6e:	bf00      	nop
 8012b70:	bf00      	nop
 8012b72:	e7fd      	b.n	8012b70 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b76:	685a      	ldr	r2, [r3, #4]
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	1ad2      	subs	r2, r2, r3
 8012b7c:	69bb      	ldr	r3, [r7, #24]
 8012b7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012b86:	69b8      	ldr	r0, [r7, #24]
 8012b88:	f000 f90a 	bl	8012da0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8012c04 <pvPortMalloc+0x18c>)
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b92:	685b      	ldr	r3, [r3, #4]
 8012b94:	1ad3      	subs	r3, r2, r3
 8012b96:	4a1b      	ldr	r2, [pc, #108]	@ (8012c04 <pvPortMalloc+0x18c>)
 8012b98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012b9a:	4b1a      	ldr	r3, [pc, #104]	@ (8012c04 <pvPortMalloc+0x18c>)
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8012c0c <pvPortMalloc+0x194>)
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	d203      	bcs.n	8012bae <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012ba6:	4b17      	ldr	r3, [pc, #92]	@ (8012c04 <pvPortMalloc+0x18c>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a18      	ldr	r2, [pc, #96]	@ (8012c0c <pvPortMalloc+0x194>)
 8012bac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bb0:	685a      	ldr	r2, [r3, #4]
 8012bb2:	4b13      	ldr	r3, [pc, #76]	@ (8012c00 <pvPortMalloc+0x188>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	431a      	orrs	r2, r3
 8012bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012bc2:	4b13      	ldr	r3, [pc, #76]	@ (8012c10 <pvPortMalloc+0x198>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	4a11      	ldr	r2, [pc, #68]	@ (8012c10 <pvPortMalloc+0x198>)
 8012bca:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012bcc:	f7ff fa36 	bl	801203c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012bd0:	69fb      	ldr	r3, [r7, #28]
 8012bd2:	f003 0307 	and.w	r3, r3, #7
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d00b      	beq.n	8012bf2 <pvPortMalloc+0x17a>
	__asm volatile
 8012bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012bde:	f383 8811 	msr	BASEPRI, r3
 8012be2:	f3bf 8f6f 	isb	sy
 8012be6:	f3bf 8f4f 	dsb	sy
 8012bea:	60fb      	str	r3, [r7, #12]
}
 8012bec:	bf00      	nop
 8012bee:	bf00      	nop
 8012bf0:	e7fd      	b.n	8012bee <pvPortMalloc+0x176>
	return pvReturn;
 8012bf2:	69fb      	ldr	r3, [r7, #28]
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3728      	adds	r7, #40	@ 0x28
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	bd80      	pop	{r7, pc}
 8012bfc:	24005194 	.word	0x24005194
 8012c00:	240051a8 	.word	0x240051a8
 8012c04:	24005198 	.word	0x24005198
 8012c08:	2400518c 	.word	0x2400518c
 8012c0c:	2400519c 	.word	0x2400519c
 8012c10:	240051a0 	.word	0x240051a0

08012c14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b086      	sub	sp, #24
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d04f      	beq.n	8012cc6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012c26:	2308      	movs	r3, #8
 8012c28:	425b      	negs	r3, r3
 8012c2a:	697a      	ldr	r2, [r7, #20]
 8012c2c:	4413      	add	r3, r2
 8012c2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012c30:	697b      	ldr	r3, [r7, #20]
 8012c32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012c34:	693b      	ldr	r3, [r7, #16]
 8012c36:	685a      	ldr	r2, [r3, #4]
 8012c38:	4b25      	ldr	r3, [pc, #148]	@ (8012cd0 <vPortFree+0xbc>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	4013      	ands	r3, r2
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d10b      	bne.n	8012c5a <vPortFree+0x46>
	__asm volatile
 8012c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c46:	f383 8811 	msr	BASEPRI, r3
 8012c4a:	f3bf 8f6f 	isb	sy
 8012c4e:	f3bf 8f4f 	dsb	sy
 8012c52:	60fb      	str	r3, [r7, #12]
}
 8012c54:	bf00      	nop
 8012c56:	bf00      	nop
 8012c58:	e7fd      	b.n	8012c56 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012c5a:	693b      	ldr	r3, [r7, #16]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d00b      	beq.n	8012c7a <vPortFree+0x66>
	__asm volatile
 8012c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c66:	f383 8811 	msr	BASEPRI, r3
 8012c6a:	f3bf 8f6f 	isb	sy
 8012c6e:	f3bf 8f4f 	dsb	sy
 8012c72:	60bb      	str	r3, [r7, #8]
}
 8012c74:	bf00      	nop
 8012c76:	bf00      	nop
 8012c78:	e7fd      	b.n	8012c76 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012c7a:	693b      	ldr	r3, [r7, #16]
 8012c7c:	685a      	ldr	r2, [r3, #4]
 8012c7e:	4b14      	ldr	r3, [pc, #80]	@ (8012cd0 <vPortFree+0xbc>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	4013      	ands	r3, r2
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d01e      	beq.n	8012cc6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012c88:	693b      	ldr	r3, [r7, #16]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d11a      	bne.n	8012cc6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	685a      	ldr	r2, [r3, #4]
 8012c94:	4b0e      	ldr	r3, [pc, #56]	@ (8012cd0 <vPortFree+0xbc>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	43db      	mvns	r3, r3
 8012c9a:	401a      	ands	r2, r3
 8012c9c:	693b      	ldr	r3, [r7, #16]
 8012c9e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012ca0:	f7ff f9be 	bl	8012020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	685a      	ldr	r2, [r3, #4]
 8012ca8:	4b0a      	ldr	r3, [pc, #40]	@ (8012cd4 <vPortFree+0xc0>)
 8012caa:	681b      	ldr	r3, [r3, #0]
 8012cac:	4413      	add	r3, r2
 8012cae:	4a09      	ldr	r2, [pc, #36]	@ (8012cd4 <vPortFree+0xc0>)
 8012cb0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012cb2:	6938      	ldr	r0, [r7, #16]
 8012cb4:	f000 f874 	bl	8012da0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012cb8:	4b07      	ldr	r3, [pc, #28]	@ (8012cd8 <vPortFree+0xc4>)
 8012cba:	681b      	ldr	r3, [r3, #0]
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	4a06      	ldr	r2, [pc, #24]	@ (8012cd8 <vPortFree+0xc4>)
 8012cc0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012cc2:	f7ff f9bb 	bl	801203c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012cc6:	bf00      	nop
 8012cc8:	3718      	adds	r7, #24
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
 8012cce:	bf00      	nop
 8012cd0:	240051a8 	.word	0x240051a8
 8012cd4:	24005198 	.word	0x24005198
 8012cd8:	240051a4 	.word	0x240051a4

08012cdc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012cdc:	b480      	push	{r7}
 8012cde:	b085      	sub	sp, #20
 8012ce0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012ce2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8012ce6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012ce8:	4b27      	ldr	r3, [pc, #156]	@ (8012d88 <prvHeapInit+0xac>)
 8012cea:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	f003 0307 	and.w	r3, r3, #7
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d00c      	beq.n	8012d10 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	3307      	adds	r3, #7
 8012cfa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	f023 0307 	bic.w	r3, r3, #7
 8012d02:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d04:	68ba      	ldr	r2, [r7, #8]
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	1ad3      	subs	r3, r2, r3
 8012d0a:	4a1f      	ldr	r2, [pc, #124]	@ (8012d88 <prvHeapInit+0xac>)
 8012d0c:	4413      	add	r3, r2
 8012d0e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012d14:	4a1d      	ldr	r2, [pc, #116]	@ (8012d8c <prvHeapInit+0xb0>)
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8012d8c <prvHeapInit+0xb0>)
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	68ba      	ldr	r2, [r7, #8]
 8012d24:	4413      	add	r3, r2
 8012d26:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012d28:	2208      	movs	r2, #8
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	1a9b      	subs	r3, r3, r2
 8012d2e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	f023 0307 	bic.w	r3, r3, #7
 8012d36:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	4a15      	ldr	r2, [pc, #84]	@ (8012d90 <prvHeapInit+0xb4>)
 8012d3c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012d3e:	4b14      	ldr	r3, [pc, #80]	@ (8012d90 <prvHeapInit+0xb4>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	2200      	movs	r2, #0
 8012d44:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012d46:	4b12      	ldr	r3, [pc, #72]	@ (8012d90 <prvHeapInit+0xb4>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	68fa      	ldr	r2, [r7, #12]
 8012d56:	1ad2      	subs	r2, r2, r3
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8012d90 <prvHeapInit+0xb4>)
 8012d5e:	681a      	ldr	r2, [r3, #0]
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	4a0a      	ldr	r2, [pc, #40]	@ (8012d94 <prvHeapInit+0xb8>)
 8012d6a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	685b      	ldr	r3, [r3, #4]
 8012d70:	4a09      	ldr	r2, [pc, #36]	@ (8012d98 <prvHeapInit+0xbc>)
 8012d72:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012d74:	4b09      	ldr	r3, [pc, #36]	@ (8012d9c <prvHeapInit+0xc0>)
 8012d76:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012d7a:	601a      	str	r2, [r3, #0]
}
 8012d7c:	bf00      	nop
 8012d7e:	3714      	adds	r7, #20
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr
 8012d88:	2400158c 	.word	0x2400158c
 8012d8c:	2400518c 	.word	0x2400518c
 8012d90:	24005194 	.word	0x24005194
 8012d94:	2400519c 	.word	0x2400519c
 8012d98:	24005198 	.word	0x24005198
 8012d9c:	240051a8 	.word	0x240051a8

08012da0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012da0:	b480      	push	{r7}
 8012da2:	b085      	sub	sp, #20
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012da8:	4b28      	ldr	r3, [pc, #160]	@ (8012e4c <prvInsertBlockIntoFreeList+0xac>)
 8012daa:	60fb      	str	r3, [r7, #12]
 8012dac:	e002      	b.n	8012db4 <prvInsertBlockIntoFreeList+0x14>
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	60fb      	str	r3, [r7, #12]
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d8f7      	bhi.n	8012dae <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	685b      	ldr	r3, [r3, #4]
 8012dc6:	68ba      	ldr	r2, [r7, #8]
 8012dc8:	4413      	add	r3, r2
 8012dca:	687a      	ldr	r2, [r7, #4]
 8012dcc:	429a      	cmp	r2, r3
 8012dce:	d108      	bne.n	8012de2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	685a      	ldr	r2, [r3, #4]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	441a      	add	r2, r3
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	685b      	ldr	r3, [r3, #4]
 8012dea:	68ba      	ldr	r2, [r7, #8]
 8012dec:	441a      	add	r2, r3
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	429a      	cmp	r2, r3
 8012df4:	d118      	bne.n	8012e28 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	681a      	ldr	r2, [r3, #0]
 8012dfa:	4b15      	ldr	r3, [pc, #84]	@ (8012e50 <prvInsertBlockIntoFreeList+0xb0>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d00d      	beq.n	8012e1e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	685a      	ldr	r2, [r3, #4]
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	685b      	ldr	r3, [r3, #4]
 8012e0c:	441a      	add	r2, r3
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	601a      	str	r2, [r3, #0]
 8012e1c:	e008      	b.n	8012e30 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8012e50 <prvInsertBlockIntoFreeList+0xb0>)
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	601a      	str	r2, [r3, #0]
 8012e26:	e003      	b.n	8012e30 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681a      	ldr	r2, [r3, #0]
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012e30:	68fa      	ldr	r2, [r7, #12]
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d002      	beq.n	8012e3e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	687a      	ldr	r2, [r7, #4]
 8012e3c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012e3e:	bf00      	nop
 8012e40:	3714      	adds	r7, #20
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr
 8012e4a:	bf00      	nop
 8012e4c:	2400518c 	.word	0x2400518c
 8012e50:	24005194 	.word	0x24005194

08012e54 <_vsiprintf_r>:
 8012e54:	b500      	push	{lr}
 8012e56:	b09b      	sub	sp, #108	@ 0x6c
 8012e58:	9100      	str	r1, [sp, #0]
 8012e5a:	9104      	str	r1, [sp, #16]
 8012e5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012e60:	9105      	str	r1, [sp, #20]
 8012e62:	9102      	str	r1, [sp, #8]
 8012e64:	4905      	ldr	r1, [pc, #20]	@ (8012e7c <_vsiprintf_r+0x28>)
 8012e66:	9103      	str	r1, [sp, #12]
 8012e68:	4669      	mov	r1, sp
 8012e6a:	f000 f8b1 	bl	8012fd0 <_svfiprintf_r>
 8012e6e:	9b00      	ldr	r3, [sp, #0]
 8012e70:	2200      	movs	r2, #0
 8012e72:	701a      	strb	r2, [r3, #0]
 8012e74:	b01b      	add	sp, #108	@ 0x6c
 8012e76:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e7a:	bf00      	nop
 8012e7c:	ffff0208 	.word	0xffff0208

08012e80 <vsiprintf>:
 8012e80:	4613      	mov	r3, r2
 8012e82:	460a      	mov	r2, r1
 8012e84:	4601      	mov	r1, r0
 8012e86:	4802      	ldr	r0, [pc, #8]	@ (8012e90 <vsiprintf+0x10>)
 8012e88:	6800      	ldr	r0, [r0, #0]
 8012e8a:	f7ff bfe3 	b.w	8012e54 <_vsiprintf_r>
 8012e8e:	bf00      	nop
 8012e90:	24000014 	.word	0x24000014

08012e94 <memset>:
 8012e94:	4402      	add	r2, r0
 8012e96:	4603      	mov	r3, r0
 8012e98:	4293      	cmp	r3, r2
 8012e9a:	d100      	bne.n	8012e9e <memset+0xa>
 8012e9c:	4770      	bx	lr
 8012e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8012ea2:	e7f9      	b.n	8012e98 <memset+0x4>

08012ea4 <__errno>:
 8012ea4:	4b01      	ldr	r3, [pc, #4]	@ (8012eac <__errno+0x8>)
 8012ea6:	6818      	ldr	r0, [r3, #0]
 8012ea8:	4770      	bx	lr
 8012eaa:	bf00      	nop
 8012eac:	24000014 	.word	0x24000014

08012eb0 <__libc_init_array>:
 8012eb0:	b570      	push	{r4, r5, r6, lr}
 8012eb2:	4d0d      	ldr	r5, [pc, #52]	@ (8012ee8 <__libc_init_array+0x38>)
 8012eb4:	4c0d      	ldr	r4, [pc, #52]	@ (8012eec <__libc_init_array+0x3c>)
 8012eb6:	1b64      	subs	r4, r4, r5
 8012eb8:	10a4      	asrs	r4, r4, #2
 8012eba:	2600      	movs	r6, #0
 8012ebc:	42a6      	cmp	r6, r4
 8012ebe:	d109      	bne.n	8012ed4 <__libc_init_array+0x24>
 8012ec0:	4d0b      	ldr	r5, [pc, #44]	@ (8012ef0 <__libc_init_array+0x40>)
 8012ec2:	4c0c      	ldr	r4, [pc, #48]	@ (8012ef4 <__libc_init_array+0x44>)
 8012ec4:	f000 fc66 	bl	8013794 <_init>
 8012ec8:	1b64      	subs	r4, r4, r5
 8012eca:	10a4      	asrs	r4, r4, #2
 8012ecc:	2600      	movs	r6, #0
 8012ece:	42a6      	cmp	r6, r4
 8012ed0:	d105      	bne.n	8012ede <__libc_init_array+0x2e>
 8012ed2:	bd70      	pop	{r4, r5, r6, pc}
 8012ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ed8:	4798      	blx	r3
 8012eda:	3601      	adds	r6, #1
 8012edc:	e7ee      	b.n	8012ebc <__libc_init_array+0xc>
 8012ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ee2:	4798      	blx	r3
 8012ee4:	3601      	adds	r6, #1
 8012ee6:	e7f2      	b.n	8012ece <__libc_init_array+0x1e>
 8012ee8:	08013908 	.word	0x08013908
 8012eec:	08013908 	.word	0x08013908
 8012ef0:	08013908 	.word	0x08013908
 8012ef4:	0801390c 	.word	0x0801390c

08012ef8 <__retarget_lock_acquire_recursive>:
 8012ef8:	4770      	bx	lr

08012efa <__retarget_lock_release_recursive>:
 8012efa:	4770      	bx	lr

08012efc <memcpy>:
 8012efc:	440a      	add	r2, r1
 8012efe:	4291      	cmp	r1, r2
 8012f00:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012f04:	d100      	bne.n	8012f08 <memcpy+0xc>
 8012f06:	4770      	bx	lr
 8012f08:	b510      	push	{r4, lr}
 8012f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012f0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012f12:	4291      	cmp	r1, r2
 8012f14:	d1f9      	bne.n	8012f0a <memcpy+0xe>
 8012f16:	bd10      	pop	{r4, pc}

08012f18 <__ssputs_r>:
 8012f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f1c:	688e      	ldr	r6, [r1, #8]
 8012f1e:	461f      	mov	r7, r3
 8012f20:	42be      	cmp	r6, r7
 8012f22:	680b      	ldr	r3, [r1, #0]
 8012f24:	4682      	mov	sl, r0
 8012f26:	460c      	mov	r4, r1
 8012f28:	4690      	mov	r8, r2
 8012f2a:	d82d      	bhi.n	8012f88 <__ssputs_r+0x70>
 8012f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012f30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012f34:	d026      	beq.n	8012f84 <__ssputs_r+0x6c>
 8012f36:	6965      	ldr	r5, [r4, #20]
 8012f38:	6909      	ldr	r1, [r1, #16]
 8012f3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012f3e:	eba3 0901 	sub.w	r9, r3, r1
 8012f42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012f46:	1c7b      	adds	r3, r7, #1
 8012f48:	444b      	add	r3, r9
 8012f4a:	106d      	asrs	r5, r5, #1
 8012f4c:	429d      	cmp	r5, r3
 8012f4e:	bf38      	it	cc
 8012f50:	461d      	movcc	r5, r3
 8012f52:	0553      	lsls	r3, r2, #21
 8012f54:	d527      	bpl.n	8012fa6 <__ssputs_r+0x8e>
 8012f56:	4629      	mov	r1, r5
 8012f58:	f000 f958 	bl	801320c <_malloc_r>
 8012f5c:	4606      	mov	r6, r0
 8012f5e:	b360      	cbz	r0, 8012fba <__ssputs_r+0xa2>
 8012f60:	6921      	ldr	r1, [r4, #16]
 8012f62:	464a      	mov	r2, r9
 8012f64:	f7ff ffca 	bl	8012efc <memcpy>
 8012f68:	89a3      	ldrh	r3, [r4, #12]
 8012f6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012f72:	81a3      	strh	r3, [r4, #12]
 8012f74:	6126      	str	r6, [r4, #16]
 8012f76:	6165      	str	r5, [r4, #20]
 8012f78:	444e      	add	r6, r9
 8012f7a:	eba5 0509 	sub.w	r5, r5, r9
 8012f7e:	6026      	str	r6, [r4, #0]
 8012f80:	60a5      	str	r5, [r4, #8]
 8012f82:	463e      	mov	r6, r7
 8012f84:	42be      	cmp	r6, r7
 8012f86:	d900      	bls.n	8012f8a <__ssputs_r+0x72>
 8012f88:	463e      	mov	r6, r7
 8012f8a:	6820      	ldr	r0, [r4, #0]
 8012f8c:	4632      	mov	r2, r6
 8012f8e:	4641      	mov	r1, r8
 8012f90:	f000 fb84 	bl	801369c <memmove>
 8012f94:	68a3      	ldr	r3, [r4, #8]
 8012f96:	1b9b      	subs	r3, r3, r6
 8012f98:	60a3      	str	r3, [r4, #8]
 8012f9a:	6823      	ldr	r3, [r4, #0]
 8012f9c:	4433      	add	r3, r6
 8012f9e:	6023      	str	r3, [r4, #0]
 8012fa0:	2000      	movs	r0, #0
 8012fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fa6:	462a      	mov	r2, r5
 8012fa8:	f000 fb4a 	bl	8013640 <_realloc_r>
 8012fac:	4606      	mov	r6, r0
 8012fae:	2800      	cmp	r0, #0
 8012fb0:	d1e0      	bne.n	8012f74 <__ssputs_r+0x5c>
 8012fb2:	6921      	ldr	r1, [r4, #16]
 8012fb4:	4650      	mov	r0, sl
 8012fb6:	f000 fb9b 	bl	80136f0 <_free_r>
 8012fba:	230c      	movs	r3, #12
 8012fbc:	f8ca 3000 	str.w	r3, [sl]
 8012fc0:	89a3      	ldrh	r3, [r4, #12]
 8012fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012fc6:	81a3      	strh	r3, [r4, #12]
 8012fc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012fcc:	e7e9      	b.n	8012fa2 <__ssputs_r+0x8a>
	...

08012fd0 <_svfiprintf_r>:
 8012fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fd4:	4698      	mov	r8, r3
 8012fd6:	898b      	ldrh	r3, [r1, #12]
 8012fd8:	061b      	lsls	r3, r3, #24
 8012fda:	b09d      	sub	sp, #116	@ 0x74
 8012fdc:	4607      	mov	r7, r0
 8012fde:	460d      	mov	r5, r1
 8012fe0:	4614      	mov	r4, r2
 8012fe2:	d510      	bpl.n	8013006 <_svfiprintf_r+0x36>
 8012fe4:	690b      	ldr	r3, [r1, #16]
 8012fe6:	b973      	cbnz	r3, 8013006 <_svfiprintf_r+0x36>
 8012fe8:	2140      	movs	r1, #64	@ 0x40
 8012fea:	f000 f90f 	bl	801320c <_malloc_r>
 8012fee:	6028      	str	r0, [r5, #0]
 8012ff0:	6128      	str	r0, [r5, #16]
 8012ff2:	b930      	cbnz	r0, 8013002 <_svfiprintf_r+0x32>
 8012ff4:	230c      	movs	r3, #12
 8012ff6:	603b      	str	r3, [r7, #0]
 8012ff8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012ffc:	b01d      	add	sp, #116	@ 0x74
 8012ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013002:	2340      	movs	r3, #64	@ 0x40
 8013004:	616b      	str	r3, [r5, #20]
 8013006:	2300      	movs	r3, #0
 8013008:	9309      	str	r3, [sp, #36]	@ 0x24
 801300a:	2320      	movs	r3, #32
 801300c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013010:	f8cd 800c 	str.w	r8, [sp, #12]
 8013014:	2330      	movs	r3, #48	@ 0x30
 8013016:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80131b4 <_svfiprintf_r+0x1e4>
 801301a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801301e:	f04f 0901 	mov.w	r9, #1
 8013022:	4623      	mov	r3, r4
 8013024:	469a      	mov	sl, r3
 8013026:	f813 2b01 	ldrb.w	r2, [r3], #1
 801302a:	b10a      	cbz	r2, 8013030 <_svfiprintf_r+0x60>
 801302c:	2a25      	cmp	r2, #37	@ 0x25
 801302e:	d1f9      	bne.n	8013024 <_svfiprintf_r+0x54>
 8013030:	ebba 0b04 	subs.w	fp, sl, r4
 8013034:	d00b      	beq.n	801304e <_svfiprintf_r+0x7e>
 8013036:	465b      	mov	r3, fp
 8013038:	4622      	mov	r2, r4
 801303a:	4629      	mov	r1, r5
 801303c:	4638      	mov	r0, r7
 801303e:	f7ff ff6b 	bl	8012f18 <__ssputs_r>
 8013042:	3001      	adds	r0, #1
 8013044:	f000 80a7 	beq.w	8013196 <_svfiprintf_r+0x1c6>
 8013048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801304a:	445a      	add	r2, fp
 801304c:	9209      	str	r2, [sp, #36]	@ 0x24
 801304e:	f89a 3000 	ldrb.w	r3, [sl]
 8013052:	2b00      	cmp	r3, #0
 8013054:	f000 809f 	beq.w	8013196 <_svfiprintf_r+0x1c6>
 8013058:	2300      	movs	r3, #0
 801305a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801305e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013062:	f10a 0a01 	add.w	sl, sl, #1
 8013066:	9304      	str	r3, [sp, #16]
 8013068:	9307      	str	r3, [sp, #28]
 801306a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801306e:	931a      	str	r3, [sp, #104]	@ 0x68
 8013070:	4654      	mov	r4, sl
 8013072:	2205      	movs	r2, #5
 8013074:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013078:	484e      	ldr	r0, [pc, #312]	@ (80131b4 <_svfiprintf_r+0x1e4>)
 801307a:	f7ed f949 	bl	8000310 <memchr>
 801307e:	9a04      	ldr	r2, [sp, #16]
 8013080:	b9d8      	cbnz	r0, 80130ba <_svfiprintf_r+0xea>
 8013082:	06d0      	lsls	r0, r2, #27
 8013084:	bf44      	itt	mi
 8013086:	2320      	movmi	r3, #32
 8013088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801308c:	0711      	lsls	r1, r2, #28
 801308e:	bf44      	itt	mi
 8013090:	232b      	movmi	r3, #43	@ 0x2b
 8013092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013096:	f89a 3000 	ldrb.w	r3, [sl]
 801309a:	2b2a      	cmp	r3, #42	@ 0x2a
 801309c:	d015      	beq.n	80130ca <_svfiprintf_r+0xfa>
 801309e:	9a07      	ldr	r2, [sp, #28]
 80130a0:	4654      	mov	r4, sl
 80130a2:	2000      	movs	r0, #0
 80130a4:	f04f 0c0a 	mov.w	ip, #10
 80130a8:	4621      	mov	r1, r4
 80130aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80130ae:	3b30      	subs	r3, #48	@ 0x30
 80130b0:	2b09      	cmp	r3, #9
 80130b2:	d94b      	bls.n	801314c <_svfiprintf_r+0x17c>
 80130b4:	b1b0      	cbz	r0, 80130e4 <_svfiprintf_r+0x114>
 80130b6:	9207      	str	r2, [sp, #28]
 80130b8:	e014      	b.n	80130e4 <_svfiprintf_r+0x114>
 80130ba:	eba0 0308 	sub.w	r3, r0, r8
 80130be:	fa09 f303 	lsl.w	r3, r9, r3
 80130c2:	4313      	orrs	r3, r2
 80130c4:	9304      	str	r3, [sp, #16]
 80130c6:	46a2      	mov	sl, r4
 80130c8:	e7d2      	b.n	8013070 <_svfiprintf_r+0xa0>
 80130ca:	9b03      	ldr	r3, [sp, #12]
 80130cc:	1d19      	adds	r1, r3, #4
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	9103      	str	r1, [sp, #12]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	bfbb      	ittet	lt
 80130d6:	425b      	neglt	r3, r3
 80130d8:	f042 0202 	orrlt.w	r2, r2, #2
 80130dc:	9307      	strge	r3, [sp, #28]
 80130de:	9307      	strlt	r3, [sp, #28]
 80130e0:	bfb8      	it	lt
 80130e2:	9204      	strlt	r2, [sp, #16]
 80130e4:	7823      	ldrb	r3, [r4, #0]
 80130e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80130e8:	d10a      	bne.n	8013100 <_svfiprintf_r+0x130>
 80130ea:	7863      	ldrb	r3, [r4, #1]
 80130ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80130ee:	d132      	bne.n	8013156 <_svfiprintf_r+0x186>
 80130f0:	9b03      	ldr	r3, [sp, #12]
 80130f2:	1d1a      	adds	r2, r3, #4
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	9203      	str	r2, [sp, #12]
 80130f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80130fc:	3402      	adds	r4, #2
 80130fe:	9305      	str	r3, [sp, #20]
 8013100:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80131c4 <_svfiprintf_r+0x1f4>
 8013104:	7821      	ldrb	r1, [r4, #0]
 8013106:	2203      	movs	r2, #3
 8013108:	4650      	mov	r0, sl
 801310a:	f7ed f901 	bl	8000310 <memchr>
 801310e:	b138      	cbz	r0, 8013120 <_svfiprintf_r+0x150>
 8013110:	9b04      	ldr	r3, [sp, #16]
 8013112:	eba0 000a 	sub.w	r0, r0, sl
 8013116:	2240      	movs	r2, #64	@ 0x40
 8013118:	4082      	lsls	r2, r0
 801311a:	4313      	orrs	r3, r2
 801311c:	3401      	adds	r4, #1
 801311e:	9304      	str	r3, [sp, #16]
 8013120:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013124:	4824      	ldr	r0, [pc, #144]	@ (80131b8 <_svfiprintf_r+0x1e8>)
 8013126:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801312a:	2206      	movs	r2, #6
 801312c:	f7ed f8f0 	bl	8000310 <memchr>
 8013130:	2800      	cmp	r0, #0
 8013132:	d036      	beq.n	80131a2 <_svfiprintf_r+0x1d2>
 8013134:	4b21      	ldr	r3, [pc, #132]	@ (80131bc <_svfiprintf_r+0x1ec>)
 8013136:	bb1b      	cbnz	r3, 8013180 <_svfiprintf_r+0x1b0>
 8013138:	9b03      	ldr	r3, [sp, #12]
 801313a:	3307      	adds	r3, #7
 801313c:	f023 0307 	bic.w	r3, r3, #7
 8013140:	3308      	adds	r3, #8
 8013142:	9303      	str	r3, [sp, #12]
 8013144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013146:	4433      	add	r3, r6
 8013148:	9309      	str	r3, [sp, #36]	@ 0x24
 801314a:	e76a      	b.n	8013022 <_svfiprintf_r+0x52>
 801314c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013150:	460c      	mov	r4, r1
 8013152:	2001      	movs	r0, #1
 8013154:	e7a8      	b.n	80130a8 <_svfiprintf_r+0xd8>
 8013156:	2300      	movs	r3, #0
 8013158:	3401      	adds	r4, #1
 801315a:	9305      	str	r3, [sp, #20]
 801315c:	4619      	mov	r1, r3
 801315e:	f04f 0c0a 	mov.w	ip, #10
 8013162:	4620      	mov	r0, r4
 8013164:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013168:	3a30      	subs	r2, #48	@ 0x30
 801316a:	2a09      	cmp	r2, #9
 801316c:	d903      	bls.n	8013176 <_svfiprintf_r+0x1a6>
 801316e:	2b00      	cmp	r3, #0
 8013170:	d0c6      	beq.n	8013100 <_svfiprintf_r+0x130>
 8013172:	9105      	str	r1, [sp, #20]
 8013174:	e7c4      	b.n	8013100 <_svfiprintf_r+0x130>
 8013176:	fb0c 2101 	mla	r1, ip, r1, r2
 801317a:	4604      	mov	r4, r0
 801317c:	2301      	movs	r3, #1
 801317e:	e7f0      	b.n	8013162 <_svfiprintf_r+0x192>
 8013180:	ab03      	add	r3, sp, #12
 8013182:	9300      	str	r3, [sp, #0]
 8013184:	462a      	mov	r2, r5
 8013186:	4b0e      	ldr	r3, [pc, #56]	@ (80131c0 <_svfiprintf_r+0x1f0>)
 8013188:	a904      	add	r1, sp, #16
 801318a:	4638      	mov	r0, r7
 801318c:	f3af 8000 	nop.w
 8013190:	1c42      	adds	r2, r0, #1
 8013192:	4606      	mov	r6, r0
 8013194:	d1d6      	bne.n	8013144 <_svfiprintf_r+0x174>
 8013196:	89ab      	ldrh	r3, [r5, #12]
 8013198:	065b      	lsls	r3, r3, #25
 801319a:	f53f af2d 	bmi.w	8012ff8 <_svfiprintf_r+0x28>
 801319e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80131a0:	e72c      	b.n	8012ffc <_svfiprintf_r+0x2c>
 80131a2:	ab03      	add	r3, sp, #12
 80131a4:	9300      	str	r3, [sp, #0]
 80131a6:	462a      	mov	r2, r5
 80131a8:	4b05      	ldr	r3, [pc, #20]	@ (80131c0 <_svfiprintf_r+0x1f0>)
 80131aa:	a904      	add	r1, sp, #16
 80131ac:	4638      	mov	r0, r7
 80131ae:	f000 f91b 	bl	80133e8 <_printf_i>
 80131b2:	e7ed      	b.n	8013190 <_svfiprintf_r+0x1c0>
 80131b4:	080138cc 	.word	0x080138cc
 80131b8:	080138d6 	.word	0x080138d6
 80131bc:	00000000 	.word	0x00000000
 80131c0:	08012f19 	.word	0x08012f19
 80131c4:	080138d2 	.word	0x080138d2

080131c8 <sbrk_aligned>:
 80131c8:	b570      	push	{r4, r5, r6, lr}
 80131ca:	4e0f      	ldr	r6, [pc, #60]	@ (8013208 <sbrk_aligned+0x40>)
 80131cc:	460c      	mov	r4, r1
 80131ce:	6831      	ldr	r1, [r6, #0]
 80131d0:	4605      	mov	r5, r0
 80131d2:	b911      	cbnz	r1, 80131da <sbrk_aligned+0x12>
 80131d4:	f000 fa7c 	bl	80136d0 <_sbrk_r>
 80131d8:	6030      	str	r0, [r6, #0]
 80131da:	4621      	mov	r1, r4
 80131dc:	4628      	mov	r0, r5
 80131de:	f000 fa77 	bl	80136d0 <_sbrk_r>
 80131e2:	1c43      	adds	r3, r0, #1
 80131e4:	d103      	bne.n	80131ee <sbrk_aligned+0x26>
 80131e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80131ea:	4620      	mov	r0, r4
 80131ec:	bd70      	pop	{r4, r5, r6, pc}
 80131ee:	1cc4      	adds	r4, r0, #3
 80131f0:	f024 0403 	bic.w	r4, r4, #3
 80131f4:	42a0      	cmp	r0, r4
 80131f6:	d0f8      	beq.n	80131ea <sbrk_aligned+0x22>
 80131f8:	1a21      	subs	r1, r4, r0
 80131fa:	4628      	mov	r0, r5
 80131fc:	f000 fa68 	bl	80136d0 <_sbrk_r>
 8013200:	3001      	adds	r0, #1
 8013202:	d1f2      	bne.n	80131ea <sbrk_aligned+0x22>
 8013204:	e7ef      	b.n	80131e6 <sbrk_aligned+0x1e>
 8013206:	bf00      	nop
 8013208:	240052e8 	.word	0x240052e8

0801320c <_malloc_r>:
 801320c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013210:	1ccd      	adds	r5, r1, #3
 8013212:	f025 0503 	bic.w	r5, r5, #3
 8013216:	3508      	adds	r5, #8
 8013218:	2d0c      	cmp	r5, #12
 801321a:	bf38      	it	cc
 801321c:	250c      	movcc	r5, #12
 801321e:	2d00      	cmp	r5, #0
 8013220:	4606      	mov	r6, r0
 8013222:	db01      	blt.n	8013228 <_malloc_r+0x1c>
 8013224:	42a9      	cmp	r1, r5
 8013226:	d904      	bls.n	8013232 <_malloc_r+0x26>
 8013228:	230c      	movs	r3, #12
 801322a:	6033      	str	r3, [r6, #0]
 801322c:	2000      	movs	r0, #0
 801322e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013232:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013308 <_malloc_r+0xfc>
 8013236:	f000 f9f7 	bl	8013628 <__malloc_lock>
 801323a:	f8d8 3000 	ldr.w	r3, [r8]
 801323e:	461c      	mov	r4, r3
 8013240:	bb44      	cbnz	r4, 8013294 <_malloc_r+0x88>
 8013242:	4629      	mov	r1, r5
 8013244:	4630      	mov	r0, r6
 8013246:	f7ff ffbf 	bl	80131c8 <sbrk_aligned>
 801324a:	1c43      	adds	r3, r0, #1
 801324c:	4604      	mov	r4, r0
 801324e:	d158      	bne.n	8013302 <_malloc_r+0xf6>
 8013250:	f8d8 4000 	ldr.w	r4, [r8]
 8013254:	4627      	mov	r7, r4
 8013256:	2f00      	cmp	r7, #0
 8013258:	d143      	bne.n	80132e2 <_malloc_r+0xd6>
 801325a:	2c00      	cmp	r4, #0
 801325c:	d04b      	beq.n	80132f6 <_malloc_r+0xea>
 801325e:	6823      	ldr	r3, [r4, #0]
 8013260:	4639      	mov	r1, r7
 8013262:	4630      	mov	r0, r6
 8013264:	eb04 0903 	add.w	r9, r4, r3
 8013268:	f000 fa32 	bl	80136d0 <_sbrk_r>
 801326c:	4581      	cmp	r9, r0
 801326e:	d142      	bne.n	80132f6 <_malloc_r+0xea>
 8013270:	6821      	ldr	r1, [r4, #0]
 8013272:	1a6d      	subs	r5, r5, r1
 8013274:	4629      	mov	r1, r5
 8013276:	4630      	mov	r0, r6
 8013278:	f7ff ffa6 	bl	80131c8 <sbrk_aligned>
 801327c:	3001      	adds	r0, #1
 801327e:	d03a      	beq.n	80132f6 <_malloc_r+0xea>
 8013280:	6823      	ldr	r3, [r4, #0]
 8013282:	442b      	add	r3, r5
 8013284:	6023      	str	r3, [r4, #0]
 8013286:	f8d8 3000 	ldr.w	r3, [r8]
 801328a:	685a      	ldr	r2, [r3, #4]
 801328c:	bb62      	cbnz	r2, 80132e8 <_malloc_r+0xdc>
 801328e:	f8c8 7000 	str.w	r7, [r8]
 8013292:	e00f      	b.n	80132b4 <_malloc_r+0xa8>
 8013294:	6822      	ldr	r2, [r4, #0]
 8013296:	1b52      	subs	r2, r2, r5
 8013298:	d420      	bmi.n	80132dc <_malloc_r+0xd0>
 801329a:	2a0b      	cmp	r2, #11
 801329c:	d917      	bls.n	80132ce <_malloc_r+0xc2>
 801329e:	1961      	adds	r1, r4, r5
 80132a0:	42a3      	cmp	r3, r4
 80132a2:	6025      	str	r5, [r4, #0]
 80132a4:	bf18      	it	ne
 80132a6:	6059      	strne	r1, [r3, #4]
 80132a8:	6863      	ldr	r3, [r4, #4]
 80132aa:	bf08      	it	eq
 80132ac:	f8c8 1000 	streq.w	r1, [r8]
 80132b0:	5162      	str	r2, [r4, r5]
 80132b2:	604b      	str	r3, [r1, #4]
 80132b4:	4630      	mov	r0, r6
 80132b6:	f000 f9bd 	bl	8013634 <__malloc_unlock>
 80132ba:	f104 000b 	add.w	r0, r4, #11
 80132be:	1d23      	adds	r3, r4, #4
 80132c0:	f020 0007 	bic.w	r0, r0, #7
 80132c4:	1ac2      	subs	r2, r0, r3
 80132c6:	bf1c      	itt	ne
 80132c8:	1a1b      	subne	r3, r3, r0
 80132ca:	50a3      	strne	r3, [r4, r2]
 80132cc:	e7af      	b.n	801322e <_malloc_r+0x22>
 80132ce:	6862      	ldr	r2, [r4, #4]
 80132d0:	42a3      	cmp	r3, r4
 80132d2:	bf0c      	ite	eq
 80132d4:	f8c8 2000 	streq.w	r2, [r8]
 80132d8:	605a      	strne	r2, [r3, #4]
 80132da:	e7eb      	b.n	80132b4 <_malloc_r+0xa8>
 80132dc:	4623      	mov	r3, r4
 80132de:	6864      	ldr	r4, [r4, #4]
 80132e0:	e7ae      	b.n	8013240 <_malloc_r+0x34>
 80132e2:	463c      	mov	r4, r7
 80132e4:	687f      	ldr	r7, [r7, #4]
 80132e6:	e7b6      	b.n	8013256 <_malloc_r+0x4a>
 80132e8:	461a      	mov	r2, r3
 80132ea:	685b      	ldr	r3, [r3, #4]
 80132ec:	42a3      	cmp	r3, r4
 80132ee:	d1fb      	bne.n	80132e8 <_malloc_r+0xdc>
 80132f0:	2300      	movs	r3, #0
 80132f2:	6053      	str	r3, [r2, #4]
 80132f4:	e7de      	b.n	80132b4 <_malloc_r+0xa8>
 80132f6:	230c      	movs	r3, #12
 80132f8:	6033      	str	r3, [r6, #0]
 80132fa:	4630      	mov	r0, r6
 80132fc:	f000 f99a 	bl	8013634 <__malloc_unlock>
 8013300:	e794      	b.n	801322c <_malloc_r+0x20>
 8013302:	6005      	str	r5, [r0, #0]
 8013304:	e7d6      	b.n	80132b4 <_malloc_r+0xa8>
 8013306:	bf00      	nop
 8013308:	240052ec 	.word	0x240052ec

0801330c <_printf_common>:
 801330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013310:	4616      	mov	r6, r2
 8013312:	4698      	mov	r8, r3
 8013314:	688a      	ldr	r2, [r1, #8]
 8013316:	690b      	ldr	r3, [r1, #16]
 8013318:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801331c:	4293      	cmp	r3, r2
 801331e:	bfb8      	it	lt
 8013320:	4613      	movlt	r3, r2
 8013322:	6033      	str	r3, [r6, #0]
 8013324:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013328:	4607      	mov	r7, r0
 801332a:	460c      	mov	r4, r1
 801332c:	b10a      	cbz	r2, 8013332 <_printf_common+0x26>
 801332e:	3301      	adds	r3, #1
 8013330:	6033      	str	r3, [r6, #0]
 8013332:	6823      	ldr	r3, [r4, #0]
 8013334:	0699      	lsls	r1, r3, #26
 8013336:	bf42      	ittt	mi
 8013338:	6833      	ldrmi	r3, [r6, #0]
 801333a:	3302      	addmi	r3, #2
 801333c:	6033      	strmi	r3, [r6, #0]
 801333e:	6825      	ldr	r5, [r4, #0]
 8013340:	f015 0506 	ands.w	r5, r5, #6
 8013344:	d106      	bne.n	8013354 <_printf_common+0x48>
 8013346:	f104 0a19 	add.w	sl, r4, #25
 801334a:	68e3      	ldr	r3, [r4, #12]
 801334c:	6832      	ldr	r2, [r6, #0]
 801334e:	1a9b      	subs	r3, r3, r2
 8013350:	42ab      	cmp	r3, r5
 8013352:	dc26      	bgt.n	80133a2 <_printf_common+0x96>
 8013354:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013358:	6822      	ldr	r2, [r4, #0]
 801335a:	3b00      	subs	r3, #0
 801335c:	bf18      	it	ne
 801335e:	2301      	movne	r3, #1
 8013360:	0692      	lsls	r2, r2, #26
 8013362:	d42b      	bmi.n	80133bc <_printf_common+0xb0>
 8013364:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013368:	4641      	mov	r1, r8
 801336a:	4638      	mov	r0, r7
 801336c:	47c8      	blx	r9
 801336e:	3001      	adds	r0, #1
 8013370:	d01e      	beq.n	80133b0 <_printf_common+0xa4>
 8013372:	6823      	ldr	r3, [r4, #0]
 8013374:	6922      	ldr	r2, [r4, #16]
 8013376:	f003 0306 	and.w	r3, r3, #6
 801337a:	2b04      	cmp	r3, #4
 801337c:	bf02      	ittt	eq
 801337e:	68e5      	ldreq	r5, [r4, #12]
 8013380:	6833      	ldreq	r3, [r6, #0]
 8013382:	1aed      	subeq	r5, r5, r3
 8013384:	68a3      	ldr	r3, [r4, #8]
 8013386:	bf0c      	ite	eq
 8013388:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801338c:	2500      	movne	r5, #0
 801338e:	4293      	cmp	r3, r2
 8013390:	bfc4      	itt	gt
 8013392:	1a9b      	subgt	r3, r3, r2
 8013394:	18ed      	addgt	r5, r5, r3
 8013396:	2600      	movs	r6, #0
 8013398:	341a      	adds	r4, #26
 801339a:	42b5      	cmp	r5, r6
 801339c:	d11a      	bne.n	80133d4 <_printf_common+0xc8>
 801339e:	2000      	movs	r0, #0
 80133a0:	e008      	b.n	80133b4 <_printf_common+0xa8>
 80133a2:	2301      	movs	r3, #1
 80133a4:	4652      	mov	r2, sl
 80133a6:	4641      	mov	r1, r8
 80133a8:	4638      	mov	r0, r7
 80133aa:	47c8      	blx	r9
 80133ac:	3001      	adds	r0, #1
 80133ae:	d103      	bne.n	80133b8 <_printf_common+0xac>
 80133b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80133b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133b8:	3501      	adds	r5, #1
 80133ba:	e7c6      	b.n	801334a <_printf_common+0x3e>
 80133bc:	18e1      	adds	r1, r4, r3
 80133be:	1c5a      	adds	r2, r3, #1
 80133c0:	2030      	movs	r0, #48	@ 0x30
 80133c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80133c6:	4422      	add	r2, r4
 80133c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80133cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80133d0:	3302      	adds	r3, #2
 80133d2:	e7c7      	b.n	8013364 <_printf_common+0x58>
 80133d4:	2301      	movs	r3, #1
 80133d6:	4622      	mov	r2, r4
 80133d8:	4641      	mov	r1, r8
 80133da:	4638      	mov	r0, r7
 80133dc:	47c8      	blx	r9
 80133de:	3001      	adds	r0, #1
 80133e0:	d0e6      	beq.n	80133b0 <_printf_common+0xa4>
 80133e2:	3601      	adds	r6, #1
 80133e4:	e7d9      	b.n	801339a <_printf_common+0x8e>
	...

080133e8 <_printf_i>:
 80133e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133ec:	7e0f      	ldrb	r7, [r1, #24]
 80133ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80133f0:	2f78      	cmp	r7, #120	@ 0x78
 80133f2:	4691      	mov	r9, r2
 80133f4:	4680      	mov	r8, r0
 80133f6:	460c      	mov	r4, r1
 80133f8:	469a      	mov	sl, r3
 80133fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80133fe:	d807      	bhi.n	8013410 <_printf_i+0x28>
 8013400:	2f62      	cmp	r7, #98	@ 0x62
 8013402:	d80a      	bhi.n	801341a <_printf_i+0x32>
 8013404:	2f00      	cmp	r7, #0
 8013406:	f000 80d2 	beq.w	80135ae <_printf_i+0x1c6>
 801340a:	2f58      	cmp	r7, #88	@ 0x58
 801340c:	f000 80b9 	beq.w	8013582 <_printf_i+0x19a>
 8013410:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013414:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013418:	e03a      	b.n	8013490 <_printf_i+0xa8>
 801341a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801341e:	2b15      	cmp	r3, #21
 8013420:	d8f6      	bhi.n	8013410 <_printf_i+0x28>
 8013422:	a101      	add	r1, pc, #4	@ (adr r1, 8013428 <_printf_i+0x40>)
 8013424:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013428:	08013481 	.word	0x08013481
 801342c:	08013495 	.word	0x08013495
 8013430:	08013411 	.word	0x08013411
 8013434:	08013411 	.word	0x08013411
 8013438:	08013411 	.word	0x08013411
 801343c:	08013411 	.word	0x08013411
 8013440:	08013495 	.word	0x08013495
 8013444:	08013411 	.word	0x08013411
 8013448:	08013411 	.word	0x08013411
 801344c:	08013411 	.word	0x08013411
 8013450:	08013411 	.word	0x08013411
 8013454:	08013595 	.word	0x08013595
 8013458:	080134bf 	.word	0x080134bf
 801345c:	0801354f 	.word	0x0801354f
 8013460:	08013411 	.word	0x08013411
 8013464:	08013411 	.word	0x08013411
 8013468:	080135b7 	.word	0x080135b7
 801346c:	08013411 	.word	0x08013411
 8013470:	080134bf 	.word	0x080134bf
 8013474:	08013411 	.word	0x08013411
 8013478:	08013411 	.word	0x08013411
 801347c:	08013557 	.word	0x08013557
 8013480:	6833      	ldr	r3, [r6, #0]
 8013482:	1d1a      	adds	r2, r3, #4
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	6032      	str	r2, [r6, #0]
 8013488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801348c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013490:	2301      	movs	r3, #1
 8013492:	e09d      	b.n	80135d0 <_printf_i+0x1e8>
 8013494:	6833      	ldr	r3, [r6, #0]
 8013496:	6820      	ldr	r0, [r4, #0]
 8013498:	1d19      	adds	r1, r3, #4
 801349a:	6031      	str	r1, [r6, #0]
 801349c:	0606      	lsls	r6, r0, #24
 801349e:	d501      	bpl.n	80134a4 <_printf_i+0xbc>
 80134a0:	681d      	ldr	r5, [r3, #0]
 80134a2:	e003      	b.n	80134ac <_printf_i+0xc4>
 80134a4:	0645      	lsls	r5, r0, #25
 80134a6:	d5fb      	bpl.n	80134a0 <_printf_i+0xb8>
 80134a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80134ac:	2d00      	cmp	r5, #0
 80134ae:	da03      	bge.n	80134b8 <_printf_i+0xd0>
 80134b0:	232d      	movs	r3, #45	@ 0x2d
 80134b2:	426d      	negs	r5, r5
 80134b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80134b8:	4859      	ldr	r0, [pc, #356]	@ (8013620 <_printf_i+0x238>)
 80134ba:	230a      	movs	r3, #10
 80134bc:	e011      	b.n	80134e2 <_printf_i+0xfa>
 80134be:	6821      	ldr	r1, [r4, #0]
 80134c0:	6833      	ldr	r3, [r6, #0]
 80134c2:	0608      	lsls	r0, r1, #24
 80134c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80134c8:	d402      	bmi.n	80134d0 <_printf_i+0xe8>
 80134ca:	0649      	lsls	r1, r1, #25
 80134cc:	bf48      	it	mi
 80134ce:	b2ad      	uxthmi	r5, r5
 80134d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80134d2:	4853      	ldr	r0, [pc, #332]	@ (8013620 <_printf_i+0x238>)
 80134d4:	6033      	str	r3, [r6, #0]
 80134d6:	bf14      	ite	ne
 80134d8:	230a      	movne	r3, #10
 80134da:	2308      	moveq	r3, #8
 80134dc:	2100      	movs	r1, #0
 80134de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80134e2:	6866      	ldr	r6, [r4, #4]
 80134e4:	60a6      	str	r6, [r4, #8]
 80134e6:	2e00      	cmp	r6, #0
 80134e8:	bfa2      	ittt	ge
 80134ea:	6821      	ldrge	r1, [r4, #0]
 80134ec:	f021 0104 	bicge.w	r1, r1, #4
 80134f0:	6021      	strge	r1, [r4, #0]
 80134f2:	b90d      	cbnz	r5, 80134f8 <_printf_i+0x110>
 80134f4:	2e00      	cmp	r6, #0
 80134f6:	d04b      	beq.n	8013590 <_printf_i+0x1a8>
 80134f8:	4616      	mov	r6, r2
 80134fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80134fe:	fb03 5711 	mls	r7, r3, r1, r5
 8013502:	5dc7      	ldrb	r7, [r0, r7]
 8013504:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013508:	462f      	mov	r7, r5
 801350a:	42bb      	cmp	r3, r7
 801350c:	460d      	mov	r5, r1
 801350e:	d9f4      	bls.n	80134fa <_printf_i+0x112>
 8013510:	2b08      	cmp	r3, #8
 8013512:	d10b      	bne.n	801352c <_printf_i+0x144>
 8013514:	6823      	ldr	r3, [r4, #0]
 8013516:	07df      	lsls	r7, r3, #31
 8013518:	d508      	bpl.n	801352c <_printf_i+0x144>
 801351a:	6923      	ldr	r3, [r4, #16]
 801351c:	6861      	ldr	r1, [r4, #4]
 801351e:	4299      	cmp	r1, r3
 8013520:	bfde      	ittt	le
 8013522:	2330      	movle	r3, #48	@ 0x30
 8013524:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013528:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801352c:	1b92      	subs	r2, r2, r6
 801352e:	6122      	str	r2, [r4, #16]
 8013530:	f8cd a000 	str.w	sl, [sp]
 8013534:	464b      	mov	r3, r9
 8013536:	aa03      	add	r2, sp, #12
 8013538:	4621      	mov	r1, r4
 801353a:	4640      	mov	r0, r8
 801353c:	f7ff fee6 	bl	801330c <_printf_common>
 8013540:	3001      	adds	r0, #1
 8013542:	d14a      	bne.n	80135da <_printf_i+0x1f2>
 8013544:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013548:	b004      	add	sp, #16
 801354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801354e:	6823      	ldr	r3, [r4, #0]
 8013550:	f043 0320 	orr.w	r3, r3, #32
 8013554:	6023      	str	r3, [r4, #0]
 8013556:	4833      	ldr	r0, [pc, #204]	@ (8013624 <_printf_i+0x23c>)
 8013558:	2778      	movs	r7, #120	@ 0x78
 801355a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801355e:	6823      	ldr	r3, [r4, #0]
 8013560:	6831      	ldr	r1, [r6, #0]
 8013562:	061f      	lsls	r7, r3, #24
 8013564:	f851 5b04 	ldr.w	r5, [r1], #4
 8013568:	d402      	bmi.n	8013570 <_printf_i+0x188>
 801356a:	065f      	lsls	r7, r3, #25
 801356c:	bf48      	it	mi
 801356e:	b2ad      	uxthmi	r5, r5
 8013570:	6031      	str	r1, [r6, #0]
 8013572:	07d9      	lsls	r1, r3, #31
 8013574:	bf44      	itt	mi
 8013576:	f043 0320 	orrmi.w	r3, r3, #32
 801357a:	6023      	strmi	r3, [r4, #0]
 801357c:	b11d      	cbz	r5, 8013586 <_printf_i+0x19e>
 801357e:	2310      	movs	r3, #16
 8013580:	e7ac      	b.n	80134dc <_printf_i+0xf4>
 8013582:	4827      	ldr	r0, [pc, #156]	@ (8013620 <_printf_i+0x238>)
 8013584:	e7e9      	b.n	801355a <_printf_i+0x172>
 8013586:	6823      	ldr	r3, [r4, #0]
 8013588:	f023 0320 	bic.w	r3, r3, #32
 801358c:	6023      	str	r3, [r4, #0]
 801358e:	e7f6      	b.n	801357e <_printf_i+0x196>
 8013590:	4616      	mov	r6, r2
 8013592:	e7bd      	b.n	8013510 <_printf_i+0x128>
 8013594:	6833      	ldr	r3, [r6, #0]
 8013596:	6825      	ldr	r5, [r4, #0]
 8013598:	6961      	ldr	r1, [r4, #20]
 801359a:	1d18      	adds	r0, r3, #4
 801359c:	6030      	str	r0, [r6, #0]
 801359e:	062e      	lsls	r6, r5, #24
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	d501      	bpl.n	80135a8 <_printf_i+0x1c0>
 80135a4:	6019      	str	r1, [r3, #0]
 80135a6:	e002      	b.n	80135ae <_printf_i+0x1c6>
 80135a8:	0668      	lsls	r0, r5, #25
 80135aa:	d5fb      	bpl.n	80135a4 <_printf_i+0x1bc>
 80135ac:	8019      	strh	r1, [r3, #0]
 80135ae:	2300      	movs	r3, #0
 80135b0:	6123      	str	r3, [r4, #16]
 80135b2:	4616      	mov	r6, r2
 80135b4:	e7bc      	b.n	8013530 <_printf_i+0x148>
 80135b6:	6833      	ldr	r3, [r6, #0]
 80135b8:	1d1a      	adds	r2, r3, #4
 80135ba:	6032      	str	r2, [r6, #0]
 80135bc:	681e      	ldr	r6, [r3, #0]
 80135be:	6862      	ldr	r2, [r4, #4]
 80135c0:	2100      	movs	r1, #0
 80135c2:	4630      	mov	r0, r6
 80135c4:	f7ec fea4 	bl	8000310 <memchr>
 80135c8:	b108      	cbz	r0, 80135ce <_printf_i+0x1e6>
 80135ca:	1b80      	subs	r0, r0, r6
 80135cc:	6060      	str	r0, [r4, #4]
 80135ce:	6863      	ldr	r3, [r4, #4]
 80135d0:	6123      	str	r3, [r4, #16]
 80135d2:	2300      	movs	r3, #0
 80135d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135d8:	e7aa      	b.n	8013530 <_printf_i+0x148>
 80135da:	6923      	ldr	r3, [r4, #16]
 80135dc:	4632      	mov	r2, r6
 80135de:	4649      	mov	r1, r9
 80135e0:	4640      	mov	r0, r8
 80135e2:	47d0      	blx	sl
 80135e4:	3001      	adds	r0, #1
 80135e6:	d0ad      	beq.n	8013544 <_printf_i+0x15c>
 80135e8:	6823      	ldr	r3, [r4, #0]
 80135ea:	079b      	lsls	r3, r3, #30
 80135ec:	d413      	bmi.n	8013616 <_printf_i+0x22e>
 80135ee:	68e0      	ldr	r0, [r4, #12]
 80135f0:	9b03      	ldr	r3, [sp, #12]
 80135f2:	4298      	cmp	r0, r3
 80135f4:	bfb8      	it	lt
 80135f6:	4618      	movlt	r0, r3
 80135f8:	e7a6      	b.n	8013548 <_printf_i+0x160>
 80135fa:	2301      	movs	r3, #1
 80135fc:	4632      	mov	r2, r6
 80135fe:	4649      	mov	r1, r9
 8013600:	4640      	mov	r0, r8
 8013602:	47d0      	blx	sl
 8013604:	3001      	adds	r0, #1
 8013606:	d09d      	beq.n	8013544 <_printf_i+0x15c>
 8013608:	3501      	adds	r5, #1
 801360a:	68e3      	ldr	r3, [r4, #12]
 801360c:	9903      	ldr	r1, [sp, #12]
 801360e:	1a5b      	subs	r3, r3, r1
 8013610:	42ab      	cmp	r3, r5
 8013612:	dcf2      	bgt.n	80135fa <_printf_i+0x212>
 8013614:	e7eb      	b.n	80135ee <_printf_i+0x206>
 8013616:	2500      	movs	r5, #0
 8013618:	f104 0619 	add.w	r6, r4, #25
 801361c:	e7f5      	b.n	801360a <_printf_i+0x222>
 801361e:	bf00      	nop
 8013620:	080138dd 	.word	0x080138dd
 8013624:	080138ee 	.word	0x080138ee

08013628 <__malloc_lock>:
 8013628:	4801      	ldr	r0, [pc, #4]	@ (8013630 <__malloc_lock+0x8>)
 801362a:	f7ff bc65 	b.w	8012ef8 <__retarget_lock_acquire_recursive>
 801362e:	bf00      	nop
 8013630:	240052e4 	.word	0x240052e4

08013634 <__malloc_unlock>:
 8013634:	4801      	ldr	r0, [pc, #4]	@ (801363c <__malloc_unlock+0x8>)
 8013636:	f7ff bc60 	b.w	8012efa <__retarget_lock_release_recursive>
 801363a:	bf00      	nop
 801363c:	240052e4 	.word	0x240052e4

08013640 <_realloc_r>:
 8013640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013644:	4680      	mov	r8, r0
 8013646:	4615      	mov	r5, r2
 8013648:	460c      	mov	r4, r1
 801364a:	b921      	cbnz	r1, 8013656 <_realloc_r+0x16>
 801364c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013650:	4611      	mov	r1, r2
 8013652:	f7ff bddb 	b.w	801320c <_malloc_r>
 8013656:	b92a      	cbnz	r2, 8013664 <_realloc_r+0x24>
 8013658:	f000 f84a 	bl	80136f0 <_free_r>
 801365c:	2400      	movs	r4, #0
 801365e:	4620      	mov	r0, r4
 8013660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013664:	f000 f88e 	bl	8013784 <_malloc_usable_size_r>
 8013668:	4285      	cmp	r5, r0
 801366a:	4606      	mov	r6, r0
 801366c:	d802      	bhi.n	8013674 <_realloc_r+0x34>
 801366e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013672:	d8f4      	bhi.n	801365e <_realloc_r+0x1e>
 8013674:	4629      	mov	r1, r5
 8013676:	4640      	mov	r0, r8
 8013678:	f7ff fdc8 	bl	801320c <_malloc_r>
 801367c:	4607      	mov	r7, r0
 801367e:	2800      	cmp	r0, #0
 8013680:	d0ec      	beq.n	801365c <_realloc_r+0x1c>
 8013682:	42b5      	cmp	r5, r6
 8013684:	462a      	mov	r2, r5
 8013686:	4621      	mov	r1, r4
 8013688:	bf28      	it	cs
 801368a:	4632      	movcs	r2, r6
 801368c:	f7ff fc36 	bl	8012efc <memcpy>
 8013690:	4621      	mov	r1, r4
 8013692:	4640      	mov	r0, r8
 8013694:	f000 f82c 	bl	80136f0 <_free_r>
 8013698:	463c      	mov	r4, r7
 801369a:	e7e0      	b.n	801365e <_realloc_r+0x1e>

0801369c <memmove>:
 801369c:	4288      	cmp	r0, r1
 801369e:	b510      	push	{r4, lr}
 80136a0:	eb01 0402 	add.w	r4, r1, r2
 80136a4:	d902      	bls.n	80136ac <memmove+0x10>
 80136a6:	4284      	cmp	r4, r0
 80136a8:	4623      	mov	r3, r4
 80136aa:	d807      	bhi.n	80136bc <memmove+0x20>
 80136ac:	1e43      	subs	r3, r0, #1
 80136ae:	42a1      	cmp	r1, r4
 80136b0:	d008      	beq.n	80136c4 <memmove+0x28>
 80136b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80136b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80136ba:	e7f8      	b.n	80136ae <memmove+0x12>
 80136bc:	4402      	add	r2, r0
 80136be:	4601      	mov	r1, r0
 80136c0:	428a      	cmp	r2, r1
 80136c2:	d100      	bne.n	80136c6 <memmove+0x2a>
 80136c4:	bd10      	pop	{r4, pc}
 80136c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80136ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80136ce:	e7f7      	b.n	80136c0 <memmove+0x24>

080136d0 <_sbrk_r>:
 80136d0:	b538      	push	{r3, r4, r5, lr}
 80136d2:	4d06      	ldr	r5, [pc, #24]	@ (80136ec <_sbrk_r+0x1c>)
 80136d4:	2300      	movs	r3, #0
 80136d6:	4604      	mov	r4, r0
 80136d8:	4608      	mov	r0, r1
 80136da:	602b      	str	r3, [r5, #0]
 80136dc:	f7f0 fc0a 	bl	8003ef4 <_sbrk>
 80136e0:	1c43      	adds	r3, r0, #1
 80136e2:	d102      	bne.n	80136ea <_sbrk_r+0x1a>
 80136e4:	682b      	ldr	r3, [r5, #0]
 80136e6:	b103      	cbz	r3, 80136ea <_sbrk_r+0x1a>
 80136e8:	6023      	str	r3, [r4, #0]
 80136ea:	bd38      	pop	{r3, r4, r5, pc}
 80136ec:	240052f0 	.word	0x240052f0

080136f0 <_free_r>:
 80136f0:	b538      	push	{r3, r4, r5, lr}
 80136f2:	4605      	mov	r5, r0
 80136f4:	2900      	cmp	r1, #0
 80136f6:	d041      	beq.n	801377c <_free_r+0x8c>
 80136f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136fc:	1f0c      	subs	r4, r1, #4
 80136fe:	2b00      	cmp	r3, #0
 8013700:	bfb8      	it	lt
 8013702:	18e4      	addlt	r4, r4, r3
 8013704:	f7ff ff90 	bl	8013628 <__malloc_lock>
 8013708:	4a1d      	ldr	r2, [pc, #116]	@ (8013780 <_free_r+0x90>)
 801370a:	6813      	ldr	r3, [r2, #0]
 801370c:	b933      	cbnz	r3, 801371c <_free_r+0x2c>
 801370e:	6063      	str	r3, [r4, #4]
 8013710:	6014      	str	r4, [r2, #0]
 8013712:	4628      	mov	r0, r5
 8013714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013718:	f7ff bf8c 	b.w	8013634 <__malloc_unlock>
 801371c:	42a3      	cmp	r3, r4
 801371e:	d908      	bls.n	8013732 <_free_r+0x42>
 8013720:	6820      	ldr	r0, [r4, #0]
 8013722:	1821      	adds	r1, r4, r0
 8013724:	428b      	cmp	r3, r1
 8013726:	bf01      	itttt	eq
 8013728:	6819      	ldreq	r1, [r3, #0]
 801372a:	685b      	ldreq	r3, [r3, #4]
 801372c:	1809      	addeq	r1, r1, r0
 801372e:	6021      	streq	r1, [r4, #0]
 8013730:	e7ed      	b.n	801370e <_free_r+0x1e>
 8013732:	461a      	mov	r2, r3
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	b10b      	cbz	r3, 801373c <_free_r+0x4c>
 8013738:	42a3      	cmp	r3, r4
 801373a:	d9fa      	bls.n	8013732 <_free_r+0x42>
 801373c:	6811      	ldr	r1, [r2, #0]
 801373e:	1850      	adds	r0, r2, r1
 8013740:	42a0      	cmp	r0, r4
 8013742:	d10b      	bne.n	801375c <_free_r+0x6c>
 8013744:	6820      	ldr	r0, [r4, #0]
 8013746:	4401      	add	r1, r0
 8013748:	1850      	adds	r0, r2, r1
 801374a:	4283      	cmp	r3, r0
 801374c:	6011      	str	r1, [r2, #0]
 801374e:	d1e0      	bne.n	8013712 <_free_r+0x22>
 8013750:	6818      	ldr	r0, [r3, #0]
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	6053      	str	r3, [r2, #4]
 8013756:	4408      	add	r0, r1
 8013758:	6010      	str	r0, [r2, #0]
 801375a:	e7da      	b.n	8013712 <_free_r+0x22>
 801375c:	d902      	bls.n	8013764 <_free_r+0x74>
 801375e:	230c      	movs	r3, #12
 8013760:	602b      	str	r3, [r5, #0]
 8013762:	e7d6      	b.n	8013712 <_free_r+0x22>
 8013764:	6820      	ldr	r0, [r4, #0]
 8013766:	1821      	adds	r1, r4, r0
 8013768:	428b      	cmp	r3, r1
 801376a:	bf04      	itt	eq
 801376c:	6819      	ldreq	r1, [r3, #0]
 801376e:	685b      	ldreq	r3, [r3, #4]
 8013770:	6063      	str	r3, [r4, #4]
 8013772:	bf04      	itt	eq
 8013774:	1809      	addeq	r1, r1, r0
 8013776:	6021      	streq	r1, [r4, #0]
 8013778:	6054      	str	r4, [r2, #4]
 801377a:	e7ca      	b.n	8013712 <_free_r+0x22>
 801377c:	bd38      	pop	{r3, r4, r5, pc}
 801377e:	bf00      	nop
 8013780:	240052ec 	.word	0x240052ec

08013784 <_malloc_usable_size_r>:
 8013784:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013788:	1f18      	subs	r0, r3, #4
 801378a:	2b00      	cmp	r3, #0
 801378c:	bfbc      	itt	lt
 801378e:	580b      	ldrlt	r3, [r1, r0]
 8013790:	18c0      	addlt	r0, r0, r3
 8013792:	4770      	bx	lr

08013794 <_init>:
 8013794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013796:	bf00      	nop
 8013798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801379a:	bc08      	pop	{r3}
 801379c:	469e      	mov	lr, r3
 801379e:	4770      	bx	lr

080137a0 <_fini>:
 80137a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137a2:	bf00      	nop
 80137a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80137a6:	bc08      	pop	{r3}
 80137a8:	469e      	mov	lr, r3
 80137aa:	4770      	bx	lr
