
InfantryShooter2025FINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011970  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d4  08011b00  08011b00  00012b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080121d4  080121d4  00014204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080121d4  080121d4  000131d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080121dc  080121dc  00014204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080121dc  080121dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080121e0  080121e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  080121e4  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014204  2**0
                  CONTENTS
 10 .bss          0000589c  20000208  20000208  00014208  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005aa4  20005aa4  00014208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002607e  00000000  00000000  00014234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000051b4  00000000  00000000  0003a2b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021d0  00000000  00000000  0003f468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a50  00000000  00000000  00041638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000268cd  00000000  00000000  00043088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025988  00000000  00000000  00069955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3b31  00000000  00000000  0008f2dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00172e0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009fe4  00000000  00000000  00172e54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007f  00000000  00000000  0017ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011ae8 	.word	0x08011ae8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08011ae8 	.word	0x08011ae8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000f7e:	e003      	b.n	8000f88 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000f80:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f84:	f000 f80a 	bl	8000f9c <BMI088_delay_us>
    while(ms--)
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	1e5a      	subs	r2, r3, #1
 8000f8c:	80fa      	strh	r2, [r7, #6]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d1f6      	bne.n	8000f80 <BMI088_delay_ms+0xc>
    }
}
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000fba:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <BMI088_delay_us+0x84>)
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	22a8      	movs	r2, #168	@ 0xa8
 8000fc4:	fb02 f303 	mul.w	r3, r2, r3
 8000fc8:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000fca:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <BMI088_delay_us+0x84>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000fd0:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <BMI088_delay_us+0x84>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d0f8      	beq.n	8000fd0 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	429a      	cmp	r2, r3
 8000fe4:	d206      	bcs.n	8000ff4 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4413      	add	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	e007      	b.n	8001004 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad2      	subs	r2, r2, r3
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4413      	add	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	429a      	cmp	r2, r3
 800100e:	d200      	bcs.n	8001012 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8001010:	e7de      	b.n	8000fd0 <BMI088_delay_us+0x34>
            {
                break;
 8001012:	bf00      	nop
            }
        }
    }


}
 8001014:	bf00      	nop
 8001016:	3724      	adds	r7, #36	@ 0x24
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e010 	.word	0xe000e010

08001024 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <BMI088_ACCEL_NS_L+0x18>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a04      	ldr	r2, [pc, #16]	@ (8001040 <BMI088_ACCEL_NS_L+0x1c>)
 800102e:	8811      	ldrh	r1, [r2, #0]
 8001030:	2200      	movs	r2, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f007 fda8 	bl	8008b88 <HAL_GPIO_WritePin>
}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000
 8001040:	20000004 	.word	0x20000004

08001044 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8001048:	4b04      	ldr	r3, [pc, #16]	@ (800105c <BMI088_ACCEL_NS_H+0x18>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a04      	ldr	r2, [pc, #16]	@ (8001060 <BMI088_ACCEL_NS_H+0x1c>)
 800104e:	8811      	ldrh	r1, [r2, #0]
 8001050:	2201      	movs	r2, #1
 8001052:	4618      	mov	r0, r3
 8001054:	f007 fd98 	bl	8008b88 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000004 	.word	0x20000004

08001064 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8001068:	4b04      	ldr	r3, [pc, #16]	@ (800107c <BMI088_GYRO_NS_L+0x18>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a04      	ldr	r2, [pc, #16]	@ (8001080 <BMI088_GYRO_NS_L+0x1c>)
 800106e:	8811      	ldrh	r1, [r2, #0]
 8001070:	2200      	movs	r2, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f007 fd88 	bl	8008b88 <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20000008 	.word	0x20000008
 8001080:	2000000c 	.word	0x2000000c

08001084 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8001088:	4b04      	ldr	r3, [pc, #16]	@ (800109c <BMI088_GYRO_NS_H+0x18>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a04      	ldr	r2, [pc, #16]	@ (80010a0 <BMI088_GYRO_NS_H+0x1c>)
 800108e:	8811      	ldrh	r1, [r2, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	4618      	mov	r0, r3
 8001094:	f007 fd78 	bl	8008b88 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000008 	.word	0x20000008
 80010a0:	2000000c 	.word	0x2000000c

080010a4 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af02      	add	r7, sp, #8
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 80010ae:	f107 020f 	add.w	r2, r7, #15
 80010b2:	1df9      	adds	r1, r7, #7
 80010b4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <BMI088_read_write_byte+0x28>)
 80010be:	f008 fbe1 	bl	8009884 <HAL_SPI_TransmitReceive>
    return rx_data;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000b9c 	.word	0x20000b9c

080010d0 <BMI088_gyro_init>:
    }
    return BMI088_NO_ERROR;
}

uint8_t BMI088_gyro_init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80010de:	f7ff ffc1 	bl	8001064 <BMI088_GYRO_NS_L>
 80010e2:	1dbb      	adds	r3, r7, #6
 80010e4:	4619      	mov	r1, r3
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f9c8 	bl	800147c <BMI088_read_single_reg>
 80010ec:	f7ff ffca 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010f0:	2096      	movs	r0, #150	@ 0x96
 80010f2:	f7ff ff53 	bl	8000f9c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80010f6:	f7ff ffb5 	bl	8001064 <BMI088_GYRO_NS_L>
 80010fa:	1dbb      	adds	r3, r7, #6
 80010fc:	4619      	mov	r1, r3
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f9bc 	bl	800147c <BMI088_read_single_reg>
 8001104:	f7ff ffbe 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001108:	2096      	movs	r0, #150	@ 0x96
 800110a:	f7ff ff47 	bl	8000f9c <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 800110e:	f7ff ffa9 	bl	8001064 <BMI088_GYRO_NS_L>
 8001112:	21b6      	movs	r1, #182	@ 0xb6
 8001114:	2014      	movs	r0, #20
 8001116:	f000 f99d 	bl	8001454 <BMI088_write_single_reg>
 800111a:	f7ff ffb3 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 800111e:	2050      	movs	r0, #80	@ 0x50
 8001120:	f7ff ff28 	bl	8000f74 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001124:	f7ff ff9e 	bl	8001064 <BMI088_GYRO_NS_L>
 8001128:	1dbb      	adds	r3, r7, #6
 800112a:	4619      	mov	r1, r3
 800112c:	2000      	movs	r0, #0
 800112e:	f000 f9a5 	bl	800147c <BMI088_read_single_reg>
 8001132:	f7ff ffa7 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001136:	2096      	movs	r0, #150	@ 0x96
 8001138:	f7ff ff30 	bl	8000f9c <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800113c:	f7ff ff92 	bl	8001064 <BMI088_GYRO_NS_L>
 8001140:	1dbb      	adds	r3, r7, #6
 8001142:	4619      	mov	r1, r3
 8001144:	2000      	movs	r0, #0
 8001146:	f000 f999 	bl	800147c <BMI088_read_single_reg>
 800114a:	f7ff ff9b 	bl	8001084 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800114e:	2096      	movs	r0, #150	@ 0x96
 8001150:	f7ff ff24 	bl	8000f9c <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	2b0f      	cmp	r3, #15
 8001158:	d001      	beq.n	800115e <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 800115a:	23ff      	movs	r3, #255	@ 0xff
 800115c:	e049      	b.n	80011f2 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 800115e:	2300      	movs	r3, #0
 8001160:	71fb      	strb	r3, [r7, #7]
 8001162:	e042      	b.n	80011ea <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8001164:	f7ff ff7e 	bl	8001064 <BMI088_GYRO_NS_L>
 8001168:	79fa      	ldrb	r2, [r7, #7]
 800116a:	4924      	ldr	r1, [pc, #144]	@ (80011fc <BMI088_gyro_init+0x12c>)
 800116c:	4613      	mov	r3, r2
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	4413      	add	r3, r2
 8001172:	440b      	add	r3, r1
 8001174:	7818      	ldrb	r0, [r3, #0]
 8001176:	79fa      	ldrb	r2, [r7, #7]
 8001178:	4920      	ldr	r1, [pc, #128]	@ (80011fc <BMI088_gyro_init+0x12c>)
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	440b      	add	r3, r1
 8001182:	3301      	adds	r3, #1
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	4619      	mov	r1, r3
 8001188:	f000 f964 	bl	8001454 <BMI088_write_single_reg>
 800118c:	f7ff ff7a 	bl	8001084 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001190:	2096      	movs	r0, #150	@ 0x96
 8001192:	f7ff ff03 	bl	8000f9c <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 8001196:	f7ff ff65 	bl	8001064 <BMI088_GYRO_NS_L>
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	4917      	ldr	r1, [pc, #92]	@ (80011fc <BMI088_gyro_init+0x12c>)
 800119e:	4613      	mov	r3, r2
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	4413      	add	r3, r2
 80011a4:	440b      	add	r3, r1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	1dba      	adds	r2, r7, #6
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 f965 	bl	800147c <BMI088_read_single_reg>
 80011b2:	f7ff ff67 	bl	8001084 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011b6:	2096      	movs	r0, #150	@ 0x96
 80011b8:	f7ff fef0 	bl	8000f9c <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 80011bc:	79fa      	ldrb	r2, [r7, #7]
 80011be:	490f      	ldr	r1, [pc, #60]	@ (80011fc <BMI088_gyro_init+0x12c>)
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	3301      	adds	r3, #1
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d008      	beq.n	80011e4 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 80011d2:	79fa      	ldrb	r2, [r7, #7]
 80011d4:	4909      	ldr	r1, [pc, #36]	@ (80011fc <BMI088_gyro_init+0x12c>)
 80011d6:	4613      	mov	r3, r2
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4413      	add	r3, r2
 80011dc:	440b      	add	r3, r1
 80011de:	3302      	adds	r3, #2
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	e006      	b.n	80011f2 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	3301      	adds	r3, #1
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	2b05      	cmp	r3, #5
 80011ee:	d9b9      	bls.n	8001164 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000018 	.word	0x20000018

08001200 <IMU_get_gyro>:
float IMU_get_gyro(uint8_t axis) {
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
    BMI088_read(gyro, accel, &temp);
 800120a:	4a10      	ldr	r2, [pc, #64]	@ (800124c <IMU_get_gyro+0x4c>)
 800120c:	4910      	ldr	r1, [pc, #64]	@ (8001250 <IMU_get_gyro+0x50>)
 800120e:	4811      	ldr	r0, [pc, #68]	@ (8001254 <IMU_get_gyro+0x54>)
 8001210:	f000 f836 	bl	8001280 <BMI088_read>
    if(axis == 0){
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d102      	bne.n	8001220 <IMU_get_gyro+0x20>
        return (gyro[0]);
 800121a:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <IMU_get_gyro+0x54>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	e00d      	b.n	800123c <IMU_get_gyro+0x3c>
    } else if (axis == 1) {
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d102      	bne.n	800122c <IMU_get_gyro+0x2c>
        return (gyro[1]);
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <IMU_get_gyro+0x54>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	e007      	b.n	800123c <IMU_get_gyro+0x3c>
    } else if (axis == 2) {
 800122c:	79fb      	ldrb	r3, [r7, #7]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d102      	bne.n	8001238 <IMU_get_gyro+0x38>
        return (gyro[2]);
 8001232:	4b08      	ldr	r3, [pc, #32]	@ (8001254 <IMU_get_gyro+0x54>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	e001      	b.n	800123c <IMU_get_gyro+0x3c>
    } else {
        return 0;
 8001238:	f04f 0300 	mov.w	r3, #0
    }
}
 800123c:	ee07 3a90 	vmov	s15, r3
 8001240:	eeb0 0a67 	vmov.f32	s0, s15
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000023c 	.word	0x2000023c
 8001250:	20000230 	.word	0x20000230
 8001254:	20000224 	.word	0x20000224

08001258 <IMU_get_temp>:
        return accel[2];
    } else {
        return 0;
    }
}
float IMU_get_temp(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 800125c:	4a05      	ldr	r2, [pc, #20]	@ (8001274 <IMU_get_temp+0x1c>)
 800125e:	4906      	ldr	r1, [pc, #24]	@ (8001278 <IMU_get_temp+0x20>)
 8001260:	4806      	ldr	r0, [pc, #24]	@ (800127c <IMU_get_temp+0x24>)
 8001262:	f000 f80d 	bl	8001280 <BMI088_read>
	return temp;
 8001266:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <IMU_get_temp+0x1c>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	ee07 3a90 	vmov	s15, r3
}
 800126e:	eeb0 0a67 	vmov.f32	s0, s15
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2000023c 	.word	0x2000023c
 8001278:	20000230 	.word	0x20000230
 800127c:	20000224 	.word	0x20000224

08001280 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8001296:	f7ff fec5 	bl	8001024 <BMI088_ACCEL_NS_L>
 800129a:	2092      	movs	r0, #146	@ 0x92
 800129c:	f7ff ff02 	bl	80010a4 <BMI088_read_write_byte>
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2206      	movs	r2, #6
 80012a6:	4619      	mov	r1, r3
 80012a8:	2012      	movs	r0, #18
 80012aa:	f000 f8ff 	bl	80014ac <BMI088_read_muli_reg>
 80012ae:	f7ff fec9 	bl	8001044 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80012b2:	7d7b      	ldrb	r3, [r7, #21]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	021b      	lsls	r3, r3, #8
 80012b8:	b21a      	sxth	r2, r3
 80012ba:	7d3b      	ldrb	r3, [r7, #20]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	4313      	orrs	r3, r2
 80012c0:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80012c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	4b5f      	ldr	r3, [pc, #380]	@ (800144c <BMI088_read+0x1cc>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80012de:	7dfb      	ldrb	r3, [r7, #23]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	021b      	lsls	r3, r3, #8
 80012e4:	b21a      	sxth	r2, r3
 80012e6:	7dbb      	ldrb	r3, [r7, #22]
 80012e8:	b21b      	sxth	r3, r3
 80012ea:	4313      	orrs	r3, r2
 80012ec:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80012ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012fa:	4b54      	ldr	r3, [pc, #336]	@ (800144c <BMI088_read+0x1cc>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	3304      	adds	r3, #4
 8001304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001308:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800130c:	7e7b      	ldrb	r3, [r7, #25]
 800130e:	b21b      	sxth	r3, r3
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	7e3b      	ldrb	r3, [r7, #24]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800131c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001320:	ee07 3a90 	vmov	s15, r3
 8001324:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001328:	4b48      	ldr	r3, [pc, #288]	@ (800144c <BMI088_read+0x1cc>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3308      	adds	r3, #8
 8001332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001336:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 800133a:	f7ff fe93 	bl	8001064 <BMI088_GYRO_NS_L>
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	2208      	movs	r2, #8
 8001344:	4619      	mov	r1, r3
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f8b0 	bl	80014ac <BMI088_read_muli_reg>
 800134c:	f7ff fe9a 	bl	8001084 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8001350:	7d3b      	ldrb	r3, [r7, #20]
 8001352:	2b0f      	cmp	r3, #15
 8001354:	d143      	bne.n	80013de <BMI088_read+0x15e>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001356:	7dfb      	ldrb	r3, [r7, #23]
 8001358:	b21b      	sxth	r3, r3
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	7dbb      	ldrb	r3, [r7, #22]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001366:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800136a:	ee07 3a90 	vmov	s15, r3
 800136e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001372:	4b37      	ldr	r3, [pc, #220]	@ (8001450 <BMI088_read+0x1d0>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001382:	7e7b      	ldrb	r3, [r7, #25]
 8001384:	b21b      	sxth	r3, r3
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	7e3b      	ldrb	r3, [r7, #24]
 800138c:	b21b      	sxth	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001392:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139e:	4b2c      	ldr	r3, [pc, #176]	@ (8001450 <BMI088_read+0x1d0>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	3304      	adds	r3, #4
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ac:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80013b0:	7efb      	ldrb	r3, [r7, #27]
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	021b      	lsls	r3, r3, #8
 80013b6:	b21a      	sxth	r2, r3
 80013b8:	7ebb      	ldrb	r3, [r7, #26]
 80013ba:	b21b      	sxth	r3, r3
 80013bc:	4313      	orrs	r3, r2
 80013be:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80013c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013cc:	4b20      	ldr	r3, [pc, #128]	@ (8001450 <BMI088_read+0x1d0>)
 80013ce:	edd3 7a00 	vldr	s15, [r3]
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3308      	adds	r3, #8
 80013d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013da:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 80013de:	f7ff fe21 	bl	8001024 <BMI088_ACCEL_NS_L>
 80013e2:	20a2      	movs	r0, #162	@ 0xa2
 80013e4:	f7ff fe5e 	bl	80010a4 <BMI088_read_write_byte>
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2202      	movs	r2, #2
 80013ee:	4619      	mov	r1, r3
 80013f0:	2022      	movs	r0, #34	@ 0x22
 80013f2:	f000 f85b 	bl	80014ac <BMI088_read_muli_reg>
 80013f6:	f7ff fe25 	bl	8001044 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	b21a      	sxth	r2, r3
 8001402:	7d7b      	ldrb	r3, [r7, #21]
 8001404:	095b      	lsrs	r3, r3, #5
 8001406:	b2db      	uxtb	r3, r3
 8001408:	b21b      	sxth	r3, r3
 800140a:	4313      	orrs	r3, r2
 800140c:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 800140e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001412:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001416:	db04      	blt.n	8001422 <BMI088_read+0x1a2>
    {
        bmi088_raw_temp -= 2048;
 8001418:	8bfb      	ldrh	r3, [r7, #30]
 800141a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800141e:	b29b      	uxth	r3, r3
 8001420:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001422:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001426:	ee07 3a90 	vmov	s15, r3
 800142a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142e:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001432:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001436:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 800143a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	edc3 7a00 	vstr	s15, [r3]
}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000010 	.word	0x20000010
 8001450:	20000014 	.word	0x20000014

08001454 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	460a      	mov	r2, r1
 800145e:	71fb      	strb	r3, [r7, #7]
 8001460:	4613      	mov	r3, r2
 8001462:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fe1c 	bl	80010a4 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe18 	bl	80010a4 <BMI088_read_write_byte>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	6039      	str	r1, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fe07 	bl	80010a4 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 8001496:	2055      	movs	r0, #85	@ 0x55
 8001498:	f7ff fe04 	bl	80010a4 <BMI088_read_write_byte>
 800149c:	4603      	mov	r3, r0
 800149e:	461a      	mov	r2, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	701a      	strb	r2, [r3, #0]
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	4613      	mov	r3, r2
 80014ba:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 80014bc:	79fb      	ldrb	r3, [r7, #7]
 80014be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff fded 	bl	80010a4 <BMI088_read_write_byte>

    while (len != 0)
 80014ca:	e00c      	b.n	80014e6 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 80014cc:	2055      	movs	r0, #85	@ 0x55
 80014ce:	f7ff fde9 	bl	80010a4 <BMI088_read_write_byte>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	701a      	strb	r2, [r3, #0]
        buf++;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3301      	adds	r3, #1
 80014de:	603b      	str	r3, [r7, #0]
        len--;
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 80014e6:	79bb      	ldrb	r3, [r7, #6]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d1ef      	bne.n	80014cc <BMI088_read_muli_reg+0x20>
    }
}
 80014ec:	bf00      	nop
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <CAL_Update>:
int16_t dCounter = 0;

int16_t mouseX = 0;
int16_t mouseY = 0;

void CAL_Update(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 80014fc:	f001 ff76 	bl	80033ec <getDR16_S2>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d13b      	bne.n	800157e <CAL_Update+0x86>
		isWPressed = getDR16_W();
 8001506:	f001 ff95 	bl	8003434 <getDR16_W>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b90      	ldr	r3, [pc, #576]	@ (8001750 <CAL_Update+0x258>)
 8001510:	701a      	strb	r2, [r3, #0]
		isAPressed = getDR16_A();
 8001512:	f001 ffab 	bl	800346c <getDR16_A>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b8e      	ldr	r3, [pc, #568]	@ (8001754 <CAL_Update+0x25c>)
 800151c:	701a      	strb	r2, [r3, #0]
		isSPressed = getDR16_S();
 800151e:	f001 ff97 	bl	8003450 <getDR16_S>
 8001522:	4603      	mov	r3, r0
 8001524:	461a      	mov	r2, r3
 8001526:	4b8c      	ldr	r3, [pc, #560]	@ (8001758 <CAL_Update+0x260>)
 8001528:	701a      	strb	r2, [r3, #0]
		isDPressed = getDR16_D();
 800152a:	f001 ffad 	bl	8003488 <getDR16_D>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	4b8a      	ldr	r3, [pc, #552]	@ (800175c <CAL_Update+0x264>)
 8001534:	701a      	strb	r2, [r3, #0]
		mouseX = (int16_t)(((float)getDR16_MouseX())*MOUSE_SCALER);
 8001536:	f001 ffb5 	bl	80034a4 <getDR16_MouseX>
 800153a:	4603      	mov	r3, r0
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001544:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001550:	ee17 3a90 	vmov	r3, s15
 8001554:	b21a      	sxth	r2, r3
 8001556:	4b82      	ldr	r3, [pc, #520]	@ (8001760 <CAL_Update+0x268>)
 8001558:	801a      	strh	r2, [r3, #0]
		mouseY = (int16_t)(((float)getDR16_MouseY())*MOUSE_SCALER);
 800155a:	f001 ffaf 	bl	80034bc <getDR16_MouseY>
 800155e:	4603      	mov	r3, r0
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001568:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800156c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001570:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001574:	ee17 3a90 	vmov	r3, s15
 8001578:	b21a      	sxth	r2, r3
 800157a:	4b7a      	ldr	r3, [pc, #488]	@ (8001764 <CAL_Update+0x26c>)
 800157c:	801a      	strh	r2, [r3, #0]
	}
	if(isWPressed ==1){
 800157e:	4b74      	ldr	r3, [pc, #464]	@ (8001750 <CAL_Update+0x258>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d115      	bne.n	80015b2 <CAL_Update+0xba>
		wCounter = wCounter + RISING_SCALER;
 8001586:	4b78      	ldr	r3, [pc, #480]	@ (8001768 <CAL_Update+0x270>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	b29a      	uxth	r2, r3
 800158e:	2305      	movs	r3, #5
 8001590:	b29b      	uxth	r3, r3
 8001592:	4413      	add	r3, r2
 8001594:	b29b      	uxth	r3, r3
 8001596:	b21a      	sxth	r2, r3
 8001598:	4b73      	ldr	r3, [pc, #460]	@ (8001768 <CAL_Update+0x270>)
 800159a:	801a      	strh	r2, [r3, #0]
		if(wCounter>660){
 800159c:	4b72      	ldr	r3, [pc, #456]	@ (8001768 <CAL_Update+0x270>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80015a6:	dd1c      	ble.n	80015e2 <CAL_Update+0xea>
			wCounter = 660;
 80015a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001768 <CAL_Update+0x270>)
 80015aa:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80015ae:	801a      	strh	r2, [r3, #0]
 80015b0:	e017      	b.n	80015e2 <CAL_Update+0xea>
		}
	}else{
		if(wCounter>0){
 80015b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001768 <CAL_Update+0x270>)
 80015b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	dd0a      	ble.n	80015d2 <CAL_Update+0xda>
			wCounter = wCounter - FALLING_SCALER;
 80015bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001768 <CAL_Update+0x270>)
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	230a      	movs	r3, #10
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	b21a      	sxth	r2, r3
 80015ce:	4b66      	ldr	r3, [pc, #408]	@ (8001768 <CAL_Update+0x270>)
 80015d0:	801a      	strh	r2, [r3, #0]
		}
		if(wCounter<0){
 80015d2:	4b65      	ldr	r3, [pc, #404]	@ (8001768 <CAL_Update+0x270>)
 80015d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	da02      	bge.n	80015e2 <CAL_Update+0xea>
			wCounter = 0;
 80015dc:	4b62      	ldr	r3, [pc, #392]	@ (8001768 <CAL_Update+0x270>)
 80015de:	2200      	movs	r2, #0
 80015e0:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isDPressed ==1){
 80015e2:	4b5e      	ldr	r3, [pc, #376]	@ (800175c <CAL_Update+0x264>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d115      	bne.n	8001616 <CAL_Update+0x11e>
		dCounter = dCounter + RISING_SCALER;
 80015ea:	4b60      	ldr	r3, [pc, #384]	@ (800176c <CAL_Update+0x274>)
 80015ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	2305      	movs	r3, #5
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	4413      	add	r3, r2
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b5b      	ldr	r3, [pc, #364]	@ (800176c <CAL_Update+0x274>)
 80015fe:	801a      	strh	r2, [r3, #0]
		if(dCounter>660){
 8001600:	4b5a      	ldr	r3, [pc, #360]	@ (800176c <CAL_Update+0x274>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800160a:	dd1c      	ble.n	8001646 <CAL_Update+0x14e>
			dCounter = 660;
 800160c:	4b57      	ldr	r3, [pc, #348]	@ (800176c <CAL_Update+0x274>)
 800160e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001612:	801a      	strh	r2, [r3, #0]
 8001614:	e017      	b.n	8001646 <CAL_Update+0x14e>
		}
	}else{
		if(dCounter>0){
 8001616:	4b55      	ldr	r3, [pc, #340]	@ (800176c <CAL_Update+0x274>)
 8001618:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161c:	2b00      	cmp	r3, #0
 800161e:	dd0a      	ble.n	8001636 <CAL_Update+0x13e>
			dCounter = dCounter - FALLING_SCALER;
 8001620:	4b52      	ldr	r3, [pc, #328]	@ (800176c <CAL_Update+0x274>)
 8001622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001626:	b29a      	uxth	r2, r3
 8001628:	230a      	movs	r3, #10
 800162a:	b29b      	uxth	r3, r3
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	b29b      	uxth	r3, r3
 8001630:	b21a      	sxth	r2, r3
 8001632:	4b4e      	ldr	r3, [pc, #312]	@ (800176c <CAL_Update+0x274>)
 8001634:	801a      	strh	r2, [r3, #0]
		}
		if(dCounter<0){
 8001636:	4b4d      	ldr	r3, [pc, #308]	@ (800176c <CAL_Update+0x274>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	2b00      	cmp	r3, #0
 800163e:	da02      	bge.n	8001646 <CAL_Update+0x14e>
			dCounter = 0;
 8001640:	4b4a      	ldr	r3, [pc, #296]	@ (800176c <CAL_Update+0x274>)
 8001642:	2200      	movs	r2, #0
 8001644:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isSPressed ==1){
 8001646:	4b44      	ldr	r3, [pc, #272]	@ (8001758 <CAL_Update+0x260>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d115      	bne.n	800167a <CAL_Update+0x182>
		sCounter = sCounter + RISING_SCALER;
 800164e:	4b48      	ldr	r3, [pc, #288]	@ (8001770 <CAL_Update+0x278>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	b29a      	uxth	r2, r3
 8001656:	2305      	movs	r3, #5
 8001658:	b29b      	uxth	r3, r3
 800165a:	4413      	add	r3, r2
 800165c:	b29b      	uxth	r3, r3
 800165e:	b21a      	sxth	r2, r3
 8001660:	4b43      	ldr	r3, [pc, #268]	@ (8001770 <CAL_Update+0x278>)
 8001662:	801a      	strh	r2, [r3, #0]
		if(sCounter>660){
 8001664:	4b42      	ldr	r3, [pc, #264]	@ (8001770 <CAL_Update+0x278>)
 8001666:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166a:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800166e:	dd1c      	ble.n	80016aa <CAL_Update+0x1b2>
			sCounter = 660;
 8001670:	4b3f      	ldr	r3, [pc, #252]	@ (8001770 <CAL_Update+0x278>)
 8001672:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001676:	801a      	strh	r2, [r3, #0]
 8001678:	e017      	b.n	80016aa <CAL_Update+0x1b2>
		}
	}else{
		if(sCounter>0){
 800167a:	4b3d      	ldr	r3, [pc, #244]	@ (8001770 <CAL_Update+0x278>)
 800167c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001680:	2b00      	cmp	r3, #0
 8001682:	dd0a      	ble.n	800169a <CAL_Update+0x1a2>
			sCounter = sCounter - FALLING_SCALER;
 8001684:	4b3a      	ldr	r3, [pc, #232]	@ (8001770 <CAL_Update+0x278>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	b29a      	uxth	r2, r3
 800168c:	230a      	movs	r3, #10
 800168e:	b29b      	uxth	r3, r3
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	b29b      	uxth	r3, r3
 8001694:	b21a      	sxth	r2, r3
 8001696:	4b36      	ldr	r3, [pc, #216]	@ (8001770 <CAL_Update+0x278>)
 8001698:	801a      	strh	r2, [r3, #0]
		}
		if(sCounter<0){
 800169a:	4b35      	ldr	r3, [pc, #212]	@ (8001770 <CAL_Update+0x278>)
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	da02      	bge.n	80016aa <CAL_Update+0x1b2>
			sCounter = 0;
 80016a4:	4b32      	ldr	r3, [pc, #200]	@ (8001770 <CAL_Update+0x278>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isAPressed ==1){
 80016aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001754 <CAL_Update+0x25c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d115      	bne.n	80016de <CAL_Update+0x1e6>
		aCounter = aCounter + RISING_SCALER;
 80016b2:	4b30      	ldr	r3, [pc, #192]	@ (8001774 <CAL_Update+0x27c>)
 80016b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	2305      	movs	r3, #5
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	b21a      	sxth	r2, r3
 80016c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001774 <CAL_Update+0x27c>)
 80016c6:	801a      	strh	r2, [r3, #0]
		if(aCounter>660){
 80016c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001774 <CAL_Update+0x27c>)
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80016d2:	dd1c      	ble.n	800170e <CAL_Update+0x216>
			aCounter = 660;
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <CAL_Update+0x27c>)
 80016d6:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80016da:	801a      	strh	r2, [r3, #0]
 80016dc:	e017      	b.n	800170e <CAL_Update+0x216>
		}
	}else{
		if(aCounter>0){
 80016de:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <CAL_Update+0x27c>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	dd0a      	ble.n	80016fe <CAL_Update+0x206>
			aCounter = aCounter - FALLING_SCALER;
 80016e8:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <CAL_Update+0x27c>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	230a      	movs	r3, #10
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	b29b      	uxth	r3, r3
 80016f8:	b21a      	sxth	r2, r3
 80016fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001774 <CAL_Update+0x27c>)
 80016fc:	801a      	strh	r2, [r3, #0]
		}
		if(aCounter<0){
 80016fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <CAL_Update+0x27c>)
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	2b00      	cmp	r3, #0
 8001706:	da02      	bge.n	800170e <CAL_Update+0x216>
			aCounter = 0;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <CAL_Update+0x27c>)
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
		}
	}

	if(mouseX>660){
 800170e:	4b14      	ldr	r3, [pc, #80]	@ (8001760 <CAL_Update+0x268>)
 8001710:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001714:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001718:	dd04      	ble.n	8001724 <CAL_Update+0x22c>
		mouseX = 660;
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <CAL_Update+0x268>)
 800171c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001720:	801a      	strh	r2, [r3, #0]
 8001722:	e009      	b.n	8001738 <CAL_Update+0x240>
	}else if(mouseX<-660){
 8001724:	4b0e      	ldr	r3, [pc, #56]	@ (8001760 <CAL_Update+0x268>)
 8001726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172a:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 800172e:	da03      	bge.n	8001738 <CAL_Update+0x240>
		mouseX = -660;
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <CAL_Update+0x268>)
 8001732:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001736:	801a      	strh	r2, [r3, #0]
	}
	if(mouseY>660){
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <CAL_Update+0x26c>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001742:	dd19      	ble.n	8001778 <CAL_Update+0x280>
		mouseY = 660;
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <CAL_Update+0x26c>)
 8001746:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800174a:	801a      	strh	r2, [r3, #0]
 800174c:	e01e      	b.n	800178c <CAL_Update+0x294>
 800174e:	bf00      	nop
 8001750:	20000278 	.word	0x20000278
 8001754:	20000279 	.word	0x20000279
 8001758:	2000027a 	.word	0x2000027a
 800175c:	2000027b 	.word	0x2000027b
 8001760:	20000284 	.word	0x20000284
 8001764:	20000286 	.word	0x20000286
 8001768:	2000027c 	.word	0x2000027c
 800176c:	20000282 	.word	0x20000282
 8001770:	20000280 	.word	0x20000280
 8001774:	2000027e 	.word	0x2000027e
	}else if(mouseY<-660){
 8001778:	4b4f      	ldr	r3, [pc, #316]	@ (80018b8 <CAL_Update+0x3c0>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001782:	da03      	bge.n	800178c <CAL_Update+0x294>
		mouseY = -660;
 8001784:	4b4c      	ldr	r3, [pc, #304]	@ (80018b8 <CAL_Update+0x3c0>)
 8001786:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 800178a:	801a      	strh	r2, [r3, #0]
	}


	CAL_CH0 = getDR16_CH0() + dCounter - aCounter;
 800178c:	f001 fdb0 	bl	80032f0 <getDR16_CH0>
 8001790:	4603      	mov	r3, r0
 8001792:	b29a      	uxth	r2, r3
 8001794:	4b49      	ldr	r3, [pc, #292]	@ (80018bc <CAL_Update+0x3c4>)
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	b29b      	uxth	r3, r3
 800179c:	4413      	add	r3, r2
 800179e:	b29a      	uxth	r2, r3
 80017a0:	4b47      	ldr	r3, [pc, #284]	@ (80018c0 <CAL_Update+0x3c8>)
 80017a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b21a      	sxth	r2, r3
 80017ae:	4b45      	ldr	r3, [pc, #276]	@ (80018c4 <CAL_Update+0x3cc>)
 80017b0:	801a      	strh	r2, [r3, #0]
	CAL_CH1 = getDR16_CH1() + wCounter - sCounter;
 80017b2:	f001 fdb9 	bl	8003328 <getDR16_CH1>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	4b43      	ldr	r3, [pc, #268]	@ (80018c8 <CAL_Update+0x3d0>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4413      	add	r3, r2
 80017c4:	b29a      	uxth	r2, r3
 80017c6:	4b41      	ldr	r3, [pc, #260]	@ (80018cc <CAL_Update+0x3d4>)
 80017c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <CAL_Update+0x3d8>)
 80017d6:	801a      	strh	r2, [r3, #0]
	CAL_CH2 = getDR16_CH2()+mouseX;
 80017d8:	f001 fdc2 	bl	8003360 <getDR16_CH2>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <CAL_Update+0x3dc>)
 80017e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4413      	add	r3, r2
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	b21a      	sxth	r2, r3
 80017ee:	4b3a      	ldr	r3, [pc, #232]	@ (80018d8 <CAL_Update+0x3e0>)
 80017f0:	801a      	strh	r2, [r3, #0]
	CAL_CH3 = getDR16_CH3()+mouseY;
 80017f2:	f001 fdd1 	bl	8003398 <getDR16_CH3>
 80017f6:	4603      	mov	r3, r0
 80017f8:	b29a      	uxth	r2, r3
 80017fa:	4b2f      	ldr	r3, [pc, #188]	@ (80018b8 <CAL_Update+0x3c0>)
 80017fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001800:	b29b      	uxth	r3, r3
 8001802:	4413      	add	r3, r2
 8001804:	b29b      	uxth	r3, r3
 8001806:	b21a      	sxth	r2, r3
 8001808:	4b34      	ldr	r3, [pc, #208]	@ (80018dc <CAL_Update+0x3e4>)
 800180a:	801a      	strh	r2, [r3, #0]

	if(CAL_CH0>660){
 800180c:	4b2d      	ldr	r3, [pc, #180]	@ (80018c4 <CAL_Update+0x3cc>)
 800180e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001812:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001816:	dd04      	ble.n	8001822 <CAL_Update+0x32a>
		CAL_CH0 = 660;
 8001818:	4b2a      	ldr	r3, [pc, #168]	@ (80018c4 <CAL_Update+0x3cc>)
 800181a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800181e:	801a      	strh	r2, [r3, #0]
 8001820:	e009      	b.n	8001836 <CAL_Update+0x33e>
	}else if(CAL_CH0<-660){
 8001822:	4b28      	ldr	r3, [pc, #160]	@ (80018c4 <CAL_Update+0x3cc>)
 8001824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001828:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 800182c:	da03      	bge.n	8001836 <CAL_Update+0x33e>
		CAL_CH0 = -660;
 800182e:	4b25      	ldr	r3, [pc, #148]	@ (80018c4 <CAL_Update+0x3cc>)
 8001830:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001834:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH1>660){
 8001836:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <CAL_Update+0x3d8>)
 8001838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183c:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001840:	dd04      	ble.n	800184c <CAL_Update+0x354>
		CAL_CH1 = 660;
 8001842:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <CAL_Update+0x3d8>)
 8001844:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001848:	801a      	strh	r2, [r3, #0]
 800184a:	e009      	b.n	8001860 <CAL_Update+0x368>
	}else if(CAL_CH1<-660){
 800184c:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <CAL_Update+0x3d8>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001856:	da03      	bge.n	8001860 <CAL_Update+0x368>
		CAL_CH1 = -660;
 8001858:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <CAL_Update+0x3d8>)
 800185a:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 800185e:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH2>660){
 8001860:	4b1d      	ldr	r3, [pc, #116]	@ (80018d8 <CAL_Update+0x3e0>)
 8001862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001866:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800186a:	dd04      	ble.n	8001876 <CAL_Update+0x37e>
		CAL_CH2 = 660;
 800186c:	4b1a      	ldr	r3, [pc, #104]	@ (80018d8 <CAL_Update+0x3e0>)
 800186e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001872:	801a      	strh	r2, [r3, #0]
 8001874:	e009      	b.n	800188a <CAL_Update+0x392>
	}else if(CAL_CH2<-660){
 8001876:	4b18      	ldr	r3, [pc, #96]	@ (80018d8 <CAL_Update+0x3e0>)
 8001878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187c:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001880:	da03      	bge.n	800188a <CAL_Update+0x392>
		CAL_CH2 = -660;
 8001882:	4b15      	ldr	r3, [pc, #84]	@ (80018d8 <CAL_Update+0x3e0>)
 8001884:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001888:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH3>660){
 800188a:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <CAL_Update+0x3e4>)
 800188c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001890:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001894:	dd04      	ble.n	80018a0 <CAL_Update+0x3a8>
		CAL_CH3 = 660;
 8001896:	4b11      	ldr	r3, [pc, #68]	@ (80018dc <CAL_Update+0x3e4>)
 8001898:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800189c:	801a      	strh	r2, [r3, #0]
	}else if(CAL_CH3<-660){
		CAL_CH3 = -660;
	}


}
 800189e:	e009      	b.n	80018b4 <CAL_Update+0x3bc>
	}else if(CAL_CH3<-660){
 80018a0:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <CAL_Update+0x3e4>)
 80018a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a6:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80018aa:	da03      	bge.n	80018b4 <CAL_Update+0x3bc>
		CAL_CH3 = -660;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	@ (80018dc <CAL_Update+0x3e4>)
 80018ae:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80018b2:	801a      	strh	r2, [r3, #0]
}
 80018b4:	bf00      	nop
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000286 	.word	0x20000286
 80018bc:	20000282 	.word	0x20000282
 80018c0:	2000027e 	.word	0x2000027e
 80018c4:	20000240 	.word	0x20000240
 80018c8:	2000027c 	.word	0x2000027c
 80018cc:	20000280 	.word	0x20000280
 80018d0:	20000242 	.word	0x20000242
 80018d4:	20000284 	.word	0x20000284
 80018d8:	20000244 	.word	0x20000244
 80018dc:	20000246 	.word	0x20000246

080018e0 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>:





void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]

}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr

080018f4 <PC_CONTROL_RxEventCallback>:




void PC_CONTROL_RxEventCallback(int16_t mouse_x, int16_t mouse_y, int16_t mouse_z, uint8_t left_button_down, uint8_t right_button_down, uint8_t w, uint8_t s, uint8_t a, uint8_t d, uint8_t shift,uint8_t ctrl,uint8_t q, uint8_t e, uint8_t r, uint8_t f, uint8_t g, uint8_t z, uint8_t x, uint8_t c, uint8_t v, uint8_t b){
 80018f4:	b590      	push	{r4, r7, lr}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4604      	mov	r4, r0
 80018fc:	4608      	mov	r0, r1
 80018fe:	4611      	mov	r1, r2
 8001900:	461a      	mov	r2, r3
 8001902:	4623      	mov	r3, r4
 8001904:	80fb      	strh	r3, [r7, #6]
 8001906:	4603      	mov	r3, r0
 8001908:	80bb      	strh	r3, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	807b      	strh	r3, [r7, #2]
 800190e:	4613      	mov	r3, r2
 8001910:	707b      	strb	r3, [r7, #1]
	if(getDR16_S2()==3||getDR16_S2()==0){
 8001912:	f001 fd6b 	bl	80033ec <getDR16_S2>
 8001916:	4603      	mov	r3, r0
 8001918:	2b03      	cmp	r3, #3
 800191a:	d004      	beq.n	8001926 <PC_CONTROL_RxEventCallback+0x32>
 800191c:	f001 fd66 	bl	80033ec <getDR16_S2>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d16a      	bne.n	80019fc <PC_CONTROL_RxEventCallback+0x108>
		mouseY = (int16_t)(((float)mouse_y)*MOUSE_SCALER);
 8001926:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001932:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001936:	ee67 7a87 	vmul.f32	s15, s15, s14
 800193a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193e:	ee17 3a90 	vmov	r3, s15
 8001942:	b21a      	sxth	r2, r3
 8001944:	4b2f      	ldr	r3, [pc, #188]	@ (8001a04 <PC_CONTROL_RxEventCallback+0x110>)
 8001946:	801a      	strh	r2, [r3, #0]
		mouseX = (int16_t)(((float)mouse_x)*MOUSE_SCALER);
 8001948:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800194c:	ee07 3a90 	vmov	s15, r3
 8001950:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001954:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
 800195c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001960:	ee17 3a90 	vmov	r3, s15
 8001964:	b21a      	sxth	r2, r3
 8001966:	4b28      	ldr	r3, [pc, #160]	@ (8001a08 <PC_CONTROL_RxEventCallback+0x114>)
 8001968:	801a      	strh	r2, [r3, #0]
		CAL_MouseZ = mouse_z;
 800196a:	887b      	ldrh	r3, [r7, #2]
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b27      	ldr	r3, [pc, #156]	@ (8001a0c <PC_CONTROL_RxEventCallback+0x118>)
 8001970:	701a      	strb	r2, [r3, #0]
		CAL_lb = left_button_down;
 8001972:	4a27      	ldr	r2, [pc, #156]	@ (8001a10 <PC_CONTROL_RxEventCallback+0x11c>)
 8001974:	787b      	ldrb	r3, [r7, #1]
 8001976:	7013      	strb	r3, [r2, #0]
		CAL_rb = right_button_down;
 8001978:	4a26      	ldr	r2, [pc, #152]	@ (8001a14 <PC_CONTROL_RxEventCallback+0x120>)
 800197a:	7e3b      	ldrb	r3, [r7, #24]
 800197c:	7013      	strb	r3, [r2, #0]
		isWPressed = w;
 800197e:	4a26      	ldr	r2, [pc, #152]	@ (8001a18 <PC_CONTROL_RxEventCallback+0x124>)
 8001980:	7f3b      	ldrb	r3, [r7, #28]
 8001982:	7013      	strb	r3, [r2, #0]
		isAPressed = a;
 8001984:	4a25      	ldr	r2, [pc, #148]	@ (8001a1c <PC_CONTROL_RxEventCallback+0x128>)
 8001986:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800198a:	7013      	strb	r3, [r2, #0]
		isSPressed = s;
 800198c:	4a24      	ldr	r2, [pc, #144]	@ (8001a20 <PC_CONTROL_RxEventCallback+0x12c>)
 800198e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001992:	7013      	strb	r3, [r2, #0]
		isDPressed = d;
 8001994:	4a23      	ldr	r2, [pc, #140]	@ (8001a24 <PC_CONTROL_RxEventCallback+0x130>)
 8001996:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800199a:	7013      	strb	r3, [r2, #0]
		CAL_shift = shift;
 800199c:	4a22      	ldr	r2, [pc, #136]	@ (8001a28 <PC_CONTROL_RxEventCallback+0x134>)
 800199e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019a2:	7013      	strb	r3, [r2, #0]
		CAL_ctrl = ctrl;
 80019a4:	4a21      	ldr	r2, [pc, #132]	@ (8001a2c <PC_CONTROL_RxEventCallback+0x138>)
 80019a6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80019aa:	7013      	strb	r3, [r2, #0]
		CAL_q = q;
 80019ac:	4a20      	ldr	r2, [pc, #128]	@ (8001a30 <PC_CONTROL_RxEventCallback+0x13c>)
 80019ae:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80019b2:	7013      	strb	r3, [r2, #0]
		CAL_e = e;
 80019b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001a34 <PC_CONTROL_RxEventCallback+0x140>)
 80019b6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80019ba:	7013      	strb	r3, [r2, #0]
		CAL_r = r;
 80019bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a38 <PC_CONTROL_RxEventCallback+0x144>)
 80019be:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80019c2:	7013      	strb	r3, [r2, #0]
		CAL_f = f;
 80019c4:	4a1d      	ldr	r2, [pc, #116]	@ (8001a3c <PC_CONTROL_RxEventCallback+0x148>)
 80019c6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80019ca:	7013      	strb	r3, [r2, #0]
		CAL_g = g;
 80019cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001a40 <PC_CONTROL_RxEventCallback+0x14c>)
 80019ce:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80019d2:	7013      	strb	r3, [r2, #0]
		CAL_z = z;
 80019d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001a44 <PC_CONTROL_RxEventCallback+0x150>)
 80019d6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 80019da:	7013      	strb	r3, [r2, #0]
		CAL_x = x;
 80019dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a48 <PC_CONTROL_RxEventCallback+0x154>)
 80019de:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80019e2:	7013      	strb	r3, [r2, #0]
		CAL_c = c;
 80019e4:	4a19      	ldr	r2, [pc, #100]	@ (8001a4c <PC_CONTROL_RxEventCallback+0x158>)
 80019e6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 80019ea:	7013      	strb	r3, [r2, #0]
		CAL_v = v;
 80019ec:	4a18      	ldr	r2, [pc, #96]	@ (8001a50 <PC_CONTROL_RxEventCallback+0x15c>)
 80019ee:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80019f2:	7013      	strb	r3, [r2, #0]
		CAL_b = b;
 80019f4:	4a17      	ldr	r2, [pc, #92]	@ (8001a54 <PC_CONTROL_RxEventCallback+0x160>)
 80019f6:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 80019fa:	7013      	strb	r3, [r2, #0]
	}
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd90      	pop	{r4, r7, pc}
 8001a04:	20000286 	.word	0x20000286
 8001a08:	20000284 	.word	0x20000284
 8001a0c:	20000258 	.word	0x20000258
 8001a10:	20000256 	.word	0x20000256
 8001a14:	20000257 	.word	0x20000257
 8001a18:	20000278 	.word	0x20000278
 8001a1c:	20000279 	.word	0x20000279
 8001a20:	2000027a 	.word	0x2000027a
 8001a24:	2000027b 	.word	0x2000027b
 8001a28:	2000024a 	.word	0x2000024a
 8001a2c:	2000024b 	.word	0x2000024b
 8001a30:	2000024c 	.word	0x2000024c
 8001a34:	2000024d 	.word	0x2000024d
 8001a38:	2000024e 	.word	0x2000024e
 8001a3c:	2000024f 	.word	0x2000024f
 8001a40:	20000250 	.word	0x20000250
 8001a44:	20000251 	.word	0x20000251
 8001a48:	20000252 	.word	0x20000252
 8001a4c:	20000253 	.word	0x20000253
 8001a50:	20000254 	.word	0x20000254
 8001a54:	20000255 	.word	0x20000255

08001a58 <GAME_STATUS_RxEventCallback>:


void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4604      	mov	r4, r0
 8001a60:	4608      	mov	r0, r1
 8001a62:	4611      	mov	r1, r2
 8001a64:	461a      	mov	r2, r3
 8001a66:	4623      	mov	r3, r4
 8001a68:	71fb      	strb	r3, [r7, #7]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	71bb      	strb	r3, [r7, #6]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	717b      	strb	r3, [r7, #5]
 8001a72:	4613      	mov	r3, r2
 8001a74:	807b      	strh	r3, [r7, #2]
	CAL_game_type = game_type;
 8001a76:	79fa      	ldrb	r2, [r7, #7]
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <GAME_STATUS_RxEventCallback+0x54>)
 8001a7a:	701a      	strb	r2, [r3, #0]
	CAL_current_stage = current_stage;
 8001a7c:	79ba      	ldrb	r2, [r7, #6]
 8001a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab0 <GAME_STATUS_RxEventCallback+0x58>)
 8001a80:	701a      	strb	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001a82:	f107 0308 	add.w	r3, r7, #8
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
	memcpy(&txData[1],&game_type,1);
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[0],&current_stage,1);
 8001a90:	79bb      	ldrb	r3, [r7, #6]
 8001a92:	723b      	strb	r3, [r7, #8]
	CAN_transmit(bus, CAL_GAME_STATUS,txData);
 8001a94:	2002      	movs	r0, #2
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f240 2111 	movw	r1, #529	@ 0x211
 8001aa0:	f000 fc60 	bl	8002364 <CAN_transmit>
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd90      	pop	{r4, r7, pc}
 8001aac:	20000259 	.word	0x20000259
 8001ab0:	2000025a 	.word	0x2000025a

08001ab4 <ROBOT_STATUS_RxEventCallback>:

void ROBOT_STATUS_RxEventCallback(uint8_t robot_id, uint8_t robot_level, uint16_t current_HP, uint16_t maximum_HP, uint16_t shooter_barrel_cooling_value, uint16_t shooter_barrel_heat_limit, uint16_t chassis_power_limit, uint8_t power_management_gimbal_output, uint8_t power_management_chassis_output, uint8_t power_management_shooter_output){
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4604      	mov	r4, r0
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4623      	mov	r3, r4
 8001ac4:	71fb      	strb	r3, [r7, #7]
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71bb      	strb	r3, [r7, #6]
 8001aca:	460b      	mov	r3, r1
 8001acc:	80bb      	strh	r3, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	807b      	strh	r3, [r7, #2]
	CAL_robot_id = robot_id;
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	4b14      	ldr	r3, [pc, #80]	@ (8001b28 <ROBOT_STATUS_RxEventCallback+0x74>)
 8001ad6:	701a      	strb	r2, [r3, #0]
	CAL_robot_level = robot_level;
 8001ad8:	79ba      	ldrb	r2, [r7, #6]
 8001ada:	4b14      	ldr	r3, [pc, #80]	@ (8001b2c <ROBOT_STATUS_RxEventCallback+0x78>)
 8001adc:	701a      	strb	r2, [r3, #0]
	CAL_shooter_barrel_cooling_value = shooter_barrel_cooling_value;
 8001ade:	8c3a      	ldrh	r2, [r7, #32]
 8001ae0:	4b13      	ldr	r3, [pc, #76]	@ (8001b30 <ROBOT_STATUS_RxEventCallback+0x7c>)
 8001ae2:	801a      	strh	r2, [r3, #0]
	CAL_shooter_barrel_heat_limit = shooter_barrel_heat_limit;
 8001ae4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ae6:	4b13      	ldr	r3, [pc, #76]	@ (8001b34 <ROBOT_STATUS_RxEventCallback+0x80>)
 8001ae8:	801a      	strh	r2, [r3, #0]
	CAL_chassis_power_limit = chassis_power_limit;
 8001aea:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001aec:	4b12      	ldr	r3, [pc, #72]	@ (8001b38 <ROBOT_STATUS_RxEventCallback+0x84>)
 8001aee:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&robot_id,1);
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	723b      	strb	r3, [r7, #8]
	memcpy(&txData[1],&robot_level,1);
 8001afe:	79bb      	ldrb	r3, [r7, #6]
 8001b00:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[2],&shooter_barrel_cooling_value,2);
 8001b02:	8c3b      	ldrh	r3, [r7, #32]
 8001b04:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_barrel_heat_limit,2);
 8001b06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b08:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&chassis_power_limit,2);
 8001b0a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b0c:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_ROBOT_STATUS,txData);
 8001b0e:	2002      	movs	r0, #2
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	461a      	mov	r2, r3
 8001b16:	f240 2112 	movw	r1, #530	@ 0x212
 8001b1a:	f000 fc23 	bl	8002364 <CAN_transmit>
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd90      	pop	{r4, r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000264 	.word	0x20000264
 8001b2c:	20000265 	.word	0x20000265
 8001b30:	20000266 	.word	0x20000266
 8001b34:	2000026a 	.word	0x2000026a
 8001b38:	20000268 	.word	0x20000268

08001b3c <POWER_HEAT_DATA_RxEventCallback>:

void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4604      	mov	r4, r0
 8001b44:	4608      	mov	r0, r1
 8001b46:	4611      	mov	r1, r2
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4623      	mov	r3, r4
 8001b4c:	80fb      	strh	r3, [r7, #6]
 8001b4e:	4603      	mov	r3, r0
 8001b50:	80bb      	strh	r3, [r7, #4]
 8001b52:	460b      	mov	r3, r1
 8001b54:	807b      	strh	r3, [r7, #2]
 8001b56:	4613      	mov	r3, r2
 8001b58:	803b      	strh	r3, [r7, #0]
	CAL_buffer_energy = buffer_energy;
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <POWER_HEAT_DATA_RxEventCallback+0x68>)
 8001b5e:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_1_barrel_heat = shooter_17mm_1_barrel_heat;
 8001b60:	88ba      	ldrh	r2, [r7, #4]
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <POWER_HEAT_DATA_RxEventCallback+0x6c>)
 8001b64:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_2_barrel_heat = shooter_17mm_2_barrel_heat;
 8001b66:	887a      	ldrh	r2, [r7, #2]
 8001b68:	4b10      	ldr	r3, [pc, #64]	@ (8001bac <POWER_HEAT_DATA_RxEventCallback+0x70>)
 8001b6a:	801a      	strh	r2, [r3, #0]
	CAL_shooter_42mm_barrel_heat = shooter_42mm_barrel_heat;
 8001b6c:	883a      	ldrh	r2, [r7, #0]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <POWER_HEAT_DATA_RxEventCallback+0x74>)
 8001b70:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001b72:	f107 0308 	add.w	r3, r7, #8
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&buffer_energy,2);
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	813b      	strh	r3, [r7, #8]
	memcpy(&txData[2],&shooter_17mm_1_barrel_heat,2);
 8001b80:	88bb      	ldrh	r3, [r7, #4]
 8001b82:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_17mm_2_barrel_heat,2);
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&shooter_42mm_barrel_heat,2);
 8001b88:	883b      	ldrh	r3, [r7, #0]
 8001b8a:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_POWER_HEAT_DATA,txData);
 8001b8c:	2002      	movs	r0, #2
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	461a      	mov	r2, r3
 8001b94:	f240 2113 	movw	r1, #531	@ 0x213
 8001b98:	f000 fbe4 	bl	8002364 <CAN_transmit>
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	2000025c 	.word	0x2000025c
 8001ba8:	2000025e 	.word	0x2000025e
 8001bac:	20000260 	.word	0x20000260
 8001bb0:	20000262 	.word	0x20000262

08001bb4 <CAN_RxEventCallbackPT>:



void CAN_RxEventCallbackPT(uint32_t StdId, uint8_t rxData[8]){
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b089      	sub	sp, #36	@ 0x24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	switch(StdId){
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	f200 8117 	bhi.w	8001df8 <CAN_RxEventCallbackPT+0x244>
 8001bca:	a201      	add	r2, pc, #4	@ (adr r2, 8001bd0 <CAN_RxEventCallbackPT+0x1c>)
 8001bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd0:	08001be1 	.word	0x08001be1
 8001bd4:	08001bf5 	.word	0x08001bf5
 8001bd8:	08001c2d 	.word	0x08001c2d
 8001bdc:	08001c5d 	.word	0x08001c5d
		case(CAL_GAME_STATUS):{
			memcpy(&CAL_game_type,&rxData[0],1);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	781a      	ldrb	r2, [r3, #0]
 8001be4:	4b87      	ldr	r3, [pc, #540]	@ (8001e04 <CAN_RxEventCallbackPT+0x250>)
 8001be6:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_current_stage,&rxData[1],1);
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	3301      	adds	r3, #1
 8001bec:	781a      	ldrb	r2, [r3, #0]
 8001bee:	4b86      	ldr	r3, [pc, #536]	@ (8001e08 <CAN_RxEventCallbackPT+0x254>)
 8001bf0:	701a      	strb	r2, [r3, #0]
			break;
 8001bf2:	e102      	b.n	8001dfa <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_ROBOT_STATUS):{
			memcpy(&CAL_robot_id,&rxData[0],1);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	781a      	ldrb	r2, [r3, #0]
 8001bf8:	4b84      	ldr	r3, [pc, #528]	@ (8001e0c <CAN_RxEventCallbackPT+0x258>)
 8001bfa:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_robot_level,&rxData[1],1);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	781a      	ldrb	r2, [r3, #0]
 8001c02:	4b83      	ldr	r3, [pc, #524]	@ (8001e10 <CAN_RxEventCallbackPT+0x25c>)
 8001c04:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_cooling_value,&rxData[2],2);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	3302      	adds	r3, #2
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	4b81      	ldr	r3, [pc, #516]	@ (8001e14 <CAN_RxEventCallbackPT+0x260>)
 8001c10:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_heat_limit,&rxData[4],2);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	3304      	adds	r3, #4
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	b29a      	uxth	r2, r3
 8001c1a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e18 <CAN_RxEventCallbackPT+0x264>)
 8001c1c:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_chassis_power_limit,&rxData[6],2);
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3306      	adds	r3, #6
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	b29a      	uxth	r2, r3
 8001c26:	4b7d      	ldr	r3, [pc, #500]	@ (8001e1c <CAN_RxEventCallbackPT+0x268>)
 8001c28:	801a      	strh	r2, [r3, #0]
			break;
 8001c2a:	e0e6      	b.n	8001dfa <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_POWER_HEAT_DATA):{
			memcpy(&CAL_buffer_energy,&rxData[0],2);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b29a      	uxth	r2, r3
 8001c32:	4b7b      	ldr	r3, [pc, #492]	@ (8001e20 <CAN_RxEventCallbackPT+0x26c>)
 8001c34:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_1_barrel_heat,&rxData[2],2);
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	3302      	adds	r3, #2
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	b29a      	uxth	r2, r3
 8001c3e:	4b79      	ldr	r3, [pc, #484]	@ (8001e24 <CAN_RxEventCallbackPT+0x270>)
 8001c40:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_2_barrel_heat,&rxData[4],2);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	3304      	adds	r3, #4
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b77      	ldr	r3, [pc, #476]	@ (8001e28 <CAN_RxEventCallbackPT+0x274>)
 8001c4c:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_42mm_barrel_heat,&rxData[6],2);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	3306      	adds	r3, #6
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b75      	ldr	r3, [pc, #468]	@ (8001e2c <CAN_RxEventCallbackPT+0x278>)
 8001c58:	801a      	strh	r2, [r3, #0]
			break;
 8001c5a:	e0ce      	b.n	8001dfa <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_CHASSIS_CONTROL_DATA):{

			uint8_t frontBackBuff[2] = {0};
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	83bb      	strh	r3, [r7, #28]
			frontBackBuff[0] = rxData[0];
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	773b      	strb	r3, [r7, #28]
			frontBackBuff[1] = CAL_getBits(rxData[1],0,4);
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	3301      	adds	r3, #1
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2204      	movs	r2, #4
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 fa01 	bl	8002078 <CAL_getBits>
 8001c76:	4603      	mov	r3, r0
 8001c78:	777b      	strb	r3, [r7, #29]
			memcpy(&CAL_FrontBack,frontBackBuff,2);
 8001c7a:	8bba      	ldrh	r2, [r7, #28]
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e30 <CAN_RxEventCallbackPT+0x27c>)
 8001c7e:	801a      	strh	r2, [r3, #0]
			CAL_FrontBack = CAL_FrontBack - 2047;
 8001c80:	4b6b      	ldr	r3, [pc, #428]	@ (8001e30 <CAN_RxEventCallbackPT+0x27c>)
 8001c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	b21a      	sxth	r2, r3
 8001c90:	4b67      	ldr	r3, [pc, #412]	@ (8001e30 <CAN_RxEventCallbackPT+0x27c>)
 8001c92:	801a      	strh	r2, [r3, #0]

			uint8_t rightLeftBuff[2] = {0};
 8001c94:	2300      	movs	r3, #0
 8001c96:	833b      	strh	r3, [r7, #24]
			rightLeftBuff[0] = CAL_getBits(rxData[1],4,4)|(CAL_getBits(rxData[2],0,4)<<4);
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	2104      	movs	r1, #4
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f000 f9e8 	bl	8002078 <CAL_getBits>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	b25c      	sxtb	r4, r3
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	3302      	adds	r3, #2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2204      	movs	r2, #4
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f000 f9de 	bl	8002078 <CAL_getBits>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	b25b      	sxtb	r3, r3
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	4323      	orrs	r3, r4
 8001cc6:	b25b      	sxtb	r3, r3
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	763b      	strb	r3, [r7, #24]
			rightLeftBuff[1] = CAL_getBits(rxData[2],4,4);
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	3302      	adds	r3, #2
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	2104      	movs	r1, #4
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 f9ce 	bl	8002078 <CAL_getBits>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	767b      	strb	r3, [r7, #25]
			memcpy(&CAL_RightLeft,rightLeftBuff,2);
 8001ce0:	8b3a      	ldrh	r2, [r7, #24]
 8001ce2:	4b54      	ldr	r3, [pc, #336]	@ (8001e34 <CAN_RxEventCallbackPT+0x280>)
 8001ce4:	801a      	strh	r2, [r3, #0]
			CAL_RightLeft = CAL_RightLeft - 2047;
 8001ce6:	4b53      	ldr	r3, [pc, #332]	@ (8001e34 <CAN_RxEventCallbackPT+0x280>)
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	b29b      	uxth	r3, r3
 8001cee:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b21a      	sxth	r2, r3
 8001cf6:	4b4f      	ldr	r3, [pc, #316]	@ (8001e34 <CAN_RxEventCallbackPT+0x280>)
 8001cf8:	801a      	strh	r2, [r3, #0]

			uint8_t chassisSpinBuff[2] = {0};
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	82bb      	strh	r3, [r7, #20]
			chassisSpinBuff[0] = rxData[3];
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	78db      	ldrb	r3, [r3, #3]
 8001d02:	753b      	strb	r3, [r7, #20]
			chassisSpinBuff[1] = CAL_getBits(rxData[4],0,4);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	3304      	adds	r3, #4
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 f9b2 	bl	8002078 <CAL_getBits>
 8001d14:	4603      	mov	r3, r0
 8001d16:	757b      	strb	r3, [r7, #21]
			memcpy(&CAL_ChassisSpin,chassisSpinBuff,2);
 8001d18:	8aba      	ldrh	r2, [r7, #20]
 8001d1a:	4b47      	ldr	r3, [pc, #284]	@ (8001e38 <CAN_RxEventCallbackPT+0x284>)
 8001d1c:	801a      	strh	r2, [r3, #0]
			CAL_ChassisSpin = CAL_ChassisSpin - 2047;
 8001d1e:	4b46      	ldr	r3, [pc, #280]	@ (8001e38 <CAN_RxEventCallbackPT+0x284>)
 8001d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	4b42      	ldr	r3, [pc, #264]	@ (8001e38 <CAN_RxEventCallbackPT+0x284>)
 8001d30:	801a      	strh	r2, [r3, #0]

			uint8_t turretSpinBuff[2] = {0};
 8001d32:	2300      	movs	r3, #0
 8001d34:	823b      	strh	r3, [r7, #16]
			turretSpinBuff[0] = CAL_getBits(rxData[4],4,4)|(CAL_getBits(rxData[5],0,4)<<4);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	2104      	movs	r1, #4
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 f999 	bl	8002078 <CAL_getBits>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b25c      	sxtb	r4, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	3305      	adds	r3, #5
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2204      	movs	r2, #4
 8001d52:	2100      	movs	r1, #0
 8001d54:	4618      	mov	r0, r3
 8001d56:	f000 f98f 	bl	8002078 <CAL_getBits>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	b25b      	sxtb	r3, r3
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	b25b      	sxtb	r3, r3
 8001d62:	4323      	orrs	r3, r4
 8001d64:	b25b      	sxtb	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	743b      	strb	r3, [r7, #16]
			turretSpinBuff[1] = CAL_getBits(rxData[5],4,4);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	3305      	adds	r3, #5
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2204      	movs	r2, #4
 8001d72:	2104      	movs	r1, #4
 8001d74:	4618      	mov	r0, r3
 8001d76:	f000 f97f 	bl	8002078 <CAL_getBits>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	747b      	strb	r3, [r7, #17]
			memcpy(&CAL_TurretSpin,turretSpinBuff,2);
 8001d7e:	8a3a      	ldrh	r2, [r7, #16]
 8001d80:	4b2e      	ldr	r3, [pc, #184]	@ (8001e3c <CAN_RxEventCallbackPT+0x288>)
 8001d82:	801a      	strh	r2, [r3, #0]
			CAL_TurretSpin = CAL_TurretSpin;
 8001d84:	4b2d      	ldr	r3, [pc, #180]	@ (8001e3c <CAN_RxEventCallbackPT+0x288>)
 8001d86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e3c <CAN_RxEventCallbackPT+0x288>)
 8001d8c:	801a      	strh	r2, [r3, #0]

			uint8_t currentGyroBuff[2] = {0};
 8001d8e:	2300      	movs	r3, #0
 8001d90:	81bb      	strh	r3, [r7, #12]
			currentGyroBuff[0] = rxData[6];
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	799b      	ldrb	r3, [r3, #6]
 8001d96:	733b      	strb	r3, [r7, #12]
			currentGyroBuff[1] = CAL_getBits(rxData[7],0,4);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	3307      	adds	r3, #7
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f968 	bl	8002078 <CAL_getBits>
 8001da8:	4603      	mov	r3, r0
 8001daa:	737b      	strb	r3, [r7, #13]
			memcpy(&CAL_CurrentGyro,currentGyroBuff,2);
 8001dac:	89ba      	ldrh	r2, [r7, #12]
 8001dae:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <CAN_RxEventCallbackPT+0x28c>)
 8001db0:	801a      	strh	r2, [r3, #0]
			CAL_CurrentGyro = CAL_CurrentGyro - 2047;
 8001db2:	4b23      	ldr	r3, [pc, #140]	@ (8001e40 <CAN_RxEventCallbackPT+0x28c>)
 8001db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	b21a      	sxth	r2, r3
 8001dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001e40 <CAN_RxEventCallbackPT+0x28c>)
 8001dc4:	801a      	strh	r2, [r3, #0]

			CAL_TriggerPressed = CAL_getBits(rxData[7],4,1);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	3307      	adds	r3, #7
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	2104      	movs	r1, #4
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f000 f951 	bl	8002078 <CAL_getBits>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <CAN_RxEventCallbackPT+0x290>)
 8001ddc:	701a      	strb	r2, [r3, #0]
			CAL_FireMode = CAL_getBits(rxData[7],5,3);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	3307      	adds	r3, #7
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	2203      	movs	r2, #3
 8001de6:	2105      	movs	r1, #5
 8001de8:	4618      	mov	r0, r3
 8001dea:	f000 f945 	bl	8002078 <CAL_getBits>
 8001dee:	4603      	mov	r3, r0
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <CAN_RxEventCallbackPT+0x294>)
 8001df4:	701a      	strb	r2, [r3, #0]
			break;
 8001df6:	e000      	b.n	8001dfa <CAN_RxEventCallbackPT+0x246>
		}
		default:{

			break;
 8001df8:	bf00      	nop
		}
	}
}
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	@ 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd90      	pop	{r4, r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20000259 	.word	0x20000259
 8001e08:	2000025a 	.word	0x2000025a
 8001e0c:	20000264 	.word	0x20000264
 8001e10:	20000265 	.word	0x20000265
 8001e14:	20000266 	.word	0x20000266
 8001e18:	2000026a 	.word	0x2000026a
 8001e1c:	20000268 	.word	0x20000268
 8001e20:	2000025c 	.word	0x2000025c
 8001e24:	2000025e 	.word	0x2000025e
 8001e28:	20000260 	.word	0x20000260
 8001e2c:	20000262 	.word	0x20000262
 8001e30:	2000026c 	.word	0x2000026c
 8001e34:	2000026e 	.word	0x2000026e
 8001e38:	20000270 	.word	0x20000270
 8001e3c:	20000272 	.word	0x20000272
 8001e40:	20000274 	.word	0x20000274
 8001e44:	20000276 	.word	0x20000276
 8001e48:	20000277 	.word	0x20000277

08001e4c <CAL_SendChassisCommands>:

//frontback12b,rightleft12b,chassisspin12b,turretspin12b,currentgyro12b,trigger1b,firemode3b
void CAL_SendChassisCommands(int16_t frontBack, int16_t rightLeft, int16_t chassisSpin, int16_t turretSpin,int16_t currentGyro, uint8_t triggerPressed,uint8_t fireMode){
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	b08b      	sub	sp, #44	@ 0x2c
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4604      	mov	r4, r0
 8001e54:	4608      	mov	r0, r1
 8001e56:	4611      	mov	r1, r2
 8001e58:	461a      	mov	r2, r3
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	80fb      	strh	r3, [r7, #6]
 8001e5e:	4603      	mov	r3, r0
 8001e60:	80bb      	strh	r3, [r7, #4]
 8001e62:	460b      	mov	r3, r1
 8001e64:	807b      	strh	r3, [r7, #2]
 8001e66:	4613      	mov	r3, r2
 8001e68:	803b      	strh	r3, [r7, #0]
	uint8_t txData[8] = {0};
 8001e6a:	f107 0320 	add.w	r3, r7, #32
 8001e6e:	2200      	movs	r2, #0
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	605a      	str	r2, [r3, #4]

	//prep values for bit management
	frontBack = frontBack+2047;
 8001e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b21b      	sxth	r3, r3
 8001e82:	80fb      	strh	r3, [r7, #6]
	if(frontBack<0){
 8001e84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da01      	bge.n	8001e90 <CAL_SendChassisCommands+0x44>
		frontBack=0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	80fb      	strh	r3, [r7, #6]
	}
	if(frontBack>4095){
 8001e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e98:	db02      	blt.n	8001ea0 <CAL_SendChassisCommands+0x54>
		frontBack=4095;
 8001e9a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001e9e:	80fb      	strh	r3, [r7, #6]
	}
	uint8_t frontBackBuff[2] = {0};
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	83bb      	strh	r3, [r7, #28]
	memcpy(frontBackBuff,&frontBack,2);
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	83bb      	strh	r3, [r7, #28]

	rightLeft = rightLeft+2047;
 8001ea8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b21b      	sxth	r3, r3
 8001eb6:	80bb      	strh	r3, [r7, #4]
	if(rightLeft<0){
 8001eb8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	da01      	bge.n	8001ec4 <CAL_SendChassisCommands+0x78>
	rightLeft=0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	80bb      	strh	r3, [r7, #4]
	}
	if(rightLeft>4095){
 8001ec4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ecc:	db02      	blt.n	8001ed4 <CAL_SendChassisCommands+0x88>
		rightLeft=4095;
 8001ece:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001ed2:	80bb      	strh	r3, [r7, #4]
	}
	uint8_t rightLeftBuff[2] = {0};
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	833b      	strh	r3, [r7, #24]
	memcpy(rightLeftBuff,&rightLeft,2);
 8001ed8:	88bb      	ldrh	r3, [r7, #4]
 8001eda:	833b      	strh	r3, [r7, #24]

	chassisSpin = chassisSpin+2047;
 8001edc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	807b      	strh	r3, [r7, #2]
	if(chassisSpin<0){
 8001eec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	da01      	bge.n	8001ef8 <CAL_SendChassisCommands+0xac>
		chassisSpin=0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	807b      	strh	r3, [r7, #2]
	}
	if(chassisSpin>4095){
 8001ef8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f00:	db02      	blt.n	8001f08 <CAL_SendChassisCommands+0xbc>
		chassisSpin=4095;
 8001f02:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001f06:	807b      	strh	r3, [r7, #2]
	}
	uint8_t chassisSpinBuff[2] = {0};
 8001f08:	2300      	movs	r3, #0
 8001f0a:	82bb      	strh	r3, [r7, #20]
	memcpy(chassisSpinBuff,&chassisSpin,2);
 8001f0c:	887b      	ldrh	r3, [r7, #2]
 8001f0e:	82bb      	strh	r3, [r7, #20]

	if(turretSpin<0){
 8001f10:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da01      	bge.n	8001f1c <CAL_SendChassisCommands+0xd0>
		turretSpin=0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	803b      	strh	r3, [r7, #0]
	}
	if(turretSpin>4095){
 8001f1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f24:	db02      	blt.n	8001f2c <CAL_SendChassisCommands+0xe0>
		turretSpin=4095;
 8001f26:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001f2a:	803b      	strh	r3, [r7, #0]
	}
	uint8_t turretSpinBuff[2] = {0};
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	823b      	strh	r3, [r7, #16]
	memcpy(turretSpinBuff,&turretSpin,2);
 8001f30:	883b      	ldrh	r3, [r7, #0]
 8001f32:	823b      	strh	r3, [r7, #16]

	currentGyro = currentGyro+2047;
 8001f34:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	f203 73ff 	addw	r3, r3, #2047	@ 0x7ff
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	b21b      	sxth	r3, r3
 8001f42:	873b      	strh	r3, [r7, #56]	@ 0x38
	if(currentGyro<0){
 8001f44:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	da01      	bge.n	8001f50 <CAL_SendChassisCommands+0x104>
		currentGyro=0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	873b      	strh	r3, [r7, #56]	@ 0x38
	}
	if(currentGyro>4095){
 8001f50:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001f54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f58:	db02      	blt.n	8001f60 <CAL_SendChassisCommands+0x114>
		currentGyro=4095;
 8001f5a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8001f5e:	873b      	strh	r3, [r7, #56]	@ 0x38
	}
	uint8_t currentGyroBuff[2] = {0};
 8001f60:	2300      	movs	r3, #0
 8001f62:	81bb      	strh	r3, [r7, #12]
	memcpy(currentGyroBuff,&currentGyro,2);
 8001f64:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8001f66:	81bb      	strh	r3, [r7, #12]


	//build package
	txData[0] =  frontBackBuff[0];
 8001f68:	7f3b      	ldrb	r3, [r7, #28]
 8001f6a:	f887 3020 	strb.w	r3, [r7, #32]
	txData[1] =  CAL_getBits(frontBackBuff[1],0,4)|(CAL_getBits(rightLeftBuff[0],0,4)<<4);
 8001f6e:	7f7b      	ldrb	r3, [r7, #29]
 8001f70:	2204      	movs	r2, #4
 8001f72:	2100      	movs	r1, #0
 8001f74:	4618      	mov	r0, r3
 8001f76:	f000 f87f 	bl	8002078 <CAL_getBits>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	b25c      	sxtb	r4, r3
 8001f7e:	7e3b      	ldrb	r3, [r7, #24]
 8001f80:	2204      	movs	r2, #4
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f000 f877 	bl	8002078 <CAL_getBits>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	4323      	orrs	r3, r4
 8001f94:	b25b      	sxtb	r3, r3
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
	txData[2] =  CAL_getBits(rightLeftBuff[0],4,4)|(CAL_getBits(rightLeftBuff[1],0,4)<<4);
 8001f9c:	7e3b      	ldrb	r3, [r7, #24]
 8001f9e:	2204      	movs	r2, #4
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f000 f868 	bl	8002078 <CAL_getBits>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	b25c      	sxtb	r4, r3
 8001fac:	7e7b      	ldrb	r3, [r7, #25]
 8001fae:	2204      	movs	r2, #4
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f860 	bl	8002078 <CAL_getBits>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b25b      	sxtb	r3, r3
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	b25b      	sxtb	r3, r3
 8001fc0:	4323      	orrs	r3, r4
 8001fc2:	b25b      	sxtb	r3, r3
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
	txData[3] = chassisSpinBuff[0];
 8001fca:	7d3b      	ldrb	r3, [r7, #20]
 8001fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	txData[4] = CAL_getBits(chassisSpinBuff[1],0,4)|(CAL_getBits(turretSpinBuff[0],0,4)<<4);
 8001fd0:	7d7b      	ldrb	r3, [r7, #21]
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f84e 	bl	8002078 <CAL_getBits>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b25c      	sxtb	r4, r3
 8001fe0:	7c3b      	ldrb	r3, [r7, #16]
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f000 f846 	bl	8002078 <CAL_getBits>
 8001fec:	4603      	mov	r3, r0
 8001fee:	b25b      	sxtb	r3, r3
 8001ff0:	011b      	lsls	r3, r3, #4
 8001ff2:	b25b      	sxtb	r3, r3
 8001ff4:	4323      	orrs	r3, r4
 8001ff6:	b25b      	sxtb	r3, r3
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	txData[5] = CAL_getBits(turretSpinBuff[0],4,4)|(CAL_getBits(turretSpinBuff[1],0,4)<<4);
 8001ffe:	7c3b      	ldrb	r3, [r7, #16]
 8002000:	2204      	movs	r2, #4
 8002002:	2104      	movs	r1, #4
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f837 	bl	8002078 <CAL_getBits>
 800200a:	4603      	mov	r3, r0
 800200c:	b25c      	sxtb	r4, r3
 800200e:	7c7b      	ldrb	r3, [r7, #17]
 8002010:	2204      	movs	r2, #4
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f82f 	bl	8002078 <CAL_getBits>
 800201a:	4603      	mov	r3, r0
 800201c:	b25b      	sxtb	r3, r3
 800201e:	011b      	lsls	r3, r3, #4
 8002020:	b25b      	sxtb	r3, r3
 8002022:	4323      	orrs	r3, r4
 8002024:	b25b      	sxtb	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	txData[6] = currentGyroBuff[0];
 800202c:	7b3b      	ldrb	r3, [r7, #12]
 800202e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	txData[7] = CAL_getBits(currentGyroBuff[1],0,4)|(triggerPressed<<4)|(fireMode<<5);
 8002032:	7b7b      	ldrb	r3, [r7, #13]
 8002034:	2204      	movs	r2, #4
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f000 f81d 	bl	8002078 <CAL_getBits>
 800203e:	4603      	mov	r3, r0
 8002040:	b25a      	sxtb	r2, r3
 8002042:	f997 303c 	ldrsb.w	r3, [r7, #60]	@ 0x3c
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	b25b      	sxtb	r3, r3
 800204a:	4313      	orrs	r3, r2
 800204c:	b25a      	sxtb	r2, r3
 800204e:	f997 3040 	ldrsb.w	r3, [r7, #64]	@ 0x40
 8002052:	015b      	lsls	r3, r3, #5
 8002054:	b25b      	sxtb	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b25b      	sxtb	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	CAN_transmit(Bus1, CAL_CHASSIS_CONTROL_DATA,txData);
 8002060:	f107 0320 	add.w	r3, r7, #32
 8002064:	461a      	mov	r2, r3
 8002066:	f44f 7105 	mov.w	r1, #532	@ 0x214
 800206a:	2001      	movs	r0, #1
 800206c:	f000 f97a 	bl	8002364 <CAN_transmit>
	// CAN_transmit(Bus2, CAL_CHASSIS_CONTROL_DATA,txData);
}
 8002070:	bf00      	nop
 8002072:	372c      	adds	r7, #44	@ 0x2c
 8002074:	46bd      	mov	sp, r7
 8002076:	bd90      	pop	{r4, r7, pc}

08002078 <CAL_getBits>:


uint8_t CAL_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
 8002082:	460b      	mov	r3, r1
 8002084:	71bb      	strb	r3, [r7, #6]
 8002086:	4613      	mov	r3, r2
 8002088:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800208e:	2300      	movs	r3, #0
 8002090:	73bb      	strb	r3, [r7, #14]
 8002092:	e013      	b.n	80020bc <CAL_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8002094:	79fa      	ldrb	r2, [r7, #7]
 8002096:	79b9      	ldrb	r1, [r7, #6]
 8002098:	7bbb      	ldrb	r3, [r7, #14]
 800209a:	440b      	add	r3, r1
 800209c:	fa42 f303 	asr.w	r3, r2, r3
 80020a0:	f003 0201 	and.w	r2, r3, #1
 80020a4:	7bbb      	ldrb	r3, [r7, #14]
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	b25a      	sxtb	r2, r3
 80020ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b25b      	sxtb	r3, r3
 80020b4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 80020b6:	7bbb      	ldrb	r3, [r7, #14]
 80020b8:	3301      	adds	r3, #1
 80020ba:	73bb      	strb	r3, [r7, #14]
 80020bc:	7bba      	ldrb	r2, [r7, #14]
 80020be:	797b      	ldrb	r3, [r7, #5]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d3e7      	bcc.n	8002094 <CAL_getBits+0x1c>
	}
	return result;
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <CAL_getCH0>:


int16_t CAL_getCH0(){
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
		return CAL_CH0;
 80020d8:	4b03      	ldr	r3, [pc, #12]	@ (80020e8 <CAL_getCH0+0x14>)
 80020da:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	20000240 	.word	0x20000240

080020ec <CAL_getCH1>:

int16_t CAL_getCH1(){
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
	return CAL_CH1;
 80020f0:	4b03      	ldr	r3, [pc, #12]	@ (8002100 <CAL_getCH1+0x14>)
 80020f2:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	20000242 	.word	0x20000242

08002104 <CAL_getCH2>:

int16_t CAL_getCH2(){
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
		return CAL_CH2;
 8002108:	4b03      	ldr	r3, [pc, #12]	@ (8002118 <CAL_getCH2+0x14>)
 800210a:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	20000244 	.word	0x20000244

0800211c <CAL_getCH3>:


int16_t CAL_getCH3(){
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
		return CAL_CH3;
 8002120:	4b03      	ldr	r3, [pc, #12]	@ (8002130 <CAL_getCH3+0x14>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	20000246 	.word	0x20000246

08002134 <CAL_getCH4>:

int16_t CAL_getCH4(){
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 8002138:	f001 f958 	bl	80033ec <getDR16_S2>
 800213c:	4603      	mov	r3, r0
 800213e:	2b01      	cmp	r3, #1
 8002140:	d103      	bne.n	800214a <CAL_getCH4+0x16>
		return getDR16_CH4();
 8002142:	f001 f961 	bl	8003408 <getDR16_CH4>
 8002146:	4603      	mov	r3, r0
 8002148:	e002      	b.n	8002150 <CAL_getCH4+0x1c>
	}else{
		return CAL_CH4;
 800214a:	4b02      	ldr	r3, [pc, #8]	@ (8002154 <CAL_getCH4+0x20>)
 800214c:	f9b3 3000 	ldrsh.w	r3, [r3]
	}
}
 8002150:	4618      	mov	r0, r3
 8002152:	bd80      	pop	{r7, pc}
 8002154:	20000248 	.word	0x20000248

08002158 <CAL_getS1>:

uint8_t CAL_getS1(){
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
	return getDR16_S1();
 800215c:	f001 f938 	bl	80033d0 <getDR16_S1>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <CAL_getLMB>:
	}else{
		return CAL_b;
	}
}

uint8_t CAL_getLMB(){
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 800216c:	f001 f93e 	bl	80033ec <getDR16_S2>
 8002170:	4603      	mov	r3, r0
 8002172:	2b01      	cmp	r3, #1
 8002174:	d103      	bne.n	800217e <CAL_getLMB+0x16>
		return getDR16_MouseL();
 8002176:	f001 f9b9 	bl	80034ec <getDR16_MouseL>
 800217a:	4603      	mov	r3, r0
 800217c:	e001      	b.n	8002182 <CAL_getLMB+0x1a>
	}else{
		return CAL_lb;
 800217e:	4b02      	ldr	r3, [pc, #8]	@ (8002188 <CAL_getLMB+0x20>)
 8002180:	781b      	ldrb	r3, [r3, #0]
	}
}
 8002182:	4618      	mov	r0, r3
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000256 	.word	0x20000256

0800218c <CAL_getRMB>:

uint8_t CAL_getRMB(){
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 8002190:	f001 f92c 	bl	80033ec <getDR16_S2>
 8002194:	4603      	mov	r3, r0
 8002196:	2b01      	cmp	r3, #1
 8002198:	d103      	bne.n	80021a2 <CAL_getRMB+0x16>
		return getDR16_MouseR();
 800219a:	f001 f9b3 	bl	8003504 <getDR16_MouseR>
 800219e:	4603      	mov	r3, r0
 80021a0:	e001      	b.n	80021a6 <CAL_getRMB+0x1a>
	}else{
		return CAL_rb;
 80021a2:	4b02      	ldr	r3, [pc, #8]	@ (80021ac <CAL_getRMB+0x20>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
	}
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000257 	.word	0x20000257

080021b0 <CAL_getMouseZ>:

uint8_t CAL_getMouseZ(){
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 80021b4:	f001 f91a 	bl	80033ec <getDR16_S2>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d10f      	bne.n	80021de <CAL_getMouseZ+0x2e>
		if(getDR16_MouseZ()<0){
 80021be:	f001 f989 	bl	80034d4 <getDR16_MouseZ>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da01      	bge.n	80021cc <CAL_getMouseZ+0x1c>
			return 2;
 80021c8:	2302      	movs	r3, #2
 80021ca:	e00f      	b.n	80021ec <CAL_getMouseZ+0x3c>
		}else if(getDR16_MouseZ()>0){
 80021cc:	f001 f982 	bl	80034d4 <getDR16_MouseZ>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	dd01      	ble.n	80021da <CAL_getMouseZ+0x2a>
			return 1;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e008      	b.n	80021ec <CAL_getMouseZ+0x3c>
		}else{
			return 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	e006      	b.n	80021ec <CAL_getMouseZ+0x3c>
		}
	}else{
		if(CAL_MouseZ<0){
			return 2;
		}else if(CAL_MouseZ>0){
 80021de:	4b04      	ldr	r3, [pc, #16]	@ (80021f0 <CAL_getMouseZ+0x40>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <CAL_getMouseZ+0x3a>
			return 1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <CAL_getMouseZ+0x3c>
		}else{
			return 0;
 80021ea:	2300      	movs	r3, #0
		}
	}
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20000258 	.word	0x20000258

080021f4 <CAL_getBarrel1Heat>:

uint16_t CAL_getBufferEnergy(){
	return CAL_buffer_energy;
}

uint16_t CAL_getBarrel1Heat(){
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
	return CAL_shooter_17mm_1_barrel_heat;
 80021f8:	4b03      	ldr	r3, [pc, #12]	@ (8002208 <CAL_getBarrel1Heat+0x14>)
 80021fa:	881b      	ldrh	r3, [r3, #0]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	2000025e 	.word	0x2000025e

0800220c <CAL_getHeatLimit>:

uint16_t CAL_getPowerLimit(){
	return CAL_chassis_power_limit;
}

uint16_t CAL_getHeatLimit(){
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
	return CAL_shooter_barrel_heat_limit;
 8002210:	4b03      	ldr	r3, [pc, #12]	@ (8002220 <CAL_getHeatLimit+0x14>)
 8002212:	881b      	ldrh	r3, [r3, #0]
}
 8002214:	4618      	mov	r0, r3
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	2000026a 	.word	0x2000026a

08002224 <HAL_CAN_RxFifo0MsgPendingCallback>:
int16_t RCVAL[7] = {0, 0, 0, 0, 0, 0, 0};

//For CAN Debugger
extern UART_HandleTypeDef huart1;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002224:	b580      	push	{r7, lr}
 8002226:	b08c      	sub	sp, #48	@ 0x30
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	f107 0210 	add.w	r2, r7, #16
 8002234:	2100      	movs	r1, #0
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f005 fa7e 	bl	8007738 <HAL_CAN_GetRxMessage>
    //CAN Debugger:
		// UART_Printf(&huart1,"CAN Received-------stdID:   %X    --------DATA: %X,   %X,   %X,   %X,   %X,   %X,   %X,   %X \n", rx_header.StdId,rx_data[0],rx_data[1],rx_data[2],rx_data[3],rx_data[4],rx_data[5],rx_data[6],rx_data[7]);



    switch (rx_header.StdId) {
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002242:	2b0a      	cmp	r3, #10
 8002244:	d87a      	bhi.n	800233c <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	3b01      	subs	r3, #1
 800224c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a41      	ldr	r2, [pc, #260]	@ (8002358 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d134      	bne.n	80022c2 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 8002258:	7a3b      	ldrb	r3, [r7, #8]
 800225a:	b21b      	sxth	r3, r3
 800225c:	021b      	lsls	r3, r3, #8
 800225e:	b21a      	sxth	r2, r3
 8002260:	7a7b      	ldrb	r3, [r7, #9]
 8002262:	b21b      	sxth	r3, r3
 8002264:	4313      	orrs	r3, r2
 8002266:	b21a      	sxth	r2, r3
 8002268:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800226c:	b291      	uxth	r1, r2
 800226e:	4a3b      	ldr	r2, [pc, #236]	@ (800235c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002270:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8002274:	7abb      	ldrb	r3, [r7, #10]
 8002276:	b21b      	sxth	r3, r3
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	b219      	sxth	r1, r3
 800227c:	7afb      	ldrb	r3, [r7, #11]
 800227e:	b21a      	sxth	r2, r3
 8002280:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002284:	430a      	orrs	r2, r1
 8002286:	b211      	sxth	r1, r2
 8002288:	4a34      	ldr	r2, [pc, #208]	@ (800235c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	460a      	mov	r2, r1
 8002290:	805a      	strh	r2, [r3, #2]
 8002292:	7b3b      	ldrb	r3, [r7, #12]
 8002294:	b21b      	sxth	r3, r3
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	b219      	sxth	r1, r3
 800229a:	7b7b      	ldrb	r3, [r7, #13]
 800229c:	b21a      	sxth	r2, r3
 800229e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022a2:	430a      	orrs	r2, r1
 80022a4:	b211      	sxth	r1, r2
 80022a6:	4a2d      	ldr	r2, [pc, #180]	@ (800235c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	460a      	mov	r2, r1
 80022ae:	809a      	strh	r2, [r3, #4]
 80022b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022b4:	7bb9      	ldrb	r1, [r7, #14]
 80022b6:	4a29      	ldr	r2, [pc, #164]	@ (800235c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4413      	add	r3, r2
 80022bc:	460a      	mov	r2, r1
 80022be:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 80022c0:	e044      	b.n	800234c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
            } else if (hcan == &hcan2) {
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a26      	ldr	r2, [pc, #152]	@ (8002360 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d140      	bne.n	800234c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 80022ca:	7a3b      	ldrb	r3, [r7, #8]
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	b21a      	sxth	r2, r3
 80022d2:	7a7b      	ldrb	r3, [r7, #9]
 80022d4:	b21b      	sxth	r3, r3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b21a      	sxth	r2, r3
 80022da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022de:	b291      	uxth	r1, r2
 80022e0:	4a1e      	ldr	r2, [pc, #120]	@ (800235c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80022e2:	330b      	adds	r3, #11
 80022e4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80022e8:	7abb      	ldrb	r3, [r7, #10]
 80022ea:	b21b      	sxth	r3, r3
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	b219      	sxth	r1, r3
 80022f0:	7afb      	ldrb	r3, [r7, #11]
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022f8:	430a      	orrs	r2, r1
 80022fa:	b211      	sxth	r1, r2
 80022fc:	4a17      	ldr	r2, [pc, #92]	@ (800235c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80022fe:	330b      	adds	r3, #11
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	460a      	mov	r2, r1
 8002306:	805a      	strh	r2, [r3, #2]
 8002308:	7b3b      	ldrb	r3, [r7, #12]
 800230a:	b21b      	sxth	r3, r3
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	b219      	sxth	r1, r3
 8002310:	7b7b      	ldrb	r3, [r7, #13]
 8002312:	b21a      	sxth	r2, r3
 8002314:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002318:	430a      	orrs	r2, r1
 800231a:	b211      	sxth	r1, r2
 800231c:	4a0f      	ldr	r2, [pc, #60]	@ (800235c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800231e:	330b      	adds	r3, #11
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	460a      	mov	r2, r1
 8002326:	809a      	strh	r2, [r3, #4]
 8002328:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800232c:	7bb9      	ldrb	r1, [r7, #14]
 800232e:	4a0b      	ldr	r2, [pc, #44]	@ (800235c <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002330:	330b      	adds	r3, #11
 8002332:	00db      	lsls	r3, r3, #3
 8002334:	4413      	add	r3, r2
 8002336:	460a      	mov	r2, r1
 8002338:	719a      	strb	r2, [r3, #6]
            break;
 800233a:	e007      	b.n	800234c <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        }
        default: {
        	CAN_RxEventCallbackPT(rx_header.StdId,rx_data);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f107 0208 	add.w	r2, r7, #8
 8002342:	4611      	mov	r1, r2
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fc35 	bl	8001bb4 <CAN_RxEventCallbackPT>
            break;
 800234a:	e000      	b.n	800234e <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
            break;
 800234c:	bf00      	nop
        }
    }
}
 800234e:	bf00      	nop
 8002350:	3730      	adds	r7, #48	@ 0x30
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20000af8 	.word	0x20000af8
 800235c:	200002f0 	.word	0x200002f0
 8002360:	20000b20 	.word	0x20000b20

08002364 <CAN_transmit>:

// CAN_transmit needs some work, right now it's "CAN1_sendFloats"
void CAN_transmit(CAN_Bus bus, CAN_ID headerID, uint8_t data[8]) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	4603      	mov	r3, r0
 800236c:	603a      	str	r2, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
 8002370:	460b      	mov	r3, r1
 8002372:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    B2bTransmitHeader.StdId = headerID;
 8002374:	88bb      	ldrh	r3, [r7, #4]
 8002376:	4a11      	ldr	r2, [pc, #68]	@ (80023bc <CAN_transmit+0x58>)
 8002378:	6013      	str	r3, [r2, #0]
    B2bTransmitHeader.IDE = CAN_ID_STD;
 800237a:	4b10      	ldr	r3, [pc, #64]	@ (80023bc <CAN_transmit+0x58>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
    B2bTransmitHeader.RTR = CAN_RTR_DATA;
 8002380:	4b0e      	ldr	r3, [pc, #56]	@ (80023bc <CAN_transmit+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	60da      	str	r2, [r3, #12]
    B2bTransmitHeader.DLC = 0x08;
 8002386:	4b0d      	ldr	r3, [pc, #52]	@ (80023bc <CAN_transmit+0x58>)
 8002388:	2208      	movs	r2, #8
 800238a:	611a      	str	r2, [r3, #16]
    if(bus == 1){
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d106      	bne.n	80023a0 <CAN_transmit+0x3c>
    	HAL_CAN_AddTxMessage(&CAN_1, &B2bTransmitHeader, data, &send_mail_box);
 8002392:	f107 030c 	add.w	r3, r7, #12
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	4908      	ldr	r1, [pc, #32]	@ (80023bc <CAN_transmit+0x58>)
 800239a:	4809      	ldr	r0, [pc, #36]	@ (80023c0 <CAN_transmit+0x5c>)
 800239c:	f005 f8fc 	bl	8007598 <HAL_CAN_AddTxMessage>
    }
    if(bus == 2){
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d106      	bne.n	80023b4 <CAN_transmit+0x50>
		HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, data, &send_mail_box);
 80023a6:	f107 030c 	add.w	r3, r7, #12
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	4903      	ldr	r1, [pc, #12]	@ (80023bc <CAN_transmit+0x58>)
 80023ae:	4805      	ldr	r0, [pc, #20]	@ (80023c4 <CAN_transmit+0x60>)
 80023b0:	f005 f8f2 	bl	8007598 <HAL_CAN_AddTxMessage>
	}
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000288 	.word	0x20000288
 80023c0:	20000af8 	.word	0x20000af8
 80023c4:	20000b20 	.word	0x20000b20

080023c8 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4604      	mov	r4, r0
 80023d0:	4608      	mov	r0, r1
 80023d2:	4611      	mov	r1, r2
 80023d4:	461a      	mov	r2, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	71fb      	strb	r3, [r7, #7]
 80023da:	4603      	mov	r3, r0
 80023dc:	80bb      	strh	r3, [r7, #4]
 80023de:	460b      	mov	r3, r1
 80023e0:	807b      	strh	r3, [r7, #2]
 80023e2:	4613      	mov	r3, r2
 80023e4:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 80023e6:	88bb      	ldrh	r3, [r7, #4]
 80023e8:	4a27      	ldr	r2, [pc, #156]	@ (8002488 <CAN_DriveMotor+0xc0>)
 80023ea:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 80023ec:	4b26      	ldr	r3, [pc, #152]	@ (8002488 <CAN_DriveMotor+0xc0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 80023f2:	4b25      	ldr	r3, [pc, #148]	@ (8002488 <CAN_DriveMotor+0xc0>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 80023f8:	4b23      	ldr	r3, [pc, #140]	@ (8002488 <CAN_DriveMotor+0xc0>)
 80023fa:	2208      	movs	r2, #8
 80023fc:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 80023fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002402:	121b      	asrs	r3, r3, #8
 8002404:	b21b      	sxth	r3, r3
 8002406:	b2da      	uxtb	r2, r3
 8002408:	4b20      	ldr	r3, [pc, #128]	@ (800248c <CAN_DriveMotor+0xc4>)
 800240a:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 800240c:	887b      	ldrh	r3, [r7, #2]
 800240e:	b2da      	uxtb	r2, r3
 8002410:	4b1e      	ldr	r3, [pc, #120]	@ (800248c <CAN_DriveMotor+0xc4>)
 8002412:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8002414:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002418:	121b      	asrs	r3, r3, #8
 800241a:	b21b      	sxth	r3, r3
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <CAN_DriveMotor+0xc4>)
 8002420:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8002422:	883b      	ldrh	r3, [r7, #0]
 8002424:	b2da      	uxtb	r2, r3
 8002426:	4b19      	ldr	r3, [pc, #100]	@ (800248c <CAN_DriveMotor+0xc4>)
 8002428:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 800242a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800242e:	121b      	asrs	r3, r3, #8
 8002430:	b21b      	sxth	r3, r3
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b15      	ldr	r3, [pc, #84]	@ (800248c <CAN_DriveMotor+0xc4>)
 8002436:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8002438:	8c3b      	ldrh	r3, [r7, #32]
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b13      	ldr	r3, [pc, #76]	@ (800248c <CAN_DriveMotor+0xc4>)
 800243e:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8002440:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8002444:	121b      	asrs	r3, r3, #8
 8002446:	b21b      	sxth	r3, r3
 8002448:	b2da      	uxtb	r2, r3
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <CAN_DriveMotor+0xc4>)
 800244c:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 800244e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002450:	b2da      	uxtb	r2, r3
 8002452:	4b0e      	ldr	r3, [pc, #56]	@ (800248c <CAN_DriveMotor+0xc4>)
 8002454:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d107      	bne.n	800246c <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 800245c:	f107 030c 	add.w	r3, r7, #12
 8002460:	4a0a      	ldr	r2, [pc, #40]	@ (800248c <CAN_DriveMotor+0xc4>)
 8002462:	4909      	ldr	r1, [pc, #36]	@ (8002488 <CAN_DriveMotor+0xc0>)
 8002464:	480a      	ldr	r0, [pc, #40]	@ (8002490 <CAN_DriveMotor+0xc8>)
 8002466:	f005 f897 	bl	8007598 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 800246a:	e009      	b.n	8002480 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d106      	bne.n	8002480 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8002472:	f107 030c 	add.w	r3, r7, #12
 8002476:	4a05      	ldr	r2, [pc, #20]	@ (800248c <CAN_DriveMotor+0xc4>)
 8002478:	4903      	ldr	r1, [pc, #12]	@ (8002488 <CAN_DriveMotor+0xc0>)
 800247a:	4806      	ldr	r0, [pc, #24]	@ (8002494 <CAN_DriveMotor+0xcc>)
 800247c:	f005 f88c 	bl	8007598 <HAL_CAN_AddTxMessage>
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}
 8002488:	200002a0 	.word	0x200002a0
 800248c:	200002b8 	.word	0x200002b8
 8002490:	20000af8 	.word	0x20000af8
 8002494:	20000b20 	.word	0x20000b20

08002498 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8002498:	b5b0      	push	{r4, r5, r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af02      	add	r7, sp, #8
 800249e:	4604      	mov	r4, r0
 80024a0:	4608      	mov	r0, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	71fb      	strb	r3, [r7, #7]
 80024aa:	4603      	mov	r3, r0
 80024ac:	71bb      	strb	r3, [r7, #6]
 80024ae:	460b      	mov	r3, r1
 80024b0:	717b      	strb	r3, [r7, #5]
 80024b2:	4613      	mov	r3, r2
 80024b4:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 80024b6:	79bb      	ldrb	r3, [r7, #6]
 80024b8:	2b04      	cmp	r3, #4
 80024ba:	f000 8142 	beq.w	8002742 <CAN_setMotorCtrlVal+0x2aa>
 80024be:	2b04      	cmp	r3, #4
 80024c0:	f300 81e1 	bgt.w	8002886 <CAN_setMotorCtrlVal+0x3ee>
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	dc02      	bgt.n	80024ce <CAN_setMotorCtrlVal+0x36>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	dc04      	bgt.n	80024d6 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 80024cc:	e1db      	b.n	8002886 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	f000 8097 	beq.w	8002602 <CAN_setMotorCtrlVal+0x16a>
}
 80024d4:	e1d7      	b.n	8002886 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80024d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024da:	2b04      	cmp	r3, #4
 80024dc:	dc02      	bgt.n	80024e4 <CAN_setMotorCtrlVal+0x4c>
 80024de:	2b00      	cmp	r3, #0
 80024e0:	dc05      	bgt.n	80024ee <CAN_setMotorCtrlVal+0x56>
					break;
 80024e2:	e08c      	b.n	80025fe <CAN_setMotorCtrlVal+0x166>
 80024e4:	3b05      	subs	r3, #5
			switch(motorID) {
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	f200 8089 	bhi.w	80025fe <CAN_setMotorCtrlVal+0x166>
 80024ec:	e042      	b.n	8002574 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	1e5a      	subs	r2, r3, #1
 80024f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80024f6:	1e59      	subs	r1, r3, #1
 80024f8:	48bd      	ldr	r0, [pc, #756]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80024fa:	4613      	mov	r3, r2
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	4413      	add	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	440b      	add	r3, r1
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	1e5a      	subs	r2, r3, #1
 800250e:	49b8      	ldr	r1, [pc, #736]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	440b      	add	r3, r1
 800251a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800251e:	79fb      	ldrb	r3, [r7, #7]
 8002520:	1e5a      	subs	r2, r3, #1
 8002522:	49b3      	ldr	r1, [pc, #716]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	440b      	add	r3, r1
 800252e:	3302      	adds	r3, #2
 8002530:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	1e5a      	subs	r2, r3, #1
 8002538:	49ad      	ldr	r1, [pc, #692]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 800253a:	4613      	mov	r3, r2
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4413      	add	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	440b      	add	r3, r1
 8002544:	3304      	adds	r3, #4
 8002546:	f9b3 1000 	ldrsh.w	r1, [r3]
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	1e5a      	subs	r2, r3, #1
 800254e:	48a8      	ldr	r0, [pc, #672]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4403      	add	r3, r0
 800255a:	3306      	adds	r3, #6
 800255c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002560:	79f8      	ldrb	r0, [r7, #7]
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	9100      	str	r1, [sp, #0]
 8002566:	462b      	mov	r3, r5
 8002568:	4622      	mov	r2, r4
 800256a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800256e:	f7ff ff2b 	bl	80023c8 <CAN_DriveMotor>
					break;
 8002572:	e045      	b.n	8002600 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	1e5a      	subs	r2, r3, #1
 8002578:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800257c:	1f59      	subs	r1, r3, #5
 800257e:	489c      	ldr	r0, [pc, #624]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002580:	4613      	mov	r3, r2
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	3304      	adds	r3, #4
 800258c:	887a      	ldrh	r2, [r7, #2]
 800258e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	1e5a      	subs	r2, r3, #1
 8002596:	4996      	ldr	r1, [pc, #600]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002598:	4613      	mov	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	440b      	add	r3, r1
 80025a2:	3308      	adds	r3, #8
 80025a4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	1e5a      	subs	r2, r3, #1
 80025ac:	4990      	ldr	r1, [pc, #576]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	00db      	lsls	r3, r3, #3
 80025b6:	440b      	add	r3, r1
 80025b8:	330a      	adds	r3, #10
 80025ba:	f9b3 5000 	ldrsh.w	r5, [r3]
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	498b      	ldr	r1, [pc, #556]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80025c4:	4613      	mov	r3, r2
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4413      	add	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	440b      	add	r3, r1
 80025ce:	330c      	adds	r3, #12
 80025d0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80025d4:	79fb      	ldrb	r3, [r7, #7]
 80025d6:	1e5a      	subs	r2, r3, #1
 80025d8:	4885      	ldr	r0, [pc, #532]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	00db      	lsls	r3, r3, #3
 80025e2:	4403      	add	r3, r0
 80025e4:	330e      	adds	r3, #14
 80025e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ea:	79f8      	ldrb	r0, [r7, #7]
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	9100      	str	r1, [sp, #0]
 80025f0:	462b      	mov	r3, r5
 80025f2:	4622      	mov	r2, r4
 80025f4:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80025f8:	f7ff fee6 	bl	80023c8 <CAN_DriveMotor>
					break;
 80025fc:	e000      	b.n	8002600 <CAN_setMotorCtrlVal+0x168>
					break;
 80025fe:	bf00      	nop
			break;
 8002600:	e141      	b.n	8002886 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8002602:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002606:	2b08      	cmp	r3, #8
 8002608:	f000 8097 	beq.w	800273a <CAN_setMotorCtrlVal+0x2a2>
 800260c:	2b08      	cmp	r3, #8
 800260e:	f300 8096 	bgt.w	800273e <CAN_setMotorCtrlVal+0x2a6>
 8002612:	2b04      	cmp	r3, #4
 8002614:	dc02      	bgt.n	800261c <CAN_setMotorCtrlVal+0x184>
 8002616:	2b00      	cmp	r3, #0
 8002618:	dc05      	bgt.n	8002626 <CAN_setMotorCtrlVal+0x18e>
					break;
 800261a:	e090      	b.n	800273e <CAN_setMotorCtrlVal+0x2a6>
 800261c:	3b05      	subs	r3, #5
			switch(motorID) {
 800261e:	2b02      	cmp	r3, #2
 8002620:	f200 808d 	bhi.w	800273e <CAN_setMotorCtrlVal+0x2a6>
 8002624:	e044      	b.n	80026b0 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8002626:	79fb      	ldrb	r3, [r7, #7]
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800262e:	1e59      	subs	r1, r3, #1
 8002630:	486f      	ldr	r0, [pc, #444]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002632:	4613      	mov	r3, r2
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	3304      	adds	r3, #4
 800263e:	887a      	ldrh	r2, [r7, #2]
 8002640:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002644:	79fb      	ldrb	r3, [r7, #7]
 8002646:	1e5a      	subs	r2, r3, #1
 8002648:	4969      	ldr	r1, [pc, #420]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	440b      	add	r3, r1
 8002654:	3308      	adds	r3, #8
 8002656:	f9b3 4000 	ldrsh.w	r4, [r3]
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	4964      	ldr	r1, [pc, #400]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002660:	4613      	mov	r3, r2
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	4413      	add	r3, r2
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	440b      	add	r3, r1
 800266a:	330a      	adds	r3, #10
 800266c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	1e5a      	subs	r2, r3, #1
 8002674:	495e      	ldr	r1, [pc, #376]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	440b      	add	r3, r1
 8002680:	330c      	adds	r3, #12
 8002682:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	1e5a      	subs	r2, r3, #1
 800268a:	4859      	ldr	r0, [pc, #356]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4403      	add	r3, r0
 8002696:	330e      	adds	r3, #14
 8002698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269c:	79f8      	ldrb	r0, [r7, #7]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	9100      	str	r1, [sp, #0]
 80026a2:	462b      	mov	r3, r5
 80026a4:	4622      	mov	r2, r4
 80026a6:	f240 11ff 	movw	r1, #511	@ 0x1ff
 80026aa:	f7ff fe8d 	bl	80023c8 <CAN_DriveMotor>
					break;
 80026ae:	e047      	b.n	8002740 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	1e5a      	subs	r2, r3, #1
 80026b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80026b8:	1f59      	subs	r1, r3, #5
 80026ba:	484d      	ldr	r0, [pc, #308]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80026bc:	4613      	mov	r3, r2
 80026be:	005b      	lsls	r3, r3, #1
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	440b      	add	r3, r1
 80026c6:	3308      	adds	r3, #8
 80026c8:	887a      	ldrh	r2, [r7, #2]
 80026ca:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 80026ce:	79fb      	ldrb	r3, [r7, #7]
 80026d0:	1e5a      	subs	r2, r3, #1
 80026d2:	4947      	ldr	r1, [pc, #284]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80026d4:	4613      	mov	r3, r2
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	4413      	add	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	440b      	add	r3, r1
 80026de:	3310      	adds	r3, #16
 80026e0:	f9b3 4000 	ldrsh.w	r4, [r3]
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	1e5a      	subs	r2, r3, #1
 80026e8:	4941      	ldr	r1, [pc, #260]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80026ea:	4613      	mov	r3, r2
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	4413      	add	r3, r2
 80026f0:	00db      	lsls	r3, r3, #3
 80026f2:	440b      	add	r3, r1
 80026f4:	3312      	adds	r3, #18
 80026f6:	f9b3 5000 	ldrsh.w	r5, [r3]
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	1e5a      	subs	r2, r3, #1
 80026fe:	493c      	ldr	r1, [pc, #240]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002700:	4613      	mov	r3, r2
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	4413      	add	r3, r2
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	440b      	add	r3, r1
 800270a:	3314      	adds	r3, #20
 800270c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	1e5a      	subs	r2, r3, #1
 8002714:	4836      	ldr	r0, [pc, #216]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002716:	4613      	mov	r3, r2
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	4413      	add	r3, r2
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4403      	add	r3, r0
 8002720:	3316      	adds	r3, #22
 8002722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002726:	79f8      	ldrb	r0, [r7, #7]
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	9100      	str	r1, [sp, #0]
 800272c:	462b      	mov	r3, r5
 800272e:	4622      	mov	r2, r4
 8002730:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8002734:	f7ff fe48 	bl	80023c8 <CAN_DriveMotor>
					break;
 8002738:	e002      	b.n	8002740 <CAN_setMotorCtrlVal+0x2a8>
					break;
 800273a:	bf00      	nop
 800273c:	e0a3      	b.n	8002886 <CAN_setMotorCtrlVal+0x3ee>
					break;
 800273e:	bf00      	nop
			break;
 8002740:	e0a1      	b.n	8002886 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8002742:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002746:	2b08      	cmp	r3, #8
 8002748:	f000 8099 	beq.w	800287e <CAN_setMotorCtrlVal+0x3e6>
 800274c:	2b08      	cmp	r3, #8
 800274e:	f300 8098 	bgt.w	8002882 <CAN_setMotorCtrlVal+0x3ea>
 8002752:	2b04      	cmp	r3, #4
 8002754:	dc02      	bgt.n	800275c <CAN_setMotorCtrlVal+0x2c4>
 8002756:	2b00      	cmp	r3, #0
 8002758:	dc05      	bgt.n	8002766 <CAN_setMotorCtrlVal+0x2ce>
					break;
 800275a:	e092      	b.n	8002882 <CAN_setMotorCtrlVal+0x3ea>
 800275c:	3b05      	subs	r3, #5
			switch(motorID) {
 800275e:	2b02      	cmp	r3, #2
 8002760:	f200 808f 	bhi.w	8002882 <CAN_setMotorCtrlVal+0x3ea>
 8002764:	e046      	b.n	80027f4 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	1e5a      	subs	r2, r3, #1
 800276a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800276e:	1e59      	subs	r1, r3, #1
 8002770:	481f      	ldr	r0, [pc, #124]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	440b      	add	r3, r1
 800277c:	3304      	adds	r3, #4
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	1e5a      	subs	r2, r3, #1
 8002788:	4919      	ldr	r1, [pc, #100]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3308      	adds	r3, #8
 8002796:	f9b3 4000 	ldrsh.w	r4, [r3]
 800279a:	79fb      	ldrb	r3, [r7, #7]
 800279c:	1e5a      	subs	r2, r3, #1
 800279e:	4914      	ldr	r1, [pc, #80]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	330a      	adds	r3, #10
 80027ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	490e      	ldr	r1, [pc, #56]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	330c      	adds	r3, #12
 80027c2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	1e5a      	subs	r2, r3, #1
 80027ca:	4809      	ldr	r0, [pc, #36]	@ (80027f0 <CAN_setMotorCtrlVal+0x358>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	4413      	add	r3, r2
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4403      	add	r3, r0
 80027d6:	330e      	adds	r3, #14
 80027d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027dc:	79f8      	ldrb	r0, [r7, #7]
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	9100      	str	r1, [sp, #0]
 80027e2:	462b      	mov	r3, r5
 80027e4:	4622      	mov	r2, r4
 80027e6:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 80027ea:	f7ff fded 	bl	80023c8 <CAN_DriveMotor>
					break;
 80027ee:	e049      	b.n	8002884 <CAN_setMotorCtrlVal+0x3ec>
 80027f0:	200002c0 	.word	0x200002c0
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	1e5a      	subs	r2, r3, #1
 80027f8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027fc:	1f59      	subs	r1, r3, #5
 80027fe:	4824      	ldr	r0, [pc, #144]	@ (8002890 <CAN_setMotorCtrlVal+0x3f8>)
 8002800:	4613      	mov	r3, r2
 8002802:	005b      	lsls	r3, r3, #1
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3308      	adds	r3, #8
 800280c:	887a      	ldrh	r2, [r7, #2]
 800280e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	491e      	ldr	r1, [pc, #120]	@ (8002890 <CAN_setMotorCtrlVal+0x3f8>)
 8002818:	4613      	mov	r3, r2
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4413      	add	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	440b      	add	r3, r1
 8002822:	3310      	adds	r3, #16
 8002824:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	1e5a      	subs	r2, r3, #1
 800282c:	4918      	ldr	r1, [pc, #96]	@ (8002890 <CAN_setMotorCtrlVal+0x3f8>)
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	3312      	adds	r3, #18
 800283a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	1e5a      	subs	r2, r3, #1
 8002842:	4913      	ldr	r1, [pc, #76]	@ (8002890 <CAN_setMotorCtrlVal+0x3f8>)
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	440b      	add	r3, r1
 800284e:	3314      	adds	r3, #20
 8002850:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002854:	79fb      	ldrb	r3, [r7, #7]
 8002856:	1e5a      	subs	r2, r3, #1
 8002858:	480d      	ldr	r0, [pc, #52]	@ (8002890 <CAN_setMotorCtrlVal+0x3f8>)
 800285a:	4613      	mov	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	4413      	add	r3, r2
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	4403      	add	r3, r0
 8002864:	3316      	adds	r3, #22
 8002866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286a:	79f8      	ldrb	r0, [r7, #7]
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	9100      	str	r1, [sp, #0]
 8002870:	462b      	mov	r3, r5
 8002872:	4622      	mov	r2, r4
 8002874:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8002878:	f7ff fda6 	bl	80023c8 <CAN_DriveMotor>
					break;
 800287c:	e002      	b.n	8002884 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8002882:	bf00      	nop
			break;
 8002884:	bf00      	nop
}
 8002886:	bf00      	nop
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bdb0      	pop	{r4, r5, r7, pc}
 800288e:	bf00      	nop
 8002890:	200002c0 	.word	0x200002c0

08002894 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002894:	b590      	push	{r4, r7, lr}
 8002896:	b08b      	sub	sp, #44	@ 0x2c
 8002898:	af00      	add	r7, sp, #0
 800289a:	4604      	mov	r4, r0
 800289c:	4608      	mov	r0, r1
 800289e:	4611      	mov	r1, r2
 80028a0:	461a      	mov	r2, r3
 80028a2:	eef0 6a40 	vmov.f32	s13, s0
 80028a6:	eeb0 7a60 	vmov.f32	s14, s1
 80028aa:	eef0 7a41 	vmov.f32	s15, s2
 80028ae:	4623      	mov	r3, r4
 80028b0:	75fb      	strb	r3, [r7, #23]
 80028b2:	4603      	mov	r3, r0
 80028b4:	75bb      	strb	r3, [r7, #22]
 80028b6:	460b      	mov	r3, r1
 80028b8:	757b      	strb	r3, [r7, #21]
 80028ba:	4613      	mov	r3, r2
 80028bc:	827b      	strh	r3, [r7, #18]
 80028be:	edc7 6a01 	vstr	s13, [r7, #4]
 80028c2:	ed87 7a02 	vstr	s14, [r7, #8]
 80028c6:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 80028ca:	2300      	movs	r3, #0
 80028cc:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	3b01      	subs	r3, #1
 80028d2:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 80028d4:	7dbb      	ldrb	r3, [r7, #22]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	dc02      	bgt.n	80028e0 <calcRPM_PID+0x4c>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	dc04      	bgt.n	80028e8 <calcRPM_PID+0x54>
 80028de:	e00d      	b.n	80028fc <calcRPM_PID+0x68>
 80028e0:	3b03      	subs	r3, #3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d80a      	bhi.n	80028fc <calcRPM_PID+0x68>
 80028e6:	e004      	b.n	80028f2 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 80028e8:	7d7b      	ldrb	r3, [r7, #21]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80028f0:	e009      	b.n	8002906 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80028f2:	7d7b      	ldrb	r3, [r7, #21]
 80028f4:	3303      	adds	r3, #3
 80028f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80028fa:	e004      	b.n	8002906 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 80028fc:	7d7b      	ldrb	r3, [r7, #21]
 80028fe:	3b01      	subs	r3, #1
 8002900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002904:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8002906:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800290a:	7ffa      	ldrb	r2, [r7, #31]
 800290c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002910:	4c70      	ldr	r4, [pc, #448]	@ (8002ad4 <calcRPM_PID+0x240>)
 8002912:	4613      	mov	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	4413      	add	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	4403      	add	r3, r0
 800291e:	00db      	lsls	r3, r3, #3
 8002920:	4423      	add	r3, r4
 8002922:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002926:	7ffa      	ldrb	r2, [r7, #31]
 8002928:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800292c:	1ac9      	subs	r1, r1, r3
 800292e:	4c6a      	ldr	r4, [pc, #424]	@ (8002ad8 <calcRPM_PID+0x244>)
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	4403      	add	r3, r0
 800293c:	011b      	lsls	r3, r3, #4
 800293e:	4423      	add	r3, r4
 8002940:	3304      	adds	r3, #4
 8002942:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8002944:	7ffa      	ldrb	r2, [r7, #31]
 8002946:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800294a:	4863      	ldr	r0, [pc, #396]	@ (8002ad8 <calcRPM_PID+0x244>)
 800294c:	4613      	mov	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4413      	add	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	440b      	add	r3, r1
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	4403      	add	r3, r0
 800295c:	3308      	adds	r3, #8
 800295e:	6819      	ldr	r1, [r3, #0]
 8002960:	7ffa      	ldrb	r2, [r7, #31]
 8002962:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002966:	4c5c      	ldr	r4, [pc, #368]	@ (8002ad8 <calcRPM_PID+0x244>)
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	4403      	add	r3, r0
 8002974:	011b      	lsls	r3, r3, #4
 8002976:	4423      	add	r3, r4
 8002978:	3304      	adds	r3, #4
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	7ffa      	ldrb	r2, [r7, #31]
 800297e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002982:	4419      	add	r1, r3
 8002984:	4c54      	ldr	r4, [pc, #336]	@ (8002ad8 <calcRPM_PID+0x244>)
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	4413      	add	r3, r2
 8002990:	4403      	add	r3, r0
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	4423      	add	r3, r4
 8002996:	3308      	adds	r3, #8
 8002998:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 800299a:	7ffa      	ldrb	r2, [r7, #31]
 800299c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80029a0:	484d      	ldr	r0, [pc, #308]	@ (8002ad8 <calcRPM_PID+0x244>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	440b      	add	r3, r1
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	4403      	add	r3, r0
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	7ffa      	ldrb	r2, [r7, #31]
 80029b6:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80029ba:	4c46      	ldr	r4, [pc, #280]	@ (8002ad4 <calcRPM_PID+0x240>)
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	4403      	add	r3, r0
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4423      	add	r3, r4
 80029cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029d0:	7ffa      	ldrb	r2, [r7, #31]
 80029d2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80029d6:	1ac9      	subs	r1, r1, r3
 80029d8:	4c3f      	ldr	r4, [pc, #252]	@ (8002ad8 <calcRPM_PID+0x244>)
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	4403      	add	r3, r0
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	4423      	add	r3, r4
 80029ea:	330c      	adds	r3, #12
 80029ec:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 80029ee:	7ffa      	ldrb	r2, [r7, #31]
 80029f0:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80029f4:	4837      	ldr	r0, [pc, #220]	@ (8002ad4 <calcRPM_PID+0x240>)
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	4413      	add	r3, r2
 8002a00:	440b      	add	r3, r1
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4403      	add	r3, r0
 8002a06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a0a:	7ffa      	ldrb	r2, [r7, #31]
 8002a0c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002a10:	461c      	mov	r4, r3
 8002a12:	4831      	ldr	r0, [pc, #196]	@ (8002ad8 <calcRPM_PID+0x244>)
 8002a14:	4613      	mov	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4413      	add	r3, r2
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	4413      	add	r3, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	4403      	add	r3, r0
 8002a24:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8002a26:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a2a:	7ffa      	ldrb	r2, [r7, #31]
 8002a2c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002a30:	4829      	ldr	r0, [pc, #164]	@ (8002ad8 <calcRPM_PID+0x244>)
 8002a32:	4613      	mov	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	4413      	add	r3, r2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	4403      	add	r3, r0
 8002a42:	3304      	adds	r3, #4
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a52:	edd7 6a02 	vldr	s13, [r7, #8]
 8002a56:	7ffa      	ldrb	r2, [r7, #31]
 8002a58:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002a5c:	481e      	ldr	r0, [pc, #120]	@ (8002ad8 <calcRPM_PID+0x244>)
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	440b      	add	r3, r1
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	4403      	add	r3, r0
 8002a6e:	3308      	adds	r3, #8
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	ee07 3a90 	vmov	s15, r3
 8002a76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a82:	edd7 6a03 	vldr	s13, [r7, #12]
 8002a86:	7ffa      	ldrb	r2, [r7, #31]
 8002a88:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002a8c:	4812      	ldr	r0, [pc, #72]	@ (8002ad8 <calcRPM_PID+0x244>)
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	4413      	add	r3, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	011b      	lsls	r3, r3, #4
 8002a9c:	4403      	add	r3, r0
 8002a9e:	330c      	adds	r3, #12
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	ee07 3a90 	vmov	s15, r3
 8002aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aaa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab6:	ee17 3a90 	vmov	r3, s15
 8002aba:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8002abc:	7dbb      	ldrb	r3, [r7, #22]
 8002abe:	6a39      	ldr	r1, [r7, #32]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f997 	bl	8002df4 <applyCtrlLimit>
 8002ac6:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	372c      	adds	r7, #44	@ 0x2c
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd90      	pop	{r4, r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	200002f0 	.word	0x200002f0
 8002ad8:	200003a0 	.word	0x200003a0

08002adc <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8002adc:	b590      	push	{r4, r7, lr}
 8002ade:	b08b      	sub	sp, #44	@ 0x2c
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	4608      	mov	r0, r1
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	461a      	mov	r2, r3
 8002aea:	eef0 6a40 	vmov.f32	s13, s0
 8002aee:	eeb0 7a60 	vmov.f32	s14, s1
 8002af2:	eef0 7a41 	vmov.f32	s15, s2
 8002af6:	4623      	mov	r3, r4
 8002af8:	75fb      	strb	r3, [r7, #23]
 8002afa:	4603      	mov	r3, r0
 8002afc:	75bb      	strb	r3, [r7, #22]
 8002afe:	460b      	mov	r3, r1
 8002b00:	757b      	strb	r3, [r7, #21]
 8002b02:	4613      	mov	r3, r2
 8002b04:	827b      	strh	r3, [r7, #18]
 8002b06:	edc7 6a01 	vstr	s13, [r7, #4]
 8002b0a:	ed87 7a02 	vstr	s14, [r7, #8]
 8002b0e:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8002b16:	7dfb      	ldrb	r3, [r7, #23]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 8002b24:	7dbb      	ldrb	r3, [r7, #22]
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	dc02      	bgt.n	8002b30 <calcPosition_PID+0x54>
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	dc04      	bgt.n	8002b38 <calcPosition_PID+0x5c>
 8002b2e:	e00d      	b.n	8002b4c <calcPosition_PID+0x70>
 8002b30:	3b03      	subs	r3, #3
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d80a      	bhi.n	8002b4c <calcPosition_PID+0x70>
 8002b36:	e004      	b.n	8002b42 <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 8002b38:	7d7b      	ldrb	r3, [r7, #21]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002b40:	e009      	b.n	8002b56 <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8002b42:	7d7b      	ldrb	r3, [r7, #21]
 8002b44:	3303      	adds	r3, #3
 8002b46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002b4a:	e004      	b.n	8002b56 <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 8002b4c:	7d7b      	ldrb	r3, [r7, #21]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002b54:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 8002b56:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002b5a:	7ffa      	ldrb	r2, [r7, #31]
 8002b5c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002b60:	4ca2      	ldr	r4, [pc, #648]	@ (8002dec <calcPosition_PID+0x310>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4403      	add	r3, r0
 8002b6e:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002b72:	1acb      	subs	r3, r1, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	db10      	blt.n	8002b9a <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 8002b78:	8a79      	ldrh	r1, [r7, #18]
 8002b7a:	7ffa      	ldrb	r2, [r7, #31]
 8002b7c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002b80:	4c9a      	ldr	r4, [pc, #616]	@ (8002dec <calcPosition_PID+0x310>)
 8002b82:	4613      	mov	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4413      	add	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	4403      	add	r3, r0
 8002b8e:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002b92:	1acb      	subs	r3, r1, r3
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	83bb      	strh	r3, [r7, #28]
 8002b98:	e012      	b.n	8002bc0 <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 8002b9a:	8a79      	ldrh	r1, [r7, #18]
 8002b9c:	7ffa      	ldrb	r2, [r7, #31]
 8002b9e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002ba2:	4c92      	ldr	r4, [pc, #584]	@ (8002dec <calcPosition_PID+0x310>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	4413      	add	r3, r2
 8002bae:	4403      	add	r3, r0
 8002bb0:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002bb4:	1acb      	subs	r3, r1, r3
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 8002bc0:	7ffa      	ldrb	r2, [r7, #31]
 8002bc2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002bc6:	4889      	ldr	r0, [pc, #548]	@ (8002dec <calcPosition_PID+0x310>)
 8002bc8:	4613      	mov	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	4413      	add	r3, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002bd8:	461a      	mov	r2, r3
 8002bda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	db10      	blt.n	8002c06 <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 8002be4:	7ffa      	ldrb	r2, [r7, #31]
 8002be6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002bea:	4880      	ldr	r0, [pc, #512]	@ (8002dec <calcPosition_PID+0x310>)
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	4413      	add	r3, r2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8002bfc:	8a7b      	ldrh	r3, [r7, #18]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	837b      	strh	r3, [r7, #26]
 8002c04:	e012      	b.n	8002c2c <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 8002c06:	7ffa      	ldrb	r2, [r7, #31]
 8002c08:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002c0c:	4877      	ldr	r0, [pc, #476]	@ (8002dec <calcPosition_PID+0x310>)
 8002c0e:	4613      	mov	r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	4413      	add	r3, r2
 8002c18:	440b      	add	r3, r1
 8002c1a:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 8002c1e:	8a7b      	ldrh	r3, [r7, #18]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 8002c2c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002c30:	7ffa      	ldrb	r2, [r7, #31]
 8002c32:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002c36:	4c6d      	ldr	r4, [pc, #436]	@ (8002dec <calcPosition_PID+0x310>)
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	005b      	lsls	r3, r3, #1
 8002c40:	4413      	add	r3, r2
 8002c42:	4403      	add	r3, r0
 8002c44:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002c48:	7ffa      	ldrb	r2, [r7, #31]
 8002c4a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002c4e:	1ac9      	subs	r1, r1, r3
 8002c50:	4c67      	ldr	r4, [pc, #412]	@ (8002df0 <calcPosition_PID+0x314>)
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	005b      	lsls	r3, r3, #1
 8002c5a:	4413      	add	r3, r2
 8002c5c:	4403      	add	r3, r0
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	4423      	add	r3, r4
 8002c62:	3304      	adds	r3, #4
 8002c64:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8002c66:	7ffa      	ldrb	r2, [r7, #31]
 8002c68:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002c6c:	4860      	ldr	r0, [pc, #384]	@ (8002df0 <calcPosition_PID+0x314>)
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	440b      	add	r3, r1
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	4403      	add	r3, r0
 8002c7e:	3308      	adds	r3, #8
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	7ffa      	ldrb	r2, [r7, #31]
 8002c84:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002c88:	4c59      	ldr	r4, [pc, #356]	@ (8002df0 <calcPosition_PID+0x314>)
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	4413      	add	r3, r2
 8002c94:	4403      	add	r3, r0
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	4423      	add	r3, r4
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	7ffa      	ldrb	r2, [r7, #31]
 8002ca0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002ca4:	4419      	add	r1, r3
 8002ca6:	4c52      	ldr	r4, [pc, #328]	@ (8002df0 <calcPosition_PID+0x314>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4403      	add	r3, r0
 8002cb4:	011b      	lsls	r3, r3, #4
 8002cb6:	4423      	add	r3, r4
 8002cb8:	3308      	adds	r3, #8
 8002cba:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 8002cbc:	7ffa      	ldrb	r2, [r7, #31]
 8002cbe:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002cc2:	484b      	ldr	r0, [pc, #300]	@ (8002df0 <calcPosition_PID+0x314>)
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4413      	add	r3, r2
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4413      	add	r3, r2
 8002cce:	440b      	add	r3, r1
 8002cd0:	011b      	lsls	r3, r3, #4
 8002cd2:	4403      	add	r3, r0
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	7ffa      	ldrb	r2, [r7, #31]
 8002cd8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002cdc:	4c43      	ldr	r4, [pc, #268]	@ (8002dec <calcPosition_PID+0x310>)
 8002cde:	4613      	mov	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	4413      	add	r3, r2
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4403      	add	r3, r0
 8002cea:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002cee:	7ffa      	ldrb	r2, [r7, #31]
 8002cf0:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002cf4:	1ac9      	subs	r1, r1, r3
 8002cf6:	4c3e      	ldr	r4, [pc, #248]	@ (8002df0 <calcPosition_PID+0x314>)
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4413      	add	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	4403      	add	r3, r0
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	4423      	add	r3, r4
 8002d08:	330c      	adds	r3, #12
 8002d0a:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 8002d0c:	7ffa      	ldrb	r2, [r7, #31]
 8002d0e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002d12:	4836      	ldr	r0, [pc, #216]	@ (8002dec <calcPosition_PID+0x310>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002d24:	7ffa      	ldrb	r2, [r7, #31]
 8002d26:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002d2a:	461c      	mov	r4, r3
 8002d2c:	4830      	ldr	r0, [pc, #192]	@ (8002df0 <calcPosition_PID+0x314>)
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	440b      	add	r3, r1
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	4403      	add	r3, r0
 8002d3e:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8002d40:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d44:	7ffa      	ldrb	r2, [r7, #31]
 8002d46:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002d4a:	4829      	ldr	r0, [pc, #164]	@ (8002df0 <calcPosition_PID+0x314>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	4413      	add	r3, r2
 8002d56:	440b      	add	r3, r1
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	4403      	add	r3, r0
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d6c:	edd7 6a02 	vldr	s13, [r7, #8]
 8002d70:	7ffa      	ldrb	r2, [r7, #31]
 8002d72:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002d76:	481e      	ldr	r0, [pc, #120]	@ (8002df0 <calcPosition_PID+0x314>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	005b      	lsls	r3, r3, #1
 8002d80:	4413      	add	r3, r2
 8002d82:	440b      	add	r3, r1
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4403      	add	r3, r0
 8002d88:	3308      	adds	r3, #8
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d9c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002da0:	7ffa      	ldrb	r2, [r7, #31]
 8002da2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002da6:	4812      	ldr	r0, [pc, #72]	@ (8002df0 <calcPosition_PID+0x314>)
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	4413      	add	r3, r2
 8002db2:	440b      	add	r3, r1
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	4403      	add	r3, r0
 8002db8:	330c      	adds	r3, #12
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	ee07 3a90 	vmov	s15, r3
 8002dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002dc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dd0:	ee17 3a90 	vmov	r3, s15
 8002dd4:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8002dd6:	7dbb      	ldrb	r3, [r7, #22]
 8002dd8:	6a39      	ldr	r1, [r7, #32]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f80a 	bl	8002df4 <applyCtrlLimit>
 8002de0:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 8002de2:	6a3b      	ldr	r3, [r7, #32]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	372c      	adds	r7, #44	@ 0x2c
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd90      	pop	{r4, r7, pc}
 8002dec:	200002f0 	.word	0x200002f0
 8002df0:	200003a0 	.word	0x200003a0

08002df4 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	6039      	str	r1, [r7, #0]
 8002dfe:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8002e00:	79fb      	ldrb	r3, [r7, #7]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d009      	beq.n	8002e1a <applyCtrlLimit+0x26>
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	dc29      	bgt.n	8002e5e <applyCtrlLimit+0x6a>
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	dc02      	bgt.n	8002e14 <applyCtrlLimit+0x20>
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	dc03      	bgt.n	8002e1a <applyCtrlLimit+0x26>
 8002e12:	e024      	b.n	8002e5e <applyCtrlLimit+0x6a>
 8002e14:	2b03      	cmp	r3, #3
 8002e16:	d00f      	beq.n	8002e38 <applyCtrlLimit+0x44>
 8002e18:	e021      	b.n	8002e5e <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e20:	dd03      	ble.n	8002e2a <applyCtrlLimit+0x36>
				val = 16384;
 8002e22:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e26:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8002e28:	e016      	b.n	8002e58 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8002e30:	da12      	bge.n	8002e58 <applyCtrlLimit+0x64>
				val = -16384;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	@ (8002e6c <applyCtrlLimit+0x78>)
 8002e34:	603b      	str	r3, [r7, #0]
			break;
 8002e36:	e00f      	b.n	8002e58 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	dd03      	ble.n	8002e4a <applyCtrlLimit+0x56>
				val = 25000;
 8002e42:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8002e46:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8002e48:	e008      	b.n	8002e5c <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	4a08      	ldr	r2, [pc, #32]	@ (8002e70 <applyCtrlLimit+0x7c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	da04      	bge.n	8002e5c <applyCtrlLimit+0x68>
				val = -25000;
 8002e52:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <applyCtrlLimit+0x7c>)
 8002e54:	603b      	str	r3, [r7, #0]
			break;
 8002e56:	e001      	b.n	8002e5c <applyCtrlLimit+0x68>
			break;
 8002e58:	bf00      	nop
 8002e5a:	e000      	b.n	8002e5e <applyCtrlLimit+0x6a>
			break;
 8002e5c:	bf00      	nop
		}
	}
	return val;
 8002e5e:	683b      	ldr	r3, [r7, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	ffffc000 	.word	0xffffc000
 8002e70:	ffff9e58 	.word	0xffff9e58

08002e74 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002e74:	b590      	push	{r4, r7, lr}
 8002e76:	b087      	sub	sp, #28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4604      	mov	r4, r0
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	eef0 6a40 	vmov.f32	s13, s0
 8002e86:	eeb0 7a60 	vmov.f32	s14, s1
 8002e8a:	eef0 7a41 	vmov.f32	s15, s2
 8002e8e:	4623      	mov	r3, r4
 8002e90:	75fb      	strb	r3, [r7, #23]
 8002e92:	4603      	mov	r3, r0
 8002e94:	75bb      	strb	r3, [r7, #22]
 8002e96:	460b      	mov	r3, r1
 8002e98:	757b      	strb	r3, [r7, #21]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	827b      	strh	r3, [r7, #18]
 8002e9e:	edc7 6a01 	vstr	s13, [r7, #4]
 8002ea2:	ed87 7a02 	vstr	s14, [r7, #8]
 8002ea6:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 8002eaa:	edd7 6a01 	vldr	s13, [r7, #4]
 8002eae:	ed97 7a02 	vldr	s14, [r7, #8]
 8002eb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002eba:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002ebe:	7db9      	ldrb	r1, [r7, #22]
 8002ec0:	7df8      	ldrb	r0, [r7, #23]
 8002ec2:	eeb0 0a66 	vmov.f32	s0, s13
 8002ec6:	eef0 0a47 	vmov.f32	s1, s14
 8002eca:	eeb0 1a67 	vmov.f32	s2, s15
 8002ece:	f7ff fce1 	bl	8002894 <calcRPM_PID>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	b21b      	sxth	r3, r3
 8002ed6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002eda:	7db9      	ldrb	r1, [r7, #22]
 8002edc:	7df8      	ldrb	r0, [r7, #23]
 8002ede:	f7ff fadb 	bl	8002498 <CAN_setMotorCtrlVal>
}
 8002ee2:	bf00      	nop
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd90      	pop	{r4, r7, pc}

08002eea <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8002eea:	b590      	push	{r4, r7, lr}
 8002eec:	b087      	sub	sp, #28
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	4608      	mov	r0, r1
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	eef0 6a40 	vmov.f32	s13, s0
 8002efc:	eeb0 7a60 	vmov.f32	s14, s1
 8002f00:	eef0 7a41 	vmov.f32	s15, s2
 8002f04:	4623      	mov	r3, r4
 8002f06:	75fb      	strb	r3, [r7, #23]
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75bb      	strb	r3, [r7, #22]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	757b      	strb	r3, [r7, #21]
 8002f10:	4613      	mov	r3, r2
 8002f12:	827b      	strh	r3, [r7, #18]
 8002f14:	edc7 6a01 	vstr	s13, [r7, #4]
 8002f18:	ed87 7a02 	vstr	s14, [r7, #8]
 8002f1c:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 8002f20:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f24:	ed97 7a02 	vldr	s14, [r7, #8]
 8002f28:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f30:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002f34:	7db9      	ldrb	r1, [r7, #22]
 8002f36:	7df8      	ldrb	r0, [r7, #23]
 8002f38:	eeb0 0a66 	vmov.f32	s0, s13
 8002f3c:	eef0 0a47 	vmov.f32	s1, s14
 8002f40:	eeb0 1a67 	vmov.f32	s2, s15
 8002f44:	f7ff fdca 	bl	8002adc <calcPosition_PID>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	b21b      	sxth	r3, r3
 8002f4c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002f50:	7db9      	ldrb	r1, [r7, #22]
 8002f52:	7df8      	ldrb	r0, [r7, #23]
 8002f54:	f7ff faa0 	bl	8002498 <CAN_setMotorCtrlVal>
}
 8002f58:	bf00      	nop
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd90      	pop	{r4, r7, pc}

08002f60 <getRotorPosition>:

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	71bb      	strb	r3, [r7, #6]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8002f72:	79bb      	ldrb	r3, [r7, #6]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	dc02      	bgt.n	8002f7e <getRotorPosition+0x1e>
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	dc04      	bgt.n	8002f86 <getRotorPosition+0x26>
 8002f7c:	e034      	b.n	8002fe8 <getRotorPosition+0x88>
 8002f7e:	3b03      	subs	r3, #3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d831      	bhi.n	8002fe8 <getRotorPosition+0x88>
 8002f84:	e016      	b.n	8002fb4 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8002f86:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dd29      	ble.n	8002fe2 <getRotorPosition+0x82>
 8002f8e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002f92:	2b08      	cmp	r3, #8
 8002f94:	dc25      	bgt.n	8002fe2 <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002f9e:	1e59      	subs	r1, r3, #1
 8002fa0:	4815      	ldr	r0, [pc, #84]	@ (8002ff8 <getRotorPosition+0x98>)
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	4413      	add	r3, r2
 8002fac:	440b      	add	r3, r1
 8002fae:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002fb2:	e01b      	b.n	8002fec <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002fb4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	dd14      	ble.n	8002fe6 <getRotorPosition+0x86>
 8002fbc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002fc0:	2b07      	cmp	r3, #7
 8002fc2:	dc10      	bgt.n	8002fe6 <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8002fc4:	79fb      	ldrb	r3, [r7, #7]
 8002fc6:	1e5a      	subs	r2, r3, #1
 8002fc8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002fcc:	1cd9      	adds	r1, r3, #3
 8002fce:	480a      	ldr	r0, [pc, #40]	@ (8002ff8 <getRotorPosition+0x98>)
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	4413      	add	r3, r2
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	4413      	add	r3, r2
 8002fda:	440b      	add	r3, r1
 8002fdc:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002fe0:	e004      	b.n	8002fec <getRotorPosition+0x8c>
			break;
 8002fe2:	bf00      	nop
 8002fe4:	e000      	b.n	8002fe8 <getRotorPosition+0x88>
			}
			break;
 8002fe6:	bf00      	nop
		}
	}
	return -1;
 8002fe8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	200002f0 	.word	0x200002f0

08002ffc <getMotorRPM>:

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	71fb      	strb	r3, [r7, #7]
 8003006:	460b      	mov	r3, r1
 8003008:	71bb      	strb	r3, [r7, #6]
 800300a:	4613      	mov	r3, r2
 800300c:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 800300e:	79bb      	ldrb	r3, [r7, #6]
 8003010:	2b02      	cmp	r3, #2
 8003012:	dc02      	bgt.n	800301a <getMotorRPM+0x1e>
 8003014:	2b00      	cmp	r3, #0
 8003016:	dc04      	bgt.n	8003022 <getMotorRPM+0x26>
 8003018:	e038      	b.n	800308c <getMotorRPM+0x90>
 800301a:	3b03      	subs	r3, #3
 800301c:	2b01      	cmp	r3, #1
 800301e:	d835      	bhi.n	800308c <getMotorRPM+0x90>
 8003020:	e018      	b.n	8003054 <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8003022:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003026:	2b00      	cmp	r3, #0
 8003028:	dd2d      	ble.n	8003086 <getMotorRPM+0x8a>
 800302a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800302e:	2b08      	cmp	r3, #8
 8003030:	dc29      	bgt.n	8003086 <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 8003032:	79fb      	ldrb	r3, [r7, #7]
 8003034:	1e5a      	subs	r2, r3, #1
 8003036:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800303a:	1e59      	subs	r1, r3, #1
 800303c:	4817      	ldr	r0, [pc, #92]	@ (800309c <getMotorRPM+0xa0>)
 800303e:	4613      	mov	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	4413      	add	r3, r2
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	4413      	add	r3, r2
 8003048:	440b      	add	r3, r1
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4403      	add	r3, r0
 800304e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003052:	e01d      	b.n	8003090 <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8003054:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003058:	2b00      	cmp	r3, #0
 800305a:	dd16      	ble.n	800308a <getMotorRPM+0x8e>
 800305c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003060:	2b07      	cmp	r3, #7
 8003062:	dc12      	bgt.n	800308a <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 8003064:	79fb      	ldrb	r3, [r7, #7]
 8003066:	1e5a      	subs	r2, r3, #1
 8003068:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800306c:	1cd9      	adds	r1, r3, #3
 800306e:	480b      	ldr	r0, [pc, #44]	@ (800309c <getMotorRPM+0xa0>)
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	440b      	add	r3, r1
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	4403      	add	r3, r0
 8003080:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003084:	e004      	b.n	8003090 <getMotorRPM+0x94>
			break;
 8003086:	bf00      	nop
 8003088:	e000      	b.n	800308c <getMotorRPM+0x90>
			}
			break;
 800308a:	bf00      	nop
		}
	}
	return -1;
 800308c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003090:	4618      	mov	r0, r3
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr
 800309c:	200002f0 	.word	0x200002f0

080030a0 <CAN_Init>:
	}
	return -1;
}


void CAN_Init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	@ 0x28
 80030a4:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 80030a6:	2301      	movs	r3, #1
 80030a8:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80030ae:	2301      	movs	r3, #1
 80030b0:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 80030b2:	2300      	movs	r3, #0
 80030b4:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
    can_filter_st.SlaveStartFilterBank = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80030ce:	463b      	mov	r3, r7
 80030d0:	4619      	mov	r1, r3
 80030d2:	480f      	ldr	r0, [pc, #60]	@ (8003110 <CAN_Init+0x70>)
 80030d4:	f004 f93e 	bl	8007354 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80030d8:	480d      	ldr	r0, [pc, #52]	@ (8003110 <CAN_Init+0x70>)
 80030da:	f004 fa19 	bl	8007510 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80030de:	2102      	movs	r1, #2
 80030e0:	480b      	ldr	r0, [pc, #44]	@ (8003110 <CAN_Init+0x70>)
 80030e2:	f004 fc4b 	bl	800797c <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 13;
 80030e6:	230d      	movs	r3, #13
 80030e8:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 13;
 80030ea:	230d      	movs	r3, #13
 80030ec:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80030ee:	463b      	mov	r3, r7
 80030f0:	4619      	mov	r1, r3
 80030f2:	4808      	ldr	r0, [pc, #32]	@ (8003114 <CAN_Init+0x74>)
 80030f4:	f004 f92e 	bl	8007354 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80030f8:	4806      	ldr	r0, [pc, #24]	@ (8003114 <CAN_Init+0x74>)
 80030fa:	f004 fa09 	bl	8007510 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80030fe:	2102      	movs	r1, #2
 8003100:	4804      	ldr	r0, [pc, #16]	@ (8003114 <CAN_Init+0x74>)
 8003102:	f004 fc3b 	bl	800797c <HAL_CAN_ActivateNotification>
}
 8003106:	bf00      	nop
 8003108:	3728      	adds	r7, #40	@ 0x28
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	20000af8 	.word	0x20000af8
 8003114:	20000b20 	.word	0x20000b20

08003118 <DBUS_Rx_Init>:
uint8_t DBUS_Buff[128];

uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len);


void DBUS_Rx_Init(UART_HandleTypeDef* huart){
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (huart, DBUS_Buff, 18);
 8003120:	2212      	movs	r2, #18
 8003122:	4914      	ldr	r1, [pc, #80]	@ (8003174 <DBUS_Rx_Init+0x5c>)
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f007 fcf4 	bl	800ab12 <HAL_UART_Receive_DMA>
	DR16_DBUS.CH0 = 1024;
 800312a:	4a13      	ldr	r2, [pc, #76]	@ (8003178 <DBUS_Rx_Init+0x60>)
 800312c:	8813      	ldrh	r3, [r2, #0]
 800312e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003132:	f361 030a 	bfi	r3, r1, #0, #11
 8003136:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = 1024;
 8003138:	4a0f      	ldr	r2, [pc, #60]	@ (8003178 <DBUS_Rx_Init+0x60>)
 800313a:	8853      	ldrh	r3, [r2, #2]
 800313c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8003140:	f361 030a 	bfi	r3, r1, #0, #11
 8003144:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = 1024;
 8003146:	4a0c      	ldr	r2, [pc, #48]	@ (8003178 <DBUS_Rx_Init+0x60>)
 8003148:	8893      	ldrh	r3, [r2, #4]
 800314a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800314e:	f361 030a 	bfi	r3, r1, #0, #11
 8003152:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = 1024;
 8003154:	4a08      	ldr	r2, [pc, #32]	@ (8003178 <DBUS_Rx_Init+0x60>)
 8003156:	88d3      	ldrh	r3, [r2, #6]
 8003158:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800315c:	f361 030a 	bfi	r3, r1, #0, #11
 8003160:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.RESERVED = 1024;
 8003162:	4b05      	ldr	r3, [pc, #20]	@ (8003178 <DBUS_Rx_Init+0x60>)
 8003164:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003168:	825a      	strh	r2, [r3, #18]
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	20000514 	.word	0x20000514
 8003178:	20000500 	.word	0x20000500

0800317c <DBUS_Update>:


void DBUS_Update(){
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
	DR16_DBUS.CH0 = (DBUS_Buff[0] | (DBUS_Buff[1] << 8)) & 0x07ff;        //!< Channel 0
 8003180:	4b59      	ldr	r3, [pc, #356]	@ (80032e8 <DBUS_Update+0x16c>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	b21a      	sxth	r2, r3
 8003186:	4b58      	ldr	r3, [pc, #352]	@ (80032e8 <DBUS_Update+0x16c>)
 8003188:	785b      	ldrb	r3, [r3, #1]
 800318a:	b21b      	sxth	r3, r3
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	b21b      	sxth	r3, r3
 8003190:	4313      	orrs	r3, r2
 8003192:	b21b      	sxth	r3, r3
 8003194:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003198:	b299      	uxth	r1, r3
 800319a:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <DBUS_Update+0x170>)
 800319c:	8813      	ldrh	r3, [r2, #0]
 800319e:	f361 030a 	bfi	r3, r1, #0, #11
 80031a2:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = ((DBUS_Buff[1] >> 3) | (DBUS_Buff[2] << 5)) & 0x07ff; //!< Channel 1
 80031a4:	4b50      	ldr	r3, [pc, #320]	@ (80032e8 <DBUS_Update+0x16c>)
 80031a6:	785b      	ldrb	r3, [r3, #1]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	b21a      	sxth	r2, r3
 80031ae:	4b4e      	ldr	r3, [pc, #312]	@ (80032e8 <DBUS_Update+0x16c>)
 80031b0:	789b      	ldrb	r3, [r3, #2]
 80031b2:	b21b      	sxth	r3, r3
 80031b4:	015b      	lsls	r3, r3, #5
 80031b6:	b21b      	sxth	r3, r3
 80031b8:	4313      	orrs	r3, r2
 80031ba:	b21b      	sxth	r3, r3
 80031bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c0:	b299      	uxth	r1, r3
 80031c2:	4a4a      	ldr	r2, [pc, #296]	@ (80032ec <DBUS_Update+0x170>)
 80031c4:	8853      	ldrh	r3, [r2, #2]
 80031c6:	f361 030a 	bfi	r3, r1, #0, #11
 80031ca:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = ((DBUS_Buff[2] >> 6) | (DBUS_Buff[3] << 2) | (DBUS_Buff[4] << 10)) &0x07ff;       //!< Channel 2
 80031cc:	4b46      	ldr	r3, [pc, #280]	@ (80032e8 <DBUS_Update+0x16c>)
 80031ce:	789b      	ldrb	r3, [r3, #2]
 80031d0:	099b      	lsrs	r3, r3, #6
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	b21a      	sxth	r2, r3
 80031d6:	4b44      	ldr	r3, [pc, #272]	@ (80032e8 <DBUS_Update+0x16c>)
 80031d8:	78db      	ldrb	r3, [r3, #3]
 80031da:	b21b      	sxth	r3, r3
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	b21b      	sxth	r3, r3
 80031e0:	4313      	orrs	r3, r2
 80031e2:	b21a      	sxth	r2, r3
 80031e4:	4b40      	ldr	r3, [pc, #256]	@ (80032e8 <DBUS_Update+0x16c>)
 80031e6:	791b      	ldrb	r3, [r3, #4]
 80031e8:	b21b      	sxth	r3, r3
 80031ea:	029b      	lsls	r3, r3, #10
 80031ec:	b21b      	sxth	r3, r3
 80031ee:	4313      	orrs	r3, r2
 80031f0:	b21b      	sxth	r3, r3
 80031f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031f6:	b299      	uxth	r1, r3
 80031f8:	4a3c      	ldr	r2, [pc, #240]	@ (80032ec <DBUS_Update+0x170>)
 80031fa:	8893      	ldrh	r3, [r2, #4]
 80031fc:	f361 030a 	bfi	r3, r1, #0, #11
 8003200:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = ((DBUS_Buff[4] >> 1) | (DBUS_Buff[5] << 7)) & 0x07ff; //!< Channel 3
 8003202:	4b39      	ldr	r3, [pc, #228]	@ (80032e8 <DBUS_Update+0x16c>)
 8003204:	791b      	ldrb	r3, [r3, #4]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	b2db      	uxtb	r3, r3
 800320a:	b21a      	sxth	r2, r3
 800320c:	4b36      	ldr	r3, [pc, #216]	@ (80032e8 <DBUS_Update+0x16c>)
 800320e:	795b      	ldrb	r3, [r3, #5]
 8003210:	b21b      	sxth	r3, r3
 8003212:	01db      	lsls	r3, r3, #7
 8003214:	b21b      	sxth	r3, r3
 8003216:	4313      	orrs	r3, r2
 8003218:	b21b      	sxth	r3, r3
 800321a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800321e:	b299      	uxth	r1, r3
 8003220:	4a32      	ldr	r2, [pc, #200]	@ (80032ec <DBUS_Update+0x170>)
 8003222:	88d3      	ldrh	r3, [r2, #6]
 8003224:	f361 030a 	bfi	r3, r1, #0, #11
 8003228:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.S1 = ((DBUS_Buff[5] >> 4) & 0x0003);                  //!< Switch left
 800322a:	4b2f      	ldr	r3, [pc, #188]	@ (80032e8 <DBUS_Update+0x16c>)
 800322c:	795b      	ldrb	r3, [r3, #5]
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	b2db      	uxtb	r3, r3
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	b2d9      	uxtb	r1, r3
 8003238:	4a2c      	ldr	r2, [pc, #176]	@ (80032ec <DBUS_Update+0x170>)
 800323a:	79d3      	ldrb	r3, [r2, #7]
 800323c:	f361 03c4 	bfi	r3, r1, #3, #2
 8003240:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.S2 = ((DBUS_Buff[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8003242:	4b29      	ldr	r3, [pc, #164]	@ (80032e8 <DBUS_Update+0x16c>)
 8003244:	795b      	ldrb	r3, [r3, #5]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	b2db      	uxtb	r3, r3
 800324a:	109b      	asrs	r3, r3, #2
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	b2d9      	uxtb	r1, r3
 8003252:	4a26      	ldr	r2, [pc, #152]	@ (80032ec <DBUS_Update+0x170>)
 8003254:	79d3      	ldrb	r3, [r2, #7]
 8003256:	f361 1346 	bfi	r3, r1, #5, #2
 800325a:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.MouseX = DBUS_Buff[6] | (DBUS_Buff[7] << 8);                    //!< Mouse X axis
 800325c:	4b22      	ldr	r3, [pc, #136]	@ (80032e8 <DBUS_Update+0x16c>)
 800325e:	799b      	ldrb	r3, [r3, #6]
 8003260:	b21a      	sxth	r2, r3
 8003262:	4b21      	ldr	r3, [pc, #132]	@ (80032e8 <DBUS_Update+0x16c>)
 8003264:	79db      	ldrb	r3, [r3, #7]
 8003266:	b21b      	sxth	r3, r3
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	b21b      	sxth	r3, r3
 800326c:	4313      	orrs	r3, r2
 800326e:	b21a      	sxth	r2, r3
 8003270:	4b1e      	ldr	r3, [pc, #120]	@ (80032ec <DBUS_Update+0x170>)
 8003272:	811a      	strh	r2, [r3, #8]
	DR16_DBUS.MouseY = DBUS_Buff[8] | (DBUS_Buff[9] << 8);                    //!< Mouse Y axis
 8003274:	4b1c      	ldr	r3, [pc, #112]	@ (80032e8 <DBUS_Update+0x16c>)
 8003276:	7a1b      	ldrb	r3, [r3, #8]
 8003278:	b21a      	sxth	r2, r3
 800327a:	4b1b      	ldr	r3, [pc, #108]	@ (80032e8 <DBUS_Update+0x16c>)
 800327c:	7a5b      	ldrb	r3, [r3, #9]
 800327e:	b21b      	sxth	r3, r3
 8003280:	021b      	lsls	r3, r3, #8
 8003282:	b21b      	sxth	r3, r3
 8003284:	4313      	orrs	r3, r2
 8003286:	b21a      	sxth	r2, r3
 8003288:	4b18      	ldr	r3, [pc, #96]	@ (80032ec <DBUS_Update+0x170>)
 800328a:	815a      	strh	r2, [r3, #10]
	DR16_DBUS.MouseZ = DBUS_Buff[10] | (DBUS_Buff[11] << 8);                  //!< Mouse Z axis
 800328c:	4b16      	ldr	r3, [pc, #88]	@ (80032e8 <DBUS_Update+0x16c>)
 800328e:	7a9b      	ldrb	r3, [r3, #10]
 8003290:	b21a      	sxth	r2, r3
 8003292:	4b15      	ldr	r3, [pc, #84]	@ (80032e8 <DBUS_Update+0x16c>)
 8003294:	7adb      	ldrb	r3, [r3, #11]
 8003296:	b21b      	sxth	r3, r3
 8003298:	021b      	lsls	r3, r3, #8
 800329a:	b21b      	sxth	r3, r3
 800329c:	4313      	orrs	r3, r2
 800329e:	b21a      	sxth	r2, r3
 80032a0:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <DBUS_Update+0x170>)
 80032a2:	819a      	strh	r2, [r3, #12]
	DR16_DBUS.MouseL = DBUS_Buff[12];                                  //!< Mouse Left Is Pressed ?
 80032a4:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <DBUS_Update+0x16c>)
 80032a6:	7b1a      	ldrb	r2, [r3, #12]
 80032a8:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <DBUS_Update+0x170>)
 80032aa:	739a      	strb	r2, [r3, #14]
	DR16_DBUS.MouseR = DBUS_Buff[13];                                  //!< Mouse Right Is Pressed ?
 80032ac:	4b0e      	ldr	r3, [pc, #56]	@ (80032e8 <DBUS_Update+0x16c>)
 80032ae:	7b5a      	ldrb	r2, [r3, #13]
 80032b0:	4b0e      	ldr	r3, [pc, #56]	@ (80032ec <DBUS_Update+0x170>)
 80032b2:	73da      	strb	r2, [r3, #15]
	DR16_DBUS.KeyData1 = DBUS_Buff[14];                    //!< KeyBoard value lower bits
 80032b4:	4b0c      	ldr	r3, [pc, #48]	@ (80032e8 <DBUS_Update+0x16c>)
 80032b6:	7b9a      	ldrb	r2, [r3, #14]
 80032b8:	4b0c      	ldr	r3, [pc, #48]	@ (80032ec <DBUS_Update+0x170>)
 80032ba:	741a      	strb	r2, [r3, #16]
	DR16_DBUS.KeyData2 = DBUS_Buff[15];                    //!< KeyBoard value higher bits
 80032bc:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <DBUS_Update+0x16c>)
 80032be:	7bda      	ldrb	r2, [r3, #15]
 80032c0:	4b0a      	ldr	r3, [pc, #40]	@ (80032ec <DBUS_Update+0x170>)
 80032c2:	745a      	strb	r2, [r3, #17]
	DR16_DBUS.RESERVED = DBUS_Buff[16] | (DBUS_Buff[17] << 8);                 //NULL
 80032c4:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <DBUS_Update+0x16c>)
 80032c6:	7c1b      	ldrb	r3, [r3, #16]
 80032c8:	b21a      	sxth	r2, r3
 80032ca:	4b07      	ldr	r3, [pc, #28]	@ (80032e8 <DBUS_Update+0x16c>)
 80032cc:	7c5b      	ldrb	r3, [r3, #17]
 80032ce:	b21b      	sxth	r3, r3
 80032d0:	021b      	lsls	r3, r3, #8
 80032d2:	b21b      	sxth	r3, r3
 80032d4:	4313      	orrs	r3, r2
 80032d6:	b21b      	sxth	r3, r3
 80032d8:	b29a      	uxth	r2, r3
 80032da:	4b04      	ldr	r3, [pc, #16]	@ (80032ec <DBUS_Update+0x170>)
 80032dc:	825a      	strh	r2, [r3, #18]
}
 80032de:	bf00      	nop
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	20000514 	.word	0x20000514
 80032ec:	20000500 	.word	0x20000500

080032f0 <getDR16_CH0>:

int16_t getDR16_CH0(){
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH0>0){
 80032f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003324 <getDR16_CH0+0x34>)
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d009      	beq.n	8003316 <getDR16_CH0+0x26>
		return (int16_t)DR16_DBUS.CH0-1024;
 8003302:	4b08      	ldr	r3, [pc, #32]	@ (8003324 <getDR16_CH0+0x34>)
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800330a:	b29b      	uxth	r3, r3
 800330c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003310:	b29b      	uxth	r3, r3
 8003312:	b21b      	sxth	r3, r3
 8003314:	e000      	b.n	8003318 <getDR16_CH0+0x28>
	}
	else{
		return 0;
 8003316:	2300      	movs	r3, #0
	}
}
 8003318:	4618      	mov	r0, r3
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000500 	.word	0x20000500

08003328 <getDR16_CH1>:

int16_t getDR16_CH1(){
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH1>0){
 800332c:	4b0b      	ldr	r3, [pc, #44]	@ (800335c <getDR16_CH1+0x34>)
 800332e:	885b      	ldrh	r3, [r3, #2]
 8003330:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003334:	b29b      	uxth	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <getDR16_CH1+0x26>
		return (int16_t)DR16_DBUS.CH1-1024;
 800333a:	4b08      	ldr	r3, [pc, #32]	@ (800335c <getDR16_CH1+0x34>)
 800333c:	885b      	ldrh	r3, [r3, #2]
 800333e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003342:	b29b      	uxth	r3, r3
 8003344:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003348:	b29b      	uxth	r3, r3
 800334a:	b21b      	sxth	r3, r3
 800334c:	e000      	b.n	8003350 <getDR16_CH1+0x28>
	}
	else{
		return 0;
 800334e:	2300      	movs	r3, #0
	}
}
 8003350:	4618      	mov	r0, r3
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000500 	.word	0x20000500

08003360 <getDR16_CH2>:

int16_t getDR16_CH2(){
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH2>0){
 8003364:	4b0b      	ldr	r3, [pc, #44]	@ (8003394 <getDR16_CH2+0x34>)
 8003366:	889b      	ldrh	r3, [r3, #4]
 8003368:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d009      	beq.n	8003386 <getDR16_CH2+0x26>
		return (int16_t)DR16_DBUS.CH2-1024;
 8003372:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <getDR16_CH2+0x34>)
 8003374:	889b      	ldrh	r3, [r3, #4]
 8003376:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800337a:	b29b      	uxth	r3, r3
 800337c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003380:	b29b      	uxth	r3, r3
 8003382:	b21b      	sxth	r3, r3
 8003384:	e000      	b.n	8003388 <getDR16_CH2+0x28>
	}
	else{
		return 0;
 8003386:	2300      	movs	r3, #0
	}
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	20000500 	.word	0x20000500

08003398 <getDR16_CH3>:

int16_t getDR16_CH3(){
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH3>0){
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <getDR16_CH3+0x34>)
 800339e:	88db      	ldrh	r3, [r3, #6]
 80033a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d009      	beq.n	80033be <getDR16_CH3+0x26>
		return (int16_t)DR16_DBUS.CH3-1024;
 80033aa:	4b08      	ldr	r3, [pc, #32]	@ (80033cc <getDR16_CH3+0x34>)
 80033ac:	88db      	ldrh	r3, [r3, #6]
 80033ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	e000      	b.n	80033c0 <getDR16_CH3+0x28>
	}
	else{
		return 0;
 80033be:	2300      	movs	r3, #0
	}
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000500 	.word	0x20000500

080033d0 <getDR16_S1>:

uint8_t getDR16_S1(){
 80033d0:	b480      	push	{r7}
 80033d2:	af00      	add	r7, sp, #0
	return DR16_DBUS.S1;
 80033d4:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <getDR16_S1+0x18>)
 80033d6:	79db      	ldrb	r3, [r3, #7]
 80033d8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80033dc:	b2db      	uxtb	r3, r3
}
 80033de:	4618      	mov	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	20000500 	.word	0x20000500

080033ec <getDR16_S2>:

uint8_t getDR16_S2(){
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
	return DR16_DBUS.S2;
 80033f0:	4b04      	ldr	r3, [pc, #16]	@ (8003404 <getDR16_S2+0x18>)
 80033f2:	79db      	ldrb	r3, [r3, #7]
 80033f4:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80033f8:	b2db      	uxtb	r3, r3
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	20000500 	.word	0x20000500

08003408 <getDR16_CH4>:

int16_t getDR16_CH4(){
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
	if(DR16_DBUS.RESERVED>0){
 800340c:	4b08      	ldr	r3, [pc, #32]	@ (8003430 <getDR16_CH4+0x28>)
 800340e:	8a5b      	ldrh	r3, [r3, #18]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d006      	beq.n	8003422 <getDR16_CH4+0x1a>
		return (int16_t)DR16_DBUS.RESERVED-1024;
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <getDR16_CH4+0x28>)
 8003416:	8a5b      	ldrh	r3, [r3, #18]
 8003418:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800341c:	b29b      	uxth	r3, r3
 800341e:	b21b      	sxth	r3, r3
 8003420:	e000      	b.n	8003424 <getDR16_CH4+0x1c>
	}
	else{
		return 0;
 8003422:	2300      	movs	r3, #0
	}
}
 8003424:	4618      	mov	r0, r3
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	20000500 	.word	0x20000500

08003434 <getDR16_W>:

uint8_t getDR16_W(){
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,0,1);
 8003438:	4b04      	ldr	r3, [pc, #16]	@ (800344c <getDR16_W+0x18>)
 800343a:	7c1b      	ldrb	r3, [r3, #16]
 800343c:	2201      	movs	r2, #1
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f000 f86b 	bl	800351c <DBUS_getBits>
 8003446:	4603      	mov	r3, r0
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000500 	.word	0x20000500

08003450 <getDR16_S>:

uint8_t getDR16_S(){
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,1,1);
 8003454:	4b04      	ldr	r3, [pc, #16]	@ (8003468 <getDR16_S+0x18>)
 8003456:	7c1b      	ldrb	r3, [r3, #16]
 8003458:	2201      	movs	r2, #1
 800345a:	2101      	movs	r1, #1
 800345c:	4618      	mov	r0, r3
 800345e:	f000 f85d 	bl	800351c <DBUS_getBits>
 8003462:	4603      	mov	r3, r0
}
 8003464:	4618      	mov	r0, r3
 8003466:	bd80      	pop	{r7, pc}
 8003468:	20000500 	.word	0x20000500

0800346c <getDR16_A>:

uint8_t getDR16_A(){
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,2,1);
 8003470:	4b04      	ldr	r3, [pc, #16]	@ (8003484 <getDR16_A+0x18>)
 8003472:	7c1b      	ldrb	r3, [r3, #16]
 8003474:	2201      	movs	r2, #1
 8003476:	2102      	movs	r1, #2
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f84f 	bl	800351c <DBUS_getBits>
 800347e:	4603      	mov	r3, r0
}
 8003480:	4618      	mov	r0, r3
 8003482:	bd80      	pop	{r7, pc}
 8003484:	20000500 	.word	0x20000500

08003488 <getDR16_D>:

uint8_t getDR16_D(){
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,3,1);
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <getDR16_D+0x18>)
 800348e:	7c1b      	ldrb	r3, [r3, #16]
 8003490:	2201      	movs	r2, #1
 8003492:	2103      	movs	r1, #3
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f841 	bl	800351c <DBUS_getBits>
 800349a:	4603      	mov	r3, r0
}
 800349c:	4618      	mov	r0, r3
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20000500 	.word	0x20000500

080034a4 <getDR16_MouseX>:
uint8_t getDR16_B(){
	return DBUS_getBits(DR16_DBUS.KeyData2,7,1); //b
}

//mouse
int16_t getDR16_MouseX(){
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseX;
 80034a8:	4b03      	ldr	r3, [pc, #12]	@ (80034b8 <getDR16_MouseX+0x14>)
 80034aa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	20000500 	.word	0x20000500

080034bc <getDR16_MouseY>:

int16_t getDR16_MouseY(){
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseY;
 80034c0:	4b03      	ldr	r3, [pc, #12]	@ (80034d0 <getDR16_MouseY+0x14>)
 80034c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	20000500 	.word	0x20000500

080034d4 <getDR16_MouseZ>:

int16_t getDR16_MouseZ(){
 80034d4:	b480      	push	{r7}
 80034d6:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseZ;
 80034d8:	4b03      	ldr	r3, [pc, #12]	@ (80034e8 <getDR16_MouseZ+0x14>)
 80034da:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	20000500 	.word	0x20000500

080034ec <getDR16_MouseL>:

uint8_t getDR16_MouseL(){
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseL;
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <getDR16_MouseL+0x14>)
 80034f2:	7b9b      	ldrb	r3, [r3, #14]
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20000500 	.word	0x20000500

08003504 <getDR16_MouseR>:

uint8_t getDR16_MouseR(){
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseR;
 8003508:	4b03      	ldr	r3, [pc, #12]	@ (8003518 <getDR16_MouseR+0x14>)
 800350a:	7bdb      	ldrb	r3, [r3, #15]
}
 800350c:	4618      	mov	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	20000500 	.word	0x20000500

0800351c <DBUS_getBits>:


uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	71fb      	strb	r3, [r7, #7]
 8003526:	460b      	mov	r3, r1
 8003528:	71bb      	strb	r3, [r7, #6]
 800352a:	4613      	mov	r3, r2
 800352c:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 800352e:	2300      	movs	r3, #0
 8003530:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8003532:	2300      	movs	r3, #0
 8003534:	73bb      	strb	r3, [r7, #14]
 8003536:	e013      	b.n	8003560 <DBUS_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8003538:	79fa      	ldrb	r2, [r7, #7]
 800353a:	79b9      	ldrb	r1, [r7, #6]
 800353c:	7bbb      	ldrb	r3, [r7, #14]
 800353e:	440b      	add	r3, r1
 8003540:	fa42 f303 	asr.w	r3, r2, r3
 8003544:	f003 0201 	and.w	r2, r3, #1
 8003548:	7bbb      	ldrb	r3, [r7, #14]
 800354a:	fa02 f303 	lsl.w	r3, r2, r3
 800354e:	b25a      	sxtb	r2, r3
 8003550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003554:	4313      	orrs	r3, r2
 8003556:	b25b      	sxtb	r3, r3
 8003558:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800355a:	7bbb      	ldrb	r3, [r7, #14]
 800355c:	3301      	adds	r3, #1
 800355e:	73bb      	strb	r3, [r7, #14]
 8003560:	7bba      	ldrb	r2, [r7, #14]
 8003562:	797b      	ldrb	r3, [r7, #5]
 8003564:	429a      	cmp	r2, r3
 8003566:	d3e7      	bcc.n	8003538 <DBUS_getBits+0x1c>
	}
	return result;
 8003568:	7bfb      	ldrb	r3, [r7, #15]
}
 800356a:	4618      	mov	r0, r3
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <Get_CRC16_Check_Sum>:
/*
** Descriptions: CRC16 checksum function
** Input: Data to check,Stream length, initialized checksum
** Output: CRC checksum
*/
uint16_t Get_CRC16_Check_Sum(uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC){
 8003578:	b480      	push	{r7}
 800357a:	b087      	sub	sp, #28
 800357c:	af00      	add	r7, sp, #0
 800357e:	60f8      	str	r0, [r7, #12]
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	4613      	mov	r3, r2
 8003584:	80fb      	strh	r3, [r7, #6]
	uint8_t chData;

	if (pchMessage == NULL){
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d116      	bne.n	80035ba <Get_CRC16_Check_Sum+0x42>
		return 0xFFFF;
 800358c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003590:	e017      	b.n	80035c2 <Get_CRC16_Check_Sum+0x4a>
	}

	while(dwLength>0){
		chData = *pchMessage++;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	60fa      	str	r2, [r7, #12]
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	75fb      	strb	r3, [r7, #23]
		(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	88f9      	ldrh	r1, [r7, #6]
 80035a4:	7dfb      	ldrb	r3, [r7, #23]
 80035a6:	404b      	eors	r3, r1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	4909      	ldr	r1, [pc, #36]	@ (80035d0 <Get_CRC16_Check_Sum+0x58>)
 80035ac:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80035b0:	4053      	eors	r3, r2
 80035b2:	80fb      	strh	r3, [r7, #6]
		dwLength--;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	60bb      	str	r3, [r7, #8]
	while(dwLength>0){
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e8      	bne.n	8003592 <Get_CRC16_Check_Sum+0x1a>
	}

	return wCRC;
 80035c0:	88fb      	ldrh	r3, [r7, #6]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	371c      	adds	r7, #28
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	08011ba4 	.word	0x08011ba4

080035d4 <UART_Printf>:
/*
** Descriptions: Send a message in fmt format over chosen uart instance
** Input: UART instance to send over, message to send in fmt format
** Output: message transmitted over uart
*/
void UART_Printf(UART_HandleTypeDef *huart,const char *fmt,...) {
 80035d4:	b40e      	push	{r1, r2, r3}
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80035de:	f107 0318 	add.w	r3, r7, #24
 80035e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003618 <UART_Printf+0x44>)
 80035e4:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);
 80035e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003618 <UART_Printf+0x44>)
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	6979      	ldr	r1, [r7, #20]
 80035ec:	480b      	ldr	r0, [pc, #44]	@ (800361c <UART_Printf+0x48>)
 80035ee:	f00c f8e3 	bl	800f7b8 <vsiprintf>
 80035f2:	4603      	mov	r3, r0
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003620 <UART_Printf+0x4c>)
 80035f8:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit(huart, tx_buf, len,100);
 80035fa:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <UART_Printf+0x4c>)
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	2364      	movs	r3, #100	@ 0x64
 8003600:	4906      	ldr	r1, [pc, #24]	@ (800361c <UART_Printf+0x48>)
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f007 f9fa 	bl	800a9fc <HAL_UART_Transmit>
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003612:	b003      	add	sp, #12
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	2000099c 	.word	0x2000099c
 800361c:	200009a0 	.word	0x200009a0
 8003620:	20000aa0 	.word	0x20000aa0

08003624 <UART_Ex_Init>:
/*
** Descriptions: Initialize the chosen uart instance using advanced reception service.
** 				 Must be called previously to enable HAL_UARTEx_RxEventCallback function
** Input: Target uart instance
*/
void UART_Ex_Init(UART_HandleTypeDef *huart) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxInitBuff, 256);
 800362c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003630:	4903      	ldr	r1, [pc, #12]	@ (8003640 <UART_Ex_Init+0x1c>)
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f007 fa92 	bl	800ab5c <HAL_UARTEx_ReceiveToIdle_DMA>

}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000594 	.word	0x20000594

08003644 <HAL_UARTEx_RxEventCallback>:
/*
** Descriptions: is triggered on recieve
** Input: Data to CRC and append,Stream length = Data + checksum
** Output: True or False (CRC Verify Result)
*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 8003644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003648:	b0af      	sub	sp, #188	@ 0xbc
 800364a:	af12      	add	r7, sp, #72	@ 0x48
 800364c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800364e:	460b      	mov	r3, r1
 8003650:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8003652:	466b      	mov	r3, sp
 8003654:	607b      	str	r3, [r7, #4]

	//write uart to RxBuff until idle state
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxBuff, 256);
 8003656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800365a:	49b7      	ldr	r1, [pc, #732]	@ (8003938 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800365c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800365e:	f007 fa7d 	bl	800ab5c <HAL_UARTEx_ReceiveToIdle_DMA>
	UART_RxEventCallback_RM25Passthrough(huart,RxBuff);
 8003662:	49b5      	ldr	r1, [pc, #724]	@ (8003938 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003664:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003666:	f001 f9b4 	bl	80049d2 <UART_RxEventCallback_RM25Passthrough>
	//parse frame information
	uint16_t cmd_id = ((uint16_t) RxBuff[6] << 8) | RxBuff[5];
 800366a:	4bb3      	ldr	r3, [pc, #716]	@ (8003938 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800366c:	799b      	ldrb	r3, [r3, #6]
 800366e:	b21b      	sxth	r3, r3
 8003670:	021b      	lsls	r3, r3, #8
 8003672:	b21a      	sxth	r2, r3
 8003674:	4bb0      	ldr	r3, [pc, #704]	@ (8003938 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003676:	795b      	ldrb	r3, [r3, #5]
 8003678:	b21b      	sxth	r3, r3
 800367a:	4313      	orrs	r3, r2
 800367c:	b21b      	sxth	r3, r3
 800367e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint16_t data_length = ((uint16_t) RxBuff[2] << 8) | RxBuff[1];
 8003682:	4bad      	ldr	r3, [pc, #692]	@ (8003938 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003684:	789b      	ldrb	r3, [r3, #2]
 8003686:	b21b      	sxth	r3, r3
 8003688:	021b      	lsls	r3, r3, #8
 800368a:	b21a      	sxth	r2, r3
 800368c:	4baa      	ldr	r3, [pc, #680]	@ (8003938 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	b21b      	sxth	r3, r3
 8003692:	4313      	orrs	r3, r2
 8003694:	b21b      	sxth	r3, r3
 8003696:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	uint16_t CRC16 = ((uint16_t) RxBuff[data_length+8] << 8) | RxBuff[data_length+7];
 800369a:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800369e:	3308      	adds	r3, #8
 80036a0:	4aa5      	ldr	r2, [pc, #660]	@ (8003938 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80036a2:	5cd3      	ldrb	r3, [r2, r3]
 80036a4:	b21b      	sxth	r3, r3
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	b21a      	sxth	r2, r3
 80036aa:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80036ae:	3307      	adds	r3, #7
 80036b0:	49a1      	ldr	r1, [pc, #644]	@ (8003938 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80036b2:	5ccb      	ldrb	r3, [r1, r3]
 80036b4:	b21b      	sxth	r3, r3
 80036b6:	4313      	orrs	r3, r2
 80036b8:	b21b      	sxth	r3, r3
 80036ba:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	//fills transmissionBuffer array with transmission bytes without CRC16
	uint8_t transmissionBuff[data_length+7];
 80036be:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80036c2:	1dd9      	adds	r1, r3, #7
 80036c4:	1e4b      	subs	r3, r1, #1
 80036c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80036c8:	460a      	mov	r2, r1
 80036ca:	2300      	movs	r3, #0
 80036cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80036ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80036da:	00c3      	lsls	r3, r0, #3
 80036dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80036e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80036e4:	00c2      	lsls	r2, r0, #3
 80036e6:	460a      	mov	r2, r1
 80036e8:	2300      	movs	r3, #0
 80036ea:	4692      	mov	sl, r2
 80036ec:	469b      	mov	fp, r3
 80036ee:	f04f 0200 	mov.w	r2, #0
 80036f2:	f04f 0300 	mov.w	r3, #0
 80036f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003702:	460b      	mov	r3, r1
 8003704:	3307      	adds	r3, #7
 8003706:	08db      	lsrs	r3, r3, #3
 8003708:	00db      	lsls	r3, r3, #3
 800370a:	ebad 0d03 	sub.w	sp, sp, r3
 800370e:	ab12      	add	r3, sp, #72	@ 0x48
 8003710:	3300      	adds	r3, #0
 8003712:	663b      	str	r3, [r7, #96]	@ 0x60
	for(uint16_t i = 0; i<data_length+7;i++){
 8003714:	2300      	movs	r3, #0
 8003716:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800371a:	e00c      	b.n	8003736 <HAL_UARTEx_RxEventCallback+0xf2>
		transmissionBuff[i] = RxBuff[i];
 800371c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8003720:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003724:	4984      	ldr	r1, [pc, #528]	@ (8003938 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8003726:	5c89      	ldrb	r1, [r1, r2]
 8003728:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800372a:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i<data_length+7;i++){
 800372c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003730:	3301      	adds	r3, #1
 8003732:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8003736:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800373a:	1d9a      	adds	r2, r3, #6
 800373c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003740:	429a      	cmp	r2, r3
 8003742:	daeb      	bge.n	800371c <HAL_UARTEx_RxEventCallback+0xd8>
	}

	uint16_t expected_CRC16 = Get_CRC16_Check_Sum(transmissionBuff,data_length+7, CRC_INIT);
 8003744:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8003748:	3307      	adds	r3, #7
 800374a:	4619      	mov	r1, r3
 800374c:	4b7b      	ldr	r3, [pc, #492]	@ (800393c <HAL_UARTEx_RxEventCallback+0x2f8>)
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8003754:	f7ff ff10 	bl	8003578 <Get_CRC16_Check_Sum>
 8003758:	4603      	mov	r3, r0
 800375a:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e


	if(expected_CRC16 == CRC16){
 800375e:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8003762:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 8003766:	429a      	cmp	r2, r3
 8003768:	f040 87b7 	bne.w	80046da <HAL_UARTEx_RxEventCallback+0x1096>
 800376c:	466b      	mov	r3, sp
 800376e:	469a      	mov	sl, r3
		//seperate data
		uint8_t data[data_length];
 8003770:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 8003774:	460b      	mov	r3, r1
 8003776:	3b01      	subs	r3, #1
 8003778:	65bb      	str	r3, [r7, #88]	@ 0x58
 800377a:	b28b      	uxth	r3, r1
 800377c:	2200      	movs	r2, #0
 800377e:	4698      	mov	r8, r3
 8003780:	4691      	mov	r9, r2
 8003782:	f04f 0200 	mov.w	r2, #0
 8003786:	f04f 0300 	mov.w	r3, #0
 800378a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800378e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003796:	b28b      	uxth	r3, r1
 8003798:	2200      	movs	r2, #0
 800379a:	461c      	mov	r4, r3
 800379c:	4615      	mov	r5, r2
 800379e:	f04f 0200 	mov.w	r2, #0
 80037a2:	f04f 0300 	mov.w	r3, #0
 80037a6:	00eb      	lsls	r3, r5, #3
 80037a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037ac:	00e2      	lsls	r2, r4, #3
 80037ae:	460b      	mov	r3, r1
 80037b0:	3307      	adds	r3, #7
 80037b2:	08db      	lsrs	r3, r3, #3
 80037b4:	00db      	lsls	r3, r3, #3
 80037b6:	ebad 0d03 	sub.w	sp, sp, r3
 80037ba:	ab12      	add	r3, sp, #72	@ 0x48
 80037bc:	3300      	adds	r3, #0
 80037be:	657b      	str	r3, [r7, #84]	@ 0x54
		memcpy(data,&RxBuff[7],data_length);
 80037c0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80037c4:	461a      	mov	r2, r3
 80037c6:	495e      	ldr	r1, [pc, #376]	@ (8003940 <HAL_UARTEx_RxEventCallback+0x2fc>)
 80037c8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80037ca:	f00c f8b5 	bl	800f938 <memcpy>

		switch (cmd_id) {
 80037ce:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80037d2:	f240 4201 	movw	r2, #1025	@ 0x401
 80037d6:	4293      	cmp	r3, r2
 80037d8:	f000 8772 	beq.w	80046c0 <HAL_UARTEx_RxEventCallback+0x107c>
 80037dc:	f240 4201 	movw	r2, #1025	@ 0x401
 80037e0:	4293      	cmp	r3, r2
 80037e2:	f300 8779 	bgt.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 80037e6:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 80037ea:	f280 8775 	bge.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 80037ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80037f2:	dc1c      	bgt.n	800382e <HAL_UARTEx_RxEventCallback+0x1ea>
 80037f4:	f240 220e 	movw	r2, #526	@ 0x20e
 80037f8:	4293      	cmp	r3, r2
 80037fa:	f300 876d 	bgt.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 80037fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003802:	dc2b      	bgt.n	800385c <HAL_UARTEx_RxEventCallback+0x218>
 8003804:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8003808:	f280 8766 	bge.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 800380c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003810:	dc48      	bgt.n	80038a4 <HAL_UARTEx_RxEventCallback+0x260>
 8003812:	2b03      	cmp	r3, #3
 8003814:	f000 80db 	beq.w	80039ce <HAL_UARTEx_RxEventCallback+0x38a>
 8003818:	2b03      	cmp	r3, #3
 800381a:	f300 875d 	bgt.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 800381e:	2b01      	cmp	r3, #1
 8003820:	f000 8090 	beq.w	8003944 <HAL_UARTEx_RxEventCallback+0x300>
 8003824:	2b02      	cmp	r3, #2
 8003826:	f000 80c7 	beq.w	80039b8 <HAL_UARTEx_RxEventCallback+0x374>
 800382a:	f000 bf55 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 800382e:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 8003832:	2b06      	cmp	r3, #6
 8003834:	f200 8750 	bhi.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 8003838:	a201      	add	r2, pc, #4	@ (adr r2, 8003840 <HAL_UARTEx_RxEventCallback+0x1fc>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	080046d9 	.word	0x080046d9
 8003844:	0800431d 	.word	0x0800431d
 8003848:	08004343 	.word	0x08004343
 800384c:	080043b1 	.word	0x080043b1
 8003850:	080046d9 	.word	0x080046d9
 8003854:	080046d9 	.word	0x080046d9
 8003858:	0800460d 	.word	0x0800460d
 800385c:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8003860:	2b0d      	cmp	r3, #13
 8003862:	f200 8739 	bhi.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 8003866:	a201      	add	r2, pc, #4	@ (adr r2, 800386c <HAL_UARTEx_RxEventCallback+0x228>)
 8003868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800386c:	08003ced 	.word	0x08003ced
 8003870:	08003dfb 	.word	0x08003dfb
 8003874:	08003e43 	.word	0x08003e43
 8003878:	08003e87 	.word	0x08003e87
 800387c:	080046d9 	.word	0x080046d9
 8003880:	08003ee9 	.word	0x08003ee9
 8003884:	08003f27 	.word	0x08003f27
 8003888:	08003f85 	.word	0x08003f85
 800388c:	08003fbb 	.word	0x08003fbb
 8003890:	08003fd1 	.word	0x08003fd1
 8003894:	08004005 	.word	0x08004005
 8003898:	080040bd 	.word	0x080040bd
 800389c:	0800415d 	.word	0x0800415d
 80038a0:	080042df 	.word	0x080042df
 80038a4:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80038a8:	2b20      	cmp	r3, #32
 80038aa:	f200 8715 	bhi.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 80038ae:	a201      	add	r2, pc, #4	@ (adr r2, 80038b4 <HAL_UARTEx_RxEventCallback+0x270>)
 80038b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b4:	08003af1 	.word	0x08003af1
 80038b8:	080046d9 	.word	0x080046d9
 80038bc:	080046d9 	.word	0x080046d9
 80038c0:	08003c4d 	.word	0x08003c4d
 80038c4:	08003c7f 	.word	0x08003c7f
 80038c8:	080046d9 	.word	0x080046d9
 80038cc:	080046d9 	.word	0x080046d9
 80038d0:	080046d9 	.word	0x080046d9
 80038d4:	080046d9 	.word	0x080046d9
 80038d8:	080046d9 	.word	0x080046d9
 80038dc:	080046d9 	.word	0x080046d9
 80038e0:	080046d9 	.word	0x080046d9
 80038e4:	080046d9 	.word	0x080046d9
 80038e8:	080046d9 	.word	0x080046d9
 80038ec:	080046d9 	.word	0x080046d9
 80038f0:	080046d9 	.word	0x080046d9
 80038f4:	080046d9 	.word	0x080046d9
 80038f8:	080046d9 	.word	0x080046d9
 80038fc:	080046d9 	.word	0x080046d9
 8003900:	080046d9 	.word	0x080046d9
 8003904:	080046d9 	.word	0x080046d9
 8003908:	080046d9 	.word	0x080046d9
 800390c:	080046d9 	.word	0x080046d9
 8003910:	080046d9 	.word	0x080046d9
 8003914:	080046d9 	.word	0x080046d9
 8003918:	080046d9 	.word	0x080046d9
 800391c:	080046d9 	.word	0x080046d9
 8003920:	080046d9 	.word	0x080046d9
 8003924:	080046d9 	.word	0x080046d9
 8003928:	080046d9 	.word	0x080046d9
 800392c:	080046d9 	.word	0x080046d9
 8003930:	080046d9 	.word	0x080046d9
 8003934:	080046d9 	.word	0x080046d9
 8003938:	20000694 	.word	0x20000694
 800393c:	2000002a 	.word	0x2000002a
 8003940:	2000069b 	.word	0x2000069b
			case GAME_STATUS_HEADER : {
				game_status.game_type = UART_RM25_getBits(data[0],0,4);
 8003944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2204      	movs	r2, #4
 800394a:	2100      	movs	r1, #0
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fed3 	bl	80046f8 <UART_RM25_getBits>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	4b63      	ldr	r3, [pc, #396]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003958:	701a      	strb	r2, [r3, #0]
				game_status.current_stage = UART_RM25_getBits(data[0],4,4);
 800395a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2204      	movs	r2, #4
 8003960:	2104      	movs	r1, #4
 8003962:	4618      	mov	r0, r3
 8003964:	f000 fec8 	bl	80046f8 <UART_RM25_getBits>
 8003968:	4603      	mov	r3, r0
 800396a:	461a      	mov	r2, r3
 800396c:	4b5d      	ldr	r3, [pc, #372]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 800396e:	705a      	strb	r2, [r3, #1]
				memcpy(&game_status.stage_remain_time,&data[1],2);
 8003970:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003972:	3301      	adds	r3, #1
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b29a      	uxth	r2, r3
 8003978:	4b5a      	ldr	r3, [pc, #360]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 800397a:	809a      	strh	r2, [r3, #4]
				memcpy(&game_status.SyncTimeStamp,&data[3],8);
 800397c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800397e:	3303      	adds	r3, #3
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003988:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800398c:	4955      	ldr	r1, [pc, #340]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 800398e:	e9c1 2302 	strd	r2, r3, [r1, #8]
				GAME_STATUS_RxEventCallback(game_status.game_type,game_status.current_stage,game_status.game_progress,game_status.stage_remain_time,game_status.SyncTimeStamp);
 8003992:	4b54      	ldr	r3, [pc, #336]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003994:	7818      	ldrb	r0, [r3, #0]
 8003996:	4b53      	ldr	r3, [pc, #332]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8003998:	7859      	ldrb	r1, [r3, #1]
 800399a:	4b52      	ldr	r3, [pc, #328]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 800399c:	789c      	ldrb	r4, [r3, #2]
 800399e:	4b51      	ldr	r3, [pc, #324]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 80039a0:	889d      	ldrh	r5, [r3, #4]
 80039a2:	4b50      	ldr	r3, [pc, #320]	@ (8003ae4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 80039a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80039a8:	e9cd 2300 	strd	r2, r3, [sp]
 80039ac:	462b      	mov	r3, r5
 80039ae:	4622      	mov	r2, r4
 80039b0:	f7fe f852 	bl	8001a58 <GAME_STATUS_RxEventCallback>
				break;
 80039b4:	f000 be90 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case GAME_RESULT_HEADER : {
				game_result.winner=data[0];
 80039b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ba:	781a      	ldrb	r2, [r3, #0]
 80039bc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ae8 <HAL_UARTEx_RxEventCallback+0x4a4>)
 80039be:	701a      	strb	r2, [r3, #0]
				GAME_RESULT_RxEventCallback(game_result.winner);
 80039c0:	4b49      	ldr	r3, [pc, #292]	@ (8003ae8 <HAL_UARTEx_RxEventCallback+0x4a4>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fec4 	bl	8004752 <GAME_RESULT_RxEventCallback>
				break;
 80039ca:	f000 be85 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_HP_HEADER : {
				memcpy(&robot_HP.red_1_robot_HP,&data[0],2);
 80039ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039d0:	881b      	ldrh	r3, [r3, #0]
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	4b45      	ldr	r3, [pc, #276]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 80039d6:	801a      	strh	r2, [r3, #0]
				memcpy(&robot_HP.red_2_robot_HP,&data[2],2);
 80039d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039da:	3302      	adds	r3, #2
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	b29a      	uxth	r2, r3
 80039e0:	4b42      	ldr	r3, [pc, #264]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 80039e2:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_HP.red_3_robot_HP,&data[4],2);
 80039e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039e6:	3304      	adds	r3, #4
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	4b3f      	ldr	r3, [pc, #252]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 80039ee:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_HP.red_4_robot_HP,&data[6],2);
 80039f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039f2:	3306      	adds	r3, #6
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	4b3c      	ldr	r3, [pc, #240]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 80039fa:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_HP.red_7_robot_HP,&data[10],2);
 80039fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fe:	330a      	adds	r3, #10
 8003a00:	881b      	ldrh	r3, [r3, #0]
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a06:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_HP.red_outpost_HP,&data[12],2);
 8003a08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a0a:	330c      	adds	r3, #12
 8003a0c:	881b      	ldrh	r3, [r3, #0]
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	4b36      	ldr	r3, [pc, #216]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a12:	815a      	strh	r2, [r3, #10]
				memcpy(&robot_HP.red_base_HP,&data[14],2);
 8003a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a16:	330e      	adds	r3, #14
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	4b33      	ldr	r3, [pc, #204]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a1e:	819a      	strh	r2, [r3, #12]
				memcpy(&robot_HP.blue_1_robot_HP,&data[16],2);
 8003a20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a22:	3310      	adds	r3, #16
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	4b30      	ldr	r3, [pc, #192]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a2a:	81da      	strh	r2, [r3, #14]
				memcpy(&robot_HP.blue_2_robot_HP,&data[18],2);
 8003a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2e:	3312      	adds	r3, #18
 8003a30:	881b      	ldrh	r3, [r3, #0]
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	4b2d      	ldr	r3, [pc, #180]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a36:	821a      	strh	r2, [r3, #16]
				memcpy(&robot_HP.blue_3_robot_HP,&data[20],2);
 8003a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a3a:	3314      	adds	r3, #20
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	4b2a      	ldr	r3, [pc, #168]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a42:	825a      	strh	r2, [r3, #18]
				memcpy(&robot_HP.blue_4_robot_HP,&data[22],2);
 8003a44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a46:	3316      	adds	r3, #22
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	4b27      	ldr	r3, [pc, #156]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a4e:	829a      	strh	r2, [r3, #20]
				memcpy(&robot_HP.blue_7_robot_HP,&data[26],2);
 8003a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a52:	331a      	adds	r3, #26
 8003a54:	881b      	ldrh	r3, [r3, #0]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	4b24      	ldr	r3, [pc, #144]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a5a:	82da      	strh	r2, [r3, #22]
				memcpy(&robot_HP.blue_outpost_HP,&data[28],2);
 8003a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a5e:	331c      	adds	r3, #28
 8003a60:	881b      	ldrh	r3, [r3, #0]
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	4b21      	ldr	r3, [pc, #132]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a66:	831a      	strh	r2, [r3, #24]
				memcpy(&robot_HP.blue_base_HP,&data[30],2);
 8003a68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a6a:	331e      	adds	r3, #30
 8003a6c:	881b      	ldrh	r3, [r3, #0]
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	4b1e      	ldr	r3, [pc, #120]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a72:	835a      	strh	r2, [r3, #26]
				ROBOT_HP_HEADER_RxEventCallback(robot_HP.red_1_robot_HP, robot_HP.red_2_robot_HP, robot_HP.red_3_robot_HP, robot_HP.red_4_robot_HP, robot_HP.red_7_robot_HP, robot_HP.red_outpost_HP, robot_HP.red_base_HP, robot_HP.blue_1_robot_HP, robot_HP.blue_2_robot_HP, robot_HP.blue_3_robot_HP, robot_HP.blue_4_robot_HP, robot_HP.blue_7_robot_HP, robot_HP.blue_outpost_HP, robot_HP.blue_base_HP);
 8003a74:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a76:	f8b3 c000 	ldrh.w	ip, [r3]
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a7c:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8003a80:	4b1a      	ldr	r3, [pc, #104]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a82:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8003a86:	4b19      	ldr	r3, [pc, #100]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a88:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8003a8c:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a8e:	8918      	ldrh	r0, [r3, #8]
 8003a90:	4b16      	ldr	r3, [pc, #88]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a92:	895c      	ldrh	r4, [r3, #10]
 8003a94:	4b15      	ldr	r3, [pc, #84]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a96:	899d      	ldrh	r5, [r3, #12]
 8003a98:	4b14      	ldr	r3, [pc, #80]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a9a:	89de      	ldrh	r6, [r3, #14]
 8003a9c:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003a9e:	8a1b      	ldrh	r3, [r3, #16]
 8003aa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003aa2:	4b12      	ldr	r3, [pc, #72]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003aa4:	8a5a      	ldrh	r2, [r3, #18]
 8003aa6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003aa8:	4b10      	ldr	r3, [pc, #64]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003aaa:	8a99      	ldrh	r1, [r3, #20]
 8003aac:	6279      	str	r1, [r7, #36]	@ 0x24
 8003aae:	4b0f      	ldr	r3, [pc, #60]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003ab0:	8ad9      	ldrh	r1, [r3, #22]
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003ab4:	8b1a      	ldrh	r2, [r3, #24]
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8003aec <HAL_UARTEx_RxEventCallback+0x4a8>)
 8003ab8:	8b5b      	ldrh	r3, [r3, #26]
 8003aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8003abc:	9208      	str	r2, [sp, #32]
 8003abe:	9107      	str	r1, [sp, #28]
 8003ac0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ac2:	9106      	str	r1, [sp, #24]
 8003ac4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ac6:	9205      	str	r2, [sp, #20]
 8003ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aca:	9304      	str	r3, [sp, #16]
 8003acc:	9603      	str	r6, [sp, #12]
 8003ace:	9502      	str	r5, [sp, #8]
 8003ad0:	9401      	str	r4, [sp, #4]
 8003ad2:	9000      	str	r0, [sp, #0]
 8003ad4:	464b      	mov	r3, r9
 8003ad6:	4642      	mov	r2, r8
 8003ad8:	4671      	mov	r1, lr
 8003ada:	4660      	mov	r0, ip
 8003adc:	f000 fe44 	bl	8004768 <ROBOT_HP_HEADER_RxEventCallback>
				break;
 8003ae0:	f000 bdfa 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 8003ae4:	20000798 	.word	0x20000798
 8003ae8:	200007a8 	.word	0x200007a8
 8003aec:	200007ac 	.word	0x200007ac
			}
			case EVENT_DATA_HEADER : {
				event_data.resupply_zone_1 = UART_RM25_getBits(data[0],0,1);
 8003af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2201      	movs	r2, #1
 8003af6:	2100      	movs	r1, #0
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fdfd 	bl	80046f8 <UART_RM25_getBits>
 8003afe:	4603      	mov	r3, r0
 8003b00:	461a      	mov	r2, r3
 8003b02:	4b77      	ldr	r3, [pc, #476]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003b04:	701a      	strb	r2, [r3, #0]
				event_data.resupply_zone_2 = UART_RM25_getBits(data[0],1,1);
 8003b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fdf2 	bl	80046f8 <UART_RM25_getBits>
 8003b14:	4603      	mov	r3, r0
 8003b16:	461a      	mov	r2, r3
 8003b18:	4b71      	ldr	r3, [pc, #452]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003b1a:	705a      	strb	r2, [r3, #1]
				event_data.resupply_zone_3 = UART_RM25_getBits(data[0],2,1);
 8003b1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2201      	movs	r2, #1
 8003b22:	2102      	movs	r1, #2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f000 fde7 	bl	80046f8 <UART_RM25_getBits>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003b30:	709a      	strb	r2, [r3, #2]
				event_data.small_power_rune = UART_RM25_getBits(data[0],3,1);
 8003b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2201      	movs	r2, #1
 8003b38:	2103      	movs	r1, #3
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fddc 	bl	80046f8 <UART_RM25_getBits>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	4b66      	ldr	r3, [pc, #408]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003b46:	70da      	strb	r2, [r3, #3]
				event_data.large_power_rune = UART_RM25_getBits(data[0],4,1);
 8003b48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	2104      	movs	r1, #4
 8003b50:	4618      	mov	r0, r3
 8003b52:	f000 fdd1 	bl	80046f8 <UART_RM25_getBits>
 8003b56:	4603      	mov	r3, r0
 8003b58:	461a      	mov	r2, r3
 8003b5a:	4b61      	ldr	r3, [pc, #388]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003b5c:	711a      	strb	r2, [r3, #4]
				event_data.central_elevated_ground = UART_RM25_getBits(data[0],5,2);
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2202      	movs	r2, #2
 8003b64:	2105      	movs	r1, #5
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fdc6 	bl	80046f8 <UART_RM25_getBits>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	461a      	mov	r2, r3
 8003b70:	4b5b      	ldr	r3, [pc, #364]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003b72:	715a      	strb	r2, [r3, #5]
				event_data.trapezoid_elevated_ground = UART_RM25_getBits(data[0],7,1) | (UART_RM25_getBits(data[1],0,1)<<1);
 8003b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	2107      	movs	r1, #7
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f000 fdbb 	bl	80046f8 <UART_RM25_getBits>
 8003b82:	4603      	mov	r3, r0
 8003b84:	b25c      	sxtb	r4, r3
 8003b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b88:	785b      	ldrb	r3, [r3, #1]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f000 fdb2 	bl	80046f8 <UART_RM25_getBits>
 8003b94:	4603      	mov	r3, r0
 8003b96:	b25b      	sxtb	r3, r3
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	b25b      	sxtb	r3, r3
 8003b9c:	4323      	orrs	r3, r4
 8003b9e:	b25b      	sxtb	r3, r3
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b4f      	ldr	r3, [pc, #316]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003ba4:	719a      	strb	r2, [r3, #6]
				uint8_t last_dart_hit[] = {UART_RM25_getBits(data[1],1,8),UART_RM25_getBits(data[2],0,2)};
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ba8:	785b      	ldrb	r3, [r3, #1]
 8003baa:	2208      	movs	r2, #8
 8003bac:	2101      	movs	r1, #1
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 fda2 	bl	80046f8 <UART_RM25_getBits>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8003bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bbc:	789b      	ldrb	r3, [r3, #2]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f000 fd98 	bl	80046f8 <UART_RM25_getBits>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
				memcpy(&event_data.last_dart_hit,last_dart_hit,2);
 8003bce:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003bd2:	4b43      	ldr	r3, [pc, #268]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003bd4:	811a      	strh	r2, [r3, #8]
				event_data.last_dart_hit_target = UART_RM25_getBits(data[2],2,3);
 8003bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bd8:	789b      	ldrb	r3, [r3, #2]
 8003bda:	2203      	movs	r2, #3
 8003bdc:	2102      	movs	r1, #2
 8003bde:	4618      	mov	r0, r3
 8003be0:	f000 fd8a 	bl	80046f8 <UART_RM25_getBits>
 8003be4:	4603      	mov	r3, r0
 8003be6:	461a      	mov	r2, r3
 8003be8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003bea:	729a      	strb	r2, [r3, #10]
				event_data.central_buff = UART_RM25_getBits(data[2],5,2);
 8003bec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bee:	789b      	ldrb	r3, [r3, #2]
 8003bf0:	2202      	movs	r2, #2
 8003bf2:	2105      	movs	r1, #5
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fd7f 	bl	80046f8 <UART_RM25_getBits>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c00:	72da      	strb	r2, [r3, #11]
				EVENT_DATA_RxEventCallback(event_data.resupply_zone_1, event_data.resupply_zone_2, event_data.resupply_zone_3, event_data.small_power_rune, event_data.large_power_rune, event_data.central_elevated_ground, event_data.trapezoid_elevated_ground, event_data.last_dart_hit, event_data.last_dart_hit_target, event_data.central_buff);
 8003c02:	4b37      	ldr	r3, [pc, #220]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c04:	781e      	ldrb	r6, [r3, #0]
 8003c06:	4b36      	ldr	r3, [pc, #216]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c08:	f893 c001 	ldrb.w	ip, [r3, #1]
 8003c0c:	4b34      	ldr	r3, [pc, #208]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c0e:	f893 e002 	ldrb.w	lr, [r3, #2]
 8003c12:	4b33      	ldr	r3, [pc, #204]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c14:	f893 8003 	ldrb.w	r8, [r3, #3]
 8003c18:	4b31      	ldr	r3, [pc, #196]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c1a:	791b      	ldrb	r3, [r3, #4]
 8003c1c:	4a30      	ldr	r2, [pc, #192]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c1e:	7952      	ldrb	r2, [r2, #5]
 8003c20:	492f      	ldr	r1, [pc, #188]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c22:	7989      	ldrb	r1, [r1, #6]
 8003c24:	482e      	ldr	r0, [pc, #184]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c26:	8900      	ldrh	r0, [r0, #8]
 8003c28:	4c2d      	ldr	r4, [pc, #180]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c2a:	7aa4      	ldrb	r4, [r4, #10]
 8003c2c:	4d2c      	ldr	r5, [pc, #176]	@ (8003ce0 <HAL_UARTEx_RxEventCallback+0x69c>)
 8003c2e:	7aed      	ldrb	r5, [r5, #11]
 8003c30:	9505      	str	r5, [sp, #20]
 8003c32:	9404      	str	r4, [sp, #16]
 8003c34:	9003      	str	r0, [sp, #12]
 8003c36:	9102      	str	r1, [sp, #8]
 8003c38:	9201      	str	r2, [sp, #4]
 8003c3a:	9300      	str	r3, [sp, #0]
 8003c3c:	4643      	mov	r3, r8
 8003c3e:	4672      	mov	r2, lr
 8003c40:	4661      	mov	r1, ip
 8003c42:	4630      	mov	r0, r6
 8003c44:	f000 fda4 	bl	8004790 <EVENT_DATA_RxEventCallback>
				break;
 8003c48:	f000 bd46 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case REFEREE_WARNING_HEADER : {
				memcpy(&referee_warning.penalty,&data[0],1);
 8003c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c4e:	781a      	ldrb	r2, [r3, #0]
 8003c50:	4b24      	ldr	r3, [pc, #144]	@ (8003ce4 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003c52:	701a      	strb	r2, [r3, #0]
				memcpy(&referee_warning.offending_robot_id,&data[1],1);
 8003c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c56:	3301      	adds	r3, #1
 8003c58:	781a      	ldrb	r2, [r3, #0]
 8003c5a:	4b22      	ldr	r3, [pc, #136]	@ (8003ce4 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003c5c:	705a      	strb	r2, [r3, #1]
				memcpy(&referee_warning.count,&data[2],1);
 8003c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c60:	3302      	adds	r3, #2
 8003c62:	781a      	ldrb	r2, [r3, #0]
 8003c64:	4b1f      	ldr	r3, [pc, #124]	@ (8003ce4 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003c66:	709a      	strb	r2, [r3, #2]
				REFEREE_WARNING_RxEventCallback(referee_warning.penalty,referee_warning.offending_robot_id,referee_warning.count);
 8003c68:	4b1e      	ldr	r3, [pc, #120]	@ (8003ce4 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce4 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003c6e:	7851      	ldrb	r1, [r2, #1]
 8003c70:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce4 <HAL_UARTEx_RxEventCallback+0x6a0>)
 8003c72:	7892      	ldrb	r2, [r2, #2]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f000 fd9f 	bl	80047b8 <REFEREE_WARNING_RxEventCallback>
				break;
 8003c7a:	f000 bd2d 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_INFO_HEADER : {
				memcpy(&dart_info.dart_remaining_time,&data[0],1);
 8003c7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c80:	781a      	ldrb	r2, [r3, #0]
 8003c82:	4b19      	ldr	r3, [pc, #100]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003c84:	701a      	strb	r2, [r3, #0]
				dart_info.last_dart_hit_target = UART_RM25_getBits(data[1],0,3);
 8003c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c88:	785b      	ldrb	r3, [r3, #1]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fd32 	bl	80046f8 <UART_RM25_getBits>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461a      	mov	r2, r3
 8003c98:	4b13      	ldr	r3, [pc, #76]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003c9a:	705a      	strb	r2, [r3, #1]
				dart_info.last_target_hit_count = UART_RM25_getBits(data[1],3,3);
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9e:	785b      	ldrb	r3, [r3, #1]
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	2103      	movs	r1, #3
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fd27 	bl	80046f8 <UART_RM25_getBits>
 8003caa:	4603      	mov	r3, r0
 8003cac:	461a      	mov	r2, r3
 8003cae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003cb0:	709a      	strb	r2, [r3, #2]
				dart_info.current_dart_target = UART_RM25_getBits(data[1],6,2);
 8003cb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cb4:	785b      	ldrb	r3, [r3, #1]
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	2106      	movs	r1, #6
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 fd1c 	bl	80046f8 <UART_RM25_getBits>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	4b08      	ldr	r3, [pc, #32]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003cc6:	70da      	strb	r2, [r3, #3]
				DART_INFO_RxEventCallback(dart_info.dart_remaining_time,dart_info.last_dart_hit_target,dart_info.last_target_hit_count, dart_info.current_dart_target);
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003cca:	7818      	ldrb	r0, [r3, #0]
 8003ccc:	4b06      	ldr	r3, [pc, #24]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003cce:	7859      	ldrb	r1, [r3, #1]
 8003cd0:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003cd2:	789a      	ldrb	r2, [r3, #2]
 8003cd4:	4b04      	ldr	r3, [pc, #16]	@ (8003ce8 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8003cd6:	78db      	ldrb	r3, [r3, #3]
 8003cd8:	f000 fd7d 	bl	80047d6 <DART_INFO_RxEventCallback>
				break;
 8003cdc:	f000 bcfc 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 8003ce0:	200007c8 	.word	0x200007c8
 8003ce4:	200007d4 	.word	0x200007d4
 8003ce8:	200007d8 	.word	0x200007d8
			}
			case ROBOT_STATUS_HEADER : {
				memcpy(&robot_status.robot_id,&data[0],1);
 8003cec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	4b9e      	ldr	r3, [pc, #632]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003cf2:	701a      	strb	r2, [r3, #0]
				memcpy(&robot_status.robot_level,&data[1],1);
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	781a      	ldrb	r2, [r3, #0]
 8003cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003cfc:	705a      	strb	r2, [r3, #1]
				memcpy(&robot_status.current_HP,&data[2],2);
 8003cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d00:	3302      	adds	r3, #2
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	4b99      	ldr	r3, [pc, #612]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003d08:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_status.maximum_HP,&data[4],2);
 8003d0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	881b      	ldrh	r3, [r3, #0]
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	4b96      	ldr	r3, [pc, #600]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003d14:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_status.shooter_barrel_cooling_value,&data[6],2);
 8003d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d18:	3306      	adds	r3, #6
 8003d1a:	881b      	ldrh	r3, [r3, #0]
 8003d1c:	b29a      	uxth	r2, r3
 8003d1e:	4b93      	ldr	r3, [pc, #588]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003d20:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_status.shooter_barrel_heat_limit,&data[8],2);
 8003d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d24:	3308      	adds	r3, #8
 8003d26:	881b      	ldrh	r3, [r3, #0]
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	4b90      	ldr	r3, [pc, #576]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003d2c:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_status.chassis_power_limit,&data[10],2);
 8003d2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d30:	330a      	adds	r3, #10
 8003d32:	881b      	ldrh	r3, [r3, #0]
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	4b8d      	ldr	r3, [pc, #564]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003d38:	815a      	strh	r2, [r3, #10]
				robot_status.power_management_gimbal_output = UART_RM25_getBits(data[12],0,1);
 8003d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d3c:	7b1b      	ldrb	r3, [r3, #12]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	2100      	movs	r1, #0
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fcd8 	bl	80046f8 <UART_RM25_getBits>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	b2d9      	uxtb	r1, r3
 8003d50:	4a86      	ldr	r2, [pc, #536]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003d52:	7b13      	ldrb	r3, [r2, #12]
 8003d54:	f361 0300 	bfi	r3, r1, #0, #1
 8003d58:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_chassis_output = UART_RM25_getBits(data[12],1,1);
 8003d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d5c:	7b1b      	ldrb	r3, [r3, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	2101      	movs	r1, #1
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fcc8 	bl	80046f8 <UART_RM25_getBits>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	b2d9      	uxtb	r1, r3
 8003d70:	4a7e      	ldr	r2, [pc, #504]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003d72:	7b13      	ldrb	r3, [r2, #12]
 8003d74:	f361 0341 	bfi	r3, r1, #1, #1
 8003d78:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_shooter_output = UART_RM25_getBits(data[12],2,1);
 8003d7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d7c:	7b1b      	ldrb	r3, [r3, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	2102      	movs	r1, #2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fcb8 	bl	80046f8 <UART_RM25_getBits>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	b2d9      	uxtb	r1, r3
 8003d90:	4a76      	ldr	r2, [pc, #472]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003d92:	7b13      	ldrb	r3, [r2, #12]
 8003d94:	f361 0382 	bfi	r3, r1, #2, #1
 8003d98:	7313      	strb	r3, [r2, #12]
				ROBOT_STATUS_RxEventCallback(robot_status.robot_id, robot_status.robot_level, robot_status.current_HP, robot_status.maximum_HP, robot_status.shooter_barrel_cooling_value, robot_status.shooter_barrel_heat_limit, robot_status.chassis_power_limit, robot_status.power_management_gimbal_output, robot_status.power_management_chassis_output, robot_status.power_management_shooter_output);
 8003d9a:	4b74      	ldr	r3, [pc, #464]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003d9c:	781c      	ldrb	r4, [r3, #0]
 8003d9e:	4b73      	ldr	r3, [pc, #460]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003da0:	785d      	ldrb	r5, [r3, #1]
 8003da2:	4b72      	ldr	r3, [pc, #456]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003da4:	885e      	ldrh	r6, [r3, #2]
 8003da6:	4b71      	ldr	r3, [pc, #452]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003da8:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8003dac:	4b6f      	ldr	r3, [pc, #444]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003dae:	88db      	ldrh	r3, [r3, #6]
 8003db0:	4a6e      	ldr	r2, [pc, #440]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003db2:	8912      	ldrh	r2, [r2, #8]
 8003db4:	496d      	ldr	r1, [pc, #436]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003db6:	8949      	ldrh	r1, [r1, #10]
 8003db8:	486c      	ldr	r0, [pc, #432]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003dba:	7b00      	ldrb	r0, [r0, #12]
 8003dbc:	f3c0 0000 	ubfx	r0, r0, #0, #1
 8003dc0:	b2c0      	uxtb	r0, r0
 8003dc2:	6338      	str	r0, [r7, #48]	@ 0x30
 8003dc4:	4869      	ldr	r0, [pc, #420]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003dc6:	7b00      	ldrb	r0, [r0, #12]
 8003dc8:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8003dcc:	b2c0      	uxtb	r0, r0
 8003dce:	62b8      	str	r0, [r7, #40]	@ 0x28
 8003dd0:	4866      	ldr	r0, [pc, #408]	@ (8003f6c <HAL_UARTEx_RxEventCallback+0x928>)
 8003dd2:	7b00      	ldrb	r0, [r0, #12]
 8003dd4:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003dd8:	b2c0      	uxtb	r0, r0
 8003dda:	9005      	str	r0, [sp, #20]
 8003ddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003dde:	9004      	str	r0, [sp, #16]
 8003de0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003de2:	9003      	str	r0, [sp, #12]
 8003de4:	9102      	str	r1, [sp, #8]
 8003de6:	9201      	str	r2, [sp, #4]
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	4663      	mov	r3, ip
 8003dec:	4632      	mov	r2, r6
 8003dee:	4629      	mov	r1, r5
 8003df0:	4620      	mov	r0, r4
 8003df2:	f7fd fe5f 	bl	8001ab4 <ROBOT_STATUS_RxEventCallback>
				break;
 8003df6:	f000 bc6f 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case POWER_HEAT_DATA_HEADER : {
				memcpy(&power_heat_data.buffer_energy,&data[8],2);
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003dfc:	3308      	adds	r3, #8
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	4b5b      	ldr	r3, [pc, #364]	@ (8003f70 <HAL_UARTEx_RxEventCallback+0x92c>)
 8003e04:	801a      	strh	r2, [r3, #0]
				memcpy(&power_heat_data.shooter_17mm_1_barrel_heat,&data[10],2);
 8003e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e08:	330a      	adds	r3, #10
 8003e0a:	881b      	ldrh	r3, [r3, #0]
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	4b58      	ldr	r3, [pc, #352]	@ (8003f70 <HAL_UARTEx_RxEventCallback+0x92c>)
 8003e10:	805a      	strh	r2, [r3, #2]
				memcpy(&power_heat_data.shooter_17mm_2_barrel_heat,&data[12],2);
 8003e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e14:	330c      	adds	r3, #12
 8003e16:	881b      	ldrh	r3, [r3, #0]
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	4b55      	ldr	r3, [pc, #340]	@ (8003f70 <HAL_UARTEx_RxEventCallback+0x92c>)
 8003e1c:	809a      	strh	r2, [r3, #4]
				memcpy(&power_heat_data.shooter_42mm_barrel_heat,&data[14],2);
 8003e1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e20:	330e      	adds	r3, #14
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	4b52      	ldr	r3, [pc, #328]	@ (8003f70 <HAL_UARTEx_RxEventCallback+0x92c>)
 8003e28:	80da      	strh	r2, [r3, #6]
				POWER_HEAT_DATA_RxEventCallback(power_heat_data.buffer_energy, power_heat_data.shooter_17mm_1_barrel_heat, power_heat_data.shooter_17mm_2_barrel_heat, power_heat_data.shooter_42mm_barrel_heat);
 8003e2a:	4b51      	ldr	r3, [pc, #324]	@ (8003f70 <HAL_UARTEx_RxEventCallback+0x92c>)
 8003e2c:	8818      	ldrh	r0, [r3, #0]
 8003e2e:	4b50      	ldr	r3, [pc, #320]	@ (8003f70 <HAL_UARTEx_RxEventCallback+0x92c>)
 8003e30:	8859      	ldrh	r1, [r3, #2]
 8003e32:	4b4f      	ldr	r3, [pc, #316]	@ (8003f70 <HAL_UARTEx_RxEventCallback+0x92c>)
 8003e34:	889a      	ldrh	r2, [r3, #4]
 8003e36:	4b4e      	ldr	r3, [pc, #312]	@ (8003f70 <HAL_UARTEx_RxEventCallback+0x92c>)
 8003e38:	88db      	ldrh	r3, [r3, #6]
 8003e3a:	f7fd fe7f 	bl	8001b3c <POWER_HEAT_DATA_RxEventCallback>
				break;
 8003e3e:	f000 bc4b 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_POSITION_HEADER : {
				memcpy(&robot_position.x,&data[0],4);
 8003e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	4b4a      	ldr	r3, [pc, #296]	@ (8003f74 <HAL_UARTEx_RxEventCallback+0x930>)
 8003e4a:	601a      	str	r2, [r3, #0]
				memcpy(&robot_position.y,&data[0],4);
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b48      	ldr	r3, [pc, #288]	@ (8003f74 <HAL_UARTEx_RxEventCallback+0x930>)
 8003e54:	605a      	str	r2, [r3, #4]
				memcpy(&robot_position.angle,&data[0],4);
 8003e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	4b45      	ldr	r3, [pc, #276]	@ (8003f74 <HAL_UARTEx_RxEventCallback+0x930>)
 8003e5e:	609a      	str	r2, [r3, #8]
				ROBOT_POSITION_RxEventCallback(robot_position.x, robot_position.y, robot_position.angle);
 8003e60:	4b44      	ldr	r3, [pc, #272]	@ (8003f74 <HAL_UARTEx_RxEventCallback+0x930>)
 8003e62:	edd3 7a00 	vldr	s15, [r3]
 8003e66:	4b43      	ldr	r3, [pc, #268]	@ (8003f74 <HAL_UARTEx_RxEventCallback+0x930>)
 8003e68:	ed93 7a01 	vldr	s14, [r3, #4]
 8003e6c:	4b41      	ldr	r3, [pc, #260]	@ (8003f74 <HAL_UARTEx_RxEventCallback+0x930>)
 8003e6e:	edd3 6a02 	vldr	s13, [r3, #8]
 8003e72:	eeb0 1a66 	vmov.f32	s2, s13
 8003e76:	eef0 0a47 	vmov.f32	s1, s14
 8003e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e7e:	f000 fcbe 	bl	80047fe <ROBOT_POSITION_RxEventCallback>
				break;
 8003e82:	f000 bc29 	b.w	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case BUFF_HEADER : {
				memcpy(&buffs.recovery_buff,&data[0],1);
 8003e86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e88:	781a      	ldrb	r2, [r3, #0]
 8003e8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003e8c:	701a      	strb	r2, [r3, #0]
				memcpy(&buffs.cooling_buff,&data[1],1);
 8003e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e90:	3301      	adds	r3, #1
 8003e92:	781a      	ldrb	r2, [r3, #0]
 8003e94:	4b38      	ldr	r3, [pc, #224]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003e96:	705a      	strb	r2, [r3, #1]
				memcpy(&buffs.defence_buff,&data[2],1);
 8003e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	781a      	ldrb	r2, [r3, #0]
 8003e9e:	4b36      	ldr	r3, [pc, #216]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003ea0:	709a      	strb	r2, [r3, #2]
				memcpy(&buffs.vulnerability_buff,&data[3],1);
 8003ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ea4:	3303      	adds	r3, #3
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	4b33      	ldr	r3, [pc, #204]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003eaa:	70da      	strb	r2, [r3, #3]
				memcpy(&buffs.attack_buff,&data[4],2);
 8003eac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eae:	3304      	adds	r3, #4
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	4b30      	ldr	r3, [pc, #192]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003eb6:	809a      	strh	r2, [r3, #4]
				memcpy(&buffs.remaining_energy,&data[5],1);
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eba:	3305      	adds	r3, #5
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	4b2e      	ldr	r3, [pc, #184]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003ec0:	719a      	strb	r2, [r3, #6]
				BUFF_RxEventCallback(buffs.recovery_buff, buffs.cooling_buff, buffs.defence_buff, buffs.vulnerability_buff, buffs.attack_buff, buffs.remaining_energy);
 8003ec2:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003ec4:	7818      	ldrb	r0, [r3, #0]
 8003ec6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003ec8:	7859      	ldrb	r1, [r3, #1]
 8003eca:	4b2b      	ldr	r3, [pc, #172]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003ecc:	789c      	ldrb	r4, [r3, #2]
 8003ece:	4b2a      	ldr	r3, [pc, #168]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003ed0:	78dd      	ldrb	r5, [r3, #3]
 8003ed2:	4b29      	ldr	r3, [pc, #164]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003ed4:	889b      	ldrh	r3, [r3, #4]
 8003ed6:	4a28      	ldr	r2, [pc, #160]	@ (8003f78 <HAL_UARTEx_RxEventCallback+0x934>)
 8003ed8:	7992      	ldrb	r2, [r2, #6]
 8003eda:	9201      	str	r2, [sp, #4]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	462b      	mov	r3, r5
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	f000 fc9b 	bl	800481c <BUFF_RxEventCallback>
				break;
 8003ee6:	e3f7      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DAMAGE_DATA_HEADER : {
				damage_data.armor_id = UART_RM25_getBits(data[0],0,4);
 8003ee8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2204      	movs	r2, #4
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fc01 	bl	80046f8 <UART_RM25_getBits>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b20      	ldr	r3, [pc, #128]	@ (8003f7c <HAL_UARTEx_RxEventCallback+0x938>)
 8003efc:	701a      	strb	r2, [r3, #0]
				damage_data.HP_deduction_reason = UART_RM25_getBits(data[0],4,4);
 8003efe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2204      	movs	r2, #4
 8003f04:	2104      	movs	r1, #4
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 fbf6 	bl	80046f8 <UART_RM25_getBits>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	461a      	mov	r2, r3
 8003f10:	4b1a      	ldr	r3, [pc, #104]	@ (8003f7c <HAL_UARTEx_RxEventCallback+0x938>)
 8003f12:	705a      	strb	r2, [r3, #1]
				DAMAGE_SOURCE_RxEventCallback(damage_data.armor_id, damage_data.HP_deduction_reason);
 8003f14:	4b19      	ldr	r3, [pc, #100]	@ (8003f7c <HAL_UARTEx_RxEventCallback+0x938>)
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	4a18      	ldr	r2, [pc, #96]	@ (8003f7c <HAL_UARTEx_RxEventCallback+0x938>)
 8003f1a:	7852      	ldrb	r2, [r2, #1]
 8003f1c:	4611      	mov	r1, r2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 fc90 	bl	8004844 <DAMAGE_SOURCE_RxEventCallback>
				break;
 8003f24:	e3d8      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case PROJECTILE_INFO_HEADER : {
				memcpy(&shoot_data.bullet_type,&data[0],1);
 8003f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f28:	781a      	ldrb	r2, [r3, #0]
 8003f2a:	4b15      	ldr	r3, [pc, #84]	@ (8003f80 <HAL_UARTEx_RxEventCallback+0x93c>)
 8003f2c:	701a      	strb	r2, [r3, #0]
				memcpy(&shoot_data.shooter_number,&data[1],1);
 8003f2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f30:	3301      	adds	r3, #1
 8003f32:	781a      	ldrb	r2, [r3, #0]
 8003f34:	4b12      	ldr	r3, [pc, #72]	@ (8003f80 <HAL_UARTEx_RxEventCallback+0x93c>)
 8003f36:	705a      	strb	r2, [r3, #1]
				memcpy(&shoot_data.launching_frequency,&data[2],1);
 8003f38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f3a:	3302      	adds	r3, #2
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <HAL_UARTEx_RxEventCallback+0x93c>)
 8003f40:	709a      	strb	r2, [r3, #2]
				memcpy(&shoot_data.initial_speed,&data[3],4);
 8003f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f44:	3303      	adds	r3, #3
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f80 <HAL_UARTEx_RxEventCallback+0x93c>)
 8003f4c:	605a      	str	r2, [r3, #4]
				PROJECTILE_INFO_RxEventCallback(shoot_data.bullet_type, shoot_data.shooter_number, shoot_data.launching_frequency,shoot_data.initial_speed);
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f80 <HAL_UARTEx_RxEventCallback+0x93c>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	4a0b      	ldr	r2, [pc, #44]	@ (8003f80 <HAL_UARTEx_RxEventCallback+0x93c>)
 8003f54:	7851      	ldrb	r1, [r2, #1]
 8003f56:	4a0a      	ldr	r2, [pc, #40]	@ (8003f80 <HAL_UARTEx_RxEventCallback+0x93c>)
 8003f58:	7892      	ldrb	r2, [r2, #2]
 8003f5a:	4809      	ldr	r0, [pc, #36]	@ (8003f80 <HAL_UARTEx_RxEventCallback+0x93c>)
 8003f5c:	edd0 7a01 	vldr	s15, [r0, #4]
 8003f60:	eeb0 0a67 	vmov.f32	s0, s15
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fc7b 	bl	8004860 <PROJECTILE_INFO_RxEventCallback>
				break;
 8003f6a:	e3b5      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 8003f6c:	200007dc 	.word	0x200007dc
 8003f70:	200007ec 	.word	0x200007ec
 8003f74:	200007f4 	.word	0x200007f4
 8003f78:	20000800 	.word	0x20000800
 8003f7c:	20000808 	.word	0x20000808
 8003f80:	2000080c 	.word	0x2000080c
			}
			case PROJECTILE_ALLOWANCE_HEADER : {
				memcpy(&projectile_allowance.projectile_allowance_17mm,&data[0],2);
 8003f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	4b6f      	ldr	r3, [pc, #444]	@ (8004148 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003f8c:	801a      	strh	r2, [r3, #0]
				memcpy(&projectile_allowance.projectile_allowance_42mm,&data[2],2);
 8003f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f90:	3302      	adds	r3, #2
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	4b6c      	ldr	r3, [pc, #432]	@ (8004148 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003f98:	805a      	strh	r2, [r3, #2]
				memcpy(&projectile_allowance.remaining_gold_coin,&data[4],2);
 8003f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	4b69      	ldr	r3, [pc, #420]	@ (8004148 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003fa4:	809a      	strh	r2, [r3, #4]
				PROJECTILE_ALLOWANCE_RxEventCallback(projectile_allowance.projectile_allowance_17mm, projectile_allowance.projectile_allowance_42mm, projectile_allowance.remaining_gold_coin);
 8003fa6:	4b68      	ldr	r3, [pc, #416]	@ (8004148 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003fa8:	881b      	ldrh	r3, [r3, #0]
 8003faa:	4a67      	ldr	r2, [pc, #412]	@ (8004148 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003fac:	8851      	ldrh	r1, [r2, #2]
 8003fae:	4a66      	ldr	r2, [pc, #408]	@ (8004148 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003fb0:	8892      	ldrh	r2, [r2, #4]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fc65 	bl	8004882 <PROJECTILE_ALLOWANCE_RxEventCallback>
				break;
 8003fb8:	e38e      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RFID_HEADER : {
				memcpy(&rfid_status.rfid_status,data,4);
 8003fba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4b62      	ldr	r3, [pc, #392]	@ (800414c <HAL_UARTEx_RxEventCallback+0xb08>)
 8003fc2:	601a      	str	r2, [r3, #0]
				RFID_RxEventCallback(rfid_status.rfid_status);
 8003fc4:	4b61      	ldr	r3, [pc, #388]	@ (800414c <HAL_UARTEx_RxEventCallback+0xb08>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fc69 	bl	80048a0 <RFID_RxEventCallback>
				break;
 8003fce:	e383      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_COMMAND_HEADER : {
				memcpy(&dart_client_cmd.dart_launch_opening_status,&data[0],1);
 8003fd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	4b5e      	ldr	r3, [pc, #376]	@ (8004150 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8003fd6:	701a      	strb	r2, [r3, #0]
				memcpy(&dart_client_cmd.target_change_remaining_time,&data[2],2);
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fda:	3302      	adds	r3, #2
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	4b5b      	ldr	r3, [pc, #364]	@ (8004150 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8003fe2:	805a      	strh	r2, [r3, #2]
				memcpy(&dart_client_cmd.latest_launch_cmd_remaining_time,&data[4],2);
 8003fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe6:	3304      	adds	r3, #4
 8003fe8:	881b      	ldrh	r3, [r3, #0]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	4b58      	ldr	r3, [pc, #352]	@ (8004150 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8003fee:	809a      	strh	r2, [r3, #4]
				DART_COMMAND_RxEventCallback(dart_client_cmd.dart_launch_opening_status, dart_client_cmd.target_change_remaining_time, dart_client_cmd.latest_launch_cmd_remaining_time);
 8003ff0:	4b57      	ldr	r3, [pc, #348]	@ (8004150 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	4a56      	ldr	r2, [pc, #344]	@ (8004150 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8003ff6:	8851      	ldrh	r1, [r2, #2]
 8003ff8:	4a55      	ldr	r2, [pc, #340]	@ (8004150 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8003ffa:	8892      	ldrh	r2, [r2, #4]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fc59 	bl	80048b4 <DART_COMMAND_RxEventCallback>
				break;
 8004002:	e369      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case TEAM_POSITION_HEADER : {
				memcpy(&robot_positions.hero_x,&data[0],4);
 8004004:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	4b52      	ldr	r3, [pc, #328]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 800400c:	601a      	str	r2, [r3, #0]
				memcpy(&robot_positions.hero_y,&data[4],4);
 800400e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004010:	3304      	adds	r3, #4
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	4b4f      	ldr	r3, [pc, #316]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004018:	605a      	str	r2, [r3, #4]
				memcpy(&robot_positions.engineer_x,&data[8],4);
 800401a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800401c:	3308      	adds	r3, #8
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	461a      	mov	r2, r3
 8004022:	4b4c      	ldr	r3, [pc, #304]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004024:	609a      	str	r2, [r3, #8]
				memcpy(&robot_positions.engineer_y,&data[12],4);
 8004026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004028:	330c      	adds	r3, #12
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	4b49      	ldr	r3, [pc, #292]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004030:	60da      	str	r2, [r3, #12]
				memcpy(&robot_positions.standard_3_x,&data[16],4);
 8004032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004034:	3310      	adds	r3, #16
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	4b46      	ldr	r3, [pc, #280]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 800403c:	611a      	str	r2, [r3, #16]
				memcpy(&robot_positions.standard_3_y,&data[20],4);
 800403e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004040:	3314      	adds	r3, #20
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	461a      	mov	r2, r3
 8004046:	4b43      	ldr	r3, [pc, #268]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004048:	615a      	str	r2, [r3, #20]
				memcpy(&robot_positions.standard_4_x,&data[24],4);
 800404a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800404c:	3318      	adds	r3, #24
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	461a      	mov	r2, r3
 8004052:	4b40      	ldr	r3, [pc, #256]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004054:	619a      	str	r2, [r3, #24]
				memcpy(&robot_positions.standard_4_y,&data[28],4);
 8004056:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004058:	331c      	adds	r3, #28
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	4b3d      	ldr	r3, [pc, #244]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004060:	61da      	str	r2, [r3, #28]
				TEAM_POSITION_RxEventCallback(robot_positions.hero_x, robot_positions.hero_y, robot_positions.engineer_x, robot_positions.engineer_y, robot_positions.standard_3_x, robot_positions.standard_3_y, robot_positions.standard_4_x, robot_positions.standard_4_y, robot_positions.standard_5_x, robot_positions.standard_5_y);
 8004062:	4b3c      	ldr	r3, [pc, #240]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	4b3a      	ldr	r3, [pc, #232]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 800406a:	ed93 7a01 	vldr	s14, [r3, #4]
 800406e:	4b39      	ldr	r3, [pc, #228]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004070:	edd3 6a02 	vldr	s13, [r3, #8]
 8004074:	4b37      	ldr	r3, [pc, #220]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004076:	ed93 6a03 	vldr	s12, [r3, #12]
 800407a:	4b36      	ldr	r3, [pc, #216]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 800407c:	edd3 5a04 	vldr	s11, [r3, #16]
 8004080:	4b34      	ldr	r3, [pc, #208]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004082:	ed93 5a05 	vldr	s10, [r3, #20]
 8004086:	4b33      	ldr	r3, [pc, #204]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004088:	ed93 3a06 	vldr	s6, [r3, #24]
 800408c:	4b31      	ldr	r3, [pc, #196]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 800408e:	edd3 3a07 	vldr	s7, [r3, #28]
 8004092:	4b30      	ldr	r3, [pc, #192]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 8004094:	ed93 4a08 	vldr	s8, [r3, #32]
 8004098:	4b2e      	ldr	r3, [pc, #184]	@ (8004154 <HAL_UARTEx_RxEventCallback+0xb10>)
 800409a:	edd3 4a09 	vldr	s9, [r3, #36]	@ 0x24
 800409e:	eef0 2a45 	vmov.f32	s5, s10
 80040a2:	eeb0 2a65 	vmov.f32	s4, s11
 80040a6:	eef0 1a46 	vmov.f32	s3, s12
 80040aa:	eeb0 1a66 	vmov.f32	s2, s13
 80040ae:	eef0 0a47 	vmov.f32	s1, s14
 80040b2:	eeb0 0a67 	vmov.f32	s0, s15
 80040b6:	f000 fc0c 	bl	80048d2 <TEAM_POSITION_RxEventCallback>
				break;
 80040ba:	e30d      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_MARKING_HEADER : {
				radar_mark_data.mark_hero_progress = UART_RM25_getBits(data[0],0,1);
 80040bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2201      	movs	r2, #1
 80040c2:	2100      	movs	r1, #0
 80040c4:	4618      	mov	r0, r3
 80040c6:	f000 fb17 	bl	80046f8 <UART_RM25_getBits>
 80040ca:	4603      	mov	r3, r0
 80040cc:	461a      	mov	r2, r3
 80040ce:	4b22      	ldr	r3, [pc, #136]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 80040d0:	701a      	strb	r2, [r3, #0]
				radar_mark_data.mark_engineer_progress = UART_RM25_getBits(data[0],1,1);
 80040d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d4:	781b      	ldrb	r3, [r3, #0]
 80040d6:	2201      	movs	r2, #1
 80040d8:	2101      	movs	r1, #1
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fb0c 	bl	80046f8 <UART_RM25_getBits>
 80040e0:	4603      	mov	r3, r0
 80040e2:	461a      	mov	r2, r3
 80040e4:	4b1c      	ldr	r3, [pc, #112]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 80040e6:	705a      	strb	r2, [r3, #1]
				radar_mark_data.mark_standard_3_progress = UART_RM25_getBits(data[0],2,1);
 80040e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2201      	movs	r2, #1
 80040ee:	2102      	movs	r1, #2
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 fb01 	bl	80046f8 <UART_RM25_getBits>
 80040f6:	4603      	mov	r3, r0
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b17      	ldr	r3, [pc, #92]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 80040fc:	709a      	strb	r2, [r3, #2]
				radar_mark_data.mark_standard_4_progress = UART_RM25_getBits(data[0],3,1);
 80040fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	2201      	movs	r2, #1
 8004104:	2103      	movs	r1, #3
 8004106:	4618      	mov	r0, r3
 8004108:	f000 faf6 	bl	80046f8 <UART_RM25_getBits>
 800410c:	4603      	mov	r3, r0
 800410e:	461a      	mov	r2, r3
 8004110:	4b11      	ldr	r3, [pc, #68]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 8004112:	70da      	strb	r2, [r3, #3]
				radar_mark_data.mark_sentry_progress = UART_RM25_getBits(data[0],4,1);
 8004114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	2201      	movs	r2, #1
 800411a:	2104      	movs	r1, #4
 800411c:	4618      	mov	r0, r3
 800411e:	f000 faeb 	bl	80046f8 <UART_RM25_getBits>
 8004122:	4603      	mov	r3, r0
 8004124:	461a      	mov	r2, r3
 8004126:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 8004128:	711a      	strb	r2, [r3, #4]
				RADAR_MARKING_RxEventCallback(radar_mark_data.mark_hero_progress, radar_mark_data.mark_engineer_progress, radar_mark_data.mark_standard_3_progress, radar_mark_data.mark_standard_4_progress, radar_mark_data.mark_sentry_progress);
 800412a:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 800412c:	7818      	ldrb	r0, [r3, #0]
 800412e:	4b0a      	ldr	r3, [pc, #40]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 8004130:	7859      	ldrb	r1, [r3, #1]
 8004132:	4b09      	ldr	r3, [pc, #36]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 8004134:	789a      	ldrb	r2, [r3, #2]
 8004136:	4b08      	ldr	r3, [pc, #32]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 8004138:	78dc      	ldrb	r4, [r3, #3]
 800413a:	4b07      	ldr	r3, [pc, #28]	@ (8004158 <HAL_UARTEx_RxEventCallback+0xb14>)
 800413c:	791b      	ldrb	r3, [r3, #4]
 800413e:	9300      	str	r3, [sp, #0]
 8004140:	4623      	mov	r3, r4
 8004142:	f000 fbe3 	bl	800490c <RADAR_MARKING_RxEventCallback>
				break;
 8004146:	e2c7      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 8004148:	20000814 	.word	0x20000814
 800414c:	2000081c 	.word	0x2000081c
 8004150:	20000820 	.word	0x20000820
 8004154:	20000828 	.word	0x20000828
 8004158:	20000850 	.word	0x20000850
			}
			case SENTRY_HEADER : {
				uint8_t exchanged_projectiles_buff[2] = {data[0],UART_RM25_getBits(data[1],0,3)};
 800415c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8004164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004166:	785b      	ldrb	r3, [r3, #1]
 8004168:	2203      	movs	r2, #3
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fac3 	bl	80046f8 <UART_RM25_getBits>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				memcpy(&sentry_info.exchanged_projectiles,&exchanged_projectiles_buff,2);
 8004178:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 800417c:	4b88      	ldr	r3, [pc, #544]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800417e:	801a      	strh	r2, [r3, #0]
				sentry_info.projectile_exchange_count = UART_RM25_getBits(data[1],3,4);
 8004180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	2204      	movs	r2, #4
 8004186:	2103      	movs	r1, #3
 8004188:	4618      	mov	r0, r3
 800418a:	f000 fab5 	bl	80046f8 <UART_RM25_getBits>
 800418e:	4603      	mov	r3, r0
 8004190:	461a      	mov	r2, r3
 8004192:	4b83      	ldr	r3, [pc, #524]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004194:	709a      	strb	r2, [r3, #2]
				sentry_info.HP_exchange_count = UART_RM25_getBits(data[1],7,1) | (UART_RM25_getBits(data[2],0,3)<<1);
 8004196:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004198:	785b      	ldrb	r3, [r3, #1]
 800419a:	2201      	movs	r2, #1
 800419c:	2107      	movs	r1, #7
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 faaa 	bl	80046f8 <UART_RM25_getBits>
 80041a4:	4603      	mov	r3, r0
 80041a6:	b25c      	sxtb	r4, r3
 80041a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041aa:	789b      	ldrb	r3, [r3, #2]
 80041ac:	2203      	movs	r2, #3
 80041ae:	2100      	movs	r1, #0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 faa1 	bl	80046f8 <UART_RM25_getBits>
 80041b6:	4603      	mov	r3, r0
 80041b8:	b25b      	sxtb	r3, r3
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	b25b      	sxtb	r3, r3
 80041be:	4323      	orrs	r3, r4
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	4b76      	ldr	r3, [pc, #472]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80041c6:	70da      	strb	r2, [r3, #3]
				sentry_info.confirm_free_respawn = UART_RM25_getBits(data[2],3,1);
 80041c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ca:	789b      	ldrb	r3, [r3, #2]
 80041cc:	2201      	movs	r2, #1
 80041ce:	2103      	movs	r1, #3
 80041d0:	4618      	mov	r0, r3
 80041d2:	f000 fa91 	bl	80046f8 <UART_RM25_getBits>
 80041d6:	4603      	mov	r3, r0
 80041d8:	461a      	mov	r2, r3
 80041da:	4b71      	ldr	r3, [pc, #452]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80041dc:	711a      	strb	r2, [r3, #4]
				sentry_info.instant_respawn_available = UART_RM25_getBits(data[2],4,1);
 80041de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e0:	789b      	ldrb	r3, [r3, #2]
 80041e2:	2201      	movs	r2, #1
 80041e4:	2104      	movs	r1, #4
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 fa86 	bl	80046f8 <UART_RM25_getBits>
 80041ec:	4603      	mov	r3, r0
 80041ee:	461a      	mov	r2, r3
 80041f0:	4b6b      	ldr	r3, [pc, #428]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80041f2:	715a      	strb	r2, [r3, #5]
				uint8_t instant_respawn_cost_buff[2] = {UART_RM25_getBits(data[2],5,3)| (UART_RM25_getBits(data[3],0,5)<<3),UART_RM25_getBits(data[3],5,2)};
 80041f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f6:	789b      	ldrb	r3, [r3, #2]
 80041f8:	2203      	movs	r2, #3
 80041fa:	2105      	movs	r1, #5
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fa7b 	bl	80046f8 <UART_RM25_getBits>
 8004202:	4603      	mov	r3, r0
 8004204:	b25c      	sxtb	r4, r3
 8004206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004208:	78db      	ldrb	r3, [r3, #3]
 800420a:	2205      	movs	r2, #5
 800420c:	2100      	movs	r1, #0
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fa72 	bl	80046f8 <UART_RM25_getBits>
 8004214:	4603      	mov	r3, r0
 8004216:	b25b      	sxtb	r3, r3
 8004218:	00db      	lsls	r3, r3, #3
 800421a:	b25b      	sxtb	r3, r3
 800421c:	4323      	orrs	r3, r4
 800421e:	b25b      	sxtb	r3, r3
 8004220:	b2db      	uxtb	r3, r3
 8004222:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8004226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004228:	78db      	ldrb	r3, [r3, #3]
 800422a:	2202      	movs	r2, #2
 800422c:	2105      	movs	r1, #5
 800422e:	4618      	mov	r0, r3
 8004230:	f000 fa62 	bl	80046f8 <UART_RM25_getBits>
 8004234:	4603      	mov	r3, r0
 8004236:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
				memcpy(&sentry_info.instant_respawn_cost,instant_respawn_cost_buff,2);
 800423a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800423e:	4b58      	ldr	r3, [pc, #352]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004240:	80da      	strh	r2, [r3, #6]
				sentry_info.in_combat = UART_RM25_getBits(data[4],0,1);
 8004242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004244:	791b      	ldrb	r3, [r3, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	2100      	movs	r1, #0
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fa54 	bl	80046f8 <UART_RM25_getBits>
 8004250:	4603      	mov	r3, r0
 8004252:	461a      	mov	r2, r3
 8004254:	4b52      	ldr	r3, [pc, #328]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8004256:	721a      	strb	r2, [r3, #8]
				uint8_t remaining_allowance_to_exchange_buff[2] = {UART_RM25_getBits(data[4],1,7)|(UART_RM25_getBits(data[5],0,1)<<7),UART_RM25_getBits(data[5],1,3)};
 8004258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800425a:	791b      	ldrb	r3, [r3, #4]
 800425c:	2207      	movs	r2, #7
 800425e:	2101      	movs	r1, #1
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fa49 	bl	80046f8 <UART_RM25_getBits>
 8004266:	4603      	mov	r3, r0
 8004268:	b25c      	sxtb	r4, r3
 800426a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800426c:	795b      	ldrb	r3, [r3, #5]
 800426e:	2201      	movs	r2, #1
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fa40 	bl	80046f8 <UART_RM25_getBits>
 8004278:	4603      	mov	r3, r0
 800427a:	b25b      	sxtb	r3, r3
 800427c:	01db      	lsls	r3, r3, #7
 800427e:	b25b      	sxtb	r3, r3
 8004280:	4323      	orrs	r3, r4
 8004282:	b25b      	sxtb	r3, r3
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800428a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428c:	795b      	ldrb	r3, [r3, #5]
 800428e:	2203      	movs	r2, #3
 8004290:	2101      	movs	r1, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fa30 	bl	80046f8 <UART_RM25_getBits>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				memcpy(&sentry_info.remaining_allowance_to_exchange,remaining_allowance_to_exchange_buff,2);
 800429e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 80042a2:	4b3f      	ldr	r3, [pc, #252]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80042a4:	815a      	strh	r2, [r3, #10]
				SENTRY_RxEventCallback(sentry_info.exchanged_projectiles, sentry_info.projectile_exchange_count, sentry_info.HP_exchange_count, sentry_info.confirm_free_respawn, sentry_info.instant_respawn_available, sentry_info.instant_respawn_cost, sentry_info.in_combat, sentry_info.remaining_allowance_to_exchange);
 80042a6:	4b3e      	ldr	r3, [pc, #248]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80042a8:	881c      	ldrh	r4, [r3, #0]
 80042aa:	4b3d      	ldr	r3, [pc, #244]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80042ac:	789d      	ldrb	r5, [r3, #2]
 80042ae:	4b3c      	ldr	r3, [pc, #240]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80042b0:	78de      	ldrb	r6, [r3, #3]
 80042b2:	4b3b      	ldr	r3, [pc, #236]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80042b4:	f893 c004 	ldrb.w	ip, [r3, #4]
 80042b8:	4b39      	ldr	r3, [pc, #228]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80042ba:	795b      	ldrb	r3, [r3, #5]
 80042bc:	4a38      	ldr	r2, [pc, #224]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80042be:	88d2      	ldrh	r2, [r2, #6]
 80042c0:	4937      	ldr	r1, [pc, #220]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80042c2:	7a09      	ldrb	r1, [r1, #8]
 80042c4:	4836      	ldr	r0, [pc, #216]	@ (80043a0 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80042c6:	8940      	ldrh	r0, [r0, #10]
 80042c8:	9003      	str	r0, [sp, #12]
 80042ca:	9102      	str	r1, [sp, #8]
 80042cc:	9201      	str	r2, [sp, #4]
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	4663      	mov	r3, ip
 80042d2:	4632      	mov	r2, r6
 80042d4:	4629      	mov	r1, r5
 80042d6:	4620      	mov	r0, r4
 80042d8:	f000 fb2c 	bl	8004934 <SENTRY_RxEventCallback>
				break;
 80042dc:	e1fc      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_BUFF_HEADER : {
				radar_info.double_vulnerability_chances = UART_RM25_getBits(data[0],0,1);
 80042de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2201      	movs	r2, #1
 80042e4:	2100      	movs	r1, #0
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fa06 	bl	80046f8 <UART_RM25_getBits>
 80042ec:	4603      	mov	r3, r0
 80042ee:	461a      	mov	r2, r3
 80042f0:	4b2c      	ldr	r3, [pc, #176]	@ (80043a4 <HAL_UARTEx_RxEventCallback+0xd60>)
 80042f2:	701a      	strb	r2, [r3, #0]
				radar_info.double_vulnerability_triggered = UART_RM25_getBits(data[0],1,1);
 80042f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2201      	movs	r2, #1
 80042fa:	2101      	movs	r1, #1
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f9fb 	bl	80046f8 <UART_RM25_getBits>
 8004302:	4603      	mov	r3, r0
 8004304:	461a      	mov	r2, r3
 8004306:	4b27      	ldr	r3, [pc, #156]	@ (80043a4 <HAL_UARTEx_RxEventCallback+0xd60>)
 8004308:	705a      	strb	r2, [r3, #1]
				RADAR_BUFF_RxEventCallback(radar_info.double_vulnerability_chances, radar_info.double_vulnerability_triggered);
 800430a:	4b26      	ldr	r3, [pc, #152]	@ (80043a4 <HAL_UARTEx_RxEventCallback+0xd60>)
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	4a25      	ldr	r2, [pc, #148]	@ (80043a4 <HAL_UARTEx_RxEventCallback+0xd60>)
 8004310:	7852      	ldrb	r2, [r2, #1]
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fb21 	bl	800495c <RADAR_BUFF_RxEventCallback>
				break;
 800431a:	e1dd      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
				break;
			}
			//end of unfinished

			case CUSTOM_CONTROLLER_ROBOT_HEADER : {
				memcpy(&custom_controller_robot.custom_data,data,30);
 800431c:	4a22      	ldr	r2, [pc, #136]	@ (80043a8 <HAL_UARTEx_RxEventCallback+0xd64>)
 800431e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004320:	4614      	mov	r4, r2
 8004322:	461d      	mov	r5, r3
 8004324:	6828      	ldr	r0, [r5, #0]
 8004326:	6869      	ldr	r1, [r5, #4]
 8004328:	68aa      	ldr	r2, [r5, #8]
 800432a:	68eb      	ldr	r3, [r5, #12]
 800432c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800432e:	6928      	ldr	r0, [r5, #16]
 8004330:	6969      	ldr	r1, [r5, #20]
 8004332:	69aa      	ldr	r2, [r5, #24]
 8004334:	c407      	stmia	r4!, {r0, r1, r2}
 8004336:	8bab      	ldrh	r3, [r5, #28]
 8004338:	8023      	strh	r3, [r4, #0]
				CUSTOM_CONTROLLER_ROBOT_RxEventCallback(custom_controller_robot.custom_data);
 800433a:	481b      	ldr	r0, [pc, #108]	@ (80043a8 <HAL_UARTEx_RxEventCallback+0xd64>)
 800433c:	f7fd fad0 	bl	80018e0 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>
				break;
 8004340:	e1ca      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case MINIMAP_COMMAND_HEADER : {
				memcpy(&map_command.target_position_x,&data[0],4);
 8004342:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4b18      	ldr	r3, [pc, #96]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 800434a:	601a      	str	r2, [r3, #0]
				memcpy(&map_command.target_position_y,&data[4],4);
 800434c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800434e:	3304      	adds	r3, #4
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	461a      	mov	r2, r3
 8004354:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 8004356:	605a      	str	r2, [r3, #4]
				memcpy(&map_command.cmd_keyboard,&data[8],1);
 8004358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800435a:	3308      	adds	r3, #8
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	4b13      	ldr	r3, [pc, #76]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 8004360:	721a      	strb	r2, [r3, #8]
				memcpy(&map_command.target_robot_id,&data[9],1);
 8004362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004364:	3309      	adds	r3, #9
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 800436a:	725a      	strb	r2, [r3, #9]
				memcpy(&map_command.cmd_source,&data[10],2);
 800436c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800436e:	330a      	adds	r3, #10
 8004370:	881b      	ldrh	r3, [r3, #0]
 8004372:	b29a      	uxth	r2, r3
 8004374:	4b0d      	ldr	r3, [pc, #52]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 8004376:	815a      	strh	r2, [r3, #10]
				MINIMAP_COMMAND_RxEventCallback(map_command.target_position_x, map_command.target_position_y, map_command.cmd_keyboard, map_command.target_robot_id, map_command.cmd_source);
 8004378:	4b0c      	ldr	r3, [pc, #48]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 800437a:	edd3 7a00 	vldr	s15, [r3]
 800437e:	4b0b      	ldr	r3, [pc, #44]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 8004380:	ed93 7a01 	vldr	s14, [r3, #4]
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 8004386:	7a1b      	ldrb	r3, [r3, #8]
 8004388:	4a08      	ldr	r2, [pc, #32]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 800438a:	7a51      	ldrb	r1, [r2, #9]
 800438c:	4a07      	ldr	r2, [pc, #28]	@ (80043ac <HAL_UARTEx_RxEventCallback+0xd68>)
 800438e:	8952      	ldrh	r2, [r2, #10]
 8004390:	4618      	mov	r0, r3
 8004392:	eef0 0a47 	vmov.f32	s1, s14
 8004396:	eeb0 0a67 	vmov.f32	s0, s15
 800439a:	f000 faed 	bl	8004978 <MINIMAP_COMMAND_RxEventCallback>
				break;
 800439e:	e19b      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 80043a0:	20000858 	.word	0x20000858
 80043a4:	20000864 	.word	0x20000864
 80043a8:	200008fc 	.word	0x200008fc
 80043ac:	20000868 	.word	0x20000868
			}
			case PC_CONTROL_HEADER : {
				memcpy(&pc_control.mouse_x,&data[0],2);
 80043b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	4b94      	ldr	r3, [pc, #592]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80043b8:	801a      	strh	r2, [r3, #0]
				memcpy(&pc_control.mouse_y,&data[2],2);
 80043ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043bc:	3302      	adds	r3, #2
 80043be:	881b      	ldrh	r3, [r3, #0]
 80043c0:	b29a      	uxth	r2, r3
 80043c2:	4b91      	ldr	r3, [pc, #580]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80043c4:	805a      	strh	r2, [r3, #2]
				memcpy(&pc_control.mouse_z,&data[4],2);
 80043c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c8:	3304      	adds	r3, #4
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	4b8e      	ldr	r3, [pc, #568]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80043d0:	809a      	strh	r2, [r3, #4]
				memcpy(&pc_control.left_button_down,&data[6],1);
 80043d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d4:	3306      	adds	r3, #6
 80043d6:	781a      	ldrb	r2, [r3, #0]
 80043d8:	4b8b      	ldr	r3, [pc, #556]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80043da:	719a      	strb	r2, [r3, #6]
				memcpy(&pc_control.right_button_down,&data[7],1);
 80043dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043de:	3307      	adds	r3, #7
 80043e0:	781a      	ldrb	r2, [r3, #0]
 80043e2:	4b89      	ldr	r3, [pc, #548]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80043e4:	71da      	strb	r2, [r3, #7]
				pc_control.w = UART_RM25_getBits(data[8],0,1);
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	7a1b      	ldrb	r3, [r3, #8]
 80043ea:	2201      	movs	r2, #1
 80043ec:	2100      	movs	r1, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f000 f982 	bl	80046f8 <UART_RM25_getBits>
 80043f4:	4603      	mov	r3, r0
 80043f6:	461a      	mov	r2, r3
 80043f8:	4b83      	ldr	r3, [pc, #524]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80043fa:	731a      	strb	r2, [r3, #12]
				pc_control.s = UART_RM25_getBits(data[8],1,1);
 80043fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043fe:	7a1b      	ldrb	r3, [r3, #8]
 8004400:	2201      	movs	r2, #1
 8004402:	2101      	movs	r1, #1
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f977 	bl	80046f8 <UART_RM25_getBits>
 800440a:	4603      	mov	r3, r0
 800440c:	461a      	mov	r2, r3
 800440e:	4b7e      	ldr	r3, [pc, #504]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004410:	735a      	strb	r2, [r3, #13]
				pc_control.a = UART_RM25_getBits(data[8],2,1);
 8004412:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004414:	7a1b      	ldrb	r3, [r3, #8]
 8004416:	2201      	movs	r2, #1
 8004418:	2102      	movs	r1, #2
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f96c 	bl	80046f8 <UART_RM25_getBits>
 8004420:	4603      	mov	r3, r0
 8004422:	461a      	mov	r2, r3
 8004424:	4b78      	ldr	r3, [pc, #480]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004426:	739a      	strb	r2, [r3, #14]
				pc_control.d = UART_RM25_getBits(data[8],3,1);
 8004428:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442a:	7a1b      	ldrb	r3, [r3, #8]
 800442c:	2201      	movs	r2, #1
 800442e:	2103      	movs	r1, #3
 8004430:	4618      	mov	r0, r3
 8004432:	f000 f961 	bl	80046f8 <UART_RM25_getBits>
 8004436:	4603      	mov	r3, r0
 8004438:	461a      	mov	r2, r3
 800443a:	4b73      	ldr	r3, [pc, #460]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800443c:	73da      	strb	r2, [r3, #15]
				pc_control.shift = UART_RM25_getBits(data[8],4,1);
 800443e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004440:	7a1b      	ldrb	r3, [r3, #8]
 8004442:	2201      	movs	r2, #1
 8004444:	2104      	movs	r1, #4
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f956 	bl	80046f8 <UART_RM25_getBits>
 800444c:	4603      	mov	r3, r0
 800444e:	461a      	mov	r2, r3
 8004450:	4b6d      	ldr	r3, [pc, #436]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004452:	741a      	strb	r2, [r3, #16]
				pc_control.ctrl = UART_RM25_getBits(data[8],5,1);
 8004454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004456:	7a1b      	ldrb	r3, [r3, #8]
 8004458:	2201      	movs	r2, #1
 800445a:	2105      	movs	r1, #5
 800445c:	4618      	mov	r0, r3
 800445e:	f000 f94b 	bl	80046f8 <UART_RM25_getBits>
 8004462:	4603      	mov	r3, r0
 8004464:	461a      	mov	r2, r3
 8004466:	4b68      	ldr	r3, [pc, #416]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004468:	745a      	strb	r2, [r3, #17]
				pc_control.q = UART_RM25_getBits(data[8],6,1);
 800446a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446c:	7a1b      	ldrb	r3, [r3, #8]
 800446e:	2201      	movs	r2, #1
 8004470:	2106      	movs	r1, #6
 8004472:	4618      	mov	r0, r3
 8004474:	f000 f940 	bl	80046f8 <UART_RM25_getBits>
 8004478:	4603      	mov	r3, r0
 800447a:	461a      	mov	r2, r3
 800447c:	4b62      	ldr	r3, [pc, #392]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800447e:	749a      	strb	r2, [r3, #18]
				pc_control.e = UART_RM25_getBits(data[8],7,1);
 8004480:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004482:	7a1b      	ldrb	r3, [r3, #8]
 8004484:	2201      	movs	r2, #1
 8004486:	2107      	movs	r1, #7
 8004488:	4618      	mov	r0, r3
 800448a:	f000 f935 	bl	80046f8 <UART_RM25_getBits>
 800448e:	4603      	mov	r3, r0
 8004490:	461a      	mov	r2, r3
 8004492:	4b5d      	ldr	r3, [pc, #372]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004494:	74da      	strb	r2, [r3, #19]
				pc_control.r = UART_RM25_getBits(data[9],0,1);
 8004496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004498:	7a5b      	ldrb	r3, [r3, #9]
 800449a:	2201      	movs	r2, #1
 800449c:	2100      	movs	r1, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 f92a 	bl	80046f8 <UART_RM25_getBits>
 80044a4:	4603      	mov	r3, r0
 80044a6:	461a      	mov	r2, r3
 80044a8:	4b57      	ldr	r3, [pc, #348]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80044aa:	751a      	strb	r2, [r3, #20]
				pc_control.f = UART_RM25_getBits(data[9],1,1);
 80044ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044ae:	7a5b      	ldrb	r3, [r3, #9]
 80044b0:	2201      	movs	r2, #1
 80044b2:	2101      	movs	r1, #1
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f91f 	bl	80046f8 <UART_RM25_getBits>
 80044ba:	4603      	mov	r3, r0
 80044bc:	461a      	mov	r2, r3
 80044be:	4b52      	ldr	r3, [pc, #328]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80044c0:	755a      	strb	r2, [r3, #21]
				pc_control.g = UART_RM25_getBits(data[9],2,1);
 80044c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c4:	7a5b      	ldrb	r3, [r3, #9]
 80044c6:	2201      	movs	r2, #1
 80044c8:	2102      	movs	r1, #2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f914 	bl	80046f8 <UART_RM25_getBits>
 80044d0:	4603      	mov	r3, r0
 80044d2:	461a      	mov	r2, r3
 80044d4:	4b4c      	ldr	r3, [pc, #304]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80044d6:	759a      	strb	r2, [r3, #22]
				pc_control.z = UART_RM25_getBits(data[9],3,1);
 80044d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044da:	7a5b      	ldrb	r3, [r3, #9]
 80044dc:	2201      	movs	r2, #1
 80044de:	2103      	movs	r1, #3
 80044e0:	4618      	mov	r0, r3
 80044e2:	f000 f909 	bl	80046f8 <UART_RM25_getBits>
 80044e6:	4603      	mov	r3, r0
 80044e8:	461a      	mov	r2, r3
 80044ea:	4b47      	ldr	r3, [pc, #284]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80044ec:	75da      	strb	r2, [r3, #23]
				pc_control.x = UART_RM25_getBits(data[9],4,1);
 80044ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f0:	7a5b      	ldrb	r3, [r3, #9]
 80044f2:	2201      	movs	r2, #1
 80044f4:	2104      	movs	r1, #4
 80044f6:	4618      	mov	r0, r3
 80044f8:	f000 f8fe 	bl	80046f8 <UART_RM25_getBits>
 80044fc:	4603      	mov	r3, r0
 80044fe:	461a      	mov	r2, r3
 8004500:	4b41      	ldr	r3, [pc, #260]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004502:	761a      	strb	r2, [r3, #24]
				pc_control.c = UART_RM25_getBits(data[9],5,1);
 8004504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004506:	7a5b      	ldrb	r3, [r3, #9]
 8004508:	2201      	movs	r2, #1
 800450a:	2105      	movs	r1, #5
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f8f3 	bl	80046f8 <UART_RM25_getBits>
 8004512:	4603      	mov	r3, r0
 8004514:	461a      	mov	r2, r3
 8004516:	4b3c      	ldr	r3, [pc, #240]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004518:	765a      	strb	r2, [r3, #25]
				pc_control.v = UART_RM25_getBits(data[9],6,1);
 800451a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800451c:	7a5b      	ldrb	r3, [r3, #9]
 800451e:	2201      	movs	r2, #1
 8004520:	2106      	movs	r1, #6
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f8e8 	bl	80046f8 <UART_RM25_getBits>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	4b36      	ldr	r3, [pc, #216]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800452e:	769a      	strb	r2, [r3, #26]
				pc_control.b = UART_RM25_getBits(data[9],7,1);
 8004530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004532:	7a5b      	ldrb	r3, [r3, #9]
 8004534:	2201      	movs	r2, #1
 8004536:	2107      	movs	r1, #7
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f8dd 	bl	80046f8 <UART_RM25_getBits>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	4b31      	ldr	r3, [pc, #196]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004544:	76da      	strb	r2, [r3, #27]
				PC_CONTROL_RxEventCallback(pc_control.mouse_x,pc_control.mouse_y,pc_control.mouse_z,pc_control.left_button_down,pc_control.right_button_down,pc_control.w,pc_control.s,pc_control.a,pc_control.d,pc_control.shift,pc_control.ctrl,pc_control.q,pc_control.e,pc_control.r,pc_control.f,pc_control.g,pc_control.z,pc_control.x,pc_control.c,pc_control.v,pc_control.b);
 8004546:	4b30      	ldr	r3, [pc, #192]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004548:	f9b3 c000 	ldrsh.w	ip, [r3]
 800454c:	4b2e      	ldr	r3, [pc, #184]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800454e:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8004552:	4b2d      	ldr	r3, [pc, #180]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004554:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8004558:	4b2b      	ldr	r3, [pc, #172]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800455a:	f893 9006 	ldrb.w	r9, [r3, #6]
 800455e:	4b2a      	ldr	r3, [pc, #168]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004560:	79db      	ldrb	r3, [r3, #7]
 8004562:	633b      	str	r3, [r7, #48]	@ 0x30
 8004564:	4b28      	ldr	r3, [pc, #160]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004566:	7b1a      	ldrb	r2, [r3, #12]
 8004568:	62ba      	str	r2, [r7, #40]	@ 0x28
 800456a:	4b27      	ldr	r3, [pc, #156]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800456c:	7b59      	ldrb	r1, [r3, #13]
 800456e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004570:	4b25      	ldr	r3, [pc, #148]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004572:	7b98      	ldrb	r0, [r3, #14]
 8004574:	6238      	str	r0, [r7, #32]
 8004576:	4b24      	ldr	r3, [pc, #144]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004578:	7bdc      	ldrb	r4, [r3, #15]
 800457a:	61fc      	str	r4, [r7, #28]
 800457c:	4b22      	ldr	r3, [pc, #136]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800457e:	7c1d      	ldrb	r5, [r3, #16]
 8004580:	61bd      	str	r5, [r7, #24]
 8004582:	4b21      	ldr	r3, [pc, #132]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004584:	7c5e      	ldrb	r6, [r3, #17]
 8004586:	617e      	str	r6, [r7, #20]
 8004588:	4b1f      	ldr	r3, [pc, #124]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800458a:	f893 b012 	ldrb.w	fp, [r3, #18]
 800458e:	465b      	mov	r3, fp
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	4b1d      	ldr	r3, [pc, #116]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8004594:	f893 b013 	ldrb.w	fp, [r3, #19]
 8004598:	465a      	mov	r2, fp
 800459a:	60fa      	str	r2, [r7, #12]
 800459c:	4b1a      	ldr	r3, [pc, #104]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800459e:	f893 b014 	ldrb.w	fp, [r3, #20]
 80045a2:	4659      	mov	r1, fp
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	4b18      	ldr	r3, [pc, #96]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80045a8:	7d5e      	ldrb	r6, [r3, #21]
 80045aa:	4b17      	ldr	r3, [pc, #92]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80045ac:	7d9d      	ldrb	r5, [r3, #22]
 80045ae:	4b16      	ldr	r3, [pc, #88]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80045b0:	7ddc      	ldrb	r4, [r3, #23]
 80045b2:	4b15      	ldr	r3, [pc, #84]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80045b4:	7e18      	ldrb	r0, [r3, #24]
 80045b6:	4b14      	ldr	r3, [pc, #80]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80045b8:	7e59      	ldrb	r1, [r3, #25]
 80045ba:	4b13      	ldr	r3, [pc, #76]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80045bc:	7e9a      	ldrb	r2, [r3, #26]
 80045be:	4b12      	ldr	r3, [pc, #72]	@ (8004608 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80045c0:	7edb      	ldrb	r3, [r3, #27]
 80045c2:	9310      	str	r3, [sp, #64]	@ 0x40
 80045c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80045c6:	910e      	str	r1, [sp, #56]	@ 0x38
 80045c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80045ca:	940c      	str	r4, [sp, #48]	@ 0x30
 80045cc:	950b      	str	r5, [sp, #44]	@ 0x2c
 80045ce:	960a      	str	r6, [sp, #40]	@ 0x28
 80045d0:	68b9      	ldr	r1, [r7, #8]
 80045d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	9208      	str	r2, [sp, #32]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	9307      	str	r3, [sp, #28]
 80045dc:	697e      	ldr	r6, [r7, #20]
 80045de:	9606      	str	r6, [sp, #24]
 80045e0:	69bd      	ldr	r5, [r7, #24]
 80045e2:	9505      	str	r5, [sp, #20]
 80045e4:	69fc      	ldr	r4, [r7, #28]
 80045e6:	9404      	str	r4, [sp, #16]
 80045e8:	6a38      	ldr	r0, [r7, #32]
 80045ea:	9003      	str	r0, [sp, #12]
 80045ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045ee:	9102      	str	r1, [sp, #8]
 80045f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045f2:	9201      	str	r2, [sp, #4]
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	9300      	str	r3, [sp, #0]
 80045f8:	464b      	mov	r3, r9
 80045fa:	4642      	mov	r2, r8
 80045fc:	4671      	mov	r1, lr
 80045fe:	4660      	mov	r0, ip
 8004600:	f7fd f978 	bl	80018f4 <PC_CONTROL_RxEventCallback>
				break;
 8004604:	e068      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
 8004606:	bf00      	nop
 8004608:	200008e0 	.word	0x200008e0
			}
			case CUSTOM_CONTROLLER_CLIENT_HEADER : {
				break;
			}
			case MINIMAP_DATA_HEADER : {
				memcpy(&map_data.intention,&data[0],1);
 800460c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800460e:	781a      	ldrb	r2, [r3, #0]
 8004610:	4b35      	ldr	r3, [pc, #212]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004612:	701a      	strb	r2, [r3, #0]
				memcpy(&map_data.start_position_x,&data[1],2);
 8004614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004616:	3301      	adds	r3, #1
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29a      	uxth	r2, r3
 800461c:	4b32      	ldr	r3, [pc, #200]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800461e:	805a      	strh	r2, [r3, #2]
				memcpy(&map_data.start_position_y,&data[3],2);
 8004620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004622:	3303      	adds	r3, #3
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29a      	uxth	r2, r3
 8004628:	4b2f      	ldr	r3, [pc, #188]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800462a:	809a      	strh	r2, [r3, #4]
				memcpy(&map_data.delta_x,&data[5],49);
 800462c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800462e:	3305      	adds	r3, #5
 8004630:	4a2d      	ldr	r2, [pc, #180]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004632:	1d90      	adds	r0, r2, #6
 8004634:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8004638:	4602      	mov	r2, r0
 800463a:	4619      	mov	r1, r3
 800463c:	f8d1 c000 	ldr.w	ip, [r1]
 8004640:	684e      	ldr	r6, [r1, #4]
 8004642:	688d      	ldr	r5, [r1, #8]
 8004644:	68c9      	ldr	r1, [r1, #12]
 8004646:	f8c2 c000 	str.w	ip, [r2]
 800464a:	6056      	str	r6, [r2, #4]
 800464c:	6095      	str	r5, [r2, #8]
 800464e:	60d1      	str	r1, [r2, #12]
 8004650:	3310      	adds	r3, #16
 8004652:	3010      	adds	r0, #16
 8004654:	42a3      	cmp	r3, r4
 8004656:	d1ef      	bne.n	8004638 <HAL_UARTEx_RxEventCallback+0xff4>
 8004658:	4602      	mov	r2, r0
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.delta_y,&data[54],49);
 800465e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004660:	3336      	adds	r3, #54	@ 0x36
 8004662:	4a21      	ldr	r2, [pc, #132]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8004664:	f102 0037 	add.w	r0, r2, #55	@ 0x37
 8004668:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 800466c:	4602      	mov	r2, r0
 800466e:	4619      	mov	r1, r3
 8004670:	f8d1 c000 	ldr.w	ip, [r1]
 8004674:	684e      	ldr	r6, [r1, #4]
 8004676:	688d      	ldr	r5, [r1, #8]
 8004678:	68c9      	ldr	r1, [r1, #12]
 800467a:	f8c2 c000 	str.w	ip, [r2]
 800467e:	6056      	str	r6, [r2, #4]
 8004680:	6095      	str	r5, [r2, #8]
 8004682:	60d1      	str	r1, [r2, #12]
 8004684:	3310      	adds	r3, #16
 8004686:	3010      	adds	r0, #16
 8004688:	42a3      	cmp	r3, r4
 800468a:	d1ef      	bne.n	800466c <HAL_UARTEx_RxEventCallback+0x1028>
 800468c:	4602      	mov	r2, r0
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.sender_id,&data[103],2);
 8004692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004694:	3367      	adds	r3, #103	@ 0x67
 8004696:	881b      	ldrh	r3, [r3, #0]
 8004698:	b29a      	uxth	r2, r3
 800469a:	4b13      	ldr	r3, [pc, #76]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800469c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
				MINIMAP_DATA_RxEventCallback(map_data.intention, map_data.start_position_x, map_data.start_position_y, map_data.delta_x, map_data.delta_y, map_data.sender_id);
 80046a0:	4b11      	ldr	r3, [pc, #68]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80046a2:	7818      	ldrb	r0, [r3, #0]
 80046a4:	4b10      	ldr	r3, [pc, #64]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80046a6:	8859      	ldrh	r1, [r3, #2]
 80046a8:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80046aa:	889a      	ldrh	r2, [r3, #4]
 80046ac:	4b0e      	ldr	r3, [pc, #56]	@ (80046e8 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80046ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	4b0d      	ldr	r3, [pc, #52]	@ (80046ec <HAL_UARTEx_RxEventCallback+0x10a8>)
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	4b0d      	ldr	r3, [pc, #52]	@ (80046f0 <HAL_UARTEx_RxEventCallback+0x10ac>)
 80046ba:	f000 f970 	bl	800499e <MINIMAP_DATA_RxEventCallback>
				break;
 80046be:	e00b      	b.n	80046d8 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case CUSTOM_MESSAGE_HEADER : {
				//UART_Printf(&huart1,"CallBack Check");
				memcpy(&custom_message.custom_message,data,128);
 80046c0:	4a0c      	ldr	r2, [pc, #48]	@ (80046f4 <HAL_UARTEx_RxEventCallback+0x10b0>)
 80046c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c4:	4610      	mov	r0, r2
 80046c6:	4619      	mov	r1, r3
 80046c8:	2380      	movs	r3, #128	@ 0x80
 80046ca:	461a      	mov	r2, r3
 80046cc:	f00b f934 	bl	800f938 <memcpy>
				CUSTOM_MESSAGE_RxEventCallback(custom_message.custom_message);
 80046d0:	4808      	ldr	r0, [pc, #32]	@ (80046f4 <HAL_UARTEx_RxEventCallback+0x10b0>)
 80046d2:	f000 f974 	bl	80049be <CUSTOM_MESSAGE_RxEventCallback>
				break;
 80046d6:	bf00      	nop
 80046d8:	46d5      	mov	sp, sl
 80046da:	f8d7 d004 	ldr.w	sp, [r7, #4]
			}
		}
	}
}
 80046de:	bf00      	nop
 80046e0:	3774      	adds	r7, #116	@ 0x74
 80046e2:	46bd      	mov	sp, r7
 80046e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e8:	20000874 	.word	0x20000874
 80046ec:	200008ab 	.word	0x200008ab
 80046f0:	2000087a 	.word	0x2000087a
 80046f4:	2000091c 	.word	0x2000091c

080046f8 <UART_RM25_getBits>:
		seq=0;
	}
}


uint8_t UART_RM25_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	71fb      	strb	r3, [r7, #7]
 8004702:	460b      	mov	r3, r1
 8004704:	71bb      	strb	r3, [r7, #6]
 8004706:	4613      	mov	r3, r2
 8004708:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800470e:	2300      	movs	r3, #0
 8004710:	73bb      	strb	r3, [r7, #14]
 8004712:	e013      	b.n	800473c <UART_RM25_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8004714:	79fa      	ldrb	r2, [r7, #7]
 8004716:	79b9      	ldrb	r1, [r7, #6]
 8004718:	7bbb      	ldrb	r3, [r7, #14]
 800471a:	440b      	add	r3, r1
 800471c:	fa42 f303 	asr.w	r3, r2, r3
 8004720:	f003 0201 	and.w	r2, r3, #1
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	b25a      	sxtb	r2, r3
 800472c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004730:	4313      	orrs	r3, r2
 8004732:	b25b      	sxtb	r3, r3
 8004734:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8004736:	7bbb      	ldrb	r3, [r7, #14]
 8004738:	3301      	adds	r3, #1
 800473a:	73bb      	strb	r3, [r7, #14]
 800473c:	7bba      	ldrb	r2, [r7, #14]
 800473e:	797b      	ldrb	r3, [r7, #5]
 8004740:	429a      	cmp	r2, r3
 8004742:	d3e7      	bcc.n	8004714 <UART_RM25_getBits+0x1c>
	}
	return result;
 8004744:	7bfb      	ldrb	r3, [r7, #15]
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <GAME_RESULT_RxEventCallback>:

__weak void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
	//NOTE: This function should not be modified
}

__weak void GAME_RESULT_RxEventCallback(uint8_t winner){
 8004752:	b480      	push	{r7}
 8004754:	b083      	sub	sp, #12
 8004756:	af00      	add	r7, sp, #0
 8004758:	4603      	mov	r3, r0
 800475a:	71fb      	strb	r3, [r7, #7]
	//NOTE: This function should not be modified
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <ROBOT_HP_HEADER_RxEventCallback>:

__weak void ROBOT_HP_HEADER_RxEventCallback(uint16_t red_1_robot_HP, uint16_t red_2_robot_HP, uint16_t red_3_robot_HP, uint16_t red_4_robot_HP, uint16_t red_7_robot_HP, uint16_t red_outpost_HP, uint16_t red_base_HP, uint16_t blue_1_robot_HP, uint16_t blue_2_robot_HP, uint16_t blue_3_robot_HP, uint16_t blue_4_robot_HP, uint16_t blue_7_robot_HP, uint16_t blue_outpost_HP, uint16_t blue_base_HP){
 8004768:	b490      	push	{r4, r7}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	4604      	mov	r4, r0
 8004770:	4608      	mov	r0, r1
 8004772:	4611      	mov	r1, r2
 8004774:	461a      	mov	r2, r3
 8004776:	4623      	mov	r3, r4
 8004778:	80fb      	strh	r3, [r7, #6]
 800477a:	4603      	mov	r3, r0
 800477c:	80bb      	strh	r3, [r7, #4]
 800477e:	460b      	mov	r3, r1
 8004780:	807b      	strh	r3, [r7, #2]
 8004782:	4613      	mov	r3, r2
 8004784:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bc90      	pop	{r4, r7}
 800478e:	4770      	bx	lr

08004790 <EVENT_DATA_RxEventCallback>:

__weak void EVENT_DATA_RxEventCallback(uint8_t resupply_zone_1, uint8_t resupply_zone_2, uint8_t resupply_zone_3, uint8_t small_power_rune, uint8_t large_power_rune, uint8_t central_elevated_ground, uint8_t trapezoid_elevated_ground, uint16_t last_dart_hit, uint8_t last_dart_hit_target, uint8_t central_buff){
 8004790:	b490      	push	{r4, r7}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	4604      	mov	r4, r0
 8004798:	4608      	mov	r0, r1
 800479a:	4611      	mov	r1, r2
 800479c:	461a      	mov	r2, r3
 800479e:	4623      	mov	r3, r4
 80047a0:	71fb      	strb	r3, [r7, #7]
 80047a2:	4603      	mov	r3, r0
 80047a4:	71bb      	strb	r3, [r7, #6]
 80047a6:	460b      	mov	r3, r1
 80047a8:	717b      	strb	r3, [r7, #5]
 80047aa:	4613      	mov	r3, r2
 80047ac:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 80047ae:	bf00      	nop
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bc90      	pop	{r4, r7}
 80047b6:	4770      	bx	lr

080047b8 <REFEREE_WARNING_RxEventCallback>:

__weak void REFEREE_WARNING_RxEventCallback(uint8_t penalty,uint8_t offending_robot_id,uint8_t count){
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	4603      	mov	r3, r0
 80047c0:	71fb      	strb	r3, [r7, #7]
 80047c2:	460b      	mov	r3, r1
 80047c4:	71bb      	strb	r3, [r7, #6]
 80047c6:	4613      	mov	r3, r2
 80047c8:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <DART_INFO_RxEventCallback>:

__weak void DART_INFO_RxEventCallback(uint8_t dart_remaining_time,uint8_t last_dart_hit_target,uint8_t last_target_hit_count, uint8_t current_dart_target){
 80047d6:	b490      	push	{r4, r7}
 80047d8:	b082      	sub	sp, #8
 80047da:	af00      	add	r7, sp, #0
 80047dc:	4604      	mov	r4, r0
 80047de:	4608      	mov	r0, r1
 80047e0:	4611      	mov	r1, r2
 80047e2:	461a      	mov	r2, r3
 80047e4:	4623      	mov	r3, r4
 80047e6:	71fb      	strb	r3, [r7, #7]
 80047e8:	4603      	mov	r3, r0
 80047ea:	71bb      	strb	r3, [r7, #6]
 80047ec:	460b      	mov	r3, r1
 80047ee:	717b      	strb	r3, [r7, #5]
 80047f0:	4613      	mov	r3, r2
 80047f2:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc90      	pop	{r4, r7}
 80047fc:	4770      	bx	lr

080047fe <ROBOT_POSITION_RxEventCallback>:

__weak void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
	//NOTE: This function should not be modified
}

__weak void ROBOT_POSITION_RxEventCallback(float x, float y, float angle){
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	ed87 0a03 	vstr	s0, [r7, #12]
 8004808:	edc7 0a02 	vstr	s1, [r7, #8]
 800480c:	ed87 1a01 	vstr	s2, [r7, #4]
	//NOTE: This function should not be modified
}
 8004810:	bf00      	nop
 8004812:	3714      	adds	r7, #20
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <BUFF_RxEventCallback>:

__weak void BUFF_RxEventCallback(uint8_t recovery_buff, uint8_t cooling_buff, uint8_t defence_buff, uint8_t vulnerability_buff, uint16_t attack_buff, uint8_t remaining_energy){
 800481c:	b490      	push	{r4, r7}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	4604      	mov	r4, r0
 8004824:	4608      	mov	r0, r1
 8004826:	4611      	mov	r1, r2
 8004828:	461a      	mov	r2, r3
 800482a:	4623      	mov	r3, r4
 800482c:	71fb      	strb	r3, [r7, #7]
 800482e:	4603      	mov	r3, r0
 8004830:	71bb      	strb	r3, [r7, #6]
 8004832:	460b      	mov	r3, r1
 8004834:	717b      	strb	r3, [r7, #5]
 8004836:	4613      	mov	r3, r2
 8004838:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 800483a:	bf00      	nop
 800483c:	3708      	adds	r7, #8
 800483e:	46bd      	mov	sp, r7
 8004840:	bc90      	pop	{r4, r7}
 8004842:	4770      	bx	lr

08004844 <DAMAGE_SOURCE_RxEventCallback>:

__weak void DAMAGE_SOURCE_RxEventCallback(uint8_t armor_id, uint8_t HP_deduction_reason){
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	4603      	mov	r3, r0
 800484c:	460a      	mov	r2, r1
 800484e:	71fb      	strb	r3, [r7, #7]
 8004850:	4613      	mov	r3, r2
 8004852:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <PROJECTILE_INFO_RxEventCallback>:

__weak void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	4603      	mov	r3, r0
 8004868:	ed87 0a00 	vstr	s0, [r7]
 800486c:	71fb      	strb	r3, [r7, #7]
 800486e:	460b      	mov	r3, r1
 8004870:	71bb      	strb	r3, [r7, #6]
 8004872:	4613      	mov	r3, r2
 8004874:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 8004876:	bf00      	nop
 8004878:	370c      	adds	r7, #12
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <PROJECTILE_ALLOWANCE_RxEventCallback>:

__weak void PROJECTILE_ALLOWANCE_RxEventCallback(uint16_t projectile_allowance_17mm, uint16_t projectile_allowance_42mm, uint16_t remaining_gold_coin){
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	4603      	mov	r3, r0
 800488a:	80fb      	strh	r3, [r7, #6]
 800488c:	460b      	mov	r3, r1
 800488e:	80bb      	strh	r3, [r7, #4]
 8004890:	4613      	mov	r3, r2
 8004892:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8004894:	bf00      	nop
 8004896:	370c      	adds	r7, #12
 8004898:	46bd      	mov	sp, r7
 800489a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489e:	4770      	bx	lr

080048a0 <RFID_RxEventCallback>:

__weak void RFID_RxEventCallback(uint32_t rfid_status){
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <DART_COMMAND_RxEventCallback>:

__weak void DART_COMMAND_RxEventCallback(uint8_t dart_launch_opening_status, uint16_t target_change_remaining_time, uint16_t latest_launch_cmd_remaining_time){
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	4603      	mov	r3, r0
 80048bc:	71fb      	strb	r3, [r7, #7]
 80048be:	460b      	mov	r3, r1
 80048c0:	80bb      	strh	r3, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <TEAM_POSITION_RxEventCallback>:

__weak void TEAM_POSITION_RxEventCallback(float hero_x, float hero_y, float engineer_x, float engineer_y, float standard_3_x, float standard_3_y, float standard_4_x, float standard_4_y, float standard_5_x, float standard_5_y){
 80048d2:	b480      	push	{r7}
 80048d4:	b08b      	sub	sp, #44	@ 0x2c
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80048dc:	edc7 0a08 	vstr	s1, [r7, #32]
 80048e0:	ed87 1a07 	vstr	s2, [r7, #28]
 80048e4:	edc7 1a06 	vstr	s3, [r7, #24]
 80048e8:	ed87 2a05 	vstr	s4, [r7, #20]
 80048ec:	edc7 2a04 	vstr	s5, [r7, #16]
 80048f0:	ed87 3a03 	vstr	s6, [r7, #12]
 80048f4:	edc7 3a02 	vstr	s7, [r7, #8]
 80048f8:	ed87 4a01 	vstr	s8, [r7, #4]
 80048fc:	edc7 4a00 	vstr	s9, [r7]
	//NOTE: This function should not be modified
}
 8004900:	bf00      	nop
 8004902:	372c      	adds	r7, #44	@ 0x2c
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <RADAR_MARKING_RxEventCallback>:

__weak void RADAR_MARKING_RxEventCallback(uint8_t mark_hero_progress, uint8_t mark_engineer_progress, uint8_t mark_standard_3_progress, uint8_t mark_standard_4_progress, uint8_t mark_sentry_progress){
 800490c:	b490      	push	{r4, r7}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	4604      	mov	r4, r0
 8004914:	4608      	mov	r0, r1
 8004916:	4611      	mov	r1, r2
 8004918:	461a      	mov	r2, r3
 800491a:	4623      	mov	r3, r4
 800491c:	71fb      	strb	r3, [r7, #7]
 800491e:	4603      	mov	r3, r0
 8004920:	71bb      	strb	r3, [r7, #6]
 8004922:	460b      	mov	r3, r1
 8004924:	717b      	strb	r3, [r7, #5]
 8004926:	4613      	mov	r3, r2
 8004928:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 800492a:	bf00      	nop
 800492c:	3708      	adds	r7, #8
 800492e:	46bd      	mov	sp, r7
 8004930:	bc90      	pop	{r4, r7}
 8004932:	4770      	bx	lr

08004934 <SENTRY_RxEventCallback>:

__weak void SENTRY_RxEventCallback(uint16_t exchanged_projectiles, uint8_t projectile_exchange_count, uint8_t HP_exchange_count, uint8_t confirm_free_respawn, uint8_t instant_respawn_available, uint16_t instant_respawn_cost, uint8_t in_combat, uint16_t remaining_allowance_to_exchange){
 8004934:	b490      	push	{r4, r7}
 8004936:	b082      	sub	sp, #8
 8004938:	af00      	add	r7, sp, #0
 800493a:	4604      	mov	r4, r0
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	461a      	mov	r2, r3
 8004942:	4623      	mov	r3, r4
 8004944:	80fb      	strh	r3, [r7, #6]
 8004946:	4603      	mov	r3, r0
 8004948:	717b      	strb	r3, [r7, #5]
 800494a:	460b      	mov	r3, r1
 800494c:	713b      	strb	r3, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	70fb      	strb	r3, [r7, #3]
	//NOTE: This function should not be modified
}
 8004952:	bf00      	nop
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bc90      	pop	{r4, r7}
 800495a:	4770      	bx	lr

0800495c <RADAR_BUFF_RxEventCallback>:

__weak void RADAR_BUFF_RxEventCallback(uint8_t double_vulnerability_chances, uint8_t double_vulnerability_triggered){
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
 8004962:	4603      	mov	r3, r0
 8004964:	460a      	mov	r2, r1
 8004966:	71fb      	strb	r3, [r7, #7]
 8004968:	4613      	mov	r3, r2
 800496a:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 800496c:	bf00      	nop
 800496e:	370c      	adds	r7, #12
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <MINIMAP_COMMAND_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_COMMAND_RxEventCallback(float target_position_x, float target_position_y, uint8_t cmd_keyboard, uint8_t target_robot_id, uint16_t cmd_source){
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004982:	edc7 0a02 	vstr	s1, [r7, #8]
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
 800498a:	460b      	mov	r3, r1
 800498c:	71bb      	strb	r3, [r7, #6]
 800498e:	4613      	mov	r3, r2
 8004990:	80bb      	strh	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8004992:	bf00      	nop
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <MINIMAP_DATA_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_CLIENT_RxEventCallback(uint16_t key_value, uint16_t x_position, uint16_t mouse_left, uint16_t y_position, uint16_t mouse_right){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_DATA_RxEventCallback(uint8_t intention, uint16_t start_position_x, uint16_t start_position_y, int8_t delta_x[49], int8_t delta_y[49], uint16_t sender_id){
 800499e:	b480      	push	{r7}
 80049a0:	b085      	sub	sp, #20
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	607b      	str	r3, [r7, #4]
 80049a6:	4603      	mov	r3, r0
 80049a8:	73fb      	strb	r3, [r7, #15]
 80049aa:	460b      	mov	r3, r1
 80049ac:	81bb      	strh	r3, [r7, #12]
 80049ae:	4613      	mov	r3, r2
 80049b0:	817b      	strh	r3, [r7, #10]
	//NOTE: This function should not be modified
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <CUSTOM_MESSAGE_RxEventCallback>:

__weak void CUSTOM_MESSAGE_RxEventCallback(uint8_t customMessage[128]){
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 80049c6:	bf00      	nop
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <UART_RxEventCallback_RM25Passthrough>:

__weak void UART_RxEventCallback_RM25Passthrough(UART_HandleTypeDef *huart,uint8_t RxBuff[256]){
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]

}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	4603      	mov	r3, r0
 80049f0:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80049f2:	4a04      	ldr	r2, [pc, #16]	@ (8004a04 <imu_pwm_set+0x1c>)
 80049f4:	88fb      	ldrh	r3, [r7, #6]
 80049f6:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	40014400 	.word	0x40014400

08004a08 <angSmallestDiff>:

float getNorm(int16_t x, int16_t y){
	return (sqrtf(x*x+y*y));
}

float angSmallestDiff(float target, float current){
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a12:	edc7 0a00 	vstr	s1, [r7]
	if(target>current){
 8004a16:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a1a:	edd7 7a00 	vldr	s15, [r7]
 8004a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a26:	dd2b      	ble.n	8004a80 <angSmallestDiff+0x78>
		if((target-current)>=180.0){
 8004a28:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a2c:	edd7 7a00 	vldr	s15, [r7]
 8004a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a34:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8004b00 <angSmallestDiff+0xf8>
 8004a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a40:	db0a      	blt.n	8004a58 <angSmallestDiff+0x50>
			return target-current-360.0;
 8004a42:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a46:	edd7 7a00 	vldr	s15, [r7]
 8004a4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a4e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8004b04 <angSmallestDiff+0xfc>
 8004a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a56:	e04b      	b.n	8004af0 <angSmallestDiff+0xe8>
		}
		if((target-current)<180.0){
 8004a58:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a5c:	edd7 7a00 	vldr	s15, [r7]
 8004a60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a64:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8004b00 <angSmallestDiff+0xf8>
 8004a68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a70:	d53e      	bpl.n	8004af0 <angSmallestDiff+0xe8>
			return target-current;
 8004a72:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a76:	edd7 7a00 	vldr	s15, [r7]
 8004a7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a7e:	e037      	b.n	8004af0 <angSmallestDiff+0xe8>
		}
	}
	else if(target<current){
 8004a80:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a84:	edd7 7a00 	vldr	s15, [r7]
 8004a88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a90:	d52b      	bpl.n	8004aea <angSmallestDiff+0xe2>
		if((current-target)>=180.0){
 8004a92:	ed97 7a00 	vldr	s14, [r7]
 8004a96:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a9e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8004b00 <angSmallestDiff+0xf8>
 8004aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aaa:	db0a      	blt.n	8004ac2 <angSmallestDiff+0xba>
			return target-current+360.0;
 8004aac:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ab0:	edd7 7a00 	vldr	s15, [r7]
 8004ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8004b04 <angSmallestDiff+0xfc>
 8004abc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ac0:	e016      	b.n	8004af0 <angSmallestDiff+0xe8>
		}
		if((current-target)<180.0){
 8004ac2:	ed97 7a00 	vldr	s14, [r7]
 8004ac6:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ace:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 8004b00 <angSmallestDiff+0xf8>
 8004ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ada:	d509      	bpl.n	8004af0 <angSmallestDiff+0xe8>
			return target-current;
 8004adc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ae0:	edd7 7a00 	vldr	s15, [r7]
 8004ae4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ae8:	e002      	b.n	8004af0 <angSmallestDiff+0xe8>
		}
	}else{
		return 0.0;
 8004aea:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8004b08 <angSmallestDiff+0x100>
 8004aee:	e7ff      	b.n	8004af0 <angSmallestDiff+0xe8>
	}
}
 8004af0:	eeb0 0a67 	vmov.f32	s0, s15
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	43340000 	.word	0x43340000
 8004b04:	43b40000 	.word	0x43b40000
 8004b08:	00000000 	.word	0x00000000

08004b0c <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8004b14:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004b18:	f007 fa90 	bl	800c03c <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8004b1c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8004bc0 <imu_temp_control_task+0xb4>
 8004b20:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8004bc4 <imu_temp_control_task+0xb8>
 8004b24:	4a28      	ldr	r2, [pc, #160]	@ (8004bc8 <imu_temp_control_task+0xbc>)
 8004b26:	2100      	movs	r1, #0
 8004b28:	4828      	ldr	r0, [pc, #160]	@ (8004bcc <imu_temp_control_task+0xc0>)
 8004b2a:	f001 fad1 	bl	80060d0 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004b2e:	4b28      	ldr	r3, [pc, #160]	@ (8004bd0 <imu_temp_control_task+0xc4>)
 8004b30:	2210      	movs	r2, #16
 8004b32:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004b34:	4826      	ldr	r0, [pc, #152]	@ (8004bd0 <imu_temp_control_task+0xc4>)
 8004b36:	f004 fe1c 	bl	8009772 <HAL_SPI_Init>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8004b40:	f001 fac0 	bl	80060c4 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8004b44:	2000      	movs	r0, #0
 8004b46:	f008 fb97 	bl	800d278 <pcTaskGetName>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f008 fc27 	bl	800d3a0 <xTaskGetHandle>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4a1f      	ldr	r2, [pc, #124]	@ (8004bd4 <imu_temp_control_task+0xc8>)
 8004b56:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8004b58:	4b1f      	ldr	r3, [pc, #124]	@ (8004bd8 <imu_temp_control_task+0xcc>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8004b5e:	bf00      	nop
 8004b60:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b64:	2001      	movs	r0, #1
 8004b66:	f009 f847 	bl	800dbf8 <ulTaskNotifyTake>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d1f7      	bne.n	8004b60 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8004b70:	f7fc fb72 	bl	8001258 <IMU_get_temp>
 8004b74:	eef0 7a40 	vmov.f32	s15, s0
 8004b78:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8004bdc <imu_temp_control_task+0xd0>
 8004b7c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b80:	4812      	ldr	r0, [pc, #72]	@ (8004bcc <imu_temp_control_task+0xc0>)
 8004b82:	f001 fafc 	bl	800617e <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8004b86:	4b11      	ldr	r3, [pc, #68]	@ (8004bcc <imu_temp_control_task+0xc0>)
 8004b88:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b94:	d503      	bpl.n	8004b9e <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8004b96:	4b0d      	ldr	r3, [pc, #52]	@ (8004bcc <imu_temp_control_task+0xc0>)
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8004b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <imu_temp_control_task+0xc0>)
 8004ba0:	edd3 7a08 	vldr	s15, [r3, #32]
 8004ba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba8:	ee17 3a90 	vmov	r3, s15
 8004bac:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8004bae:	89fb      	ldrh	r3, [r7, #14]
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7ff ff19 	bl	80049e8 <imu_pwm_set>
        osDelay(5);
 8004bb6:	2005      	movs	r0, #5
 8004bb8:	f007 fa40 	bl	800c03c <osDelay>
    {
 8004bbc:	e7cf      	b.n	8004b5e <imu_temp_control_task+0x52>
 8004bbe:	bf00      	nop
 8004bc0:	45898000 	.word	0x45898000
 8004bc4:	458ca000 	.word	0x458ca000
 8004bc8:	08011da4 	.word	0x08011da4
 8004bcc:	20000aac 	.word	0x20000aac
 8004bd0:	20000b9c 	.word	0x20000b9c
 8004bd4:	20000aa4 	.word	0x20000aa4
 8004bd8:	20000aa8 	.word	0x20000aa8
 8004bdc:	42200000 	.word	0x42200000

08004be0 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8004bea:	4b12      	ldr	r3, [pc, #72]	@ (8004c34 <HAL_GPIO_EXTI_Callback+0x54>)
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	88fa      	ldrh	r2, [r7, #6]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d11b      	bne.n	8004c2c <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8004bf4:	4b10      	ldr	r3, [pc, #64]	@ (8004c38 <HAL_GPIO_EXTI_Callback+0x58>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d016      	beq.n	8004c2c <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004bfe:	f008 ff6d 	bl	800dadc <xTaskGetSchedulerState>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d011      	beq.n	8004c2c <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8004c08:	4b0c      	ldr	r3, [pc, #48]	@ (8004c3c <HAL_GPIO_EXTI_Callback+0x5c>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	490c      	ldr	r1, [pc, #48]	@ (8004c40 <HAL_GPIO_EXTI_Callback+0x60>)
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f009 f83e 	bl	800dc90 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004c14:	4b0a      	ldr	r3, [pc, #40]	@ (8004c40 <HAL_GPIO_EXTI_Callback+0x60>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_GPIO_EXTI_Callback+0x4c>
 8004c1c:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <HAL_GPIO_EXTI_Callback+0x64>)
 8004c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	f3bf 8f4f 	dsb	sy
 8004c28:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8004c2c:	bf00      	nop
 8004c2e:	3708      	adds	r7, #8
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	2000000e 	.word	0x2000000e
 8004c38:	20000aa8 	.word	0x20000aa8
 8004c3c:	20000aa4 	.word	0x20000aa4
 8004c40:	20000af4 	.word	0x20000af4
 8004c44:	e000ed04 	.word	0xe000ed04

08004c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004c4c:	f002 fa14 	bl	8007078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004c50:	f000 f85a 	bl	8004d08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004c54:	f000 fccc 	bl	80055f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c58:	f000 fc8c 	bl	8005574 <MX_DMA_Init>
  MX_CAN1_Init();
 8004c5c:	f000 f8c0 	bl	8004de0 <MX_CAN1_Init>
  MX_CAN2_Init();
 8004c60:	f000 f8f4 	bl	8004e4c <MX_CAN2_Init>
  MX_SPI1_Init();
 8004c64:	f000 f956 	bl	8004f14 <MX_SPI1_Init>
  MX_TIM4_Init();
 8004c68:	f000 fa32 	bl	80050d0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8004c6c:	f000 fc02 	bl	8005474 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8004c70:	f000 fc56 	bl	8005520 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8004c74:	f000 f984 	bl	8004f80 <MX_TIM1_Init>
  MX_TIM8_Init();
 8004c78:	f000 fb12 	bl	80052a0 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8004c7c:	f000 fc24 	bl	80054c8 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8004c80:	f000 fbaa 	bl	80053d8 <MX_TIM10_Init>
  MX_I2C3_Init();
 8004c84:	f000 f918 	bl	8004eb8 <MX_I2C3_Init>
  MX_TIM5_Init();
 8004c88:	f000 fa9a 	bl	80051c0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004c8c:	f007 f8fa 	bl	800be84 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of FlowManager */
  FlowManagerHandle = osThreadNew(StartFlowManager, NULL, &FlowManager_attributes);
 8004c90:	4a11      	ldr	r2, [pc, #68]	@ (8004cd8 <main+0x90>)
 8004c92:	2100      	movs	r1, #0
 8004c94:	4811      	ldr	r0, [pc, #68]	@ (8004cdc <main+0x94>)
 8004c96:	f007 f93f 	bl	800bf18 <osThreadNew>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	4a10      	ldr	r2, [pc, #64]	@ (8004ce0 <main+0x98>)
 8004c9e:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8004ca0:	4a10      	ldr	r2, [pc, #64]	@ (8004ce4 <main+0x9c>)
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	4810      	ldr	r0, [pc, #64]	@ (8004ce8 <main+0xa0>)
 8004ca6:	f007 f937 	bl	800bf18 <osThreadNew>
 8004caa:	4603      	mov	r3, r0
 8004cac:	4a0f      	ldr	r2, [pc, #60]	@ (8004cec <main+0xa4>)
 8004cae:	6013      	str	r3, [r2, #0]

  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(StartChassisTask, NULL, &ChassisTask_attributes);
 8004cb0:	4a0f      	ldr	r2, [pc, #60]	@ (8004cf0 <main+0xa8>)
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	480f      	ldr	r0, [pc, #60]	@ (8004cf4 <main+0xac>)
 8004cb6:	f007 f92f 	bl	800bf18 <osThreadNew>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf8 <main+0xb0>)
 8004cbe:	6013      	str	r3, [r2, #0]

  /* creation of SentryAutonomy */
  SentryAutonomyHandle = osThreadNew(StartSentryAutonomy, NULL, &SentryAutonomy_attributes);
 8004cc0:	4a0e      	ldr	r2, [pc, #56]	@ (8004cfc <main+0xb4>)
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	480e      	ldr	r0, [pc, #56]	@ (8004d00 <main+0xb8>)
 8004cc6:	f007 f927 	bl	800bf18 <osThreadNew>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8004d04 <main+0xbc>)
 8004cce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8004cd0:	f007 f8fc 	bl	800becc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004cd4:	bf00      	nop
 8004cd6:	e7fd      	b.n	8004cd4 <main+0x8c>
 8004cd8:	08011db0 	.word	0x08011db0
 8004cdc:	080057fd 	.word	0x080057fd
 8004ce0:	20000f54 	.word	0x20000f54
 8004ce4:	08011dd4 	.word	0x08011dd4
 8004ce8:	08004b0d 	.word	0x08004b0d
 8004cec:	20000f58 	.word	0x20000f58
 8004cf0:	08011df8 	.word	0x08011df8
 8004cf4:	08005881 	.word	0x08005881
 8004cf8:	20000f5c 	.word	0x20000f5c
 8004cfc:	08011e1c 	.word	0x08011e1c
 8004d00:	080060b5 	.word	0x080060b5
 8004d04:	20000f60 	.word	0x20000f60

08004d08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b094      	sub	sp, #80	@ 0x50
 8004d0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004d0e:	f107 0320 	add.w	r3, r7, #32
 8004d12:	2230      	movs	r2, #48	@ 0x30
 8004d14:	2100      	movs	r1, #0
 8004d16:	4618      	mov	r0, r3
 8004d18:	f00a fd76 	bl	800f808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004d1c:	f107 030c 	add.w	r3, r7, #12
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
 8004d24:	605a      	str	r2, [r3, #4]
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	60da      	str	r2, [r3, #12]
 8004d2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	60bb      	str	r3, [r7, #8]
 8004d30:	4b29      	ldr	r3, [pc, #164]	@ (8004dd8 <SystemClock_Config+0xd0>)
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	4a28      	ldr	r2, [pc, #160]	@ (8004dd8 <SystemClock_Config+0xd0>)
 8004d36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d3c:	4b26      	ldr	r3, [pc, #152]	@ (8004dd8 <SystemClock_Config+0xd0>)
 8004d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d48:	2300      	movs	r3, #0
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	4b23      	ldr	r3, [pc, #140]	@ (8004ddc <SystemClock_Config+0xd4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a22      	ldr	r2, [pc, #136]	@ (8004ddc <SystemClock_Config+0xd4>)
 8004d52:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b20      	ldr	r3, [pc, #128]	@ (8004ddc <SystemClock_Config+0xd4>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004d68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8004d78:	2306      	movs	r3, #6
 8004d7a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004d7c:	23a8      	movs	r3, #168	@ 0xa8
 8004d7e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004d80:	2302      	movs	r3, #2
 8004d82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004d84:	2304      	movs	r3, #4
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d88:	f107 0320 	add.w	r3, r7, #32
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f004 f871 	bl	8008e74 <HAL_RCC_OscConfig>
 8004d92:	4603      	mov	r3, r0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d001      	beq.n	8004d9c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8004d98:	f001 f994 	bl	80060c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d9c:	230f      	movs	r3, #15
 8004d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004da0:	2302      	movs	r3, #2
 8004da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004da8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8004dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004db2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004db4:	f107 030c 	add.w	r3, r7, #12
 8004db8:	2105      	movs	r1, #5
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f004 fad2 	bl	8009364 <HAL_RCC_ClockConfig>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8004dc6:	f001 f97d 	bl	80060c4 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8004dca:	f004 fbb1 	bl	8009530 <HAL_RCC_EnableCSS>
}
 8004dce:	bf00      	nop
 8004dd0:	3750      	adds	r7, #80	@ 0x50
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	40007000 	.word	0x40007000

08004de0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004de4:	4b17      	ldr	r3, [pc, #92]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004de6:	4a18      	ldr	r2, [pc, #96]	@ (8004e48 <MX_CAN1_Init+0x68>)
 8004de8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8004dea:	4b16      	ldr	r3, [pc, #88]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004dec:	2203      	movs	r2, #3
 8004dee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004df0:	4b14      	ldr	r3, [pc, #80]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004df6:	4b13      	ldr	r3, [pc, #76]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8004dfc:	4b11      	ldr	r3, [pc, #68]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004dfe:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8004e02:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004e04:	4b0f      	ldr	r3, [pc, #60]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004e06:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004e0a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8004e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8004e12:	4b0c      	ldr	r3, [pc, #48]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004e18:	4b0a      	ldr	r3, [pc, #40]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8004e1e:	4b09      	ldr	r3, [pc, #36]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004e24:	4b07      	ldr	r3, [pc, #28]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8004e2a:	4b06      	ldr	r3, [pc, #24]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004e30:	4804      	ldr	r0, [pc, #16]	@ (8004e44 <MX_CAN1_Init+0x64>)
 8004e32:	f002 f993 	bl	800715c <HAL_CAN_Init>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8004e3c:	f001 f942 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004e40:	bf00      	nop
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	20000af8 	.word	0x20000af8
 8004e48:	40006400 	.word	0x40006400

08004e4c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8004e50:	4b17      	ldr	r3, [pc, #92]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e52:	4a18      	ldr	r2, [pc, #96]	@ (8004eb4 <MX_CAN2_Init+0x68>)
 8004e54:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8004e56:	4b16      	ldr	r3, [pc, #88]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e58:	2203      	movs	r2, #3
 8004e5a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8004e5c:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e5e:	2200      	movs	r2, #0
 8004e60:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004e62:	4b13      	ldr	r3, [pc, #76]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e64:	2200      	movs	r2, #0
 8004e66:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8004e68:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e6a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8004e6e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004e70:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e72:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004e76:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8004e78:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8004e84:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8004e8a:	4b09      	ldr	r3, [pc, #36]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8004e90:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e92:	2200      	movs	r2, #0
 8004e94:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8004e96:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8004e9c:	4804      	ldr	r0, [pc, #16]	@ (8004eb0 <MX_CAN2_Init+0x64>)
 8004e9e:	f002 f95d 	bl	800715c <HAL_CAN_Init>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8004ea8:	f001 f90c 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8004eac:	bf00      	nop
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000b20 	.word	0x20000b20
 8004eb4:	40006800 	.word	0x40006800

08004eb8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8004ebc:	4b12      	ldr	r3, [pc, #72]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004ebe:	4a13      	ldr	r2, [pc, #76]	@ (8004f0c <MX_I2C3_Init+0x54>)
 8004ec0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8004ec2:	4b11      	ldr	r3, [pc, #68]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004ec4:	4a12      	ldr	r2, [pc, #72]	@ (8004f10 <MX_I2C3_Init+0x58>)
 8004ec6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004eca:	2200      	movs	r2, #0
 8004ecc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8004ece:	4b0e      	ldr	r3, [pc, #56]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004ed6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004eda:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004edc:	4b0a      	ldr	r3, [pc, #40]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8004ee2:	4b09      	ldr	r3, [pc, #36]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004ee8:	4b07      	ldr	r3, [pc, #28]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8004ef4:	4804      	ldr	r0, [pc, #16]	@ (8004f08 <MX_I2C3_Init+0x50>)
 8004ef6:	f003 fe79 	bl	8008bec <HAL_I2C_Init>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8004f00:	f001 f8e0 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8004f04:	bf00      	nop
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000b48 	.word	0x20000b48
 8004f0c:	40005c00 	.word	0x40005c00
 8004f10:	00061a80 	.word	0x00061a80

08004f14 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004f18:	4b17      	ldr	r3, [pc, #92]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f1a:	4a18      	ldr	r2, [pc, #96]	@ (8004f7c <MX_SPI1_Init+0x68>)
 8004f1c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f1e:	4b16      	ldr	r3, [pc, #88]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004f24:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004f26:	4b14      	ldr	r3, [pc, #80]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f2c:	4b12      	ldr	r3, [pc, #72]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004f32:	4b11      	ldr	r3, [pc, #68]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f34:	2202      	movs	r2, #2
 8004f36:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004f38:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f44:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004f46:	4b0c      	ldr	r3, [pc, #48]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f48:	2238      	movs	r2, #56	@ 0x38
 8004f4a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f52:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f58:	4b07      	ldr	r3, [pc, #28]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004f5e:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f60:	220a      	movs	r2, #10
 8004f62:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f64:	4804      	ldr	r0, [pc, #16]	@ (8004f78 <MX_SPI1_Init+0x64>)
 8004f66:	f004 fc04 	bl	8009772 <HAL_SPI_Init>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d001      	beq.n	8004f74 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004f70:	f001 f8a8 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004f74:	bf00      	nop
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	20000b9c 	.word	0x20000b9c
 8004f7c:	40013000 	.word	0x40013000

08004f80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b092      	sub	sp, #72	@ 0x48
 8004f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]
 8004f8e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	60da      	str	r2, [r3, #12]
 8004f9e:	611a      	str	r2, [r3, #16]
 8004fa0:	615a      	str	r2, [r3, #20]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004fa4:	1d3b      	adds	r3, r7, #4
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4618      	mov	r0, r3
 8004fac:	f00a fc2c 	bl	800f808 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004fb0:	4b45      	ldr	r3, [pc, #276]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8004fb2:	4a46      	ldr	r2, [pc, #280]	@ (80050cc <MX_TIM1_Init+0x14c>)
 8004fb4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8004fb6:	4b44      	ldr	r3, [pc, #272]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8004fb8:	2253      	movs	r2, #83	@ 0x53
 8004fba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fbc:	4b42      	ldr	r3, [pc, #264]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8004fc2:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8004fc4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8004fc8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004fca:	4b3f      	ldr	r3, [pc, #252]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8004fcc:	2200      	movs	r2, #0
 8004fce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004fd0:	4b3d      	ldr	r3, [pc, #244]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8004fd8:	2200      	movs	r2, #0
 8004fda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004fdc:	483a      	ldr	r0, [pc, #232]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8004fde:	f004 ff26 	bl	8009e2e <HAL_TIM_PWM_Init>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004fe8:	f001 f86c 	bl	80060c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fec:	2300      	movs	r3, #0
 8004fee:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004ff4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4833      	ldr	r0, [pc, #204]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8004ffc:	f005 fbe0 	bl	800a7c0 <HAL_TIMEx_MasterConfigSynchronization>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8005006:	f001 f85d 	bl	80060c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800500a:	2360      	movs	r3, #96	@ 0x60
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800500e:	2300      	movs	r3, #0
 8005010:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005012:	2300      	movs	r3, #0
 8005014:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005016:	2300      	movs	r3, #0
 8005018:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800501a:	2300      	movs	r3, #0
 800501c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800501e:	2300      	movs	r3, #0
 8005020:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005022:	2300      	movs	r3, #0
 8005024:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005026:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800502a:	2200      	movs	r2, #0
 800502c:	4619      	mov	r1, r3
 800502e:	4826      	ldr	r0, [pc, #152]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8005030:	f004 ff4c 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800503a:	f001 f843 	bl	80060c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800503e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005042:	2204      	movs	r2, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4820      	ldr	r0, [pc, #128]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8005048:	f004 ff40 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d001      	beq.n	8005056 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8005052:	f001 f837 	bl	80060c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005056:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800505a:	2208      	movs	r2, #8
 800505c:	4619      	mov	r1, r3
 800505e:	481a      	ldr	r0, [pc, #104]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8005060:	f004 ff34 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 800506a:	f001 f82b 	bl	80060c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800506e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005072:	220c      	movs	r2, #12
 8005074:	4619      	mov	r1, r3
 8005076:	4814      	ldr	r0, [pc, #80]	@ (80050c8 <MX_TIM1_Init+0x148>)
 8005078:	f004 ff28 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8005082:	f001 f81f 	bl	80060c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8005086:	2300      	movs	r3, #0
 8005088:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800508a:	2300      	movs	r3, #0
 800508c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005092:	2300      	movs	r3, #0
 8005094:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8005096:	2300      	movs	r3, #0
 8005098:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800509a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800509e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80050a0:	2300      	movs	r3, #0
 80050a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80050a4:	1d3b      	adds	r3, r7, #4
 80050a6:	4619      	mov	r1, r3
 80050a8:	4807      	ldr	r0, [pc, #28]	@ (80050c8 <MX_TIM1_Init+0x148>)
 80050aa:	f005 fc05 	bl	800a8b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80050ae:	4603      	mov	r3, r0
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80050b4:	f001 f806 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80050b8:	4803      	ldr	r0, [pc, #12]	@ (80050c8 <MX_TIM1_Init+0x148>)
 80050ba:	f001 fbdd 	bl	8006878 <HAL_TIM_MspPostInit>

}
 80050be:	bf00      	nop
 80050c0:	3748      	adds	r7, #72	@ 0x48
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000bf4 	.word	0x20000bf4
 80050cc:	40010000 	.word	0x40010000

080050d0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	@ 0x38
 80050d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80050d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
 80050de:	605a      	str	r2, [r3, #4]
 80050e0:	609a      	str	r2, [r3, #8]
 80050e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80050e4:	f107 0320 	add.w	r3, r7, #32
 80050e8:	2200      	movs	r2, #0
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80050ee:	1d3b      	adds	r3, r7, #4
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	611a      	str	r2, [r3, #16]
 80050fc:	615a      	str	r2, [r3, #20]
 80050fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005100:	4b2d      	ldr	r3, [pc, #180]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 8005102:	4a2e      	ldr	r2, [pc, #184]	@ (80051bc <MX_TIM4_Init+0xec>)
 8005104:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005106:	4b2c      	ldr	r3, [pc, #176]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 8005108:	2200      	movs	r2, #0
 800510a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800510c:	4b2a      	ldr	r3, [pc, #168]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 800510e:	2200      	movs	r2, #0
 8005110:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8005112:	4b29      	ldr	r3, [pc, #164]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 8005114:	f245 2207 	movw	r2, #20999	@ 0x5207
 8005118:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800511a:	4b27      	ldr	r3, [pc, #156]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 800511c:	2200      	movs	r2, #0
 800511e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005120:	4b25      	ldr	r3, [pc, #148]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 8005122:	2280      	movs	r2, #128	@ 0x80
 8005124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8005126:	4824      	ldr	r0, [pc, #144]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 8005128:	f004 fe32 	bl	8009d90 <HAL_TIM_Base_Init>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8005132:	f000 ffc7 	bl	80060c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005136:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800513a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800513c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8005140:	4619      	mov	r1, r3
 8005142:	481d      	ldr	r0, [pc, #116]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 8005144:	f004 ff84 	bl	800a050 <HAL_TIM_ConfigClockSource>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800514e:	f000 ffb9 	bl	80060c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005152:	4819      	ldr	r0, [pc, #100]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 8005154:	f004 fe6b 	bl	8009e2e <HAL_TIM_PWM_Init>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800515e:	f000 ffb1 	bl	80060c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005162:	2300      	movs	r3, #0
 8005164:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005166:	2300      	movs	r3, #0
 8005168:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800516a:	f107 0320 	add.w	r3, r7, #32
 800516e:	4619      	mov	r1, r3
 8005170:	4811      	ldr	r0, [pc, #68]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 8005172:	f005 fb25 	bl	800a7c0 <HAL_TIMEx_MasterConfigSynchronization>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800517c:	f000 ffa2 	bl	80060c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005180:	2360      	movs	r3, #96	@ 0x60
 8005182:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8005184:	f642 1303 	movw	r3, #10499	@ 0x2903
 8005188:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800518a:	2300      	movs	r3, #0
 800518c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005192:	1d3b      	adds	r3, r7, #4
 8005194:	2208      	movs	r2, #8
 8005196:	4619      	mov	r1, r3
 8005198:	4807      	ldr	r0, [pc, #28]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 800519a:	f004 fe97 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80051a4:	f000 ff8e 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80051a8:	4803      	ldr	r0, [pc, #12]	@ (80051b8 <MX_TIM4_Init+0xe8>)
 80051aa:	f001 fb65 	bl	8006878 <HAL_TIM_MspPostInit>

}
 80051ae:	bf00      	nop
 80051b0:	3738      	adds	r7, #56	@ 0x38
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	20000c3c 	.word	0x20000c3c
 80051bc:	40000800 	.word	0x40000800

080051c0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08a      	sub	sp, #40	@ 0x28
 80051c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80051c6:	f107 0320 	add.w	r3, r7, #32
 80051ca:	2200      	movs	r2, #0
 80051cc:	601a      	str	r2, [r3, #0]
 80051ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80051d0:	1d3b      	adds	r3, r7, #4
 80051d2:	2200      	movs	r2, #0
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	605a      	str	r2, [r3, #4]
 80051d8:	609a      	str	r2, [r3, #8]
 80051da:	60da      	str	r2, [r3, #12]
 80051dc:	611a      	str	r2, [r3, #16]
 80051de:	615a      	str	r2, [r3, #20]
 80051e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80051e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005298 <MX_TIM5_Init+0xd8>)
 80051e4:	4a2d      	ldr	r2, [pc, #180]	@ (800529c <MX_TIM5_Init+0xdc>)
 80051e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 80051e8:	4b2b      	ldr	r3, [pc, #172]	@ (8005298 <MX_TIM5_Init+0xd8>)
 80051ea:	222a      	movs	r2, #42	@ 0x2a
 80051ec:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051ee:	4b2a      	ldr	r3, [pc, #168]	@ (8005298 <MX_TIM5_Init+0xd8>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 80051f4:	4b28      	ldr	r3, [pc, #160]	@ (8005298 <MX_TIM5_Init+0xd8>)
 80051f6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80051fa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051fc:	4b26      	ldr	r3, [pc, #152]	@ (8005298 <MX_TIM5_Init+0xd8>)
 80051fe:	2200      	movs	r2, #0
 8005200:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005202:	4b25      	ldr	r3, [pc, #148]	@ (8005298 <MX_TIM5_Init+0xd8>)
 8005204:	2200      	movs	r2, #0
 8005206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8005208:	4823      	ldr	r0, [pc, #140]	@ (8005298 <MX_TIM5_Init+0xd8>)
 800520a:	f004 fe10 	bl	8009e2e <HAL_TIM_PWM_Init>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8005214:	f000 ff56 	bl	80060c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005218:	2300      	movs	r3, #0
 800521a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800521c:	2300      	movs	r3, #0
 800521e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005220:	f107 0320 	add.w	r3, r7, #32
 8005224:	4619      	mov	r1, r3
 8005226:	481c      	ldr	r0, [pc, #112]	@ (8005298 <MX_TIM5_Init+0xd8>)
 8005228:	f005 faca 	bl	800a7c0 <HAL_TIMEx_MasterConfigSynchronization>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d001      	beq.n	8005236 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8005232:	f000 ff47 	bl	80060c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005236:	2360      	movs	r3, #96	@ 0x60
 8005238:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005246:	1d3b      	adds	r3, r7, #4
 8005248:	2200      	movs	r2, #0
 800524a:	4619      	mov	r1, r3
 800524c:	4812      	ldr	r0, [pc, #72]	@ (8005298 <MX_TIM5_Init+0xd8>)
 800524e:	f004 fe3d 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8005258:	f000 ff34 	bl	80060c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	2204      	movs	r2, #4
 8005260:	4619      	mov	r1, r3
 8005262:	480d      	ldr	r0, [pc, #52]	@ (8005298 <MX_TIM5_Init+0xd8>)
 8005264:	f004 fe32 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d001      	beq.n	8005272 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800526e:	f000 ff29 	bl	80060c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005272:	1d3b      	adds	r3, r7, #4
 8005274:	2208      	movs	r2, #8
 8005276:	4619      	mov	r1, r3
 8005278:	4807      	ldr	r0, [pc, #28]	@ (8005298 <MX_TIM5_Init+0xd8>)
 800527a:	f004 fe27 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8005284:	f000 ff1e 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8005288:	4803      	ldr	r0, [pc, #12]	@ (8005298 <MX_TIM5_Init+0xd8>)
 800528a:	f001 faf5 	bl	8006878 <HAL_TIM_MspPostInit>

}
 800528e:	bf00      	nop
 8005290:	3728      	adds	r7, #40	@ 0x28
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	20000c84 	.word	0x20000c84
 800529c:	40000c00 	.word	0x40000c00

080052a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b092      	sub	sp, #72	@ 0x48
 80052a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052a6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80052aa:	2200      	movs	r2, #0
 80052ac:	601a      	str	r2, [r3, #0]
 80052ae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80052b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052b4:	2200      	movs	r2, #0
 80052b6:	601a      	str	r2, [r3, #0]
 80052b8:	605a      	str	r2, [r3, #4]
 80052ba:	609a      	str	r2, [r3, #8]
 80052bc:	60da      	str	r2, [r3, #12]
 80052be:	611a      	str	r2, [r3, #16]
 80052c0:	615a      	str	r2, [r3, #20]
 80052c2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052c4:	1d3b      	adds	r3, r7, #4
 80052c6:	2220      	movs	r2, #32
 80052c8:	2100      	movs	r1, #0
 80052ca:	4618      	mov	r0, r3
 80052cc:	f00a fa9c 	bl	800f808 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80052d0:	4b3f      	ldr	r3, [pc, #252]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80052d2:	4a40      	ldr	r2, [pc, #256]	@ (80053d4 <MX_TIM8_Init+0x134>)
 80052d4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80052d6:	4b3e      	ldr	r3, [pc, #248]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80052d8:	2253      	movs	r2, #83	@ 0x53
 80052da:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052dc:	4b3c      	ldr	r3, [pc, #240]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80052de:	2200      	movs	r2, #0
 80052e0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80052e2:	4b3b      	ldr	r3, [pc, #236]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80052e4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80052e8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052ea:	4b39      	ldr	r3, [pc, #228]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80052f0:	4b37      	ldr	r3, [pc, #220]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052f6:	4b36      	ldr	r3, [pc, #216]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80052f8:	2280      	movs	r2, #128	@ 0x80
 80052fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80052fc:	4834      	ldr	r0, [pc, #208]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80052fe:	f004 fd96 	bl	8009e2e <HAL_TIM_PWM_Init>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d001      	beq.n	800530c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8005308:	f000 fedc 	bl	80060c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800530c:	2300      	movs	r3, #0
 800530e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005310:	2300      	movs	r3, #0
 8005312:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005314:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005318:	4619      	mov	r1, r3
 800531a:	482d      	ldr	r0, [pc, #180]	@ (80053d0 <MX_TIM8_Init+0x130>)
 800531c:	f005 fa50 	bl	800a7c0 <HAL_TIMEx_MasterConfigSynchronization>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8005326:	f000 fecd 	bl	80060c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800532a:	2360      	movs	r3, #96	@ 0x60
 800532c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800532e:	2300      	movs	r3, #0
 8005330:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005332:	2300      	movs	r3, #0
 8005334:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005336:	2300      	movs	r3, #0
 8005338:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800533a:	2300      	movs	r3, #0
 800533c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800533e:	2300      	movs	r3, #0
 8005340:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005342:	2300      	movs	r3, #0
 8005344:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800534a:	2200      	movs	r2, #0
 800534c:	4619      	mov	r1, r3
 800534e:	4820      	ldr	r0, [pc, #128]	@ (80053d0 <MX_TIM8_Init+0x130>)
 8005350:	f004 fdbc 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800535a:	f000 feb3 	bl	80060c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800535e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005362:	2204      	movs	r2, #4
 8005364:	4619      	mov	r1, r3
 8005366:	481a      	ldr	r0, [pc, #104]	@ (80053d0 <MX_TIM8_Init+0x130>)
 8005368:	f004 fdb0 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8005372:	f000 fea7 	bl	80060c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800537a:	2208      	movs	r2, #8
 800537c:	4619      	mov	r1, r3
 800537e:	4814      	ldr	r0, [pc, #80]	@ (80053d0 <MX_TIM8_Init+0x130>)
 8005380:	f004 fda4 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 800538a:	f000 fe9b 	bl	80060c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005396:	2300      	movs	r3, #0
 8005398:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800539e:	2300      	movs	r3, #0
 80053a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80053a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80053a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80053a8:	2300      	movs	r3, #0
 80053aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80053ac:	1d3b      	adds	r3, r7, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	4807      	ldr	r0, [pc, #28]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80053b2:	f005 fa81 	bl	800a8b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80053bc:	f000 fe82 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80053c0:	4803      	ldr	r0, [pc, #12]	@ (80053d0 <MX_TIM8_Init+0x130>)
 80053c2:	f001 fa59 	bl	8006878 <HAL_TIM_MspPostInit>

}
 80053c6:	bf00      	nop
 80053c8:	3748      	adds	r7, #72	@ 0x48
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000ccc 	.word	0x20000ccc
 80053d4:	40010400 	.word	0x40010400

080053d8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80053de:	1d3b      	adds	r3, r7, #4
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	611a      	str	r2, [r3, #16]
 80053ec:	615a      	str	r2, [r3, #20]
 80053ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80053f0:	4b1e      	ldr	r3, [pc, #120]	@ (800546c <MX_TIM10_Init+0x94>)
 80053f2:	4a1f      	ldr	r2, [pc, #124]	@ (8005470 <MX_TIM10_Init+0x98>)
 80053f4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80053f6:	4b1d      	ldr	r3, [pc, #116]	@ (800546c <MX_TIM10_Init+0x94>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053fc:	4b1b      	ldr	r3, [pc, #108]	@ (800546c <MX_TIM10_Init+0x94>)
 80053fe:	2200      	movs	r2, #0
 8005400:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8005402:	4b1a      	ldr	r3, [pc, #104]	@ (800546c <MX_TIM10_Init+0x94>)
 8005404:	f241 3287 	movw	r2, #4999	@ 0x1387
 8005408:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800540a:	4b18      	ldr	r3, [pc, #96]	@ (800546c <MX_TIM10_Init+0x94>)
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005410:	4b16      	ldr	r3, [pc, #88]	@ (800546c <MX_TIM10_Init+0x94>)
 8005412:	2200      	movs	r2, #0
 8005414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005416:	4815      	ldr	r0, [pc, #84]	@ (800546c <MX_TIM10_Init+0x94>)
 8005418:	f004 fcba 	bl	8009d90 <HAL_TIM_Base_Init>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005422:	f000 fe4f 	bl	80060c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005426:	4811      	ldr	r0, [pc, #68]	@ (800546c <MX_TIM10_Init+0x94>)
 8005428:	f004 fd01 	bl	8009e2e <HAL_TIM_PWM_Init>
 800542c:	4603      	mov	r3, r0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d001      	beq.n	8005436 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005432:	f000 fe47 	bl	80060c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005436:	2360      	movs	r3, #96	@ 0x60
 8005438:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005442:	2300      	movs	r3, #0
 8005444:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005446:	1d3b      	adds	r3, r7, #4
 8005448:	2200      	movs	r2, #0
 800544a:	4619      	mov	r1, r3
 800544c:	4807      	ldr	r0, [pc, #28]	@ (800546c <MX_TIM10_Init+0x94>)
 800544e:	f004 fd3d 	bl	8009ecc <HAL_TIM_PWM_ConfigChannel>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005458:	f000 fe34 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800545c:	4803      	ldr	r0, [pc, #12]	@ (800546c <MX_TIM10_Init+0x94>)
 800545e:	f001 fa0b 	bl	8006878 <HAL_TIM_MspPostInit>

}
 8005462:	bf00      	nop
 8005464:	3720      	adds	r7, #32
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	20000d14 	.word	0x20000d14
 8005470:	40014400 	.word	0x40014400

08005474 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005478:	4b11      	ldr	r3, [pc, #68]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 800547a:	4a12      	ldr	r2, [pc, #72]	@ (80054c4 <MX_USART1_UART_Init+0x50>)
 800547c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800547e:	4b10      	ldr	r3, [pc, #64]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 8005480:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005484:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005486:	4b0e      	ldr	r3, [pc, #56]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 8005488:	2200      	movs	r2, #0
 800548a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800548c:	4b0c      	ldr	r3, [pc, #48]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 800548e:	2200      	movs	r2, #0
 8005490:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005492:	4b0b      	ldr	r3, [pc, #44]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 8005494:	2200      	movs	r2, #0
 8005496:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005498:	4b09      	ldr	r3, [pc, #36]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 800549a:	220c      	movs	r2, #12
 800549c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800549e:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80054a4:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 80054a6:	2200      	movs	r2, #0
 80054a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80054aa:	4805      	ldr	r0, [pc, #20]	@ (80054c0 <MX_USART1_UART_Init+0x4c>)
 80054ac:	f005 fa56 	bl	800a95c <HAL_UART_Init>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d001      	beq.n	80054ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80054b6:	f000 fe05 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80054ba:	bf00      	nop
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000d5c 	.word	0x20000d5c
 80054c4:	40011000 	.word	0x40011000

080054c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80054cc:	4b11      	ldr	r3, [pc, #68]	@ (8005514 <MX_USART3_UART_Init+0x4c>)
 80054ce:	4a12      	ldr	r2, [pc, #72]	@ (8005518 <MX_USART3_UART_Init+0x50>)
 80054d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80054d2:	4b10      	ldr	r3, [pc, #64]	@ (8005514 <MX_USART3_UART_Init+0x4c>)
 80054d4:	4a11      	ldr	r2, [pc, #68]	@ (800551c <MX_USART3_UART_Init+0x54>)
 80054d6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80054d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005514 <MX_USART3_UART_Init+0x4c>)
 80054da:	2200      	movs	r2, #0
 80054dc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80054de:	4b0d      	ldr	r3, [pc, #52]	@ (8005514 <MX_USART3_UART_Init+0x4c>)
 80054e0:	2200      	movs	r2, #0
 80054e2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80054e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005514 <MX_USART3_UART_Init+0x4c>)
 80054e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80054ec:	4b09      	ldr	r3, [pc, #36]	@ (8005514 <MX_USART3_UART_Init+0x4c>)
 80054ee:	220c      	movs	r2, #12
 80054f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80054f2:	4b08      	ldr	r3, [pc, #32]	@ (8005514 <MX_USART3_UART_Init+0x4c>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80054f8:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <MX_USART3_UART_Init+0x4c>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80054fe:	4805      	ldr	r0, [pc, #20]	@ (8005514 <MX_USART3_UART_Init+0x4c>)
 8005500:	f005 fa2c 	bl	800a95c <HAL_UART_Init>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d001      	beq.n	800550e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800550a:	f000 fddb 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800550e:	bf00      	nop
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20000da4 	.word	0x20000da4
 8005518:	40004800 	.word	0x40004800
 800551c:	000186a0 	.word	0x000186a0

08005520 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8005524:	4b11      	ldr	r3, [pc, #68]	@ (800556c <MX_USART6_UART_Init+0x4c>)
 8005526:	4a12      	ldr	r2, [pc, #72]	@ (8005570 <MX_USART6_UART_Init+0x50>)
 8005528:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800552a:	4b10      	ldr	r3, [pc, #64]	@ (800556c <MX_USART6_UART_Init+0x4c>)
 800552c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8005530:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8005532:	4b0e      	ldr	r3, [pc, #56]	@ (800556c <MX_USART6_UART_Init+0x4c>)
 8005534:	2200      	movs	r2, #0
 8005536:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8005538:	4b0c      	ldr	r3, [pc, #48]	@ (800556c <MX_USART6_UART_Init+0x4c>)
 800553a:	2200      	movs	r2, #0
 800553c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800553e:	4b0b      	ldr	r3, [pc, #44]	@ (800556c <MX_USART6_UART_Init+0x4c>)
 8005540:	2200      	movs	r2, #0
 8005542:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8005544:	4b09      	ldr	r3, [pc, #36]	@ (800556c <MX_USART6_UART_Init+0x4c>)
 8005546:	220c      	movs	r2, #12
 8005548:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800554a:	4b08      	ldr	r3, [pc, #32]	@ (800556c <MX_USART6_UART_Init+0x4c>)
 800554c:	2200      	movs	r2, #0
 800554e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005550:	4b06      	ldr	r3, [pc, #24]	@ (800556c <MX_USART6_UART_Init+0x4c>)
 8005552:	2200      	movs	r2, #0
 8005554:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8005556:	4805      	ldr	r0, [pc, #20]	@ (800556c <MX_USART6_UART_Init+0x4c>)
 8005558:	f005 fa00 	bl	800a95c <HAL_UART_Init>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8005562:	f000 fdaf 	bl	80060c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8005566:	bf00      	nop
 8005568:	bd80      	pop	{r7, pc}
 800556a:	bf00      	nop
 800556c:	20000dec 	.word	0x20000dec
 8005570:	40011400 	.word	0x40011400

08005574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b082      	sub	sp, #8
 8005578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	4b1b      	ldr	r3, [pc, #108]	@ (80055ec <MX_DMA_Init+0x78>)
 8005580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005582:	4a1a      	ldr	r2, [pc, #104]	@ (80055ec <MX_DMA_Init+0x78>)
 8005584:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005588:	6313      	str	r3, [r2, #48]	@ 0x30
 800558a:	4b18      	ldr	r3, [pc, #96]	@ (80055ec <MX_DMA_Init+0x78>)
 800558c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005592:	607b      	str	r3, [r7, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005596:	2300      	movs	r3, #0
 8005598:	603b      	str	r3, [r7, #0]
 800559a:	4b14      	ldr	r3, [pc, #80]	@ (80055ec <MX_DMA_Init+0x78>)
 800559c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800559e:	4a13      	ldr	r2, [pc, #76]	@ (80055ec <MX_DMA_Init+0x78>)
 80055a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80055a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80055a6:	4b11      	ldr	r3, [pc, #68]	@ (80055ec <MX_DMA_Init+0x78>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80055b2:	2200      	movs	r2, #0
 80055b4:	2105      	movs	r1, #5
 80055b6:	200c      	movs	r0, #12
 80055b8:	f002 fd11 	bl	8007fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80055bc:	200c      	movs	r0, #12
 80055be:	f002 fd2a 	bl	8008016 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80055c2:	2200      	movs	r2, #0
 80055c4:	2105      	movs	r1, #5
 80055c6:	2039      	movs	r0, #57	@ 0x39
 80055c8:	f002 fd09 	bl	8007fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80055cc:	2039      	movs	r0, #57	@ 0x39
 80055ce:	f002 fd22 	bl	8008016 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80055d2:	2200      	movs	r2, #0
 80055d4:	2105      	movs	r1, #5
 80055d6:	203a      	movs	r0, #58	@ 0x3a
 80055d8:	f002 fd01 	bl	8007fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80055dc:	203a      	movs	r0, #58	@ 0x3a
 80055de:	f002 fd1a 	bl	8008016 <HAL_NVIC_EnableIRQ>

}
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40023800 	.word	0x40023800

080055f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b08e      	sub	sp, #56	@ 0x38
 80055f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	605a      	str	r2, [r3, #4]
 8005600:	609a      	str	r2, [r3, #8]
 8005602:	60da      	str	r2, [r3, #12]
 8005604:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005606:	2300      	movs	r3, #0
 8005608:	623b      	str	r3, [r7, #32]
 800560a:	4b77      	ldr	r3, [pc, #476]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 800560c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800560e:	4a76      	ldr	r2, [pc, #472]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005610:	f043 0302 	orr.w	r3, r3, #2
 8005614:	6313      	str	r3, [r2, #48]	@ 0x30
 8005616:	4b74      	ldr	r3, [pc, #464]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	623b      	str	r3, [r7, #32]
 8005620:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005622:	2300      	movs	r3, #0
 8005624:	61fb      	str	r3, [r7, #28]
 8005626:	4b70      	ldr	r3, [pc, #448]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	4a6f      	ldr	r2, [pc, #444]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 800562c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005630:	6313      	str	r3, [r2, #48]	@ 0x30
 8005632:	4b6d      	ldr	r3, [pc, #436]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005636:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800563a:	61fb      	str	r3, [r7, #28]
 800563c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800563e:	2300      	movs	r3, #0
 8005640:	61bb      	str	r3, [r7, #24]
 8005642:	4b69      	ldr	r3, [pc, #420]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005646:	4a68      	ldr	r2, [pc, #416]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005648:	f043 0301 	orr.w	r3, r3, #1
 800564c:	6313      	str	r3, [r2, #48]	@ 0x30
 800564e:	4b66      	ldr	r3, [pc, #408]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	61bb      	str	r3, [r7, #24]
 8005658:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	4b62      	ldr	r3, [pc, #392]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005662:	4a61      	ldr	r2, [pc, #388]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005664:	f043 0308 	orr.w	r3, r3, #8
 8005668:	6313      	str	r3, [r2, #48]	@ 0x30
 800566a:	4b5f      	ldr	r3, [pc, #380]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 800566c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	617b      	str	r3, [r7, #20]
 8005674:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	4b5b      	ldr	r3, [pc, #364]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567e:	4a5a      	ldr	r2, [pc, #360]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005680:	f043 0304 	orr.w	r3, r3, #4
 8005684:	6313      	str	r3, [r2, #48]	@ 0x30
 8005686:	4b58      	ldr	r3, [pc, #352]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	4b54      	ldr	r3, [pc, #336]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800569a:	4a53      	ldr	r2, [pc, #332]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 800569c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80056a2:	4b51      	ldr	r3, [pc, #324]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
 80056b2:	4b4d      	ldr	r3, [pc, #308]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	4a4c      	ldr	r2, [pc, #304]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80056be:	4b4a      	ldr	r3, [pc, #296]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c6:	60bb      	str	r3, [r7, #8]
 80056c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80056ca:	2300      	movs	r3, #0
 80056cc:	607b      	str	r3, [r7, #4]
 80056ce:	4b46      	ldr	r3, [pc, #280]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d2:	4a45      	ldr	r2, [pc, #276]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056d4:	f043 0320 	orr.w	r3, r3, #32
 80056d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80056da:	4b43      	ldr	r3, [pc, #268]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	607b      	str	r3, [r7, #4]
 80056e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80056e6:	2300      	movs	r3, #0
 80056e8:	603b      	str	r3, [r7, #0]
 80056ea:	4b3f      	ldr	r3, [pc, #252]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ee:	4a3e      	ldr	r2, [pc, #248]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056f0:	f043 0310 	orr.w	r3, r3, #16
 80056f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80056f6:	4b3c      	ldr	r3, [pc, #240]	@ (80057e8 <MX_GPIO_Init+0x1f8>)
 80056f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056fa:	f003 0310 	and.w	r3, r3, #16
 80056fe:	603b      	str	r3, [r7, #0]
 8005700:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8005702:	2200      	movs	r2, #0
 8005704:	2140      	movs	r1, #64	@ 0x40
 8005706:	4839      	ldr	r0, [pc, #228]	@ (80057ec <MX_GPIO_Init+0x1fc>)
 8005708:	f003 fa3e 	bl	8008b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800570c:	2200      	movs	r2, #0
 800570e:	2110      	movs	r1, #16
 8005710:	4837      	ldr	r0, [pc, #220]	@ (80057f0 <MX_GPIO_Init+0x200>)
 8005712:	f003 fa39 	bl	8008b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8005716:	2200      	movs	r2, #0
 8005718:	2101      	movs	r1, #1
 800571a:	4836      	ldr	r0, [pc, #216]	@ (80057f4 <MX_GPIO_Init+0x204>)
 800571c:	f003 fa34 	bl	8008b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005720:	2340      	movs	r3, #64	@ 0x40
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005724:	2301      	movs	r3, #1
 8005726:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005728:	2300      	movs	r3, #0
 800572a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800572c:	2300      	movs	r3, #0
 800572e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005730:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005734:	4619      	mov	r1, r3
 8005736:	482d      	ldr	r0, [pc, #180]	@ (80057ec <MX_GPIO_Init+0x1fc>)
 8005738:	f003 f88a 	bl	8008850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800573c:	2308      	movs	r3, #8
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005740:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005744:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005746:	2300      	movs	r3, #0
 8005748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800574a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800574e:	4619      	mov	r1, r3
 8005750:	4826      	ldr	r0, [pc, #152]	@ (80057ec <MX_GPIO_Init+0x1fc>)
 8005752:	f003 f87d 	bl	8008850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005756:	2301      	movs	r3, #1
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800575a:	2300      	movs	r3, #0
 800575c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575e:	2300      	movs	r3, #0
 8005760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005766:	4619      	mov	r1, r3
 8005768:	4821      	ldr	r0, [pc, #132]	@ (80057f0 <MX_GPIO_Init+0x200>)
 800576a:	f003 f871 	bl	8008850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800576e:	2310      	movs	r3, #16
 8005770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005772:	2301      	movs	r3, #1
 8005774:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005776:	2300      	movs	r3, #0
 8005778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800577a:	2300      	movs	r3, #0
 800577c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800577e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005782:	4619      	mov	r1, r3
 8005784:	481a      	ldr	r0, [pc, #104]	@ (80057f0 <MX_GPIO_Init+0x200>)
 8005786:	f003 f863 	bl	8008850 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 800578a:	2330      	movs	r3, #48	@ 0x30
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800578e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8005792:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005794:	2300      	movs	r3, #0
 8005796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005798:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800579c:	4619      	mov	r1, r3
 800579e:	4816      	ldr	r0, [pc, #88]	@ (80057f8 <MX_GPIO_Init+0x208>)
 80057a0:	f003 f856 	bl	8008850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80057a4:	2301      	movs	r3, #1
 80057a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80057a8:	2301      	movs	r3, #1
 80057aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ac:	2300      	movs	r3, #0
 80057ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057b0:	2300      	movs	r3, #0
 80057b2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057b8:	4619      	mov	r1, r3
 80057ba:	480e      	ldr	r0, [pc, #56]	@ (80057f4 <MX_GPIO_Init+0x204>)
 80057bc:	f003 f848 	bl	8008850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80057c0:	2200      	movs	r2, #0
 80057c2:	2105      	movs	r1, #5
 80057c4:	2009      	movs	r0, #9
 80057c6:	f002 fc0a 	bl	8007fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80057ca:	2009      	movs	r0, #9
 80057cc:	f002 fc23 	bl	8008016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80057d0:	2200      	movs	r2, #0
 80057d2:	2105      	movs	r1, #5
 80057d4:	200a      	movs	r0, #10
 80057d6:	f002 fc02 	bl	8007fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80057da:	200a      	movs	r0, #10
 80057dc:	f002 fc1b 	bl	8008016 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80057e0:	bf00      	nop
 80057e2:	3738      	adds	r7, #56	@ 0x38
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	40023800 	.word	0x40023800
 80057ec:	40021800 	.word	0x40021800
 80057f0:	40020000 	.word	0x40020000
 80057f4:	40020400 	.word	0x40020400
 80057f8:	40020800 	.word	0x40020800

080057fc <StartFlowManager>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlowManager */
void StartFlowManager(void *argument)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t iCount = 0;
 8005804:	2300      	movs	r3, #0
 8005806:	75fb      	strb	r3, [r7, #23]

	DBUS_Rx_Init(&huart3);
 8005808:	4818      	ldr	r0, [pc, #96]	@ (800586c <StartFlowManager+0x70>)
 800580a:	f7fd fc85 	bl	8003118 <DBUS_Rx_Init>

	UART_Ex_Init(&huart1);
 800580e:	4818      	ldr	r0, [pc, #96]	@ (8005870 <StartFlowManager+0x74>)
 8005810:	f7fd ff08 	bl	8003624 <UART_Ex_Init>
	UART_Ex_Init(&huart6);
 8005814:	4817      	ldr	r0, [pc, #92]	@ (8005874 <StartFlowManager+0x78>)
 8005816:	f7fd ff05 	bl	8003624 <UART_Ex_Init>
	CAN_Init();
 800581a:	f7fd fc41 	bl	80030a0 <CAN_Init>
	BMI088_gyro_init();
 800581e:	f7fb fc57 	bl	80010d0 <BMI088_gyro_init>
	uint8_t txData[8] = {1, 2, 3, 4, 5, 6, 7, 8};
 8005822:	4a15      	ldr	r2, [pc, #84]	@ (8005878 <StartFlowManager+0x7c>)
 8005824:	f107 030c 	add.w	r3, r7, #12
 8005828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800582c:	e883 0003 	stmia.w	r3, {r0, r1}
  /* Infinite loop */
  for(;;)
  {
	  DBUS_Update();
 8005830:	f7fd fca4 	bl	800317c <DBUS_Update>
	  if(iCount%3==0){
 8005834:	7dfa      	ldrb	r2, [r7, #23]
 8005836:	4b11      	ldr	r3, [pc, #68]	@ (800587c <StartFlowManager+0x80>)
 8005838:	fba3 1302 	umull	r1, r3, r3, r2
 800583c:	0859      	lsrs	r1, r3, #1
 800583e:	460b      	mov	r3, r1
 8005840:	005b      	lsls	r3, r3, #1
 8005842:	440b      	add	r3, r1
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2b00      	cmp	r3, #0
 800584a:	d101      	bne.n	8005850 <StartFlowManager+0x54>
		  CAL_Update();
 800584c:	f7fb fe54 	bl	80014f8 <CAL_Update>
	  // CAL_SendChassisCommands(CAL_getCH1(),CAL_getCH0(),CAL_getCH2(),getDR16_CH4(),IMU_get_gyro(2),1,2);
	  // CAN_transmit(Bus1,0x214,txData);
	  //UART_Printf(&huart6,"DBUS Check: %d %d \n", getDR16_W(),getCC_W());
	  //UART_Printfmt(&huart6,"%d \n",getDR16_CH1());

	  if(iCount<255){
 8005850:	7dfb      	ldrb	r3, [r7, #23]
 8005852:	2bff      	cmp	r3, #255	@ 0xff
 8005854:	d003      	beq.n	800585e <StartFlowManager+0x62>
		  iCount++;
 8005856:	7dfb      	ldrb	r3, [r7, #23]
 8005858:	3301      	adds	r3, #1
 800585a:	75fb      	strb	r3, [r7, #23]
 800585c:	e001      	b.n	8005862 <StartFlowManager+0x66>
	  }else{
		  iCount = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	75fb      	strb	r3, [r7, #23]
	  }
	  osDelay(1);
 8005862:	2001      	movs	r0, #1
 8005864:	f006 fbea 	bl	800c03c <osDelay>
	  DBUS_Update();
 8005868:	e7e2      	b.n	8005830 <StartFlowManager+0x34>
 800586a:	bf00      	nop
 800586c:	20000da4 	.word	0x20000da4
 8005870:	20000d5c 	.word	0x20000d5c
 8005874:	20000dec 	.word	0x20000dec
 8005878:	08011b38 	.word	0x08011b38
 800587c:	aaaaaaab 	.word	0xaaaaaaab

08005880 <StartChassisTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassisTask */
void StartChassisTask(void *argument)
{
 8005880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005882:	ed2d 8b02 	vpush	{d8}
 8005886:	b0a3      	sub	sp, #140	@ 0x8c
 8005888:	af04      	add	r7, sp, #16
 800588a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartChassisTask */
	PID_preset_t pitchBoi = {20.0, 0.0, 150.0};
 800588c:	4ab6      	ldr	r2, [pc, #728]	@ (8005b68 <StartChassisTask+0x2e8>)
 800588e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8005892:	ca07      	ldmia	r2, {r0, r1, r2}
 8005894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t turretRotation = {110.0, 0.0, 15.0};
 8005898:	4ab4      	ldr	r2, [pc, #720]	@ (8005b6c <StartChassisTask+0x2ec>)
 800589a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800589e:	ca07      	ldmia	r2, {r0, r1, r2}
 80058a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t indexer = {30.0, 0.0, 0.0};
 80058a4:	4bb2      	ldr	r3, [pc, #712]	@ (8005b70 <StartChassisTask+0x2f0>)
 80058a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058a8:	f04f 0300 	mov.w	r3, #0
 80058ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ae:	f04f 0300 	mov.w	r3, #0
 80058b2:	633b      	str	r3, [r7, #48]	@ 0x30
	PID_preset_t indexer2 = {8.0, 0.0, 0.0};
 80058b4:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 80058b8:	61fb      	str	r3, [r7, #28]
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	623b      	str	r3, [r7, #32]
 80058c0:	f04f 0300 	mov.w	r3, #0
 80058c4:	627b      	str	r3, [r7, #36]	@ 0x24
	PID_preset_t flywheels = {7.0, 0.0, 0.0};
 80058c6:	4bab      	ldr	r3, [pc, #684]	@ (8005b74 <StartChassisTask+0x2f4>)
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	f04f 0300 	mov.w	r3, #0
 80058d4:	61bb      	str	r3, [r7, #24]

	float incrementalToGoVal = 6700;
 80058d6:	4ba8      	ldr	r3, [pc, #672]	@ (8005b78 <StartChassisTask+0x2f8>)
 80058d8:	677b      	str	r3, [r7, #116]	@ 0x74
	uint16_t speed = 7500;
 80058da:	f641 534c 	movw	r3, #7500	@ 0x1d4c
 80058de:	f8a7 305a 	strh.w	r3, [r7, #90]	@ 0x5a

	uint8_t lastMouseZ = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	const int16_t S2W_SCALER = 60;
 80058e8:	233c      	movs	r3, #60	@ 0x3c
 80058ea:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
	int16_t s2wSpeed = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	int16_t chassisSpin = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e

	float targetTurretAng = 0;
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	66bb      	str	r3, [r7, #104]	@ 0x68
	float currentTurretAng = 0;
 8005900:	f04f 0300 	mov.w	r3, #0
 8005904:	667b      	str	r3, [r7, #100]	@ 0x64

	uint8_t fondlerState = 0;
 8005906:	2300      	movs	r3, #0
 8005908:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
	uint8_t spinupCounter = 0;
 800590c:	2300      	movs	r3, #0
 800590e:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	uint8_t rewindCounter = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	uint8_t cooldownCounter = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	//
	int8_t fondlerVars[5] = {0, 0, 0, 0, 0};
 800591e:	f107 0308 	add.w	r3, r7, #8
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
 8005926:	711a      	strb	r2, [r3, #4]
  /* Infinite loop */
  for(;;)
  {
	  CAL_SendChassisCommands(CAL_getCH1(),CAL_getCH0(),chassisSpin,(int16_t)((float)(getRotorPosition(Bus1, GM6020, 5))*0.5f),IMU_get_gyro(2),1,2);
 8005928:	f7fc fbe0 	bl	80020ec <CAL_getCH1>
 800592c:	4603      	mov	r3, r0
 800592e:	461d      	mov	r5, r3
 8005930:	f7fc fbd0 	bl	80020d4 <CAL_getCH0>
 8005934:	4603      	mov	r3, r0
 8005936:	461e      	mov	r6, r3
 8005938:	2205      	movs	r2, #5
 800593a:	2103      	movs	r1, #3
 800593c:	2001      	movs	r0, #1
 800593e:	f7fd fb0f 	bl	8002f60 <getRotorPosition>
 8005942:	4603      	mov	r3, r0
 8005944:	ee07 3a90 	vmov	s15, r3
 8005948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800594c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005950:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005954:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005958:	ee17 3a90 	vmov	r3, s15
 800595c:	b21c      	sxth	r4, r3
 800595e:	2002      	movs	r0, #2
 8005960:	f7fb fc4e 	bl	8001200 <IMU_get_gyro>
 8005964:	eef0 7a40 	vmov.f32	s15, s0
 8005968:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800596c:	ee17 3a90 	vmov	r3, s15
 8005970:	b21b      	sxth	r3, r3
 8005972:	f9b7 206e 	ldrsh.w	r2, [r7, #110]	@ 0x6e
 8005976:	2102      	movs	r1, #2
 8005978:	9102      	str	r1, [sp, #8]
 800597a:	2101      	movs	r1, #1
 800597c:	9101      	str	r1, [sp, #4]
 800597e:	9300      	str	r3, [sp, #0]
 8005980:	4623      	mov	r3, r4
 8005982:	4631      	mov	r1, r6
 8005984:	4628      	mov	r0, r5
 8005986:	f7fc fa61 	bl	8001e4c <CAL_SendChassisCommands>
	  // UART_Printf(&huart1, "%d\r\n", getRotorPosition(Bus2, GM6020, 7));


	  int16_t currentPos = CAL_getCH3()*3;
 800598a:	f7fc fbc7 	bl	800211c <CAL_getCH3>
 800598e:	4603      	mov	r3, r0
 8005990:	b29b      	uxth	r3, r3
 8005992:	461a      	mov	r2, r3
 8005994:	0052      	lsls	r2, r2, #1
 8005996:	4413      	add	r3, r2
 8005998:	b29b      	uxth	r3, r3
 800599a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56

	  incrementalToGoVal -= ((float)(currentPos)*0.025);
 800599e:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80059a0:	f7fa fdd2 	bl	8000548 <__aeabi_f2d>
 80059a4:	4604      	mov	r4, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	@ 0x56
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80059b4:	ee17 0a90 	vmov	r0, s15
 80059b8:	f7fa fdc6 	bl	8000548 <__aeabi_f2d>
 80059bc:	a366      	add	r3, pc, #408	@ (adr r3, 8005b58 <StartChassisTask+0x2d8>)
 80059be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c2:	f7fa fe19 	bl	80005f8 <__aeabi_dmul>
 80059c6:	4602      	mov	r2, r0
 80059c8:	460b      	mov	r3, r1
 80059ca:	4620      	mov	r0, r4
 80059cc:	4629      	mov	r1, r5
 80059ce:	f7fa fc5b 	bl	8000288 <__aeabi_dsub>
 80059d2:	4602      	mov	r2, r0
 80059d4:	460b      	mov	r3, r1
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	f7fb f8e5 	bl	8000ba8 <__aeabi_d2f>
 80059de:	4603      	mov	r3, r0
 80059e0:	677b      	str	r3, [r7, #116]	@ 0x74
	  if (incrementalToGoVal > 7200.0) {
 80059e2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80059e6:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8005b7c <StartChassisTask+0x2fc>
 80059ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059f2:	dd02      	ble.n	80059fa <StartChassisTask+0x17a>
		  incrementalToGoVal = 7200.0;
 80059f4:	4b62      	ldr	r3, [pc, #392]	@ (8005b80 <StartChassisTask+0x300>)
 80059f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80059f8:	e00a      	b.n	8005a10 <StartChassisTask+0x190>
	  } else if (incrementalToGoVal < 5800.0) {
 80059fa:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80059fe:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 8005b84 <StartChassisTask+0x304>
 8005a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a0a:	d501      	bpl.n	8005a10 <StartChassisTask+0x190>
		  incrementalToGoVal = 5800.0;
 8005a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8005b88 <StartChassisTask+0x308>)
 8005a0e:	677b      	str	r3, [r7, #116]	@ 0x74
	  }
	  // UART_Printf(&huart1, "%d %d\r\n", getRotorPosition(Bus2, GM6020, 7), incrementalToGoVal);
	  setMotorPosition(Bus2, GM6020, 7, (int16_t)incrementalToGoVal, pitchBoi);
 8005a10:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8005a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005a18:	ee17 3a90 	vmov	r3, s15
 8005a1c:	b21b      	sxth	r3, r3
 8005a1e:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8005a22:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8005a26:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005a2a:	eeb0 0a66 	vmov.f32	s0, s13
 8005a2e:	eef0 0a47 	vmov.f32	s1, s14
 8005a32:	eeb0 1a67 	vmov.f32	s2, s15
 8005a36:	2207      	movs	r2, #7
 8005a38:	2103      	movs	r1, #3
 8005a3a:	2002      	movs	r0, #2
 8005a3c:	f7fd fa55 	bl	8002eea <setMotorPosition>
	  /*
	  uint16_t togoVal = currentPos*0.8f + 5850;
	  setMotorPosition(Bus2, GM6020, 7, togoVal, pitchBoi);
	  */

	  uint8_t mouseZ = CAL_getMouseZ();
 8005a40:	f7fc fbb6 	bl	80021b0 <CAL_getMouseZ>
 8005a44:	4603      	mov	r3, r0
 8005a46:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	  if(mouseZ==2&&lastMouseZ==0){
 8005a4a:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d114      	bne.n	8005a7c <StartChassisTask+0x1fc>
 8005a52:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d110      	bne.n	8005a7c <StartChassisTask+0x1fc>
		  if(S2W_SCALER*s2wSpeed<300){
 8005a5a:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8005a5e:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	@ 0x70
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8005a6a:	da1f      	bge.n	8005aac <StartChassisTask+0x22c>
		  s2wSpeed++;
 8005a6c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	3301      	adds	r3, #1
 8005a74:	b29b      	uxth	r3, r3
 8005a76:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		  if(S2W_SCALER*s2wSpeed<300){
 8005a7a:	e017      	b.n	8005aac <StartChassisTask+0x22c>
		  }
	  }else if(mouseZ==1&&lastMouseZ==0){
 8005a7c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d113      	bne.n	8005aac <StartChassisTask+0x22c>
 8005a84:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10f      	bne.n	8005aac <StartChassisTask+0x22c>
		  if(S2W_SCALER*s2wSpeed>-300)
 8005a8c:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	@ 0x58
 8005a90:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	@ 0x70
 8005a94:	fb02 f303 	mul.w	r3, r2, r3
 8005a98:	f513 7f96 	cmn.w	r3, #300	@ 0x12c
 8005a9c:	dd06      	ble.n	8005aac <StartChassisTask+0x22c>
		  s2wSpeed--;
 8005a9e:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	@ 0x70
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
	  }
	  lastMouseZ = mouseZ;
 8005aac:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8005ab0:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73


	  chassisSpin = S2W_SCALER*s2wSpeed-CAL_getCH4();
 8005ab4:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 8005ab8:	f8b7 3070 	ldrh.w	r3, [r7, #112]	@ 0x70
 8005abc:	fb12 f303 	smulbb	r3, r2, r3
 8005ac0:	b29c      	uxth	r4, r3
 8005ac2:	f7fc fb37 	bl	8002134 <CAL_getCH4>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	1ae3      	subs	r3, r4, r3
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  if(chassisSpin>460){
 8005ad2:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8005ad6:	f5b3 7fe6 	cmp.w	r3, #460	@ 0x1cc
 8005ada:	dd04      	ble.n	8005ae6 <StartChassisTask+0x266>
		  chassisSpin = 460;
 8005adc:	f44f 73e6 	mov.w	r3, #460	@ 0x1cc
 8005ae0:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8005ae4:	e008      	b.n	8005af8 <StartChassisTask+0x278>
	  }else if(chassisSpin<-460){
 8005ae6:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8005aea:	f513 7fe6 	cmn.w	r3, #460	@ 0x1cc
 8005aee:	da03      	bge.n	8005af8 <StartChassisTask+0x278>
		  chassisSpin = -460;
 8005af0:	f64f 6334 	movw	r3, #65076	@ 0xfe34
 8005af4:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	  }




	  float targetTurretAngVel = (float)CAL_getCH2()*0.006;
 8005af8:	f7fc fb04 	bl	8002104 <CAL_getCH2>
 8005afc:	4603      	mov	r3, r0
 8005afe:	ee07 3a90 	vmov	s15, r3
 8005b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b06:	ee17 0a90 	vmov	r0, s15
 8005b0a:	f7fa fd1d 	bl	8000548 <__aeabi_f2d>
 8005b0e:	a314      	add	r3, pc, #80	@ (adr r3, 8005b60 <StartChassisTask+0x2e0>)
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f7fa fd70 	bl	80005f8 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4610      	mov	r0, r2
 8005b1e:	4619      	mov	r1, r3
 8005b20:	f7fb f842 	bl	8000ba8 <__aeabi_d2f>
 8005b24:	4603      	mov	r3, r0
 8005b26:	653b      	str	r3, [r7, #80]	@ 0x50


	  targetTurretAng -= targetTurretAngVel;
 8005b28:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8005b2c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8005b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b34:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	  if(targetTurretAng<0){
 8005b38:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8005b3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b44:	d524      	bpl.n	8005b90 <StartChassisTask+0x310>
		  targetTurretAng = 360.0-targetTurretAng;
 8005b46:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005b8c <StartChassisTask+0x30c>
 8005b4a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8005b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b52:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
 8005b56:	e02c      	b.n	8005bb2 <StartChassisTask+0x332>
 8005b58:	9999999a 	.word	0x9999999a
 8005b5c:	3f999999 	.word	0x3f999999
 8005b60:	bc6a7efa 	.word	0xbc6a7efa
 8005b64:	3f789374 	.word	0x3f789374
 8005b68:	08011b74 	.word	0x08011b74
 8005b6c:	08011b80 	.word	0x08011b80
 8005b70:	41f00000 	.word	0x41f00000
 8005b74:	40e00000 	.word	0x40e00000
 8005b78:	45d16000 	.word	0x45d16000
 8005b7c:	45e10000 	.word	0x45e10000
 8005b80:	45e10000 	.word	0x45e10000
 8005b84:	45b54000 	.word	0x45b54000
 8005b88:	45b54000 	.word	0x45b54000
 8005b8c:	43b40000 	.word	0x43b40000
	  }else if(targetTurretAng>360.0){
 8005b90:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8005b94:	ed1f 7a03 	vldr	s14, [pc, #-12]	@ 8005b8c <StartChassisTask+0x30c>
 8005b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba0:	dd07      	ble.n	8005bb2 <StartChassisTask+0x332>
		  targetTurretAng = targetTurretAng-360.0;
 8005ba2:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 8005ba6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8005b8c <StartChassisTask+0x30c>
 8005baa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bae:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
	  }


	  //find current angular velocity in degrees/iteration (i think) (iknow now)
	  float currentTurretAngVel = IMU_get_gyro(2)*90.0/262.9639380722;
 8005bb2:	2002      	movs	r0, #2
 8005bb4:	f7fb fb24 	bl	8001200 <IMU_get_gyro>
 8005bb8:	ee10 3a10 	vmov	r3, s0
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fa fcc3 	bl	8000548 <__aeabi_f2d>
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	4be2      	ldr	r3, [pc, #904]	@ (8005f50 <StartChassisTask+0x6d0>)
 8005bc8:	f7fa fd16 	bl	80005f8 <__aeabi_dmul>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4610      	mov	r0, r2
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	a3d6      	add	r3, pc, #856	@ (adr r3, 8005f30 <StartChassisTask+0x6b0>)
 8005bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bda:	f7fa fe37 	bl	800084c <__aeabi_ddiv>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4610      	mov	r0, r2
 8005be4:	4619      	mov	r1, r3
 8005be6:	f7fa ffdf 	bl	8000ba8 <__aeabi_d2f>
 8005bea:	4603      	mov	r3, r0
 8005bec:	64fb      	str	r3, [r7, #76]	@ 0x4c


	  //find current angle also standard math in degrees
	  if(currentTurretAngVel>0.005||currentTurretAngVel<-0.005){//filter out noise from gyro
 8005bee:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005bf0:	f7fa fcaa 	bl	8000548 <__aeabi_f2d>
 8005bf4:	a3d0      	add	r3, pc, #832	@ (adr r3, 8005f38 <StartChassisTask+0x6b8>)
 8005bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfa:	f7fa ff8d 	bl	8000b18 <__aeabi_dcmpgt>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d10a      	bne.n	8005c1a <StartChassisTask+0x39a>
 8005c04:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c06:	f7fa fc9f 	bl	8000548 <__aeabi_f2d>
 8005c0a:	a3cd      	add	r3, pc, #820	@ (adr r3, 8005f40 <StartChassisTask+0x6c0>)
 8005c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c10:	f7fa ff64 	bl	8000adc <__aeabi_dcmplt>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d028      	beq.n	8005c6c <StartChassisTask+0x3ec>
		  currentTurretAng = currentTurretAng + currentTurretAngVel; //proportional to ang position, not
 8005c1a:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8005c1e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8005c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c26:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		  if(currentTurretAng<0.0){
 8005c2a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8005c2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c36:	d508      	bpl.n	8005c4a <StartChassisTask+0x3ca>
			  currentTurretAng = 360.0-currentTurretAng;
 8005c38:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8005f54 <StartChassisTask+0x6d4>
 8005c3c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8005c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c44:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 8005c48:	e010      	b.n	8005c6c <StartChassisTask+0x3ec>
		  }else if(currentTurretAng>360.0){
 8005c4a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8005c4e:	ed9f 7ac1 	vldr	s14, [pc, #772]	@ 8005f54 <StartChassisTask+0x6d4>
 8005c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5a:	dd07      	ble.n	8005c6c <StartChassisTask+0x3ec>
			  currentTurretAng = currentTurretAng-360.0;
 8005c5c:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8005c60:	ed9f 7abc 	vldr	s14, [pc, #752]	@ 8005f54 <StartChassisTask+0x6d4>
 8005c64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c68:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
		  }
	  }


	  // UART_Printf(&huart1," %f %f\n",IMU_get_gyro(2),currentTurretAng);
	  setMotorRPM(Bus1,GM6020,5,-240*(currentTurretAngVel+1.0*targetTurretAngVel)+12*angSmallestDiff(targetTurretAng, currentTurretAng), turretRotation);
 8005c6c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005c6e:	f7fa fc6b 	bl	8000548 <__aeabi_f2d>
 8005c72:	4604      	mov	r4, r0
 8005c74:	460d      	mov	r5, r1
 8005c76:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8005c78:	f7fa fc66 	bl	8000548 <__aeabi_f2d>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4620      	mov	r0, r4
 8005c82:	4629      	mov	r1, r5
 8005c84:	f7fa fb02 	bl	800028c <__adddf3>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f04f 0200 	mov.w	r2, #0
 8005c94:	4bb0      	ldr	r3, [pc, #704]	@ (8005f58 <StartChassisTask+0x6d8>)
 8005c96:	f7fa fcaf 	bl	80005f8 <__aeabi_dmul>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4614      	mov	r4, r2
 8005ca0:	461d      	mov	r5, r3
 8005ca2:	edd7 0a19 	vldr	s1, [r7, #100]	@ 0x64
 8005ca6:	ed97 0a1a 	vldr	s0, [r7, #104]	@ 0x68
 8005caa:	f7fe fead 	bl	8004a08 <angSmallestDiff>
 8005cae:	eef0 7a40 	vmov.f32	s15, s0
 8005cb2:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8005cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cba:	ee17 0a90 	vmov	r0, s15
 8005cbe:	f7fa fc43 	bl	8000548 <__aeabi_f2d>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	4629      	mov	r1, r5
 8005cca:	f7fa fadf 	bl	800028c <__adddf3>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f7fa ff3f 	bl	8000b58 <__aeabi_d2iz>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	b21b      	sxth	r3, r3
 8005cde:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8005ce2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005ce6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005cea:	eeb0 0a66 	vmov.f32	s0, s13
 8005cee:	eef0 0a47 	vmov.f32	s1, s14
 8005cf2:	eeb0 1a67 	vmov.f32	s2, s15
 8005cf6:	2205      	movs	r2, #5
 8005cf8:	2103      	movs	r1, #3
 8005cfa:	2001      	movs	r0, #1
 8005cfc:	f7fd f8ba 	bl	8002e74 <setMotorRPM>




	  // Shooting Settings
      if (CAL_getS1() > 1 || CAL_getRMB() == 1) {
 8005d00:	f7fc fa2a 	bl	8002158 <CAL_getS1>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d804      	bhi.n	8005d14 <StartChassisTask+0x494>
 8005d0a:	f7fc fa3f 	bl	800218c <CAL_getRMB>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d129      	bne.n	8005d68 <StartChassisTask+0x4e8>
    	  setMotorRPM(Bus2, M3508, 1, -1*speed, flywheels);
 8005d14:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005d18:	425b      	negs	r3, r3
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	b21b      	sxth	r3, r3
 8005d1e:	edd7 6a04 	vldr	s13, [r7, #16]
 8005d22:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d26:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d2a:	eeb0 0a66 	vmov.f32	s0, s13
 8005d2e:	eef0 0a47 	vmov.f32	s1, s14
 8005d32:	eeb0 1a67 	vmov.f32	s2, s15
 8005d36:	2201      	movs	r2, #1
 8005d38:	2101      	movs	r1, #1
 8005d3a:	2002      	movs	r0, #2
 8005d3c:	f7fd f89a 	bl	8002e74 <setMotorRPM>
          setMotorRPM(Bus2, M3508, 2, speed, flywheels);
 8005d40:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	@ 0x5a
 8005d44:	edd7 6a04 	vldr	s13, [r7, #16]
 8005d48:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d50:	eeb0 0a66 	vmov.f32	s0, s13
 8005d54:	eef0 0a47 	vmov.f32	s1, s14
 8005d58:	eeb0 1a67 	vmov.f32	s2, s15
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	2101      	movs	r1, #1
 8005d60:	2002      	movs	r0, #2
 8005d62:	f7fd f887 	bl	8002e74 <setMotorRPM>
 8005d66:	e023      	b.n	8005db0 <StartChassisTask+0x530>
      } else {
    	  setMotorRPM(Bus2, M3508, 1, 0, flywheels);
 8005d68:	edd7 6a04 	vldr	s13, [r7, #16]
 8005d6c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d70:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d74:	eeb0 0a66 	vmov.f32	s0, s13
 8005d78:	eef0 0a47 	vmov.f32	s1, s14
 8005d7c:	eeb0 1a67 	vmov.f32	s2, s15
 8005d80:	2300      	movs	r3, #0
 8005d82:	2201      	movs	r2, #1
 8005d84:	2101      	movs	r1, #1
 8005d86:	2002      	movs	r0, #2
 8005d88:	f7fd f874 	bl	8002e74 <setMotorRPM>
    	  setMotorRPM(Bus2, M3508, 2, 0, flywheels);
 8005d8c:	edd7 6a04 	vldr	s13, [r7, #16]
 8005d90:	ed97 7a05 	vldr	s14, [r7, #20]
 8005d94:	edd7 7a06 	vldr	s15, [r7, #24]
 8005d98:	eeb0 0a66 	vmov.f32	s0, s13
 8005d9c:	eef0 0a47 	vmov.f32	s1, s14
 8005da0:	eeb0 1a67 	vmov.f32	s2, s15
 8005da4:	2300      	movs	r3, #0
 8005da6:	2202      	movs	r2, #2
 8005da8:	2101      	movs	r1, #1
 8005daa:	2002      	movs	r0, #2
 8005dac:	f7fd f862 	bl	8002e74 <setMotorRPM>
	  }

      // UART_Printf(&huart1, "RPM: %d, Amp: %d\r\n", getMotorRPM(Bus1, M2006, 1), getMotorCurrent(Bus1, M2006, 1)*816);

      float heatBufferFraction = 0;
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	65fb      	str	r3, [r7, #92]	@ 0x5c
      if (CAL_getHeatLimit() != 0) {
 8005db6:	f7fc fa29 	bl	800220c <CAL_getHeatLimit>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d011      	beq.n	8005de4 <StartChassisTask+0x564>
    	  heatBufferFraction = (float)(CAL_getBarrel1Heat())/(float)(CAL_getHeatLimit());
 8005dc0:	f7fc fa18 	bl	80021f4 <CAL_getBarrel1Heat>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8005dce:	f7fc fa1d 	bl	800220c <CAL_getHeatLimit>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ddc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005de0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      }

      UART_Printf(&huart1, "BarrelHeat; %d, HeatLimit: %d, HeatFraction; %f\r\n", CAL_getBarrel1Heat(), CAL_getHeatLimit(), heatBufferFraction);
 8005de4:	f7fc fa06 	bl	80021f4 <CAL_getBarrel1Heat>
 8005de8:	4603      	mov	r3, r0
 8005dea:	461c      	mov	r4, r3
 8005dec:	f7fc fa0e 	bl	800220c <CAL_getHeatLimit>
 8005df0:	4603      	mov	r3, r0
 8005df2:	461d      	mov	r5, r3
 8005df4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8005df6:	f7fa fba7 	bl	8000548 <__aeabi_f2d>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9cd 2300 	strd	r2, r3, [sp]
 8005e02:	462b      	mov	r3, r5
 8005e04:	4622      	mov	r2, r4
 8005e06:	4955      	ldr	r1, [pc, #340]	@ (8005f5c <StartChassisTask+0x6dc>)
 8005e08:	4855      	ldr	r0, [pc, #340]	@ (8005f60 <StartChassisTask+0x6e0>)
 8005e0a:	f7fd fbe3 	bl	80035d4 <UART_Printf>


	  if ((   ((CAL_getS1() == 2) || (CAL_getLMB() == 1)) && (heatBufferFraction < 0.8)) && (getMotorRPM(Bus2, M3508, 2) > (speed-3000))) {
 8005e0e:	f7fc f9a3 	bl	8002158 <CAL_getS1>
 8005e12:	4603      	mov	r3, r0
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d005      	beq.n	8005e24 <StartChassisTask+0x5a4>
 8005e18:	f7fc f9a6 	bl	8002168 <CAL_getLMB>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	f040 810f 	bne.w	8006042 <StartChassisTask+0x7c2>
 8005e24:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8005e26:	f7fa fb8f 	bl	8000548 <__aeabi_f2d>
 8005e2a:	a347      	add	r3, pc, #284	@ (adr r3, 8005f48 <StartChassisTask+0x6c8>)
 8005e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e30:	f7fa fe54 	bl	8000adc <__aeabi_dcmplt>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 8103 	beq.w	8006042 <StartChassisTask+0x7c2>
 8005e3c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	@ 0x5a
 8005e40:	f6a3 34b7 	subw	r4, r3, #2999	@ 0xbb7
 8005e44:	2202      	movs	r2, #2
 8005e46:	2101      	movs	r1, #1
 8005e48:	2002      	movs	r0, #2
 8005e4a:	f7fd f8d7 	bl	8002ffc <getMotorRPM>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	429c      	cmp	r4, r3
 8005e52:	f300 80f6 	bgt.w	8006042 <StartChassisTask+0x7c2>
		  // fondlerAutoReverse (fondlerVars, 1, 1, -1, indexer, indexer2);
		  // setMotorRPM(Bus1, M2006, 1, 6000, indexer2);

		  // getMotorRPM(Bus1, M2006, 1);
		  // setMotorRPM(Bus1, M2006, 1, 6000, indexer);
		  cooldownCounter = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60


		  switch (fondlerState) {
 8005e5c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 8005e60:	2b18      	cmp	r3, #24
 8005e62:	f200 811f 	bhi.w	80060a4 <StartChassisTask+0x824>
 8005e66:	a201      	add	r2, pc, #4	@ (adr r2, 8005e6c <StartChassisTask+0x5ec>)
 8005e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6c:	08005ed1 	.word	0x08005ed1
 8005e70:	08005f71 	.word	0x08005f71
 8005e74:	080060a5 	.word	0x080060a5
 8005e78:	080060a5 	.word	0x080060a5
 8005e7c:	080060a5 	.word	0x080060a5
 8005e80:	080060a5 	.word	0x080060a5
 8005e84:	080060a5 	.word	0x080060a5
 8005e88:	080060a5 	.word	0x080060a5
 8005e8c:	080060a5 	.word	0x080060a5
 8005e90:	080060a5 	.word	0x080060a5
 8005e94:	080060a5 	.word	0x080060a5
 8005e98:	080060a5 	.word	0x080060a5
 8005e9c:	08005faf 	.word	0x08005faf
 8005ea0:	080060a5 	.word	0x080060a5
 8005ea4:	080060a5 	.word	0x080060a5
 8005ea8:	080060a5 	.word	0x080060a5
 8005eac:	080060a5 	.word	0x080060a5
 8005eb0:	080060a5 	.word	0x080060a5
 8005eb4:	080060a5 	.word	0x080060a5
 8005eb8:	080060a5 	.word	0x080060a5
 8005ebc:	080060a5 	.word	0x080060a5
 8005ec0:	080060a5 	.word	0x080060a5
 8005ec4:	080060a5 	.word	0x080060a5
 8005ec8:	080060a5 	.word	0x080060a5
 8005ecc:	08005ff3 	.word	0x08005ff3
		  // Spin up State
		  case (0): {
			  setMotorRPM(Bus1, M2006, 1, 6000, indexer);
 8005ed0:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005ed4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005ed8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005edc:	eeb0 0a66 	vmov.f32	s0, s13
 8005ee0:	eef0 0a47 	vmov.f32	s1, s14
 8005ee4:	eeb0 1a67 	vmov.f32	s2, s15
 8005ee8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005eec:	2201      	movs	r2, #1
 8005eee:	2102      	movs	r1, #2
 8005ef0:	2001      	movs	r0, #1
 8005ef2:	f7fc ffbf 	bl	8002e74 <setMotorRPM>
			  if ((getMotorRPM(Bus1, M2006, 1) > 5000)) {
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	2102      	movs	r1, #2
 8005efa:	2001      	movs	r0, #1
 8005efc:	f7fd f87e 	bl	8002ffc <getMotorRPM>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	dd06      	ble.n	8005f1a <StartChassisTask+0x69a>
				  spinupCounter = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
				  fondlerState = 1;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
				  break;
 8005f18:	e092      	b.n	8006040 <StartChassisTask+0x7c0>
			  }
			  if (spinupCounter >= 50) {
 8005f1a:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8005f1e:	2b31      	cmp	r3, #49	@ 0x31
 8005f20:	d920      	bls.n	8005f64 <StartChassisTask+0x6e4>
				  spinupCounter = 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
				  fondlerState = 12; // Bad
 8005f28:	230c      	movs	r3, #12
 8005f2a:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
				  break;
 8005f2e:	e087      	b.n	8006040 <StartChassisTask+0x7c0>
 8005f30:	4a53f77e 	.word	0x4a53f77e
 8005f34:	40706f6c 	.word	0x40706f6c
 8005f38:	47ae147b 	.word	0x47ae147b
 8005f3c:	3f747ae1 	.word	0x3f747ae1
 8005f40:	47ae147b 	.word	0x47ae147b
 8005f44:	bf747ae1 	.word	0xbf747ae1
 8005f48:	9999999a 	.word	0x9999999a
 8005f4c:	3fe99999 	.word	0x3fe99999
 8005f50:	40568000 	.word	0x40568000
 8005f54:	43b40000 	.word	0x43b40000
 8005f58:	c06e0000 	.word	0xc06e0000
 8005f5c:	08011b40 	.word	0x08011b40
 8005f60:	20000d5c 	.word	0x20000d5c
			  }
			  spinupCounter++;
 8005f64:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8005f68:	3301      	adds	r3, #1
 8005f6a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
			  break;
 8005f6e:	e067      	b.n	8006040 <StartChassisTask+0x7c0>
		  }
		  case (1): {
			  // UART_Printf(&huart1, "%d\r\n", calcRPM_PID(Bus1,M2006, 1, 6000, indexer));
			  setMotorRPM(Bus1, M2006, 1, 6000, indexer);
 8005f70:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005f74:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005f78:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005f7c:	eeb0 0a66 	vmov.f32	s0, s13
 8005f80:	eef0 0a47 	vmov.f32	s1, s14
 8005f84:	eeb0 1a67 	vmov.f32	s2, s15
 8005f88:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	2102      	movs	r1, #2
 8005f90:	2001      	movs	r0, #1
 8005f92:	f7fc ff6f 	bl	8002e74 <setMotorRPM>
			  if (getMotorRPM(Bus1, M2006, 1) < 3) {
 8005f96:	2201      	movs	r2, #1
 8005f98:	2102      	movs	r1, #2
 8005f9a:	2001      	movs	r0, #1
 8005f9c:	f7fd f82e 	bl	8002ffc <getMotorRPM>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	dc47      	bgt.n	8006036 <StartChassisTask+0x7b6>
				  fondlerState = 12;
 8005fa6:	230c      	movs	r3, #12
 8005fa8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
				  break;
 8005fac:	e048      	b.n	8006040 <StartChassisTask+0x7c0>
			  }
			  break;
		  }
		  case (12): {
			  setMotorRPM(Bus1, M2006, 1, -12500, indexer);
 8005fae:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005fb2:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005fb6:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005fba:	eeb0 0a66 	vmov.f32	s0, s13
 8005fbe:	eef0 0a47 	vmov.f32	s1, s14
 8005fc2:	eeb0 1a67 	vmov.f32	s2, s15
 8005fc6:	4b39      	ldr	r3, [pc, #228]	@ (80060ac <StartChassisTask+0x82c>)
 8005fc8:	2201      	movs	r2, #1
 8005fca:	2102      	movs	r1, #2
 8005fcc:	2001      	movs	r0, #1
 8005fce:	f7fc ff51 	bl	8002e74 <setMotorRPM>
			  rewindCounter++;
 8005fd2:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
			  if (rewindCounter >= 40) {
 8005fdc:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8005fe0:	2b27      	cmp	r3, #39	@ 0x27
 8005fe2:	d92a      	bls.n	800603a <StartChassisTask+0x7ba>
				  fondlerState = 0;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
				  rewindCounter = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
			  }
			  break;
 8005ff0:	e023      	b.n	800603a <StartChassisTask+0x7ba>
		  }
		  case (24): {
			  setMotorRPM(Bus1, M2006, 1, -15000, indexer);
 8005ff2:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8005ff6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8005ffa:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005ffe:	eeb0 0a66 	vmov.f32	s0, s13
 8006002:	eef0 0a47 	vmov.f32	s1, s14
 8006006:	eeb0 1a67 	vmov.f32	s2, s15
 800600a:	4b29      	ldr	r3, [pc, #164]	@ (80060b0 <StartChassisTask+0x830>)
 800600c:	2201      	movs	r2, #1
 800600e:	2102      	movs	r1, #2
 8006010:	2001      	movs	r0, #1
 8006012:	f7fc ff2f 	bl	8002e74 <setMotorRPM>
			  rewindCounter++;
 8006016:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800601a:	3301      	adds	r3, #1
 800601c:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
			  if (rewindCounter >= 24) {
 8006020:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8006024:	2b17      	cmp	r3, #23
 8006026:	d90a      	bls.n	800603e <StartChassisTask+0x7be>
				  fondlerState = 0;
 8006028:	2300      	movs	r3, #0
 800602a:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
				  rewindCounter = 0;
 800602e:	2300      	movs	r3, #0
 8006030:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
			  }
			  break;
 8006034:	e003      	b.n	800603e <StartChassisTask+0x7be>
			  break;
 8006036:	bf00      	nop
 8006038:	e034      	b.n	80060a4 <StartChassisTask+0x824>
			  break;
 800603a:	bf00      	nop
 800603c:	e032      	b.n	80060a4 <StartChassisTask+0x824>
			  break;
 800603e:	bf00      	nop
		  switch (fondlerState) {
 8006040:	e030      	b.n	80060a4 <StartChassisTask+0x824>

		  // UART_Printf(&huart1, "%d\r\n", fondlerState);

	  } else {
		  // fondlerAutoReverse (fondlerVars, 0, 1, -1, indexer, indexer2);
		  if (cooldownCounter < 50) {
 8006042:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8006046:	2b31      	cmp	r3, #49	@ 0x31
 8006048:	d817      	bhi.n	800607a <StartChassisTask+0x7fa>
			  setMotorRPM(Bus1, M2006, 1, -12500, indexer);
 800604a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 800604e:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8006052:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8006056:	eeb0 0a66 	vmov.f32	s0, s13
 800605a:	eef0 0a47 	vmov.f32	s1, s14
 800605e:	eeb0 1a67 	vmov.f32	s2, s15
 8006062:	4b12      	ldr	r3, [pc, #72]	@ (80060ac <StartChassisTask+0x82c>)
 8006064:	2201      	movs	r2, #1
 8006066:	2102      	movs	r1, #2
 8006068:	2001      	movs	r0, #1
 800606a:	f7fc ff03 	bl	8002e74 <setMotorRPM>
			  cooldownCounter++;
 800606e:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 8006072:	3301      	adds	r3, #1
 8006074:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 8006078:	e011      	b.n	800609e <StartChassisTask+0x81e>
		  } else {
			  setMotorRPM(Bus1, M2006, 1, 0, indexer2);
 800607a:	edd7 6a07 	vldr	s13, [r7, #28]
 800607e:	ed97 7a08 	vldr	s14, [r7, #32]
 8006082:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8006086:	eeb0 0a66 	vmov.f32	s0, s13
 800608a:	eef0 0a47 	vmov.f32	s1, s14
 800608e:	eeb0 1a67 	vmov.f32	s2, s15
 8006092:	2300      	movs	r3, #0
 8006094:	2201      	movs	r2, #1
 8006096:	2102      	movs	r1, #2
 8006098:	2001      	movs	r0, #1
 800609a:	f7fc feeb 	bl	8002e74 <setMotorRPM>

		  }
		  fondlerState = 0;
 800609e:	2300      	movs	r3, #0
 80060a0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
		  // setMotorRPM(Bus1, M2006, 1, 0, indexer2);
	  }
	  // UART_Printf(&huart1, "RPM: %d, FondlerState: %d\r\n", getMotorRPM(Bus1, M2006, 1), fondlerState);

	  osDelay(1);
 80060a4:	2001      	movs	r0, #1
 80060a6:	f005 ffc9 	bl	800c03c <osDelay>
  {
 80060aa:	e43d      	b.n	8005928 <StartChassisTask+0xa8>
 80060ac:	ffffcf2c 	.word	0xffffcf2c
 80060b0:	ffffc568 	.word	0xffffc568

080060b4 <StartSentryAutonomy>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSentryAutonomy */
void StartSentryAutonomy(void *argument)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSentryAutonomy */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80060bc:	2001      	movs	r0, #1
 80060be:	f005 ffbd 	bl	800c03c <osDelay>
 80060c2:	e7fb      	b.n	80060bc <StartSentryAutonomy+0x8>

080060c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80060c8:	b672      	cpsid	i
}
 80060ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80060cc:	bf00      	nop
 80060ce:	e7fd      	b.n	80060cc <Error_Handler+0x8>

080060d0 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6178      	str	r0, [r7, #20]
 80060d8:	460b      	mov	r3, r1
 80060da:	60fa      	str	r2, [r7, #12]
 80060dc:	ed87 0a02 	vstr	s0, [r7, #8]
 80060e0:	edc7 0a01 	vstr	s1, [r7, #4]
 80060e4:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d042      	beq.n	8006172 <PID_init+0xa2>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d03f      	beq.n	8006172 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	7cfa      	ldrb	r2, [r7, #19]
 80060f6:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3304      	adds	r3, #4
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3308      	adds	r3, #8
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	68ba      	ldr	r2, [r7, #8]
 8006118:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	639a      	str	r2, [r3, #56]	@ 0x38
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	635a      	str	r2, [r3, #52]	@ 0x34
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	621a      	str	r2, [r3, #32]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	6a1a      	ldr	r2, [r3, #32]
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	625a      	str	r2, [r3, #36]	@ 0x24
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	645a      	str	r2, [r3, #68]	@ 0x44
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	641a      	str	r2, [r3, #64]	@ 0x40
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006170:	e000      	b.n	8006174 <PID_init+0xa4>
        return;
 8006172:	bf00      	nop
}
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	ed87 0a02 	vstr	s0, [r7, #8]
 800618a:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d102      	bne.n	800619a <PID_calc+0x1c>
    {
        return 0.0f;
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	e130      	b.n	80063fc <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 80061b6:	ed97 7a01 	vldr	s14, [r7, #4]
 80061ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80061be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f040 8095 	bne.w	80062fc <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80061de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	edd3 6a02 	vldr	s13, [r3, #8]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80061fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	ed93 7a03 	vldr	s14, [r3, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800623a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	edd3 7a05 	vldr	s15, [r3, #20]
 8006250:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006258:	dd04      	ble.n	8006264 <PID_calc+0xe6>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	695a      	ldr	r2, [r3, #20]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	629a      	str	r2, [r3, #40]	@ 0x28
 8006262:	e014      	b.n	800628e <PID_calc+0x110>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	edd3 7a05 	vldr	s15, [r3, #20]
 8006270:	eef1 7a67 	vneg.f32	s15, s15
 8006274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800627c:	d507      	bpl.n	800628e <PID_calc+0x110>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	edd3 7a05 	vldr	s15, [r3, #20]
 8006284:	eef1 7a67 	vneg.f32	s15, s15
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800629a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80062a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	ed93 7a08 	vldr	s14, [r3, #32]
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80062ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c2:	dd04      	ble.n	80062ce <PID_calc+0x150>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	691a      	ldr	r2, [r3, #16]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	621a      	str	r2, [r3, #32]
 80062cc:	e094      	b.n	80063f8 <PID_calc+0x27a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	ed93 7a08 	vldr	s14, [r3, #32]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80062da:	eef1 7a67 	vneg.f32	s15, s15
 80062de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e6:	f140 8087 	bpl.w	80063f8 <PID_calc+0x27a>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	edd3 7a04 	vldr	s15, [r3, #16]
 80062f0:	eef1 7a67 	vneg.f32	s15, s15
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	edc3 7a08 	vstr	s15, [r3, #32]
 80062fa:	e07d      	b.n	80063f8 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d179      	bne.n	80063f8 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	ed93 7a01 	vldr	s14, [r3, #4]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006316:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	ed93 7a02 	vldr	s14, [r3, #8]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8006330:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8006356:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800635a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8006364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	ed93 7a03 	vldr	s14, [r3, #12]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800637a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	ed93 7a08 	vldr	s14, [r3, #32]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8006396:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80063a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	ed93 7a08 	vldr	s14, [r3, #32]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	edd3 7a04 	vldr	s15, [r3, #16]
 80063ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c2:	dd04      	ble.n	80063ce <PID_calc+0x250>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	691a      	ldr	r2, [r3, #16]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	621a      	str	r2, [r3, #32]
 80063cc:	e014      	b.n	80063f8 <PID_calc+0x27a>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	ed93 7a08 	vldr	s14, [r3, #32]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	edd3 7a04 	vldr	s15, [r3, #16]
 80063da:	eef1 7a67 	vneg.f32	s15, s15
 80063de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e6:	d507      	bpl.n	80063f8 <PID_calc+0x27a>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80063ee:	eef1 7a67 	vneg.f32	s15, s15
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
}
 80063fc:	ee07 3a90 	vmov	s15, r3
 8006400:	eeb0 0a67 	vmov.f32	s0, s15
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006416:	2300      	movs	r3, #0
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	4b12      	ldr	r3, [pc, #72]	@ (8006464 <HAL_MspInit+0x54>)
 800641c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641e:	4a11      	ldr	r2, [pc, #68]	@ (8006464 <HAL_MspInit+0x54>)
 8006420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006424:	6453      	str	r3, [r2, #68]	@ 0x44
 8006426:	4b0f      	ldr	r3, [pc, #60]	@ (8006464 <HAL_MspInit+0x54>)
 8006428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800642a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800642e:	607b      	str	r3, [r7, #4]
 8006430:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006432:	2300      	movs	r3, #0
 8006434:	603b      	str	r3, [r7, #0]
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <HAL_MspInit+0x54>)
 8006438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643a:	4a0a      	ldr	r2, [pc, #40]	@ (8006464 <HAL_MspInit+0x54>)
 800643c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006440:	6413      	str	r3, [r2, #64]	@ 0x40
 8006442:	4b08      	ldr	r3, [pc, #32]	@ (8006464 <HAL_MspInit+0x54>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800644a:	603b      	str	r3, [r7, #0]
 800644c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800644e:	2200      	movs	r2, #0
 8006450:	210f      	movs	r1, #15
 8006452:	f06f 0001 	mvn.w	r0, #1
 8006456:	f001 fdc2 	bl	8007fde <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	40023800 	.word	0x40023800

08006468 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08c      	sub	sp, #48	@ 0x30
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006470:	f107 031c 	add.w	r3, r7, #28
 8006474:	2200      	movs	r2, #0
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	605a      	str	r2, [r3, #4]
 800647a:	609a      	str	r2, [r3, #8]
 800647c:	60da      	str	r2, [r3, #12]
 800647e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a4a      	ldr	r2, [pc, #296]	@ (80065b0 <HAL_CAN_MspInit+0x148>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d13d      	bne.n	8006506 <HAL_CAN_MspInit+0x9e>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800648a:	4b4a      	ldr	r3, [pc, #296]	@ (80065b4 <HAL_CAN_MspInit+0x14c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3301      	adds	r3, #1
 8006490:	4a48      	ldr	r2, [pc, #288]	@ (80065b4 <HAL_CAN_MspInit+0x14c>)
 8006492:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006494:	4b47      	ldr	r3, [pc, #284]	@ (80065b4 <HAL_CAN_MspInit+0x14c>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d10d      	bne.n	80064b8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800649c:	2300      	movs	r3, #0
 800649e:	61bb      	str	r3, [r7, #24]
 80064a0:	4b45      	ldr	r3, [pc, #276]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 80064a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064a4:	4a44      	ldr	r2, [pc, #272]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 80064a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80064aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80064ac:	4b42      	ldr	r3, [pc, #264]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 80064ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b4:	61bb      	str	r3, [r7, #24]
 80064b6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]
 80064bc:	4b3e      	ldr	r3, [pc, #248]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 80064be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c0:	4a3d      	ldr	r2, [pc, #244]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 80064c2:	f043 0308 	orr.w	r3, r3, #8
 80064c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80064c8:	4b3b      	ldr	r3, [pc, #236]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 80064ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064cc:	f003 0308 	and.w	r3, r3, #8
 80064d0:	617b      	str	r3, [r7, #20]
 80064d2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064d4:	2303      	movs	r3, #3
 80064d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d8:	2302      	movs	r3, #2
 80064da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064e0:	2303      	movs	r3, #3
 80064e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80064e4:	2309      	movs	r3, #9
 80064e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064e8:	f107 031c 	add.w	r3, r7, #28
 80064ec:	4619      	mov	r1, r3
 80064ee:	4833      	ldr	r0, [pc, #204]	@ (80065bc <HAL_CAN_MspInit+0x154>)
 80064f0:	f002 f9ae 	bl	8008850 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80064f4:	2200      	movs	r2, #0
 80064f6:	2105      	movs	r1, #5
 80064f8:	2014      	movs	r0, #20
 80064fa:	f001 fd70 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80064fe:	2014      	movs	r0, #20
 8006500:	f001 fd89 	bl	8008016 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8006504:	e04f      	b.n	80065a6 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a2d      	ldr	r2, [pc, #180]	@ (80065c0 <HAL_CAN_MspInit+0x158>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d14a      	bne.n	80065a6 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8006510:	2300      	movs	r3, #0
 8006512:	613b      	str	r3, [r7, #16]
 8006514:	4b28      	ldr	r3, [pc, #160]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 8006516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006518:	4a27      	ldr	r2, [pc, #156]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 800651a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800651e:	6413      	str	r3, [r2, #64]	@ 0x40
 8006520:	4b25      	ldr	r3, [pc, #148]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 8006522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006524:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800652c:	4b21      	ldr	r3, [pc, #132]	@ (80065b4 <HAL_CAN_MspInit+0x14c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3301      	adds	r3, #1
 8006532:	4a20      	ldr	r2, [pc, #128]	@ (80065b4 <HAL_CAN_MspInit+0x14c>)
 8006534:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006536:	4b1f      	ldr	r3, [pc, #124]	@ (80065b4 <HAL_CAN_MspInit+0x14c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d10d      	bne.n	800655a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800653e:	2300      	movs	r3, #0
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	4b1d      	ldr	r3, [pc, #116]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 8006544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006546:	4a1c      	ldr	r2, [pc, #112]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 8006548:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800654c:	6413      	str	r3, [r2, #64]	@ 0x40
 800654e:	4b1a      	ldr	r3, [pc, #104]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 8006550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006552:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800655a:	2300      	movs	r3, #0
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	4b16      	ldr	r3, [pc, #88]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 8006560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006562:	4a15      	ldr	r2, [pc, #84]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 8006564:	f043 0302 	orr.w	r3, r3, #2
 8006568:	6313      	str	r3, [r2, #48]	@ 0x30
 800656a:	4b13      	ldr	r3, [pc, #76]	@ (80065b8 <HAL_CAN_MspInit+0x150>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	60bb      	str	r3, [r7, #8]
 8006574:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006576:	2360      	movs	r3, #96	@ 0x60
 8006578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800657a:	2302      	movs	r3, #2
 800657c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800657e:	2300      	movs	r3, #0
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006582:	2303      	movs	r3, #3
 8006584:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8006586:	2309      	movs	r3, #9
 8006588:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800658a:	f107 031c 	add.w	r3, r7, #28
 800658e:	4619      	mov	r1, r3
 8006590:	480c      	ldr	r0, [pc, #48]	@ (80065c4 <HAL_CAN_MspInit+0x15c>)
 8006592:	f002 f95d 	bl	8008850 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8006596:	2200      	movs	r2, #0
 8006598:	2105      	movs	r1, #5
 800659a:	2040      	movs	r0, #64	@ 0x40
 800659c:	f001 fd1f 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80065a0:	2040      	movs	r0, #64	@ 0x40
 80065a2:	f001 fd38 	bl	8008016 <HAL_NVIC_EnableIRQ>
}
 80065a6:	bf00      	nop
 80065a8:	3730      	adds	r7, #48	@ 0x30
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	40006400 	.word	0x40006400
 80065b4:	20000f64 	.word	0x20000f64
 80065b8:	40023800 	.word	0x40023800
 80065bc:	40020c00 	.word	0x40020c00
 80065c0:	40006800 	.word	0x40006800
 80065c4:	40020400 	.word	0x40020400

080065c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b08a      	sub	sp, #40	@ 0x28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065d0:	f107 0314 	add.w	r3, r7, #20
 80065d4:	2200      	movs	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	609a      	str	r2, [r3, #8]
 80065dc:	60da      	str	r2, [r3, #12]
 80065de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a29      	ldr	r2, [pc, #164]	@ (800668c <HAL_I2C_MspInit+0xc4>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d14b      	bne.n	8006682 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ea:	2300      	movs	r3, #0
 80065ec:	613b      	str	r3, [r7, #16]
 80065ee:	4b28      	ldr	r3, [pc, #160]	@ (8006690 <HAL_I2C_MspInit+0xc8>)
 80065f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f2:	4a27      	ldr	r2, [pc, #156]	@ (8006690 <HAL_I2C_MspInit+0xc8>)
 80065f4:	f043 0304 	orr.w	r3, r3, #4
 80065f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80065fa:	4b25      	ldr	r3, [pc, #148]	@ (8006690 <HAL_I2C_MspInit+0xc8>)
 80065fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fe:	f003 0304 	and.w	r3, r3, #4
 8006602:	613b      	str	r3, [r7, #16]
 8006604:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006606:	2300      	movs	r3, #0
 8006608:	60fb      	str	r3, [r7, #12]
 800660a:	4b21      	ldr	r3, [pc, #132]	@ (8006690 <HAL_I2C_MspInit+0xc8>)
 800660c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800660e:	4a20      	ldr	r2, [pc, #128]	@ (8006690 <HAL_I2C_MspInit+0xc8>)
 8006610:	f043 0301 	orr.w	r3, r3, #1
 8006614:	6313      	str	r3, [r2, #48]	@ 0x30
 8006616:	4b1e      	ldr	r3, [pc, #120]	@ (8006690 <HAL_I2C_MspInit+0xc8>)
 8006618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006622:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006628:	2312      	movs	r3, #18
 800662a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800662c:	2300      	movs	r3, #0
 800662e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006630:	2303      	movs	r3, #3
 8006632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006634:	2304      	movs	r3, #4
 8006636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006638:	f107 0314 	add.w	r3, r7, #20
 800663c:	4619      	mov	r1, r3
 800663e:	4815      	ldr	r0, [pc, #84]	@ (8006694 <HAL_I2C_MspInit+0xcc>)
 8006640:	f002 f906 	bl	8008850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006644:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800664a:	2312      	movs	r3, #18
 800664c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664e:	2300      	movs	r3, #0
 8006650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006652:	2303      	movs	r3, #3
 8006654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006656:	2304      	movs	r3, #4
 8006658:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800665a:	f107 0314 	add.w	r3, r7, #20
 800665e:	4619      	mov	r1, r3
 8006660:	480d      	ldr	r0, [pc, #52]	@ (8006698 <HAL_I2C_MspInit+0xd0>)
 8006662:	f002 f8f5 	bl	8008850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]
 800666a:	4b09      	ldr	r3, [pc, #36]	@ (8006690 <HAL_I2C_MspInit+0xc8>)
 800666c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800666e:	4a08      	ldr	r2, [pc, #32]	@ (8006690 <HAL_I2C_MspInit+0xc8>)
 8006670:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006674:	6413      	str	r3, [r2, #64]	@ 0x40
 8006676:	4b06      	ldr	r3, [pc, #24]	@ (8006690 <HAL_I2C_MspInit+0xc8>)
 8006678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800667a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800667e:	60bb      	str	r3, [r7, #8]
 8006680:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8006682:	bf00      	nop
 8006684:	3728      	adds	r7, #40	@ 0x28
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}
 800668a:	bf00      	nop
 800668c:	40005c00 	.word	0x40005c00
 8006690:	40023800 	.word	0x40023800
 8006694:	40020800 	.word	0x40020800
 8006698:	40020000 	.word	0x40020000

0800669c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b08a      	sub	sp, #40	@ 0x28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066a4:	f107 0314 	add.w	r3, r7, #20
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	609a      	str	r2, [r3, #8]
 80066b0:	60da      	str	r2, [r3, #12]
 80066b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a28      	ldr	r2, [pc, #160]	@ (800675c <HAL_SPI_MspInit+0xc0>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d149      	bne.n	8006752 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80066be:	2300      	movs	r3, #0
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	4b27      	ldr	r3, [pc, #156]	@ (8006760 <HAL_SPI_MspInit+0xc4>)
 80066c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c6:	4a26      	ldr	r2, [pc, #152]	@ (8006760 <HAL_SPI_MspInit+0xc4>)
 80066c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80066ce:	4b24      	ldr	r3, [pc, #144]	@ (8006760 <HAL_SPI_MspInit+0xc4>)
 80066d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066d2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066d6:	613b      	str	r3, [r7, #16]
 80066d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066da:	2300      	movs	r3, #0
 80066dc:	60fb      	str	r3, [r7, #12]
 80066de:	4b20      	ldr	r3, [pc, #128]	@ (8006760 <HAL_SPI_MspInit+0xc4>)
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	4a1f      	ldr	r2, [pc, #124]	@ (8006760 <HAL_SPI_MspInit+0xc4>)
 80066e4:	f043 0302 	orr.w	r3, r3, #2
 80066e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80066ea:	4b1d      	ldr	r3, [pc, #116]	@ (8006760 <HAL_SPI_MspInit+0xc4>)
 80066ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066f6:	2300      	movs	r3, #0
 80066f8:	60bb      	str	r3, [r7, #8]
 80066fa:	4b19      	ldr	r3, [pc, #100]	@ (8006760 <HAL_SPI_MspInit+0xc4>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066fe:	4a18      	ldr	r2, [pc, #96]	@ (8006760 <HAL_SPI_MspInit+0xc4>)
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	6313      	str	r3, [r2, #48]	@ 0x30
 8006706:	4b16      	ldr	r3, [pc, #88]	@ (8006760 <HAL_SPI_MspInit+0xc4>)
 8006708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670a:	f003 0301 	and.w	r3, r3, #1
 800670e:	60bb      	str	r3, [r7, #8]
 8006710:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8006712:	2318      	movs	r3, #24
 8006714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006716:	2302      	movs	r3, #2
 8006718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800671e:	2303      	movs	r3, #3
 8006720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006722:	2305      	movs	r3, #5
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006726:	f107 0314 	add.w	r3, r7, #20
 800672a:	4619      	mov	r1, r3
 800672c:	480d      	ldr	r0, [pc, #52]	@ (8006764 <HAL_SPI_MspInit+0xc8>)
 800672e:	f002 f88f 	bl	8008850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006732:	2380      	movs	r3, #128	@ 0x80
 8006734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006736:	2302      	movs	r3, #2
 8006738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800673a:	2300      	movs	r3, #0
 800673c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800673e:	2303      	movs	r3, #3
 8006740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006742:	2305      	movs	r3, #5
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006746:	f107 0314 	add.w	r3, r7, #20
 800674a:	4619      	mov	r1, r3
 800674c:	4806      	ldr	r0, [pc, #24]	@ (8006768 <HAL_SPI_MspInit+0xcc>)
 800674e:	f002 f87f 	bl	8008850 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8006752:	bf00      	nop
 8006754:	3728      	adds	r7, #40	@ 0x28
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40013000 	.word	0x40013000
 8006760:	40023800 	.word	0x40023800
 8006764:	40020400 	.word	0x40020400
 8006768:	40020000 	.word	0x40020000

0800676c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1f      	ldr	r2, [pc, #124]	@ (80067f8 <HAL_TIM_PWM_MspInit+0x8c>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d10e      	bne.n	800679c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800677e:	2300      	movs	r3, #0
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	4b1e      	ldr	r3, [pc, #120]	@ (80067fc <HAL_TIM_PWM_MspInit+0x90>)
 8006784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006786:	4a1d      	ldr	r2, [pc, #116]	@ (80067fc <HAL_TIM_PWM_MspInit+0x90>)
 8006788:	f043 0301 	orr.w	r3, r3, #1
 800678c:	6453      	str	r3, [r2, #68]	@ 0x44
 800678e:	4b1b      	ldr	r3, [pc, #108]	@ (80067fc <HAL_TIM_PWM_MspInit+0x90>)
 8006790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800679a:	e026      	b.n	80067ea <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a17      	ldr	r2, [pc, #92]	@ (8006800 <HAL_TIM_PWM_MspInit+0x94>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10e      	bne.n	80067c4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80067a6:	2300      	movs	r3, #0
 80067a8:	613b      	str	r3, [r7, #16]
 80067aa:	4b14      	ldr	r3, [pc, #80]	@ (80067fc <HAL_TIM_PWM_MspInit+0x90>)
 80067ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ae:	4a13      	ldr	r2, [pc, #76]	@ (80067fc <HAL_TIM_PWM_MspInit+0x90>)
 80067b0:	f043 0308 	orr.w	r3, r3, #8
 80067b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80067b6:	4b11      	ldr	r3, [pc, #68]	@ (80067fc <HAL_TIM_PWM_MspInit+0x90>)
 80067b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	693b      	ldr	r3, [r7, #16]
}
 80067c2:	e012      	b.n	80067ea <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a0e      	ldr	r2, [pc, #56]	@ (8006804 <HAL_TIM_PWM_MspInit+0x98>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d10d      	bne.n	80067ea <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
 80067d2:	4b0a      	ldr	r3, [pc, #40]	@ (80067fc <HAL_TIM_PWM_MspInit+0x90>)
 80067d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067d6:	4a09      	ldr	r2, [pc, #36]	@ (80067fc <HAL_TIM_PWM_MspInit+0x90>)
 80067d8:	f043 0302 	orr.w	r3, r3, #2
 80067dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80067de:	4b07      	ldr	r3, [pc, #28]	@ (80067fc <HAL_TIM_PWM_MspInit+0x90>)
 80067e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40010000 	.word	0x40010000
 80067fc:	40023800 	.word	0x40023800
 8006800:	40000c00 	.word	0x40000c00
 8006804:	40010400 	.word	0x40010400

08006808 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a15      	ldr	r2, [pc, #84]	@ (800686c <HAL_TIM_Base_MspInit+0x64>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d10e      	bne.n	8006838 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
 800681e:	4b14      	ldr	r3, [pc, #80]	@ (8006870 <HAL_TIM_Base_MspInit+0x68>)
 8006820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006822:	4a13      	ldr	r2, [pc, #76]	@ (8006870 <HAL_TIM_Base_MspInit+0x68>)
 8006824:	f043 0304 	orr.w	r3, r3, #4
 8006828:	6413      	str	r3, [r2, #64]	@ 0x40
 800682a:	4b11      	ldr	r3, [pc, #68]	@ (8006870 <HAL_TIM_Base_MspInit+0x68>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 8006836:	e012      	b.n	800685e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a0d      	ldr	r2, [pc, #52]	@ (8006874 <HAL_TIM_Base_MspInit+0x6c>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d10d      	bne.n	800685e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006842:	2300      	movs	r3, #0
 8006844:	60bb      	str	r3, [r7, #8]
 8006846:	4b0a      	ldr	r3, [pc, #40]	@ (8006870 <HAL_TIM_Base_MspInit+0x68>)
 8006848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800684a:	4a09      	ldr	r2, [pc, #36]	@ (8006870 <HAL_TIM_Base_MspInit+0x68>)
 800684c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006850:	6453      	str	r3, [r2, #68]	@ 0x44
 8006852:	4b07      	ldr	r3, [pc, #28]	@ (8006870 <HAL_TIM_Base_MspInit+0x68>)
 8006854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800685a:	60bb      	str	r3, [r7, #8]
 800685c:	68bb      	ldr	r3, [r7, #8]
}
 800685e:	bf00      	nop
 8006860:	3714      	adds	r7, #20
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	40000800 	.word	0x40000800
 8006870:	40023800 	.word	0x40023800
 8006874:	40014400 	.word	0x40014400

08006878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08e      	sub	sp, #56	@ 0x38
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	605a      	str	r2, [r3, #4]
 800688a:	609a      	str	r2, [r3, #8]
 800688c:	60da      	str	r2, [r3, #12]
 800688e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a6a      	ldr	r2, [pc, #424]	@ (8006a40 <HAL_TIM_MspPostInit+0x1c8>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d11f      	bne.n	80068da <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800689a:	2300      	movs	r3, #0
 800689c:	623b      	str	r3, [r7, #32]
 800689e:	4b69      	ldr	r3, [pc, #420]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 80068a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a2:	4a68      	ldr	r2, [pc, #416]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 80068a4:	f043 0310 	orr.w	r3, r3, #16
 80068a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80068aa:	4b66      	ldr	r3, [pc, #408]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 80068ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	623b      	str	r3, [r7, #32]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80068b6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80068ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068bc:	2302      	movs	r3, #2
 80068be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c0:	2300      	movs	r3, #0
 80068c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068c4:	2300      	movs	r3, #0
 80068c6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80068c8:	2301      	movs	r3, #1
 80068ca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80068d0:	4619      	mov	r1, r3
 80068d2:	485d      	ldr	r0, [pc, #372]	@ (8006a48 <HAL_TIM_MspPostInit+0x1d0>)
 80068d4:	f001 ffbc 	bl	8008850 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80068d8:	e0ae      	b.n	8006a38 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a5b      	ldr	r2, [pc, #364]	@ (8006a4c <HAL_TIM_MspPostInit+0x1d4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d11f      	bne.n	8006924 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068e4:	2300      	movs	r3, #0
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	4b56      	ldr	r3, [pc, #344]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 80068ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068ec:	4a55      	ldr	r2, [pc, #340]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 80068ee:	f043 0308 	orr.w	r3, r3, #8
 80068f2:	6313      	str	r3, [r2, #48]	@ 0x30
 80068f4:	4b53      	ldr	r3, [pc, #332]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 80068f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	61fb      	str	r3, [r7, #28]
 80068fe:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006900:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006906:	2302      	movs	r3, #2
 8006908:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800690a:	2300      	movs	r3, #0
 800690c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800690e:	2300      	movs	r3, #0
 8006910:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006912:	2302      	movs	r3, #2
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006916:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800691a:	4619      	mov	r1, r3
 800691c:	484c      	ldr	r0, [pc, #304]	@ (8006a50 <HAL_TIM_MspPostInit+0x1d8>)
 800691e:	f001 ff97 	bl	8008850 <HAL_GPIO_Init>
}
 8006922:	e089      	b.n	8006a38 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a4a      	ldr	r2, [pc, #296]	@ (8006a54 <HAL_TIM_MspPostInit+0x1dc>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d11f      	bne.n	800696e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	4b44      	ldr	r3, [pc, #272]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 8006934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006936:	4a43      	ldr	r2, [pc, #268]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 8006938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800693c:	6313      	str	r3, [r2, #48]	@ 0x30
 800693e:	4b41      	ldr	r3, [pc, #260]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 8006940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800694a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800694e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006950:	2302      	movs	r3, #2
 8006952:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006954:	2300      	movs	r3, #0
 8006956:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006958:	2300      	movs	r3, #0
 800695a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800695c:	2302      	movs	r3, #2
 800695e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006964:	4619      	mov	r1, r3
 8006966:	483c      	ldr	r0, [pc, #240]	@ (8006a58 <HAL_TIM_MspPostInit+0x1e0>)
 8006968:	f001 ff72 	bl	8008850 <HAL_GPIO_Init>
}
 800696c:	e064      	b.n	8006a38 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a3a      	ldr	r2, [pc, #232]	@ (8006a5c <HAL_TIM_MspPostInit+0x1e4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d13c      	bne.n	80069f2 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006978:	2300      	movs	r3, #0
 800697a:	617b      	str	r3, [r7, #20]
 800697c:	4b31      	ldr	r3, [pc, #196]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 800697e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006980:	4a30      	ldr	r2, [pc, #192]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 8006982:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006986:	6313      	str	r3, [r2, #48]	@ 0x30
 8006988:	4b2e      	ldr	r3, [pc, #184]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]
 8006998:	4b2a      	ldr	r3, [pc, #168]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 800699a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699c:	4a29      	ldr	r2, [pc, #164]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 800699e:	f043 0304 	orr.w	r3, r3, #4
 80069a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80069a4:	4b27      	ldr	r3, [pc, #156]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 80069a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069a8:	f003 0304 	and.w	r3, r3, #4
 80069ac:	613b      	str	r3, [r7, #16]
 80069ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80069b0:	23c0      	movs	r3, #192	@ 0xc0
 80069b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b4:	2302      	movs	r3, #2
 80069b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069bc:	2300      	movs	r3, #0
 80069be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80069c0:	2303      	movs	r3, #3
 80069c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80069c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069c8:	4619      	mov	r1, r3
 80069ca:	4825      	ldr	r0, [pc, #148]	@ (8006a60 <HAL_TIM_MspPostInit+0x1e8>)
 80069cc:	f001 ff40 	bl	8008850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80069d0:	2340      	movs	r3, #64	@ 0x40
 80069d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d4:	2302      	movs	r3, #2
 80069d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d8:	2300      	movs	r3, #0
 80069da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069dc:	2300      	movs	r3, #0
 80069de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80069e0:	2303      	movs	r3, #3
 80069e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069e8:	4619      	mov	r1, r3
 80069ea:	481e      	ldr	r0, [pc, #120]	@ (8006a64 <HAL_TIM_MspPostInit+0x1ec>)
 80069ec:	f001 ff30 	bl	8008850 <HAL_GPIO_Init>
}
 80069f0:	e022      	b.n	8006a38 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006a68 <HAL_TIM_MspPostInit+0x1f0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d11d      	bne.n	8006a38 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80069fc:	2300      	movs	r3, #0
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	4b10      	ldr	r3, [pc, #64]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 8006a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a04:	4a0f      	ldr	r2, [pc, #60]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 8006a06:	f043 0320 	orr.w	r3, r3, #32
 8006a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a0c:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <HAL_TIM_MspPostInit+0x1cc>)
 8006a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	60fb      	str	r3, [r7, #12]
 8006a16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006a18:	2340      	movs	r3, #64	@ 0x40
 8006a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a1c:	2302      	movs	r3, #2
 8006a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a20:	2301      	movs	r3, #1
 8006a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a24:	2302      	movs	r3, #2
 8006a26:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a30:	4619      	mov	r1, r3
 8006a32:	480e      	ldr	r0, [pc, #56]	@ (8006a6c <HAL_TIM_MspPostInit+0x1f4>)
 8006a34:	f001 ff0c 	bl	8008850 <HAL_GPIO_Init>
}
 8006a38:	bf00      	nop
 8006a3a:	3738      	adds	r7, #56	@ 0x38
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40023800 	.word	0x40023800
 8006a48:	40021000 	.word	0x40021000
 8006a4c:	40000800 	.word	0x40000800
 8006a50:	40020c00 	.word	0x40020c00
 8006a54:	40000c00 	.word	0x40000c00
 8006a58:	40021c00 	.word	0x40021c00
 8006a5c:	40010400 	.word	0x40010400
 8006a60:	40022000 	.word	0x40022000
 8006a64:	40020800 	.word	0x40020800
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40021400 	.word	0x40021400

08006a70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08e      	sub	sp, #56	@ 0x38
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	605a      	str	r2, [r3, #4]
 8006a82:	609a      	str	r2, [r3, #8]
 8006a84:	60da      	str	r2, [r3, #12]
 8006a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a74      	ldr	r2, [pc, #464]	@ (8006c60 <HAL_UART_MspInit+0x1f0>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	f040 8083 	bne.w	8006b9a <HAL_UART_MspInit+0x12a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006a94:	2300      	movs	r3, #0
 8006a96:	623b      	str	r3, [r7, #32]
 8006a98:	4b72      	ldr	r3, [pc, #456]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006a9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a9c:	4a71      	ldr	r2, [pc, #452]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006a9e:	f043 0310 	orr.w	r3, r3, #16
 8006aa2:	6453      	str	r3, [r2, #68]	@ 0x44
 8006aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	623b      	str	r3, [r7, #32]
 8006aae:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]
 8006ab4:	4b6b      	ldr	r3, [pc, #428]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab8:	4a6a      	ldr	r2, [pc, #424]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006aba:	f043 0302 	orr.w	r3, r3, #2
 8006abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ac0:	4b68      	ldr	r3, [pc, #416]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac4:	f003 0302 	and.w	r3, r3, #2
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006acc:	2300      	movs	r3, #0
 8006ace:	61bb      	str	r3, [r7, #24]
 8006ad0:	4b64      	ldr	r3, [pc, #400]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad4:	4a63      	ldr	r2, [pc, #396]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006ad6:	f043 0301 	orr.w	r3, r3, #1
 8006ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8006adc:	4b61      	ldr	r3, [pc, #388]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006ae8:	2380      	movs	r3, #128	@ 0x80
 8006aea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006aec:	2302      	movs	r3, #2
 8006aee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006af4:	2303      	movs	r3, #3
 8006af6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006af8:	2307      	movs	r3, #7
 8006afa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b00:	4619      	mov	r1, r3
 8006b02:	4859      	ldr	r0, [pc, #356]	@ (8006c68 <HAL_UART_MspInit+0x1f8>)
 8006b04:	f001 fea4 	bl	8008850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006b08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b0e:	2302      	movs	r3, #2
 8006b10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b12:	2300      	movs	r3, #0
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b16:	2303      	movs	r3, #3
 8006b18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006b1a:	2307      	movs	r3, #7
 8006b1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b22:	4619      	mov	r1, r3
 8006b24:	4851      	ldr	r0, [pc, #324]	@ (8006c6c <HAL_UART_MspInit+0x1fc>)
 8006b26:	f001 fe93 	bl	8008850 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006b2a:	4b51      	ldr	r3, [pc, #324]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b2c:	4a51      	ldr	r2, [pc, #324]	@ (8006c74 <HAL_UART_MspInit+0x204>)
 8006b2e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006b30:	4b4f      	ldr	r3, [pc, #316]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006b36:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b38:	4b4d      	ldr	r3, [pc, #308]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b3e:	4b4c      	ldr	r3, [pc, #304]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b40:	2200      	movs	r2, #0
 8006b42:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006b44:	4b4a      	ldr	r3, [pc, #296]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006b4c:	4b48      	ldr	r3, [pc, #288]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006b52:	4b47      	ldr	r3, [pc, #284]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006b58:	4b45      	ldr	r3, [pc, #276]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006b5e:	4b44      	ldr	r3, [pc, #272]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b60:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006b64:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b66:	4b42      	ldr	r3, [pc, #264]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006b6c:	4840      	ldr	r0, [pc, #256]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b6e:	f001 fa6d 	bl	800804c <HAL_DMA_Init>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8006b78:	f7ff faa4 	bl	80060c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a3c      	ldr	r2, [pc, #240]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b80:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006b82:	4a3b      	ldr	r2, [pc, #236]	@ (8006c70 <HAL_UART_MspInit+0x200>)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2105      	movs	r1, #5
 8006b8c:	2025      	movs	r0, #37	@ 0x25
 8006b8e:	f001 fa26 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006b92:	2025      	movs	r0, #37	@ 0x25
 8006b94:	f001 fa3f 	bl	8008016 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8006b98:	e0df      	b.n	8006d5a <HAL_UART_MspInit+0x2ea>
  else if(huart->Instance==USART3)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a36      	ldr	r2, [pc, #216]	@ (8006c78 <HAL_UART_MspInit+0x208>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d171      	bne.n	8006c88 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	4b2e      	ldr	r3, [pc, #184]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bac:	4a2d      	ldr	r2, [pc, #180]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006bae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8006bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	4b27      	ldr	r3, [pc, #156]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc8:	4a26      	ldr	r2, [pc, #152]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006bca:	f043 0304 	orr.w	r3, r3, #4
 8006bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bd0:	4b24      	ldr	r3, [pc, #144]	@ (8006c64 <HAL_UART_MspInit+0x1f4>)
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd4:	f003 0304 	and.w	r3, r3, #4
 8006bd8:	613b      	str	r3, [r7, #16]
 8006bda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8006bdc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006be2:	2302      	movs	r3, #2
 8006be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bea:	2303      	movs	r3, #3
 8006bec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006bee:	2307      	movs	r3, #7
 8006bf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4820      	ldr	r0, [pc, #128]	@ (8006c7c <HAL_UART_MspInit+0x20c>)
 8006bfa:	f001 fe29 	bl	8008850 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006bfe:	4b20      	ldr	r3, [pc, #128]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c00:	4a20      	ldr	r2, [pc, #128]	@ (8006c84 <HAL_UART_MspInit+0x214>)
 8006c02:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006c04:	4b1e      	ldr	r3, [pc, #120]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006c0a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c0e:	2200      	movs	r2, #0
 8006c10:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c12:	4b1b      	ldr	r3, [pc, #108]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c18:	4b19      	ldr	r3, [pc, #100]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c1e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c20:	4b17      	ldr	r3, [pc, #92]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c26:	4b16      	ldr	r3, [pc, #88]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006c2c:	4b14      	ldr	r3, [pc, #80]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006c32:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006c34:	4b12      	ldr	r3, [pc, #72]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c36:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006c3a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c3c:	4b10      	ldr	r3, [pc, #64]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006c42:	480f      	ldr	r0, [pc, #60]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c44:	f001 fa02 	bl	800804c <HAL_DMA_Init>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 8006c4e:	f7ff fa39 	bl	80060c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a0a      	ldr	r2, [pc, #40]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006c58:	4a09      	ldr	r2, [pc, #36]	@ (8006c80 <HAL_UART_MspInit+0x210>)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8006c5e:	e07c      	b.n	8006d5a <HAL_UART_MspInit+0x2ea>
 8006c60:	40011000 	.word	0x40011000
 8006c64:	40023800 	.word	0x40023800
 8006c68:	40020400 	.word	0x40020400
 8006c6c:	40020000 	.word	0x40020000
 8006c70:	20000e34 	.word	0x20000e34
 8006c74:	40026440 	.word	0x40026440
 8006c78:	40004800 	.word	0x40004800
 8006c7c:	40020800 	.word	0x40020800
 8006c80:	20000e94 	.word	0x20000e94
 8006c84:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a35      	ldr	r2, [pc, #212]	@ (8006d64 <HAL_UART_MspInit+0x2f4>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d163      	bne.n	8006d5a <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
 8006c96:	4b34      	ldr	r3, [pc, #208]	@ (8006d68 <HAL_UART_MspInit+0x2f8>)
 8006c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9a:	4a33      	ldr	r2, [pc, #204]	@ (8006d68 <HAL_UART_MspInit+0x2f8>)
 8006c9c:	f043 0320 	orr.w	r3, r3, #32
 8006ca0:	6453      	str	r3, [r2, #68]	@ 0x44
 8006ca2:	4b31      	ldr	r3, [pc, #196]	@ (8006d68 <HAL_UART_MspInit+0x2f8>)
 8006ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ca6:	f003 0320 	and.w	r3, r3, #32
 8006caa:	60fb      	str	r3, [r7, #12]
 8006cac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d68 <HAL_UART_MspInit+0x2f8>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8006d68 <HAL_UART_MspInit+0x2f8>)
 8006cb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8006cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8006d68 <HAL_UART_MspInit+0x2f8>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cc6:	60bb      	str	r3, [r7, #8]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8006cca:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8006cce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006cdc:	2308      	movs	r3, #8
 8006cde:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006ce0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4821      	ldr	r0, [pc, #132]	@ (8006d6c <HAL_UART_MspInit+0x2fc>)
 8006ce8:	f001 fdb2 	bl	8008850 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006cec:	4b20      	ldr	r3, [pc, #128]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006cee:	4a21      	ldr	r2, [pc, #132]	@ (8006d74 <HAL_UART_MspInit+0x304>)
 8006cf0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006cf4:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006cf8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d00:	4b1b      	ldr	r3, [pc, #108]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d06:	4b1a      	ldr	r3, [pc, #104]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d0c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d0e:	4b18      	ldr	r3, [pc, #96]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006d14:	4b16      	ldr	r3, [pc, #88]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006d1a:	4b15      	ldr	r3, [pc, #84]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006d20:	4b13      	ldr	r3, [pc, #76]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d22:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006d26:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d28:	4b11      	ldr	r3, [pc, #68]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006d2e:	4810      	ldr	r0, [pc, #64]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d30:	f001 f98c 	bl	800804c <HAL_DMA_Init>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 8006d3a:	f7ff f9c3 	bl	80060c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a0b      	ldr	r2, [pc, #44]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d42:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006d44:	4a0a      	ldr	r2, [pc, #40]	@ (8006d70 <HAL_UART_MspInit+0x300>)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	2105      	movs	r1, #5
 8006d4e:	2047      	movs	r0, #71	@ 0x47
 8006d50:	f001 f945 	bl	8007fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006d54:	2047      	movs	r0, #71	@ 0x47
 8006d56:	f001 f95e 	bl	8008016 <HAL_NVIC_EnableIRQ>
}
 8006d5a:	bf00      	nop
 8006d5c:	3738      	adds	r7, #56	@ 0x38
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40011400 	.word	0x40011400
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	40021800 	.word	0x40021800
 8006d70:	20000ef4 	.word	0x20000ef4
 8006d74:	40026428 	.word	0x40026428

08006d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006d7c:	f002 fcde 	bl	800973c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006d80:	bf00      	nop
 8006d82:	e7fd      	b.n	8006d80 <NMI_Handler+0x8>

08006d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006d84:	b480      	push	{r7}
 8006d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006d88:	bf00      	nop
 8006d8a:	e7fd      	b.n	8006d88 <HardFault_Handler+0x4>

08006d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006d90:	bf00      	nop
 8006d92:	e7fd      	b.n	8006d90 <MemManage_Handler+0x4>

08006d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006d94:	b480      	push	{r7}
 8006d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006d98:	bf00      	nop
 8006d9a:	e7fd      	b.n	8006d98 <BusFault_Handler+0x4>

08006d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <UsageFault_Handler+0x4>

08006da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006da4:	b480      	push	{r7}
 8006da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006da8:	bf00      	nop
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006db2:	b580      	push	{r7, lr}
 8006db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006db6:	f000 f9b1 	bl	800711c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006dba:	f006 fe8f 	bl	800dadc <xTaskGetSchedulerState>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d001      	beq.n	8006dc8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006dc4:	f007 fd68 	bl	800e898 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006dc8:	bf00      	nop
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006dd0:	2008      	movs	r0, #8
 8006dd2:	f001 fef3 	bl	8008bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8006dd6:	bf00      	nop
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8006dde:	2010      	movs	r0, #16
 8006de0:	f001 feec 	bl	8008bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006de4:	bf00      	nop
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006dec:	4802      	ldr	r0, [pc, #8]	@ (8006df8 <DMA1_Stream1_IRQHandler+0x10>)
 8006dee:	f001 fac5 	bl	800837c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006df2:	bf00      	nop
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000e94 	.word	0x20000e94

08006dfc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006e00:	4802      	ldr	r0, [pc, #8]	@ (8006e0c <CAN1_RX0_IRQHandler+0x10>)
 8006e02:	f000 fde1 	bl	80079c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006e06:	bf00      	nop
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000af8 	.word	0x20000af8

08006e10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006e14:	4802      	ldr	r0, [pc, #8]	@ (8006e20 <USART1_IRQHandler+0x10>)
 8006e16:	f003 fefb 	bl	800ac10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006e1a:	bf00      	nop
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	20000d5c 	.word	0x20000d5c

08006e24 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006e28:	4802      	ldr	r0, [pc, #8]	@ (8006e34 <DMA2_Stream1_IRQHandler+0x10>)
 8006e2a:	f001 faa7 	bl	800837c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8006e2e:	bf00      	nop
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	20000ef4 	.word	0x20000ef4

08006e38 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006e3c:	4802      	ldr	r0, [pc, #8]	@ (8006e48 <DMA2_Stream2_IRQHandler+0x10>)
 8006e3e:	f001 fa9d 	bl	800837c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006e42:	bf00      	nop
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	20000e34 	.word	0x20000e34

08006e4c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8006e50:	4802      	ldr	r0, [pc, #8]	@ (8006e5c <CAN2_RX0_IRQHandler+0x10>)
 8006e52:	f000 fdb9 	bl	80079c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8006e56:	bf00      	nop
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000b20 	.word	0x20000b20

08006e60 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006e64:	4802      	ldr	r0, [pc, #8]	@ (8006e70 <USART6_IRQHandler+0x10>)
 8006e66:	f003 fed3 	bl	800ac10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006e6a:	bf00      	nop
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	20000dec 	.word	0x20000dec

08006e74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  return 1;
 8006e78:	2301      	movs	r3, #1
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <_kill>:

int _kill(int pid, int sig)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006e8e:	f008 fcc3 	bl	800f818 <__errno>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2216      	movs	r2, #22
 8006e96:	601a      	str	r2, [r3, #0]
  return -1;
 8006e98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <_exit>:

void _exit (int status)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006eac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f7ff ffe7 	bl	8006e84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006eb6:	bf00      	nop
 8006eb8:	e7fd      	b.n	8006eb6 <_exit+0x12>

08006eba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	e00a      	b.n	8006ee2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8006ecc:	f3af 8000 	nop.w
 8006ed0:	4601      	mov	r1, r0
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	60ba      	str	r2, [r7, #8]
 8006ed8:	b2ca      	uxtb	r2, r1
 8006eda:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	617b      	str	r3, [r7, #20]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	dbf0      	blt.n	8006ecc <_read+0x12>
  }

  return len;
 8006eea:	687b      	ldr	r3, [r7, #4]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}

08006ef4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f00:	2300      	movs	r3, #0
 8006f02:	617b      	str	r3, [r7, #20]
 8006f04:	e009      	b.n	8006f1a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	60ba      	str	r2, [r7, #8]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	3301      	adds	r3, #1
 8006f18:	617b      	str	r3, [r7, #20]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	dbf1      	blt.n	8006f06 <_write+0x12>
  }
  return len;
 8006f22:	687b      	ldr	r3, [r7, #4]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <_close>:

int _close(int file)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006f34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	370c      	adds	r7, #12
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b083      	sub	sp, #12
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006f54:	605a      	str	r2, [r3, #4]
  return 0;
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <_isatty>:

int _isatty(int file)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8006f6c:	2301      	movs	r3, #1
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	370c      	adds	r7, #12
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr

08006f7a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
 8006f82:	60b9      	str	r1, [r7, #8]
 8006f84:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f9c:	4a14      	ldr	r2, [pc, #80]	@ (8006ff0 <_sbrk+0x5c>)
 8006f9e:	4b15      	ldr	r3, [pc, #84]	@ (8006ff4 <_sbrk+0x60>)
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006fa8:	4b13      	ldr	r3, [pc, #76]	@ (8006ff8 <_sbrk+0x64>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d102      	bne.n	8006fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006fb0:	4b11      	ldr	r3, [pc, #68]	@ (8006ff8 <_sbrk+0x64>)
 8006fb2:	4a12      	ldr	r2, [pc, #72]	@ (8006ffc <_sbrk+0x68>)
 8006fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006fb6:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <_sbrk+0x64>)
 8006fb8:	681a      	ldr	r2, [r3, #0]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d207      	bcs.n	8006fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006fc4:	f008 fc28 	bl	800f818 <__errno>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	220c      	movs	r2, #12
 8006fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fd2:	e009      	b.n	8006fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006fd4:	4b08      	ldr	r3, [pc, #32]	@ (8006ff8 <_sbrk+0x64>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006fda:	4b07      	ldr	r3, [pc, #28]	@ (8006ff8 <_sbrk+0x64>)
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	4a05      	ldr	r2, [pc, #20]	@ (8006ff8 <_sbrk+0x64>)
 8006fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20020000 	.word	0x20020000
 8006ff4:	00000400 	.word	0x00000400
 8006ff8:	20000f68 	.word	0x20000f68
 8006ffc:	20005aa8 	.word	0x20005aa8

08007000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007000:	b480      	push	{r7}
 8007002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007004:	4b06      	ldr	r3, [pc, #24]	@ (8007020 <SystemInit+0x20>)
 8007006:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800700a:	4a05      	ldr	r2, [pc, #20]	@ (8007020 <SystemInit+0x20>)
 800700c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007010:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007014:	bf00      	nop
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	e000ed00 	.word	0xe000ed00

08007024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007024:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800705c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007028:	f7ff ffea 	bl	8007000 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800702c:	480c      	ldr	r0, [pc, #48]	@ (8007060 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800702e:	490d      	ldr	r1, [pc, #52]	@ (8007064 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007030:	4a0d      	ldr	r2, [pc, #52]	@ (8007068 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007032:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007034:	e002      	b.n	800703c <LoopCopyDataInit>

08007036 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007036:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007038:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800703a:	3304      	adds	r3, #4

0800703c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800703c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800703e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007040:	d3f9      	bcc.n	8007036 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007042:	4a0a      	ldr	r2, [pc, #40]	@ (800706c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007044:	4c0a      	ldr	r4, [pc, #40]	@ (8007070 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007046:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007048:	e001      	b.n	800704e <LoopFillZerobss>

0800704a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800704a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800704c:	3204      	adds	r2, #4

0800704e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800704e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007050:	d3fb      	bcc.n	800704a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007052:	f008 fbe7 	bl	800f824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007056:	f7fd fdf7 	bl	8004c48 <main>
  bx  lr    
 800705a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800705c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007064:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8007068:	080121e4 	.word	0x080121e4
  ldr r2, =_sbss
 800706c:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8007070:	20005aa4 	.word	0x20005aa4

08007074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007074:	e7fe      	b.n	8007074 <ADC_IRQHandler>
	...

08007078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800707c:	4b0e      	ldr	r3, [pc, #56]	@ (80070b8 <HAL_Init+0x40>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a0d      	ldr	r2, [pc, #52]	@ (80070b8 <HAL_Init+0x40>)
 8007082:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007088:	4b0b      	ldr	r3, [pc, #44]	@ (80070b8 <HAL_Init+0x40>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a0a      	ldr	r2, [pc, #40]	@ (80070b8 <HAL_Init+0x40>)
 800708e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007094:	4b08      	ldr	r3, [pc, #32]	@ (80070b8 <HAL_Init+0x40>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a07      	ldr	r2, [pc, #28]	@ (80070b8 <HAL_Init+0x40>)
 800709a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800709e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80070a0:	2003      	movs	r0, #3
 80070a2:	f000 ff91 	bl	8007fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80070a6:	200f      	movs	r0, #15
 80070a8:	f000 f808 	bl	80070bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80070ac:	f7ff f9b0 	bl	8006410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	bd80      	pop	{r7, pc}
 80070b6:	bf00      	nop
 80070b8:	40023c00 	.word	0x40023c00

080070bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80070c4:	4b12      	ldr	r3, [pc, #72]	@ (8007110 <HAL_InitTick+0x54>)
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	4b12      	ldr	r3, [pc, #72]	@ (8007114 <HAL_InitTick+0x58>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	4619      	mov	r1, r3
 80070ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80070d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80070d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80070da:	4618      	mov	r0, r3
 80070dc:	f000 ffa9 	bl	8008032 <HAL_SYSTICK_Config>
 80070e0:	4603      	mov	r3, r0
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e00e      	b.n	8007108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b0f      	cmp	r3, #15
 80070ee:	d80a      	bhi.n	8007106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80070f0:	2200      	movs	r2, #0
 80070f2:	6879      	ldr	r1, [r7, #4]
 80070f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80070f8:	f000 ff71 	bl	8007fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80070fc:	4a06      	ldr	r2, [pc, #24]	@ (8007118 <HAL_InitTick+0x5c>)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	e000      	b.n	8007108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
}
 8007108:	4618      	mov	r0, r3
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	2000002c 	.word	0x2000002c
 8007114:	20000034 	.word	0x20000034
 8007118:	20000030 	.word	0x20000030

0800711c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800711c:	b480      	push	{r7}
 800711e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007120:	4b06      	ldr	r3, [pc, #24]	@ (800713c <HAL_IncTick+0x20>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	4b06      	ldr	r3, [pc, #24]	@ (8007140 <HAL_IncTick+0x24>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4413      	add	r3, r2
 800712c:	4a04      	ldr	r2, [pc, #16]	@ (8007140 <HAL_IncTick+0x24>)
 800712e:	6013      	str	r3, [r2, #0]
}
 8007130:	bf00      	nop
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	20000034 	.word	0x20000034
 8007140:	20000f6c 	.word	0x20000f6c

08007144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007144:	b480      	push	{r7}
 8007146:	af00      	add	r7, sp, #0
  return uwTick;
 8007148:	4b03      	ldr	r3, [pc, #12]	@ (8007158 <HAL_GetTick+0x14>)
 800714a:	681b      	ldr	r3, [r3, #0]
}
 800714c:	4618      	mov	r0, r3
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	20000f6c 	.word	0x20000f6c

0800715c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e0ed      	b.n	800734a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007174:	b2db      	uxtb	r3, r3
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff f974 	bl	8006468 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f042 0201 	orr.w	r2, r2, #1
 800718e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007190:	f7ff ffd8 	bl	8007144 <HAL_GetTick>
 8007194:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007196:	e012      	b.n	80071be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007198:	f7ff ffd4 	bl	8007144 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b0a      	cmp	r3, #10
 80071a4:	d90b      	bls.n	80071be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2205      	movs	r2, #5
 80071b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e0c5      	b.n	800734a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	f003 0301 	and.w	r3, r3, #1
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0e5      	beq.n	8007198 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f022 0202 	bic.w	r2, r2, #2
 80071da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071dc:	f7ff ffb2 	bl	8007144 <HAL_GetTick>
 80071e0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80071e2:	e012      	b.n	800720a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80071e4:	f7ff ffae 	bl	8007144 <HAL_GetTick>
 80071e8:	4602      	mov	r2, r0
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	2b0a      	cmp	r3, #10
 80071f0:	d90b      	bls.n	800720a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2205      	movs	r2, #5
 8007202:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e09f      	b.n	800734a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	f003 0302 	and.w	r3, r3, #2
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e5      	bne.n	80071e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	7e1b      	ldrb	r3, [r3, #24]
 800721c:	2b01      	cmp	r3, #1
 800721e:	d108      	bne.n	8007232 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	681a      	ldr	r2, [r3, #0]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	e007      	b.n	8007242 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007240:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	7e5b      	ldrb	r3, [r3, #25]
 8007246:	2b01      	cmp	r3, #1
 8007248:	d108      	bne.n	800725c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	681a      	ldr	r2, [r3, #0]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	e007      	b.n	800726c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800726a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	7e9b      	ldrb	r3, [r3, #26]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d108      	bne.n	8007286 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f042 0220 	orr.w	r2, r2, #32
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	e007      	b.n	8007296 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0220 	bic.w	r2, r2, #32
 8007294:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	7edb      	ldrb	r3, [r3, #27]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d108      	bne.n	80072b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0210 	bic.w	r2, r2, #16
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	e007      	b.n	80072c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f042 0210 	orr.w	r2, r2, #16
 80072be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	7f1b      	ldrb	r3, [r3, #28]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d108      	bne.n	80072da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0208 	orr.w	r2, r2, #8
 80072d6:	601a      	str	r2, [r3, #0]
 80072d8:	e007      	b.n	80072ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0208 	bic.w	r2, r2, #8
 80072e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	7f5b      	ldrb	r3, [r3, #29]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d108      	bne.n	8007304 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681a      	ldr	r2, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f042 0204 	orr.w	r2, r2, #4
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	e007      	b.n	8007314 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	681a      	ldr	r2, [r3, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f022 0204 	bic.w	r2, r2, #4
 8007312:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689a      	ldr	r2, [r3, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	431a      	orrs	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	695b      	ldr	r3, [r3, #20]
 8007328:	ea42 0103 	orr.w	r1, r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	1e5a      	subs	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
	...

08007354 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007364:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8007366:	7dfb      	ldrb	r3, [r7, #23]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d003      	beq.n	8007374 <HAL_CAN_ConfigFilter+0x20>
 800736c:	7dfb      	ldrb	r3, [r7, #23]
 800736e:	2b02      	cmp	r3, #2
 8007370:	f040 80be 	bne.w	80074f0 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007374:	4b65      	ldr	r3, [pc, #404]	@ (800750c <HAL_CAN_ConfigFilter+0x1b8>)
 8007376:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800737e:	f043 0201 	orr.w	r2, r3, #1
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800738e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	431a      	orrs	r2, r3
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	f003 031f 	and.w	r3, r3, #31
 80073b4:	2201      	movs	r2, #1
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	401a      	ands	r2, r3
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	69db      	ldr	r3, [r3, #28]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d123      	bne.n	800741e <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	43db      	mvns	r3, r3
 80073e0:	401a      	ands	r2, r3
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80073f8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	3248      	adds	r2, #72	@ 0x48
 80073fe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007412:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007414:	6939      	ldr	r1, [r7, #16]
 8007416:	3348      	adds	r3, #72	@ 0x48
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	440b      	add	r3, r1
 800741c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d122      	bne.n	800746c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	431a      	orrs	r2, r3
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007442:	683a      	ldr	r2, [r7, #0]
 8007444:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007446:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	3248      	adds	r2, #72	@ 0x48
 800744c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007460:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007462:	6939      	ldr	r1, [r7, #16]
 8007464:	3348      	adds	r3, #72	@ 0x48
 8007466:	00db      	lsls	r3, r3, #3
 8007468:	440b      	add	r3, r1
 800746a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d109      	bne.n	8007488 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	43db      	mvns	r3, r3
 800747e:	401a      	ands	r2, r3
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8007486:	e007      	b.n	8007498 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	431a      	orrs	r2, r3
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d109      	bne.n	80074b4 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	43db      	mvns	r3, r3
 80074aa:	401a      	ands	r2, r3
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80074b2:	e007      	b.n	80074c4 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	431a      	orrs	r2, r3
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	6a1b      	ldr	r3, [r3, #32]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d107      	bne.n	80074dc <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	431a      	orrs	r2, r3
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80074e2:	f023 0201 	bic.w	r2, r3, #1
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80074ec:	2300      	movs	r3, #0
 80074ee:	e006      	b.n	80074fe <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
  }
}
 80074fe:	4618      	mov	r0, r3
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	40006400 	.word	0x40006400

08007510 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b01      	cmp	r3, #1
 8007522:	d12e      	bne.n	8007582 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2202      	movs	r2, #2
 8007528:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f022 0201 	bic.w	r2, r2, #1
 800753a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800753c:	f7ff fe02 	bl	8007144 <HAL_GetTick>
 8007540:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007542:	e012      	b.n	800756a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007544:	f7ff fdfe 	bl	8007144 <HAL_GetTick>
 8007548:	4602      	mov	r2, r0
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	2b0a      	cmp	r3, #10
 8007550:	d90b      	bls.n	800756a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007556:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2205      	movs	r2, #5
 8007562:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e012      	b.n	8007590 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e5      	bne.n	8007544 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2200      	movs	r2, #0
 800757c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800757e:	2300      	movs	r3, #0
 8007580:	e006      	b.n	8007590 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007586:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800758e:	2301      	movs	r3, #1
  }
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007598:	b480      	push	{r7}
 800759a:	b089      	sub	sp, #36	@ 0x24
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
 80075a4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075ac:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80075b6:	7ffb      	ldrb	r3, [r7, #31]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d003      	beq.n	80075c4 <HAL_CAN_AddTxMessage+0x2c>
 80075bc:	7ffb      	ldrb	r3, [r7, #31]
 80075be:	2b02      	cmp	r3, #2
 80075c0:	f040 80ad 	bne.w	800771e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80075c4:	69bb      	ldr	r3, [r7, #24]
 80075c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80075ce:	69bb      	ldr	r3, [r7, #24]
 80075d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d105      	bne.n	80075e4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80075de:	2b00      	cmp	r3, #0
 80075e0:	f000 8095 	beq.w	800770e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	0e1b      	lsrs	r3, r3, #24
 80075e8:	f003 0303 	and.w	r3, r3, #3
 80075ec:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80075ee:	2201      	movs	r2, #1
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	409a      	lsls	r2, r3
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d10d      	bne.n	800761c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800760a:	68f9      	ldr	r1, [r7, #12]
 800760c:	6809      	ldr	r1, [r1, #0]
 800760e:	431a      	orrs	r2, r3
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3318      	adds	r3, #24
 8007614:	011b      	lsls	r3, r3, #4
 8007616:	440b      	add	r3, r1
 8007618:	601a      	str	r2, [r3, #0]
 800761a:	e00f      	b.n	800763c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007626:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800762c:	68f9      	ldr	r1, [r7, #12]
 800762e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007630:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	3318      	adds	r3, #24
 8007636:	011b      	lsls	r3, r3, #4
 8007638:	440b      	add	r3, r1
 800763a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6819      	ldr	r1, [r3, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	691a      	ldr	r2, [r3, #16]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	3318      	adds	r3, #24
 8007648:	011b      	lsls	r3, r3, #4
 800764a:	440b      	add	r3, r1
 800764c:	3304      	adds	r3, #4
 800764e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	7d1b      	ldrb	r3, [r3, #20]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d111      	bne.n	800767c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	3318      	adds	r3, #24
 8007660:	011b      	lsls	r3, r3, #4
 8007662:	4413      	add	r3, r2
 8007664:	3304      	adds	r3, #4
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	6811      	ldr	r1, [r2, #0]
 800766c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	3318      	adds	r3, #24
 8007674:	011b      	lsls	r3, r3, #4
 8007676:	440b      	add	r3, r1
 8007678:	3304      	adds	r3, #4
 800767a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3307      	adds	r3, #7
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	061a      	lsls	r2, r3, #24
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3306      	adds	r3, #6
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	041b      	lsls	r3, r3, #16
 800768c:	431a      	orrs	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3305      	adds	r3, #5
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	021b      	lsls	r3, r3, #8
 8007696:	4313      	orrs	r3, r2
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	3204      	adds	r2, #4
 800769c:	7812      	ldrb	r2, [r2, #0]
 800769e:	4610      	mov	r0, r2
 80076a0:	68fa      	ldr	r2, [r7, #12]
 80076a2:	6811      	ldr	r1, [r2, #0]
 80076a4:	ea43 0200 	orr.w	r2, r3, r0
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	440b      	add	r3, r1
 80076ae:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80076b2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	3303      	adds	r3, #3
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	061a      	lsls	r2, r3, #24
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	3302      	adds	r3, #2
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	041b      	lsls	r3, r3, #16
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	3301      	adds	r3, #1
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	021b      	lsls	r3, r3, #8
 80076ce:	4313      	orrs	r3, r2
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	7812      	ldrb	r2, [r2, #0]
 80076d4:	4610      	mov	r0, r2
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	6811      	ldr	r1, [r2, #0]
 80076da:	ea43 0200 	orr.w	r2, r3, r0
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	440b      	add	r3, r1
 80076e4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80076e8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	697b      	ldr	r3, [r7, #20]
 80076f0:	3318      	adds	r3, #24
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	4413      	add	r3, r2
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	6811      	ldr	r1, [r2, #0]
 80076fc:	f043 0201 	orr.w	r2, r3, #1
 8007700:	697b      	ldr	r3, [r7, #20]
 8007702:	3318      	adds	r3, #24
 8007704:	011b      	lsls	r3, r3, #4
 8007706:	440b      	add	r3, r1
 8007708:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	e00e      	b.n	800772c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007712:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800771a:	2301      	movs	r3, #1
 800771c:	e006      	b.n	800772c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007722:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800772a:	2301      	movs	r3, #1
  }
}
 800772c:	4618      	mov	r0, r3
 800772e:	3724      	adds	r7, #36	@ 0x24
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f893 3020 	ldrb.w	r3, [r3, #32]
 800774c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800774e:	7dfb      	ldrb	r3, [r7, #23]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d003      	beq.n	800775c <HAL_CAN_GetRxMessage+0x24>
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	2b02      	cmp	r3, #2
 8007758:	f040 8103 	bne.w	8007962 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d10e      	bne.n	8007780 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0303 	and.w	r3, r3, #3
 800776c:	2b00      	cmp	r3, #0
 800776e:	d116      	bne.n	800779e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007774:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e0f7      	b.n	8007970 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f003 0303 	and.w	r3, r3, #3
 800778a:	2b00      	cmp	r3, #0
 800778c:	d107      	bne.n	800779e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007792:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e0e8      	b.n	8007970 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	331b      	adds	r3, #27
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	4413      	add	r3, r2
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0204 	and.w	r2, r3, #4
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10c      	bne.n	80077d6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	331b      	adds	r3, #27
 80077c4:	011b      	lsls	r3, r3, #4
 80077c6:	4413      	add	r3, r2
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	0d5b      	lsrs	r3, r3, #21
 80077cc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	601a      	str	r2, [r3, #0]
 80077d4:	e00b      	b.n	80077ee <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	331b      	adds	r3, #27
 80077de:	011b      	lsls	r3, r3, #4
 80077e0:	4413      	add	r3, r2
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	08db      	lsrs	r3, r3, #3
 80077e6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	331b      	adds	r3, #27
 80077f6:	011b      	lsls	r3, r3, #4
 80077f8:	4413      	add	r3, r2
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f003 0202 	and.w	r2, r3, #2
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	331b      	adds	r3, #27
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	4413      	add	r3, r2
 8007810:	3304      	adds	r3, #4
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f003 0308 	and.w	r3, r3, #8
 8007818:	2b00      	cmp	r3, #0
 800781a:	d003      	beq.n	8007824 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2208      	movs	r2, #8
 8007820:	611a      	str	r2, [r3, #16]
 8007822:	e00b      	b.n	800783c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	331b      	adds	r3, #27
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	4413      	add	r3, r2
 8007830:	3304      	adds	r3, #4
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 020f 	and.w	r2, r3, #15
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	331b      	adds	r3, #27
 8007844:	011b      	lsls	r3, r3, #4
 8007846:	4413      	add	r3, r2
 8007848:	3304      	adds	r3, #4
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	0a1b      	lsrs	r3, r3, #8
 800784e:	b2da      	uxtb	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	331b      	adds	r3, #27
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	4413      	add	r3, r2
 8007860:	3304      	adds	r3, #4
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	0c1b      	lsrs	r3, r3, #16
 8007866:	b29a      	uxth	r2, r3
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	011b      	lsls	r3, r3, #4
 8007874:	4413      	add	r3, r2
 8007876:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	b2da      	uxtb	r2, r3
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	011b      	lsls	r3, r3, #4
 800788a:	4413      	add	r3, r2
 800788c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	0a1a      	lsrs	r2, r3, #8
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	3301      	adds	r3, #1
 8007898:	b2d2      	uxtb	r2, r2
 800789a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	0c1a      	lsrs	r2, r3, #16
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	3302      	adds	r3, #2
 80078b2:	b2d2      	uxtb	r2, r2
 80078b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	011b      	lsls	r3, r3, #4
 80078be:	4413      	add	r3, r2
 80078c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	0e1a      	lsrs	r2, r3, #24
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	3303      	adds	r3, #3
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	011b      	lsls	r3, r3, #4
 80078d8:	4413      	add	r3, r2
 80078da:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	3304      	adds	r3, #4
 80078e4:	b2d2      	uxtb	r2, r2
 80078e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	011b      	lsls	r3, r3, #4
 80078f0:	4413      	add	r3, r2
 80078f2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	0a1a      	lsrs	r2, r3, #8
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	3305      	adds	r3, #5
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	011b      	lsls	r3, r3, #4
 800790a:	4413      	add	r3, r2
 800790c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	0c1a      	lsrs	r2, r3, #16
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	3306      	adds	r3, #6
 8007918:	b2d2      	uxtb	r2, r2
 800791a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	011b      	lsls	r3, r3, #4
 8007924:	4413      	add	r3, r2
 8007926:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	0e1a      	lsrs	r2, r3, #24
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	3307      	adds	r3, #7
 8007932:	b2d2      	uxtb	r2, r2
 8007934:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d108      	bne.n	800794e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f042 0220 	orr.w	r2, r2, #32
 800794a:	60da      	str	r2, [r3, #12]
 800794c:	e007      	b.n	800795e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	691a      	ldr	r2, [r3, #16]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f042 0220 	orr.w	r2, r2, #32
 800795c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800795e:	2300      	movs	r3, #0
 8007960:	e006      	b.n	8007970 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007966:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
  }
}
 8007970:	4618      	mov	r0, r3
 8007972:	371c      	adds	r7, #28
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3020 	ldrb.w	r3, [r3, #32]
 800798c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d002      	beq.n	800799a <HAL_CAN_ActivateNotification+0x1e>
 8007994:	7bfb      	ldrb	r3, [r7, #15]
 8007996:	2b02      	cmp	r3, #2
 8007998:	d109      	bne.n	80079ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6959      	ldr	r1, [r3, #20]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	430a      	orrs	r2, r1
 80079a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	e006      	b.n	80079bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079b2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
  }
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	@ 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	691b      	ldr	r3, [r3, #16]
 80079fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699b      	ldr	r3, [r3, #24]
 8007a02:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d07c      	beq.n	8007b08 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d023      	beq.n	8007a60 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	f003 0302 	and.w	r3, r3, #2
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d003      	beq.n	8007a32 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f000 f983 	bl	8007d36 <HAL_CAN_TxMailbox0CompleteCallback>
 8007a30:	e016      	b.n	8007a60 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	f003 0304 	and.w	r3, r3, #4
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a3e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007a42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a44:	e00c      	b.n	8007a60 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007a46:	69bb      	ldr	r3, [r7, #24]
 8007a48:	f003 0308 	and.w	r3, r3, #8
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d004      	beq.n	8007a5a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a52:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a58:	e002      	b.n	8007a60 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 f989 	bl	8007d72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d024      	beq.n	8007ab4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007a74:	69bb      	ldr	r3, [r7, #24]
 8007a76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f000 f963 	bl	8007d4a <HAL_CAN_TxMailbox1CompleteCallback>
 8007a84:	e016      	b.n	8007ab4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d004      	beq.n	8007a9a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a98:	e00c      	b.n	8007ab4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d004      	beq.n	8007aae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007aaa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aac:	e002      	b.n	8007ab4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 f969 	bl	8007d86 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d024      	beq.n	8007b08 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007ac6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d003      	beq.n	8007ada <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 f943 	bl	8007d5e <HAL_CAN_TxMailbox2CompleteCallback>
 8007ad8:	e016      	b.n	8007b08 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8007aec:	e00c      	b.n	8007b08 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d004      	beq.n	8007b02 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b00:	e002      	b.n	8007b08 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f949 	bl	8007d9a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	f003 0308 	and.w	r3, r3, #8
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00c      	beq.n	8007b2c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f003 0310 	and.w	r3, r3, #16
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d007      	beq.n	8007b2c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b22:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	2210      	movs	r2, #16
 8007b2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007b2c:	6a3b      	ldr	r3, [r7, #32]
 8007b2e:	f003 0304 	and.w	r3, r3, #4
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00b      	beq.n	8007b4e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d006      	beq.n	8007b4e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	2208      	movs	r2, #8
 8007b46:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f930 	bl	8007dae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	f003 0302 	and.w	r3, r3, #2
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d009      	beq.n	8007b6c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d002      	beq.n	8007b6c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f7fa fb5c 	bl	8002224 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00c      	beq.n	8007b90 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f003 0310 	and.w	r3, r3, #16
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007b86:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2210      	movs	r2, #16
 8007b8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00b      	beq.n	8007bb2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2208      	movs	r2, #8
 8007baa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f912 	bl	8007dd6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007bb2:	6a3b      	ldr	r3, [r7, #32]
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d009      	beq.n	8007bd0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f000 f8f9 	bl	8007dc2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00b      	beq.n	8007bf2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007bda:	69fb      	ldr	r3, [r7, #28]
 8007bdc:	f003 0310 	and.w	r3, r3, #16
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d006      	beq.n	8007bf2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2210      	movs	r2, #16
 8007bea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f000 f8fc 	bl	8007dea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00b      	beq.n	8007c14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f003 0308 	and.w	r3, r3, #8
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d006      	beq.n	8007c14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f8f5 	bl	8007dfe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d07b      	beq.n	8007d16 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d072      	beq.n	8007d0e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d008      	beq.n	8007c44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3e:	f043 0301 	orr.w	r3, r3, #1
 8007c42:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d008      	beq.n	8007c60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d003      	beq.n	8007c60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	f043 0302 	orr.w	r3, r3, #2
 8007c5e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c60:	6a3b      	ldr	r3, [r7, #32]
 8007c62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d008      	beq.n	8007c7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d003      	beq.n	8007c7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	f043 0304 	orr.w	r3, r3, #4
 8007c7a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d043      	beq.n	8007d0e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d03e      	beq.n	8007d0e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007c96:	2b60      	cmp	r3, #96	@ 0x60
 8007c98:	d02b      	beq.n	8007cf2 <HAL_CAN_IRQHandler+0x32a>
 8007c9a:	2b60      	cmp	r3, #96	@ 0x60
 8007c9c:	d82e      	bhi.n	8007cfc <HAL_CAN_IRQHandler+0x334>
 8007c9e:	2b50      	cmp	r3, #80	@ 0x50
 8007ca0:	d022      	beq.n	8007ce8 <HAL_CAN_IRQHandler+0x320>
 8007ca2:	2b50      	cmp	r3, #80	@ 0x50
 8007ca4:	d82a      	bhi.n	8007cfc <HAL_CAN_IRQHandler+0x334>
 8007ca6:	2b40      	cmp	r3, #64	@ 0x40
 8007ca8:	d019      	beq.n	8007cde <HAL_CAN_IRQHandler+0x316>
 8007caa:	2b40      	cmp	r3, #64	@ 0x40
 8007cac:	d826      	bhi.n	8007cfc <HAL_CAN_IRQHandler+0x334>
 8007cae:	2b30      	cmp	r3, #48	@ 0x30
 8007cb0:	d010      	beq.n	8007cd4 <HAL_CAN_IRQHandler+0x30c>
 8007cb2:	2b30      	cmp	r3, #48	@ 0x30
 8007cb4:	d822      	bhi.n	8007cfc <HAL_CAN_IRQHandler+0x334>
 8007cb6:	2b10      	cmp	r3, #16
 8007cb8:	d002      	beq.n	8007cc0 <HAL_CAN_IRQHandler+0x2f8>
 8007cba:	2b20      	cmp	r3, #32
 8007cbc:	d005      	beq.n	8007cca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007cbe:	e01d      	b.n	8007cfc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	f043 0308 	orr.w	r3, r3, #8
 8007cc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cc8:	e019      	b.n	8007cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	f043 0310 	orr.w	r3, r3, #16
 8007cd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cd2:	e014      	b.n	8007cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd6:	f043 0320 	orr.w	r3, r3, #32
 8007cda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cdc:	e00f      	b.n	8007cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007ce6:	e00a      	b.n	8007cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cf0:	e005      	b.n	8007cfe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007cf8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007cfa:	e000      	b.n	8007cfe <HAL_CAN_IRQHandler+0x336>
            break;
 8007cfc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	699a      	ldr	r2, [r3, #24]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007d0c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2204      	movs	r2, #4
 8007d14:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	431a      	orrs	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f872 	bl	8007e12 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007d2e:	bf00      	nop
 8007d30:	3728      	adds	r7, #40	@ 0x28
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007d3e:	bf00      	nop
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b083      	sub	sp, #12
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d72:	b480      	push	{r7}
 8007d74:	b083      	sub	sp, #12
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007d8e:	bf00      	nop
 8007d90:	370c      	adds	r7, #12
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr

08007d9a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007da2:	bf00      	nop
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007db6:	bf00      	nop
 8007db8:	370c      	adds	r7, #12
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc0:	4770      	bx	lr

08007dc2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007dc2:	b480      	push	{r7}
 8007dc4:	b083      	sub	sp, #12
 8007dc6:	af00      	add	r7, sp, #0
 8007dc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007dca:	bf00      	nop
 8007dcc:	370c      	adds	r7, #12
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr

08007dd6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007dd6:	b480      	push	{r7}
 8007dd8:	b083      	sub	sp, #12
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007dde:	bf00      	nop
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b083      	sub	sp, #12
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
	...

08007e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b085      	sub	sp, #20
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e38:	4b0c      	ldr	r3, [pc, #48]	@ (8007e6c <__NVIC_SetPriorityGrouping+0x44>)
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007e44:	4013      	ands	r3, r2
 8007e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e5a:	4a04      	ldr	r2, [pc, #16]	@ (8007e6c <__NVIC_SetPriorityGrouping+0x44>)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	60d3      	str	r3, [r2, #12]
}
 8007e60:	bf00      	nop
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr
 8007e6c:	e000ed00 	.word	0xe000ed00

08007e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e74:	4b04      	ldr	r3, [pc, #16]	@ (8007e88 <__NVIC_GetPriorityGrouping+0x18>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	0a1b      	lsrs	r3, r3, #8
 8007e7a:	f003 0307 	and.w	r3, r3, #7
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr
 8007e88:	e000ed00 	.word	0xe000ed00

08007e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	db0b      	blt.n	8007eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	f003 021f 	and.w	r2, r3, #31
 8007ea4:	4907      	ldr	r1, [pc, #28]	@ (8007ec4 <__NVIC_EnableIRQ+0x38>)
 8007ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eaa:	095b      	lsrs	r3, r3, #5
 8007eac:	2001      	movs	r0, #1
 8007eae:	fa00 f202 	lsl.w	r2, r0, r2
 8007eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007eb6:	bf00      	nop
 8007eb8:	370c      	adds	r7, #12
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	e000e100 	.word	0xe000e100

08007ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	4603      	mov	r3, r0
 8007ed0:	6039      	str	r1, [r7, #0]
 8007ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	db0a      	blt.n	8007ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	490c      	ldr	r1, [pc, #48]	@ (8007f14 <__NVIC_SetPriority+0x4c>)
 8007ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ee6:	0112      	lsls	r2, r2, #4
 8007ee8:	b2d2      	uxtb	r2, r2
 8007eea:	440b      	add	r3, r1
 8007eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ef0:	e00a      	b.n	8007f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	b2da      	uxtb	r2, r3
 8007ef6:	4908      	ldr	r1, [pc, #32]	@ (8007f18 <__NVIC_SetPriority+0x50>)
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	f003 030f 	and.w	r3, r3, #15
 8007efe:	3b04      	subs	r3, #4
 8007f00:	0112      	lsls	r2, r2, #4
 8007f02:	b2d2      	uxtb	r2, r2
 8007f04:	440b      	add	r3, r1
 8007f06:	761a      	strb	r2, [r3, #24]
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr
 8007f14:	e000e100 	.word	0xe000e100
 8007f18:	e000ed00 	.word	0xe000ed00

08007f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b089      	sub	sp, #36	@ 0x24
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	60f8      	str	r0, [r7, #12]
 8007f24:	60b9      	str	r1, [r7, #8]
 8007f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f003 0307 	and.w	r3, r3, #7
 8007f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f30:	69fb      	ldr	r3, [r7, #28]
 8007f32:	f1c3 0307 	rsb	r3, r3, #7
 8007f36:	2b04      	cmp	r3, #4
 8007f38:	bf28      	it	cs
 8007f3a:	2304      	movcs	r3, #4
 8007f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	3304      	adds	r3, #4
 8007f42:	2b06      	cmp	r3, #6
 8007f44:	d902      	bls.n	8007f4c <NVIC_EncodePriority+0x30>
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	3b03      	subs	r3, #3
 8007f4a:	e000      	b.n	8007f4e <NVIC_EncodePriority+0x32>
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5a:	43da      	mvns	r2, r3
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	401a      	ands	r2, r3
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f6e:	43d9      	mvns	r1, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f74:	4313      	orrs	r3, r2
         );
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3724      	adds	r7, #36	@ 0x24
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
	...

08007f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f94:	d301      	bcc.n	8007f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007f96:	2301      	movs	r3, #1
 8007f98:	e00f      	b.n	8007fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8007fc4 <SysTick_Config+0x40>)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3b01      	subs	r3, #1
 8007fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007fa2:	210f      	movs	r1, #15
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007fa8:	f7ff ff8e 	bl	8007ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007fac:	4b05      	ldr	r3, [pc, #20]	@ (8007fc4 <SysTick_Config+0x40>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007fb2:	4b04      	ldr	r3, [pc, #16]	@ (8007fc4 <SysTick_Config+0x40>)
 8007fb4:	2207      	movs	r2, #7
 8007fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3708      	adds	r7, #8
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop
 8007fc4:	e000e010 	.word	0xe000e010

08007fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f7ff ff29 	bl	8007e28 <__NVIC_SetPriorityGrouping>
}
 8007fd6:	bf00      	nop
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b086      	sub	sp, #24
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	60b9      	str	r1, [r7, #8]
 8007fe8:	607a      	str	r2, [r7, #4]
 8007fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007fec:	2300      	movs	r3, #0
 8007fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007ff0:	f7ff ff3e 	bl	8007e70 <__NVIC_GetPriorityGrouping>
 8007ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007ff6:	687a      	ldr	r2, [r7, #4]
 8007ff8:	68b9      	ldr	r1, [r7, #8]
 8007ffa:	6978      	ldr	r0, [r7, #20]
 8007ffc:	f7ff ff8e 	bl	8007f1c <NVIC_EncodePriority>
 8008000:	4602      	mov	r2, r0
 8008002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff ff5d 	bl	8007ec8 <__NVIC_SetPriority>
}
 800800e:	bf00      	nop
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b082      	sub	sp, #8
 800801a:	af00      	add	r7, sp, #0
 800801c:	4603      	mov	r3, r0
 800801e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008024:	4618      	mov	r0, r3
 8008026:	f7ff ff31 	bl	8007e8c <__NVIC_EnableIRQ>
}
 800802a:	bf00      	nop
 800802c:	3708      	adds	r7, #8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}

08008032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b082      	sub	sp, #8
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800803a:	6878      	ldr	r0, [r7, #4]
 800803c:	f7ff ffa2 	bl	8007f84 <SysTick_Config>
 8008040:	4603      	mov	r3, r0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008054:	2300      	movs	r3, #0
 8008056:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008058:	f7ff f874 	bl	8007144 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	e099      	b.n	800819c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2202      	movs	r2, #2
 800806c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f022 0201 	bic.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008088:	e00f      	b.n	80080aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800808a:	f7ff f85b 	bl	8007144 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	2b05      	cmp	r3, #5
 8008096:	d908      	bls.n	80080aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2220      	movs	r2, #32
 800809c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2203      	movs	r2, #3
 80080a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80080a6:	2303      	movs	r3, #3
 80080a8:	e078      	b.n	800819c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0301 	and.w	r3, r3, #1
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1e8      	bne.n	800808a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4b38      	ldr	r3, [pc, #224]	@ (80081a4 <HAL_DMA_Init+0x158>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685a      	ldr	r2, [r3, #4]
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	699b      	ldr	r3, [r3, #24]
 80080e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080f6:	697a      	ldr	r2, [r7, #20]
 80080f8:	4313      	orrs	r3, r2
 80080fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008100:	2b04      	cmp	r3, #4
 8008102:	d107      	bne.n	8008114 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810c:	4313      	orrs	r3, r2
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	4313      	orrs	r3, r2
 8008112:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	695b      	ldr	r3, [r3, #20]
 8008122:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	f023 0307 	bic.w	r3, r3, #7
 800812a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813a:	2b04      	cmp	r3, #4
 800813c:	d117      	bne.n	800816e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008142:	697a      	ldr	r2, [r7, #20]
 8008144:	4313      	orrs	r3, r2
 8008146:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00e      	beq.n	800816e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f000 fb01 	bl	8008758 <DMA_CheckFifoParam>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d008      	beq.n	800816e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2240      	movs	r2, #64	@ 0x40
 8008160:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2201      	movs	r2, #1
 8008166:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800816a:	2301      	movs	r3, #1
 800816c:	e016      	b.n	800819c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fab8 	bl	80086ec <DMA_CalcBaseAndBitshift>
 800817c:	4603      	mov	r3, r0
 800817e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008184:	223f      	movs	r2, #63	@ 0x3f
 8008186:	409a      	lsls	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3718      	adds	r7, #24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	f010803f 	.word	0xf010803f

080081a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b086      	sub	sp, #24
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	60f8      	str	r0, [r7, #12]
 80081b0:	60b9      	str	r1, [r7, #8]
 80081b2:	607a      	str	r2, [r7, #4]
 80081b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081b6:	2300      	movs	r3, #0
 80081b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d101      	bne.n	80081ce <HAL_DMA_Start_IT+0x26>
 80081ca:	2302      	movs	r3, #2
 80081cc:	e040      	b.n	8008250 <HAL_DMA_Start_IT+0xa8>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d12f      	bne.n	8008242 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	2202      	movs	r2, #2
 80081e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	68b9      	ldr	r1, [r7, #8]
 80081f6:	68f8      	ldr	r0, [r7, #12]
 80081f8:	f000 fa4a 	bl	8008690 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008200:	223f      	movs	r2, #63	@ 0x3f
 8008202:	409a      	lsls	r2, r3
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f042 0216 	orr.w	r2, r2, #22
 8008216:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821c:	2b00      	cmp	r3, #0
 800821e:	d007      	beq.n	8008230 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f042 0208 	orr.w	r2, r2, #8
 800822e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0201 	orr.w	r2, r2, #1
 800823e:	601a      	str	r2, [r3, #0]
 8008240:	e005      	b.n	800824e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800824a:	2302      	movs	r3, #2
 800824c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800824e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008250:	4618      	mov	r0, r3
 8008252:	3718      	adds	r7, #24
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b084      	sub	sp, #16
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008264:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008266:	f7fe ff6d 	bl	8007144 <HAL_GetTick>
 800826a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008272:	b2db      	uxtb	r3, r3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d008      	beq.n	800828a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2280      	movs	r2, #128	@ 0x80
 800827c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	e052      	b.n	8008330 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f022 0216 	bic.w	r2, r2, #22
 8008298:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80082a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d103      	bne.n	80082ba <HAL_DMA_Abort+0x62>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d007      	beq.n	80082ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f022 0208 	bic.w	r2, r2, #8
 80082c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082da:	e013      	b.n	8008304 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082dc:	f7fe ff32 	bl	8007144 <HAL_GetTick>
 80082e0:	4602      	mov	r2, r0
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	1ad3      	subs	r3, r2, r3
 80082e6:	2b05      	cmp	r3, #5
 80082e8:	d90c      	bls.n	8008304 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2203      	movs	r2, #3
 80082f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008300:	2303      	movs	r3, #3
 8008302:	e015      	b.n	8008330 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d1e4      	bne.n	80082dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008316:	223f      	movs	r2, #63	@ 0x3f
 8008318:	409a      	lsls	r2, r3
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b02      	cmp	r3, #2
 800834a:	d004      	beq.n	8008356 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2280      	movs	r2, #128	@ 0x80
 8008350:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e00c      	b.n	8008370 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2205      	movs	r2, #5
 800835a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f022 0201 	bic.w	r2, r2, #1
 800836c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b086      	sub	sp, #24
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8008384:	2300      	movs	r3, #0
 8008386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008388:	4b8e      	ldr	r3, [pc, #568]	@ (80085c4 <HAL_DMA_IRQHandler+0x248>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	4a8e      	ldr	r2, [pc, #568]	@ (80085c8 <HAL_DMA_IRQHandler+0x24c>)
 800838e:	fba2 2303 	umull	r2, r3, r2, r3
 8008392:	0a9b      	lsrs	r3, r3, #10
 8008394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800839a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083a6:	2208      	movs	r2, #8
 80083a8:	409a      	lsls	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	4013      	ands	r3, r2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d01a      	beq.n	80083e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d013      	beq.n	80083e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0204 	bic.w	r2, r2, #4
 80083ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083d4:	2208      	movs	r2, #8
 80083d6:	409a      	lsls	r2, r3
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e0:	f043 0201 	orr.w	r2, r3, #1
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80083ec:	2201      	movs	r2, #1
 80083ee:	409a      	lsls	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	4013      	ands	r3, r2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d012      	beq.n	800841e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00b      	beq.n	800841e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800840a:	2201      	movs	r2, #1
 800840c:	409a      	lsls	r2, r3
 800840e:	693b      	ldr	r3, [r7, #16]
 8008410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008416:	f043 0202 	orr.w	r2, r3, #2
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008422:	2204      	movs	r2, #4
 8008424:	409a      	lsls	r2, r3
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4013      	ands	r3, r2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d012      	beq.n	8008454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0302 	and.w	r3, r3, #2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008440:	2204      	movs	r2, #4
 8008442:	409a      	lsls	r2, r3
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844c:	f043 0204 	orr.w	r2, r3, #4
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008458:	2210      	movs	r2, #16
 800845a:	409a      	lsls	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4013      	ands	r3, r2
 8008460:	2b00      	cmp	r3, #0
 8008462:	d043      	beq.n	80084ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0308 	and.w	r3, r3, #8
 800846e:	2b00      	cmp	r3, #0
 8008470:	d03c      	beq.n	80084ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008476:	2210      	movs	r2, #16
 8008478:	409a      	lsls	r2, r3
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d018      	beq.n	80084be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008496:	2b00      	cmp	r3, #0
 8008498:	d108      	bne.n	80084ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d024      	beq.n	80084ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	4798      	blx	r3
 80084aa:	e01f      	b.n	80084ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d01b      	beq.n	80084ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	4798      	blx	r3
 80084bc:	e016      	b.n	80084ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d107      	bne.n	80084dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f022 0208 	bic.w	r2, r2, #8
 80084da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d003      	beq.n	80084ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084f0:	2220      	movs	r2, #32
 80084f2:	409a      	lsls	r2, r3
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	f000 808f 	beq.w	800861c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0310 	and.w	r3, r3, #16
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 8087 	beq.w	800861c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008512:	2220      	movs	r2, #32
 8008514:	409a      	lsls	r2, r3
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b05      	cmp	r3, #5
 8008524:	d136      	bne.n	8008594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f022 0216 	bic.w	r2, r2, #22
 8008534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	695a      	ldr	r2, [r3, #20]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800854a:	2b00      	cmp	r3, #0
 800854c:	d103      	bne.n	8008556 <HAL_DMA_IRQHandler+0x1da>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008552:	2b00      	cmp	r3, #0
 8008554:	d007      	beq.n	8008566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 0208 	bic.w	r2, r2, #8
 8008564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800856a:	223f      	movs	r2, #63	@ 0x3f
 800856c:	409a      	lsls	r2, r3
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008586:	2b00      	cmp	r3, #0
 8008588:	d07e      	beq.n	8008688 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	4798      	blx	r3
        }
        return;
 8008592:	e079      	b.n	8008688 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d01d      	beq.n	80085de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10d      	bne.n	80085cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d031      	beq.n	800861c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	4798      	blx	r3
 80085c0:	e02c      	b.n	800861c <HAL_DMA_IRQHandler+0x2a0>
 80085c2:	bf00      	nop
 80085c4:	2000002c 	.word	0x2000002c
 80085c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d023      	beq.n	800861c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	4798      	blx	r3
 80085dc:	e01e      	b.n	800861c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d10f      	bne.n	800860c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f022 0210 	bic.w	r2, r2, #16
 80085fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008610:	2b00      	cmp	r3, #0
 8008612:	d003      	beq.n	800861c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008620:	2b00      	cmp	r3, #0
 8008622:	d032      	beq.n	800868a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b00      	cmp	r3, #0
 800862e:	d022      	beq.n	8008676 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2205      	movs	r2, #5
 8008634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f022 0201 	bic.w	r2, r2, #1
 8008646:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	3301      	adds	r3, #1
 800864c:	60bb      	str	r3, [r7, #8]
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	429a      	cmp	r2, r3
 8008652:	d307      	bcc.n	8008664 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0301 	and.w	r3, r3, #1
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f2      	bne.n	8008648 <HAL_DMA_IRQHandler+0x2cc>
 8008662:	e000      	b.n	8008666 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008664:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2201      	movs	r2, #1
 800866a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800867a:	2b00      	cmp	r3, #0
 800867c:	d005      	beq.n	800868a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	4798      	blx	r3
 8008686:	e000      	b.n	800868a <HAL_DMA_IRQHandler+0x30e>
        return;
 8008688:	bf00      	nop
    }
  }
}
 800868a:	3718      	adds	r7, #24
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80086ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	683a      	ldr	r2, [r7, #0]
 80086b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	2b40      	cmp	r3, #64	@ 0x40
 80086bc:	d108      	bne.n	80086d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	68ba      	ldr	r2, [r7, #8]
 80086cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80086ce:	e007      	b.n	80086e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	60da      	str	r2, [r3, #12]
}
 80086e0:	bf00      	nop
 80086e2:	3714      	adds	r7, #20
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	b2db      	uxtb	r3, r3
 80086fa:	3b10      	subs	r3, #16
 80086fc:	4a14      	ldr	r2, [pc, #80]	@ (8008750 <DMA_CalcBaseAndBitshift+0x64>)
 80086fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008702:	091b      	lsrs	r3, r3, #4
 8008704:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008706:	4a13      	ldr	r2, [pc, #76]	@ (8008754 <DMA_CalcBaseAndBitshift+0x68>)
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4413      	add	r3, r2
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2b03      	cmp	r3, #3
 8008718:	d909      	bls.n	800872e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008722:	f023 0303 	bic.w	r3, r3, #3
 8008726:	1d1a      	adds	r2, r3, #4
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	659a      	str	r2, [r3, #88]	@ 0x58
 800872c:	e007      	b.n	800873e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8008736:	f023 0303 	bic.w	r3, r3, #3
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8008742:	4618      	mov	r0, r3
 8008744:	3714      	adds	r7, #20
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
 800874e:	bf00      	nop
 8008750:	aaaaaaab 	.word	0xaaaaaaab
 8008754:	08011e58 	.word	0x08011e58

08008758 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008768:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d11f      	bne.n	80087b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2b03      	cmp	r3, #3
 8008776:	d856      	bhi.n	8008826 <DMA_CheckFifoParam+0xce>
 8008778:	a201      	add	r2, pc, #4	@ (adr r2, 8008780 <DMA_CheckFifoParam+0x28>)
 800877a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877e:	bf00      	nop
 8008780:	08008791 	.word	0x08008791
 8008784:	080087a3 	.word	0x080087a3
 8008788:	08008791 	.word	0x08008791
 800878c:	08008827 	.word	0x08008827
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008794:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008798:	2b00      	cmp	r3, #0
 800879a:	d046      	beq.n	800882a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087a0:	e043      	b.n	800882a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80087aa:	d140      	bne.n	800882e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087b0:	e03d      	b.n	800882e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	699b      	ldr	r3, [r3, #24]
 80087b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ba:	d121      	bne.n	8008800 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d837      	bhi.n	8008832 <DMA_CheckFifoParam+0xda>
 80087c2:	a201      	add	r2, pc, #4	@ (adr r2, 80087c8 <DMA_CheckFifoParam+0x70>)
 80087c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c8:	080087d9 	.word	0x080087d9
 80087cc:	080087df 	.word	0x080087df
 80087d0:	080087d9 	.word	0x080087d9
 80087d4:	080087f1 	.word	0x080087f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
      break;
 80087dc:	e030      	b.n	8008840 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d025      	beq.n	8008836 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087ee:	e022      	b.n	8008836 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80087f8:	d11f      	bne.n	800883a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087fe:	e01c      	b.n	800883a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2b02      	cmp	r3, #2
 8008804:	d903      	bls.n	800880e <DMA_CheckFifoParam+0xb6>
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b03      	cmp	r3, #3
 800880a:	d003      	beq.n	8008814 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800880c:	e018      	b.n	8008840 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	73fb      	strb	r3, [r7, #15]
      break;
 8008812:	e015      	b.n	8008840 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008818:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00e      	beq.n	800883e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	73fb      	strb	r3, [r7, #15]
      break;
 8008824:	e00b      	b.n	800883e <DMA_CheckFifoParam+0xe6>
      break;
 8008826:	bf00      	nop
 8008828:	e00a      	b.n	8008840 <DMA_CheckFifoParam+0xe8>
      break;
 800882a:	bf00      	nop
 800882c:	e008      	b.n	8008840 <DMA_CheckFifoParam+0xe8>
      break;
 800882e:	bf00      	nop
 8008830:	e006      	b.n	8008840 <DMA_CheckFifoParam+0xe8>
      break;
 8008832:	bf00      	nop
 8008834:	e004      	b.n	8008840 <DMA_CheckFifoParam+0xe8>
      break;
 8008836:	bf00      	nop
 8008838:	e002      	b.n	8008840 <DMA_CheckFifoParam+0xe8>
      break;   
 800883a:	bf00      	nop
 800883c:	e000      	b.n	8008840 <DMA_CheckFifoParam+0xe8>
      break;
 800883e:	bf00      	nop
    }
  } 
  
  return status; 
 8008840:	7bfb      	ldrb	r3, [r7, #15]
}
 8008842:	4618      	mov	r0, r3
 8008844:	3714      	adds	r7, #20
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr
 800884e:	bf00      	nop

08008850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008850:	b480      	push	{r7}
 8008852:	b089      	sub	sp, #36	@ 0x24
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800885a:	2300      	movs	r3, #0
 800885c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800885e:	2300      	movs	r3, #0
 8008860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008862:	2300      	movs	r3, #0
 8008864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008866:	2300      	movs	r3, #0
 8008868:	61fb      	str	r3, [r7, #28]
 800886a:	e16b      	b.n	8008b44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800886c:	2201      	movs	r2, #1
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	fa02 f303 	lsl.w	r3, r2, r3
 8008874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4013      	ands	r3, r2
 800887e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	429a      	cmp	r2, r3
 8008886:	f040 815a 	bne.w	8008b3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f003 0303 	and.w	r3, r3, #3
 8008892:	2b01      	cmp	r3, #1
 8008894:	d005      	beq.n	80088a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d130      	bne.n	8008904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	005b      	lsls	r3, r3, #1
 80088ac:	2203      	movs	r2, #3
 80088ae:	fa02 f303 	lsl.w	r3, r2, r3
 80088b2:	43db      	mvns	r3, r3
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	4013      	ands	r3, r2
 80088b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68da      	ldr	r2, [r3, #12]
 80088be:	69fb      	ldr	r3, [r7, #28]
 80088c0:	005b      	lsls	r3, r3, #1
 80088c2:	fa02 f303 	lsl.w	r3, r2, r3
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	685b      	ldr	r3, [r3, #4]
 80088d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80088d8:	2201      	movs	r2, #1
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	fa02 f303 	lsl.w	r3, r2, r3
 80088e0:	43db      	mvns	r3, r3
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	4013      	ands	r3, r2
 80088e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	091b      	lsrs	r3, r3, #4
 80088ee:	f003 0201 	and.w	r2, r3, #1
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	fa02 f303 	lsl.w	r3, r2, r3
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	f003 0303 	and.w	r3, r3, #3
 800890c:	2b03      	cmp	r3, #3
 800890e:	d017      	beq.n	8008940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008916:	69fb      	ldr	r3, [r7, #28]
 8008918:	005b      	lsls	r3, r3, #1
 800891a:	2203      	movs	r2, #3
 800891c:	fa02 f303 	lsl.w	r3, r2, r3
 8008920:	43db      	mvns	r3, r3
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	4013      	ands	r3, r2
 8008926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	689a      	ldr	r2, [r3, #8]
 800892c:	69fb      	ldr	r3, [r7, #28]
 800892e:	005b      	lsls	r3, r3, #1
 8008930:	fa02 f303 	lsl.w	r3, r2, r3
 8008934:	69ba      	ldr	r2, [r7, #24]
 8008936:	4313      	orrs	r3, r2
 8008938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	69ba      	ldr	r2, [r7, #24]
 800893e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f003 0303 	and.w	r3, r3, #3
 8008948:	2b02      	cmp	r3, #2
 800894a:	d123      	bne.n	8008994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	08da      	lsrs	r2, r3, #3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3208      	adds	r2, #8
 8008954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	f003 0307 	and.w	r3, r3, #7
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	220f      	movs	r2, #15
 8008964:	fa02 f303 	lsl.w	r3, r2, r3
 8008968:	43db      	mvns	r3, r3
 800896a:	69ba      	ldr	r2, [r7, #24]
 800896c:	4013      	ands	r3, r2
 800896e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	691a      	ldr	r2, [r3, #16]
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	fa02 f303 	lsl.w	r3, r2, r3
 8008980:	69ba      	ldr	r2, [r7, #24]
 8008982:	4313      	orrs	r3, r2
 8008984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008986:	69fb      	ldr	r3, [r7, #28]
 8008988:	08da      	lsrs	r2, r3, #3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	3208      	adds	r2, #8
 800898e:	69b9      	ldr	r1, [r7, #24]
 8008990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	005b      	lsls	r3, r3, #1
 800899e:	2203      	movs	r2, #3
 80089a0:	fa02 f303 	lsl.w	r3, r2, r3
 80089a4:	43db      	mvns	r3, r3
 80089a6:	69ba      	ldr	r2, [r7, #24]
 80089a8:	4013      	ands	r3, r2
 80089aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f003 0203 	and.w	r2, r3, #3
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	005b      	lsls	r3, r3, #1
 80089b8:	fa02 f303 	lsl.w	r3, r2, r3
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	4313      	orrs	r3, r2
 80089c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f000 80b4 	beq.w	8008b3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089d6:	2300      	movs	r3, #0
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	4b60      	ldr	r3, [pc, #384]	@ (8008b5c <HAL_GPIO_Init+0x30c>)
 80089dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089de:	4a5f      	ldr	r2, [pc, #380]	@ (8008b5c <HAL_GPIO_Init+0x30c>)
 80089e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80089e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80089e6:	4b5d      	ldr	r3, [pc, #372]	@ (8008b5c <HAL_GPIO_Init+0x30c>)
 80089e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80089f2:	4a5b      	ldr	r2, [pc, #364]	@ (8008b60 <HAL_GPIO_Init+0x310>)
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	089b      	lsrs	r3, r3, #2
 80089f8:	3302      	adds	r3, #2
 80089fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	f003 0303 	and.w	r3, r3, #3
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	220f      	movs	r2, #15
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	69ba      	ldr	r2, [r7, #24]
 8008a12:	4013      	ands	r3, r2
 8008a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	4a52      	ldr	r2, [pc, #328]	@ (8008b64 <HAL_GPIO_Init+0x314>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d02b      	beq.n	8008a76 <HAL_GPIO_Init+0x226>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	4a51      	ldr	r2, [pc, #324]	@ (8008b68 <HAL_GPIO_Init+0x318>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d025      	beq.n	8008a72 <HAL_GPIO_Init+0x222>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4a50      	ldr	r2, [pc, #320]	@ (8008b6c <HAL_GPIO_Init+0x31c>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d01f      	beq.n	8008a6e <HAL_GPIO_Init+0x21e>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a4f      	ldr	r2, [pc, #316]	@ (8008b70 <HAL_GPIO_Init+0x320>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d019      	beq.n	8008a6a <HAL_GPIO_Init+0x21a>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a4e      	ldr	r2, [pc, #312]	@ (8008b74 <HAL_GPIO_Init+0x324>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d013      	beq.n	8008a66 <HAL_GPIO_Init+0x216>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a4d      	ldr	r2, [pc, #308]	@ (8008b78 <HAL_GPIO_Init+0x328>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d00d      	beq.n	8008a62 <HAL_GPIO_Init+0x212>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a4c      	ldr	r2, [pc, #304]	@ (8008b7c <HAL_GPIO_Init+0x32c>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d007      	beq.n	8008a5e <HAL_GPIO_Init+0x20e>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a4b      	ldr	r2, [pc, #300]	@ (8008b80 <HAL_GPIO_Init+0x330>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d101      	bne.n	8008a5a <HAL_GPIO_Init+0x20a>
 8008a56:	2307      	movs	r3, #7
 8008a58:	e00e      	b.n	8008a78 <HAL_GPIO_Init+0x228>
 8008a5a:	2308      	movs	r3, #8
 8008a5c:	e00c      	b.n	8008a78 <HAL_GPIO_Init+0x228>
 8008a5e:	2306      	movs	r3, #6
 8008a60:	e00a      	b.n	8008a78 <HAL_GPIO_Init+0x228>
 8008a62:	2305      	movs	r3, #5
 8008a64:	e008      	b.n	8008a78 <HAL_GPIO_Init+0x228>
 8008a66:	2304      	movs	r3, #4
 8008a68:	e006      	b.n	8008a78 <HAL_GPIO_Init+0x228>
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e004      	b.n	8008a78 <HAL_GPIO_Init+0x228>
 8008a6e:	2302      	movs	r3, #2
 8008a70:	e002      	b.n	8008a78 <HAL_GPIO_Init+0x228>
 8008a72:	2301      	movs	r3, #1
 8008a74:	e000      	b.n	8008a78 <HAL_GPIO_Init+0x228>
 8008a76:	2300      	movs	r3, #0
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	f002 0203 	and.w	r2, r2, #3
 8008a7e:	0092      	lsls	r2, r2, #2
 8008a80:	4093      	lsls	r3, r2
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008a88:	4935      	ldr	r1, [pc, #212]	@ (8008b60 <HAL_GPIO_Init+0x310>)
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	089b      	lsrs	r3, r3, #2
 8008a8e:	3302      	adds	r3, #2
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008a96:	4b3b      	ldr	r3, [pc, #236]	@ (8008b84 <HAL_GPIO_Init+0x334>)
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	43db      	mvns	r3, r3
 8008aa0:	69ba      	ldr	r2, [r7, #24]
 8008aa2:	4013      	ands	r3, r2
 8008aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	685b      	ldr	r3, [r3, #4]
 8008aaa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d003      	beq.n	8008aba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008ab2:	69ba      	ldr	r2, [r7, #24]
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008aba:	4a32      	ldr	r2, [pc, #200]	@ (8008b84 <HAL_GPIO_Init+0x334>)
 8008abc:	69bb      	ldr	r3, [r7, #24]
 8008abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ac0:	4b30      	ldr	r3, [pc, #192]	@ (8008b84 <HAL_GPIO_Init+0x334>)
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	43db      	mvns	r3, r3
 8008aca:	69ba      	ldr	r2, [r7, #24]
 8008acc:	4013      	ands	r3, r2
 8008ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d003      	beq.n	8008ae4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	4313      	orrs	r3, r2
 8008ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ae4:	4a27      	ldr	r2, [pc, #156]	@ (8008b84 <HAL_GPIO_Init+0x334>)
 8008ae6:	69bb      	ldr	r3, [r7, #24]
 8008ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008aea:	4b26      	ldr	r3, [pc, #152]	@ (8008b84 <HAL_GPIO_Init+0x334>)
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	43db      	mvns	r3, r3
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	4013      	ands	r3, r2
 8008af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008b0e:	4a1d      	ldr	r2, [pc, #116]	@ (8008b84 <HAL_GPIO_Init+0x334>)
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b14:	4b1b      	ldr	r3, [pc, #108]	@ (8008b84 <HAL_GPIO_Init+0x334>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	4013      	ands	r3, r2
 8008b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d003      	beq.n	8008b38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b38:	4a12      	ldr	r2, [pc, #72]	@ (8008b84 <HAL_GPIO_Init+0x334>)
 8008b3a:	69bb      	ldr	r3, [r7, #24]
 8008b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	3301      	adds	r3, #1
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	2b0f      	cmp	r3, #15
 8008b48:	f67f ae90 	bls.w	800886c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008b4c:	bf00      	nop
 8008b4e:	bf00      	nop
 8008b50:	3724      	adds	r7, #36	@ 0x24
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40023800 	.word	0x40023800
 8008b60:	40013800 	.word	0x40013800
 8008b64:	40020000 	.word	0x40020000
 8008b68:	40020400 	.word	0x40020400
 8008b6c:	40020800 	.word	0x40020800
 8008b70:	40020c00 	.word	0x40020c00
 8008b74:	40021000 	.word	0x40021000
 8008b78:	40021400 	.word	0x40021400
 8008b7c:	40021800 	.word	0x40021800
 8008b80:	40021c00 	.word	0x40021c00
 8008b84:	40013c00 	.word	0x40013c00

08008b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b083      	sub	sp, #12
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	460b      	mov	r3, r1
 8008b92:	807b      	strh	r3, [r7, #2]
 8008b94:	4613      	mov	r3, r2
 8008b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b98:	787b      	ldrb	r3, [r7, #1]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b9e:	887a      	ldrh	r2, [r7, #2]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008ba4:	e003      	b.n	8008bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008ba6:	887b      	ldrh	r3, [r7, #2]
 8008ba8:	041a      	lsls	r2, r3, #16
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	619a      	str	r2, [r3, #24]
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
	...

08008bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008bc6:	4b08      	ldr	r3, [pc, #32]	@ (8008be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008bc8:	695a      	ldr	r2, [r3, #20]
 8008bca:	88fb      	ldrh	r3, [r7, #6]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d006      	beq.n	8008be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008bd2:	4a05      	ldr	r2, [pc, #20]	@ (8008be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008bd4:	88fb      	ldrh	r3, [r7, #6]
 8008bd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008bd8:	88fb      	ldrh	r3, [r7, #6]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7fc f800 	bl	8004be0 <HAL_GPIO_EXTI_Callback>
  }
}
 8008be0:	bf00      	nop
 8008be2:	3708      	adds	r7, #8
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	40013c00 	.word	0x40013c00

08008bec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e12b      	b.n	8008e56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d106      	bne.n	8008c18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	f7fd fcd8 	bl	80065c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2224      	movs	r2, #36	@ 0x24
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008c50:	f000 fd4c 	bl	80096ec <HAL_RCC_GetPCLK1Freq>
 8008c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	4a81      	ldr	r2, [pc, #516]	@ (8008e60 <HAL_I2C_Init+0x274>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d807      	bhi.n	8008c70 <HAL_I2C_Init+0x84>
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	4a80      	ldr	r2, [pc, #512]	@ (8008e64 <HAL_I2C_Init+0x278>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	bf94      	ite	ls
 8008c68:	2301      	movls	r3, #1
 8008c6a:	2300      	movhi	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	e006      	b.n	8008c7e <HAL_I2C_Init+0x92>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4a7d      	ldr	r2, [pc, #500]	@ (8008e68 <HAL_I2C_Init+0x27c>)
 8008c74:	4293      	cmp	r3, r2
 8008c76:	bf94      	ite	ls
 8008c78:	2301      	movls	r3, #1
 8008c7a:	2300      	movhi	r3, #0
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d001      	beq.n	8008c86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e0e7      	b.n	8008e56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	4a78      	ldr	r2, [pc, #480]	@ (8008e6c <HAL_I2C_Init+0x280>)
 8008c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8008c8e:	0c9b      	lsrs	r3, r3, #18
 8008c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	430a      	orrs	r2, r1
 8008ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	6a1b      	ldr	r3, [r3, #32]
 8008cac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	4a6a      	ldr	r2, [pc, #424]	@ (8008e60 <HAL_I2C_Init+0x274>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d802      	bhi.n	8008cc0 <HAL_I2C_Init+0xd4>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	3301      	adds	r3, #1
 8008cbe:	e009      	b.n	8008cd4 <HAL_I2C_Init+0xe8>
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008cc6:	fb02 f303 	mul.w	r3, r2, r3
 8008cca:	4a69      	ldr	r2, [pc, #420]	@ (8008e70 <HAL_I2C_Init+0x284>)
 8008ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd0:	099b      	lsrs	r3, r3, #6
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	6812      	ldr	r2, [r2, #0]
 8008cd8:	430b      	orrs	r3, r1
 8008cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008ce6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	495c      	ldr	r1, [pc, #368]	@ (8008e60 <HAL_I2C_Init+0x274>)
 8008cf0:	428b      	cmp	r3, r1
 8008cf2:	d819      	bhi.n	8008d28 <HAL_I2C_Init+0x13c>
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	1e59      	subs	r1, r3, #1
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	005b      	lsls	r3, r3, #1
 8008cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d02:	1c59      	adds	r1, r3, #1
 8008d04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008d08:	400b      	ands	r3, r1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00a      	beq.n	8008d24 <HAL_I2C_Init+0x138>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	1e59      	subs	r1, r3, #1
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	005b      	lsls	r3, r3, #1
 8008d18:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d22:	e051      	b.n	8008dc8 <HAL_I2C_Init+0x1dc>
 8008d24:	2304      	movs	r3, #4
 8008d26:	e04f      	b.n	8008dc8 <HAL_I2C_Init+0x1dc>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d111      	bne.n	8008d54 <HAL_I2C_Init+0x168>
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	1e58      	subs	r0, r3, #1
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6859      	ldr	r1, [r3, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	440b      	add	r3, r1
 8008d3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d42:	3301      	adds	r3, #1
 8008d44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	bf0c      	ite	eq
 8008d4c:	2301      	moveq	r3, #1
 8008d4e:	2300      	movne	r3, #0
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	e012      	b.n	8008d7a <HAL_I2C_Init+0x18e>
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	1e58      	subs	r0, r3, #1
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6859      	ldr	r1, [r3, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	440b      	add	r3, r1
 8008d62:	0099      	lsls	r1, r3, #2
 8008d64:	440b      	add	r3, r1
 8008d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	bf0c      	ite	eq
 8008d74:	2301      	moveq	r3, #1
 8008d76:	2300      	movne	r3, #0
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d001      	beq.n	8008d82 <HAL_I2C_Init+0x196>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e022      	b.n	8008dc8 <HAL_I2C_Init+0x1dc>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d10e      	bne.n	8008da8 <HAL_I2C_Init+0x1bc>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	1e58      	subs	r0, r3, #1
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6859      	ldr	r1, [r3, #4]
 8008d92:	460b      	mov	r3, r1
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	440b      	add	r3, r1
 8008d98:	fbb0 f3f3 	udiv	r3, r0, r3
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008da6:	e00f      	b.n	8008dc8 <HAL_I2C_Init+0x1dc>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	1e58      	subs	r0, r3, #1
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6859      	ldr	r1, [r3, #4]
 8008db0:	460b      	mov	r3, r1
 8008db2:	009b      	lsls	r3, r3, #2
 8008db4:	440b      	add	r3, r1
 8008db6:	0099      	lsls	r1, r3, #2
 8008db8:	440b      	add	r3, r1
 8008dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8008dbe:	3301      	adds	r3, #1
 8008dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008dc8:	6879      	ldr	r1, [r7, #4]
 8008dca:	6809      	ldr	r1, [r1, #0]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	69da      	ldr	r2, [r3, #28]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6a1b      	ldr	r3, [r3, #32]
 8008de2:	431a      	orrs	r2, r3
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	430a      	orrs	r2, r1
 8008dea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	689b      	ldr	r3, [r3, #8]
 8008df2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008df6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	6911      	ldr	r1, [r2, #16]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	68d2      	ldr	r2, [r2, #12]
 8008e02:	4311      	orrs	r1, r2
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	6812      	ldr	r2, [r2, #0]
 8008e08:	430b      	orrs	r3, r1
 8008e0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	695a      	ldr	r2, [r3, #20]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f042 0201 	orr.w	r2, r2, #1
 8008e36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2220      	movs	r2, #32
 8008e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
 8008e5e:	bf00      	nop
 8008e60:	000186a0 	.word	0x000186a0
 8008e64:	001e847f 	.word	0x001e847f
 8008e68:	003d08ff 	.word	0x003d08ff
 8008e6c:	431bde83 	.word	0x431bde83
 8008e70:	10624dd3 	.word	0x10624dd3

08008e74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b086      	sub	sp, #24
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d101      	bne.n	8008e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e267      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d075      	beq.n	8008f7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008e92:	4b88      	ldr	r3, [pc, #544]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f003 030c 	and.w	r3, r3, #12
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	d00c      	beq.n	8008eb8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008e9e:	4b85      	ldr	r3, [pc, #532]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008ea6:	2b08      	cmp	r3, #8
 8008ea8:	d112      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008eaa:	4b82      	ldr	r3, [pc, #520]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008eb2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008eb6:	d10b      	bne.n	8008ed0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008eb8:	4b7e      	ldr	r3, [pc, #504]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d05b      	beq.n	8008f7c <HAL_RCC_OscConfig+0x108>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d157      	bne.n	8008f7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ecc:	2301      	movs	r3, #1
 8008ece:	e242      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ed8:	d106      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x74>
 8008eda:	4b76      	ldr	r3, [pc, #472]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a75      	ldr	r2, [pc, #468]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008ee0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ee4:	6013      	str	r3, [r2, #0]
 8008ee6:	e01d      	b.n	8008f24 <HAL_RCC_OscConfig+0xb0>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008ef0:	d10c      	bne.n	8008f0c <HAL_RCC_OscConfig+0x98>
 8008ef2:	4b70      	ldr	r3, [pc, #448]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a6f      	ldr	r2, [pc, #444]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008ef8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008efc:	6013      	str	r3, [r2, #0]
 8008efe:	4b6d      	ldr	r3, [pc, #436]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a6c      	ldr	r2, [pc, #432]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008f08:	6013      	str	r3, [r2, #0]
 8008f0a:	e00b      	b.n	8008f24 <HAL_RCC_OscConfig+0xb0>
 8008f0c:	4b69      	ldr	r3, [pc, #420]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a68      	ldr	r2, [pc, #416]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	4b66      	ldr	r3, [pc, #408]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a65      	ldr	r2, [pc, #404]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008f22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d013      	beq.n	8008f54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f2c:	f7fe f90a 	bl	8007144 <HAL_GetTick>
 8008f30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f32:	e008      	b.n	8008f46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f34:	f7fe f906 	bl	8007144 <HAL_GetTick>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	1ad3      	subs	r3, r2, r3
 8008f3e:	2b64      	cmp	r3, #100	@ 0x64
 8008f40:	d901      	bls.n	8008f46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f42:	2303      	movs	r3, #3
 8008f44:	e207      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f46:	4b5b      	ldr	r3, [pc, #364]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0f0      	beq.n	8008f34 <HAL_RCC_OscConfig+0xc0>
 8008f52:	e014      	b.n	8008f7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f54:	f7fe f8f6 	bl	8007144 <HAL_GetTick>
 8008f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f5c:	f7fe f8f2 	bl	8007144 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b64      	cmp	r3, #100	@ 0x64
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e1f3      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008f6e:	4b51      	ldr	r3, [pc, #324]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d1f0      	bne.n	8008f5c <HAL_RCC_OscConfig+0xe8>
 8008f7a:	e000      	b.n	8008f7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0302 	and.w	r3, r3, #2
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d063      	beq.n	8009052 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008f8a:	4b4a      	ldr	r3, [pc, #296]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f003 030c 	and.w	r3, r3, #12
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008f96:	4b47      	ldr	r3, [pc, #284]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008f98:	689b      	ldr	r3, [r3, #8]
 8008f9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008f9e:	2b08      	cmp	r3, #8
 8008fa0:	d11c      	bne.n	8008fdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008fa2:	4b44      	ldr	r3, [pc, #272]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d116      	bne.n	8008fdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fae:	4b41      	ldr	r3, [pc, #260]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d005      	beq.n	8008fc6 <HAL_RCC_OscConfig+0x152>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d001      	beq.n	8008fc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	e1c7      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	691b      	ldr	r3, [r3, #16]
 8008fd2:	00db      	lsls	r3, r3, #3
 8008fd4:	4937      	ldr	r1, [pc, #220]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008fda:	e03a      	b.n	8009052 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d020      	beq.n	8009026 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008fe4:	4b34      	ldr	r3, [pc, #208]	@ (80090b8 <HAL_RCC_OscConfig+0x244>)
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fea:	f7fe f8ab 	bl	8007144 <HAL_GetTick>
 8008fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ff0:	e008      	b.n	8009004 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ff2:	f7fe f8a7 	bl	8007144 <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e1a8      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009004:	4b2b      	ldr	r3, [pc, #172]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0302 	and.w	r3, r3, #2
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0f0      	beq.n	8008ff2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009010:	4b28      	ldr	r3, [pc, #160]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	00db      	lsls	r3, r3, #3
 800901e:	4925      	ldr	r1, [pc, #148]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8009020:	4313      	orrs	r3, r2
 8009022:	600b      	str	r3, [r1, #0]
 8009024:	e015      	b.n	8009052 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009026:	4b24      	ldr	r3, [pc, #144]	@ (80090b8 <HAL_RCC_OscConfig+0x244>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902c:	f7fe f88a 	bl	8007144 <HAL_GetTick>
 8009030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009034:	f7fe f886 	bl	8007144 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e187      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009046:	4b1b      	ldr	r3, [pc, #108]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f003 0302 	and.w	r3, r3, #2
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1f0      	bne.n	8009034 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0308 	and.w	r3, r3, #8
 800905a:	2b00      	cmp	r3, #0
 800905c:	d036      	beq.n	80090cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d016      	beq.n	8009094 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009066:	4b15      	ldr	r3, [pc, #84]	@ (80090bc <HAL_RCC_OscConfig+0x248>)
 8009068:	2201      	movs	r2, #1
 800906a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800906c:	f7fe f86a 	bl	8007144 <HAL_GetTick>
 8009070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009072:	e008      	b.n	8009086 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009074:	f7fe f866 	bl	8007144 <HAL_GetTick>
 8009078:	4602      	mov	r2, r0
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	1ad3      	subs	r3, r2, r3
 800907e:	2b02      	cmp	r3, #2
 8009080:	d901      	bls.n	8009086 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009082:	2303      	movs	r3, #3
 8009084:	e167      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009086:	4b0b      	ldr	r3, [pc, #44]	@ (80090b4 <HAL_RCC_OscConfig+0x240>)
 8009088:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800908a:	f003 0302 	and.w	r3, r3, #2
 800908e:	2b00      	cmp	r3, #0
 8009090:	d0f0      	beq.n	8009074 <HAL_RCC_OscConfig+0x200>
 8009092:	e01b      	b.n	80090cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009094:	4b09      	ldr	r3, [pc, #36]	@ (80090bc <HAL_RCC_OscConfig+0x248>)
 8009096:	2200      	movs	r2, #0
 8009098:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800909a:	f7fe f853 	bl	8007144 <HAL_GetTick>
 800909e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090a0:	e00e      	b.n	80090c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090a2:	f7fe f84f 	bl	8007144 <HAL_GetTick>
 80090a6:	4602      	mov	r2, r0
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	1ad3      	subs	r3, r2, r3
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d907      	bls.n	80090c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e150      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
 80090b4:	40023800 	.word	0x40023800
 80090b8:	42470000 	.word	0x42470000
 80090bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80090c0:	4b88      	ldr	r3, [pc, #544]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 80090c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090c4:	f003 0302 	and.w	r3, r3, #2
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1ea      	bne.n	80090a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f003 0304 	and.w	r3, r3, #4
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8097 	beq.w	8009208 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80090da:	2300      	movs	r3, #0
 80090dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80090de:	4b81      	ldr	r3, [pc, #516]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 80090e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10f      	bne.n	800910a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80090ea:	2300      	movs	r3, #0
 80090ec:	60bb      	str	r3, [r7, #8]
 80090ee:	4b7d      	ldr	r3, [pc, #500]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 80090f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f2:	4a7c      	ldr	r2, [pc, #496]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 80090f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80090f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80090fa:	4b7a      	ldr	r3, [pc, #488]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 80090fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009102:	60bb      	str	r3, [r7, #8]
 8009104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009106:	2301      	movs	r3, #1
 8009108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800910a:	4b77      	ldr	r3, [pc, #476]	@ (80092e8 <HAL_RCC_OscConfig+0x474>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009112:	2b00      	cmp	r3, #0
 8009114:	d118      	bne.n	8009148 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009116:	4b74      	ldr	r3, [pc, #464]	@ (80092e8 <HAL_RCC_OscConfig+0x474>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a73      	ldr	r2, [pc, #460]	@ (80092e8 <HAL_RCC_OscConfig+0x474>)
 800911c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009122:	f7fe f80f 	bl	8007144 <HAL_GetTick>
 8009126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009128:	e008      	b.n	800913c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800912a:	f7fe f80b 	bl	8007144 <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	693b      	ldr	r3, [r7, #16]
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b02      	cmp	r3, #2
 8009136:	d901      	bls.n	800913c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e10c      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800913c:	4b6a      	ldr	r3, [pc, #424]	@ (80092e8 <HAL_RCC_OscConfig+0x474>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0f0      	beq.n	800912a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	689b      	ldr	r3, [r3, #8]
 800914c:	2b01      	cmp	r3, #1
 800914e:	d106      	bne.n	800915e <HAL_RCC_OscConfig+0x2ea>
 8009150:	4b64      	ldr	r3, [pc, #400]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009152:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009154:	4a63      	ldr	r2, [pc, #396]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009156:	f043 0301 	orr.w	r3, r3, #1
 800915a:	6713      	str	r3, [r2, #112]	@ 0x70
 800915c:	e01c      	b.n	8009198 <HAL_RCC_OscConfig+0x324>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	2b05      	cmp	r3, #5
 8009164:	d10c      	bne.n	8009180 <HAL_RCC_OscConfig+0x30c>
 8009166:	4b5f      	ldr	r3, [pc, #380]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800916a:	4a5e      	ldr	r2, [pc, #376]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 800916c:	f043 0304 	orr.w	r3, r3, #4
 8009170:	6713      	str	r3, [r2, #112]	@ 0x70
 8009172:	4b5c      	ldr	r3, [pc, #368]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009176:	4a5b      	ldr	r2, [pc, #364]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009178:	f043 0301 	orr.w	r3, r3, #1
 800917c:	6713      	str	r3, [r2, #112]	@ 0x70
 800917e:	e00b      	b.n	8009198 <HAL_RCC_OscConfig+0x324>
 8009180:	4b58      	ldr	r3, [pc, #352]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009184:	4a57      	ldr	r2, [pc, #348]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009186:	f023 0301 	bic.w	r3, r3, #1
 800918a:	6713      	str	r3, [r2, #112]	@ 0x70
 800918c:	4b55      	ldr	r3, [pc, #340]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 800918e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009190:	4a54      	ldr	r2, [pc, #336]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009192:	f023 0304 	bic.w	r3, r3, #4
 8009196:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d015      	beq.n	80091cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091a0:	f7fd ffd0 	bl	8007144 <HAL_GetTick>
 80091a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091a6:	e00a      	b.n	80091be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091a8:	f7fd ffcc 	bl	8007144 <HAL_GetTick>
 80091ac:	4602      	mov	r2, r0
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e0cb      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091be:	4b49      	ldr	r3, [pc, #292]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 80091c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091c2:	f003 0302 	and.w	r3, r3, #2
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d0ee      	beq.n	80091a8 <HAL_RCC_OscConfig+0x334>
 80091ca:	e014      	b.n	80091f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091cc:	f7fd ffba 	bl	8007144 <HAL_GetTick>
 80091d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091d2:	e00a      	b.n	80091ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80091d4:	f7fd ffb6 	bl	8007144 <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e0b5      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80091ea:	4b3e      	ldr	r3, [pc, #248]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 80091ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1ee      	bne.n	80091d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80091f6:	7dfb      	ldrb	r3, [r7, #23]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d105      	bne.n	8009208 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80091fc:	4b39      	ldr	r3, [pc, #228]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 80091fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009200:	4a38      	ldr	r2, [pc, #224]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009202:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009206:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	699b      	ldr	r3, [r3, #24]
 800920c:	2b00      	cmp	r3, #0
 800920e:	f000 80a1 	beq.w	8009354 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009212:	4b34      	ldr	r3, [pc, #208]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 030c 	and.w	r3, r3, #12
 800921a:	2b08      	cmp	r3, #8
 800921c:	d05c      	beq.n	80092d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	2b02      	cmp	r3, #2
 8009224:	d141      	bne.n	80092aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009226:	4b31      	ldr	r3, [pc, #196]	@ (80092ec <HAL_RCC_OscConfig+0x478>)
 8009228:	2200      	movs	r2, #0
 800922a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800922c:	f7fd ff8a 	bl	8007144 <HAL_GetTick>
 8009230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009232:	e008      	b.n	8009246 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009234:	f7fd ff86 	bl	8007144 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	2b02      	cmp	r3, #2
 8009240:	d901      	bls.n	8009246 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009242:	2303      	movs	r3, #3
 8009244:	e087      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009246:	4b27      	ldr	r3, [pc, #156]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800924e:	2b00      	cmp	r3, #0
 8009250:	d1f0      	bne.n	8009234 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	69da      	ldr	r2, [r3, #28]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	431a      	orrs	r2, r3
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009260:	019b      	lsls	r3, r3, #6
 8009262:	431a      	orrs	r2, r3
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009268:	085b      	lsrs	r3, r3, #1
 800926a:	3b01      	subs	r3, #1
 800926c:	041b      	lsls	r3, r3, #16
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009274:	061b      	lsls	r3, r3, #24
 8009276:	491b      	ldr	r1, [pc, #108]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 8009278:	4313      	orrs	r3, r2
 800927a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800927c:	4b1b      	ldr	r3, [pc, #108]	@ (80092ec <HAL_RCC_OscConfig+0x478>)
 800927e:	2201      	movs	r2, #1
 8009280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009282:	f7fd ff5f 	bl	8007144 <HAL_GetTick>
 8009286:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009288:	e008      	b.n	800929c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800928a:	f7fd ff5b 	bl	8007144 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	2b02      	cmp	r3, #2
 8009296:	d901      	bls.n	800929c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e05c      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800929c:	4b11      	ldr	r3, [pc, #68]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d0f0      	beq.n	800928a <HAL_RCC_OscConfig+0x416>
 80092a8:	e054      	b.n	8009354 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092aa:	4b10      	ldr	r3, [pc, #64]	@ (80092ec <HAL_RCC_OscConfig+0x478>)
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092b0:	f7fd ff48 	bl	8007144 <HAL_GetTick>
 80092b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092b6:	e008      	b.n	80092ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80092b8:	f7fd ff44 	bl	8007144 <HAL_GetTick>
 80092bc:	4602      	mov	r2, r0
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	1ad3      	subs	r3, r2, r3
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d901      	bls.n	80092ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	e045      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092ca:	4b06      	ldr	r3, [pc, #24]	@ (80092e4 <HAL_RCC_OscConfig+0x470>)
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1f0      	bne.n	80092b8 <HAL_RCC_OscConfig+0x444>
 80092d6:	e03d      	b.n	8009354 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	699b      	ldr	r3, [r3, #24]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d107      	bne.n	80092f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80092e0:	2301      	movs	r3, #1
 80092e2:	e038      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
 80092e4:	40023800 	.word	0x40023800
 80092e8:	40007000 	.word	0x40007000
 80092ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80092f0:	4b1b      	ldr	r3, [pc, #108]	@ (8009360 <HAL_RCC_OscConfig+0x4ec>)
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	699b      	ldr	r3, [r3, #24]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d028      	beq.n	8009350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009308:	429a      	cmp	r2, r3
 800930a:	d121      	bne.n	8009350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009316:	429a      	cmp	r2, r3
 8009318:	d11a      	bne.n	8009350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8009320:	4013      	ands	r3, r2
 8009322:	687a      	ldr	r2, [r7, #4]
 8009324:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009326:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009328:	4293      	cmp	r3, r2
 800932a:	d111      	bne.n	8009350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009336:	085b      	lsrs	r3, r3, #1
 8009338:	3b01      	subs	r3, #1
 800933a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800933c:	429a      	cmp	r2, r3
 800933e:	d107      	bne.n	8009350 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800934a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800934c:	429a      	cmp	r2, r3
 800934e:	d001      	beq.n	8009354 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	e000      	b.n	8009356 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	40023800 	.word	0x40023800

08009364 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d101      	bne.n	8009378 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e0cc      	b.n	8009512 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009378:	4b68      	ldr	r3, [pc, #416]	@ (800951c <HAL_RCC_ClockConfig+0x1b8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0307 	and.w	r3, r3, #7
 8009380:	683a      	ldr	r2, [r7, #0]
 8009382:	429a      	cmp	r2, r3
 8009384:	d90c      	bls.n	80093a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009386:	4b65      	ldr	r3, [pc, #404]	@ (800951c <HAL_RCC_ClockConfig+0x1b8>)
 8009388:	683a      	ldr	r2, [r7, #0]
 800938a:	b2d2      	uxtb	r2, r2
 800938c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800938e:	4b63      	ldr	r3, [pc, #396]	@ (800951c <HAL_RCC_ClockConfig+0x1b8>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f003 0307 	and.w	r3, r3, #7
 8009396:	683a      	ldr	r2, [r7, #0]
 8009398:	429a      	cmp	r2, r3
 800939a:	d001      	beq.n	80093a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800939c:	2301      	movs	r3, #1
 800939e:	e0b8      	b.n	8009512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0302 	and.w	r3, r3, #2
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d020      	beq.n	80093ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d005      	beq.n	80093c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80093b8:	4b59      	ldr	r3, [pc, #356]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	4a58      	ldr	r2, [pc, #352]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80093be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80093c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d005      	beq.n	80093dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80093d0:	4b53      	ldr	r3, [pc, #332]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	4a52      	ldr	r2, [pc, #328]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80093d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80093da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80093dc:	4b50      	ldr	r3, [pc, #320]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	494d      	ldr	r1, [pc, #308]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f003 0301 	and.w	r3, r3, #1
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d044      	beq.n	8009484 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	685b      	ldr	r3, [r3, #4]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d107      	bne.n	8009412 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009402:	4b47      	ldr	r3, [pc, #284]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800940a:	2b00      	cmp	r3, #0
 800940c:	d119      	bne.n	8009442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e07f      	b.n	8009512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	2b02      	cmp	r3, #2
 8009418:	d003      	beq.n	8009422 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800941e:	2b03      	cmp	r3, #3
 8009420:	d107      	bne.n	8009432 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009422:	4b3f      	ldr	r3, [pc, #252]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d109      	bne.n	8009442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800942e:	2301      	movs	r3, #1
 8009430:	e06f      	b.n	8009512 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009432:	4b3b      	ldr	r3, [pc, #236]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	e067      	b.n	8009512 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009442:	4b37      	ldr	r3, [pc, #220]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	f023 0203 	bic.w	r2, r3, #3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	4934      	ldr	r1, [pc, #208]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 8009450:	4313      	orrs	r3, r2
 8009452:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009454:	f7fd fe76 	bl	8007144 <HAL_GetTick>
 8009458:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800945a:	e00a      	b.n	8009472 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800945c:	f7fd fe72 	bl	8007144 <HAL_GetTick>
 8009460:	4602      	mov	r2, r0
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	1ad3      	subs	r3, r2, r3
 8009466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800946a:	4293      	cmp	r3, r2
 800946c:	d901      	bls.n	8009472 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e04f      	b.n	8009512 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009472:	4b2b      	ldr	r3, [pc, #172]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	f003 020c 	and.w	r2, r3, #12
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	429a      	cmp	r2, r3
 8009482:	d1eb      	bne.n	800945c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009484:	4b25      	ldr	r3, [pc, #148]	@ (800951c <HAL_RCC_ClockConfig+0x1b8>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 0307 	and.w	r3, r3, #7
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d20c      	bcs.n	80094ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009492:	4b22      	ldr	r3, [pc, #136]	@ (800951c <HAL_RCC_ClockConfig+0x1b8>)
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	b2d2      	uxtb	r2, r2
 8009498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800949a:	4b20      	ldr	r3, [pc, #128]	@ (800951c <HAL_RCC_ClockConfig+0x1b8>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 0307 	and.w	r3, r3, #7
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d001      	beq.n	80094ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e032      	b.n	8009512 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0304 	and.w	r3, r3, #4
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d008      	beq.n	80094ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80094b8:	4b19      	ldr	r3, [pc, #100]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	4916      	ldr	r1, [pc, #88]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f003 0308 	and.w	r3, r3, #8
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80094d6:	4b12      	ldr	r3, [pc, #72]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	00db      	lsls	r3, r3, #3
 80094e4:	490e      	ldr	r1, [pc, #56]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80094e6:	4313      	orrs	r3, r2
 80094e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80094ea:	f000 f82d 	bl	8009548 <HAL_RCC_GetSysClockFreq>
 80094ee:	4602      	mov	r2, r0
 80094f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009520 <HAL_RCC_ClockConfig+0x1bc>)
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	091b      	lsrs	r3, r3, #4
 80094f6:	f003 030f 	and.w	r3, r3, #15
 80094fa:	490a      	ldr	r1, [pc, #40]	@ (8009524 <HAL_RCC_ClockConfig+0x1c0>)
 80094fc:	5ccb      	ldrb	r3, [r1, r3]
 80094fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009502:	4a09      	ldr	r2, [pc, #36]	@ (8009528 <HAL_RCC_ClockConfig+0x1c4>)
 8009504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009506:	4b09      	ldr	r3, [pc, #36]	@ (800952c <HAL_RCC_ClockConfig+0x1c8>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4618      	mov	r0, r3
 800950c:	f7fd fdd6 	bl	80070bc <HAL_InitTick>

  return HAL_OK;
 8009510:	2300      	movs	r3, #0
}
 8009512:	4618      	mov	r0, r3
 8009514:	3710      	adds	r7, #16
 8009516:	46bd      	mov	sp, r7
 8009518:	bd80      	pop	{r7, pc}
 800951a:	bf00      	nop
 800951c:	40023c00 	.word	0x40023c00
 8009520:	40023800 	.word	0x40023800
 8009524:	08011e40 	.word	0x08011e40
 8009528:	2000002c 	.word	0x2000002c
 800952c:	20000030 	.word	0x20000030

08009530 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8009534:	4b03      	ldr	r3, [pc, #12]	@ (8009544 <HAL_RCC_EnableCSS+0x14>)
 8009536:	2201      	movs	r2, #1
 8009538:	601a      	str	r2, [r3, #0]
}
 800953a:	bf00      	nop
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	4247004c 	.word	0x4247004c

08009548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800954c:	b090      	sub	sp, #64	@ 0x40
 800954e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009550:	2300      	movs	r3, #0
 8009552:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8009554:	2300      	movs	r3, #0
 8009556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800955c:	2300      	movs	r3, #0
 800955e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009560:	4b59      	ldr	r3, [pc, #356]	@ (80096c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	f003 030c 	and.w	r3, r3, #12
 8009568:	2b08      	cmp	r3, #8
 800956a:	d00d      	beq.n	8009588 <HAL_RCC_GetSysClockFreq+0x40>
 800956c:	2b08      	cmp	r3, #8
 800956e:	f200 80a1 	bhi.w	80096b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8009572:	2b00      	cmp	r3, #0
 8009574:	d002      	beq.n	800957c <HAL_RCC_GetSysClockFreq+0x34>
 8009576:	2b04      	cmp	r3, #4
 8009578:	d003      	beq.n	8009582 <HAL_RCC_GetSysClockFreq+0x3a>
 800957a:	e09b      	b.n	80096b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800957c:	4b53      	ldr	r3, [pc, #332]	@ (80096cc <HAL_RCC_GetSysClockFreq+0x184>)
 800957e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009580:	e09b      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009582:	4b53      	ldr	r3, [pc, #332]	@ (80096d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8009584:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009586:	e098      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009588:	4b4f      	ldr	r3, [pc, #316]	@ (80096c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009590:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009592:	4b4d      	ldr	r3, [pc, #308]	@ (80096c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d028      	beq.n	80095f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800959e:	4b4a      	ldr	r3, [pc, #296]	@ (80096c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	099b      	lsrs	r3, r3, #6
 80095a4:	2200      	movs	r2, #0
 80095a6:	623b      	str	r3, [r7, #32]
 80095a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80095aa:	6a3b      	ldr	r3, [r7, #32]
 80095ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80095b0:	2100      	movs	r1, #0
 80095b2:	4b47      	ldr	r3, [pc, #284]	@ (80096d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80095b4:	fb03 f201 	mul.w	r2, r3, r1
 80095b8:	2300      	movs	r3, #0
 80095ba:	fb00 f303 	mul.w	r3, r0, r3
 80095be:	4413      	add	r3, r2
 80095c0:	4a43      	ldr	r2, [pc, #268]	@ (80096d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80095c2:	fba0 1202 	umull	r1, r2, r0, r2
 80095c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80095c8:	460a      	mov	r2, r1
 80095ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80095cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80095ce:	4413      	add	r3, r2
 80095d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d4:	2200      	movs	r2, #0
 80095d6:	61bb      	str	r3, [r7, #24]
 80095d8:	61fa      	str	r2, [r7, #28]
 80095da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80095e2:	f7f7 fb31 	bl	8000c48 <__aeabi_uldivmod>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4613      	mov	r3, r2
 80095ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095ee:	e053      	b.n	8009698 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80095f0:	4b35      	ldr	r3, [pc, #212]	@ (80096c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	099b      	lsrs	r3, r3, #6
 80095f6:	2200      	movs	r2, #0
 80095f8:	613b      	str	r3, [r7, #16]
 80095fa:	617a      	str	r2, [r7, #20]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009602:	f04f 0b00 	mov.w	fp, #0
 8009606:	4652      	mov	r2, sl
 8009608:	465b      	mov	r3, fp
 800960a:	f04f 0000 	mov.w	r0, #0
 800960e:	f04f 0100 	mov.w	r1, #0
 8009612:	0159      	lsls	r1, r3, #5
 8009614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009618:	0150      	lsls	r0, r2, #5
 800961a:	4602      	mov	r2, r0
 800961c:	460b      	mov	r3, r1
 800961e:	ebb2 080a 	subs.w	r8, r2, sl
 8009622:	eb63 090b 	sbc.w	r9, r3, fp
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	f04f 0300 	mov.w	r3, #0
 800962e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009632:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8009636:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800963a:	ebb2 0408 	subs.w	r4, r2, r8
 800963e:	eb63 0509 	sbc.w	r5, r3, r9
 8009642:	f04f 0200 	mov.w	r2, #0
 8009646:	f04f 0300 	mov.w	r3, #0
 800964a:	00eb      	lsls	r3, r5, #3
 800964c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009650:	00e2      	lsls	r2, r4, #3
 8009652:	4614      	mov	r4, r2
 8009654:	461d      	mov	r5, r3
 8009656:	eb14 030a 	adds.w	r3, r4, sl
 800965a:	603b      	str	r3, [r7, #0]
 800965c:	eb45 030b 	adc.w	r3, r5, fp
 8009660:	607b      	str	r3, [r7, #4]
 8009662:	f04f 0200 	mov.w	r2, #0
 8009666:	f04f 0300 	mov.w	r3, #0
 800966a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800966e:	4629      	mov	r1, r5
 8009670:	028b      	lsls	r3, r1, #10
 8009672:	4621      	mov	r1, r4
 8009674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009678:	4621      	mov	r1, r4
 800967a:	028a      	lsls	r2, r1, #10
 800967c:	4610      	mov	r0, r2
 800967e:	4619      	mov	r1, r3
 8009680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009682:	2200      	movs	r2, #0
 8009684:	60bb      	str	r3, [r7, #8]
 8009686:	60fa      	str	r2, [r7, #12]
 8009688:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800968c:	f7f7 fadc 	bl	8000c48 <__aeabi_uldivmod>
 8009690:	4602      	mov	r2, r0
 8009692:	460b      	mov	r3, r1
 8009694:	4613      	mov	r3, r2
 8009696:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8009698:	4b0b      	ldr	r3, [pc, #44]	@ (80096c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	0c1b      	lsrs	r3, r3, #16
 800969e:	f003 0303 	and.w	r3, r3, #3
 80096a2:	3301      	adds	r3, #1
 80096a4:	005b      	lsls	r3, r3, #1
 80096a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80096a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80096aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80096ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80096b2:	e002      	b.n	80096ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80096b4:	4b05      	ldr	r3, [pc, #20]	@ (80096cc <HAL_RCC_GetSysClockFreq+0x184>)
 80096b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80096b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80096ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3740      	adds	r7, #64	@ 0x40
 80096c0:	46bd      	mov	sp, r7
 80096c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096c6:	bf00      	nop
 80096c8:	40023800 	.word	0x40023800
 80096cc:	00f42400 	.word	0x00f42400
 80096d0:	00b71b00 	.word	0x00b71b00

080096d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80096d8:	4b03      	ldr	r3, [pc, #12]	@ (80096e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80096da:	681b      	ldr	r3, [r3, #0]
}
 80096dc:	4618      	mov	r0, r3
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	2000002c 	.word	0x2000002c

080096ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80096f0:	f7ff fff0 	bl	80096d4 <HAL_RCC_GetHCLKFreq>
 80096f4:	4602      	mov	r2, r0
 80096f6:	4b05      	ldr	r3, [pc, #20]	@ (800970c <HAL_RCC_GetPCLK1Freq+0x20>)
 80096f8:	689b      	ldr	r3, [r3, #8]
 80096fa:	0a9b      	lsrs	r3, r3, #10
 80096fc:	f003 0307 	and.w	r3, r3, #7
 8009700:	4903      	ldr	r1, [pc, #12]	@ (8009710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009702:	5ccb      	ldrb	r3, [r1, r3]
 8009704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009708:	4618      	mov	r0, r3
 800970a:	bd80      	pop	{r7, pc}
 800970c:	40023800 	.word	0x40023800
 8009710:	08011e50 	.word	0x08011e50

08009714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009718:	f7ff ffdc 	bl	80096d4 <HAL_RCC_GetHCLKFreq>
 800971c:	4602      	mov	r2, r0
 800971e:	4b05      	ldr	r3, [pc, #20]	@ (8009734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009720:	689b      	ldr	r3, [r3, #8]
 8009722:	0b5b      	lsrs	r3, r3, #13
 8009724:	f003 0307 	and.w	r3, r3, #7
 8009728:	4903      	ldr	r1, [pc, #12]	@ (8009738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800972a:	5ccb      	ldrb	r3, [r1, r3]
 800972c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009730:	4618      	mov	r0, r3
 8009732:	bd80      	pop	{r7, pc}
 8009734:	40023800 	.word	0x40023800
 8009738:	08011e50 	.word	0x08011e50

0800973c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8009740:	4b06      	ldr	r3, [pc, #24]	@ (800975c <HAL_RCC_NMI_IRQHandler+0x20>)
 8009742:	68db      	ldr	r3, [r3, #12]
 8009744:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009748:	2b80      	cmp	r3, #128	@ 0x80
 800974a:	d104      	bne.n	8009756 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800974c:	f000 f80a 	bl	8009764 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009750:	4b03      	ldr	r3, [pc, #12]	@ (8009760 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009752:	2280      	movs	r2, #128	@ 0x80
 8009754:	701a      	strb	r2, [r3, #0]
  }
}
 8009756:	bf00      	nop
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	40023800 	.word	0x40023800
 8009760:	4002380e 	.word	0x4002380e

08009764 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009764:	b480      	push	{r7}
 8009766:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009772:	b580      	push	{r7, lr}
 8009774:	b082      	sub	sp, #8
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d101      	bne.n	8009784 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009780:	2301      	movs	r3, #1
 8009782:	e07b      	b.n	800987c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009788:	2b00      	cmp	r3, #0
 800978a:	d108      	bne.n	800979e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009794:	d009      	beq.n	80097aa <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	61da      	str	r2, [r3, #28]
 800979c:	e005      	b.n	80097aa <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2200      	movs	r2, #0
 80097ae:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d106      	bne.n	80097ca <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2200      	movs	r2, #0
 80097c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f7fc ff69 	bl	800669c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2202      	movs	r2, #2
 80097ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80097e0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80097f2:	431a      	orrs	r2, r3
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80097fc:	431a      	orrs	r2, r3
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	691b      	ldr	r3, [r3, #16]
 8009802:	f003 0302 	and.w	r3, r3, #2
 8009806:	431a      	orrs	r2, r3
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	695b      	ldr	r3, [r3, #20]
 800980c:	f003 0301 	and.w	r3, r3, #1
 8009810:	431a      	orrs	r2, r3
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800981a:	431a      	orrs	r2, r3
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	69db      	ldr	r3, [r3, #28]
 8009820:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009824:	431a      	orrs	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800982e:	ea42 0103 	orr.w	r1, r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009836:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	430a      	orrs	r2, r1
 8009840:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	699b      	ldr	r3, [r3, #24]
 8009846:	0c1b      	lsrs	r3, r3, #16
 8009848:	f003 0104 	and.w	r1, r3, #4
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009850:	f003 0210 	and.w	r2, r3, #16
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	430a      	orrs	r2, r1
 800985a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	69da      	ldr	r2, [r3, #28]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800986a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2201      	movs	r2, #1
 8009876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800987a:	2300      	movs	r3, #0
}
 800987c:	4618      	mov	r0, r3
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b08a      	sub	sp, #40	@ 0x28
 8009888:	af00      	add	r7, sp, #0
 800988a:	60f8      	str	r0, [r7, #12]
 800988c:	60b9      	str	r1, [r7, #8]
 800988e:	607a      	str	r2, [r7, #4]
 8009890:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009892:	2301      	movs	r3, #1
 8009894:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009896:	f7fd fc55 	bl	8007144 <HAL_GetTick>
 800989a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80098a2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80098aa:	887b      	ldrh	r3, [r7, #2]
 80098ac:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80098ae:	7ffb      	ldrb	r3, [r7, #31]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d00c      	beq.n	80098ce <HAL_SPI_TransmitReceive+0x4a>
 80098b4:	69bb      	ldr	r3, [r7, #24]
 80098b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80098ba:	d106      	bne.n	80098ca <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <HAL_SPI_TransmitReceive+0x46>
 80098c4:	7ffb      	ldrb	r3, [r7, #31]
 80098c6:	2b04      	cmp	r3, #4
 80098c8:	d001      	beq.n	80098ce <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80098ca:	2302      	movs	r3, #2
 80098cc:	e17f      	b.n	8009bce <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d005      	beq.n	80098e0 <HAL_SPI_TransmitReceive+0x5c>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d002      	beq.n	80098e0 <HAL_SPI_TransmitReceive+0x5c>
 80098da:	887b      	ldrh	r3, [r7, #2]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	e174      	b.n	8009bce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d101      	bne.n	80098f2 <HAL_SPI_TransmitReceive+0x6e>
 80098ee:	2302      	movs	r3, #2
 80098f0:	e16d      	b.n	8009bce <HAL_SPI_TransmitReceive+0x34a>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2201      	movs	r2, #1
 80098f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b04      	cmp	r3, #4
 8009904:	d003      	beq.n	800990e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	2205      	movs	r2, #5
 800990a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	887a      	ldrh	r2, [r7, #2]
 800991e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	887a      	ldrh	r2, [r7, #2]
 8009924:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	887a      	ldrh	r2, [r7, #2]
 8009930:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	887a      	ldrh	r2, [r7, #2]
 8009936:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2200      	movs	r2, #0
 800993c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800994e:	2b40      	cmp	r3, #64	@ 0x40
 8009950:	d007      	beq.n	8009962 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800996a:	d17e      	bne.n	8009a6a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	685b      	ldr	r3, [r3, #4]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d002      	beq.n	800997a <HAL_SPI_TransmitReceive+0xf6>
 8009974:	8afb      	ldrh	r3, [r7, #22]
 8009976:	2b01      	cmp	r3, #1
 8009978:	d16c      	bne.n	8009a54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800997e:	881a      	ldrh	r2, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800998a:	1c9a      	adds	r2, r3, #2
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009994:	b29b      	uxth	r3, r3
 8009996:	3b01      	subs	r3, #1
 8009998:	b29a      	uxth	r2, r3
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800999e:	e059      	b.n	8009a54 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	689b      	ldr	r3, [r3, #8]
 80099a6:	f003 0302 	and.w	r3, r3, #2
 80099aa:	2b02      	cmp	r3, #2
 80099ac:	d11b      	bne.n	80099e6 <HAL_SPI_TransmitReceive+0x162>
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d016      	beq.n	80099e6 <HAL_SPI_TransmitReceive+0x162>
 80099b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d113      	bne.n	80099e6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099c2:	881a      	ldrh	r2, [r3, #0]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ce:	1c9a      	adds	r2, r3, #2
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80099d8:	b29b      	uxth	r3, r3
 80099da:	3b01      	subs	r3, #1
 80099dc:	b29a      	uxth	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	f003 0301 	and.w	r3, r3, #1
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d119      	bne.n	8009a28 <HAL_SPI_TransmitReceive+0x1a4>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d014      	beq.n	8009a28 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a08:	b292      	uxth	r2, r2
 8009a0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a10:	1c9a      	adds	r2, r3, #2
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a24:	2301      	movs	r3, #1
 8009a26:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a28:	f7fd fb8c 	bl	8007144 <HAL_GetTick>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	6a3b      	ldr	r3, [r7, #32]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d80d      	bhi.n	8009a54 <HAL_SPI_TransmitReceive+0x1d0>
 8009a38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a3e:	d009      	beq.n	8009a54 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2201      	movs	r2, #1
 8009a44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e0bc      	b.n	8009bce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1a0      	bne.n	80099a0 <HAL_SPI_TransmitReceive+0x11c>
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d19b      	bne.n	80099a0 <HAL_SPI_TransmitReceive+0x11c>
 8009a68:	e082      	b.n	8009b70 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d002      	beq.n	8009a78 <HAL_SPI_TransmitReceive+0x1f4>
 8009a72:	8afb      	ldrh	r3, [r7, #22]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d171      	bne.n	8009b5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	330c      	adds	r3, #12
 8009a82:	7812      	ldrb	r2, [r2, #0]
 8009a84:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	3b01      	subs	r3, #1
 8009a98:	b29a      	uxth	r2, r3
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a9e:	e05d      	b.n	8009b5c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	f003 0302 	and.w	r3, r3, #2
 8009aaa:	2b02      	cmp	r3, #2
 8009aac:	d11c      	bne.n	8009ae8 <HAL_SPI_TransmitReceive+0x264>
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d017      	beq.n	8009ae8 <HAL_SPI_TransmitReceive+0x264>
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d114      	bne.n	8009ae8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	330c      	adds	r3, #12
 8009ac8:	7812      	ldrb	r2, [r2, #0]
 8009aca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad0:	1c5a      	adds	r2, r3, #1
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ada:	b29b      	uxth	r3, r3
 8009adc:	3b01      	subs	r3, #1
 8009ade:	b29a      	uxth	r2, r3
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d119      	bne.n	8009b2a <HAL_SPI_TransmitReceive+0x2a6>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d014      	beq.n	8009b2a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68da      	ldr	r2, [r3, #12]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b0a:	b2d2      	uxtb	r2, r2
 8009b0c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b12:	1c5a      	adds	r2, r3, #1
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b1c:	b29b      	uxth	r3, r3
 8009b1e:	3b01      	subs	r3, #1
 8009b20:	b29a      	uxth	r2, r3
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b26:	2301      	movs	r3, #1
 8009b28:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b2a:	f7fd fb0b 	bl	8007144 <HAL_GetTick>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	6a3b      	ldr	r3, [r7, #32]
 8009b32:	1ad3      	subs	r3, r2, r3
 8009b34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b36:	429a      	cmp	r2, r3
 8009b38:	d803      	bhi.n	8009b42 <HAL_SPI_TransmitReceive+0x2be>
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b40:	d102      	bne.n	8009b48 <HAL_SPI_TransmitReceive+0x2c4>
 8009b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d109      	bne.n	8009b5c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8009b58:	2303      	movs	r3, #3
 8009b5a:	e038      	b.n	8009bce <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d19c      	bne.n	8009aa0 <HAL_SPI_TransmitReceive+0x21c>
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d197      	bne.n	8009aa0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b70:	6a3a      	ldr	r2, [r7, #32]
 8009b72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009b74:	68f8      	ldr	r0, [r7, #12]
 8009b76:	f000 f8b7 	bl	8009ce8 <SPI_EndRxTxTransaction>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d008      	beq.n	8009b92 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2220      	movs	r2, #32
 8009b84:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8009b8e:	2301      	movs	r3, #1
 8009b90:	e01d      	b.n	8009bce <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d10a      	bne.n	8009bb0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	613b      	str	r3, [r7, #16]
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	613b      	str	r3, [r7, #16]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	613b      	str	r3, [r7, #16]
 8009bae:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e000      	b.n	8009bce <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
  }
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3728      	adds	r7, #40	@ 0x28
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b088      	sub	sp, #32
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	603b      	str	r3, [r7, #0]
 8009be4:	4613      	mov	r3, r2
 8009be6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009be8:	f7fd faac 	bl	8007144 <HAL_GetTick>
 8009bec:	4602      	mov	r2, r0
 8009bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bf0:	1a9b      	subs	r3, r3, r2
 8009bf2:	683a      	ldr	r2, [r7, #0]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009bf8:	f7fd faa4 	bl	8007144 <HAL_GetTick>
 8009bfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009bfe:	4b39      	ldr	r3, [pc, #228]	@ (8009ce4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	015b      	lsls	r3, r3, #5
 8009c04:	0d1b      	lsrs	r3, r3, #20
 8009c06:	69fa      	ldr	r2, [r7, #28]
 8009c08:	fb02 f303 	mul.w	r3, r2, r3
 8009c0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c0e:	e055      	b.n	8009cbc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c16:	d051      	beq.n	8009cbc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c18:	f7fd fa94 	bl	8007144 <HAL_GetTick>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	1ad3      	subs	r3, r2, r3
 8009c22:	69fa      	ldr	r2, [r7, #28]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d902      	bls.n	8009c2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d13d      	bne.n	8009caa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	685a      	ldr	r2, [r3, #4]
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009c3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009c46:	d111      	bne.n	8009c6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c50:	d004      	beq.n	8009c5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c5a:	d107      	bne.n	8009c6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009c6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c74:	d10f      	bne.n	8009c96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009c84:	601a      	str	r2, [r3, #0]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	2201      	movs	r2, #1
 8009c9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e018      	b.n	8009cdc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d102      	bne.n	8009cb6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61fb      	str	r3, [r7, #28]
 8009cb4:	e002      	b.n	8009cbc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	689a      	ldr	r2, [r3, #8]
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	68ba      	ldr	r2, [r7, #8]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	bf0c      	ite	eq
 8009ccc:	2301      	moveq	r3, #1
 8009cce:	2300      	movne	r3, #0
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	461a      	mov	r2, r3
 8009cd4:	79fb      	ldrb	r3, [r7, #7]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d19a      	bne.n	8009c10 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3720      	adds	r7, #32
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	2000002c 	.word	0x2000002c

08009ce8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af02      	add	r7, sp, #8
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	60b9      	str	r1, [r7, #8]
 8009cf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	9300      	str	r3, [sp, #0]
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	2102      	movs	r1, #2
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f7ff ff6a 	bl	8009bd8 <SPI_WaitFlagStateUntilTimeout>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d007      	beq.n	8009d1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d0e:	f043 0220 	orr.w	r2, r3, #32
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e032      	b.n	8009d80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8009d88 <SPI_EndRxTxTransaction+0xa0>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8009d8c <SPI_EndRxTxTransaction+0xa4>)
 8009d20:	fba2 2303 	umull	r2, r3, r2, r3
 8009d24:	0d5b      	lsrs	r3, r3, #21
 8009d26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009d2a:	fb02 f303 	mul.w	r3, r2, r3
 8009d2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d38:	d112      	bne.n	8009d60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	9300      	str	r3, [sp, #0]
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2200      	movs	r2, #0
 8009d42:	2180      	movs	r1, #128	@ 0x80
 8009d44:	68f8      	ldr	r0, [r7, #12]
 8009d46:	f7ff ff47 	bl	8009bd8 <SPI_WaitFlagStateUntilTimeout>
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d016      	beq.n	8009d7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d54:	f043 0220 	orr.w	r2, r3, #32
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e00f      	b.n	8009d80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00a      	beq.n	8009d7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	3b01      	subs	r3, #1
 8009d6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d76:	2b80      	cmp	r3, #128	@ 0x80
 8009d78:	d0f2      	beq.n	8009d60 <SPI_EndRxTxTransaction+0x78>
 8009d7a:	e000      	b.n	8009d7e <SPI_EndRxTxTransaction+0x96>
        break;
 8009d7c:	bf00      	nop
  }

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3718      	adds	r7, #24
 8009d84:	46bd      	mov	sp, r7
 8009d86:	bd80      	pop	{r7, pc}
 8009d88:	2000002c 	.word	0x2000002c
 8009d8c:	165e9f81 	.word	0x165e9f81

08009d90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d101      	bne.n	8009da2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e041      	b.n	8009e26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d106      	bne.n	8009dbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7fc fd26 	bl	8006808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	3304      	adds	r3, #4
 8009dcc:	4619      	mov	r1, r3
 8009dce:	4610      	mov	r0, r2
 8009dd0:	f000 fa06 	bl	800a1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2201      	movs	r2, #1
 8009df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2201      	movs	r2, #1
 8009e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2201      	movs	r2, #1
 8009e08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2201      	movs	r2, #1
 8009e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2201      	movs	r2, #1
 8009e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e24:	2300      	movs	r3, #0
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b082      	sub	sp, #8
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d101      	bne.n	8009e40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e041      	b.n	8009ec4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d106      	bne.n	8009e5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f7fc fc89 	bl	800676c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2202      	movs	r2, #2
 8009e5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681a      	ldr	r2, [r3, #0]
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	3304      	adds	r3, #4
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4610      	mov	r0, r2
 8009e6e:	f000 f9b7 	bl	800a1e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2201      	movs	r2, #1
 8009e76:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2201      	movs	r2, #1
 8009e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2201      	movs	r2, #1
 8009eae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3708      	adds	r7, #8
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b086      	sub	sp, #24
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d101      	bne.n	8009eea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009ee6:	2302      	movs	r3, #2
 8009ee8:	e0ae      	b.n	800a048 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b0c      	cmp	r3, #12
 8009ef6:	f200 809f 	bhi.w	800a038 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009efa:	a201      	add	r2, pc, #4	@ (adr r2, 8009f00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f00:	08009f35 	.word	0x08009f35
 8009f04:	0800a039 	.word	0x0800a039
 8009f08:	0800a039 	.word	0x0800a039
 8009f0c:	0800a039 	.word	0x0800a039
 8009f10:	08009f75 	.word	0x08009f75
 8009f14:	0800a039 	.word	0x0800a039
 8009f18:	0800a039 	.word	0x0800a039
 8009f1c:	0800a039 	.word	0x0800a039
 8009f20:	08009fb7 	.word	0x08009fb7
 8009f24:	0800a039 	.word	0x0800a039
 8009f28:	0800a039 	.word	0x0800a039
 8009f2c:	0800a039 	.word	0x0800a039
 8009f30:	08009ff7 	.word	0x08009ff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68b9      	ldr	r1, [r7, #8]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f000 f9f6 	bl	800a32c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	699a      	ldr	r2, [r3, #24]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0208 	orr.w	r2, r2, #8
 8009f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	699a      	ldr	r2, [r3, #24]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f022 0204 	bic.w	r2, r2, #4
 8009f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6999      	ldr	r1, [r3, #24]
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	691a      	ldr	r2, [r3, #16]
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	619a      	str	r2, [r3, #24]
      break;
 8009f72:	e064      	b.n	800a03e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	68b9      	ldr	r1, [r7, #8]
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f000 fa46 	bl	800a40c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	699a      	ldr	r2, [r3, #24]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009f8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	699a      	ldr	r2, [r3, #24]
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009f9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	6999      	ldr	r1, [r3, #24]
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	691b      	ldr	r3, [r3, #16]
 8009faa:	021a      	lsls	r2, r3, #8
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	430a      	orrs	r2, r1
 8009fb2:	619a      	str	r2, [r3, #24]
      break;
 8009fb4:	e043      	b.n	800a03e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68b9      	ldr	r1, [r7, #8]
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f000 fa9b 	bl	800a4f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	69da      	ldr	r2, [r3, #28]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f042 0208 	orr.w	r2, r2, #8
 8009fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69da      	ldr	r2, [r3, #28]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	f022 0204 	bic.w	r2, r2, #4
 8009fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	69d9      	ldr	r1, [r3, #28]
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	691a      	ldr	r2, [r3, #16]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	430a      	orrs	r2, r1
 8009ff2:	61da      	str	r2, [r3, #28]
      break;
 8009ff4:	e023      	b.n	800a03e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68b9      	ldr	r1, [r7, #8]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 faef 	bl	800a5e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	69da      	ldr	r2, [r3, #28]
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a010:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	69da      	ldr	r2, [r3, #28]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a020:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69d9      	ldr	r1, [r3, #28]
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	021a      	lsls	r2, r3, #8
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	61da      	str	r2, [r3, #28]
      break;
 800a036:	e002      	b.n	800a03e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a038:	2301      	movs	r3, #1
 800a03a:	75fb      	strb	r3, [r7, #23]
      break;
 800a03c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2200      	movs	r2, #0
 800a042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a046:	7dfb      	ldrb	r3, [r7, #23]
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3718      	adds	r7, #24
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
 800a058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a064:	2b01      	cmp	r3, #1
 800a066:	d101      	bne.n	800a06c <HAL_TIM_ConfigClockSource+0x1c>
 800a068:	2302      	movs	r3, #2
 800a06a:	e0b4      	b.n	800a1d6 <HAL_TIM_ConfigClockSource+0x186>
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2202      	movs	r2, #2
 800a078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	689b      	ldr	r3, [r3, #8]
 800a082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a08a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a092:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68ba      	ldr	r2, [r7, #8]
 800a09a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0a4:	d03e      	beq.n	800a124 <HAL_TIM_ConfigClockSource+0xd4>
 800a0a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0aa:	f200 8087 	bhi.w	800a1bc <HAL_TIM_ConfigClockSource+0x16c>
 800a0ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0b2:	f000 8086 	beq.w	800a1c2 <HAL_TIM_ConfigClockSource+0x172>
 800a0b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0ba:	d87f      	bhi.n	800a1bc <HAL_TIM_ConfigClockSource+0x16c>
 800a0bc:	2b70      	cmp	r3, #112	@ 0x70
 800a0be:	d01a      	beq.n	800a0f6 <HAL_TIM_ConfigClockSource+0xa6>
 800a0c0:	2b70      	cmp	r3, #112	@ 0x70
 800a0c2:	d87b      	bhi.n	800a1bc <HAL_TIM_ConfigClockSource+0x16c>
 800a0c4:	2b60      	cmp	r3, #96	@ 0x60
 800a0c6:	d050      	beq.n	800a16a <HAL_TIM_ConfigClockSource+0x11a>
 800a0c8:	2b60      	cmp	r3, #96	@ 0x60
 800a0ca:	d877      	bhi.n	800a1bc <HAL_TIM_ConfigClockSource+0x16c>
 800a0cc:	2b50      	cmp	r3, #80	@ 0x50
 800a0ce:	d03c      	beq.n	800a14a <HAL_TIM_ConfigClockSource+0xfa>
 800a0d0:	2b50      	cmp	r3, #80	@ 0x50
 800a0d2:	d873      	bhi.n	800a1bc <HAL_TIM_ConfigClockSource+0x16c>
 800a0d4:	2b40      	cmp	r3, #64	@ 0x40
 800a0d6:	d058      	beq.n	800a18a <HAL_TIM_ConfigClockSource+0x13a>
 800a0d8:	2b40      	cmp	r3, #64	@ 0x40
 800a0da:	d86f      	bhi.n	800a1bc <HAL_TIM_ConfigClockSource+0x16c>
 800a0dc:	2b30      	cmp	r3, #48	@ 0x30
 800a0de:	d064      	beq.n	800a1aa <HAL_TIM_ConfigClockSource+0x15a>
 800a0e0:	2b30      	cmp	r3, #48	@ 0x30
 800a0e2:	d86b      	bhi.n	800a1bc <HAL_TIM_ConfigClockSource+0x16c>
 800a0e4:	2b20      	cmp	r3, #32
 800a0e6:	d060      	beq.n	800a1aa <HAL_TIM_ConfigClockSource+0x15a>
 800a0e8:	2b20      	cmp	r3, #32
 800a0ea:	d867      	bhi.n	800a1bc <HAL_TIM_ConfigClockSource+0x16c>
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d05c      	beq.n	800a1aa <HAL_TIM_ConfigClockSource+0x15a>
 800a0f0:	2b10      	cmp	r3, #16
 800a0f2:	d05a      	beq.n	800a1aa <HAL_TIM_ConfigClockSource+0x15a>
 800a0f4:	e062      	b.n	800a1bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a106:	f000 fb3b 	bl	800a780 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	689b      	ldr	r3, [r3, #8]
 800a110:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a118:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	68ba      	ldr	r2, [r7, #8]
 800a120:	609a      	str	r2, [r3, #8]
      break;
 800a122:	e04f      	b.n	800a1c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a134:	f000 fb24 	bl	800a780 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	689a      	ldr	r2, [r3, #8]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a146:	609a      	str	r2, [r3, #8]
      break;
 800a148:	e03c      	b.n	800a1c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a156:	461a      	mov	r2, r3
 800a158:	f000 fa98 	bl	800a68c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	2150      	movs	r1, #80	@ 0x50
 800a162:	4618      	mov	r0, r3
 800a164:	f000 faf1 	bl	800a74a <TIM_ITRx_SetConfig>
      break;
 800a168:	e02c      	b.n	800a1c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a176:	461a      	mov	r2, r3
 800a178:	f000 fab7 	bl	800a6ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2160      	movs	r1, #96	@ 0x60
 800a182:	4618      	mov	r0, r3
 800a184:	f000 fae1 	bl	800a74a <TIM_ITRx_SetConfig>
      break;
 800a188:	e01c      	b.n	800a1c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a18e:	683b      	ldr	r3, [r7, #0]
 800a190:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a196:	461a      	mov	r2, r3
 800a198:	f000 fa78 	bl	800a68c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2140      	movs	r1, #64	@ 0x40
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 fad1 	bl	800a74a <TIM_ITRx_SetConfig>
      break;
 800a1a8:	e00c      	b.n	800a1c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4619      	mov	r1, r3
 800a1b4:	4610      	mov	r0, r2
 800a1b6:	f000 fac8 	bl	800a74a <TIM_ITRx_SetConfig>
      break;
 800a1ba:	e003      	b.n	800a1c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	73fb      	strb	r3, [r7, #15]
      break;
 800a1c0:	e000      	b.n	800a1c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a1c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2201      	movs	r2, #1
 800a1c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b085      	sub	sp, #20
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	4a43      	ldr	r2, [pc, #268]	@ (800a300 <TIM_Base_SetConfig+0x120>)
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d013      	beq.n	800a220 <TIM_Base_SetConfig+0x40>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1fe:	d00f      	beq.n	800a220 <TIM_Base_SetConfig+0x40>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	4a40      	ldr	r2, [pc, #256]	@ (800a304 <TIM_Base_SetConfig+0x124>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d00b      	beq.n	800a220 <TIM_Base_SetConfig+0x40>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a3f      	ldr	r2, [pc, #252]	@ (800a308 <TIM_Base_SetConfig+0x128>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d007      	beq.n	800a220 <TIM_Base_SetConfig+0x40>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a3e      	ldr	r2, [pc, #248]	@ (800a30c <TIM_Base_SetConfig+0x12c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d003      	beq.n	800a220 <TIM_Base_SetConfig+0x40>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a3d      	ldr	r2, [pc, #244]	@ (800a310 <TIM_Base_SetConfig+0x130>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d108      	bne.n	800a232 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a226:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	68fa      	ldr	r2, [r7, #12]
 800a22e:	4313      	orrs	r3, r2
 800a230:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4a32      	ldr	r2, [pc, #200]	@ (800a300 <TIM_Base_SetConfig+0x120>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d02b      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a240:	d027      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	4a2f      	ldr	r2, [pc, #188]	@ (800a304 <TIM_Base_SetConfig+0x124>)
 800a246:	4293      	cmp	r3, r2
 800a248:	d023      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a2e      	ldr	r2, [pc, #184]	@ (800a308 <TIM_Base_SetConfig+0x128>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d01f      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a2d      	ldr	r2, [pc, #180]	@ (800a30c <TIM_Base_SetConfig+0x12c>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d01b      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a2c      	ldr	r2, [pc, #176]	@ (800a310 <TIM_Base_SetConfig+0x130>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d017      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a2b      	ldr	r2, [pc, #172]	@ (800a314 <TIM_Base_SetConfig+0x134>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d013      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a2a      	ldr	r2, [pc, #168]	@ (800a318 <TIM_Base_SetConfig+0x138>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d00f      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a29      	ldr	r2, [pc, #164]	@ (800a31c <TIM_Base_SetConfig+0x13c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d00b      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a28      	ldr	r2, [pc, #160]	@ (800a320 <TIM_Base_SetConfig+0x140>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d007      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a27      	ldr	r2, [pc, #156]	@ (800a324 <TIM_Base_SetConfig+0x144>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d003      	beq.n	800a292 <TIM_Base_SetConfig+0xb2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a26      	ldr	r2, [pc, #152]	@ (800a328 <TIM_Base_SetConfig+0x148>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d108      	bne.n	800a2a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a298:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	4313      	orrs	r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	689a      	ldr	r2, [r3, #8]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	681a      	ldr	r2, [r3, #0]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a0e      	ldr	r2, [pc, #56]	@ (800a300 <TIM_Base_SetConfig+0x120>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d003      	beq.n	800a2d2 <TIM_Base_SetConfig+0xf2>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	4a10      	ldr	r2, [pc, #64]	@ (800a310 <TIM_Base_SetConfig+0x130>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d103      	bne.n	800a2da <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	691a      	ldr	r2, [r3, #16]
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f043 0204 	orr.w	r2, r3, #4
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2201      	movs	r2, #1
 800a2ea:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	601a      	str	r2, [r3, #0]
}
 800a2f2:	bf00      	nop
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr
 800a2fe:	bf00      	nop
 800a300:	40010000 	.word	0x40010000
 800a304:	40000400 	.word	0x40000400
 800a308:	40000800 	.word	0x40000800
 800a30c:	40000c00 	.word	0x40000c00
 800a310:	40010400 	.word	0x40010400
 800a314:	40014000 	.word	0x40014000
 800a318:	40014400 	.word	0x40014400
 800a31c:	40014800 	.word	0x40014800
 800a320:	40001800 	.word	0x40001800
 800a324:	40001c00 	.word	0x40001c00
 800a328:	40002000 	.word	0x40002000

0800a32c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b087      	sub	sp, #28
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6a1b      	ldr	r3, [r3, #32]
 800a33a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a1b      	ldr	r3, [r3, #32]
 800a340:	f023 0201 	bic.w	r2, r3, #1
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	699b      	ldr	r3, [r3, #24]
 800a352:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a35a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f023 0303 	bic.w	r3, r3, #3
 800a362:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	f023 0302 	bic.w	r3, r3, #2
 800a374:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	689b      	ldr	r3, [r3, #8]
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	4313      	orrs	r3, r2
 800a37e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	4a20      	ldr	r2, [pc, #128]	@ (800a404 <TIM_OC1_SetConfig+0xd8>)
 800a384:	4293      	cmp	r3, r2
 800a386:	d003      	beq.n	800a390 <TIM_OC1_SetConfig+0x64>
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a1f      	ldr	r2, [pc, #124]	@ (800a408 <TIM_OC1_SetConfig+0xdc>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d10c      	bne.n	800a3aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f023 0308 	bic.w	r3, r3, #8
 800a396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a3a2:	697b      	ldr	r3, [r7, #20]
 800a3a4:	f023 0304 	bic.w	r3, r3, #4
 800a3a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	4a15      	ldr	r2, [pc, #84]	@ (800a404 <TIM_OC1_SetConfig+0xd8>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d003      	beq.n	800a3ba <TIM_OC1_SetConfig+0x8e>
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4a14      	ldr	r2, [pc, #80]	@ (800a408 <TIM_OC1_SetConfig+0xdc>)
 800a3b6:	4293      	cmp	r3, r2
 800a3b8:	d111      	bne.n	800a3de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a3c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a3c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	693a      	ldr	r2, [r7, #16]
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	693a      	ldr	r2, [r7, #16]
 800a3e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	68fa      	ldr	r2, [r7, #12]
 800a3e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	685a      	ldr	r2, [r3, #4]
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	621a      	str	r2, [r3, #32]
}
 800a3f8:	bf00      	nop
 800a3fa:	371c      	adds	r7, #28
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr
 800a404:	40010000 	.word	0x40010000
 800a408:	40010400 	.word	0x40010400

0800a40c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a40c:	b480      	push	{r7}
 800a40e:	b087      	sub	sp, #28
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a1b      	ldr	r3, [r3, #32]
 800a420:	f023 0210 	bic.w	r2, r3, #16
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a43a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	021b      	lsls	r3, r3, #8
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	4313      	orrs	r3, r2
 800a44e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	f023 0320 	bic.w	r3, r3, #32
 800a456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	689b      	ldr	r3, [r3, #8]
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	697a      	ldr	r2, [r7, #20]
 800a460:	4313      	orrs	r3, r2
 800a462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a22      	ldr	r2, [pc, #136]	@ (800a4f0 <TIM_OC2_SetConfig+0xe4>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d003      	beq.n	800a474 <TIM_OC2_SetConfig+0x68>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a21      	ldr	r2, [pc, #132]	@ (800a4f4 <TIM_OC2_SetConfig+0xe8>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d10d      	bne.n	800a490 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a474:	697b      	ldr	r3, [r7, #20]
 800a476:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a47a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	011b      	lsls	r3, r3, #4
 800a482:	697a      	ldr	r2, [r7, #20]
 800a484:	4313      	orrs	r3, r2
 800a486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a48e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a17      	ldr	r2, [pc, #92]	@ (800a4f0 <TIM_OC2_SetConfig+0xe4>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d003      	beq.n	800a4a0 <TIM_OC2_SetConfig+0x94>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a16      	ldr	r2, [pc, #88]	@ (800a4f4 <TIM_OC2_SetConfig+0xe8>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d113      	bne.n	800a4c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a4a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a4ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	695b      	ldr	r3, [r3, #20]
 800a4b4:	009b      	lsls	r3, r3, #2
 800a4b6:	693a      	ldr	r2, [r7, #16]
 800a4b8:	4313      	orrs	r3, r2
 800a4ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	693a      	ldr	r2, [r7, #16]
 800a4cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	685a      	ldr	r2, [r3, #4]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	697a      	ldr	r2, [r7, #20]
 800a4e0:	621a      	str	r2, [r3, #32]
}
 800a4e2:	bf00      	nop
 800a4e4:	371c      	adds	r7, #28
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	40010000 	.word	0x40010000
 800a4f4:	40010400 	.word	0x40010400

0800a4f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b087      	sub	sp, #28
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6a1b      	ldr	r3, [r3, #32]
 800a506:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	685b      	ldr	r3, [r3, #4]
 800a518:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69db      	ldr	r3, [r3, #28]
 800a51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f023 0303 	bic.w	r3, r3, #3
 800a52e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	4313      	orrs	r3, r2
 800a538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a540:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	021b      	lsls	r3, r3, #8
 800a548:	697a      	ldr	r2, [r7, #20]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	4a21      	ldr	r2, [pc, #132]	@ (800a5d8 <TIM_OC3_SetConfig+0xe0>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d003      	beq.n	800a55e <TIM_OC3_SetConfig+0x66>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	4a20      	ldr	r2, [pc, #128]	@ (800a5dc <TIM_OC3_SetConfig+0xe4>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d10d      	bne.n	800a57a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a55e:	697b      	ldr	r3, [r7, #20]
 800a560:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a564:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	021b      	lsls	r3, r3, #8
 800a56c:	697a      	ldr	r2, [r7, #20]
 800a56e:	4313      	orrs	r3, r2
 800a570:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a578:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a16      	ldr	r2, [pc, #88]	@ (800a5d8 <TIM_OC3_SetConfig+0xe0>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d003      	beq.n	800a58a <TIM_OC3_SetConfig+0x92>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a15      	ldr	r2, [pc, #84]	@ (800a5dc <TIM_OC3_SetConfig+0xe4>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d113      	bne.n	800a5b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	695b      	ldr	r3, [r3, #20]
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	699b      	ldr	r3, [r3, #24]
 800a5aa:	011b      	lsls	r3, r3, #4
 800a5ac:	693a      	ldr	r2, [r7, #16]
 800a5ae:	4313      	orrs	r3, r2
 800a5b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	693a      	ldr	r2, [r7, #16]
 800a5b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685a      	ldr	r2, [r3, #4]
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	697a      	ldr	r2, [r7, #20]
 800a5ca:	621a      	str	r2, [r3, #32]
}
 800a5cc:	bf00      	nop
 800a5ce:	371c      	adds	r7, #28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr
 800a5d8:	40010000 	.word	0x40010000
 800a5dc:	40010400 	.word	0x40010400

0800a5e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b087      	sub	sp, #28
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
 800a5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	6a1b      	ldr	r3, [r3, #32]
 800a5f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	685b      	ldr	r3, [r3, #4]
 800a600:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a60e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	021b      	lsls	r3, r3, #8
 800a61e:	68fa      	ldr	r2, [r7, #12]
 800a620:	4313      	orrs	r3, r2
 800a622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a62a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	031b      	lsls	r3, r3, #12
 800a632:	693a      	ldr	r2, [r7, #16]
 800a634:	4313      	orrs	r3, r2
 800a636:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	4a12      	ldr	r2, [pc, #72]	@ (800a684 <TIM_OC4_SetConfig+0xa4>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d003      	beq.n	800a648 <TIM_OC4_SetConfig+0x68>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	4a11      	ldr	r2, [pc, #68]	@ (800a688 <TIM_OC4_SetConfig+0xa8>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d109      	bne.n	800a65c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a64e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	019b      	lsls	r3, r3, #6
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4313      	orrs	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	697a      	ldr	r2, [r7, #20]
 800a660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	693a      	ldr	r2, [r7, #16]
 800a674:	621a      	str	r2, [r3, #32]
}
 800a676:	bf00      	nop
 800a678:	371c      	adds	r7, #28
 800a67a:	46bd      	mov	sp, r7
 800a67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a680:	4770      	bx	lr
 800a682:	bf00      	nop
 800a684:	40010000 	.word	0x40010000
 800a688:	40010400 	.word	0x40010400

0800a68c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a68c:	b480      	push	{r7}
 800a68e:	b087      	sub	sp, #28
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6a1b      	ldr	r3, [r3, #32]
 800a69c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6a1b      	ldr	r3, [r3, #32]
 800a6a2:	f023 0201 	bic.w	r2, r3, #1
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	699b      	ldr	r3, [r3, #24]
 800a6ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	011b      	lsls	r3, r3, #4
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	f023 030a 	bic.w	r3, r3, #10
 800a6c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6ca:	697a      	ldr	r2, [r7, #20]
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	693a      	ldr	r2, [r7, #16]
 800a6d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	697a      	ldr	r2, [r7, #20]
 800a6dc:	621a      	str	r2, [r3, #32]
}
 800a6de:	bf00      	nop
 800a6e0:	371c      	adds	r7, #28
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e8:	4770      	bx	lr

0800a6ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6ea:	b480      	push	{r7}
 800a6ec:	b087      	sub	sp, #28
 800a6ee:	af00      	add	r7, sp, #0
 800a6f0:	60f8      	str	r0, [r7, #12]
 800a6f2:	60b9      	str	r1, [r7, #8]
 800a6f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6a1b      	ldr	r3, [r3, #32]
 800a6fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6a1b      	ldr	r3, [r3, #32]
 800a700:	f023 0210 	bic.w	r2, r3, #16
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	699b      	ldr	r3, [r3, #24]
 800a70c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a714:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	031b      	lsls	r3, r3, #12
 800a71a:	693a      	ldr	r2, [r7, #16]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a726:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	697a      	ldr	r2, [r7, #20]
 800a72e:	4313      	orrs	r3, r2
 800a730:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	693a      	ldr	r2, [r7, #16]
 800a736:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	697a      	ldr	r2, [r7, #20]
 800a73c:	621a      	str	r2, [r3, #32]
}
 800a73e:	bf00      	nop
 800a740:	371c      	adds	r7, #28
 800a742:	46bd      	mov	sp, r7
 800a744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a748:	4770      	bx	lr

0800a74a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a74a:	b480      	push	{r7}
 800a74c:	b085      	sub	sp, #20
 800a74e:	af00      	add	r7, sp, #0
 800a750:	6078      	str	r0, [r7, #4]
 800a752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a762:	683a      	ldr	r2, [r7, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4313      	orrs	r3, r2
 800a768:	f043 0307 	orr.w	r3, r3, #7
 800a76c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	609a      	str	r2, [r3, #8]
}
 800a774:	bf00      	nop
 800a776:	3714      	adds	r7, #20
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	60b9      	str	r1, [r7, #8]
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a79a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	021a      	lsls	r2, r3, #8
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	697a      	ldr	r2, [r7, #20]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	697a      	ldr	r2, [r7, #20]
 800a7b2:	609a      	str	r2, [r3, #8]
}
 800a7b4:	bf00      	nop
 800a7b6:	371c      	adds	r7, #28
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7d0:	2b01      	cmp	r3, #1
 800a7d2:	d101      	bne.n	800a7d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	e05a      	b.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	685b      	ldr	r3, [r3, #4]
 800a7ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	689b      	ldr	r3, [r3, #8]
 800a7f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	4313      	orrs	r3, r2
 800a808:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a21      	ldr	r2, [pc, #132]	@ (800a89c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d022      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a824:	d01d      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a1d      	ldr	r2, [pc, #116]	@ (800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d018      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a1b      	ldr	r2, [pc, #108]	@ (800a8a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d013      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a1a      	ldr	r2, [pc, #104]	@ (800a8a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00e      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a18      	ldr	r2, [pc, #96]	@ (800a8ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d009      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a17      	ldr	r2, [pc, #92]	@ (800a8b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d004      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a15      	ldr	r2, [pc, #84]	@ (800a8b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d10c      	bne.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	4313      	orrs	r3, r2
 800a872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	40010000 	.word	0x40010000
 800a8a0:	40000400 	.word	0x40000400
 800a8a4:	40000800 	.word	0x40000800
 800a8a8:	40000c00 	.word	0x40000c00
 800a8ac:	40010400 	.word	0x40010400
 800a8b0:	40014000 	.word	0x40014000
 800a8b4:	40001800 	.word	0x40001800

0800a8b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a8cc:	2b01      	cmp	r3, #1
 800a8ce:	d101      	bne.n	800a8d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a8d0:	2302      	movs	r3, #2
 800a8d2:	e03d      	b.n	800a950 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	68db      	ldr	r3, [r3, #12]
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	689b      	ldr	r3, [r3, #8]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	4313      	orrs	r3, r2
 800a904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4313      	orrs	r3, r2
 800a912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	4313      	orrs	r3, r2
 800a920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	695b      	ldr	r3, [r3, #20]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	69db      	ldr	r3, [r3, #28]
 800a93a:	4313      	orrs	r3, r2
 800a93c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr

0800a95c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d101      	bne.n	800a96e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e042      	b.n	800a9f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b00      	cmp	r3, #0
 800a978:	d106      	bne.n	800a988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2200      	movs	r2, #0
 800a97e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f7fc f874 	bl	8006a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2224      	movs	r2, #36	@ 0x24
 800a98c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a99e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 ffc7 	bl	800b934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	691a      	ldr	r2, [r3, #16]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a9b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	695a      	ldr	r2, [r3, #20]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a9c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	68da      	ldr	r2, [r3, #12]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a9d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2220      	movs	r2, #32
 800a9e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2220      	movs	r2, #32
 800a9e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a9f2:	2300      	movs	r3, #0
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3708      	adds	r7, #8
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b08a      	sub	sp, #40	@ 0x28
 800aa00:	af02      	add	r7, sp, #8
 800aa02:	60f8      	str	r0, [r7, #12]
 800aa04:	60b9      	str	r1, [r7, #8]
 800aa06:	603b      	str	r3, [r7, #0]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b20      	cmp	r3, #32
 800aa1a:	d175      	bne.n	800ab08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d002      	beq.n	800aa28 <HAL_UART_Transmit+0x2c>
 800aa22:	88fb      	ldrh	r3, [r7, #6]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d101      	bne.n	800aa2c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e06e      	b.n	800ab0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2221      	movs	r2, #33	@ 0x21
 800aa36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800aa3a:	f7fc fb83 	bl	8007144 <HAL_GetTick>
 800aa3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	88fa      	ldrh	r2, [r7, #6]
 800aa44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	88fa      	ldrh	r2, [r7, #6]
 800aa4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	689b      	ldr	r3, [r3, #8]
 800aa50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aa54:	d108      	bne.n	800aa68 <HAL_UART_Transmit+0x6c>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	691b      	ldr	r3, [r3, #16]
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d104      	bne.n	800aa68 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	61bb      	str	r3, [r7, #24]
 800aa66:	e003      	b.n	800aa70 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800aa70:	e02e      	b.n	800aad0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	2180      	movs	r1, #128	@ 0x80
 800aa7c:	68f8      	ldr	r0, [r7, #12]
 800aa7e:	f000 fc97 	bl	800b3b0 <UART_WaitOnFlagUntilTimeout>
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d005      	beq.n	800aa94 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	2220      	movs	r2, #32
 800aa8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800aa90:	2303      	movs	r3, #3
 800aa92:	e03a      	b.n	800ab0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800aa94:	69fb      	ldr	r3, [r7, #28]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d10b      	bne.n	800aab2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800aa9a:	69bb      	ldr	r3, [r7, #24]
 800aa9c:	881b      	ldrh	r3, [r3, #0]
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aaa8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800aaaa:	69bb      	ldr	r3, [r7, #24]
 800aaac:	3302      	adds	r3, #2
 800aaae:	61bb      	str	r3, [r7, #24]
 800aab0:	e007      	b.n	800aac2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800aab2:	69fb      	ldr	r3, [r7, #28]
 800aab4:	781a      	ldrb	r2, [r3, #0]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	3301      	adds	r3, #1
 800aac0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	3b01      	subs	r3, #1
 800aaca:	b29a      	uxth	r2, r3
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d1cb      	bne.n	800aa72 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	9300      	str	r3, [sp, #0]
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	2200      	movs	r2, #0
 800aae2:	2140      	movs	r1, #64	@ 0x40
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 fc63 	bl	800b3b0 <UART_WaitOnFlagUntilTimeout>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d005      	beq.n	800aafc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2220      	movs	r2, #32
 800aaf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e006      	b.n	800ab0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	2220      	movs	r2, #32
 800ab00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	e000      	b.n	800ab0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800ab08:	2302      	movs	r3, #2
  }
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	3720      	adds	r7, #32
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}

0800ab12 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab12:	b580      	push	{r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	60b9      	str	r1, [r7, #8]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab26:	b2db      	uxtb	r3, r3
 800ab28:	2b20      	cmp	r3, #32
 800ab2a:	d112      	bne.n	800ab52 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d002      	beq.n	800ab38 <HAL_UART_Receive_DMA+0x26>
 800ab32:	88fb      	ldrh	r3, [r7, #6]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d101      	bne.n	800ab3c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab38:	2301      	movs	r3, #1
 800ab3a:	e00b      	b.n	800ab54 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2200      	movs	r2, #0
 800ab40:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ab42:	88fb      	ldrh	r3, [r7, #6]
 800ab44:	461a      	mov	r2, r3
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f000 fc8b 	bl	800b464 <UART_Start_Receive_DMA>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	e000      	b.n	800ab54 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800ab52:	2302      	movs	r3, #2
  }
}
 800ab54:	4618      	mov	r0, r3
 800ab56:	3710      	adds	r7, #16
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08c      	sub	sp, #48	@ 0x30
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	4613      	mov	r3, r2
 800ab68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b20      	cmp	r3, #32
 800ab74:	d146      	bne.n	800ac04 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800ab7c:	88fb      	ldrh	r3, [r7, #6]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d101      	bne.n	800ab86 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e03f      	b.n	800ac06 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	461a      	mov	r2, r3
 800ab96:	68b9      	ldr	r1, [r7, #8]
 800ab98:	68f8      	ldr	r0, [r7, #12]
 800ab9a:	f000 fc63 	bl	800b464 <UART_Start_Receive_DMA>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d125      	bne.n	800abf8 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800abac:	2300      	movs	r3, #0
 800abae:	613b      	str	r3, [r7, #16]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	613b      	str	r3, [r7, #16]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	613b      	str	r3, [r7, #16]
 800abc0:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	330c      	adds	r3, #12
 800abc8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	e853 3f00 	ldrex	r3, [r3]
 800abd0:	617b      	str	r3, [r7, #20]
   return(result);
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f043 0310 	orr.w	r3, r3, #16
 800abd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	330c      	adds	r3, #12
 800abe0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abe2:	627a      	str	r2, [r7, #36]	@ 0x24
 800abe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abe6:	6a39      	ldr	r1, [r7, #32]
 800abe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800abea:	e841 2300 	strex	r3, r2, [r1]
 800abee:	61fb      	str	r3, [r7, #28]
   return(result);
 800abf0:	69fb      	ldr	r3, [r7, #28]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d1e5      	bne.n	800abc2 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800abf6:	e002      	b.n	800abfe <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 800abf8:	2301      	movs	r3, #1
 800abfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800abfe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ac02:	e000      	b.n	800ac06 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800ac04:	2302      	movs	r3, #2
  }
}
 800ac06:	4618      	mov	r0, r3
 800ac08:	3730      	adds	r7, #48	@ 0x30
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	bd80      	pop	{r7, pc}
	...

0800ac10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b0ba      	sub	sp, #232	@ 0xe8
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	68db      	ldr	r3, [r3, #12]
 800ac28:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800ac36:	2300      	movs	r3, #0
 800ac38:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ac42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac46:	f003 030f 	and.w	r3, r3, #15
 800ac4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800ac4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10f      	bne.n	800ac76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ac56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac5a:	f003 0320 	and.w	r3, r3, #32
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d009      	beq.n	800ac76 <HAL_UART_IRQHandler+0x66>
 800ac62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac66:	f003 0320 	and.w	r3, r3, #32
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d003      	beq.n	800ac76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 fda2 	bl	800b7b8 <UART_Receive_IT>
      return;
 800ac74:	e273      	b.n	800b15e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ac76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 80de 	beq.w	800ae3c <HAL_UART_IRQHandler+0x22c>
 800ac80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ac84:	f003 0301 	and.w	r3, r3, #1
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d106      	bne.n	800ac9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ac8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac90:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 80d1 	beq.w	800ae3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ac9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac9e:	f003 0301 	and.w	r3, r3, #1
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00b      	beq.n	800acbe <HAL_UART_IRQHandler+0xae>
 800aca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800acaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d005      	beq.n	800acbe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acb6:	f043 0201 	orr.w	r2, r3, #1
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800acbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800acc2:	f003 0304 	and.w	r3, r3, #4
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00b      	beq.n	800ace2 <HAL_UART_IRQHandler+0xd2>
 800acca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acce:	f003 0301 	and.w	r3, r3, #1
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d005      	beq.n	800ace2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acda:	f043 0202 	orr.w	r2, r3, #2
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ace2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ace6:	f003 0302 	and.w	r3, r3, #2
 800acea:	2b00      	cmp	r3, #0
 800acec:	d00b      	beq.n	800ad06 <HAL_UART_IRQHandler+0xf6>
 800acee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d005      	beq.n	800ad06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acfe:	f043 0204 	orr.w	r2, r3, #4
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ad06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad0a:	f003 0308 	and.w	r3, r3, #8
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d011      	beq.n	800ad36 <HAL_UART_IRQHandler+0x126>
 800ad12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad16:	f003 0320 	and.w	r3, r3, #32
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d105      	bne.n	800ad2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ad1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ad22:	f003 0301 	and.w	r3, r3, #1
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d005      	beq.n	800ad36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad2e:	f043 0208 	orr.w	r2, r3, #8
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 820a 	beq.w	800b154 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ad44:	f003 0320 	and.w	r3, r3, #32
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d008      	beq.n	800ad5e <HAL_UART_IRQHandler+0x14e>
 800ad4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ad50:	f003 0320 	and.w	r3, r3, #32
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d002      	beq.n	800ad5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 fd2d 	bl	800b7b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	695b      	ldr	r3, [r3, #20]
 800ad64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad68:	2b40      	cmp	r3, #64	@ 0x40
 800ad6a:	bf0c      	ite	eq
 800ad6c:	2301      	moveq	r3, #1
 800ad6e:	2300      	movne	r3, #0
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad7a:	f003 0308 	and.w	r3, r3, #8
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d103      	bne.n	800ad8a <HAL_UART_IRQHandler+0x17a>
 800ad82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d04f      	beq.n	800ae2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fc38 	bl	800b600 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	695b      	ldr	r3, [r3, #20]
 800ad96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad9a:	2b40      	cmp	r3, #64	@ 0x40
 800ad9c:	d141      	bne.n	800ae22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	3314      	adds	r3, #20
 800ada4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800adac:	e853 3f00 	ldrex	r3, [r3]
 800adb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800adb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800adb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800adbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	3314      	adds	r3, #20
 800adc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800adca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800adce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800add6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800adda:	e841 2300 	strex	r3, r2, [r1]
 800adde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800ade2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d1d9      	bne.n	800ad9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d013      	beq.n	800ae1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adf6:	4a8a      	ldr	r2, [pc, #552]	@ (800b020 <HAL_UART_IRQHandler+0x410>)
 800adf8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fd fa9a 	bl	8008338 <HAL_DMA_Abort_IT>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d016      	beq.n	800ae38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ae14:	4610      	mov	r0, r2
 800ae16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae18:	e00e      	b.n	800ae38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f9c0 	bl	800b1a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae20:	e00a      	b.n	800ae38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 f9bc 	bl	800b1a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae28:	e006      	b.n	800ae38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f9b8 	bl	800b1a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800ae36:	e18d      	b.n	800b154 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae38:	bf00      	nop
    return;
 800ae3a:	e18b      	b.n	800b154 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	f040 8167 	bne.w	800b114 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800ae46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ae4a:	f003 0310 	and.w	r3, r3, #16
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	f000 8160 	beq.w	800b114 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800ae54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ae58:	f003 0310 	and.w	r3, r3, #16
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	f000 8159 	beq.w	800b114 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ae62:	2300      	movs	r3, #0
 800ae64:	60bb      	str	r3, [r7, #8]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	60bb      	str	r3, [r7, #8]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	685b      	ldr	r3, [r3, #4]
 800ae74:	60bb      	str	r3, [r7, #8]
 800ae76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	695b      	ldr	r3, [r3, #20]
 800ae7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae82:	2b40      	cmp	r3, #64	@ 0x40
 800ae84:	f040 80ce 	bne.w	800b024 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ae94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	f000 80a9 	beq.w	800aff0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aea2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aea6:	429a      	cmp	r2, r3
 800aea8:	f080 80a2 	bcs.w	800aff0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aeb2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aebe:	f000 8088 	beq.w	800afd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	330c      	adds	r3, #12
 800aec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aecc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800aed0:	e853 3f00 	ldrex	r3, [r3]
 800aed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800aed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800aedc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800aee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	330c      	adds	r3, #12
 800aeea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800aeee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800aef2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aef6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800aefa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800aefe:	e841 2300 	strex	r3, r2, [r1]
 800af02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800af06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1d9      	bne.n	800aec2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3314      	adds	r3, #20
 800af14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af18:	e853 3f00 	ldrex	r3, [r3]
 800af1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800af1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af20:	f023 0301 	bic.w	r3, r3, #1
 800af24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	3314      	adds	r3, #20
 800af2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800af32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800af36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800af3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800af3e:	e841 2300 	strex	r3, r2, [r1]
 800af42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800af44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af46:	2b00      	cmp	r3, #0
 800af48:	d1e1      	bne.n	800af0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	3314      	adds	r3, #20
 800af50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800af54:	e853 3f00 	ldrex	r3, [r3]
 800af58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800af5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800af5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	3314      	adds	r3, #20
 800af6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800af6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800af70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800af74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800af76:	e841 2300 	strex	r3, r2, [r1]
 800af7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800af7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d1e3      	bne.n	800af4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2220      	movs	r2, #32
 800af86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2200      	movs	r2, #0
 800af8e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	330c      	adds	r3, #12
 800af96:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af9a:	e853 3f00 	ldrex	r3, [r3]
 800af9e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800afa0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800afa2:	f023 0310 	bic.w	r3, r3, #16
 800afa6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	330c      	adds	r3, #12
 800afb0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800afb4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800afb6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800afba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800afbc:	e841 2300 	strex	r3, r2, [r1]
 800afc0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800afc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1e3      	bne.n	800af90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800afcc:	4618      	mov	r0, r3
 800afce:	f7fd f943 	bl	8008258 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2202      	movs	r2, #2
 800afd6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	1ad3      	subs	r3, r2, r3
 800afe4:	b29b      	uxth	r3, r3
 800afe6:	4619      	mov	r1, r3
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f7f8 fb2b 	bl	8003644 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800afee:	e0b3      	b.n	800b158 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800aff4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800aff8:	429a      	cmp	r2, r3
 800affa:	f040 80ad 	bne.w	800b158 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b002:	69db      	ldr	r3, [r3, #28]
 800b004:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b008:	f040 80a6 	bne.w	800b158 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2202      	movs	r2, #2
 800b010:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b016:	4619      	mov	r1, r3
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	f7f8 fb13 	bl	8003644 <HAL_UARTEx_RxEventCallback>
      return;
 800b01e:	e09b      	b.n	800b158 <HAL_UART_IRQHandler+0x548>
 800b020:	0800b6c7 	.word	0x0800b6c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	1ad3      	subs	r3, r2, r3
 800b030:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b038:	b29b      	uxth	r3, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f000 808e 	beq.w	800b15c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800b040:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b044:	2b00      	cmp	r3, #0
 800b046:	f000 8089 	beq.w	800b15c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	330c      	adds	r3, #12
 800b050:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b05a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b05c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b060:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	330c      	adds	r3, #12
 800b06a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800b06e:	647a      	str	r2, [r7, #68]	@ 0x44
 800b070:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b072:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b074:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b076:	e841 2300 	strex	r3, r2, [r1]
 800b07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b07c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1e3      	bne.n	800b04a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3314      	adds	r3, #20
 800b088:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b08c:	e853 3f00 	ldrex	r3, [r3]
 800b090:	623b      	str	r3, [r7, #32]
   return(result);
 800b092:	6a3b      	ldr	r3, [r7, #32]
 800b094:	f023 0301 	bic.w	r3, r3, #1
 800b098:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	3314      	adds	r3, #20
 800b0a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b0a6:	633a      	str	r2, [r7, #48]	@ 0x30
 800b0a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0ae:	e841 2300 	strex	r3, r2, [r1]
 800b0b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d1e3      	bne.n	800b082 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2220      	movs	r2, #32
 800b0be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2200      	movs	r2, #0
 800b0c6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	330c      	adds	r3, #12
 800b0ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d0:	693b      	ldr	r3, [r7, #16]
 800b0d2:	e853 3f00 	ldrex	r3, [r3]
 800b0d6:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 0310 	bic.w	r3, r3, #16
 800b0de:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	330c      	adds	r3, #12
 800b0e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800b0ec:	61fa      	str	r2, [r7, #28]
 800b0ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f0:	69b9      	ldr	r1, [r7, #24]
 800b0f2:	69fa      	ldr	r2, [r7, #28]
 800b0f4:	e841 2300 	strex	r3, r2, [r1]
 800b0f8:	617b      	str	r3, [r7, #20]
   return(result);
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d1e3      	bne.n	800b0c8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2202      	movs	r2, #2
 800b104:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b106:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b10a:	4619      	mov	r1, r3
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f7f8 fa99 	bl	8003644 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b112:	e023      	b.n	800b15c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d009      	beq.n	800b134 <HAL_UART_IRQHandler+0x524>
 800b120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d003      	beq.n	800b134 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f000 fadb 	bl	800b6e8 <UART_Transmit_IT>
    return;
 800b132:	e014      	b.n	800b15e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d00e      	beq.n	800b15e <HAL_UART_IRQHandler+0x54e>
 800b140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d008      	beq.n	800b15e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f000 fb1b 	bl	800b788 <UART_EndTransmit_IT>
    return;
 800b152:	e004      	b.n	800b15e <HAL_UART_IRQHandler+0x54e>
    return;
 800b154:	bf00      	nop
 800b156:	e002      	b.n	800b15e <HAL_UART_IRQHandler+0x54e>
      return;
 800b158:	bf00      	nop
 800b15a:	e000      	b.n	800b15e <HAL_UART_IRQHandler+0x54e>
      return;
 800b15c:	bf00      	nop
  }
}
 800b15e:	37e8      	adds	r7, #232	@ 0xe8
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b164:	b480      	push	{r7}
 800b166:	b083      	sub	sp, #12
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b16c:	bf00      	nop
 800b16e:	370c      	adds	r7, #12
 800b170:	46bd      	mov	sp, r7
 800b172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b176:	4770      	bx	lr

0800b178 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b180:	bf00      	nop
 800b182:	370c      	adds	r7, #12
 800b184:	46bd      	mov	sp, r7
 800b186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18a:	4770      	bx	lr

0800b18c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b083      	sub	sp, #12
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b194:	bf00      	nop
 800b196:	370c      	adds	r7, #12
 800b198:	46bd      	mov	sp, r7
 800b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19e:	4770      	bx	lr

0800b1a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b1a0:	b480      	push	{r7}
 800b1a2:	b083      	sub	sp, #12
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b1a8:	bf00      	nop
 800b1aa:	370c      	adds	r7, #12
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b2:	4770      	bx	lr

0800b1b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b09c      	sub	sp, #112	@ 0x70
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d172      	bne.n	800b2b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800b1d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	330c      	adds	r3, #12
 800b1dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1e0:	e853 3f00 	ldrex	r3, [r3]
 800b1e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b1ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	330c      	adds	r3, #12
 800b1f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b1f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 800b1f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1fe:	e841 2300 	strex	r3, r2, [r1]
 800b202:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b204:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1e5      	bne.n	800b1d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b20a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	3314      	adds	r3, #20
 800b210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b214:	e853 3f00 	ldrex	r3, [r3]
 800b218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b21c:	f023 0301 	bic.w	r3, r3, #1
 800b220:	667b      	str	r3, [r7, #100]	@ 0x64
 800b222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3314      	adds	r3, #20
 800b228:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b22a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b22c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b232:	e841 2300 	strex	r3, r2, [r1]
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d1e5      	bne.n	800b20a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b23e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3314      	adds	r3, #20
 800b244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b248:	e853 3f00 	ldrex	r3, [r3]
 800b24c:	623b      	str	r3, [r7, #32]
   return(result);
 800b24e:	6a3b      	ldr	r3, [r7, #32]
 800b250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b254:	663b      	str	r3, [r7, #96]	@ 0x60
 800b256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	3314      	adds	r3, #20
 800b25c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b25e:	633a      	str	r2, [r7, #48]	@ 0x30
 800b260:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b262:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b266:	e841 2300 	strex	r3, r2, [r1]
 800b26a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b26c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1e5      	bne.n	800b23e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b272:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b274:	2220      	movs	r2, #32
 800b276:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b27a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b27c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b27e:	2b01      	cmp	r3, #1
 800b280:	d119      	bne.n	800b2b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	330c      	adds	r3, #12
 800b288:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b28a:	693b      	ldr	r3, [r7, #16]
 800b28c:	e853 3f00 	ldrex	r3, [r3]
 800b290:	60fb      	str	r3, [r7, #12]
   return(result);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f023 0310 	bic.w	r3, r3, #16
 800b298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b29a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	330c      	adds	r3, #12
 800b2a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b2a2:	61fa      	str	r2, [r7, #28]
 800b2a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	69b9      	ldr	r1, [r7, #24]
 800b2a8:	69fa      	ldr	r2, [r7, #28]
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	617b      	str	r3, [r7, #20]
   return(result);
 800b2b0:	697b      	ldr	r3, [r7, #20]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e5      	bne.n	800b282 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d106      	bne.n	800b2d2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b2cc:	f7f8 f9ba 	bl	8003644 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2d0:	e002      	b.n	800b2d8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800b2d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b2d4:	f7ff ff50 	bl	800b178 <HAL_UART_RxCpltCallback>
}
 800b2d8:	bf00      	nop
 800b2da:	3770      	adds	r7, #112	@ 0x70
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}

0800b2e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	2201      	movs	r2, #1
 800b2f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d108      	bne.n	800b30e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b300:	085b      	lsrs	r3, r3, #1
 800b302:	b29b      	uxth	r3, r3
 800b304:	4619      	mov	r1, r3
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7f8 f99c 	bl	8003644 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b30c:	e002      	b.n	800b314 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	f7ff ff3c 	bl	800b18c <HAL_UART_RxHalfCpltCallback>
}
 800b314:	bf00      	nop
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b324:	2300      	movs	r3, #0
 800b326:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b32c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b32e:	68bb      	ldr	r3, [r7, #8]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b338:	2b80      	cmp	r3, #128	@ 0x80
 800b33a:	bf0c      	ite	eq
 800b33c:	2301      	moveq	r3, #1
 800b33e:	2300      	movne	r3, #0
 800b340:	b2db      	uxtb	r3, r3
 800b342:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b34a:	b2db      	uxtb	r3, r3
 800b34c:	2b21      	cmp	r3, #33	@ 0x21
 800b34e:	d108      	bne.n	800b362 <UART_DMAError+0x46>
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d005      	beq.n	800b362 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2200      	movs	r2, #0
 800b35a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800b35c:	68b8      	ldr	r0, [r7, #8]
 800b35e:	f000 f927 	bl	800b5b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	695b      	ldr	r3, [r3, #20]
 800b368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b36c:	2b40      	cmp	r3, #64	@ 0x40
 800b36e:	bf0c      	ite	eq
 800b370:	2301      	moveq	r3, #1
 800b372:	2300      	movne	r3, #0
 800b374:	b2db      	uxtb	r3, r3
 800b376:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b37e:	b2db      	uxtb	r3, r3
 800b380:	2b22      	cmp	r3, #34	@ 0x22
 800b382:	d108      	bne.n	800b396 <UART_DMAError+0x7a>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d005      	beq.n	800b396 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	2200      	movs	r2, #0
 800b38e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800b390:	68b8      	ldr	r0, [r7, #8]
 800b392:	f000 f935 	bl	800b600 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b39a:	f043 0210 	orr.w	r2, r3, #16
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3a2:	68b8      	ldr	r0, [r7, #8]
 800b3a4:	f7ff fefc 	bl	800b1a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3a8:	bf00      	nop
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	603b      	str	r3, [r7, #0]
 800b3bc:	4613      	mov	r3, r2
 800b3be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b3c0:	e03b      	b.n	800b43a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b3c2:	6a3b      	ldr	r3, [r7, #32]
 800b3c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b3c8:	d037      	beq.n	800b43a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3ca:	f7fb febb 	bl	8007144 <HAL_GetTick>
 800b3ce:	4602      	mov	r2, r0
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	1ad3      	subs	r3, r2, r3
 800b3d4:	6a3a      	ldr	r2, [r7, #32]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d302      	bcc.n	800b3e0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e03a      	b.n	800b45a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	68db      	ldr	r3, [r3, #12]
 800b3ea:	f003 0304 	and.w	r3, r3, #4
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d023      	beq.n	800b43a <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	2b80      	cmp	r3, #128	@ 0x80
 800b3f6:	d020      	beq.n	800b43a <UART_WaitOnFlagUntilTimeout+0x8a>
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b40      	cmp	r3, #64	@ 0x40
 800b3fc:	d01d      	beq.n	800b43a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 0308 	and.w	r3, r3, #8
 800b408:	2b08      	cmp	r3, #8
 800b40a:	d116      	bne.n	800b43a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800b40c:	2300      	movs	r3, #0
 800b40e:	617b      	str	r3, [r7, #20]
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	617b      	str	r3, [r7, #20]
 800b420:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	f000 f8ec 	bl	800b600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2208      	movs	r2, #8
 800b42c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	2200      	movs	r2, #0
 800b432:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b436:	2301      	movs	r3, #1
 800b438:	e00f      	b.n	800b45a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	681a      	ldr	r2, [r3, #0]
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	4013      	ands	r3, r2
 800b444:	68ba      	ldr	r2, [r7, #8]
 800b446:	429a      	cmp	r2, r3
 800b448:	bf0c      	ite	eq
 800b44a:	2301      	moveq	r3, #1
 800b44c:	2300      	movne	r3, #0
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	461a      	mov	r2, r3
 800b452:	79fb      	ldrb	r3, [r7, #7]
 800b454:	429a      	cmp	r2, r3
 800b456:	d0b4      	beq.n	800b3c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
	...

0800b464 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b098      	sub	sp, #96	@ 0x60
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	4613      	mov	r3, r2
 800b470:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	88fa      	ldrh	r2, [r7, #6]
 800b47c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2200      	movs	r2, #0
 800b482:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2222      	movs	r2, #34	@ 0x22
 800b488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b490:	4a44      	ldr	r2, [pc, #272]	@ (800b5a4 <UART_Start_Receive_DMA+0x140>)
 800b492:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b498:	4a43      	ldr	r2, [pc, #268]	@ (800b5a8 <UART_Start_Receive_DMA+0x144>)
 800b49a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a0:	4a42      	ldr	r2, [pc, #264]	@ (800b5ac <UART_Start_Receive_DMA+0x148>)
 800b4a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b4ac:	f107 0308 	add.w	r3, r7, #8
 800b4b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	88fb      	ldrh	r3, [r7, #6]
 800b4c4:	f7fc fe70 	bl	80081a8 <HAL_DMA_Start_IT>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d008      	beq.n	800b4e0 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2210      	movs	r2, #16
 800b4d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	2220      	movs	r2, #32
 800b4d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	e05d      	b.n	800b59c <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	613b      	str	r3, [r7, #16]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	613b      	str	r3, [r7, #16]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	685b      	ldr	r3, [r3, #4]
 800b4f2:	613b      	str	r3, [r7, #16]
 800b4f4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	691b      	ldr	r3, [r3, #16]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d019      	beq.n	800b532 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	330c      	adds	r3, #12
 800b504:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b508:	e853 3f00 	ldrex	r3, [r3]
 800b50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b50e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b514:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	330c      	adds	r3, #12
 800b51c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b51e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800b520:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b522:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800b524:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b526:	e841 2300 	strex	r3, r2, [r1]
 800b52a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800b52c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d1e5      	bne.n	800b4fe <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3314      	adds	r3, #20
 800b538:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b53c:	e853 3f00 	ldrex	r3, [r3]
 800b540:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b544:	f043 0301 	orr.w	r3, r3, #1
 800b548:	657b      	str	r3, [r7, #84]	@ 0x54
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	3314      	adds	r3, #20
 800b550:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b552:	63ba      	str	r2, [r7, #56]	@ 0x38
 800b554:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b556:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b558:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b55a:	e841 2300 	strex	r3, r2, [r1]
 800b55e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1e5      	bne.n	800b532 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3314      	adds	r3, #20
 800b56c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56e:	69bb      	ldr	r3, [r7, #24]
 800b570:	e853 3f00 	ldrex	r3, [r3]
 800b574:	617b      	str	r3, [r7, #20]
   return(result);
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b57c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	3314      	adds	r3, #20
 800b584:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b586:	627a      	str	r2, [r7, #36]	@ 0x24
 800b588:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6a39      	ldr	r1, [r7, #32]
 800b58c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	61fb      	str	r3, [r7, #28]
   return(result);
 800b594:	69fb      	ldr	r3, [r7, #28]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e5      	bne.n	800b566 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3760      	adds	r7, #96	@ 0x60
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}
 800b5a4:	0800b1b5 	.word	0x0800b1b5
 800b5a8:	0800b2e1 	.word	0x0800b2e1
 800b5ac:	0800b31d 	.word	0x0800b31d

0800b5b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b089      	sub	sp, #36	@ 0x24
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	330c      	adds	r3, #12
 800b5be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	e853 3f00 	ldrex	r3, [r3]
 800b5c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b5ce:	61fb      	str	r3, [r7, #28]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	330c      	adds	r3, #12
 800b5d6:	69fa      	ldr	r2, [r7, #28]
 800b5d8:	61ba      	str	r2, [r7, #24]
 800b5da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5dc:	6979      	ldr	r1, [r7, #20]
 800b5de:	69ba      	ldr	r2, [r7, #24]
 800b5e0:	e841 2300 	strex	r3, r2, [r1]
 800b5e4:	613b      	str	r3, [r7, #16]
   return(result);
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1e5      	bne.n	800b5b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2220      	movs	r2, #32
 800b5f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800b5f4:	bf00      	nop
 800b5f6:	3724      	adds	r7, #36	@ 0x24
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b600:	b480      	push	{r7}
 800b602:	b095      	sub	sp, #84	@ 0x54
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	330c      	adds	r3, #12
 800b60e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b612:	e853 3f00 	ldrex	r3, [r3]
 800b616:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b61e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	330c      	adds	r3, #12
 800b626:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b628:	643a      	str	r2, [r7, #64]	@ 0x40
 800b62a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b62c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b62e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b630:	e841 2300 	strex	r3, r2, [r1]
 800b634:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1e5      	bne.n	800b608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3314      	adds	r3, #20
 800b642:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b644:	6a3b      	ldr	r3, [r7, #32]
 800b646:	e853 3f00 	ldrex	r3, [r3]
 800b64a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	f023 0301 	bic.w	r3, r3, #1
 800b652:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	3314      	adds	r3, #20
 800b65a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b65c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b65e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b660:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b662:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b664:	e841 2300 	strex	r3, r2, [r1]
 800b668:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b66a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1e5      	bne.n	800b63c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b674:	2b01      	cmp	r3, #1
 800b676:	d119      	bne.n	800b6ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	330c      	adds	r3, #12
 800b67e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	e853 3f00 	ldrex	r3, [r3]
 800b686:	60bb      	str	r3, [r7, #8]
   return(result);
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	f023 0310 	bic.w	r3, r3, #16
 800b68e:	647b      	str	r3, [r7, #68]	@ 0x44
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	330c      	adds	r3, #12
 800b696:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b698:	61ba      	str	r2, [r7, #24]
 800b69a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b69c:	6979      	ldr	r1, [r7, #20]
 800b69e:	69ba      	ldr	r2, [r7, #24]
 800b6a0:	e841 2300 	strex	r3, r2, [r1]
 800b6a4:	613b      	str	r3, [r7, #16]
   return(result);
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d1e5      	bne.n	800b678 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2220      	movs	r2, #32
 800b6b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800b6ba:	bf00      	nop
 800b6bc:	3754      	adds	r7, #84	@ 0x54
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b6c6:	b580      	push	{r7, lr}
 800b6c8:	b084      	sub	sp, #16
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	f7ff fd60 	bl	800b1a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6e0:	bf00      	nop
 800b6e2:	3710      	adds	r7, #16
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6f6:	b2db      	uxtb	r3, r3
 800b6f8:	2b21      	cmp	r3, #33	@ 0x21
 800b6fa:	d13e      	bne.n	800b77a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b704:	d114      	bne.n	800b730 <UART_Transmit_IT+0x48>
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	691b      	ldr	r3, [r3, #16]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d110      	bne.n	800b730 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b722:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6a1b      	ldr	r3, [r3, #32]
 800b728:	1c9a      	adds	r2, r3, #2
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	621a      	str	r2, [r3, #32]
 800b72e:	e008      	b.n	800b742 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6a1b      	ldr	r3, [r3, #32]
 800b734:	1c59      	adds	r1, r3, #1
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	6211      	str	r1, [r2, #32]
 800b73a:	781a      	ldrb	r2, [r3, #0]
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800b746:	b29b      	uxth	r3, r3
 800b748:	3b01      	subs	r3, #1
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	687a      	ldr	r2, [r7, #4]
 800b74e:	4619      	mov	r1, r3
 800b750:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10f      	bne.n	800b776 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	68da      	ldr	r2, [r3, #12]
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b764:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	68da      	ldr	r2, [r3, #12]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b774:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b776:	2300      	movs	r3, #0
 800b778:	e000      	b.n	800b77c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b77a:	2302      	movs	r3, #2
  }
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3714      	adds	r7, #20
 800b780:	46bd      	mov	sp, r7
 800b782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b786:	4770      	bx	lr

0800b788 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b082      	sub	sp, #8
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68da      	ldr	r2, [r3, #12]
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b79e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b7a8:	6878      	ldr	r0, [r7, #4]
 800b7aa:	f7ff fcdb 	bl	800b164 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b08c      	sub	sp, #48	@ 0x30
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	2b22      	cmp	r3, #34	@ 0x22
 800b7d2:	f040 80aa 	bne.w	800b92a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7de:	d115      	bne.n	800b80c <UART_Receive_IT+0x54>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	691b      	ldr	r3, [r3, #16]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d111      	bne.n	800b80c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	685b      	ldr	r3, [r3, #4]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7fa:	b29a      	uxth	r2, r3
 800b7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7fe:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b804:	1c9a      	adds	r2, r3, #2
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	629a      	str	r2, [r3, #40]	@ 0x28
 800b80a:	e024      	b.n	800b856 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b810:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b81a:	d007      	beq.n	800b82c <UART_Receive_IT+0x74>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10a      	bne.n	800b83a <UART_Receive_IT+0x82>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d106      	bne.n	800b83a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	b2da      	uxtb	r2, r3
 800b834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b836:	701a      	strb	r2, [r3, #0]
 800b838:	e008      	b.n	800b84c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	685b      	ldr	r3, [r3, #4]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b846:	b2da      	uxtb	r2, r3
 800b848:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b84a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b850:	1c5a      	adds	r2, r3, #1
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	3b01      	subs	r3, #1
 800b85e:	b29b      	uxth	r3, r3
 800b860:	687a      	ldr	r2, [r7, #4]
 800b862:	4619      	mov	r1, r3
 800b864:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800b866:	2b00      	cmp	r3, #0
 800b868:	d15d      	bne.n	800b926 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	68da      	ldr	r2, [r3, #12]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	f022 0220 	bic.w	r2, r2, #32
 800b878:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68da      	ldr	r2, [r3, #12]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b888:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	695a      	ldr	r2, [r3, #20]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f022 0201 	bic.w	r2, r2, #1
 800b898:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2220      	movs	r2, #32
 800b89e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d135      	bne.n	800b91c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	330c      	adds	r3, #12
 800b8bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	e853 3f00 	ldrex	r3, [r3]
 800b8c4:	613b      	str	r3, [r7, #16]
   return(result);
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	f023 0310 	bic.w	r3, r3, #16
 800b8cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	330c      	adds	r3, #12
 800b8d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b8d6:	623a      	str	r2, [r7, #32]
 800b8d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8da:	69f9      	ldr	r1, [r7, #28]
 800b8dc:	6a3a      	ldr	r2, [r7, #32]
 800b8de:	e841 2300 	strex	r3, r2, [r1]
 800b8e2:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8e4:	69bb      	ldr	r3, [r7, #24]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d1e5      	bne.n	800b8b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f003 0310 	and.w	r3, r3, #16
 800b8f4:	2b10      	cmp	r3, #16
 800b8f6:	d10a      	bne.n	800b90e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	60fb      	str	r3, [r7, #12]
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	60fb      	str	r3, [r7, #12]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	685b      	ldr	r3, [r3, #4]
 800b90a:	60fb      	str	r3, [r7, #12]
 800b90c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800b912:	4619      	mov	r1, r3
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f7f7 fe95 	bl	8003644 <HAL_UARTEx_RxEventCallback>
 800b91a:	e002      	b.n	800b922 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7ff fc2b 	bl	800b178 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	e002      	b.n	800b92c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	e000      	b.n	800b92c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b92a:	2302      	movs	r3, #2
  }
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3730      	adds	r7, #48	@ 0x30
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b938:	b0c0      	sub	sp, #256	@ 0x100
 800b93a:	af00      	add	r7, sp, #0
 800b93c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800b94c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b950:	68d9      	ldr	r1, [r3, #12]
 800b952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	ea40 0301 	orr.w	r3, r0, r1
 800b95c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b95e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b962:	689a      	ldr	r2, [r3, #8]
 800b964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	431a      	orrs	r2, r3
 800b96c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b970:	695b      	ldr	r3, [r3, #20]
 800b972:	431a      	orrs	r2, r3
 800b974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b978:	69db      	ldr	r3, [r3, #28]
 800b97a:	4313      	orrs	r3, r2
 800b97c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800b98c:	f021 010c 	bic.w	r1, r1, #12
 800b990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b99a:	430b      	orrs	r3, r1
 800b99c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b99e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800b9aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9ae:	6999      	ldr	r1, [r3, #24]
 800b9b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	ea40 0301 	orr.w	r3, r0, r1
 800b9ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b9bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9c0:	681a      	ldr	r2, [r3, #0]
 800b9c2:	4b8f      	ldr	r3, [pc, #572]	@ (800bc00 <UART_SetConfig+0x2cc>)
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	d005      	beq.n	800b9d4 <UART_SetConfig+0xa0>
 800b9c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	4b8d      	ldr	r3, [pc, #564]	@ (800bc04 <UART_SetConfig+0x2d0>)
 800b9d0:	429a      	cmp	r2, r3
 800b9d2:	d104      	bne.n	800b9de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b9d4:	f7fd fe9e 	bl	8009714 <HAL_RCC_GetPCLK2Freq>
 800b9d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800b9dc:	e003      	b.n	800b9e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b9de:	f7fd fe85 	bl	80096ec <HAL_RCC_GetPCLK1Freq>
 800b9e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b9e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b9ea:	69db      	ldr	r3, [r3, #28]
 800b9ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b9f0:	f040 810c 	bne.w	800bc0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b9f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b9fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800ba02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800ba06:	4622      	mov	r2, r4
 800ba08:	462b      	mov	r3, r5
 800ba0a:	1891      	adds	r1, r2, r2
 800ba0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800ba0e:	415b      	adcs	r3, r3
 800ba10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ba12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800ba16:	4621      	mov	r1, r4
 800ba18:	eb12 0801 	adds.w	r8, r2, r1
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	eb43 0901 	adc.w	r9, r3, r1
 800ba22:	f04f 0200 	mov.w	r2, #0
 800ba26:	f04f 0300 	mov.w	r3, #0
 800ba2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ba2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ba32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ba36:	4690      	mov	r8, r2
 800ba38:	4699      	mov	r9, r3
 800ba3a:	4623      	mov	r3, r4
 800ba3c:	eb18 0303 	adds.w	r3, r8, r3
 800ba40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ba44:	462b      	mov	r3, r5
 800ba46:	eb49 0303 	adc.w	r3, r9, r3
 800ba4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ba4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ba5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ba5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ba62:	460b      	mov	r3, r1
 800ba64:	18db      	adds	r3, r3, r3
 800ba66:	653b      	str	r3, [r7, #80]	@ 0x50
 800ba68:	4613      	mov	r3, r2
 800ba6a:	eb42 0303 	adc.w	r3, r2, r3
 800ba6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ba74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ba78:	f7f5 f8e6 	bl	8000c48 <__aeabi_uldivmod>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4b61      	ldr	r3, [pc, #388]	@ (800bc08 <UART_SetConfig+0x2d4>)
 800ba82:	fba3 2302 	umull	r2, r3, r3, r2
 800ba86:	095b      	lsrs	r3, r3, #5
 800ba88:	011c      	lsls	r4, r3, #4
 800ba8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ba8e:	2200      	movs	r2, #0
 800ba90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ba94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ba98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ba9c:	4642      	mov	r2, r8
 800ba9e:	464b      	mov	r3, r9
 800baa0:	1891      	adds	r1, r2, r2
 800baa2:	64b9      	str	r1, [r7, #72]	@ 0x48
 800baa4:	415b      	adcs	r3, r3
 800baa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800baa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800baac:	4641      	mov	r1, r8
 800baae:	eb12 0a01 	adds.w	sl, r2, r1
 800bab2:	4649      	mov	r1, r9
 800bab4:	eb43 0b01 	adc.w	fp, r3, r1
 800bab8:	f04f 0200 	mov.w	r2, #0
 800babc:	f04f 0300 	mov.w	r3, #0
 800bac0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800bac4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800bac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bacc:	4692      	mov	sl, r2
 800bace:	469b      	mov	fp, r3
 800bad0:	4643      	mov	r3, r8
 800bad2:	eb1a 0303 	adds.w	r3, sl, r3
 800bad6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bada:	464b      	mov	r3, r9
 800badc:	eb4b 0303 	adc.w	r3, fp, r3
 800bae0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800bae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bae8:	685b      	ldr	r3, [r3, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800baf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800baf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800baf8:	460b      	mov	r3, r1
 800bafa:	18db      	adds	r3, r3, r3
 800bafc:	643b      	str	r3, [r7, #64]	@ 0x40
 800bafe:	4613      	mov	r3, r2
 800bb00:	eb42 0303 	adc.w	r3, r2, r3
 800bb04:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800bb0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800bb0e:	f7f5 f89b 	bl	8000c48 <__aeabi_uldivmod>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	4611      	mov	r1, r2
 800bb18:	4b3b      	ldr	r3, [pc, #236]	@ (800bc08 <UART_SetConfig+0x2d4>)
 800bb1a:	fba3 2301 	umull	r2, r3, r3, r1
 800bb1e:	095b      	lsrs	r3, r3, #5
 800bb20:	2264      	movs	r2, #100	@ 0x64
 800bb22:	fb02 f303 	mul.w	r3, r2, r3
 800bb26:	1acb      	subs	r3, r1, r3
 800bb28:	00db      	lsls	r3, r3, #3
 800bb2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800bb2e:	4b36      	ldr	r3, [pc, #216]	@ (800bc08 <UART_SetConfig+0x2d4>)
 800bb30:	fba3 2302 	umull	r2, r3, r3, r2
 800bb34:	095b      	lsrs	r3, r3, #5
 800bb36:	005b      	lsls	r3, r3, #1
 800bb38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800bb3c:	441c      	add	r4, r3
 800bb3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bb42:	2200      	movs	r2, #0
 800bb44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800bb48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800bb4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800bb50:	4642      	mov	r2, r8
 800bb52:	464b      	mov	r3, r9
 800bb54:	1891      	adds	r1, r2, r2
 800bb56:	63b9      	str	r1, [r7, #56]	@ 0x38
 800bb58:	415b      	adcs	r3, r3
 800bb5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bb5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800bb60:	4641      	mov	r1, r8
 800bb62:	1851      	adds	r1, r2, r1
 800bb64:	6339      	str	r1, [r7, #48]	@ 0x30
 800bb66:	4649      	mov	r1, r9
 800bb68:	414b      	adcs	r3, r1
 800bb6a:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb6c:	f04f 0200 	mov.w	r2, #0
 800bb70:	f04f 0300 	mov.w	r3, #0
 800bb74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800bb78:	4659      	mov	r1, fp
 800bb7a:	00cb      	lsls	r3, r1, #3
 800bb7c:	4651      	mov	r1, sl
 800bb7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bb82:	4651      	mov	r1, sl
 800bb84:	00ca      	lsls	r2, r1, #3
 800bb86:	4610      	mov	r0, r2
 800bb88:	4619      	mov	r1, r3
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	4642      	mov	r2, r8
 800bb8e:	189b      	adds	r3, r3, r2
 800bb90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800bb94:	464b      	mov	r3, r9
 800bb96:	460a      	mov	r2, r1
 800bb98:	eb42 0303 	adc.w	r3, r2, r3
 800bb9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800bba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bbac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800bbb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	18db      	adds	r3, r3, r3
 800bbb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bbba:	4613      	mov	r3, r2
 800bbbc:	eb42 0303 	adc.w	r3, r2, r3
 800bbc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bbc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800bbc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800bbca:	f7f5 f83d 	bl	8000c48 <__aeabi_uldivmod>
 800bbce:	4602      	mov	r2, r0
 800bbd0:	460b      	mov	r3, r1
 800bbd2:	4b0d      	ldr	r3, [pc, #52]	@ (800bc08 <UART_SetConfig+0x2d4>)
 800bbd4:	fba3 1302 	umull	r1, r3, r3, r2
 800bbd8:	095b      	lsrs	r3, r3, #5
 800bbda:	2164      	movs	r1, #100	@ 0x64
 800bbdc:	fb01 f303 	mul.w	r3, r1, r3
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	00db      	lsls	r3, r3, #3
 800bbe4:	3332      	adds	r3, #50	@ 0x32
 800bbe6:	4a08      	ldr	r2, [pc, #32]	@ (800bc08 <UART_SetConfig+0x2d4>)
 800bbe8:	fba2 2303 	umull	r2, r3, r2, r3
 800bbec:	095b      	lsrs	r3, r3, #5
 800bbee:	f003 0207 	and.w	r2, r3, #7
 800bbf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4422      	add	r2, r4
 800bbfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bbfc:	e106      	b.n	800be0c <UART_SetConfig+0x4d8>
 800bbfe:	bf00      	nop
 800bc00:	40011000 	.word	0x40011000
 800bc04:	40011400 	.word	0x40011400
 800bc08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bc10:	2200      	movs	r2, #0
 800bc12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800bc16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800bc1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800bc1e:	4642      	mov	r2, r8
 800bc20:	464b      	mov	r3, r9
 800bc22:	1891      	adds	r1, r2, r2
 800bc24:	6239      	str	r1, [r7, #32]
 800bc26:	415b      	adcs	r3, r3
 800bc28:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bc2e:	4641      	mov	r1, r8
 800bc30:	1854      	adds	r4, r2, r1
 800bc32:	4649      	mov	r1, r9
 800bc34:	eb43 0501 	adc.w	r5, r3, r1
 800bc38:	f04f 0200 	mov.w	r2, #0
 800bc3c:	f04f 0300 	mov.w	r3, #0
 800bc40:	00eb      	lsls	r3, r5, #3
 800bc42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bc46:	00e2      	lsls	r2, r4, #3
 800bc48:	4614      	mov	r4, r2
 800bc4a:	461d      	mov	r5, r3
 800bc4c:	4643      	mov	r3, r8
 800bc4e:	18e3      	adds	r3, r4, r3
 800bc50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bc54:	464b      	mov	r3, r9
 800bc56:	eb45 0303 	adc.w	r3, r5, r3
 800bc5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800bc5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800bc6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800bc6e:	f04f 0200 	mov.w	r2, #0
 800bc72:	f04f 0300 	mov.w	r3, #0
 800bc76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bc7a:	4629      	mov	r1, r5
 800bc7c:	008b      	lsls	r3, r1, #2
 800bc7e:	4621      	mov	r1, r4
 800bc80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc84:	4621      	mov	r1, r4
 800bc86:	008a      	lsls	r2, r1, #2
 800bc88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800bc8c:	f7f4 ffdc 	bl	8000c48 <__aeabi_uldivmod>
 800bc90:	4602      	mov	r2, r0
 800bc92:	460b      	mov	r3, r1
 800bc94:	4b60      	ldr	r3, [pc, #384]	@ (800be18 <UART_SetConfig+0x4e4>)
 800bc96:	fba3 2302 	umull	r2, r3, r3, r2
 800bc9a:	095b      	lsrs	r3, r3, #5
 800bc9c:	011c      	lsls	r4, r3, #4
 800bc9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bca2:	2200      	movs	r2, #0
 800bca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bca8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bcac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	464b      	mov	r3, r9
 800bcb4:	1891      	adds	r1, r2, r2
 800bcb6:	61b9      	str	r1, [r7, #24]
 800bcb8:	415b      	adcs	r3, r3
 800bcba:	61fb      	str	r3, [r7, #28]
 800bcbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bcc0:	4641      	mov	r1, r8
 800bcc2:	1851      	adds	r1, r2, r1
 800bcc4:	6139      	str	r1, [r7, #16]
 800bcc6:	4649      	mov	r1, r9
 800bcc8:	414b      	adcs	r3, r1
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	f04f 0200 	mov.w	r2, #0
 800bcd0:	f04f 0300 	mov.w	r3, #0
 800bcd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bcd8:	4659      	mov	r1, fp
 800bcda:	00cb      	lsls	r3, r1, #3
 800bcdc:	4651      	mov	r1, sl
 800bcde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bce2:	4651      	mov	r1, sl
 800bce4:	00ca      	lsls	r2, r1, #3
 800bce6:	4610      	mov	r0, r2
 800bce8:	4619      	mov	r1, r3
 800bcea:	4603      	mov	r3, r0
 800bcec:	4642      	mov	r2, r8
 800bcee:	189b      	adds	r3, r3, r2
 800bcf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bcf4:	464b      	mov	r3, r9
 800bcf6:	460a      	mov	r2, r1
 800bcf8:	eb42 0303 	adc.w	r3, r2, r3
 800bcfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bd00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	2200      	movs	r2, #0
 800bd08:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bd0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bd0c:	f04f 0200 	mov.w	r2, #0
 800bd10:	f04f 0300 	mov.w	r3, #0
 800bd14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800bd18:	4649      	mov	r1, r9
 800bd1a:	008b      	lsls	r3, r1, #2
 800bd1c:	4641      	mov	r1, r8
 800bd1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd22:	4641      	mov	r1, r8
 800bd24:	008a      	lsls	r2, r1, #2
 800bd26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800bd2a:	f7f4 ff8d 	bl	8000c48 <__aeabi_uldivmod>
 800bd2e:	4602      	mov	r2, r0
 800bd30:	460b      	mov	r3, r1
 800bd32:	4611      	mov	r1, r2
 800bd34:	4b38      	ldr	r3, [pc, #224]	@ (800be18 <UART_SetConfig+0x4e4>)
 800bd36:	fba3 2301 	umull	r2, r3, r3, r1
 800bd3a:	095b      	lsrs	r3, r3, #5
 800bd3c:	2264      	movs	r2, #100	@ 0x64
 800bd3e:	fb02 f303 	mul.w	r3, r2, r3
 800bd42:	1acb      	subs	r3, r1, r3
 800bd44:	011b      	lsls	r3, r3, #4
 800bd46:	3332      	adds	r3, #50	@ 0x32
 800bd48:	4a33      	ldr	r2, [pc, #204]	@ (800be18 <UART_SetConfig+0x4e4>)
 800bd4a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd4e:	095b      	lsrs	r3, r3, #5
 800bd50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd54:	441c      	add	r4, r3
 800bd56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800bd5a:	2200      	movs	r2, #0
 800bd5c:	673b      	str	r3, [r7, #112]	@ 0x70
 800bd5e:	677a      	str	r2, [r7, #116]	@ 0x74
 800bd60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800bd64:	4642      	mov	r2, r8
 800bd66:	464b      	mov	r3, r9
 800bd68:	1891      	adds	r1, r2, r2
 800bd6a:	60b9      	str	r1, [r7, #8]
 800bd6c:	415b      	adcs	r3, r3
 800bd6e:	60fb      	str	r3, [r7, #12]
 800bd70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bd74:	4641      	mov	r1, r8
 800bd76:	1851      	adds	r1, r2, r1
 800bd78:	6039      	str	r1, [r7, #0]
 800bd7a:	4649      	mov	r1, r9
 800bd7c:	414b      	adcs	r3, r1
 800bd7e:	607b      	str	r3, [r7, #4]
 800bd80:	f04f 0200 	mov.w	r2, #0
 800bd84:	f04f 0300 	mov.w	r3, #0
 800bd88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bd8c:	4659      	mov	r1, fp
 800bd8e:	00cb      	lsls	r3, r1, #3
 800bd90:	4651      	mov	r1, sl
 800bd92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bd96:	4651      	mov	r1, sl
 800bd98:	00ca      	lsls	r2, r1, #3
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	4619      	mov	r1, r3
 800bd9e:	4603      	mov	r3, r0
 800bda0:	4642      	mov	r2, r8
 800bda2:	189b      	adds	r3, r3, r2
 800bda4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bda6:	464b      	mov	r3, r9
 800bda8:	460a      	mov	r2, r1
 800bdaa:	eb42 0303 	adc.w	r3, r2, r3
 800bdae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bdb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	663b      	str	r3, [r7, #96]	@ 0x60
 800bdba:	667a      	str	r2, [r7, #100]	@ 0x64
 800bdbc:	f04f 0200 	mov.w	r2, #0
 800bdc0:	f04f 0300 	mov.w	r3, #0
 800bdc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800bdc8:	4649      	mov	r1, r9
 800bdca:	008b      	lsls	r3, r1, #2
 800bdcc:	4641      	mov	r1, r8
 800bdce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bdd2:	4641      	mov	r1, r8
 800bdd4:	008a      	lsls	r2, r1, #2
 800bdd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800bdda:	f7f4 ff35 	bl	8000c48 <__aeabi_uldivmod>
 800bdde:	4602      	mov	r2, r0
 800bde0:	460b      	mov	r3, r1
 800bde2:	4b0d      	ldr	r3, [pc, #52]	@ (800be18 <UART_SetConfig+0x4e4>)
 800bde4:	fba3 1302 	umull	r1, r3, r3, r2
 800bde8:	095b      	lsrs	r3, r3, #5
 800bdea:	2164      	movs	r1, #100	@ 0x64
 800bdec:	fb01 f303 	mul.w	r3, r1, r3
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	011b      	lsls	r3, r3, #4
 800bdf4:	3332      	adds	r3, #50	@ 0x32
 800bdf6:	4a08      	ldr	r2, [pc, #32]	@ (800be18 <UART_SetConfig+0x4e4>)
 800bdf8:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfc:	095b      	lsrs	r3, r3, #5
 800bdfe:	f003 020f 	and.w	r2, r3, #15
 800be02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4422      	add	r2, r4
 800be0a:	609a      	str	r2, [r3, #8]
}
 800be0c:	bf00      	nop
 800be0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800be12:	46bd      	mov	sp, r7
 800be14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be18:	51eb851f 	.word	0x51eb851f

0800be1c <__NVIC_SetPriority>:
{
 800be1c:	b480      	push	{r7}
 800be1e:	b083      	sub	sp, #12
 800be20:	af00      	add	r7, sp, #0
 800be22:	4603      	mov	r3, r0
 800be24:	6039      	str	r1, [r7, #0]
 800be26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800be28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	db0a      	blt.n	800be46 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	b2da      	uxtb	r2, r3
 800be34:	490c      	ldr	r1, [pc, #48]	@ (800be68 <__NVIC_SetPriority+0x4c>)
 800be36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800be3a:	0112      	lsls	r2, r2, #4
 800be3c:	b2d2      	uxtb	r2, r2
 800be3e:	440b      	add	r3, r1
 800be40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800be44:	e00a      	b.n	800be5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	b2da      	uxtb	r2, r3
 800be4a:	4908      	ldr	r1, [pc, #32]	@ (800be6c <__NVIC_SetPriority+0x50>)
 800be4c:	79fb      	ldrb	r3, [r7, #7]
 800be4e:	f003 030f 	and.w	r3, r3, #15
 800be52:	3b04      	subs	r3, #4
 800be54:	0112      	lsls	r2, r2, #4
 800be56:	b2d2      	uxtb	r2, r2
 800be58:	440b      	add	r3, r1
 800be5a:	761a      	strb	r2, [r3, #24]
}
 800be5c:	bf00      	nop
 800be5e:	370c      	adds	r7, #12
 800be60:	46bd      	mov	sp, r7
 800be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be66:	4770      	bx	lr
 800be68:	e000e100 	.word	0xe000e100
 800be6c:	e000ed00 	.word	0xe000ed00

0800be70 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800be70:	b580      	push	{r7, lr}
 800be72:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800be74:	2100      	movs	r1, #0
 800be76:	f06f 0004 	mvn.w	r0, #4
 800be7a:	f7ff ffcf 	bl	800be1c <__NVIC_SetPriority>
#endif
}
 800be7e:	bf00      	nop
 800be80:	bd80      	pop	{r7, pc}
	...

0800be84 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be8a:	f3ef 8305 	mrs	r3, IPSR
 800be8e:	603b      	str	r3, [r7, #0]
  return(result);
 800be90:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800be92:	2b00      	cmp	r3, #0
 800be94:	d003      	beq.n	800be9e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800be96:	f06f 0305 	mvn.w	r3, #5
 800be9a:	607b      	str	r3, [r7, #4]
 800be9c:	e00c      	b.n	800beb8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800be9e:	4b0a      	ldr	r3, [pc, #40]	@ (800bec8 <osKernelInitialize+0x44>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d105      	bne.n	800beb2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bea6:	4b08      	ldr	r3, [pc, #32]	@ (800bec8 <osKernelInitialize+0x44>)
 800bea8:	2201      	movs	r2, #1
 800beaa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800beac:	2300      	movs	r3, #0
 800beae:	607b      	str	r3, [r7, #4]
 800beb0:	e002      	b.n	800beb8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800beb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800beb6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800beb8:	687b      	ldr	r3, [r7, #4]
}
 800beba:	4618      	mov	r0, r3
 800bebc:	370c      	adds	r7, #12
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	20000f70 	.word	0x20000f70

0800becc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800becc:	b580      	push	{r7, lr}
 800bece:	b082      	sub	sp, #8
 800bed0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bed2:	f3ef 8305 	mrs	r3, IPSR
 800bed6:	603b      	str	r3, [r7, #0]
  return(result);
 800bed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d003      	beq.n	800bee6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bede:	f06f 0305 	mvn.w	r3, #5
 800bee2:	607b      	str	r3, [r7, #4]
 800bee4:	e010      	b.n	800bf08 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bee6:	4b0b      	ldr	r3, [pc, #44]	@ (800bf14 <osKernelStart+0x48>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d109      	bne.n	800bf02 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800beee:	f7ff ffbf 	bl	800be70 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bef2:	4b08      	ldr	r3, [pc, #32]	@ (800bf14 <osKernelStart+0x48>)
 800bef4:	2202      	movs	r2, #2
 800bef6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bef8:	f001 f892 	bl	800d020 <vTaskStartScheduler>
      stat = osOK;
 800befc:	2300      	movs	r3, #0
 800befe:	607b      	str	r3, [r7, #4]
 800bf00:	e002      	b.n	800bf08 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bf02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bf08:	687b      	ldr	r3, [r7, #4]
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}
 800bf12:	bf00      	nop
 800bf14:	20000f70 	.word	0x20000f70

0800bf18 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b08e      	sub	sp, #56	@ 0x38
 800bf1c:	af04      	add	r7, sp, #16
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf24:	2300      	movs	r3, #0
 800bf26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf28:	f3ef 8305 	mrs	r3, IPSR
 800bf2c:	617b      	str	r3, [r7, #20]
  return(result);
 800bf2e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d17e      	bne.n	800c032 <osThreadNew+0x11a>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d07b      	beq.n	800c032 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bf3a:	2380      	movs	r3, #128	@ 0x80
 800bf3c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bf3e:	2318      	movs	r3, #24
 800bf40:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bf42:	2300      	movs	r3, #0
 800bf44:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800bf46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bf4a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d045      	beq.n	800bfde <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d002      	beq.n	800bf60 <osThreadNew+0x48>
        name = attr->name;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	699b      	ldr	r3, [r3, #24]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d002      	beq.n	800bf6e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	699b      	ldr	r3, [r3, #24]
 800bf6c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d008      	beq.n	800bf86 <osThreadNew+0x6e>
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	2b38      	cmp	r3, #56	@ 0x38
 800bf78:	d805      	bhi.n	800bf86 <osThreadNew+0x6e>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d001      	beq.n	800bf8a <osThreadNew+0x72>
        return (NULL);
 800bf86:	2300      	movs	r3, #0
 800bf88:	e054      	b.n	800c034 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	695b      	ldr	r3, [r3, #20]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d003      	beq.n	800bf9a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	695b      	ldr	r3, [r3, #20]
 800bf96:	089b      	lsrs	r3, r3, #2
 800bf98:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	689b      	ldr	r3, [r3, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00e      	beq.n	800bfc0 <osThreadNew+0xa8>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	2ba7      	cmp	r3, #167	@ 0xa7
 800bfa8:	d90a      	bls.n	800bfc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d006      	beq.n	800bfc0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	695b      	ldr	r3, [r3, #20]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d002      	beq.n	800bfc0 <osThreadNew+0xa8>
        mem = 1;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	61bb      	str	r3, [r7, #24]
 800bfbe:	e010      	b.n	800bfe2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	689b      	ldr	r3, [r3, #8]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d10c      	bne.n	800bfe2 <osThreadNew+0xca>
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d108      	bne.n	800bfe2 <osThreadNew+0xca>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	691b      	ldr	r3, [r3, #16]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d104      	bne.n	800bfe2 <osThreadNew+0xca>
          mem = 0;
 800bfd8:	2300      	movs	r3, #0
 800bfda:	61bb      	str	r3, [r7, #24]
 800bfdc:	e001      	b.n	800bfe2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bfe2:	69bb      	ldr	r3, [r7, #24]
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d110      	bne.n	800c00a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bff0:	9202      	str	r2, [sp, #8]
 800bff2:	9301      	str	r3, [sp, #4]
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	6a3a      	ldr	r2, [r7, #32]
 800bffc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bffe:	68f8      	ldr	r0, [r7, #12]
 800c000:	f000 fe1a 	bl	800cc38 <xTaskCreateStatic>
 800c004:	4603      	mov	r3, r0
 800c006:	613b      	str	r3, [r7, #16]
 800c008:	e013      	b.n	800c032 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d110      	bne.n	800c032 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c010:	6a3b      	ldr	r3, [r7, #32]
 800c012:	b29a      	uxth	r2, r3
 800c014:	f107 0310 	add.w	r3, r7, #16
 800c018:	9301      	str	r3, [sp, #4]
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	9300      	str	r3, [sp, #0]
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	f000 fe68 	bl	800ccf8 <xTaskCreate>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	d001      	beq.n	800c032 <osThreadNew+0x11a>
            hTask = NULL;
 800c02e:	2300      	movs	r3, #0
 800c030:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c032:	693b      	ldr	r3, [r7, #16]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3728      	adds	r7, #40	@ 0x28
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c044:	f3ef 8305 	mrs	r3, IPSR
 800c048:	60bb      	str	r3, [r7, #8]
  return(result);
 800c04a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <osDelay+0x1c>
    stat = osErrorISR;
 800c050:	f06f 0305 	mvn.w	r3, #5
 800c054:	60fb      	str	r3, [r7, #12]
 800c056:	e007      	b.n	800c068 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c058:	2300      	movs	r3, #0
 800c05a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d002      	beq.n	800c068 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c062:	6878      	ldr	r0, [r7, #4]
 800c064:	f000 ffa6 	bl	800cfb4 <vTaskDelay>
    }
  }

  return (stat);
 800c068:	68fb      	ldr	r3, [r7, #12]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3710      	adds	r7, #16
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
	...

0800c074 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c074:	b480      	push	{r7}
 800c076:	b085      	sub	sp, #20
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4a07      	ldr	r2, [pc, #28]	@ (800c0a0 <vApplicationGetIdleTaskMemory+0x2c>)
 800c084:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	4a06      	ldr	r2, [pc, #24]	@ (800c0a4 <vApplicationGetIdleTaskMemory+0x30>)
 800c08a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2280      	movs	r2, #128	@ 0x80
 800c090:	601a      	str	r2, [r3, #0]
}
 800c092:	bf00      	nop
 800c094:	3714      	adds	r7, #20
 800c096:	46bd      	mov	sp, r7
 800c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09c:	4770      	bx	lr
 800c09e:	bf00      	nop
 800c0a0:	20000f74 	.word	0x20000f74
 800c0a4:	2000101c 	.word	0x2000101c

0800c0a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	4a07      	ldr	r2, [pc, #28]	@ (800c0d4 <vApplicationGetTimerTaskMemory+0x2c>)
 800c0b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	4a06      	ldr	r2, [pc, #24]	@ (800c0d8 <vApplicationGetTimerTaskMemory+0x30>)
 800c0be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c0c6:	601a      	str	r2, [r3, #0]
}
 800c0c8:	bf00      	nop
 800c0ca:	3714      	adds	r7, #20
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr
 800c0d4:	2000121c 	.word	0x2000121c
 800c0d8:	200012c4 	.word	0x200012c4

0800c0dc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b083      	sub	sp, #12
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f103 0208 	add.w	r2, r3, #8
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c0f4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f103 0208 	add.w	r2, r3, #8
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f103 0208 	add.w	r2, r3, #8
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c11c:	b480      	push	{r7}
 800c11e:	b083      	sub	sp, #12
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c12a:	bf00      	nop
 800c12c:	370c      	adds	r7, #12
 800c12e:	46bd      	mov	sp, r7
 800c130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c134:	4770      	bx	lr

0800c136 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c136:	b480      	push	{r7}
 800c138:	b085      	sub	sp, #20
 800c13a:	af00      	add	r7, sp, #0
 800c13c:	6078      	str	r0, [r7, #4]
 800c13e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	689a      	ldr	r2, [r3, #8]
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	683a      	ldr	r2, [r7, #0]
 800c160:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	687a      	ldr	r2, [r7, #4]
 800c166:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	1c5a      	adds	r2, r3, #1
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	601a      	str	r2, [r3, #0]
}
 800c172:	bf00      	nop
 800c174:	3714      	adds	r7, #20
 800c176:	46bd      	mov	sp, r7
 800c178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17c:	4770      	bx	lr

0800c17e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c17e:	b480      	push	{r7}
 800c180:	b085      	sub	sp, #20
 800c182:	af00      	add	r7, sp, #0
 800c184:	6078      	str	r0, [r7, #4]
 800c186:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c194:	d103      	bne.n	800c19e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	691b      	ldr	r3, [r3, #16]
 800c19a:	60fb      	str	r3, [r7, #12]
 800c19c:	e00c      	b.n	800c1b8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	3308      	adds	r3, #8
 800c1a2:	60fb      	str	r3, [r7, #12]
 800c1a4:	e002      	b.n	800c1ac <vListInsert+0x2e>
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	60fb      	str	r3, [r7, #12]
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68ba      	ldr	r2, [r7, #8]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d2f6      	bcs.n	800c1a6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	685a      	ldr	r2, [r3, #4]
 800c1bc:	683b      	ldr	r3, [r7, #0]
 800c1be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	683a      	ldr	r2, [r7, #0]
 800c1c6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	687a      	ldr	r2, [r7, #4]
 800c1d8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	1c5a      	adds	r2, r3, #1
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	601a      	str	r2, [r3, #0]
}
 800c1e4:	bf00      	nop
 800c1e6:	3714      	adds	r7, #20
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	6892      	ldr	r2, [r2, #8]
 800c206:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	689b      	ldr	r3, [r3, #8]
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	6852      	ldr	r2, [r2, #4]
 800c210:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	685b      	ldr	r3, [r3, #4]
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d103      	bne.n	800c224 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	689a      	ldr	r2, [r3, #8]
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	1e5a      	subs	r2, r3, #1
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr

0800c244 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d10b      	bne.n	800c270 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c25c:	f383 8811 	msr	BASEPRI, r3
 800c260:	f3bf 8f6f 	isb	sy
 800c264:	f3bf 8f4f 	dsb	sy
 800c268:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c26a:	bf00      	nop
 800c26c:	bf00      	nop
 800c26e:	e7fd      	b.n	800c26c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c270:	f002 fa82 	bl	800e778 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	681a      	ldr	r2, [r3, #0]
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c27c:	68f9      	ldr	r1, [r7, #12]
 800c27e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c280:	fb01 f303 	mul.w	r3, r1, r3
 800c284:	441a      	add	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2200      	movs	r2, #0
 800c28e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	681a      	ldr	r2, [r3, #0]
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2a0:	3b01      	subs	r3, #1
 800c2a2:	68f9      	ldr	r1, [r7, #12]
 800c2a4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c2a6:	fb01 f303 	mul.w	r3, r1, r3
 800c2aa:	441a      	add	r2, r3
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	22ff      	movs	r2, #255	@ 0xff
 800c2b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	22ff      	movs	r2, #255	@ 0xff
 800c2bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c2c0:	683b      	ldr	r3, [r7, #0]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d114      	bne.n	800c2f0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d01a      	beq.n	800c304 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	3310      	adds	r3, #16
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f001 fa3c 	bl	800d750 <xTaskRemoveFromEventList>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d012      	beq.n	800c304 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c2de:	4b0d      	ldr	r3, [pc, #52]	@ (800c314 <xQueueGenericReset+0xd0>)
 800c2e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2e4:	601a      	str	r2, [r3, #0]
 800c2e6:	f3bf 8f4f 	dsb	sy
 800c2ea:	f3bf 8f6f 	isb	sy
 800c2ee:	e009      	b.n	800c304 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	3310      	adds	r3, #16
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	f7ff fef1 	bl	800c0dc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3324      	adds	r3, #36	@ 0x24
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7ff feec 	bl	800c0dc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c304:	f002 fa6a 	bl	800e7dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c308:	2301      	movs	r3, #1
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	e000ed04 	.word	0xe000ed04

0800c318 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b08e      	sub	sp, #56	@ 0x38
 800c31c:	af02      	add	r7, sp, #8
 800c31e:	60f8      	str	r0, [r7, #12]
 800c320:	60b9      	str	r1, [r7, #8]
 800c322:	607a      	str	r2, [r7, #4]
 800c324:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10b      	bne.n	800c344 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c33e:	bf00      	nop
 800c340:	bf00      	nop
 800c342:	e7fd      	b.n	800c340 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c344:	683b      	ldr	r3, [r7, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d10b      	bne.n	800c362 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34e:	f383 8811 	msr	BASEPRI, r3
 800c352:	f3bf 8f6f 	isb	sy
 800c356:	f3bf 8f4f 	dsb	sy
 800c35a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c35c:	bf00      	nop
 800c35e:	bf00      	nop
 800c360:	e7fd      	b.n	800c35e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d002      	beq.n	800c36e <xQueueGenericCreateStatic+0x56>
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d001      	beq.n	800c372 <xQueueGenericCreateStatic+0x5a>
 800c36e:	2301      	movs	r3, #1
 800c370:	e000      	b.n	800c374 <xQueueGenericCreateStatic+0x5c>
 800c372:	2300      	movs	r3, #0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d10b      	bne.n	800c390 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37c:	f383 8811 	msr	BASEPRI, r3
 800c380:	f3bf 8f6f 	isb	sy
 800c384:	f3bf 8f4f 	dsb	sy
 800c388:	623b      	str	r3, [r7, #32]
}
 800c38a:	bf00      	nop
 800c38c:	bf00      	nop
 800c38e:	e7fd      	b.n	800c38c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d102      	bne.n	800c39c <xQueueGenericCreateStatic+0x84>
 800c396:	68bb      	ldr	r3, [r7, #8]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d101      	bne.n	800c3a0 <xQueueGenericCreateStatic+0x88>
 800c39c:	2301      	movs	r3, #1
 800c39e:	e000      	b.n	800c3a2 <xQueueGenericCreateStatic+0x8a>
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d10b      	bne.n	800c3be <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3aa:	f383 8811 	msr	BASEPRI, r3
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f3bf 8f4f 	dsb	sy
 800c3b6:	61fb      	str	r3, [r7, #28]
}
 800c3b8:	bf00      	nop
 800c3ba:	bf00      	nop
 800c3bc:	e7fd      	b.n	800c3ba <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c3be:	2350      	movs	r3, #80	@ 0x50
 800c3c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	2b50      	cmp	r3, #80	@ 0x50
 800c3c6:	d00b      	beq.n	800c3e0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3cc:	f383 8811 	msr	BASEPRI, r3
 800c3d0:	f3bf 8f6f 	isb	sy
 800c3d4:	f3bf 8f4f 	dsb	sy
 800c3d8:	61bb      	str	r3, [r7, #24]
}
 800c3da:	bf00      	nop
 800c3dc:	bf00      	nop
 800c3de:	e7fd      	b.n	800c3dc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c3e0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c3e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d00d      	beq.n	800c408 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c3ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c3f4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c3f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3fa:	9300      	str	r3, [sp, #0]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	68b9      	ldr	r1, [r7, #8]
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f000 f805 	bl	800c412 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3730      	adds	r7, #48	@ 0x30
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b084      	sub	sp, #16
 800c416:	af00      	add	r7, sp, #0
 800c418:	60f8      	str	r0, [r7, #12]
 800c41a:	60b9      	str	r1, [r7, #8]
 800c41c:	607a      	str	r2, [r7, #4]
 800c41e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d103      	bne.n	800c42e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	69ba      	ldr	r2, [r7, #24]
 800c42a:	601a      	str	r2, [r3, #0]
 800c42c:	e002      	b.n	800c434 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	68fa      	ldr	r2, [r7, #12]
 800c438:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c43a:	69bb      	ldr	r3, [r7, #24]
 800c43c:	68ba      	ldr	r2, [r7, #8]
 800c43e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c440:	2101      	movs	r1, #1
 800c442:	69b8      	ldr	r0, [r7, #24]
 800c444:	f7ff fefe 	bl	800c244 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	78fa      	ldrb	r2, [r7, #3]
 800c44c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c450:	bf00      	nop
 800c452:	3710      	adds	r7, #16
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}

0800c458 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08e      	sub	sp, #56	@ 0x38
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c466:	2300      	movs	r3, #0
 800c468:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10b      	bne.n	800c48c <xQueueGenericSend+0x34>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c486:	bf00      	nop
 800c488:	bf00      	nop
 800c48a:	e7fd      	b.n	800c488 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d103      	bne.n	800c49a <xQueueGenericSend+0x42>
 800c492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c496:	2b00      	cmp	r3, #0
 800c498:	d101      	bne.n	800c49e <xQueueGenericSend+0x46>
 800c49a:	2301      	movs	r3, #1
 800c49c:	e000      	b.n	800c4a0 <xQueueGenericSend+0x48>
 800c49e:	2300      	movs	r3, #0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10b      	bne.n	800c4bc <xQueueGenericSend+0x64>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4b6:	bf00      	nop
 800c4b8:	bf00      	nop
 800c4ba:	e7fd      	b.n	800c4b8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	2b02      	cmp	r3, #2
 800c4c0:	d103      	bne.n	800c4ca <xQueueGenericSend+0x72>
 800c4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d101      	bne.n	800c4ce <xQueueGenericSend+0x76>
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e000      	b.n	800c4d0 <xQueueGenericSend+0x78>
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d10b      	bne.n	800c4ec <xQueueGenericSend+0x94>
	__asm volatile
 800c4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d8:	f383 8811 	msr	BASEPRI, r3
 800c4dc:	f3bf 8f6f 	isb	sy
 800c4e0:	f3bf 8f4f 	dsb	sy
 800c4e4:	623b      	str	r3, [r7, #32]
}
 800c4e6:	bf00      	nop
 800c4e8:	bf00      	nop
 800c4ea:	e7fd      	b.n	800c4e8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4ec:	f001 faf6 	bl	800dadc <xTaskGetSchedulerState>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d102      	bne.n	800c4fc <xQueueGenericSend+0xa4>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d101      	bne.n	800c500 <xQueueGenericSend+0xa8>
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	e000      	b.n	800c502 <xQueueGenericSend+0xaa>
 800c500:	2300      	movs	r3, #0
 800c502:	2b00      	cmp	r3, #0
 800c504:	d10b      	bne.n	800c51e <xQueueGenericSend+0xc6>
	__asm volatile
 800c506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c50a:	f383 8811 	msr	BASEPRI, r3
 800c50e:	f3bf 8f6f 	isb	sy
 800c512:	f3bf 8f4f 	dsb	sy
 800c516:	61fb      	str	r3, [r7, #28]
}
 800c518:	bf00      	nop
 800c51a:	bf00      	nop
 800c51c:	e7fd      	b.n	800c51a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c51e:	f002 f92b 	bl	800e778 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d302      	bcc.n	800c534 <xQueueGenericSend+0xdc>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	2b02      	cmp	r3, #2
 800c532:	d129      	bne.n	800c588 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c534:	683a      	ldr	r2, [r7, #0]
 800c536:	68b9      	ldr	r1, [r7, #8]
 800c538:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c53a:	f000 fa0f 	bl	800c95c <prvCopyDataToQueue>
 800c53e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c544:	2b00      	cmp	r3, #0
 800c546:	d010      	beq.n	800c56a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c54a:	3324      	adds	r3, #36	@ 0x24
 800c54c:	4618      	mov	r0, r3
 800c54e:	f001 f8ff 	bl	800d750 <xTaskRemoveFromEventList>
 800c552:	4603      	mov	r3, r0
 800c554:	2b00      	cmp	r3, #0
 800c556:	d013      	beq.n	800c580 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c558:	4b3f      	ldr	r3, [pc, #252]	@ (800c658 <xQueueGenericSend+0x200>)
 800c55a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c55e:	601a      	str	r2, [r3, #0]
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	f3bf 8f6f 	isb	sy
 800c568:	e00a      	b.n	800c580 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d007      	beq.n	800c580 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c570:	4b39      	ldr	r3, [pc, #228]	@ (800c658 <xQueueGenericSend+0x200>)
 800c572:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c576:	601a      	str	r2, [r3, #0]
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c580:	f002 f92c 	bl	800e7dc <vPortExitCritical>
				return pdPASS;
 800c584:	2301      	movs	r3, #1
 800c586:	e063      	b.n	800c650 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d103      	bne.n	800c596 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c58e:	f002 f925 	bl	800e7dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c592:	2300      	movs	r3, #0
 800c594:	e05c      	b.n	800c650 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d106      	bne.n	800c5aa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c59c:	f107 0314 	add.w	r3, r7, #20
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f001 f939 	bl	800d818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c5aa:	f002 f917 	bl	800e7dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c5ae:	f000 fda7 	bl	800d100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c5b2:	f002 f8e1 	bl	800e778 <vPortEnterCritical>
 800c5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c5bc:	b25b      	sxtb	r3, r3
 800c5be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5c2:	d103      	bne.n	800c5cc <xQueueGenericSend+0x174>
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c5cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c5d2:	b25b      	sxtb	r3, r3
 800c5d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c5d8:	d103      	bne.n	800c5e2 <xQueueGenericSend+0x18a>
 800c5da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5dc:	2200      	movs	r2, #0
 800c5de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c5e2:	f002 f8fb 	bl	800e7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c5e6:	1d3a      	adds	r2, r7, #4
 800c5e8:	f107 0314 	add.w	r3, r7, #20
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f001 f928 	bl	800d844 <xTaskCheckForTimeOut>
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d124      	bne.n	800c644 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c5fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c5fc:	f000 faa6 	bl	800cb4c <prvIsQueueFull>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d018      	beq.n	800c638 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c608:	3310      	adds	r3, #16
 800c60a:	687a      	ldr	r2, [r7, #4]
 800c60c:	4611      	mov	r1, r2
 800c60e:	4618      	mov	r0, r3
 800c610:	f001 f84c 	bl	800d6ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c614:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c616:	f000 fa31 	bl	800ca7c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c61a:	f000 fd7f 	bl	800d11c <xTaskResumeAll>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	f47f af7c 	bne.w	800c51e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c626:	4b0c      	ldr	r3, [pc, #48]	@ (800c658 <xQueueGenericSend+0x200>)
 800c628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c62c:	601a      	str	r2, [r3, #0]
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	e772      	b.n	800c51e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c638:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c63a:	f000 fa1f 	bl	800ca7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c63e:	f000 fd6d 	bl	800d11c <xTaskResumeAll>
 800c642:	e76c      	b.n	800c51e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c644:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c646:	f000 fa19 	bl	800ca7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c64a:	f000 fd67 	bl	800d11c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c64e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c650:	4618      	mov	r0, r3
 800c652:	3738      	adds	r7, #56	@ 0x38
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	e000ed04 	.word	0xe000ed04

0800c65c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b090      	sub	sp, #64	@ 0x40
 800c660:	af00      	add	r7, sp, #0
 800c662:	60f8      	str	r0, [r7, #12]
 800c664:	60b9      	str	r1, [r7, #8]
 800c666:	607a      	str	r2, [r7, #4]
 800c668:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c670:	2b00      	cmp	r3, #0
 800c672:	d10b      	bne.n	800c68c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c678:	f383 8811 	msr	BASEPRI, r3
 800c67c:	f3bf 8f6f 	isb	sy
 800c680:	f3bf 8f4f 	dsb	sy
 800c684:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c686:	bf00      	nop
 800c688:	bf00      	nop
 800c68a:	e7fd      	b.n	800c688 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c68c:	68bb      	ldr	r3, [r7, #8]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d103      	bne.n	800c69a <xQueueGenericSendFromISR+0x3e>
 800c692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <xQueueGenericSendFromISR+0x42>
 800c69a:	2301      	movs	r3, #1
 800c69c:	e000      	b.n	800c6a0 <xQueueGenericSendFromISR+0x44>
 800c69e:	2300      	movs	r3, #0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10b      	bne.n	800c6bc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c6a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6a8:	f383 8811 	msr	BASEPRI, r3
 800c6ac:	f3bf 8f6f 	isb	sy
 800c6b0:	f3bf 8f4f 	dsb	sy
 800c6b4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c6b6:	bf00      	nop
 800c6b8:	bf00      	nop
 800c6ba:	e7fd      	b.n	800c6b8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	2b02      	cmp	r3, #2
 800c6c0:	d103      	bne.n	800c6ca <xQueueGenericSendFromISR+0x6e>
 800c6c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c6c6:	2b01      	cmp	r3, #1
 800c6c8:	d101      	bne.n	800c6ce <xQueueGenericSendFromISR+0x72>
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e000      	b.n	800c6d0 <xQueueGenericSendFromISR+0x74>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d10b      	bne.n	800c6ec <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6d8:	f383 8811 	msr	BASEPRI, r3
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	623b      	str	r3, [r7, #32]
}
 800c6e6:	bf00      	nop
 800c6e8:	bf00      	nop
 800c6ea:	e7fd      	b.n	800c6e8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c6ec:	f002 f924 	bl	800e938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c6f0:	f3ef 8211 	mrs	r2, BASEPRI
 800c6f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6f8:	f383 8811 	msr	BASEPRI, r3
 800c6fc:	f3bf 8f6f 	isb	sy
 800c700:	f3bf 8f4f 	dsb	sy
 800c704:	61fa      	str	r2, [r7, #28]
 800c706:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c708:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c70a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c70e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c714:	429a      	cmp	r2, r3
 800c716:	d302      	bcc.n	800c71e <xQueueGenericSendFromISR+0xc2>
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d12f      	bne.n	800c77e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c720:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c724:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c72c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	68b9      	ldr	r1, [r7, #8]
 800c732:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c734:	f000 f912 	bl	800c95c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c738:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c73c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c740:	d112      	bne.n	800c768 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c746:	2b00      	cmp	r3, #0
 800c748:	d016      	beq.n	800c778 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c74c:	3324      	adds	r3, #36	@ 0x24
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 fffe 	bl	800d750 <xTaskRemoveFromEventList>
 800c754:	4603      	mov	r3, r0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00e      	beq.n	800c778 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d00b      	beq.n	800c778 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	601a      	str	r2, [r3, #0]
 800c766:	e007      	b.n	800c778 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c768:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c76c:	3301      	adds	r3, #1
 800c76e:	b2db      	uxtb	r3, r3
 800c770:	b25a      	sxtb	r2, r3
 800c772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c774:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c778:	2301      	movs	r3, #1
 800c77a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c77c:	e001      	b.n	800c782 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c77e:	2300      	movs	r3, #0
 800c780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c784:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c78c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c78e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c790:	4618      	mov	r0, r3
 800c792:	3740      	adds	r7, #64	@ 0x40
 800c794:	46bd      	mov	sp, r7
 800c796:	bd80      	pop	{r7, pc}

0800c798 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b08c      	sub	sp, #48	@ 0x30
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d10b      	bne.n	800c7ca <xQueueReceive+0x32>
	__asm volatile
 800c7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b6:	f383 8811 	msr	BASEPRI, r3
 800c7ba:	f3bf 8f6f 	isb	sy
 800c7be:	f3bf 8f4f 	dsb	sy
 800c7c2:	623b      	str	r3, [r7, #32]
}
 800c7c4:	bf00      	nop
 800c7c6:	bf00      	nop
 800c7c8:	e7fd      	b.n	800c7c6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d103      	bne.n	800c7d8 <xQueueReceive+0x40>
 800c7d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d101      	bne.n	800c7dc <xQueueReceive+0x44>
 800c7d8:	2301      	movs	r3, #1
 800c7da:	e000      	b.n	800c7de <xQueueReceive+0x46>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d10b      	bne.n	800c7fa <xQueueReceive+0x62>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	61fb      	str	r3, [r7, #28]
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	e7fd      	b.n	800c7f6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c7fa:	f001 f96f 	bl	800dadc <xTaskGetSchedulerState>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	d102      	bne.n	800c80a <xQueueReceive+0x72>
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d101      	bne.n	800c80e <xQueueReceive+0x76>
 800c80a:	2301      	movs	r3, #1
 800c80c:	e000      	b.n	800c810 <xQueueReceive+0x78>
 800c80e:	2300      	movs	r3, #0
 800c810:	2b00      	cmp	r3, #0
 800c812:	d10b      	bne.n	800c82c <xQueueReceive+0x94>
	__asm volatile
 800c814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c818:	f383 8811 	msr	BASEPRI, r3
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f3bf 8f4f 	dsb	sy
 800c824:	61bb      	str	r3, [r7, #24]
}
 800c826:	bf00      	nop
 800c828:	bf00      	nop
 800c82a:	e7fd      	b.n	800c828 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c82c:	f001 ffa4 	bl	800e778 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c834:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d01f      	beq.n	800c87c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c83c:	68b9      	ldr	r1, [r7, #8]
 800c83e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c840:	f000 f8f6 	bl	800ca30 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c846:	1e5a      	subs	r2, r3, #1
 800c848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c84e:	691b      	ldr	r3, [r3, #16]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d00f      	beq.n	800c874 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c856:	3310      	adds	r3, #16
 800c858:	4618      	mov	r0, r3
 800c85a:	f000 ff79 	bl	800d750 <xTaskRemoveFromEventList>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d007      	beq.n	800c874 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c864:	4b3c      	ldr	r3, [pc, #240]	@ (800c958 <xQueueReceive+0x1c0>)
 800c866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c86a:	601a      	str	r2, [r3, #0]
 800c86c:	f3bf 8f4f 	dsb	sy
 800c870:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c874:	f001 ffb2 	bl	800e7dc <vPortExitCritical>
				return pdPASS;
 800c878:	2301      	movs	r3, #1
 800c87a:	e069      	b.n	800c950 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d103      	bne.n	800c88a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c882:	f001 ffab 	bl	800e7dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c886:	2300      	movs	r3, #0
 800c888:	e062      	b.n	800c950 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d106      	bne.n	800c89e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c890:	f107 0310 	add.w	r3, r7, #16
 800c894:	4618      	mov	r0, r3
 800c896:	f000 ffbf 	bl	800d818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c89a:	2301      	movs	r3, #1
 800c89c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c89e:	f001 ff9d 	bl	800e7dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8a2:	f000 fc2d 	bl	800d100 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8a6:	f001 ff67 	bl	800e778 <vPortEnterCritical>
 800c8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8b0:	b25b      	sxtb	r3, r3
 800c8b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8b6:	d103      	bne.n	800c8c0 <xQueueReceive+0x128>
 800c8b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c8c6:	b25b      	sxtb	r3, r3
 800c8c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c8cc:	d103      	bne.n	800c8d6 <xQueueReceive+0x13e>
 800c8ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c8d6:	f001 ff81 	bl	800e7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c8da:	1d3a      	adds	r2, r7, #4
 800c8dc:	f107 0310 	add.w	r3, r7, #16
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f000 ffae 	bl	800d844 <xTaskCheckForTimeOut>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d123      	bne.n	800c936 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c8ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8f0:	f000 f916 	bl	800cb20 <prvIsQueueEmpty>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d017      	beq.n	800c92a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8fc:	3324      	adds	r3, #36	@ 0x24
 800c8fe:	687a      	ldr	r2, [r7, #4]
 800c900:	4611      	mov	r1, r2
 800c902:	4618      	mov	r0, r3
 800c904:	f000 fed2 	bl	800d6ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c908:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c90a:	f000 f8b7 	bl	800ca7c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c90e:	f000 fc05 	bl	800d11c <xTaskResumeAll>
 800c912:	4603      	mov	r3, r0
 800c914:	2b00      	cmp	r3, #0
 800c916:	d189      	bne.n	800c82c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c918:	4b0f      	ldr	r3, [pc, #60]	@ (800c958 <xQueueReceive+0x1c0>)
 800c91a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c91e:	601a      	str	r2, [r3, #0]
 800c920:	f3bf 8f4f 	dsb	sy
 800c924:	f3bf 8f6f 	isb	sy
 800c928:	e780      	b.n	800c82c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c92a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c92c:	f000 f8a6 	bl	800ca7c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c930:	f000 fbf4 	bl	800d11c <xTaskResumeAll>
 800c934:	e77a      	b.n	800c82c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c936:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c938:	f000 f8a0 	bl	800ca7c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c93c:	f000 fbee 	bl	800d11c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c940:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c942:	f000 f8ed 	bl	800cb20 <prvIsQueueEmpty>
 800c946:	4603      	mov	r3, r0
 800c948:	2b00      	cmp	r3, #0
 800c94a:	f43f af6f 	beq.w	800c82c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c94e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c950:	4618      	mov	r0, r3
 800c952:	3730      	adds	r7, #48	@ 0x30
 800c954:	46bd      	mov	sp, r7
 800c956:	bd80      	pop	{r7, pc}
 800c958:	e000ed04 	.word	0xe000ed04

0800c95c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c95c:	b580      	push	{r7, lr}
 800c95e:	b086      	sub	sp, #24
 800c960:	af00      	add	r7, sp, #0
 800c962:	60f8      	str	r0, [r7, #12]
 800c964:	60b9      	str	r1, [r7, #8]
 800c966:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c968:	2300      	movs	r3, #0
 800c96a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c970:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10d      	bne.n	800c996 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d14d      	bne.n	800ca1e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	4618      	mov	r0, r3
 800c988:	f001 f8c6 	bl	800db18 <xTaskPriorityDisinherit>
 800c98c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2200      	movs	r2, #0
 800c992:	609a      	str	r2, [r3, #8]
 800c994:	e043      	b.n	800ca1e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d119      	bne.n	800c9d0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6858      	ldr	r0, [r3, #4]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	68b9      	ldr	r1, [r7, #8]
 800c9a8:	f002 ffc6 	bl	800f938 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	685a      	ldr	r2, [r3, #4]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9b4:	441a      	add	r2, r3
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	429a      	cmp	r2, r3
 800c9c4:	d32b      	bcc.n	800ca1e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	605a      	str	r2, [r3, #4]
 800c9ce:	e026      	b.n	800ca1e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	68d8      	ldr	r0, [r3, #12]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9d8:	461a      	mov	r2, r3
 800c9da:	68b9      	ldr	r1, [r7, #8]
 800c9dc:	f002 ffac 	bl	800f938 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	68da      	ldr	r2, [r3, #12]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9e8:	425b      	negs	r3, r3
 800c9ea:	441a      	add	r2, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	68da      	ldr	r2, [r3, #12]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	d207      	bcs.n	800ca0c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	689a      	ldr	r2, [r3, #8]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca04:	425b      	negs	r3, r3
 800ca06:	441a      	add	r2, r3
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d105      	bne.n	800ca1e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	3b01      	subs	r3, #1
 800ca1c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	1c5a      	adds	r2, r3, #1
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ca26:	697b      	ldr	r3, [r7, #20]
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3718      	adds	r7, #24
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}

0800ca30 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d018      	beq.n	800ca74 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68da      	ldr	r2, [r3, #12]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca4a:	441a      	add	r2, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	68da      	ldr	r2, [r3, #12]
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d303      	bcc.n	800ca64 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681a      	ldr	r2, [r3, #0]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	68d9      	ldr	r1, [r3, #12]
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	6838      	ldr	r0, [r7, #0]
 800ca70:	f002 ff62 	bl	800f938 <memcpy>
	}
}
 800ca74:	bf00      	nop
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b084      	sub	sp, #16
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ca84:	f001 fe78 	bl	800e778 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca8e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ca90:	e011      	b.n	800cab6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d012      	beq.n	800cac0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	3324      	adds	r3, #36	@ 0x24
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 fe56 	bl	800d750 <xTaskRemoveFromEventList>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d001      	beq.n	800caae <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800caaa:	f000 ff2f 	bl	800d90c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	3b01      	subs	r3, #1
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	dce9      	bgt.n	800ca92 <prvUnlockQueue+0x16>
 800cabe:	e000      	b.n	800cac2 <prvUnlockQueue+0x46>
					break;
 800cac0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	22ff      	movs	r2, #255	@ 0xff
 800cac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800caca:	f001 fe87 	bl	800e7dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cace:	f001 fe53 	bl	800e778 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cad8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cada:	e011      	b.n	800cb00 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	691b      	ldr	r3, [r3, #16]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d012      	beq.n	800cb0a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	3310      	adds	r3, #16
 800cae8:	4618      	mov	r0, r3
 800caea:	f000 fe31 	bl	800d750 <xTaskRemoveFromEventList>
 800caee:	4603      	mov	r3, r0
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d001      	beq.n	800caf8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800caf4:	f000 ff0a 	bl	800d90c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800caf8:	7bbb      	ldrb	r3, [r7, #14]
 800cafa:	3b01      	subs	r3, #1
 800cafc:	b2db      	uxtb	r3, r3
 800cafe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb00:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	dce9      	bgt.n	800cadc <prvUnlockQueue+0x60>
 800cb08:	e000      	b.n	800cb0c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb0a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	22ff      	movs	r2, #255	@ 0xff
 800cb10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cb14:	f001 fe62 	bl	800e7dc <vPortExitCritical>
}
 800cb18:	bf00      	nop
 800cb1a:	3710      	adds	r7, #16
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}

0800cb20 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb28:	f001 fe26 	bl	800e778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d102      	bne.n	800cb3a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb34:	2301      	movs	r3, #1
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	e001      	b.n	800cb3e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb3e:	f001 fe4d 	bl	800e7dc <vPortExitCritical>

	return xReturn;
 800cb42:	68fb      	ldr	r3, [r7, #12]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3710      	adds	r7, #16
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b084      	sub	sp, #16
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb54:	f001 fe10 	bl	800e778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d102      	bne.n	800cb6a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cb64:	2301      	movs	r3, #1
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	e001      	b.n	800cb6e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb6e:	f001 fe35 	bl	800e7dc <vPortExitCritical>

	return xReturn;
 800cb72:	68fb      	ldr	r3, [r7, #12]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3710      	adds	r7, #16
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}

0800cb7c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b085      	sub	sp, #20
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
 800cb84:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cb86:	2300      	movs	r3, #0
 800cb88:	60fb      	str	r3, [r7, #12]
 800cb8a:	e014      	b.n	800cbb6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cb8c:	4a0f      	ldr	r2, [pc, #60]	@ (800cbcc <vQueueAddToRegistry+0x50>)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d10b      	bne.n	800cbb0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cb98:	490c      	ldr	r1, [pc, #48]	@ (800cbcc <vQueueAddToRegistry+0x50>)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	683a      	ldr	r2, [r7, #0]
 800cb9e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cba2:	4a0a      	ldr	r2, [pc, #40]	@ (800cbcc <vQueueAddToRegistry+0x50>)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	00db      	lsls	r3, r3, #3
 800cba8:	4413      	add	r3, r2
 800cbaa:	687a      	ldr	r2, [r7, #4]
 800cbac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cbae:	e006      	b.n	800cbbe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	3301      	adds	r3, #1
 800cbb4:	60fb      	str	r3, [r7, #12]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2b07      	cmp	r3, #7
 800cbba:	d9e7      	bls.n	800cb8c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cbbc:	bf00      	nop
 800cbbe:	bf00      	nop
 800cbc0:	3714      	adds	r7, #20
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc8:	4770      	bx	lr
 800cbca:	bf00      	nop
 800cbcc:	200016c4 	.word	0x200016c4

0800cbd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	60f8      	str	r0, [r7, #12]
 800cbd8:	60b9      	str	r1, [r7, #8]
 800cbda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cbe0:	f001 fdca 	bl	800e778 <vPortEnterCritical>
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbea:	b25b      	sxtb	r3, r3
 800cbec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cbf0:	d103      	bne.n	800cbfa <vQueueWaitForMessageRestricted+0x2a>
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	2200      	movs	r2, #0
 800cbf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cbfa:	697b      	ldr	r3, [r7, #20]
 800cbfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc00:	b25b      	sxtb	r3, r3
 800cc02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cc06:	d103      	bne.n	800cc10 <vQueueWaitForMessageRestricted+0x40>
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc10:	f001 fde4 	bl	800e7dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d106      	bne.n	800cc2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	3324      	adds	r3, #36	@ 0x24
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	68b9      	ldr	r1, [r7, #8]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f000 fd67 	bl	800d6f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cc2a:	6978      	ldr	r0, [r7, #20]
 800cc2c:	f7ff ff26 	bl	800ca7c <prvUnlockQueue>
	}
 800cc30:	bf00      	nop
 800cc32:	3718      	adds	r7, #24
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b08e      	sub	sp, #56	@ 0x38
 800cc3c:	af04      	add	r7, sp, #16
 800cc3e:	60f8      	str	r0, [r7, #12]
 800cc40:	60b9      	str	r1, [r7, #8]
 800cc42:	607a      	str	r2, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cc46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d10b      	bne.n	800cc64 <xTaskCreateStatic+0x2c>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
 800cc5c:	623b      	str	r3, [r7, #32]
}
 800cc5e:	bf00      	nop
 800cc60:	bf00      	nop
 800cc62:	e7fd      	b.n	800cc60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10b      	bne.n	800cc82 <xTaskCreateStatic+0x4a>
	__asm volatile
 800cc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	61fb      	str	r3, [r7, #28]
}
 800cc7c:	bf00      	nop
 800cc7e:	bf00      	nop
 800cc80:	e7fd      	b.n	800cc7e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cc82:	23a8      	movs	r3, #168	@ 0xa8
 800cc84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cc86:	693b      	ldr	r3, [r7, #16]
 800cc88:	2ba8      	cmp	r3, #168	@ 0xa8
 800cc8a:	d00b      	beq.n	800cca4 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cc8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc90:	f383 8811 	msr	BASEPRI, r3
 800cc94:	f3bf 8f6f 	isb	sy
 800cc98:	f3bf 8f4f 	dsb	sy
 800cc9c:	61bb      	str	r3, [r7, #24]
}
 800cc9e:	bf00      	nop
 800cca0:	bf00      	nop
 800cca2:	e7fd      	b.n	800cca0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cca4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d01e      	beq.n	800ccea <xTaskCreateStatic+0xb2>
 800ccac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d01b      	beq.n	800ccea <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ccb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccb4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ccb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ccba:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ccbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccbe:	2202      	movs	r2, #2
 800ccc0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	9303      	str	r3, [sp, #12]
 800ccc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccca:	9302      	str	r3, [sp, #8]
 800cccc:	f107 0314 	add.w	r3, r7, #20
 800ccd0:	9301      	str	r3, [sp, #4]
 800ccd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccd4:	9300      	str	r3, [sp, #0]
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	68b9      	ldr	r1, [r7, #8]
 800ccdc:	68f8      	ldr	r0, [r7, #12]
 800ccde:	f000 f851 	bl	800cd84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cce2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cce4:	f000 f8f6 	bl	800ced4 <prvAddNewTaskToReadyList>
 800cce8:	e001      	b.n	800ccee <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ccee:	697b      	ldr	r3, [r7, #20]
	}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3728      	adds	r7, #40	@ 0x28
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08c      	sub	sp, #48	@ 0x30
 800ccfc:	af04      	add	r7, sp, #16
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	603b      	str	r3, [r7, #0]
 800cd04:	4613      	mov	r3, r2
 800cd06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cd08:	88fb      	ldrh	r3, [r7, #6]
 800cd0a:	009b      	lsls	r3, r3, #2
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	f001 fe55 	bl	800e9bc <pvPortMalloc>
 800cd12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00e      	beq.n	800cd38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cd1a:	20a8      	movs	r0, #168	@ 0xa8
 800cd1c:	f001 fe4e 	bl	800e9bc <pvPortMalloc>
 800cd20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d003      	beq.n	800cd30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cd28:	69fb      	ldr	r3, [r7, #28]
 800cd2a:	697a      	ldr	r2, [r7, #20]
 800cd2c:	631a      	str	r2, [r3, #48]	@ 0x30
 800cd2e:	e005      	b.n	800cd3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cd30:	6978      	ldr	r0, [r7, #20]
 800cd32:	f001 ff11 	bl	800eb58 <vPortFree>
 800cd36:	e001      	b.n	800cd3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cd3c:	69fb      	ldr	r3, [r7, #28]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d017      	beq.n	800cd72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cd4a:	88fa      	ldrh	r2, [r7, #6]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	9303      	str	r3, [sp, #12]
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	9302      	str	r3, [sp, #8]
 800cd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	68b9      	ldr	r1, [r7, #8]
 800cd60:	68f8      	ldr	r0, [r7, #12]
 800cd62:	f000 f80f 	bl	800cd84 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd66:	69f8      	ldr	r0, [r7, #28]
 800cd68:	f000 f8b4 	bl	800ced4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	61bb      	str	r3, [r7, #24]
 800cd70:	e002      	b.n	800cd78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cd72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cd78:	69bb      	ldr	r3, [r7, #24]
	}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3720      	adds	r7, #32
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}
	...

0800cd84 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cd84:	b580      	push	{r7, lr}
 800cd86:	b088      	sub	sp, #32
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
 800cd90:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd94:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	461a      	mov	r2, r3
 800cd9c:	21a5      	movs	r1, #165	@ 0xa5
 800cd9e:	f002 fd33 	bl	800f808 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cda2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cda4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800cdac:	3b01      	subs	r3, #1
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	4413      	add	r3, r2
 800cdb2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cdb4:	69bb      	ldr	r3, [r7, #24]
 800cdb6:	f023 0307 	bic.w	r3, r3, #7
 800cdba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cdbc:	69bb      	ldr	r3, [r7, #24]
 800cdbe:	f003 0307 	and.w	r3, r3, #7
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00b      	beq.n	800cdde <prvInitialiseNewTask+0x5a>
	__asm volatile
 800cdc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdca:	f383 8811 	msr	BASEPRI, r3
 800cdce:	f3bf 8f6f 	isb	sy
 800cdd2:	f3bf 8f4f 	dsb	sy
 800cdd6:	617b      	str	r3, [r7, #20]
}
 800cdd8:	bf00      	nop
 800cdda:	bf00      	nop
 800cddc:	e7fd      	b.n	800cdda <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d01f      	beq.n	800ce24 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cde4:	2300      	movs	r3, #0
 800cde6:	61fb      	str	r3, [r7, #28]
 800cde8:	e012      	b.n	800ce10 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	69fb      	ldr	r3, [r7, #28]
 800cdee:	4413      	add	r3, r2
 800cdf0:	7819      	ldrb	r1, [r3, #0]
 800cdf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	4413      	add	r3, r2
 800cdf8:	3334      	adds	r3, #52	@ 0x34
 800cdfa:	460a      	mov	r2, r1
 800cdfc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	4413      	add	r3, r2
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d006      	beq.n	800ce18 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce0a:	69fb      	ldr	r3, [r7, #28]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	61fb      	str	r3, [r7, #28]
 800ce10:	69fb      	ldr	r3, [r7, #28]
 800ce12:	2b0f      	cmp	r3, #15
 800ce14:	d9e9      	bls.n	800cdea <prvInitialiseNewTask+0x66>
 800ce16:	e000      	b.n	800ce1a <prvInitialiseNewTask+0x96>
			{
				break;
 800ce18:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ce1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ce22:	e003      	b.n	800ce2c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ce24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce26:	2200      	movs	r2, #0
 800ce28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ce2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce2e:	2b37      	cmp	r3, #55	@ 0x37
 800ce30:	d901      	bls.n	800ce36 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ce32:	2337      	movs	r3, #55	@ 0x37
 800ce34:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ce36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce3a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ce3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce40:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ce42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce44:	2200      	movs	r2, #0
 800ce46:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ce48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f7ff f965 	bl	800c11c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ce52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce54:	3318      	adds	r3, #24
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7ff f960 	bl	800c11c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ce5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce64:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ce68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ce6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ce70:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ce72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce74:	2200      	movs	r2, #0
 800ce76:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ce7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ce82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce84:	3354      	adds	r3, #84	@ 0x54
 800ce86:	224c      	movs	r2, #76	@ 0x4c
 800ce88:	2100      	movs	r1, #0
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f002 fcbc 	bl	800f808 <memset>
 800ce90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce92:	4a0d      	ldr	r2, [pc, #52]	@ (800cec8 <prvInitialiseNewTask+0x144>)
 800ce94:	659a      	str	r2, [r3, #88]	@ 0x58
 800ce96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce98:	4a0c      	ldr	r2, [pc, #48]	@ (800cecc <prvInitialiseNewTask+0x148>)
 800ce9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ce9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9e:	4a0c      	ldr	r2, [pc, #48]	@ (800ced0 <prvInitialiseNewTask+0x14c>)
 800cea0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cea2:	683a      	ldr	r2, [r7, #0]
 800cea4:	68f9      	ldr	r1, [r7, #12]
 800cea6:	69b8      	ldr	r0, [r7, #24]
 800cea8:	f001 fb36 	bl	800e518 <pxPortInitialiseStack>
 800ceac:	4602      	mov	r2, r0
 800ceae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceb0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ceb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ceb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cebc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cebe:	bf00      	nop
 800cec0:	3720      	adds	r7, #32
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20005958 	.word	0x20005958
 800cecc:	200059c0 	.word	0x200059c0
 800ced0:	20005a28 	.word	0x20005a28

0800ced4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cedc:	f001 fc4c 	bl	800e778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cee0:	4b2d      	ldr	r3, [pc, #180]	@ (800cf98 <prvAddNewTaskToReadyList+0xc4>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	3301      	adds	r3, #1
 800cee6:	4a2c      	ldr	r2, [pc, #176]	@ (800cf98 <prvAddNewTaskToReadyList+0xc4>)
 800cee8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ceea:	4b2c      	ldr	r3, [pc, #176]	@ (800cf9c <prvAddNewTaskToReadyList+0xc8>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d109      	bne.n	800cf06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cef2:	4a2a      	ldr	r2, [pc, #168]	@ (800cf9c <prvAddNewTaskToReadyList+0xc8>)
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cef8:	4b27      	ldr	r3, [pc, #156]	@ (800cf98 <prvAddNewTaskToReadyList+0xc4>)
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d110      	bne.n	800cf22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cf00:	f000 fd28 	bl	800d954 <prvInitialiseTaskLists>
 800cf04:	e00d      	b.n	800cf22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cf06:	4b26      	ldr	r3, [pc, #152]	@ (800cfa0 <prvAddNewTaskToReadyList+0xcc>)
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d109      	bne.n	800cf22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cf0e:	4b23      	ldr	r3, [pc, #140]	@ (800cf9c <prvAddNewTaskToReadyList+0xc8>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d802      	bhi.n	800cf22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cf1c:	4a1f      	ldr	r2, [pc, #124]	@ (800cf9c <prvAddNewTaskToReadyList+0xc8>)
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cf22:	4b20      	ldr	r3, [pc, #128]	@ (800cfa4 <prvAddNewTaskToReadyList+0xd0>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	3301      	adds	r3, #1
 800cf28:	4a1e      	ldr	r2, [pc, #120]	@ (800cfa4 <prvAddNewTaskToReadyList+0xd0>)
 800cf2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cf2c:	4b1d      	ldr	r3, [pc, #116]	@ (800cfa4 <prvAddNewTaskToReadyList+0xd0>)
 800cf2e:	681a      	ldr	r2, [r3, #0]
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf38:	4b1b      	ldr	r3, [pc, #108]	@ (800cfa8 <prvAddNewTaskToReadyList+0xd4>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d903      	bls.n	800cf48 <prvAddNewTaskToReadyList+0x74>
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf44:	4a18      	ldr	r2, [pc, #96]	@ (800cfa8 <prvAddNewTaskToReadyList+0xd4>)
 800cf46:	6013      	str	r3, [r2, #0]
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf4c:	4613      	mov	r3, r2
 800cf4e:	009b      	lsls	r3, r3, #2
 800cf50:	4413      	add	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4a15      	ldr	r2, [pc, #84]	@ (800cfac <prvAddNewTaskToReadyList+0xd8>)
 800cf56:	441a      	add	r2, r3
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	3304      	adds	r3, #4
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	4610      	mov	r0, r2
 800cf60:	f7ff f8e9 	bl	800c136 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cf64:	f001 fc3a 	bl	800e7dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cf68:	4b0d      	ldr	r3, [pc, #52]	@ (800cfa0 <prvAddNewTaskToReadyList+0xcc>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d00e      	beq.n	800cf8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cf70:	4b0a      	ldr	r3, [pc, #40]	@ (800cf9c <prvAddNewTaskToReadyList+0xc8>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf7a:	429a      	cmp	r2, r3
 800cf7c:	d207      	bcs.n	800cf8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cf7e:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb0 <prvAddNewTaskToReadyList+0xdc>)
 800cf80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf84:	601a      	str	r2, [r3, #0]
 800cf86:	f3bf 8f4f 	dsb	sy
 800cf8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf8e:	bf00      	nop
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20001bd8 	.word	0x20001bd8
 800cf9c:	20001704 	.word	0x20001704
 800cfa0:	20001be4 	.word	0x20001be4
 800cfa4:	20001bf4 	.word	0x20001bf4
 800cfa8:	20001be0 	.word	0x20001be0
 800cfac:	20001708 	.word	0x20001708
 800cfb0:	e000ed04 	.word	0xe000ed04

0800cfb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b084      	sub	sp, #16
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d018      	beq.n	800cff8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cfc6:	4b14      	ldr	r3, [pc, #80]	@ (800d018 <vTaskDelay+0x64>)
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d00b      	beq.n	800cfe6 <vTaskDelay+0x32>
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	60bb      	str	r3, [r7, #8]
}
 800cfe0:	bf00      	nop
 800cfe2:	bf00      	nop
 800cfe4:	e7fd      	b.n	800cfe2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800cfe6:	f000 f88b 	bl	800d100 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cfea:	2100      	movs	r1, #0
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f000 fee5 	bl	800ddbc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cff2:	f000 f893 	bl	800d11c <xTaskResumeAll>
 800cff6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d107      	bne.n	800d00e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cffe:	4b07      	ldr	r3, [pc, #28]	@ (800d01c <vTaskDelay+0x68>)
 800d000:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	f3bf 8f4f 	dsb	sy
 800d00a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d00e:	bf00      	nop
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	20001c00 	.word	0x20001c00
 800d01c:	e000ed04 	.word	0xe000ed04

0800d020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b08a      	sub	sp, #40	@ 0x28
 800d024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d026:	2300      	movs	r3, #0
 800d028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d02a:	2300      	movs	r3, #0
 800d02c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d02e:	463a      	mov	r2, r7
 800d030:	1d39      	adds	r1, r7, #4
 800d032:	f107 0308 	add.w	r3, r7, #8
 800d036:	4618      	mov	r0, r3
 800d038:	f7ff f81c 	bl	800c074 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d03c:	6839      	ldr	r1, [r7, #0]
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	9202      	str	r2, [sp, #8]
 800d044:	9301      	str	r3, [sp, #4]
 800d046:	2300      	movs	r3, #0
 800d048:	9300      	str	r3, [sp, #0]
 800d04a:	2300      	movs	r3, #0
 800d04c:	460a      	mov	r2, r1
 800d04e:	4924      	ldr	r1, [pc, #144]	@ (800d0e0 <vTaskStartScheduler+0xc0>)
 800d050:	4824      	ldr	r0, [pc, #144]	@ (800d0e4 <vTaskStartScheduler+0xc4>)
 800d052:	f7ff fdf1 	bl	800cc38 <xTaskCreateStatic>
 800d056:	4603      	mov	r3, r0
 800d058:	4a23      	ldr	r2, [pc, #140]	@ (800d0e8 <vTaskStartScheduler+0xc8>)
 800d05a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d05c:	4b22      	ldr	r3, [pc, #136]	@ (800d0e8 <vTaskStartScheduler+0xc8>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d064:	2301      	movs	r3, #1
 800d066:	617b      	str	r3, [r7, #20]
 800d068:	e001      	b.n	800d06e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d102      	bne.n	800d07a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d074:	f000 fef6 	bl	800de64 <xTimerCreateTimerTask>
 800d078:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d11b      	bne.n	800d0b8 <vTaskStartScheduler+0x98>
	__asm volatile
 800d080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d084:	f383 8811 	msr	BASEPRI, r3
 800d088:	f3bf 8f6f 	isb	sy
 800d08c:	f3bf 8f4f 	dsb	sy
 800d090:	613b      	str	r3, [r7, #16]
}
 800d092:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d094:	4b15      	ldr	r3, [pc, #84]	@ (800d0ec <vTaskStartScheduler+0xcc>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	3354      	adds	r3, #84	@ 0x54
 800d09a:	4a15      	ldr	r2, [pc, #84]	@ (800d0f0 <vTaskStartScheduler+0xd0>)
 800d09c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d09e:	4b15      	ldr	r3, [pc, #84]	@ (800d0f4 <vTaskStartScheduler+0xd4>)
 800d0a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d0a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d0a6:	4b14      	ldr	r3, [pc, #80]	@ (800d0f8 <vTaskStartScheduler+0xd8>)
 800d0a8:	2201      	movs	r2, #1
 800d0aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d0ac:	4b13      	ldr	r3, [pc, #76]	@ (800d0fc <vTaskStartScheduler+0xdc>)
 800d0ae:	2200      	movs	r2, #0
 800d0b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d0b2:	f001 fabd 	bl	800e630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d0b6:	e00f      	b.n	800d0d8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0be:	d10b      	bne.n	800d0d8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d0c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0c4:	f383 8811 	msr	BASEPRI, r3
 800d0c8:	f3bf 8f6f 	isb	sy
 800d0cc:	f3bf 8f4f 	dsb	sy
 800d0d0:	60fb      	str	r3, [r7, #12]
}
 800d0d2:	bf00      	nop
 800d0d4:	bf00      	nop
 800d0d6:	e7fd      	b.n	800d0d4 <vTaskStartScheduler+0xb4>
}
 800d0d8:	bf00      	nop
 800d0da:	3718      	adds	r7, #24
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}
 800d0e0:	08011b8c 	.word	0x08011b8c
 800d0e4:	0800d925 	.word	0x0800d925
 800d0e8:	20001bfc 	.word	0x20001bfc
 800d0ec:	20001704 	.word	0x20001704
 800d0f0:	20000048 	.word	0x20000048
 800d0f4:	20001bf8 	.word	0x20001bf8
 800d0f8:	20001be4 	.word	0x20001be4
 800d0fc:	20001bdc 	.word	0x20001bdc

0800d100 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d100:	b480      	push	{r7}
 800d102:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d104:	4b04      	ldr	r3, [pc, #16]	@ (800d118 <vTaskSuspendAll+0x18>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	3301      	adds	r3, #1
 800d10a:	4a03      	ldr	r2, [pc, #12]	@ (800d118 <vTaskSuspendAll+0x18>)
 800d10c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d10e:	bf00      	nop
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	20001c00 	.word	0x20001c00

0800d11c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d122:	2300      	movs	r3, #0
 800d124:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d126:	2300      	movs	r3, #0
 800d128:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d12a:	4b42      	ldr	r3, [pc, #264]	@ (800d234 <xTaskResumeAll+0x118>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d10b      	bne.n	800d14a <xTaskResumeAll+0x2e>
	__asm volatile
 800d132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d136:	f383 8811 	msr	BASEPRI, r3
 800d13a:	f3bf 8f6f 	isb	sy
 800d13e:	f3bf 8f4f 	dsb	sy
 800d142:	603b      	str	r3, [r7, #0]
}
 800d144:	bf00      	nop
 800d146:	bf00      	nop
 800d148:	e7fd      	b.n	800d146 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d14a:	f001 fb15 	bl	800e778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d14e:	4b39      	ldr	r3, [pc, #228]	@ (800d234 <xTaskResumeAll+0x118>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3b01      	subs	r3, #1
 800d154:	4a37      	ldr	r2, [pc, #220]	@ (800d234 <xTaskResumeAll+0x118>)
 800d156:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d158:	4b36      	ldr	r3, [pc, #216]	@ (800d234 <xTaskResumeAll+0x118>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d162      	bne.n	800d226 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d160:	4b35      	ldr	r3, [pc, #212]	@ (800d238 <xTaskResumeAll+0x11c>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d05e      	beq.n	800d226 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d168:	e02f      	b.n	800d1ca <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d16a:	4b34      	ldr	r3, [pc, #208]	@ (800d23c <xTaskResumeAll+0x120>)
 800d16c:	68db      	ldr	r3, [r3, #12]
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	3318      	adds	r3, #24
 800d176:	4618      	mov	r0, r3
 800d178:	f7ff f83a 	bl	800c1f0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	3304      	adds	r3, #4
 800d180:	4618      	mov	r0, r3
 800d182:	f7ff f835 	bl	800c1f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d18a:	4b2d      	ldr	r3, [pc, #180]	@ (800d240 <xTaskResumeAll+0x124>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	d903      	bls.n	800d19a <xTaskResumeAll+0x7e>
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d196:	4a2a      	ldr	r2, [pc, #168]	@ (800d240 <xTaskResumeAll+0x124>)
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d19e:	4613      	mov	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	009b      	lsls	r3, r3, #2
 800d1a6:	4a27      	ldr	r2, [pc, #156]	@ (800d244 <xTaskResumeAll+0x128>)
 800d1a8:	441a      	add	r2, r3
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	3304      	adds	r3, #4
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	4610      	mov	r0, r2
 800d1b2:	f7fe ffc0 	bl	800c136 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1ba:	4b23      	ldr	r3, [pc, #140]	@ (800d248 <xTaskResumeAll+0x12c>)
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d302      	bcc.n	800d1ca <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d1c4:	4b21      	ldr	r3, [pc, #132]	@ (800d24c <xTaskResumeAll+0x130>)
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d1ca:	4b1c      	ldr	r3, [pc, #112]	@ (800d23c <xTaskResumeAll+0x120>)
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d1cb      	bne.n	800d16a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d001      	beq.n	800d1dc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d1d8:	f000 fc60 	bl	800da9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d1dc:	4b1c      	ldr	r3, [pc, #112]	@ (800d250 <xTaskResumeAll+0x134>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d010      	beq.n	800d20a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d1e8:	f000 f940 	bl	800d46c <xTaskIncrementTick>
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d002      	beq.n	800d1f8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d1f2:	4b16      	ldr	r3, [pc, #88]	@ (800d24c <xTaskResumeAll+0x130>)
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	3b01      	subs	r3, #1
 800d1fc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1f1      	bne.n	800d1e8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d204:	4b12      	ldr	r3, [pc, #72]	@ (800d250 <xTaskResumeAll+0x134>)
 800d206:	2200      	movs	r2, #0
 800d208:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d20a:	4b10      	ldr	r3, [pc, #64]	@ (800d24c <xTaskResumeAll+0x130>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d009      	beq.n	800d226 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d212:	2301      	movs	r3, #1
 800d214:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d216:	4b0f      	ldr	r3, [pc, #60]	@ (800d254 <xTaskResumeAll+0x138>)
 800d218:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d21c:	601a      	str	r2, [r3, #0]
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d226:	f001 fad9 	bl	800e7dc <vPortExitCritical>

	return xAlreadyYielded;
 800d22a:	68bb      	ldr	r3, [r7, #8]
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3710      	adds	r7, #16
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}
 800d234:	20001c00 	.word	0x20001c00
 800d238:	20001bd8 	.word	0x20001bd8
 800d23c:	20001b98 	.word	0x20001b98
 800d240:	20001be0 	.word	0x20001be0
 800d244:	20001708 	.word	0x20001708
 800d248:	20001704 	.word	0x20001704
 800d24c:	20001bec 	.word	0x20001bec
 800d250:	20001be8 	.word	0x20001be8
 800d254:	e000ed04 	.word	0xe000ed04

0800d258 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d25e:	4b05      	ldr	r3, [pc, #20]	@ (800d274 <xTaskGetTickCount+0x1c>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d264:	687b      	ldr	r3, [r7, #4]
}
 800d266:	4618      	mov	r0, r3
 800d268:	370c      	adds	r7, #12
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	20001bdc 	.word	0x20001bdc

0800d278 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d102      	bne.n	800d28c <pcTaskGetName+0x14>
 800d286:	4b0e      	ldr	r3, [pc, #56]	@ (800d2c0 <pcTaskGetName+0x48>)
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	e000      	b.n	800d28e <pcTaskGetName+0x16>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d10b      	bne.n	800d2ae <pcTaskGetName+0x36>
	__asm volatile
 800d296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d29a:	f383 8811 	msr	BASEPRI, r3
 800d29e:	f3bf 8f6f 	isb	sy
 800d2a2:	f3bf 8f4f 	dsb	sy
 800d2a6:	60bb      	str	r3, [r7, #8]
}
 800d2a8:	bf00      	nop
 800d2aa:	bf00      	nop
 800d2ac:	e7fd      	b.n	800d2aa <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	3334      	adds	r3, #52	@ 0x34
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3714      	adds	r7, #20
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr
 800d2be:	bf00      	nop
 800d2c0:	20001704 	.word	0x20001704

0800d2c4 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b08b      	sub	sp, #44	@ 0x2c
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	6078      	str	r0, [r7, #4]
 800d2cc:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d05b      	beq.n	800d392 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	61bb      	str	r3, [r7, #24]
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	685b      	ldr	r3, [r3, #4]
 800d2e2:	685a      	ldr	r2, [r3, #4]
 800d2e4:	69bb      	ldr	r3, [r7, #24]
 800d2e6:	605a      	str	r2, [r3, #4]
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	685a      	ldr	r2, [r3, #4]
 800d2ec:	69bb      	ldr	r3, [r7, #24]
 800d2ee:	3308      	adds	r3, #8
 800d2f0:	429a      	cmp	r2, r3
 800d2f2:	d104      	bne.n	800d2fe <prvSearchForNameWithinSingleList+0x3a>
 800d2f4:	69bb      	ldr	r3, [r7, #24]
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	685a      	ldr	r2, [r3, #4]
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	605a      	str	r2, [r3, #4]
 800d2fe:	69bb      	ldr	r3, [r7, #24]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	613b      	str	r3, [r7, #16]
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	685b      	ldr	r3, [r3, #4]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	605a      	str	r2, [r3, #4]
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	685a      	ldr	r2, [r3, #4]
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	3308      	adds	r3, #8
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d104      	bne.n	800d32a <prvSearchForNameWithinSingleList+0x66>
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	685b      	ldr	r3, [r3, #4]
 800d324:	685a      	ldr	r2, [r3, #4]
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	605a      	str	r2, [r3, #4]
 800d32a:	693b      	ldr	r3, [r7, #16]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	68db      	ldr	r3, [r3, #12]
 800d330:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800d332:	2300      	movs	r3, #0
 800d334:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d336:	2300      	movs	r3, #0
 800d338:	623b      	str	r3, [r7, #32]
 800d33a:	e01c      	b.n	800d376 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800d33c:	68fa      	ldr	r2, [r7, #12]
 800d33e:	6a3b      	ldr	r3, [r7, #32]
 800d340:	4413      	add	r3, r2
 800d342:	3334      	adds	r3, #52	@ 0x34
 800d344:	781b      	ldrb	r3, [r3, #0]
 800d346:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800d348:	683a      	ldr	r2, [r7, #0]
 800d34a:	6a3b      	ldr	r3, [r7, #32]
 800d34c:	4413      	add	r3, r2
 800d34e:	781b      	ldrb	r3, [r3, #0]
 800d350:	7afa      	ldrb	r2, [r7, #11]
 800d352:	429a      	cmp	r2, r3
 800d354:	d002      	beq.n	800d35c <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800d356:	2301      	movs	r3, #1
 800d358:	61fb      	str	r3, [r7, #28]
 800d35a:	e006      	b.n	800d36a <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800d35c:	7afb      	ldrb	r3, [r7, #11]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d103      	bne.n	800d36a <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800d366:	2301      	movs	r3, #1
 800d368:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800d36a:	69fb      	ldr	r3, [r7, #28]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d106      	bne.n	800d37e <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d370:	6a3b      	ldr	r3, [r7, #32]
 800d372:	3301      	adds	r3, #1
 800d374:	623b      	str	r3, [r7, #32]
 800d376:	6a3b      	ldr	r3, [r7, #32]
 800d378:	2b0f      	cmp	r3, #15
 800d37a:	d9df      	bls.n	800d33c <prvSearchForNameWithinSingleList+0x78>
 800d37c:	e000      	b.n	800d380 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800d37e:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800d380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d382:	2b00      	cmp	r3, #0
 800d384:	d104      	bne.n	800d390 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	697b      	ldr	r3, [r7, #20]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d1bb      	bne.n	800d306 <prvSearchForNameWithinSingleList+0x42>
 800d38e:	e000      	b.n	800d392 <prvSearchForNameWithinSingleList+0xce>
					break;
 800d390:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800d392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800d394:	4618      	mov	r0, r3
 800d396:	372c      	adds	r7, #44	@ 0x2c
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr

0800d3a0 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b086      	sub	sp, #24
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800d3a8:	2338      	movs	r3, #56	@ 0x38
 800d3aa:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800d3ac:	6878      	ldr	r0, [r7, #4]
 800d3ae:	f7f2 ff5f 	bl	8000270 <strlen>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2b0f      	cmp	r3, #15
 800d3b6:	d90b      	bls.n	800d3d0 <xTaskGetHandle+0x30>
	__asm volatile
 800d3b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3bc:	f383 8811 	msr	BASEPRI, r3
 800d3c0:	f3bf 8f6f 	isb	sy
 800d3c4:	f3bf 8f4f 	dsb	sy
 800d3c8:	60fb      	str	r3, [r7, #12]
}
 800d3ca:	bf00      	nop
 800d3cc:	bf00      	nop
 800d3ce:	e7fd      	b.n	800d3cc <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800d3d0:	f7ff fe96 	bl	800d100 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800d3d4:	697b      	ldr	r3, [r7, #20]
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800d3da:	697a      	ldr	r2, [r7, #20]
 800d3dc:	4613      	mov	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	4413      	add	r3, r2
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4a1c      	ldr	r2, [pc, #112]	@ (800d458 <xTaskGetHandle+0xb8>)
 800d3e6:	4413      	add	r3, r2
 800d3e8:	6879      	ldr	r1, [r7, #4]
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f7ff ff6a 	bl	800d2c4 <prvSearchForNameWithinSingleList>
 800d3f0:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800d3f2:	693b      	ldr	r3, [r7, #16]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d103      	bne.n	800d400 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1ea      	bne.n	800d3d4 <xTaskGetHandle+0x34>
 800d3fe:	e000      	b.n	800d402 <xTaskGetHandle+0x62>
					break;
 800d400:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800d402:	693b      	ldr	r3, [r7, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d106      	bne.n	800d416 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800d408:	4b14      	ldr	r3, [pc, #80]	@ (800d45c <xTaskGetHandle+0xbc>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	6879      	ldr	r1, [r7, #4]
 800d40e:	4618      	mov	r0, r3
 800d410:	f7ff ff58 	bl	800d2c4 <prvSearchForNameWithinSingleList>
 800d414:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d106      	bne.n	800d42a <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800d41c:	4b10      	ldr	r3, [pc, #64]	@ (800d460 <xTaskGetHandle+0xc0>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	6879      	ldr	r1, [r7, #4]
 800d422:	4618      	mov	r0, r3
 800d424:	f7ff ff4e 	bl	800d2c4 <prvSearchForNameWithinSingleList>
 800d428:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d104      	bne.n	800d43a <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	480c      	ldr	r0, [pc, #48]	@ (800d464 <xTaskGetHandle+0xc4>)
 800d434:	f7ff ff46 	bl	800d2c4 <prvSearchForNameWithinSingleList>
 800d438:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d104      	bne.n	800d44a <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800d440:	6879      	ldr	r1, [r7, #4]
 800d442:	4809      	ldr	r0, [pc, #36]	@ (800d468 <xTaskGetHandle+0xc8>)
 800d444:	f7ff ff3e 	bl	800d2c4 <prvSearchForNameWithinSingleList>
 800d448:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800d44a:	f7ff fe67 	bl	800d11c <xTaskResumeAll>

		return pxTCB;
 800d44e:	693b      	ldr	r3, [r7, #16]
	}
 800d450:	4618      	mov	r0, r3
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	20001708 	.word	0x20001708
 800d45c:	20001b90 	.word	0x20001b90
 800d460:	20001b94 	.word	0x20001b94
 800d464:	20001bc4 	.word	0x20001bc4
 800d468:	20001bac 	.word	0x20001bac

0800d46c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b086      	sub	sp, #24
 800d470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d472:	2300      	movs	r3, #0
 800d474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d476:	4b4f      	ldr	r3, [pc, #316]	@ (800d5b4 <xTaskIncrementTick+0x148>)
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f040 8090 	bne.w	800d5a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d480:	4b4d      	ldr	r3, [pc, #308]	@ (800d5b8 <xTaskIncrementTick+0x14c>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3301      	adds	r3, #1
 800d486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d488:	4a4b      	ldr	r2, [pc, #300]	@ (800d5b8 <xTaskIncrementTick+0x14c>)
 800d48a:	693b      	ldr	r3, [r7, #16]
 800d48c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d121      	bne.n	800d4d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d494:	4b49      	ldr	r3, [pc, #292]	@ (800d5bc <xTaskIncrementTick+0x150>)
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00b      	beq.n	800d4b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a2:	f383 8811 	msr	BASEPRI, r3
 800d4a6:	f3bf 8f6f 	isb	sy
 800d4aa:	f3bf 8f4f 	dsb	sy
 800d4ae:	603b      	str	r3, [r7, #0]
}
 800d4b0:	bf00      	nop
 800d4b2:	bf00      	nop
 800d4b4:	e7fd      	b.n	800d4b2 <xTaskIncrementTick+0x46>
 800d4b6:	4b41      	ldr	r3, [pc, #260]	@ (800d5bc <xTaskIncrementTick+0x150>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	60fb      	str	r3, [r7, #12]
 800d4bc:	4b40      	ldr	r3, [pc, #256]	@ (800d5c0 <xTaskIncrementTick+0x154>)
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	4a3e      	ldr	r2, [pc, #248]	@ (800d5bc <xTaskIncrementTick+0x150>)
 800d4c2:	6013      	str	r3, [r2, #0]
 800d4c4:	4a3e      	ldr	r2, [pc, #248]	@ (800d5c0 <xTaskIncrementTick+0x154>)
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6013      	str	r3, [r2, #0]
 800d4ca:	4b3e      	ldr	r3, [pc, #248]	@ (800d5c4 <xTaskIncrementTick+0x158>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	4a3c      	ldr	r2, [pc, #240]	@ (800d5c4 <xTaskIncrementTick+0x158>)
 800d4d2:	6013      	str	r3, [r2, #0]
 800d4d4:	f000 fae2 	bl	800da9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d4d8:	4b3b      	ldr	r3, [pc, #236]	@ (800d5c8 <xTaskIncrementTick+0x15c>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	693a      	ldr	r2, [r7, #16]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d349      	bcc.n	800d576 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4e2:	4b36      	ldr	r3, [pc, #216]	@ (800d5bc <xTaskIncrementTick+0x150>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d104      	bne.n	800d4f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ec:	4b36      	ldr	r3, [pc, #216]	@ (800d5c8 <xTaskIncrementTick+0x15c>)
 800d4ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d4f2:	601a      	str	r2, [r3, #0]
					break;
 800d4f4:	e03f      	b.n	800d576 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4f6:	4b31      	ldr	r3, [pc, #196]	@ (800d5bc <xTaskIncrementTick+0x150>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	68db      	ldr	r3, [r3, #12]
 800d4fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	685b      	ldr	r3, [r3, #4]
 800d504:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d506:	693a      	ldr	r2, [r7, #16]
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d203      	bcs.n	800d516 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d50e:	4a2e      	ldr	r2, [pc, #184]	@ (800d5c8 <xTaskIncrementTick+0x15c>)
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d514:	e02f      	b.n	800d576 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	3304      	adds	r3, #4
 800d51a:	4618      	mov	r0, r3
 800d51c:	f7fe fe68 	bl	800c1f0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d524:	2b00      	cmp	r3, #0
 800d526:	d004      	beq.n	800d532 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d528:	68bb      	ldr	r3, [r7, #8]
 800d52a:	3318      	adds	r3, #24
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7fe fe5f 	bl	800c1f0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d532:	68bb      	ldr	r3, [r7, #8]
 800d534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d536:	4b25      	ldr	r3, [pc, #148]	@ (800d5cc <xTaskIncrementTick+0x160>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	429a      	cmp	r2, r3
 800d53c:	d903      	bls.n	800d546 <xTaskIncrementTick+0xda>
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d542:	4a22      	ldr	r2, [pc, #136]	@ (800d5cc <xTaskIncrementTick+0x160>)
 800d544:	6013      	str	r3, [r2, #0]
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d54a:	4613      	mov	r3, r2
 800d54c:	009b      	lsls	r3, r3, #2
 800d54e:	4413      	add	r3, r2
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4a1f      	ldr	r2, [pc, #124]	@ (800d5d0 <xTaskIncrementTick+0x164>)
 800d554:	441a      	add	r2, r3
 800d556:	68bb      	ldr	r3, [r7, #8]
 800d558:	3304      	adds	r3, #4
 800d55a:	4619      	mov	r1, r3
 800d55c:	4610      	mov	r0, r2
 800d55e:	f7fe fdea 	bl	800c136 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d562:	68bb      	ldr	r3, [r7, #8]
 800d564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d566:	4b1b      	ldr	r3, [pc, #108]	@ (800d5d4 <xTaskIncrementTick+0x168>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d3b8      	bcc.n	800d4e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d570:	2301      	movs	r3, #1
 800d572:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d574:	e7b5      	b.n	800d4e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d576:	4b17      	ldr	r3, [pc, #92]	@ (800d5d4 <xTaskIncrementTick+0x168>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d57c:	4914      	ldr	r1, [pc, #80]	@ (800d5d0 <xTaskIncrementTick+0x164>)
 800d57e:	4613      	mov	r3, r2
 800d580:	009b      	lsls	r3, r3, #2
 800d582:	4413      	add	r3, r2
 800d584:	009b      	lsls	r3, r3, #2
 800d586:	440b      	add	r3, r1
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d901      	bls.n	800d592 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d58e:	2301      	movs	r3, #1
 800d590:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d592:	4b11      	ldr	r3, [pc, #68]	@ (800d5d8 <xTaskIncrementTick+0x16c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d007      	beq.n	800d5aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d59a:	2301      	movs	r3, #1
 800d59c:	617b      	str	r3, [r7, #20]
 800d59e:	e004      	b.n	800d5aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d5a0:	4b0e      	ldr	r3, [pc, #56]	@ (800d5dc <xTaskIncrementTick+0x170>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	4a0d      	ldr	r2, [pc, #52]	@ (800d5dc <xTaskIncrementTick+0x170>)
 800d5a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d5aa:	697b      	ldr	r3, [r7, #20]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3718      	adds	r7, #24
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	20001c00 	.word	0x20001c00
 800d5b8:	20001bdc 	.word	0x20001bdc
 800d5bc:	20001b90 	.word	0x20001b90
 800d5c0:	20001b94 	.word	0x20001b94
 800d5c4:	20001bf0 	.word	0x20001bf0
 800d5c8:	20001bf8 	.word	0x20001bf8
 800d5cc:	20001be0 	.word	0x20001be0
 800d5d0:	20001708 	.word	0x20001708
 800d5d4:	20001704 	.word	0x20001704
 800d5d8:	20001bec 	.word	0x20001bec
 800d5dc:	20001be8 	.word	0x20001be8

0800d5e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d5e6:	4b2b      	ldr	r3, [pc, #172]	@ (800d694 <vTaskSwitchContext+0xb4>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d003      	beq.n	800d5f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d5ee:	4b2a      	ldr	r3, [pc, #168]	@ (800d698 <vTaskSwitchContext+0xb8>)
 800d5f0:	2201      	movs	r2, #1
 800d5f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d5f4:	e047      	b.n	800d686 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d5f6:	4b28      	ldr	r3, [pc, #160]	@ (800d698 <vTaskSwitchContext+0xb8>)
 800d5f8:	2200      	movs	r2, #0
 800d5fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5fc:	4b27      	ldr	r3, [pc, #156]	@ (800d69c <vTaskSwitchContext+0xbc>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	60fb      	str	r3, [r7, #12]
 800d602:	e011      	b.n	800d628 <vTaskSwitchContext+0x48>
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10b      	bne.n	800d622 <vTaskSwitchContext+0x42>
	__asm volatile
 800d60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60e:	f383 8811 	msr	BASEPRI, r3
 800d612:	f3bf 8f6f 	isb	sy
 800d616:	f3bf 8f4f 	dsb	sy
 800d61a:	607b      	str	r3, [r7, #4]
}
 800d61c:	bf00      	nop
 800d61e:	bf00      	nop
 800d620:	e7fd      	b.n	800d61e <vTaskSwitchContext+0x3e>
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	3b01      	subs	r3, #1
 800d626:	60fb      	str	r3, [r7, #12]
 800d628:	491d      	ldr	r1, [pc, #116]	@ (800d6a0 <vTaskSwitchContext+0xc0>)
 800d62a:	68fa      	ldr	r2, [r7, #12]
 800d62c:	4613      	mov	r3, r2
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	4413      	add	r3, r2
 800d632:	009b      	lsls	r3, r3, #2
 800d634:	440b      	add	r3, r1
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d0e3      	beq.n	800d604 <vTaskSwitchContext+0x24>
 800d63c:	68fa      	ldr	r2, [r7, #12]
 800d63e:	4613      	mov	r3, r2
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4413      	add	r3, r2
 800d644:	009b      	lsls	r3, r3, #2
 800d646:	4a16      	ldr	r2, [pc, #88]	@ (800d6a0 <vTaskSwitchContext+0xc0>)
 800d648:	4413      	add	r3, r2
 800d64a:	60bb      	str	r3, [r7, #8]
 800d64c:	68bb      	ldr	r3, [r7, #8]
 800d64e:	685b      	ldr	r3, [r3, #4]
 800d650:	685a      	ldr	r2, [r3, #4]
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	605a      	str	r2, [r3, #4]
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	685a      	ldr	r2, [r3, #4]
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	3308      	adds	r3, #8
 800d65e:	429a      	cmp	r2, r3
 800d660:	d104      	bne.n	800d66c <vTaskSwitchContext+0x8c>
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	685b      	ldr	r3, [r3, #4]
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	605a      	str	r2, [r3, #4]
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	4a0c      	ldr	r2, [pc, #48]	@ (800d6a4 <vTaskSwitchContext+0xc4>)
 800d674:	6013      	str	r3, [r2, #0]
 800d676:	4a09      	ldr	r2, [pc, #36]	@ (800d69c <vTaskSwitchContext+0xbc>)
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d67c:	4b09      	ldr	r3, [pc, #36]	@ (800d6a4 <vTaskSwitchContext+0xc4>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	3354      	adds	r3, #84	@ 0x54
 800d682:	4a09      	ldr	r2, [pc, #36]	@ (800d6a8 <vTaskSwitchContext+0xc8>)
 800d684:	6013      	str	r3, [r2, #0]
}
 800d686:	bf00      	nop
 800d688:	3714      	adds	r7, #20
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr
 800d692:	bf00      	nop
 800d694:	20001c00 	.word	0x20001c00
 800d698:	20001bec 	.word	0x20001bec
 800d69c:	20001be0 	.word	0x20001be0
 800d6a0:	20001708 	.word	0x20001708
 800d6a4:	20001704 	.word	0x20001704
 800d6a8:	20000048 	.word	0x20000048

0800d6ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d10b      	bne.n	800d6d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	60fb      	str	r3, [r7, #12]
}
 800d6ce:	bf00      	nop
 800d6d0:	bf00      	nop
 800d6d2:	e7fd      	b.n	800d6d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6d4:	4b07      	ldr	r3, [pc, #28]	@ (800d6f4 <vTaskPlaceOnEventList+0x48>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	3318      	adds	r3, #24
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f7fe fd4e 	bl	800c17e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d6e2:	2101      	movs	r1, #1
 800d6e4:	6838      	ldr	r0, [r7, #0]
 800d6e6:	f000 fb69 	bl	800ddbc <prvAddCurrentTaskToDelayedList>
}
 800d6ea:	bf00      	nop
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	20001704 	.word	0x20001704

0800d6f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	60f8      	str	r0, [r7, #12]
 800d700:	60b9      	str	r1, [r7, #8]
 800d702:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10b      	bne.n	800d722 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70e:	f383 8811 	msr	BASEPRI, r3
 800d712:	f3bf 8f6f 	isb	sy
 800d716:	f3bf 8f4f 	dsb	sy
 800d71a:	617b      	str	r3, [r7, #20]
}
 800d71c:	bf00      	nop
 800d71e:	bf00      	nop
 800d720:	e7fd      	b.n	800d71e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d722:	4b0a      	ldr	r3, [pc, #40]	@ (800d74c <vTaskPlaceOnEventListRestricted+0x54>)
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	3318      	adds	r3, #24
 800d728:	4619      	mov	r1, r3
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f7fe fd03 	bl	800c136 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d002      	beq.n	800d73c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d73a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d73c:	6879      	ldr	r1, [r7, #4]
 800d73e:	68b8      	ldr	r0, [r7, #8]
 800d740:	f000 fb3c 	bl	800ddbc <prvAddCurrentTaskToDelayedList>
	}
 800d744:	bf00      	nop
 800d746:	3718      	adds	r7, #24
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}
 800d74c:	20001704 	.word	0x20001704

0800d750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b086      	sub	sp, #24
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	68db      	ldr	r3, [r3, #12]
 800d75c:	68db      	ldr	r3, [r3, #12]
 800d75e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d760:	693b      	ldr	r3, [r7, #16]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10b      	bne.n	800d77e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	60fb      	str	r3, [r7, #12]
}
 800d778:	bf00      	nop
 800d77a:	bf00      	nop
 800d77c:	e7fd      	b.n	800d77a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	3318      	adds	r3, #24
 800d782:	4618      	mov	r0, r3
 800d784:	f7fe fd34 	bl	800c1f0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d788:	4b1d      	ldr	r3, [pc, #116]	@ (800d800 <xTaskRemoveFromEventList+0xb0>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d11d      	bne.n	800d7cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d790:	693b      	ldr	r3, [r7, #16]
 800d792:	3304      	adds	r3, #4
 800d794:	4618      	mov	r0, r3
 800d796:	f7fe fd2b 	bl	800c1f0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d79e:	4b19      	ldr	r3, [pc, #100]	@ (800d804 <xTaskRemoveFromEventList+0xb4>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d903      	bls.n	800d7ae <xTaskRemoveFromEventList+0x5e>
 800d7a6:	693b      	ldr	r3, [r7, #16]
 800d7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7aa:	4a16      	ldr	r2, [pc, #88]	@ (800d804 <xTaskRemoveFromEventList+0xb4>)
 800d7ac:	6013      	str	r3, [r2, #0]
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	4413      	add	r3, r2
 800d7b8:	009b      	lsls	r3, r3, #2
 800d7ba:	4a13      	ldr	r2, [pc, #76]	@ (800d808 <xTaskRemoveFromEventList+0xb8>)
 800d7bc:	441a      	add	r2, r3
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	4610      	mov	r0, r2
 800d7c6:	f7fe fcb6 	bl	800c136 <vListInsertEnd>
 800d7ca:	e005      	b.n	800d7d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	3318      	adds	r3, #24
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	480e      	ldr	r0, [pc, #56]	@ (800d80c <xTaskRemoveFromEventList+0xbc>)
 800d7d4:	f7fe fcaf 	bl	800c136 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d7dc:	4b0c      	ldr	r3, [pc, #48]	@ (800d810 <xTaskRemoveFromEventList+0xc0>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d905      	bls.n	800d7f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d7e6:	2301      	movs	r3, #1
 800d7e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d7ea:	4b0a      	ldr	r3, [pc, #40]	@ (800d814 <xTaskRemoveFromEventList+0xc4>)
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	e001      	b.n	800d7f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d7f6:	697b      	ldr	r3, [r7, #20]
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3718      	adds	r7, #24
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	20001c00 	.word	0x20001c00
 800d804:	20001be0 	.word	0x20001be0
 800d808:	20001708 	.word	0x20001708
 800d80c:	20001b98 	.word	0x20001b98
 800d810:	20001704 	.word	0x20001704
 800d814:	20001bec 	.word	0x20001bec

0800d818 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d818:	b480      	push	{r7}
 800d81a:	b083      	sub	sp, #12
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d820:	4b06      	ldr	r3, [pc, #24]	@ (800d83c <vTaskInternalSetTimeOutState+0x24>)
 800d822:	681a      	ldr	r2, [r3, #0]
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d828:	4b05      	ldr	r3, [pc, #20]	@ (800d840 <vTaskInternalSetTimeOutState+0x28>)
 800d82a:	681a      	ldr	r2, [r3, #0]
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	605a      	str	r2, [r3, #4]
}
 800d830:	bf00      	nop
 800d832:	370c      	adds	r7, #12
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	20001bf0 	.word	0x20001bf0
 800d840:	20001bdc 	.word	0x20001bdc

0800d844 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10b      	bne.n	800d86c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d858:	f383 8811 	msr	BASEPRI, r3
 800d85c:	f3bf 8f6f 	isb	sy
 800d860:	f3bf 8f4f 	dsb	sy
 800d864:	613b      	str	r3, [r7, #16]
}
 800d866:	bf00      	nop
 800d868:	bf00      	nop
 800d86a:	e7fd      	b.n	800d868 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d10b      	bne.n	800d88a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	60fb      	str	r3, [r7, #12]
}
 800d884:	bf00      	nop
 800d886:	bf00      	nop
 800d888:	e7fd      	b.n	800d886 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d88a:	f000 ff75 	bl	800e778 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d88e:	4b1d      	ldr	r3, [pc, #116]	@ (800d904 <xTaskCheckForTimeOut+0xc0>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	685b      	ldr	r3, [r3, #4]
 800d898:	69ba      	ldr	r2, [r7, #24]
 800d89a:	1ad3      	subs	r3, r2, r3
 800d89c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8a6:	d102      	bne.n	800d8ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	61fb      	str	r3, [r7, #28]
 800d8ac:	e023      	b.n	800d8f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681a      	ldr	r2, [r3, #0]
 800d8b2:	4b15      	ldr	r3, [pc, #84]	@ (800d908 <xTaskCheckForTimeOut+0xc4>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d007      	beq.n	800d8ca <xTaskCheckForTimeOut+0x86>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	69ba      	ldr	r2, [r7, #24]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d302      	bcc.n	800d8ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	61fb      	str	r3, [r7, #28]
 800d8c8:	e015      	b.n	800d8f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	697a      	ldr	r2, [r7, #20]
 800d8d0:	429a      	cmp	r2, r3
 800d8d2:	d20b      	bcs.n	800d8ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	697b      	ldr	r3, [r7, #20]
 800d8da:	1ad2      	subs	r2, r2, r3
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f7ff ff99 	bl	800d818 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	61fb      	str	r3, [r7, #28]
 800d8ea:	e004      	b.n	800d8f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d8f6:	f000 ff71 	bl	800e7dc <vPortExitCritical>

	return xReturn;
 800d8fa:	69fb      	ldr	r3, [r7, #28]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3720      	adds	r7, #32
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	20001bdc 	.word	0x20001bdc
 800d908:	20001bf0 	.word	0x20001bf0

0800d90c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d90c:	b480      	push	{r7}
 800d90e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d910:	4b03      	ldr	r3, [pc, #12]	@ (800d920 <vTaskMissedYield+0x14>)
 800d912:	2201      	movs	r2, #1
 800d914:	601a      	str	r2, [r3, #0]
}
 800d916:	bf00      	nop
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr
 800d920:	20001bec 	.word	0x20001bec

0800d924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d92c:	f000 f852 	bl	800d9d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d930:	4b06      	ldr	r3, [pc, #24]	@ (800d94c <prvIdleTask+0x28>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	2b01      	cmp	r3, #1
 800d936:	d9f9      	bls.n	800d92c <prvIdleTask+0x8>
			{
				taskYIELD();
 800d938:	4b05      	ldr	r3, [pc, #20]	@ (800d950 <prvIdleTask+0x2c>)
 800d93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d93e:	601a      	str	r2, [r3, #0]
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d948:	e7f0      	b.n	800d92c <prvIdleTask+0x8>
 800d94a:	bf00      	nop
 800d94c:	20001708 	.word	0x20001708
 800d950:	e000ed04 	.word	0xe000ed04

0800d954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d954:	b580      	push	{r7, lr}
 800d956:	b082      	sub	sp, #8
 800d958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d95a:	2300      	movs	r3, #0
 800d95c:	607b      	str	r3, [r7, #4]
 800d95e:	e00c      	b.n	800d97a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d960:	687a      	ldr	r2, [r7, #4]
 800d962:	4613      	mov	r3, r2
 800d964:	009b      	lsls	r3, r3, #2
 800d966:	4413      	add	r3, r2
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	4a12      	ldr	r2, [pc, #72]	@ (800d9b4 <prvInitialiseTaskLists+0x60>)
 800d96c:	4413      	add	r3, r2
 800d96e:	4618      	mov	r0, r3
 800d970:	f7fe fbb4 	bl	800c0dc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	3301      	adds	r3, #1
 800d978:	607b      	str	r3, [r7, #4]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2b37      	cmp	r3, #55	@ 0x37
 800d97e:	d9ef      	bls.n	800d960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d980:	480d      	ldr	r0, [pc, #52]	@ (800d9b8 <prvInitialiseTaskLists+0x64>)
 800d982:	f7fe fbab 	bl	800c0dc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d986:	480d      	ldr	r0, [pc, #52]	@ (800d9bc <prvInitialiseTaskLists+0x68>)
 800d988:	f7fe fba8 	bl	800c0dc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d98c:	480c      	ldr	r0, [pc, #48]	@ (800d9c0 <prvInitialiseTaskLists+0x6c>)
 800d98e:	f7fe fba5 	bl	800c0dc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d992:	480c      	ldr	r0, [pc, #48]	@ (800d9c4 <prvInitialiseTaskLists+0x70>)
 800d994:	f7fe fba2 	bl	800c0dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d998:	480b      	ldr	r0, [pc, #44]	@ (800d9c8 <prvInitialiseTaskLists+0x74>)
 800d99a:	f7fe fb9f 	bl	800c0dc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d99e:	4b0b      	ldr	r3, [pc, #44]	@ (800d9cc <prvInitialiseTaskLists+0x78>)
 800d9a0:	4a05      	ldr	r2, [pc, #20]	@ (800d9b8 <prvInitialiseTaskLists+0x64>)
 800d9a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d0 <prvInitialiseTaskLists+0x7c>)
 800d9a6:	4a05      	ldr	r2, [pc, #20]	@ (800d9bc <prvInitialiseTaskLists+0x68>)
 800d9a8:	601a      	str	r2, [r3, #0]
}
 800d9aa:	bf00      	nop
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}
 800d9b2:	bf00      	nop
 800d9b4:	20001708 	.word	0x20001708
 800d9b8:	20001b68 	.word	0x20001b68
 800d9bc:	20001b7c 	.word	0x20001b7c
 800d9c0:	20001b98 	.word	0x20001b98
 800d9c4:	20001bac 	.word	0x20001bac
 800d9c8:	20001bc4 	.word	0x20001bc4
 800d9cc:	20001b90 	.word	0x20001b90
 800d9d0:	20001b94 	.word	0x20001b94

0800d9d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9da:	e019      	b.n	800da10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d9dc:	f000 fecc 	bl	800e778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9e0:	4b10      	ldr	r3, [pc, #64]	@ (800da24 <prvCheckTasksWaitingTermination+0x50>)
 800d9e2:	68db      	ldr	r3, [r3, #12]
 800d9e4:	68db      	ldr	r3, [r3, #12]
 800d9e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	3304      	adds	r3, #4
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fe fbff 	bl	800c1f0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800da28 <prvCheckTasksWaitingTermination+0x54>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	4a0b      	ldr	r2, [pc, #44]	@ (800da28 <prvCheckTasksWaitingTermination+0x54>)
 800d9fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d9fc:	4b0b      	ldr	r3, [pc, #44]	@ (800da2c <prvCheckTasksWaitingTermination+0x58>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	3b01      	subs	r3, #1
 800da02:	4a0a      	ldr	r2, [pc, #40]	@ (800da2c <prvCheckTasksWaitingTermination+0x58>)
 800da04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da06:	f000 fee9 	bl	800e7dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 f810 	bl	800da30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da10:	4b06      	ldr	r3, [pc, #24]	@ (800da2c <prvCheckTasksWaitingTermination+0x58>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d1e1      	bne.n	800d9dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800da18:	bf00      	nop
 800da1a:	bf00      	nop
 800da1c:	3708      	adds	r7, #8
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	20001bac 	.word	0x20001bac
 800da28:	20001bd8 	.word	0x20001bd8
 800da2c:	20001bc0 	.word	0x20001bc0

0800da30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800da30:	b580      	push	{r7, lr}
 800da32:	b084      	sub	sp, #16
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	3354      	adds	r3, #84	@ 0x54
 800da3c:	4618      	mov	r0, r3
 800da3e:	f001 ff1d 	bl	800f87c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d108      	bne.n	800da5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da50:	4618      	mov	r0, r3
 800da52:	f001 f881 	bl	800eb58 <vPortFree>
				vPortFree( pxTCB );
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	f001 f87e 	bl	800eb58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800da5c:	e019      	b.n	800da92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800da64:	2b01      	cmp	r3, #1
 800da66:	d103      	bne.n	800da70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f001 f875 	bl	800eb58 <vPortFree>
	}
 800da6e:	e010      	b.n	800da92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800da76:	2b02      	cmp	r3, #2
 800da78:	d00b      	beq.n	800da92 <prvDeleteTCB+0x62>
	__asm volatile
 800da7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da7e:	f383 8811 	msr	BASEPRI, r3
 800da82:	f3bf 8f6f 	isb	sy
 800da86:	f3bf 8f4f 	dsb	sy
 800da8a:	60fb      	str	r3, [r7, #12]
}
 800da8c:	bf00      	nop
 800da8e:	bf00      	nop
 800da90:	e7fd      	b.n	800da8e <prvDeleteTCB+0x5e>
	}
 800da92:	bf00      	nop
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}
	...

0800da9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800daa2:	4b0c      	ldr	r3, [pc, #48]	@ (800dad4 <prvResetNextTaskUnblockTime+0x38>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d104      	bne.n	800dab6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800daac:	4b0a      	ldr	r3, [pc, #40]	@ (800dad8 <prvResetNextTaskUnblockTime+0x3c>)
 800daae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dab2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dab4:	e008      	b.n	800dac8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab6:	4b07      	ldr	r3, [pc, #28]	@ (800dad4 <prvResetNextTaskUnblockTime+0x38>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	4a04      	ldr	r2, [pc, #16]	@ (800dad8 <prvResetNextTaskUnblockTime+0x3c>)
 800dac6:	6013      	str	r3, [r2, #0]
}
 800dac8:	bf00      	nop
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr
 800dad4:	20001b90 	.word	0x20001b90
 800dad8:	20001bf8 	.word	0x20001bf8

0800dadc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dadc:	b480      	push	{r7}
 800dade:	b083      	sub	sp, #12
 800dae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800dae2:	4b0b      	ldr	r3, [pc, #44]	@ (800db10 <xTaskGetSchedulerState+0x34>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d102      	bne.n	800daf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800daea:	2301      	movs	r3, #1
 800daec:	607b      	str	r3, [r7, #4]
 800daee:	e008      	b.n	800db02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800daf0:	4b08      	ldr	r3, [pc, #32]	@ (800db14 <xTaskGetSchedulerState+0x38>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d102      	bne.n	800dafe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800daf8:	2302      	movs	r3, #2
 800dafa:	607b      	str	r3, [r7, #4]
 800dafc:	e001      	b.n	800db02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dafe:	2300      	movs	r3, #0
 800db00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db02:	687b      	ldr	r3, [r7, #4]
	}
 800db04:	4618      	mov	r0, r3
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	20001be4 	.word	0x20001be4
 800db14:	20001c00 	.word	0x20001c00

0800db18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800db24:	2300      	movs	r3, #0
 800db26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d058      	beq.n	800dbe0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800db2e:	4b2f      	ldr	r3, [pc, #188]	@ (800dbec <xTaskPriorityDisinherit+0xd4>)
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	693a      	ldr	r2, [r7, #16]
 800db34:	429a      	cmp	r2, r3
 800db36:	d00b      	beq.n	800db50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800db38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db3c:	f383 8811 	msr	BASEPRI, r3
 800db40:	f3bf 8f6f 	isb	sy
 800db44:	f3bf 8f4f 	dsb	sy
 800db48:	60fb      	str	r3, [r7, #12]
}
 800db4a:	bf00      	nop
 800db4c:	bf00      	nop
 800db4e:	e7fd      	b.n	800db4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db54:	2b00      	cmp	r3, #0
 800db56:	d10b      	bne.n	800db70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800db58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db5c:	f383 8811 	msr	BASEPRI, r3
 800db60:	f3bf 8f6f 	isb	sy
 800db64:	f3bf 8f4f 	dsb	sy
 800db68:	60bb      	str	r3, [r7, #8]
}
 800db6a:	bf00      	nop
 800db6c:	bf00      	nop
 800db6e:	e7fd      	b.n	800db6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db74:	1e5a      	subs	r2, r3, #1
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db82:	429a      	cmp	r2, r3
 800db84:	d02c      	beq.n	800dbe0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d128      	bne.n	800dbe0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db8e:	693b      	ldr	r3, [r7, #16]
 800db90:	3304      	adds	r3, #4
 800db92:	4618      	mov	r0, r3
 800db94:	f7fe fb2c 	bl	800c1f0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbb0:	4b0f      	ldr	r3, [pc, #60]	@ (800dbf0 <xTaskPriorityDisinherit+0xd8>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d903      	bls.n	800dbc0 <xTaskPriorityDisinherit+0xa8>
 800dbb8:	693b      	ldr	r3, [r7, #16]
 800dbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbbc:	4a0c      	ldr	r2, [pc, #48]	@ (800dbf0 <xTaskPriorityDisinherit+0xd8>)
 800dbbe:	6013      	str	r3, [r2, #0]
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	4413      	add	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4a09      	ldr	r2, [pc, #36]	@ (800dbf4 <xTaskPriorityDisinherit+0xdc>)
 800dbce:	441a      	add	r2, r3
 800dbd0:	693b      	ldr	r3, [r7, #16]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	4610      	mov	r0, r2
 800dbd8:	f7fe faad 	bl	800c136 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dbdc:	2301      	movs	r3, #1
 800dbde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dbe0:	697b      	ldr	r3, [r7, #20]
	}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3718      	adds	r7, #24
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	bd80      	pop	{r7, pc}
 800dbea:	bf00      	nop
 800dbec:	20001704 	.word	0x20001704
 800dbf0:	20001be0 	.word	0x20001be0
 800dbf4:	20001708 	.word	0x20001708

0800dbf8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800dbf8:	b580      	push	{r7, lr}
 800dbfa:	b084      	sub	sp, #16
 800dbfc:	af00      	add	r7, sp, #0
 800dbfe:	6078      	str	r0, [r7, #4]
 800dc00:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800dc02:	f000 fdb9 	bl	800e778 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800dc06:	4b20      	ldr	r3, [pc, #128]	@ (800dc88 <ulTaskNotifyTake+0x90>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d113      	bne.n	800dc3a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800dc12:	4b1d      	ldr	r3, [pc, #116]	@ (800dc88 <ulTaskNotifyTake+0x90>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00b      	beq.n	800dc3a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dc22:	2101      	movs	r1, #1
 800dc24:	6838      	ldr	r0, [r7, #0]
 800dc26:	f000 f8c9 	bl	800ddbc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800dc2a:	4b18      	ldr	r3, [pc, #96]	@ (800dc8c <ulTaskNotifyTake+0x94>)
 800dc2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc30:	601a      	str	r2, [r3, #0]
 800dc32:	f3bf 8f4f 	dsb	sy
 800dc36:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800dc3a:	f000 fdcf 	bl	800e7dc <vPortExitCritical>

		taskENTER_CRITICAL();
 800dc3e:	f000 fd9b 	bl	800e778 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800dc42:	4b11      	ldr	r3, [pc, #68]	@ (800dc88 <ulTaskNotifyTake+0x90>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dc4a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d00e      	beq.n	800dc70 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d005      	beq.n	800dc64 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800dc58:	4b0b      	ldr	r3, [pc, #44]	@ (800dc88 <ulTaskNotifyTake+0x90>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800dc62:	e005      	b.n	800dc70 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800dc64:	4b08      	ldr	r3, [pc, #32]	@ (800dc88 <ulTaskNotifyTake+0x90>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	68fa      	ldr	r2, [r7, #12]
 800dc6a:	3a01      	subs	r2, #1
 800dc6c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dc70:	4b05      	ldr	r3, [pc, #20]	@ (800dc88 <ulTaskNotifyTake+0x90>)
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	2200      	movs	r2, #0
 800dc76:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800dc7a:	f000 fdaf 	bl	800e7dc <vPortExitCritical>

		return ulReturn;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
	}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	20001704 	.word	0x20001704
 800dc8c:	e000ed04 	.word	0xe000ed04

0800dc90 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b08a      	sub	sp, #40	@ 0x28
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d10b      	bne.n	800dcb8 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800dca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dca4:	f383 8811 	msr	BASEPRI, r3
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	f3bf 8f4f 	dsb	sy
 800dcb0:	61bb      	str	r3, [r7, #24]
}
 800dcb2:	bf00      	nop
 800dcb4:	bf00      	nop
 800dcb6:	e7fd      	b.n	800dcb4 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcb8:	f000 fe3e 	bl	800e938 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800dcc0:	f3ef 8211 	mrs	r2, BASEPRI
 800dcc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcc8:	f383 8811 	msr	BASEPRI, r3
 800dccc:	f3bf 8f6f 	isb	sy
 800dcd0:	f3bf 8f4f 	dsb	sy
 800dcd4:	617a      	str	r2, [r7, #20]
 800dcd6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800dcd8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dcda:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800dcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcde:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800dce2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800dce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dce6:	2202      	movs	r2, #2
 800dce8:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800dcec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dcf2:	1c5a      	adds	r2, r3, #1
 800dcf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcf6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dcfa:	7ffb      	ldrb	r3, [r7, #31]
 800dcfc:	2b01      	cmp	r3, #1
 800dcfe:	d147      	bne.n	800dd90 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dd00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d00b      	beq.n	800dd20 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800dd08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd0c:	f383 8811 	msr	BASEPRI, r3
 800dd10:	f3bf 8f6f 	isb	sy
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	60fb      	str	r3, [r7, #12]
}
 800dd1a:	bf00      	nop
 800dd1c:	bf00      	nop
 800dd1e:	e7fd      	b.n	800dd1c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd20:	4b20      	ldr	r3, [pc, #128]	@ (800dda4 <vTaskNotifyGiveFromISR+0x114>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d11d      	bne.n	800dd64 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	4618      	mov	r0, r3
 800dd2e:	f7fe fa5f 	bl	800c1f0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd36:	4b1c      	ldr	r3, [pc, #112]	@ (800dda8 <vTaskNotifyGiveFromISR+0x118>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d903      	bls.n	800dd46 <vTaskNotifyGiveFromISR+0xb6>
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd42:	4a19      	ldr	r2, [pc, #100]	@ (800dda8 <vTaskNotifyGiveFromISR+0x118>)
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	4413      	add	r3, r2
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4a16      	ldr	r2, [pc, #88]	@ (800ddac <vTaskNotifyGiveFromISR+0x11c>)
 800dd54:	441a      	add	r2, r3
 800dd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd58:	3304      	adds	r3, #4
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	4610      	mov	r0, r2
 800dd5e:	f7fe f9ea 	bl	800c136 <vListInsertEnd>
 800dd62:	e005      	b.n	800dd70 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800dd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd66:	3318      	adds	r3, #24
 800dd68:	4619      	mov	r1, r3
 800dd6a:	4811      	ldr	r0, [pc, #68]	@ (800ddb0 <vTaskNotifyGiveFromISR+0x120>)
 800dd6c:	f7fe f9e3 	bl	800c136 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dd70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd74:	4b0f      	ldr	r3, [pc, #60]	@ (800ddb4 <vTaskNotifyGiveFromISR+0x124>)
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d908      	bls.n	800dd90 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d002      	beq.n	800dd8a <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	2201      	movs	r2, #1
 800dd88:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800dd8a:	4b0b      	ldr	r3, [pc, #44]	@ (800ddb8 <vTaskNotifyGiveFromISR+0x128>)
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	601a      	str	r2, [r3, #0]
 800dd90:	6a3b      	ldr	r3, [r7, #32]
 800dd92:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	f383 8811 	msr	BASEPRI, r3
}
 800dd9a:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800dd9c:	bf00      	nop
 800dd9e:	3728      	adds	r7, #40	@ 0x28
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	20001c00 	.word	0x20001c00
 800dda8:	20001be0 	.word	0x20001be0
 800ddac:	20001708 	.word	0x20001708
 800ddb0:	20001b98 	.word	0x20001b98
 800ddb4:	20001704 	.word	0x20001704
 800ddb8:	20001bec 	.word	0x20001bec

0800ddbc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ddbc:	b580      	push	{r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
 800ddc4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddc6:	4b21      	ldr	r3, [pc, #132]	@ (800de4c <prvAddCurrentTaskToDelayedList+0x90>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddcc:	4b20      	ldr	r3, [pc, #128]	@ (800de50 <prvAddCurrentTaskToDelayedList+0x94>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f7fe fa0c 	bl	800c1f0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ddde:	d10a      	bne.n	800ddf6 <prvAddCurrentTaskToDelayedList+0x3a>
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d007      	beq.n	800ddf6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dde6:	4b1a      	ldr	r3, [pc, #104]	@ (800de50 <prvAddCurrentTaskToDelayedList+0x94>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3304      	adds	r3, #4
 800ddec:	4619      	mov	r1, r3
 800ddee:	4819      	ldr	r0, [pc, #100]	@ (800de54 <prvAddCurrentTaskToDelayedList+0x98>)
 800ddf0:	f7fe f9a1 	bl	800c136 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddf4:	e026      	b.n	800de44 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddf6:	68fa      	ldr	r2, [r7, #12]
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4413      	add	r3, r2
 800ddfc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddfe:	4b14      	ldr	r3, [pc, #80]	@ (800de50 <prvAddCurrentTaskToDelayedList+0x94>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	68ba      	ldr	r2, [r7, #8]
 800de04:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de06:	68ba      	ldr	r2, [r7, #8]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d209      	bcs.n	800de22 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de0e:	4b12      	ldr	r3, [pc, #72]	@ (800de58 <prvAddCurrentTaskToDelayedList+0x9c>)
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	4b0f      	ldr	r3, [pc, #60]	@ (800de50 <prvAddCurrentTaskToDelayedList+0x94>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	3304      	adds	r3, #4
 800de18:	4619      	mov	r1, r3
 800de1a:	4610      	mov	r0, r2
 800de1c:	f7fe f9af 	bl	800c17e <vListInsert>
}
 800de20:	e010      	b.n	800de44 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de22:	4b0e      	ldr	r3, [pc, #56]	@ (800de5c <prvAddCurrentTaskToDelayedList+0xa0>)
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	4b0a      	ldr	r3, [pc, #40]	@ (800de50 <prvAddCurrentTaskToDelayedList+0x94>)
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	3304      	adds	r3, #4
 800de2c:	4619      	mov	r1, r3
 800de2e:	4610      	mov	r0, r2
 800de30:	f7fe f9a5 	bl	800c17e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de34:	4b0a      	ldr	r3, [pc, #40]	@ (800de60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d202      	bcs.n	800de44 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de3e:	4a08      	ldr	r2, [pc, #32]	@ (800de60 <prvAddCurrentTaskToDelayedList+0xa4>)
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	6013      	str	r3, [r2, #0]
}
 800de44:	bf00      	nop
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}
 800de4c:	20001bdc 	.word	0x20001bdc
 800de50:	20001704 	.word	0x20001704
 800de54:	20001bc4 	.word	0x20001bc4
 800de58:	20001b94 	.word	0x20001b94
 800de5c:	20001b90 	.word	0x20001b90
 800de60:	20001bf8 	.word	0x20001bf8

0800de64 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b08a      	sub	sp, #40	@ 0x28
 800de68:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de6a:	2300      	movs	r3, #0
 800de6c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de6e:	f000 fb13 	bl	800e498 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de72:	4b1d      	ldr	r3, [pc, #116]	@ (800dee8 <xTimerCreateTimerTask+0x84>)
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d021      	beq.n	800debe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de7a:	2300      	movs	r3, #0
 800de7c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de7e:	2300      	movs	r3, #0
 800de80:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de82:	1d3a      	adds	r2, r7, #4
 800de84:	f107 0108 	add.w	r1, r7, #8
 800de88:	f107 030c 	add.w	r3, r7, #12
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fe f90b 	bl	800c0a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de92:	6879      	ldr	r1, [r7, #4]
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	68fa      	ldr	r2, [r7, #12]
 800de98:	9202      	str	r2, [sp, #8]
 800de9a:	9301      	str	r3, [sp, #4]
 800de9c:	2302      	movs	r3, #2
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	2300      	movs	r3, #0
 800dea2:	460a      	mov	r2, r1
 800dea4:	4911      	ldr	r1, [pc, #68]	@ (800deec <xTimerCreateTimerTask+0x88>)
 800dea6:	4812      	ldr	r0, [pc, #72]	@ (800def0 <xTimerCreateTimerTask+0x8c>)
 800dea8:	f7fe fec6 	bl	800cc38 <xTaskCreateStatic>
 800deac:	4603      	mov	r3, r0
 800deae:	4a11      	ldr	r2, [pc, #68]	@ (800def4 <xTimerCreateTimerTask+0x90>)
 800deb0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800deb2:	4b10      	ldr	r3, [pc, #64]	@ (800def4 <xTimerCreateTimerTask+0x90>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d001      	beq.n	800debe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800deba:	2301      	movs	r3, #1
 800debc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800debe:	697b      	ldr	r3, [r7, #20]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d10b      	bne.n	800dedc <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec8:	f383 8811 	msr	BASEPRI, r3
 800decc:	f3bf 8f6f 	isb	sy
 800ded0:	f3bf 8f4f 	dsb	sy
 800ded4:	613b      	str	r3, [r7, #16]
}
 800ded6:	bf00      	nop
 800ded8:	bf00      	nop
 800deda:	e7fd      	b.n	800ded8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dedc:	697b      	ldr	r3, [r7, #20]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3718      	adds	r7, #24
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	20001c34 	.word	0x20001c34
 800deec:	08011b94 	.word	0x08011b94
 800def0:	0800e031 	.word	0x0800e031
 800def4:	20001c38 	.word	0x20001c38

0800def8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b08a      	sub	sp, #40	@ 0x28
 800defc:	af00      	add	r7, sp, #0
 800defe:	60f8      	str	r0, [r7, #12]
 800df00:	60b9      	str	r1, [r7, #8]
 800df02:	607a      	str	r2, [r7, #4]
 800df04:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df06:	2300      	movs	r3, #0
 800df08:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d10b      	bne.n	800df28 <xTimerGenericCommand+0x30>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	623b      	str	r3, [r7, #32]
}
 800df22:	bf00      	nop
 800df24:	bf00      	nop
 800df26:	e7fd      	b.n	800df24 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df28:	4b19      	ldr	r3, [pc, #100]	@ (800df90 <xTimerGenericCommand+0x98>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d02a      	beq.n	800df86 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2b05      	cmp	r3, #5
 800df40:	dc18      	bgt.n	800df74 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df42:	f7ff fdcb 	bl	800dadc <xTaskGetSchedulerState>
 800df46:	4603      	mov	r3, r0
 800df48:	2b02      	cmp	r3, #2
 800df4a:	d109      	bne.n	800df60 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df4c:	4b10      	ldr	r3, [pc, #64]	@ (800df90 <xTimerGenericCommand+0x98>)
 800df4e:	6818      	ldr	r0, [r3, #0]
 800df50:	f107 0110 	add.w	r1, r7, #16
 800df54:	2300      	movs	r3, #0
 800df56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df58:	f7fe fa7e 	bl	800c458 <xQueueGenericSend>
 800df5c:	6278      	str	r0, [r7, #36]	@ 0x24
 800df5e:	e012      	b.n	800df86 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df60:	4b0b      	ldr	r3, [pc, #44]	@ (800df90 <xTimerGenericCommand+0x98>)
 800df62:	6818      	ldr	r0, [r3, #0]
 800df64:	f107 0110 	add.w	r1, r7, #16
 800df68:	2300      	movs	r3, #0
 800df6a:	2200      	movs	r2, #0
 800df6c:	f7fe fa74 	bl	800c458 <xQueueGenericSend>
 800df70:	6278      	str	r0, [r7, #36]	@ 0x24
 800df72:	e008      	b.n	800df86 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df74:	4b06      	ldr	r3, [pc, #24]	@ (800df90 <xTimerGenericCommand+0x98>)
 800df76:	6818      	ldr	r0, [r3, #0]
 800df78:	f107 0110 	add.w	r1, r7, #16
 800df7c:	2300      	movs	r3, #0
 800df7e:	683a      	ldr	r2, [r7, #0]
 800df80:	f7fe fb6c 	bl	800c65c <xQueueGenericSendFromISR>
 800df84:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800df88:	4618      	mov	r0, r3
 800df8a:	3728      	adds	r7, #40	@ 0x28
 800df8c:	46bd      	mov	sp, r7
 800df8e:	bd80      	pop	{r7, pc}
 800df90:	20001c34 	.word	0x20001c34

0800df94 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b088      	sub	sp, #32
 800df98:	af02      	add	r7, sp, #8
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df9e:	4b23      	ldr	r3, [pc, #140]	@ (800e02c <prvProcessExpiredTimer+0x98>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68db      	ldr	r3, [r3, #12]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	3304      	adds	r3, #4
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7fe f91f 	bl	800c1f0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfb8:	f003 0304 	and.w	r3, r3, #4
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d023      	beq.n	800e008 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	699a      	ldr	r2, [r3, #24]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	18d1      	adds	r1, r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	6978      	ldr	r0, [r7, #20]
 800dfce:	f000 f8d5 	bl	800e17c <prvInsertTimerInActiveList>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d020      	beq.n	800e01a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfd8:	2300      	movs	r3, #0
 800dfda:	9300      	str	r3, [sp, #0]
 800dfdc:	2300      	movs	r3, #0
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	6978      	ldr	r0, [r7, #20]
 800dfe4:	f7ff ff88 	bl	800def8 <xTimerGenericCommand>
 800dfe8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d114      	bne.n	800e01a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	60fb      	str	r3, [r7, #12]
}
 800e002:	bf00      	nop
 800e004:	bf00      	nop
 800e006:	e7fd      	b.n	800e004 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e00e:	f023 0301 	bic.w	r3, r3, #1
 800e012:	b2da      	uxtb	r2, r3
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	6a1b      	ldr	r3, [r3, #32]
 800e01e:	6978      	ldr	r0, [r7, #20]
 800e020:	4798      	blx	r3
}
 800e022:	bf00      	nop
 800e024:	3718      	adds	r7, #24
 800e026:	46bd      	mov	sp, r7
 800e028:	bd80      	pop	{r7, pc}
 800e02a:	bf00      	nop
 800e02c:	20001c2c 	.word	0x20001c2c

0800e030 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b084      	sub	sp, #16
 800e034:	af00      	add	r7, sp, #0
 800e036:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e038:	f107 0308 	add.w	r3, r7, #8
 800e03c:	4618      	mov	r0, r3
 800e03e:	f000 f859 	bl	800e0f4 <prvGetNextExpireTime>
 800e042:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	4619      	mov	r1, r3
 800e048:	68f8      	ldr	r0, [r7, #12]
 800e04a:	f000 f805 	bl	800e058 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e04e:	f000 f8d7 	bl	800e200 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e052:	bf00      	nop
 800e054:	e7f0      	b.n	800e038 <prvTimerTask+0x8>
	...

0800e058 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b084      	sub	sp, #16
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	6078      	str	r0, [r7, #4]
 800e060:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e062:	f7ff f84d 	bl	800d100 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e066:	f107 0308 	add.w	r3, r7, #8
 800e06a:	4618      	mov	r0, r3
 800e06c:	f000 f866 	bl	800e13c <prvSampleTimeNow>
 800e070:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d130      	bne.n	800e0da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e078:	683b      	ldr	r3, [r7, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d10a      	bne.n	800e094 <prvProcessTimerOrBlockTask+0x3c>
 800e07e:	687a      	ldr	r2, [r7, #4]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	429a      	cmp	r2, r3
 800e084:	d806      	bhi.n	800e094 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e086:	f7ff f849 	bl	800d11c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e08a:	68f9      	ldr	r1, [r7, #12]
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7ff ff81 	bl	800df94 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e092:	e024      	b.n	800e0de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d008      	beq.n	800e0ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e09a:	4b13      	ldr	r3, [pc, #76]	@ (800e0e8 <prvProcessTimerOrBlockTask+0x90>)
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d101      	bne.n	800e0a8 <prvProcessTimerOrBlockTask+0x50>
 800e0a4:	2301      	movs	r3, #1
 800e0a6:	e000      	b.n	800e0aa <prvProcessTimerOrBlockTask+0x52>
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0ac:	4b0f      	ldr	r3, [pc, #60]	@ (800e0ec <prvProcessTimerOrBlockTask+0x94>)
 800e0ae:	6818      	ldr	r0, [r3, #0]
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	1ad3      	subs	r3, r2, r3
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	f7fe fd89 	bl	800cbd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e0be:	f7ff f82d 	bl	800d11c <xTaskResumeAll>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d10a      	bne.n	800e0de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e0c8:	4b09      	ldr	r3, [pc, #36]	@ (800e0f0 <prvProcessTimerOrBlockTask+0x98>)
 800e0ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0ce:	601a      	str	r2, [r3, #0]
 800e0d0:	f3bf 8f4f 	dsb	sy
 800e0d4:	f3bf 8f6f 	isb	sy
}
 800e0d8:	e001      	b.n	800e0de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0da:	f7ff f81f 	bl	800d11c <xTaskResumeAll>
}
 800e0de:	bf00      	nop
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop
 800e0e8:	20001c30 	.word	0x20001c30
 800e0ec:	20001c34 	.word	0x20001c34
 800e0f0:	e000ed04 	.word	0xe000ed04

0800e0f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b085      	sub	sp, #20
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0fc:	4b0e      	ldr	r3, [pc, #56]	@ (800e138 <prvGetNextExpireTime+0x44>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d101      	bne.n	800e10a <prvGetNextExpireTime+0x16>
 800e106:	2201      	movs	r2, #1
 800e108:	e000      	b.n	800e10c <prvGetNextExpireTime+0x18>
 800e10a:	2200      	movs	r2, #0
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d105      	bne.n	800e124 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e118:	4b07      	ldr	r3, [pc, #28]	@ (800e138 <prvGetNextExpireTime+0x44>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	60fb      	str	r3, [r7, #12]
 800e122:	e001      	b.n	800e128 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e124:	2300      	movs	r3, #0
 800e126:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e128:	68fb      	ldr	r3, [r7, #12]
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3714      	adds	r7, #20
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	20001c2c 	.word	0x20001c2c

0800e13c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e144:	f7ff f888 	bl	800d258 <xTaskGetTickCount>
 800e148:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e14a:	4b0b      	ldr	r3, [pc, #44]	@ (800e178 <prvSampleTimeNow+0x3c>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68fa      	ldr	r2, [r7, #12]
 800e150:	429a      	cmp	r2, r3
 800e152:	d205      	bcs.n	800e160 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e154:	f000 f93a 	bl	800e3cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2201      	movs	r2, #1
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	e002      	b.n	800e166 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2200      	movs	r2, #0
 800e164:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e166:	4a04      	ldr	r2, [pc, #16]	@ (800e178 <prvSampleTimeNow+0x3c>)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e16c:	68fb      	ldr	r3, [r7, #12]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3710      	adds	r7, #16
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}
 800e176:	bf00      	nop
 800e178:	20001c3c 	.word	0x20001c3c

0800e17c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b086      	sub	sp, #24
 800e180:	af00      	add	r7, sp, #0
 800e182:	60f8      	str	r0, [r7, #12]
 800e184:	60b9      	str	r1, [r7, #8]
 800e186:	607a      	str	r2, [r7, #4]
 800e188:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e18a:	2300      	movs	r3, #0
 800e18c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	68ba      	ldr	r2, [r7, #8]
 800e192:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d812      	bhi.n	800e1c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	1ad2      	subs	r2, r2, r3
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d302      	bcc.n	800e1b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	617b      	str	r3, [r7, #20]
 800e1b4:	e01b      	b.n	800e1ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1b6:	4b10      	ldr	r3, [pc, #64]	@ (800e1f8 <prvInsertTimerInActiveList+0x7c>)
 800e1b8:	681a      	ldr	r2, [r3, #0]
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3304      	adds	r3, #4
 800e1be:	4619      	mov	r1, r3
 800e1c0:	4610      	mov	r0, r2
 800e1c2:	f7fd ffdc 	bl	800c17e <vListInsert>
 800e1c6:	e012      	b.n	800e1ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d206      	bcs.n	800e1de <prvInsertTimerInActiveList+0x62>
 800e1d0:	68ba      	ldr	r2, [r7, #8]
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d302      	bcc.n	800e1de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	617b      	str	r3, [r7, #20]
 800e1dc:	e007      	b.n	800e1ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1de:	4b07      	ldr	r3, [pc, #28]	@ (800e1fc <prvInsertTimerInActiveList+0x80>)
 800e1e0:	681a      	ldr	r2, [r3, #0]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	4619      	mov	r1, r3
 800e1e8:	4610      	mov	r0, r2
 800e1ea:	f7fd ffc8 	bl	800c17e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1ee:	697b      	ldr	r3, [r7, #20]
}
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	3718      	adds	r7, #24
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	20001c30 	.word	0x20001c30
 800e1fc:	20001c2c 	.word	0x20001c2c

0800e200 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b08e      	sub	sp, #56	@ 0x38
 800e204:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e206:	e0ce      	b.n	800e3a6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	da19      	bge.n	800e242 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e20e:	1d3b      	adds	r3, r7, #4
 800e210:	3304      	adds	r3, #4
 800e212:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e216:	2b00      	cmp	r3, #0
 800e218:	d10b      	bne.n	800e232 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e21a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21e:	f383 8811 	msr	BASEPRI, r3
 800e222:	f3bf 8f6f 	isb	sy
 800e226:	f3bf 8f4f 	dsb	sy
 800e22a:	61fb      	str	r3, [r7, #28]
}
 800e22c:	bf00      	nop
 800e22e:	bf00      	nop
 800e230:	e7fd      	b.n	800e22e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e238:	6850      	ldr	r0, [r2, #4]
 800e23a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e23c:	6892      	ldr	r2, [r2, #8]
 800e23e:	4611      	mov	r1, r2
 800e240:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2b00      	cmp	r3, #0
 800e246:	f2c0 80ae 	blt.w	800e3a6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d004      	beq.n	800e260 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e258:	3304      	adds	r3, #4
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7fd ffc8 	bl	800c1f0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e260:	463b      	mov	r3, r7
 800e262:	4618      	mov	r0, r3
 800e264:	f7ff ff6a 	bl	800e13c <prvSampleTimeNow>
 800e268:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2b09      	cmp	r3, #9
 800e26e:	f200 8097 	bhi.w	800e3a0 <prvProcessReceivedCommands+0x1a0>
 800e272:	a201      	add	r2, pc, #4	@ (adr r2, 800e278 <prvProcessReceivedCommands+0x78>)
 800e274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e278:	0800e2a1 	.word	0x0800e2a1
 800e27c:	0800e2a1 	.word	0x0800e2a1
 800e280:	0800e2a1 	.word	0x0800e2a1
 800e284:	0800e317 	.word	0x0800e317
 800e288:	0800e32b 	.word	0x0800e32b
 800e28c:	0800e377 	.word	0x0800e377
 800e290:	0800e2a1 	.word	0x0800e2a1
 800e294:	0800e2a1 	.word	0x0800e2a1
 800e298:	0800e317 	.word	0x0800e317
 800e29c:	0800e32b 	.word	0x0800e32b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2a6:	f043 0301 	orr.w	r3, r3, #1
 800e2aa:	b2da      	uxtb	r2, r3
 800e2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2b2:	68ba      	ldr	r2, [r7, #8]
 800e2b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b6:	699b      	ldr	r3, [r3, #24]
 800e2b8:	18d1      	adds	r1, r2, r3
 800e2ba:	68bb      	ldr	r3, [r7, #8]
 800e2bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2c0:	f7ff ff5c 	bl	800e17c <prvInsertTimerInActiveList>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d06c      	beq.n	800e3a4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
 800e2ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2d8:	f003 0304 	and.w	r3, r3, #4
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d061      	beq.n	800e3a4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e4:	699b      	ldr	r3, [r3, #24]
 800e2e6:	441a      	add	r2, r3
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	9300      	str	r3, [sp, #0]
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	2100      	movs	r1, #0
 800e2f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2f2:	f7ff fe01 	bl	800def8 <xTimerGenericCommand>
 800e2f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2f8:	6a3b      	ldr	r3, [r7, #32]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d152      	bne.n	800e3a4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	61bb      	str	r3, [r7, #24]
}
 800e310:	bf00      	nop
 800e312:	bf00      	nop
 800e314:	e7fd      	b.n	800e312 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e318:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e31c:	f023 0301 	bic.w	r3, r3, #1
 800e320:	b2da      	uxtb	r2, r3
 800e322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e324:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e328:	e03d      	b.n	800e3a6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e32c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e330:	f043 0301 	orr.w	r3, r3, #1
 800e334:	b2da      	uxtb	r2, r3
 800e336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e338:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e33c:	68ba      	ldr	r2, [r7, #8]
 800e33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e340:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e344:	699b      	ldr	r3, [r3, #24]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d10b      	bne.n	800e362 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34e:	f383 8811 	msr	BASEPRI, r3
 800e352:	f3bf 8f6f 	isb	sy
 800e356:	f3bf 8f4f 	dsb	sy
 800e35a:	617b      	str	r3, [r7, #20]
}
 800e35c:	bf00      	nop
 800e35e:	bf00      	nop
 800e360:	e7fd      	b.n	800e35e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e364:	699a      	ldr	r2, [r3, #24]
 800e366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e368:	18d1      	adds	r1, r2, r3
 800e36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e36c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e36e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e370:	f7ff ff04 	bl	800e17c <prvInsertTimerInActiveList>
					break;
 800e374:	e017      	b.n	800e3a6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e378:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e37c:	f003 0302 	and.w	r3, r3, #2
 800e380:	2b00      	cmp	r3, #0
 800e382:	d103      	bne.n	800e38c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e386:	f000 fbe7 	bl	800eb58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e38a:	e00c      	b.n	800e3a6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e38e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e392:	f023 0301 	bic.w	r3, r3, #1
 800e396:	b2da      	uxtb	r2, r3
 800e398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e39a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e39e:	e002      	b.n	800e3a6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e3a0:	bf00      	nop
 800e3a2:	e000      	b.n	800e3a6 <prvProcessReceivedCommands+0x1a6>
					break;
 800e3a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3a6:	4b08      	ldr	r3, [pc, #32]	@ (800e3c8 <prvProcessReceivedCommands+0x1c8>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	1d39      	adds	r1, r7, #4
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fe f9f2 	bl	800c798 <xQueueReceive>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	f47f af26 	bne.w	800e208 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e3bc:	bf00      	nop
 800e3be:	bf00      	nop
 800e3c0:	3730      	adds	r7, #48	@ 0x30
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	20001c34 	.word	0x20001c34

0800e3cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b088      	sub	sp, #32
 800e3d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3d2:	e049      	b.n	800e468 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3d4:	4b2e      	ldr	r3, [pc, #184]	@ (800e490 <prvSwitchTimerLists+0xc4>)
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3de:	4b2c      	ldr	r3, [pc, #176]	@ (800e490 <prvSwitchTimerLists+0xc4>)
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	68db      	ldr	r3, [r3, #12]
 800e3e4:	68db      	ldr	r3, [r3, #12]
 800e3e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	3304      	adds	r3, #4
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7fd feff 	bl	800c1f0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6a1b      	ldr	r3, [r3, #32]
 800e3f6:	68f8      	ldr	r0, [r7, #12]
 800e3f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e400:	f003 0304 	and.w	r3, r3, #4
 800e404:	2b00      	cmp	r3, #0
 800e406:	d02f      	beq.n	800e468 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	699b      	ldr	r3, [r3, #24]
 800e40c:	693a      	ldr	r2, [r7, #16]
 800e40e:	4413      	add	r3, r2
 800e410:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	429a      	cmp	r2, r3
 800e418:	d90e      	bls.n	800e438 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	68ba      	ldr	r2, [r7, #8]
 800e41e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e426:	4b1a      	ldr	r3, [pc, #104]	@ (800e490 <prvSwitchTimerLists+0xc4>)
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	3304      	adds	r3, #4
 800e42e:	4619      	mov	r1, r3
 800e430:	4610      	mov	r0, r2
 800e432:	f7fd fea4 	bl	800c17e <vListInsert>
 800e436:	e017      	b.n	800e468 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e438:	2300      	movs	r3, #0
 800e43a:	9300      	str	r3, [sp, #0]
 800e43c:	2300      	movs	r3, #0
 800e43e:	693a      	ldr	r2, [r7, #16]
 800e440:	2100      	movs	r1, #0
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f7ff fd58 	bl	800def8 <xTimerGenericCommand>
 800e448:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d10b      	bne.n	800e468 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	603b      	str	r3, [r7, #0]
}
 800e462:	bf00      	nop
 800e464:	bf00      	nop
 800e466:	e7fd      	b.n	800e464 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e468:	4b09      	ldr	r3, [pc, #36]	@ (800e490 <prvSwitchTimerLists+0xc4>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d1b0      	bne.n	800e3d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e472:	4b07      	ldr	r3, [pc, #28]	@ (800e490 <prvSwitchTimerLists+0xc4>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e478:	4b06      	ldr	r3, [pc, #24]	@ (800e494 <prvSwitchTimerLists+0xc8>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	4a04      	ldr	r2, [pc, #16]	@ (800e490 <prvSwitchTimerLists+0xc4>)
 800e47e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e480:	4a04      	ldr	r2, [pc, #16]	@ (800e494 <prvSwitchTimerLists+0xc8>)
 800e482:	697b      	ldr	r3, [r7, #20]
 800e484:	6013      	str	r3, [r2, #0]
}
 800e486:	bf00      	nop
 800e488:	3718      	adds	r7, #24
 800e48a:	46bd      	mov	sp, r7
 800e48c:	bd80      	pop	{r7, pc}
 800e48e:	bf00      	nop
 800e490:	20001c2c 	.word	0x20001c2c
 800e494:	20001c30 	.word	0x20001c30

0800e498 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e49e:	f000 f96b 	bl	800e778 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e4a2:	4b15      	ldr	r3, [pc, #84]	@ (800e4f8 <prvCheckForValidListAndQueue+0x60>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d120      	bne.n	800e4ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e4aa:	4814      	ldr	r0, [pc, #80]	@ (800e4fc <prvCheckForValidListAndQueue+0x64>)
 800e4ac:	f7fd fe16 	bl	800c0dc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4b0:	4813      	ldr	r0, [pc, #76]	@ (800e500 <prvCheckForValidListAndQueue+0x68>)
 800e4b2:	f7fd fe13 	bl	800c0dc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4b6:	4b13      	ldr	r3, [pc, #76]	@ (800e504 <prvCheckForValidListAndQueue+0x6c>)
 800e4b8:	4a10      	ldr	r2, [pc, #64]	@ (800e4fc <prvCheckForValidListAndQueue+0x64>)
 800e4ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e4bc:	4b12      	ldr	r3, [pc, #72]	@ (800e508 <prvCheckForValidListAndQueue+0x70>)
 800e4be:	4a10      	ldr	r2, [pc, #64]	@ (800e500 <prvCheckForValidListAndQueue+0x68>)
 800e4c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9300      	str	r3, [sp, #0]
 800e4c6:	4b11      	ldr	r3, [pc, #68]	@ (800e50c <prvCheckForValidListAndQueue+0x74>)
 800e4c8:	4a11      	ldr	r2, [pc, #68]	@ (800e510 <prvCheckForValidListAndQueue+0x78>)
 800e4ca:	2110      	movs	r1, #16
 800e4cc:	200a      	movs	r0, #10
 800e4ce:	f7fd ff23 	bl	800c318 <xQueueGenericCreateStatic>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	4a08      	ldr	r2, [pc, #32]	@ (800e4f8 <prvCheckForValidListAndQueue+0x60>)
 800e4d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4d8:	4b07      	ldr	r3, [pc, #28]	@ (800e4f8 <prvCheckForValidListAndQueue+0x60>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d005      	beq.n	800e4ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4e0:	4b05      	ldr	r3, [pc, #20]	@ (800e4f8 <prvCheckForValidListAndQueue+0x60>)
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	490b      	ldr	r1, [pc, #44]	@ (800e514 <prvCheckForValidListAndQueue+0x7c>)
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe fb48 	bl	800cb7c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4ec:	f000 f976 	bl	800e7dc <vPortExitCritical>
}
 800e4f0:	bf00      	nop
 800e4f2:	46bd      	mov	sp, r7
 800e4f4:	bd80      	pop	{r7, pc}
 800e4f6:	bf00      	nop
 800e4f8:	20001c34 	.word	0x20001c34
 800e4fc:	20001c04 	.word	0x20001c04
 800e500:	20001c18 	.word	0x20001c18
 800e504:	20001c2c 	.word	0x20001c2c
 800e508:	20001c30 	.word	0x20001c30
 800e50c:	20001ce0 	.word	0x20001ce0
 800e510:	20001c40 	.word	0x20001c40
 800e514:	08011b9c 	.word	0x08011b9c

0800e518 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e518:	b480      	push	{r7}
 800e51a:	b085      	sub	sp, #20
 800e51c:	af00      	add	r7, sp, #0
 800e51e:	60f8      	str	r0, [r7, #12]
 800e520:	60b9      	str	r1, [r7, #8]
 800e522:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	3b04      	subs	r3, #4
 800e528:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	3b04      	subs	r3, #4
 800e536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	f023 0201 	bic.w	r2, r3, #1
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	3b04      	subs	r3, #4
 800e546:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e548:	4a0c      	ldr	r2, [pc, #48]	@ (800e57c <pxPortInitialiseStack+0x64>)
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	3b14      	subs	r3, #20
 800e552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e554:	687a      	ldr	r2, [r7, #4]
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	3b04      	subs	r3, #4
 800e55e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	f06f 0202 	mvn.w	r2, #2
 800e566:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	3b20      	subs	r3, #32
 800e56c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e56e:	68fb      	ldr	r3, [r7, #12]
}
 800e570:	4618      	mov	r0, r3
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	0800e581 	.word	0x0800e581

0800e580 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e580:	b480      	push	{r7}
 800e582:	b085      	sub	sp, #20
 800e584:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e586:	2300      	movs	r3, #0
 800e588:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e58a:	4b13      	ldr	r3, [pc, #76]	@ (800e5d8 <prvTaskExitError+0x58>)
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e592:	d00b      	beq.n	800e5ac <prvTaskExitError+0x2c>
	__asm volatile
 800e594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e598:	f383 8811 	msr	BASEPRI, r3
 800e59c:	f3bf 8f6f 	isb	sy
 800e5a0:	f3bf 8f4f 	dsb	sy
 800e5a4:	60fb      	str	r3, [r7, #12]
}
 800e5a6:	bf00      	nop
 800e5a8:	bf00      	nop
 800e5aa:	e7fd      	b.n	800e5a8 <prvTaskExitError+0x28>
	__asm volatile
 800e5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5b0:	f383 8811 	msr	BASEPRI, r3
 800e5b4:	f3bf 8f6f 	isb	sy
 800e5b8:	f3bf 8f4f 	dsb	sy
 800e5bc:	60bb      	str	r3, [r7, #8]
}
 800e5be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5c0:	bf00      	nop
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d0fc      	beq.n	800e5c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5c8:	bf00      	nop
 800e5ca:	bf00      	nop
 800e5cc:	3714      	adds	r7, #20
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d4:	4770      	bx	lr
 800e5d6:	bf00      	nop
 800e5d8:	20000038 	.word	0x20000038
 800e5dc:	00000000 	.word	0x00000000

0800e5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5e0:	4b07      	ldr	r3, [pc, #28]	@ (800e600 <pxCurrentTCBConst2>)
 800e5e2:	6819      	ldr	r1, [r3, #0]
 800e5e4:	6808      	ldr	r0, [r1, #0]
 800e5e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ea:	f380 8809 	msr	PSP, r0
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f04f 0000 	mov.w	r0, #0
 800e5f6:	f380 8811 	msr	BASEPRI, r0
 800e5fa:	4770      	bx	lr
 800e5fc:	f3af 8000 	nop.w

0800e600 <pxCurrentTCBConst2>:
 800e600:	20001704 	.word	0x20001704
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e604:	bf00      	nop
 800e606:	bf00      	nop

0800e608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e608:	4808      	ldr	r0, [pc, #32]	@ (800e62c <prvPortStartFirstTask+0x24>)
 800e60a:	6800      	ldr	r0, [r0, #0]
 800e60c:	6800      	ldr	r0, [r0, #0]
 800e60e:	f380 8808 	msr	MSP, r0
 800e612:	f04f 0000 	mov.w	r0, #0
 800e616:	f380 8814 	msr	CONTROL, r0
 800e61a:	b662      	cpsie	i
 800e61c:	b661      	cpsie	f
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	df00      	svc	0
 800e628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e62a:	bf00      	nop
 800e62c:	e000ed08 	.word	0xe000ed08

0800e630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e636:	4b47      	ldr	r3, [pc, #284]	@ (800e754 <xPortStartScheduler+0x124>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a47      	ldr	r2, [pc, #284]	@ (800e758 <xPortStartScheduler+0x128>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d10b      	bne.n	800e658 <xPortStartScheduler+0x28>
	__asm volatile
 800e640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	60fb      	str	r3, [r7, #12]
}
 800e652:	bf00      	nop
 800e654:	bf00      	nop
 800e656:	e7fd      	b.n	800e654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e658:	4b3e      	ldr	r3, [pc, #248]	@ (800e754 <xPortStartScheduler+0x124>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a3f      	ldr	r2, [pc, #252]	@ (800e75c <xPortStartScheduler+0x12c>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d10b      	bne.n	800e67a <xPortStartScheduler+0x4a>
	__asm volatile
 800e662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	613b      	str	r3, [r7, #16]
}
 800e674:	bf00      	nop
 800e676:	bf00      	nop
 800e678:	e7fd      	b.n	800e676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e67a:	4b39      	ldr	r3, [pc, #228]	@ (800e760 <xPortStartScheduler+0x130>)
 800e67c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	b2db      	uxtb	r3, r3
 800e684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	22ff      	movs	r2, #255	@ 0xff
 800e68a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	b2db      	uxtb	r3, r3
 800e692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e694:	78fb      	ldrb	r3, [r7, #3]
 800e696:	b2db      	uxtb	r3, r3
 800e698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	4b31      	ldr	r3, [pc, #196]	@ (800e764 <xPortStartScheduler+0x134>)
 800e6a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e6a2:	4b31      	ldr	r3, [pc, #196]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6a4:	2207      	movs	r2, #7
 800e6a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6a8:	e009      	b.n	800e6be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e6aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e6b4:	78fb      	ldrb	r3, [r7, #3]
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6be:	78fb      	ldrb	r3, [r7, #3]
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6c6:	2b80      	cmp	r3, #128	@ 0x80
 800e6c8:	d0ef      	beq.n	800e6aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6ca:	4b27      	ldr	r3, [pc, #156]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f1c3 0307 	rsb	r3, r3, #7
 800e6d2:	2b04      	cmp	r3, #4
 800e6d4:	d00b      	beq.n	800e6ee <xPortStartScheduler+0xbe>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	60bb      	str	r3, [r7, #8]
}
 800e6e8:	bf00      	nop
 800e6ea:	bf00      	nop
 800e6ec:	e7fd      	b.n	800e6ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	021b      	lsls	r3, r3, #8
 800e6f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e700:	4a19      	ldr	r2, [pc, #100]	@ (800e768 <xPortStartScheduler+0x138>)
 800e702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	b2da      	uxtb	r2, r3
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e70c:	4b17      	ldr	r3, [pc, #92]	@ (800e76c <xPortStartScheduler+0x13c>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a16      	ldr	r2, [pc, #88]	@ (800e76c <xPortStartScheduler+0x13c>)
 800e712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e718:	4b14      	ldr	r3, [pc, #80]	@ (800e76c <xPortStartScheduler+0x13c>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a13      	ldr	r2, [pc, #76]	@ (800e76c <xPortStartScheduler+0x13c>)
 800e71e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e724:	f000 f8da 	bl	800e8dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e728:	4b11      	ldr	r3, [pc, #68]	@ (800e770 <xPortStartScheduler+0x140>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e72e:	f000 f8f9 	bl	800e924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e732:	4b10      	ldr	r3, [pc, #64]	@ (800e774 <xPortStartScheduler+0x144>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a0f      	ldr	r2, [pc, #60]	@ (800e774 <xPortStartScheduler+0x144>)
 800e738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e73c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e73e:	f7ff ff63 	bl	800e608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e742:	f7fe ff4d 	bl	800d5e0 <vTaskSwitchContext>
	prvTaskExitError();
 800e746:	f7ff ff1b 	bl	800e580 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	e000ed00 	.word	0xe000ed00
 800e758:	410fc271 	.word	0x410fc271
 800e75c:	410fc270 	.word	0x410fc270
 800e760:	e000e400 	.word	0xe000e400
 800e764:	20001d30 	.word	0x20001d30
 800e768:	20001d34 	.word	0x20001d34
 800e76c:	e000ed20 	.word	0xe000ed20
 800e770:	20000038 	.word	0x20000038
 800e774:	e000ef34 	.word	0xe000ef34

0800e778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	607b      	str	r3, [r7, #4]
}
 800e790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e792:	4b10      	ldr	r3, [pc, #64]	@ (800e7d4 <vPortEnterCritical+0x5c>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	3301      	adds	r3, #1
 800e798:	4a0e      	ldr	r2, [pc, #56]	@ (800e7d4 <vPortEnterCritical+0x5c>)
 800e79a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e79c:	4b0d      	ldr	r3, [pc, #52]	@ (800e7d4 <vPortEnterCritical+0x5c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d110      	bne.n	800e7c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d8 <vPortEnterCritical+0x60>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00b      	beq.n	800e7c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	603b      	str	r3, [r7, #0]
}
 800e7c0:	bf00      	nop
 800e7c2:	bf00      	nop
 800e7c4:	e7fd      	b.n	800e7c2 <vPortEnterCritical+0x4a>
	}
}
 800e7c6:	bf00      	nop
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	20000038 	.word	0x20000038
 800e7d8:	e000ed04 	.word	0xe000ed04

0800e7dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7e2:	4b12      	ldr	r3, [pc, #72]	@ (800e82c <vPortExitCritical+0x50>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10b      	bne.n	800e802 <vPortExitCritical+0x26>
	__asm volatile
 800e7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ee:	f383 8811 	msr	BASEPRI, r3
 800e7f2:	f3bf 8f6f 	isb	sy
 800e7f6:	f3bf 8f4f 	dsb	sy
 800e7fa:	607b      	str	r3, [r7, #4]
}
 800e7fc:	bf00      	nop
 800e7fe:	bf00      	nop
 800e800:	e7fd      	b.n	800e7fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e802:	4b0a      	ldr	r3, [pc, #40]	@ (800e82c <vPortExitCritical+0x50>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	3b01      	subs	r3, #1
 800e808:	4a08      	ldr	r2, [pc, #32]	@ (800e82c <vPortExitCritical+0x50>)
 800e80a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e80c:	4b07      	ldr	r3, [pc, #28]	@ (800e82c <vPortExitCritical+0x50>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d105      	bne.n	800e820 <vPortExitCritical+0x44>
 800e814:	2300      	movs	r3, #0
 800e816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	f383 8811 	msr	BASEPRI, r3
}
 800e81e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e820:	bf00      	nop
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr
 800e82c:	20000038 	.word	0x20000038

0800e830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e830:	f3ef 8009 	mrs	r0, PSP
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	4b15      	ldr	r3, [pc, #84]	@ (800e890 <pxCurrentTCBConst>)
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	f01e 0f10 	tst.w	lr, #16
 800e840:	bf08      	it	eq
 800e842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e84a:	6010      	str	r0, [r2, #0]
 800e84c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e854:	f380 8811 	msr	BASEPRI, r0
 800e858:	f3bf 8f4f 	dsb	sy
 800e85c:	f3bf 8f6f 	isb	sy
 800e860:	f7fe febe 	bl	800d5e0 <vTaskSwitchContext>
 800e864:	f04f 0000 	mov.w	r0, #0
 800e868:	f380 8811 	msr	BASEPRI, r0
 800e86c:	bc09      	pop	{r0, r3}
 800e86e:	6819      	ldr	r1, [r3, #0]
 800e870:	6808      	ldr	r0, [r1, #0]
 800e872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e876:	f01e 0f10 	tst.w	lr, #16
 800e87a:	bf08      	it	eq
 800e87c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e880:	f380 8809 	msr	PSP, r0
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	f3af 8000 	nop.w

0800e890 <pxCurrentTCBConst>:
 800e890:	20001704 	.word	0x20001704
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e894:	bf00      	nop
 800e896:	bf00      	nop

0800e898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	607b      	str	r3, [r7, #4]
}
 800e8b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e8b2:	f7fe fddb 	bl	800d46c <xTaskIncrementTick>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e8bc:	4b06      	ldr	r3, [pc, #24]	@ (800e8d8 <xPortSysTickHandler+0x40>)
 800e8be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	f383 8811 	msr	BASEPRI, r3
}
 800e8ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	e000ed04 	.word	0xe000ed04

0800e8dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e910 <vPortSetupTimerInterrupt+0x34>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e914 <vPortSetupTimerInterrupt+0x38>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e918 <vPortSetupTimerInterrupt+0x3c>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a0a      	ldr	r2, [pc, #40]	@ (800e91c <vPortSetupTimerInterrupt+0x40>)
 800e8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8f6:	099b      	lsrs	r3, r3, #6
 800e8f8:	4a09      	ldr	r2, [pc, #36]	@ (800e920 <vPortSetupTimerInterrupt+0x44>)
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8fe:	4b04      	ldr	r3, [pc, #16]	@ (800e910 <vPortSetupTimerInterrupt+0x34>)
 800e900:	2207      	movs	r2, #7
 800e902:	601a      	str	r2, [r3, #0]
}
 800e904:	bf00      	nop
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	e000e010 	.word	0xe000e010
 800e914:	e000e018 	.word	0xe000e018
 800e918:	2000002c 	.word	0x2000002c
 800e91c:	10624dd3 	.word	0x10624dd3
 800e920:	e000e014 	.word	0xe000e014

0800e924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e934 <vPortEnableVFP+0x10>
 800e928:	6801      	ldr	r1, [r0, #0]
 800e92a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e92e:	6001      	str	r1, [r0, #0]
 800e930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e932:	bf00      	nop
 800e934:	e000ed88 	.word	0xe000ed88

0800e938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e93e:	f3ef 8305 	mrs	r3, IPSR
 800e942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b0f      	cmp	r3, #15
 800e948:	d915      	bls.n	800e976 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e94a:	4a18      	ldr	r2, [pc, #96]	@ (800e9ac <vPortValidateInterruptPriority+0x74>)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	4413      	add	r3, r2
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e954:	4b16      	ldr	r3, [pc, #88]	@ (800e9b0 <vPortValidateInterruptPriority+0x78>)
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	7afa      	ldrb	r2, [r7, #11]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d20b      	bcs.n	800e976 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	607b      	str	r3, [r7, #4]
}
 800e970:	bf00      	nop
 800e972:	bf00      	nop
 800e974:	e7fd      	b.n	800e972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e976:	4b0f      	ldr	r3, [pc, #60]	@ (800e9b4 <vPortValidateInterruptPriority+0x7c>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e97e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9b8 <vPortValidateInterruptPriority+0x80>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	429a      	cmp	r2, r3
 800e984:	d90b      	bls.n	800e99e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e98a:	f383 8811 	msr	BASEPRI, r3
 800e98e:	f3bf 8f6f 	isb	sy
 800e992:	f3bf 8f4f 	dsb	sy
 800e996:	603b      	str	r3, [r7, #0]
}
 800e998:	bf00      	nop
 800e99a:	bf00      	nop
 800e99c:	e7fd      	b.n	800e99a <vPortValidateInterruptPriority+0x62>
	}
 800e99e:	bf00      	nop
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	e000e3f0 	.word	0xe000e3f0
 800e9b0:	20001d30 	.word	0x20001d30
 800e9b4:	e000ed0c 	.word	0xe000ed0c
 800e9b8:	20001d34 	.word	0x20001d34

0800e9bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08a      	sub	sp, #40	@ 0x28
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9c8:	f7fe fb9a 	bl	800d100 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9cc:	4b5c      	ldr	r3, [pc, #368]	@ (800eb40 <pvPortMalloc+0x184>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d101      	bne.n	800e9d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9d4:	f000 f924 	bl	800ec20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9d8:	4b5a      	ldr	r3, [pc, #360]	@ (800eb44 <pvPortMalloc+0x188>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4013      	ands	r3, r2
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f040 8095 	bne.w	800eb10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d01e      	beq.n	800ea2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e9ec:	2208      	movs	r2, #8
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f003 0307 	and.w	r3, r3, #7
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d015      	beq.n	800ea2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f023 0307 	bic.w	r3, r3, #7
 800ea04:	3308      	adds	r3, #8
 800ea06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f003 0307 	and.w	r3, r3, #7
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00b      	beq.n	800ea2a <pvPortMalloc+0x6e>
	__asm volatile
 800ea12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	617b      	str	r3, [r7, #20]
}
 800ea24:	bf00      	nop
 800ea26:	bf00      	nop
 800ea28:	e7fd      	b.n	800ea26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d06f      	beq.n	800eb10 <pvPortMalloc+0x154>
 800ea30:	4b45      	ldr	r3, [pc, #276]	@ (800eb48 <pvPortMalloc+0x18c>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d86a      	bhi.n	800eb10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea3a:	4b44      	ldr	r3, [pc, #272]	@ (800eb4c <pvPortMalloc+0x190>)
 800ea3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea3e:	4b43      	ldr	r3, [pc, #268]	@ (800eb4c <pvPortMalloc+0x190>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea44:	e004      	b.n	800ea50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d903      	bls.n	800ea62 <pvPortMalloc+0xa6>
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1f1      	bne.n	800ea46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea62:	4b37      	ldr	r3, [pc, #220]	@ (800eb40 <pvPortMalloc+0x184>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d051      	beq.n	800eb10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea6c:	6a3b      	ldr	r3, [r7, #32]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2208      	movs	r2, #8
 800ea72:	4413      	add	r3, r2
 800ea74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea80:	685a      	ldr	r2, [r3, #4]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	1ad2      	subs	r2, r2, r3
 800ea86:	2308      	movs	r3, #8
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d920      	bls.n	800ead0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4413      	add	r3, r2
 800ea94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	f003 0307 	and.w	r3, r3, #7
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00b      	beq.n	800eab8 <pvPortMalloc+0xfc>
	__asm volatile
 800eaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	613b      	str	r3, [r7, #16]
}
 800eab2:	bf00      	nop
 800eab4:	bf00      	nop
 800eab6:	e7fd      	b.n	800eab4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	1ad2      	subs	r2, r2, r3
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eaca:	69b8      	ldr	r0, [r7, #24]
 800eacc:	f000 f90a 	bl	800ece4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ead0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb48 <pvPortMalloc+0x18c>)
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	4a1b      	ldr	r2, [pc, #108]	@ (800eb48 <pvPortMalloc+0x18c>)
 800eadc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eade:	4b1a      	ldr	r3, [pc, #104]	@ (800eb48 <pvPortMalloc+0x18c>)
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb50 <pvPortMalloc+0x194>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d203      	bcs.n	800eaf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eaea:	4b17      	ldr	r3, [pc, #92]	@ (800eb48 <pvPortMalloc+0x18c>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a18      	ldr	r2, [pc, #96]	@ (800eb50 <pvPortMalloc+0x194>)
 800eaf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf4:	685a      	ldr	r2, [r3, #4]
 800eaf6:	4b13      	ldr	r3, [pc, #76]	@ (800eb44 <pvPortMalloc+0x188>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	431a      	orrs	r2, r3
 800eafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb02:	2200      	movs	r2, #0
 800eb04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb06:	4b13      	ldr	r3, [pc, #76]	@ (800eb54 <pvPortMalloc+0x198>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	4a11      	ldr	r2, [pc, #68]	@ (800eb54 <pvPortMalloc+0x198>)
 800eb0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb10:	f7fe fb04 	bl	800d11c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	f003 0307 	and.w	r3, r3, #7
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00b      	beq.n	800eb36 <pvPortMalloc+0x17a>
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	60fb      	str	r3, [r7, #12]
}
 800eb30:	bf00      	nop
 800eb32:	bf00      	nop
 800eb34:	e7fd      	b.n	800eb32 <pvPortMalloc+0x176>
	return pvReturn;
 800eb36:	69fb      	ldr	r3, [r7, #28]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3728      	adds	r7, #40	@ 0x28
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	20005940 	.word	0x20005940
 800eb44:	20005954 	.word	0x20005954
 800eb48:	20005944 	.word	0x20005944
 800eb4c:	20005938 	.word	0x20005938
 800eb50:	20005948 	.word	0x20005948
 800eb54:	2000594c 	.word	0x2000594c

0800eb58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d04f      	beq.n	800ec0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb6a:	2308      	movs	r3, #8
 800eb6c:	425b      	negs	r3, r3
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	4413      	add	r3, r2
 800eb72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	685a      	ldr	r2, [r3, #4]
 800eb7c:	4b25      	ldr	r3, [pc, #148]	@ (800ec14 <vPortFree+0xbc>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4013      	ands	r3, r2
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d10b      	bne.n	800eb9e <vPortFree+0x46>
	__asm volatile
 800eb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb8a:	f383 8811 	msr	BASEPRI, r3
 800eb8e:	f3bf 8f6f 	isb	sy
 800eb92:	f3bf 8f4f 	dsb	sy
 800eb96:	60fb      	str	r3, [r7, #12]
}
 800eb98:	bf00      	nop
 800eb9a:	bf00      	nop
 800eb9c:	e7fd      	b.n	800eb9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00b      	beq.n	800ebbe <vPortFree+0x66>
	__asm volatile
 800eba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebaa:	f383 8811 	msr	BASEPRI, r3
 800ebae:	f3bf 8f6f 	isb	sy
 800ebb2:	f3bf 8f4f 	dsb	sy
 800ebb6:	60bb      	str	r3, [r7, #8]
}
 800ebb8:	bf00      	nop
 800ebba:	bf00      	nop
 800ebbc:	e7fd      	b.n	800ebba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	685a      	ldr	r2, [r3, #4]
 800ebc2:	4b14      	ldr	r3, [pc, #80]	@ (800ec14 <vPortFree+0xbc>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4013      	ands	r3, r2
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d01e      	beq.n	800ec0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d11a      	bne.n	800ec0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	685a      	ldr	r2, [r3, #4]
 800ebd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ec14 <vPortFree+0xbc>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	43db      	mvns	r3, r3
 800ebde:	401a      	ands	r2, r3
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebe4:	f7fe fa8c 	bl	800d100 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	685a      	ldr	r2, [r3, #4]
 800ebec:	4b0a      	ldr	r3, [pc, #40]	@ (800ec18 <vPortFree+0xc0>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	4a09      	ldr	r2, [pc, #36]	@ (800ec18 <vPortFree+0xc0>)
 800ebf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebf6:	6938      	ldr	r0, [r7, #16]
 800ebf8:	f000 f874 	bl	800ece4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ebfc:	4b07      	ldr	r3, [pc, #28]	@ (800ec1c <vPortFree+0xc4>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3301      	adds	r3, #1
 800ec02:	4a06      	ldr	r2, [pc, #24]	@ (800ec1c <vPortFree+0xc4>)
 800ec04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec06:	f7fe fa89 	bl	800d11c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec0a:	bf00      	nop
 800ec0c:	3718      	adds	r7, #24
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	20005954 	.word	0x20005954
 800ec18:	20005944 	.word	0x20005944
 800ec1c:	20005950 	.word	0x20005950

0800ec20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ec2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec2c:	4b27      	ldr	r3, [pc, #156]	@ (800eccc <prvHeapInit+0xac>)
 800ec2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f003 0307 	and.w	r3, r3, #7
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00c      	beq.n	800ec54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3307      	adds	r3, #7
 800ec3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f023 0307 	bic.w	r3, r3, #7
 800ec46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	4a1f      	ldr	r2, [pc, #124]	@ (800eccc <prvHeapInit+0xac>)
 800ec50:	4413      	add	r3, r2
 800ec52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec58:	4a1d      	ldr	r2, [pc, #116]	@ (800ecd0 <prvHeapInit+0xb0>)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec5e:	4b1c      	ldr	r3, [pc, #112]	@ (800ecd0 <prvHeapInit+0xb0>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	4413      	add	r3, r2
 800ec6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec6c:	2208      	movs	r2, #8
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	1a9b      	subs	r3, r3, r2
 800ec72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f023 0307 	bic.w	r3, r3, #7
 800ec7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	4a15      	ldr	r2, [pc, #84]	@ (800ecd4 <prvHeapInit+0xb4>)
 800ec80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec82:	4b14      	ldr	r3, [pc, #80]	@ (800ecd4 <prvHeapInit+0xb4>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2200      	movs	r2, #0
 800ec88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec8a:	4b12      	ldr	r3, [pc, #72]	@ (800ecd4 <prvHeapInit+0xb4>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	1ad2      	subs	r2, r2, r3
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eca0:	4b0c      	ldr	r3, [pc, #48]	@ (800ecd4 <prvHeapInit+0xb4>)
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	4a0a      	ldr	r2, [pc, #40]	@ (800ecd8 <prvHeapInit+0xb8>)
 800ecae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	4a09      	ldr	r2, [pc, #36]	@ (800ecdc <prvHeapInit+0xbc>)
 800ecb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ecb8:	4b09      	ldr	r3, [pc, #36]	@ (800ece0 <prvHeapInit+0xc0>)
 800ecba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ecbe:	601a      	str	r2, [r3, #0]
}
 800ecc0:	bf00      	nop
 800ecc2:	3714      	adds	r7, #20
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr
 800eccc:	20001d38 	.word	0x20001d38
 800ecd0:	20005938 	.word	0x20005938
 800ecd4:	20005940 	.word	0x20005940
 800ecd8:	20005948 	.word	0x20005948
 800ecdc:	20005944 	.word	0x20005944
 800ece0:	20005954 	.word	0x20005954

0800ece4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecec:	4b28      	ldr	r3, [pc, #160]	@ (800ed90 <prvInsertBlockIntoFreeList+0xac>)
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	e002      	b.n	800ecf8 <prvInsertBlockIntoFreeList+0x14>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	60fb      	str	r3, [r7, #12]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d8f7      	bhi.n	800ecf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d108      	bne.n	800ed26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	685a      	ldr	r2, [r3, #4]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	441a      	add	r2, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	68ba      	ldr	r2, [r7, #8]
 800ed30:	441a      	add	r2, r3
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d118      	bne.n	800ed6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	4b15      	ldr	r3, [pc, #84]	@ (800ed94 <prvInsertBlockIntoFreeList+0xb0>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d00d      	beq.n	800ed62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	685a      	ldr	r2, [r3, #4]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	441a      	add	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	601a      	str	r2, [r3, #0]
 800ed60:	e008      	b.n	800ed74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed62:	4b0c      	ldr	r3, [pc, #48]	@ (800ed94 <prvInsertBlockIntoFreeList+0xb0>)
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	601a      	str	r2, [r3, #0]
 800ed6a:	e003      	b.n	800ed74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d002      	beq.n	800ed82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed82:	bf00      	nop
 800ed84:	3714      	adds	r7, #20
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	20005938 	.word	0x20005938
 800ed94:	20005940 	.word	0x20005940

0800ed98 <__cvt>:
 800ed98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed9c:	ec57 6b10 	vmov	r6, r7, d0
 800eda0:	2f00      	cmp	r7, #0
 800eda2:	460c      	mov	r4, r1
 800eda4:	4619      	mov	r1, r3
 800eda6:	463b      	mov	r3, r7
 800eda8:	bfbb      	ittet	lt
 800edaa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800edae:	461f      	movlt	r7, r3
 800edb0:	2300      	movge	r3, #0
 800edb2:	232d      	movlt	r3, #45	@ 0x2d
 800edb4:	700b      	strb	r3, [r1, #0]
 800edb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800edb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800edbc:	4691      	mov	r9, r2
 800edbe:	f023 0820 	bic.w	r8, r3, #32
 800edc2:	bfbc      	itt	lt
 800edc4:	4632      	movlt	r2, r6
 800edc6:	4616      	movlt	r6, r2
 800edc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800edcc:	d005      	beq.n	800edda <__cvt+0x42>
 800edce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800edd2:	d100      	bne.n	800edd6 <__cvt+0x3e>
 800edd4:	3401      	adds	r4, #1
 800edd6:	2102      	movs	r1, #2
 800edd8:	e000      	b.n	800eddc <__cvt+0x44>
 800edda:	2103      	movs	r1, #3
 800eddc:	ab03      	add	r3, sp, #12
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	ab02      	add	r3, sp, #8
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	ec47 6b10 	vmov	d0, r6, r7
 800ede8:	4653      	mov	r3, sl
 800edea:	4622      	mov	r2, r4
 800edec:	f000 fe3c 	bl	800fa68 <_dtoa_r>
 800edf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800edf4:	4605      	mov	r5, r0
 800edf6:	d119      	bne.n	800ee2c <__cvt+0x94>
 800edf8:	f019 0f01 	tst.w	r9, #1
 800edfc:	d00e      	beq.n	800ee1c <__cvt+0x84>
 800edfe:	eb00 0904 	add.w	r9, r0, r4
 800ee02:	2200      	movs	r2, #0
 800ee04:	2300      	movs	r3, #0
 800ee06:	4630      	mov	r0, r6
 800ee08:	4639      	mov	r1, r7
 800ee0a:	f7f1 fe5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee0e:	b108      	cbz	r0, 800ee14 <__cvt+0x7c>
 800ee10:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee14:	2230      	movs	r2, #48	@ 0x30
 800ee16:	9b03      	ldr	r3, [sp, #12]
 800ee18:	454b      	cmp	r3, r9
 800ee1a:	d31e      	bcc.n	800ee5a <__cvt+0xc2>
 800ee1c:	9b03      	ldr	r3, [sp, #12]
 800ee1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee20:	1b5b      	subs	r3, r3, r5
 800ee22:	4628      	mov	r0, r5
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	b004      	add	sp, #16
 800ee28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ee30:	eb00 0904 	add.w	r9, r0, r4
 800ee34:	d1e5      	bne.n	800ee02 <__cvt+0x6a>
 800ee36:	7803      	ldrb	r3, [r0, #0]
 800ee38:	2b30      	cmp	r3, #48	@ 0x30
 800ee3a:	d10a      	bne.n	800ee52 <__cvt+0xba>
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	2300      	movs	r3, #0
 800ee40:	4630      	mov	r0, r6
 800ee42:	4639      	mov	r1, r7
 800ee44:	f7f1 fe40 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee48:	b918      	cbnz	r0, 800ee52 <__cvt+0xba>
 800ee4a:	f1c4 0401 	rsb	r4, r4, #1
 800ee4e:	f8ca 4000 	str.w	r4, [sl]
 800ee52:	f8da 3000 	ldr.w	r3, [sl]
 800ee56:	4499      	add	r9, r3
 800ee58:	e7d3      	b.n	800ee02 <__cvt+0x6a>
 800ee5a:	1c59      	adds	r1, r3, #1
 800ee5c:	9103      	str	r1, [sp, #12]
 800ee5e:	701a      	strb	r2, [r3, #0]
 800ee60:	e7d9      	b.n	800ee16 <__cvt+0x7e>

0800ee62 <__exponent>:
 800ee62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee64:	2900      	cmp	r1, #0
 800ee66:	bfba      	itte	lt
 800ee68:	4249      	neglt	r1, r1
 800ee6a:	232d      	movlt	r3, #45	@ 0x2d
 800ee6c:	232b      	movge	r3, #43	@ 0x2b
 800ee6e:	2909      	cmp	r1, #9
 800ee70:	7002      	strb	r2, [r0, #0]
 800ee72:	7043      	strb	r3, [r0, #1]
 800ee74:	dd29      	ble.n	800eeca <__exponent+0x68>
 800ee76:	f10d 0307 	add.w	r3, sp, #7
 800ee7a:	461d      	mov	r5, r3
 800ee7c:	270a      	movs	r7, #10
 800ee7e:	461a      	mov	r2, r3
 800ee80:	fbb1 f6f7 	udiv	r6, r1, r7
 800ee84:	fb07 1416 	mls	r4, r7, r6, r1
 800ee88:	3430      	adds	r4, #48	@ 0x30
 800ee8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ee8e:	460c      	mov	r4, r1
 800ee90:	2c63      	cmp	r4, #99	@ 0x63
 800ee92:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ee96:	4631      	mov	r1, r6
 800ee98:	dcf1      	bgt.n	800ee7e <__exponent+0x1c>
 800ee9a:	3130      	adds	r1, #48	@ 0x30
 800ee9c:	1e94      	subs	r4, r2, #2
 800ee9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eea2:	1c41      	adds	r1, r0, #1
 800eea4:	4623      	mov	r3, r4
 800eea6:	42ab      	cmp	r3, r5
 800eea8:	d30a      	bcc.n	800eec0 <__exponent+0x5e>
 800eeaa:	f10d 0309 	add.w	r3, sp, #9
 800eeae:	1a9b      	subs	r3, r3, r2
 800eeb0:	42ac      	cmp	r4, r5
 800eeb2:	bf88      	it	hi
 800eeb4:	2300      	movhi	r3, #0
 800eeb6:	3302      	adds	r3, #2
 800eeb8:	4403      	add	r3, r0
 800eeba:	1a18      	subs	r0, r3, r0
 800eebc:	b003      	add	sp, #12
 800eebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800eec4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800eec8:	e7ed      	b.n	800eea6 <__exponent+0x44>
 800eeca:	2330      	movs	r3, #48	@ 0x30
 800eecc:	3130      	adds	r1, #48	@ 0x30
 800eece:	7083      	strb	r3, [r0, #2]
 800eed0:	70c1      	strb	r1, [r0, #3]
 800eed2:	1d03      	adds	r3, r0, #4
 800eed4:	e7f1      	b.n	800eeba <__exponent+0x58>
	...

0800eed8 <_printf_float>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	b08d      	sub	sp, #52	@ 0x34
 800eede:	460c      	mov	r4, r1
 800eee0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800eee4:	4616      	mov	r6, r2
 800eee6:	461f      	mov	r7, r3
 800eee8:	4605      	mov	r5, r0
 800eeea:	f000 fcc3 	bl	800f874 <_localeconv_r>
 800eeee:	6803      	ldr	r3, [r0, #0]
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7f1 f9bc 	bl	8000270 <strlen>
 800eef8:	2300      	movs	r3, #0
 800eefa:	930a      	str	r3, [sp, #40]	@ 0x28
 800eefc:	f8d8 3000 	ldr.w	r3, [r8]
 800ef00:	9005      	str	r0, [sp, #20]
 800ef02:	3307      	adds	r3, #7
 800ef04:	f023 0307 	bic.w	r3, r3, #7
 800ef08:	f103 0208 	add.w	r2, r3, #8
 800ef0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ef10:	f8d4 b000 	ldr.w	fp, [r4]
 800ef14:	f8c8 2000 	str.w	r2, [r8]
 800ef18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ef1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ef20:	9307      	str	r3, [sp, #28]
 800ef22:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ef2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef2e:	4b9c      	ldr	r3, [pc, #624]	@ (800f1a0 <_printf_float+0x2c8>)
 800ef30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef34:	f7f1 fdfa 	bl	8000b2c <__aeabi_dcmpun>
 800ef38:	bb70      	cbnz	r0, 800ef98 <_printf_float+0xc0>
 800ef3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef3e:	4b98      	ldr	r3, [pc, #608]	@ (800f1a0 <_printf_float+0x2c8>)
 800ef40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef44:	f7f1 fdd4 	bl	8000af0 <__aeabi_dcmple>
 800ef48:	bb30      	cbnz	r0, 800ef98 <_printf_float+0xc0>
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	4640      	mov	r0, r8
 800ef50:	4649      	mov	r1, r9
 800ef52:	f7f1 fdc3 	bl	8000adc <__aeabi_dcmplt>
 800ef56:	b110      	cbz	r0, 800ef5e <_printf_float+0x86>
 800ef58:	232d      	movs	r3, #45	@ 0x2d
 800ef5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef5e:	4a91      	ldr	r2, [pc, #580]	@ (800f1a4 <_printf_float+0x2cc>)
 800ef60:	4b91      	ldr	r3, [pc, #580]	@ (800f1a8 <_printf_float+0x2d0>)
 800ef62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ef66:	bf8c      	ite	hi
 800ef68:	4690      	movhi	r8, r2
 800ef6a:	4698      	movls	r8, r3
 800ef6c:	2303      	movs	r3, #3
 800ef6e:	6123      	str	r3, [r4, #16]
 800ef70:	f02b 0304 	bic.w	r3, fp, #4
 800ef74:	6023      	str	r3, [r4, #0]
 800ef76:	f04f 0900 	mov.w	r9, #0
 800ef7a:	9700      	str	r7, [sp, #0]
 800ef7c:	4633      	mov	r3, r6
 800ef7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ef80:	4621      	mov	r1, r4
 800ef82:	4628      	mov	r0, r5
 800ef84:	f000 f9d2 	bl	800f32c <_printf_common>
 800ef88:	3001      	adds	r0, #1
 800ef8a:	f040 808d 	bne.w	800f0a8 <_printf_float+0x1d0>
 800ef8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ef92:	b00d      	add	sp, #52	@ 0x34
 800ef94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef98:	4642      	mov	r2, r8
 800ef9a:	464b      	mov	r3, r9
 800ef9c:	4640      	mov	r0, r8
 800ef9e:	4649      	mov	r1, r9
 800efa0:	f7f1 fdc4 	bl	8000b2c <__aeabi_dcmpun>
 800efa4:	b140      	cbz	r0, 800efb8 <_printf_float+0xe0>
 800efa6:	464b      	mov	r3, r9
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	bfbc      	itt	lt
 800efac:	232d      	movlt	r3, #45	@ 0x2d
 800efae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800efb2:	4a7e      	ldr	r2, [pc, #504]	@ (800f1ac <_printf_float+0x2d4>)
 800efb4:	4b7e      	ldr	r3, [pc, #504]	@ (800f1b0 <_printf_float+0x2d8>)
 800efb6:	e7d4      	b.n	800ef62 <_printf_float+0x8a>
 800efb8:	6863      	ldr	r3, [r4, #4]
 800efba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800efbe:	9206      	str	r2, [sp, #24]
 800efc0:	1c5a      	adds	r2, r3, #1
 800efc2:	d13b      	bne.n	800f03c <_printf_float+0x164>
 800efc4:	2306      	movs	r3, #6
 800efc6:	6063      	str	r3, [r4, #4]
 800efc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800efcc:	2300      	movs	r3, #0
 800efce:	6022      	str	r2, [r4, #0]
 800efd0:	9303      	str	r3, [sp, #12]
 800efd2:	ab0a      	add	r3, sp, #40	@ 0x28
 800efd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800efd8:	ab09      	add	r3, sp, #36	@ 0x24
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	6861      	ldr	r1, [r4, #4]
 800efde:	ec49 8b10 	vmov	d0, r8, r9
 800efe2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800efe6:	4628      	mov	r0, r5
 800efe8:	f7ff fed6 	bl	800ed98 <__cvt>
 800efec:	9b06      	ldr	r3, [sp, #24]
 800efee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eff0:	2b47      	cmp	r3, #71	@ 0x47
 800eff2:	4680      	mov	r8, r0
 800eff4:	d129      	bne.n	800f04a <_printf_float+0x172>
 800eff6:	1cc8      	adds	r0, r1, #3
 800eff8:	db02      	blt.n	800f000 <_printf_float+0x128>
 800effa:	6863      	ldr	r3, [r4, #4]
 800effc:	4299      	cmp	r1, r3
 800effe:	dd41      	ble.n	800f084 <_printf_float+0x1ac>
 800f000:	f1aa 0a02 	sub.w	sl, sl, #2
 800f004:	fa5f fa8a 	uxtb.w	sl, sl
 800f008:	3901      	subs	r1, #1
 800f00a:	4652      	mov	r2, sl
 800f00c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f010:	9109      	str	r1, [sp, #36]	@ 0x24
 800f012:	f7ff ff26 	bl	800ee62 <__exponent>
 800f016:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f018:	1813      	adds	r3, r2, r0
 800f01a:	2a01      	cmp	r2, #1
 800f01c:	4681      	mov	r9, r0
 800f01e:	6123      	str	r3, [r4, #16]
 800f020:	dc02      	bgt.n	800f028 <_printf_float+0x150>
 800f022:	6822      	ldr	r2, [r4, #0]
 800f024:	07d2      	lsls	r2, r2, #31
 800f026:	d501      	bpl.n	800f02c <_printf_float+0x154>
 800f028:	3301      	adds	r3, #1
 800f02a:	6123      	str	r3, [r4, #16]
 800f02c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f030:	2b00      	cmp	r3, #0
 800f032:	d0a2      	beq.n	800ef7a <_printf_float+0xa2>
 800f034:	232d      	movs	r3, #45	@ 0x2d
 800f036:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f03a:	e79e      	b.n	800ef7a <_printf_float+0xa2>
 800f03c:	9a06      	ldr	r2, [sp, #24]
 800f03e:	2a47      	cmp	r2, #71	@ 0x47
 800f040:	d1c2      	bne.n	800efc8 <_printf_float+0xf0>
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1c0      	bne.n	800efc8 <_printf_float+0xf0>
 800f046:	2301      	movs	r3, #1
 800f048:	e7bd      	b.n	800efc6 <_printf_float+0xee>
 800f04a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f04e:	d9db      	bls.n	800f008 <_printf_float+0x130>
 800f050:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f054:	d118      	bne.n	800f088 <_printf_float+0x1b0>
 800f056:	2900      	cmp	r1, #0
 800f058:	6863      	ldr	r3, [r4, #4]
 800f05a:	dd0b      	ble.n	800f074 <_printf_float+0x19c>
 800f05c:	6121      	str	r1, [r4, #16]
 800f05e:	b913      	cbnz	r3, 800f066 <_printf_float+0x18e>
 800f060:	6822      	ldr	r2, [r4, #0]
 800f062:	07d0      	lsls	r0, r2, #31
 800f064:	d502      	bpl.n	800f06c <_printf_float+0x194>
 800f066:	3301      	adds	r3, #1
 800f068:	440b      	add	r3, r1
 800f06a:	6123      	str	r3, [r4, #16]
 800f06c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f06e:	f04f 0900 	mov.w	r9, #0
 800f072:	e7db      	b.n	800f02c <_printf_float+0x154>
 800f074:	b913      	cbnz	r3, 800f07c <_printf_float+0x1a4>
 800f076:	6822      	ldr	r2, [r4, #0]
 800f078:	07d2      	lsls	r2, r2, #31
 800f07a:	d501      	bpl.n	800f080 <_printf_float+0x1a8>
 800f07c:	3302      	adds	r3, #2
 800f07e:	e7f4      	b.n	800f06a <_printf_float+0x192>
 800f080:	2301      	movs	r3, #1
 800f082:	e7f2      	b.n	800f06a <_printf_float+0x192>
 800f084:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f08a:	4299      	cmp	r1, r3
 800f08c:	db05      	blt.n	800f09a <_printf_float+0x1c2>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	6121      	str	r1, [r4, #16]
 800f092:	07d8      	lsls	r0, r3, #31
 800f094:	d5ea      	bpl.n	800f06c <_printf_float+0x194>
 800f096:	1c4b      	adds	r3, r1, #1
 800f098:	e7e7      	b.n	800f06a <_printf_float+0x192>
 800f09a:	2900      	cmp	r1, #0
 800f09c:	bfd4      	ite	le
 800f09e:	f1c1 0202 	rsble	r2, r1, #2
 800f0a2:	2201      	movgt	r2, #1
 800f0a4:	4413      	add	r3, r2
 800f0a6:	e7e0      	b.n	800f06a <_printf_float+0x192>
 800f0a8:	6823      	ldr	r3, [r4, #0]
 800f0aa:	055a      	lsls	r2, r3, #21
 800f0ac:	d407      	bmi.n	800f0be <_printf_float+0x1e6>
 800f0ae:	6923      	ldr	r3, [r4, #16]
 800f0b0:	4642      	mov	r2, r8
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	47b8      	blx	r7
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	d12b      	bne.n	800f114 <_printf_float+0x23c>
 800f0bc:	e767      	b.n	800ef8e <_printf_float+0xb6>
 800f0be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f0c2:	f240 80dd 	bls.w	800f280 <_printf_float+0x3a8>
 800f0c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	f7f1 fcfb 	bl	8000ac8 <__aeabi_dcmpeq>
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d033      	beq.n	800f13e <_printf_float+0x266>
 800f0d6:	4a37      	ldr	r2, [pc, #220]	@ (800f1b4 <_printf_float+0x2dc>)
 800f0d8:	2301      	movs	r3, #1
 800f0da:	4631      	mov	r1, r6
 800f0dc:	4628      	mov	r0, r5
 800f0de:	47b8      	blx	r7
 800f0e0:	3001      	adds	r0, #1
 800f0e2:	f43f af54 	beq.w	800ef8e <_printf_float+0xb6>
 800f0e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f0ea:	4543      	cmp	r3, r8
 800f0ec:	db02      	blt.n	800f0f4 <_printf_float+0x21c>
 800f0ee:	6823      	ldr	r3, [r4, #0]
 800f0f0:	07d8      	lsls	r0, r3, #31
 800f0f2:	d50f      	bpl.n	800f114 <_printf_float+0x23c>
 800f0f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	47b8      	blx	r7
 800f0fe:	3001      	adds	r0, #1
 800f100:	f43f af45 	beq.w	800ef8e <_printf_float+0xb6>
 800f104:	f04f 0900 	mov.w	r9, #0
 800f108:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800f10c:	f104 0a1a 	add.w	sl, r4, #26
 800f110:	45c8      	cmp	r8, r9
 800f112:	dc09      	bgt.n	800f128 <_printf_float+0x250>
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	079b      	lsls	r3, r3, #30
 800f118:	f100 8103 	bmi.w	800f322 <_printf_float+0x44a>
 800f11c:	68e0      	ldr	r0, [r4, #12]
 800f11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f120:	4298      	cmp	r0, r3
 800f122:	bfb8      	it	lt
 800f124:	4618      	movlt	r0, r3
 800f126:	e734      	b.n	800ef92 <_printf_float+0xba>
 800f128:	2301      	movs	r3, #1
 800f12a:	4652      	mov	r2, sl
 800f12c:	4631      	mov	r1, r6
 800f12e:	4628      	mov	r0, r5
 800f130:	47b8      	blx	r7
 800f132:	3001      	adds	r0, #1
 800f134:	f43f af2b 	beq.w	800ef8e <_printf_float+0xb6>
 800f138:	f109 0901 	add.w	r9, r9, #1
 800f13c:	e7e8      	b.n	800f110 <_printf_float+0x238>
 800f13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f140:	2b00      	cmp	r3, #0
 800f142:	dc39      	bgt.n	800f1b8 <_printf_float+0x2e0>
 800f144:	4a1b      	ldr	r2, [pc, #108]	@ (800f1b4 <_printf_float+0x2dc>)
 800f146:	2301      	movs	r3, #1
 800f148:	4631      	mov	r1, r6
 800f14a:	4628      	mov	r0, r5
 800f14c:	47b8      	blx	r7
 800f14e:	3001      	adds	r0, #1
 800f150:	f43f af1d 	beq.w	800ef8e <_printf_float+0xb6>
 800f154:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f158:	ea59 0303 	orrs.w	r3, r9, r3
 800f15c:	d102      	bne.n	800f164 <_printf_float+0x28c>
 800f15e:	6823      	ldr	r3, [r4, #0]
 800f160:	07d9      	lsls	r1, r3, #31
 800f162:	d5d7      	bpl.n	800f114 <_printf_float+0x23c>
 800f164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f168:	4631      	mov	r1, r6
 800f16a:	4628      	mov	r0, r5
 800f16c:	47b8      	blx	r7
 800f16e:	3001      	adds	r0, #1
 800f170:	f43f af0d 	beq.w	800ef8e <_printf_float+0xb6>
 800f174:	f04f 0a00 	mov.w	sl, #0
 800f178:	f104 0b1a 	add.w	fp, r4, #26
 800f17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f17e:	425b      	negs	r3, r3
 800f180:	4553      	cmp	r3, sl
 800f182:	dc01      	bgt.n	800f188 <_printf_float+0x2b0>
 800f184:	464b      	mov	r3, r9
 800f186:	e793      	b.n	800f0b0 <_printf_float+0x1d8>
 800f188:	2301      	movs	r3, #1
 800f18a:	465a      	mov	r2, fp
 800f18c:	4631      	mov	r1, r6
 800f18e:	4628      	mov	r0, r5
 800f190:	47b8      	blx	r7
 800f192:	3001      	adds	r0, #1
 800f194:	f43f aefb 	beq.w	800ef8e <_printf_float+0xb6>
 800f198:	f10a 0a01 	add.w	sl, sl, #1
 800f19c:	e7ee      	b.n	800f17c <_printf_float+0x2a4>
 800f19e:	bf00      	nop
 800f1a0:	7fefffff 	.word	0x7fefffff
 800f1a4:	08011e64 	.word	0x08011e64
 800f1a8:	08011e60 	.word	0x08011e60
 800f1ac:	08011e6c 	.word	0x08011e6c
 800f1b0:	08011e68 	.word	0x08011e68
 800f1b4:	08011e70 	.word	0x08011e70
 800f1b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f1ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f1be:	4553      	cmp	r3, sl
 800f1c0:	bfa8      	it	ge
 800f1c2:	4653      	movge	r3, sl
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	4699      	mov	r9, r3
 800f1c8:	dc36      	bgt.n	800f238 <_printf_float+0x360>
 800f1ca:	f04f 0b00 	mov.w	fp, #0
 800f1ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1d2:	f104 021a 	add.w	r2, r4, #26
 800f1d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f1d8:	9306      	str	r3, [sp, #24]
 800f1da:	eba3 0309 	sub.w	r3, r3, r9
 800f1de:	455b      	cmp	r3, fp
 800f1e0:	dc31      	bgt.n	800f246 <_printf_float+0x36e>
 800f1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1e4:	459a      	cmp	sl, r3
 800f1e6:	dc3a      	bgt.n	800f25e <_printf_float+0x386>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	07da      	lsls	r2, r3, #31
 800f1ec:	d437      	bmi.n	800f25e <_printf_float+0x386>
 800f1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f0:	ebaa 0903 	sub.w	r9, sl, r3
 800f1f4:	9b06      	ldr	r3, [sp, #24]
 800f1f6:	ebaa 0303 	sub.w	r3, sl, r3
 800f1fa:	4599      	cmp	r9, r3
 800f1fc:	bfa8      	it	ge
 800f1fe:	4699      	movge	r9, r3
 800f200:	f1b9 0f00 	cmp.w	r9, #0
 800f204:	dc33      	bgt.n	800f26e <_printf_float+0x396>
 800f206:	f04f 0800 	mov.w	r8, #0
 800f20a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f20e:	f104 0b1a 	add.w	fp, r4, #26
 800f212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f214:	ebaa 0303 	sub.w	r3, sl, r3
 800f218:	eba3 0309 	sub.w	r3, r3, r9
 800f21c:	4543      	cmp	r3, r8
 800f21e:	f77f af79 	ble.w	800f114 <_printf_float+0x23c>
 800f222:	2301      	movs	r3, #1
 800f224:	465a      	mov	r2, fp
 800f226:	4631      	mov	r1, r6
 800f228:	4628      	mov	r0, r5
 800f22a:	47b8      	blx	r7
 800f22c:	3001      	adds	r0, #1
 800f22e:	f43f aeae 	beq.w	800ef8e <_printf_float+0xb6>
 800f232:	f108 0801 	add.w	r8, r8, #1
 800f236:	e7ec      	b.n	800f212 <_printf_float+0x33a>
 800f238:	4642      	mov	r2, r8
 800f23a:	4631      	mov	r1, r6
 800f23c:	4628      	mov	r0, r5
 800f23e:	47b8      	blx	r7
 800f240:	3001      	adds	r0, #1
 800f242:	d1c2      	bne.n	800f1ca <_printf_float+0x2f2>
 800f244:	e6a3      	b.n	800ef8e <_printf_float+0xb6>
 800f246:	2301      	movs	r3, #1
 800f248:	4631      	mov	r1, r6
 800f24a:	4628      	mov	r0, r5
 800f24c:	9206      	str	r2, [sp, #24]
 800f24e:	47b8      	blx	r7
 800f250:	3001      	adds	r0, #1
 800f252:	f43f ae9c 	beq.w	800ef8e <_printf_float+0xb6>
 800f256:	9a06      	ldr	r2, [sp, #24]
 800f258:	f10b 0b01 	add.w	fp, fp, #1
 800f25c:	e7bb      	b.n	800f1d6 <_printf_float+0x2fe>
 800f25e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f262:	4631      	mov	r1, r6
 800f264:	4628      	mov	r0, r5
 800f266:	47b8      	blx	r7
 800f268:	3001      	adds	r0, #1
 800f26a:	d1c0      	bne.n	800f1ee <_printf_float+0x316>
 800f26c:	e68f      	b.n	800ef8e <_printf_float+0xb6>
 800f26e:	9a06      	ldr	r2, [sp, #24]
 800f270:	464b      	mov	r3, r9
 800f272:	4442      	add	r2, r8
 800f274:	4631      	mov	r1, r6
 800f276:	4628      	mov	r0, r5
 800f278:	47b8      	blx	r7
 800f27a:	3001      	adds	r0, #1
 800f27c:	d1c3      	bne.n	800f206 <_printf_float+0x32e>
 800f27e:	e686      	b.n	800ef8e <_printf_float+0xb6>
 800f280:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f284:	f1ba 0f01 	cmp.w	sl, #1
 800f288:	dc01      	bgt.n	800f28e <_printf_float+0x3b6>
 800f28a:	07db      	lsls	r3, r3, #31
 800f28c:	d536      	bpl.n	800f2fc <_printf_float+0x424>
 800f28e:	2301      	movs	r3, #1
 800f290:	4642      	mov	r2, r8
 800f292:	4631      	mov	r1, r6
 800f294:	4628      	mov	r0, r5
 800f296:	47b8      	blx	r7
 800f298:	3001      	adds	r0, #1
 800f29a:	f43f ae78 	beq.w	800ef8e <_printf_float+0xb6>
 800f29e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	47b8      	blx	r7
 800f2a8:	3001      	adds	r0, #1
 800f2aa:	f43f ae70 	beq.w	800ef8e <_printf_float+0xb6>
 800f2ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800f2ba:	f7f1 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 800f2be:	b9c0      	cbnz	r0, 800f2f2 <_printf_float+0x41a>
 800f2c0:	4653      	mov	r3, sl
 800f2c2:	f108 0201 	add.w	r2, r8, #1
 800f2c6:	4631      	mov	r1, r6
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	47b8      	blx	r7
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	d10c      	bne.n	800f2ea <_printf_float+0x412>
 800f2d0:	e65d      	b.n	800ef8e <_printf_float+0xb6>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	465a      	mov	r2, fp
 800f2d6:	4631      	mov	r1, r6
 800f2d8:	4628      	mov	r0, r5
 800f2da:	47b8      	blx	r7
 800f2dc:	3001      	adds	r0, #1
 800f2de:	f43f ae56 	beq.w	800ef8e <_printf_float+0xb6>
 800f2e2:	f108 0801 	add.w	r8, r8, #1
 800f2e6:	45d0      	cmp	r8, sl
 800f2e8:	dbf3      	blt.n	800f2d2 <_printf_float+0x3fa>
 800f2ea:	464b      	mov	r3, r9
 800f2ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f2f0:	e6df      	b.n	800f0b2 <_printf_float+0x1da>
 800f2f2:	f04f 0800 	mov.w	r8, #0
 800f2f6:	f104 0b1a 	add.w	fp, r4, #26
 800f2fa:	e7f4      	b.n	800f2e6 <_printf_float+0x40e>
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	4642      	mov	r2, r8
 800f300:	e7e1      	b.n	800f2c6 <_printf_float+0x3ee>
 800f302:	2301      	movs	r3, #1
 800f304:	464a      	mov	r2, r9
 800f306:	4631      	mov	r1, r6
 800f308:	4628      	mov	r0, r5
 800f30a:	47b8      	blx	r7
 800f30c:	3001      	adds	r0, #1
 800f30e:	f43f ae3e 	beq.w	800ef8e <_printf_float+0xb6>
 800f312:	f108 0801 	add.w	r8, r8, #1
 800f316:	68e3      	ldr	r3, [r4, #12]
 800f318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f31a:	1a5b      	subs	r3, r3, r1
 800f31c:	4543      	cmp	r3, r8
 800f31e:	dcf0      	bgt.n	800f302 <_printf_float+0x42a>
 800f320:	e6fc      	b.n	800f11c <_printf_float+0x244>
 800f322:	f04f 0800 	mov.w	r8, #0
 800f326:	f104 0919 	add.w	r9, r4, #25
 800f32a:	e7f4      	b.n	800f316 <_printf_float+0x43e>

0800f32c <_printf_common>:
 800f32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f330:	4616      	mov	r6, r2
 800f332:	4698      	mov	r8, r3
 800f334:	688a      	ldr	r2, [r1, #8]
 800f336:	690b      	ldr	r3, [r1, #16]
 800f338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f33c:	4293      	cmp	r3, r2
 800f33e:	bfb8      	it	lt
 800f340:	4613      	movlt	r3, r2
 800f342:	6033      	str	r3, [r6, #0]
 800f344:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f348:	4607      	mov	r7, r0
 800f34a:	460c      	mov	r4, r1
 800f34c:	b10a      	cbz	r2, 800f352 <_printf_common+0x26>
 800f34e:	3301      	adds	r3, #1
 800f350:	6033      	str	r3, [r6, #0]
 800f352:	6823      	ldr	r3, [r4, #0]
 800f354:	0699      	lsls	r1, r3, #26
 800f356:	bf42      	ittt	mi
 800f358:	6833      	ldrmi	r3, [r6, #0]
 800f35a:	3302      	addmi	r3, #2
 800f35c:	6033      	strmi	r3, [r6, #0]
 800f35e:	6825      	ldr	r5, [r4, #0]
 800f360:	f015 0506 	ands.w	r5, r5, #6
 800f364:	d106      	bne.n	800f374 <_printf_common+0x48>
 800f366:	f104 0a19 	add.w	sl, r4, #25
 800f36a:	68e3      	ldr	r3, [r4, #12]
 800f36c:	6832      	ldr	r2, [r6, #0]
 800f36e:	1a9b      	subs	r3, r3, r2
 800f370:	42ab      	cmp	r3, r5
 800f372:	dc26      	bgt.n	800f3c2 <_printf_common+0x96>
 800f374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f378:	6822      	ldr	r2, [r4, #0]
 800f37a:	3b00      	subs	r3, #0
 800f37c:	bf18      	it	ne
 800f37e:	2301      	movne	r3, #1
 800f380:	0692      	lsls	r2, r2, #26
 800f382:	d42b      	bmi.n	800f3dc <_printf_common+0xb0>
 800f384:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f388:	4641      	mov	r1, r8
 800f38a:	4638      	mov	r0, r7
 800f38c:	47c8      	blx	r9
 800f38e:	3001      	adds	r0, #1
 800f390:	d01e      	beq.n	800f3d0 <_printf_common+0xa4>
 800f392:	6823      	ldr	r3, [r4, #0]
 800f394:	6922      	ldr	r2, [r4, #16]
 800f396:	f003 0306 	and.w	r3, r3, #6
 800f39a:	2b04      	cmp	r3, #4
 800f39c:	bf02      	ittt	eq
 800f39e:	68e5      	ldreq	r5, [r4, #12]
 800f3a0:	6833      	ldreq	r3, [r6, #0]
 800f3a2:	1aed      	subeq	r5, r5, r3
 800f3a4:	68a3      	ldr	r3, [r4, #8]
 800f3a6:	bf0c      	ite	eq
 800f3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3ac:	2500      	movne	r5, #0
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	bfc4      	itt	gt
 800f3b2:	1a9b      	subgt	r3, r3, r2
 800f3b4:	18ed      	addgt	r5, r5, r3
 800f3b6:	2600      	movs	r6, #0
 800f3b8:	341a      	adds	r4, #26
 800f3ba:	42b5      	cmp	r5, r6
 800f3bc:	d11a      	bne.n	800f3f4 <_printf_common+0xc8>
 800f3be:	2000      	movs	r0, #0
 800f3c0:	e008      	b.n	800f3d4 <_printf_common+0xa8>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	4652      	mov	r2, sl
 800f3c6:	4641      	mov	r1, r8
 800f3c8:	4638      	mov	r0, r7
 800f3ca:	47c8      	blx	r9
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	d103      	bne.n	800f3d8 <_printf_common+0xac>
 800f3d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3d8:	3501      	adds	r5, #1
 800f3da:	e7c6      	b.n	800f36a <_printf_common+0x3e>
 800f3dc:	18e1      	adds	r1, r4, r3
 800f3de:	1c5a      	adds	r2, r3, #1
 800f3e0:	2030      	movs	r0, #48	@ 0x30
 800f3e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f3e6:	4422      	add	r2, r4
 800f3e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f3ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f3f0:	3302      	adds	r3, #2
 800f3f2:	e7c7      	b.n	800f384 <_printf_common+0x58>
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	4622      	mov	r2, r4
 800f3f8:	4641      	mov	r1, r8
 800f3fa:	4638      	mov	r0, r7
 800f3fc:	47c8      	blx	r9
 800f3fe:	3001      	adds	r0, #1
 800f400:	d0e6      	beq.n	800f3d0 <_printf_common+0xa4>
 800f402:	3601      	adds	r6, #1
 800f404:	e7d9      	b.n	800f3ba <_printf_common+0x8e>
	...

0800f408 <_printf_i>:
 800f408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f40c:	7e0f      	ldrb	r7, [r1, #24]
 800f40e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f410:	2f78      	cmp	r7, #120	@ 0x78
 800f412:	4691      	mov	r9, r2
 800f414:	4680      	mov	r8, r0
 800f416:	460c      	mov	r4, r1
 800f418:	469a      	mov	sl, r3
 800f41a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f41e:	d807      	bhi.n	800f430 <_printf_i+0x28>
 800f420:	2f62      	cmp	r7, #98	@ 0x62
 800f422:	d80a      	bhi.n	800f43a <_printf_i+0x32>
 800f424:	2f00      	cmp	r7, #0
 800f426:	f000 80d1 	beq.w	800f5cc <_printf_i+0x1c4>
 800f42a:	2f58      	cmp	r7, #88	@ 0x58
 800f42c:	f000 80b8 	beq.w	800f5a0 <_printf_i+0x198>
 800f430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f434:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f438:	e03a      	b.n	800f4b0 <_printf_i+0xa8>
 800f43a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f43e:	2b15      	cmp	r3, #21
 800f440:	d8f6      	bhi.n	800f430 <_printf_i+0x28>
 800f442:	a101      	add	r1, pc, #4	@ (adr r1, 800f448 <_printf_i+0x40>)
 800f444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f448:	0800f4a1 	.word	0x0800f4a1
 800f44c:	0800f4b5 	.word	0x0800f4b5
 800f450:	0800f431 	.word	0x0800f431
 800f454:	0800f431 	.word	0x0800f431
 800f458:	0800f431 	.word	0x0800f431
 800f45c:	0800f431 	.word	0x0800f431
 800f460:	0800f4b5 	.word	0x0800f4b5
 800f464:	0800f431 	.word	0x0800f431
 800f468:	0800f431 	.word	0x0800f431
 800f46c:	0800f431 	.word	0x0800f431
 800f470:	0800f431 	.word	0x0800f431
 800f474:	0800f5b3 	.word	0x0800f5b3
 800f478:	0800f4df 	.word	0x0800f4df
 800f47c:	0800f56d 	.word	0x0800f56d
 800f480:	0800f431 	.word	0x0800f431
 800f484:	0800f431 	.word	0x0800f431
 800f488:	0800f5d5 	.word	0x0800f5d5
 800f48c:	0800f431 	.word	0x0800f431
 800f490:	0800f4df 	.word	0x0800f4df
 800f494:	0800f431 	.word	0x0800f431
 800f498:	0800f431 	.word	0x0800f431
 800f49c:	0800f575 	.word	0x0800f575
 800f4a0:	6833      	ldr	r3, [r6, #0]
 800f4a2:	1d1a      	adds	r2, r3, #4
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6032      	str	r2, [r6, #0]
 800f4a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e09c      	b.n	800f5ee <_printf_i+0x1e6>
 800f4b4:	6833      	ldr	r3, [r6, #0]
 800f4b6:	6820      	ldr	r0, [r4, #0]
 800f4b8:	1d19      	adds	r1, r3, #4
 800f4ba:	6031      	str	r1, [r6, #0]
 800f4bc:	0606      	lsls	r6, r0, #24
 800f4be:	d501      	bpl.n	800f4c4 <_printf_i+0xbc>
 800f4c0:	681d      	ldr	r5, [r3, #0]
 800f4c2:	e003      	b.n	800f4cc <_printf_i+0xc4>
 800f4c4:	0645      	lsls	r5, r0, #25
 800f4c6:	d5fb      	bpl.n	800f4c0 <_printf_i+0xb8>
 800f4c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f4cc:	2d00      	cmp	r5, #0
 800f4ce:	da03      	bge.n	800f4d8 <_printf_i+0xd0>
 800f4d0:	232d      	movs	r3, #45	@ 0x2d
 800f4d2:	426d      	negs	r5, r5
 800f4d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4d8:	4858      	ldr	r0, [pc, #352]	@ (800f63c <_printf_i+0x234>)
 800f4da:	230a      	movs	r3, #10
 800f4dc:	e011      	b.n	800f502 <_printf_i+0xfa>
 800f4de:	6821      	ldr	r1, [r4, #0]
 800f4e0:	6833      	ldr	r3, [r6, #0]
 800f4e2:	0608      	lsls	r0, r1, #24
 800f4e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f4e8:	d402      	bmi.n	800f4f0 <_printf_i+0xe8>
 800f4ea:	0649      	lsls	r1, r1, #25
 800f4ec:	bf48      	it	mi
 800f4ee:	b2ad      	uxthmi	r5, r5
 800f4f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f4f2:	4852      	ldr	r0, [pc, #328]	@ (800f63c <_printf_i+0x234>)
 800f4f4:	6033      	str	r3, [r6, #0]
 800f4f6:	bf14      	ite	ne
 800f4f8:	230a      	movne	r3, #10
 800f4fa:	2308      	moveq	r3, #8
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f502:	6866      	ldr	r6, [r4, #4]
 800f504:	60a6      	str	r6, [r4, #8]
 800f506:	2e00      	cmp	r6, #0
 800f508:	db05      	blt.n	800f516 <_printf_i+0x10e>
 800f50a:	6821      	ldr	r1, [r4, #0]
 800f50c:	432e      	orrs	r6, r5
 800f50e:	f021 0104 	bic.w	r1, r1, #4
 800f512:	6021      	str	r1, [r4, #0]
 800f514:	d04b      	beq.n	800f5ae <_printf_i+0x1a6>
 800f516:	4616      	mov	r6, r2
 800f518:	fbb5 f1f3 	udiv	r1, r5, r3
 800f51c:	fb03 5711 	mls	r7, r3, r1, r5
 800f520:	5dc7      	ldrb	r7, [r0, r7]
 800f522:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f526:	462f      	mov	r7, r5
 800f528:	42bb      	cmp	r3, r7
 800f52a:	460d      	mov	r5, r1
 800f52c:	d9f4      	bls.n	800f518 <_printf_i+0x110>
 800f52e:	2b08      	cmp	r3, #8
 800f530:	d10b      	bne.n	800f54a <_printf_i+0x142>
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	07df      	lsls	r7, r3, #31
 800f536:	d508      	bpl.n	800f54a <_printf_i+0x142>
 800f538:	6923      	ldr	r3, [r4, #16]
 800f53a:	6861      	ldr	r1, [r4, #4]
 800f53c:	4299      	cmp	r1, r3
 800f53e:	bfde      	ittt	le
 800f540:	2330      	movle	r3, #48	@ 0x30
 800f542:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f546:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f54a:	1b92      	subs	r2, r2, r6
 800f54c:	6122      	str	r2, [r4, #16]
 800f54e:	f8cd a000 	str.w	sl, [sp]
 800f552:	464b      	mov	r3, r9
 800f554:	aa03      	add	r2, sp, #12
 800f556:	4621      	mov	r1, r4
 800f558:	4640      	mov	r0, r8
 800f55a:	f7ff fee7 	bl	800f32c <_printf_common>
 800f55e:	3001      	adds	r0, #1
 800f560:	d14a      	bne.n	800f5f8 <_printf_i+0x1f0>
 800f562:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f566:	b004      	add	sp, #16
 800f568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f56c:	6823      	ldr	r3, [r4, #0]
 800f56e:	f043 0320 	orr.w	r3, r3, #32
 800f572:	6023      	str	r3, [r4, #0]
 800f574:	4832      	ldr	r0, [pc, #200]	@ (800f640 <_printf_i+0x238>)
 800f576:	2778      	movs	r7, #120	@ 0x78
 800f578:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f57c:	6823      	ldr	r3, [r4, #0]
 800f57e:	6831      	ldr	r1, [r6, #0]
 800f580:	061f      	lsls	r7, r3, #24
 800f582:	f851 5b04 	ldr.w	r5, [r1], #4
 800f586:	d402      	bmi.n	800f58e <_printf_i+0x186>
 800f588:	065f      	lsls	r7, r3, #25
 800f58a:	bf48      	it	mi
 800f58c:	b2ad      	uxthmi	r5, r5
 800f58e:	6031      	str	r1, [r6, #0]
 800f590:	07d9      	lsls	r1, r3, #31
 800f592:	bf44      	itt	mi
 800f594:	f043 0320 	orrmi.w	r3, r3, #32
 800f598:	6023      	strmi	r3, [r4, #0]
 800f59a:	b11d      	cbz	r5, 800f5a4 <_printf_i+0x19c>
 800f59c:	2310      	movs	r3, #16
 800f59e:	e7ad      	b.n	800f4fc <_printf_i+0xf4>
 800f5a0:	4826      	ldr	r0, [pc, #152]	@ (800f63c <_printf_i+0x234>)
 800f5a2:	e7e9      	b.n	800f578 <_printf_i+0x170>
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	f023 0320 	bic.w	r3, r3, #32
 800f5aa:	6023      	str	r3, [r4, #0]
 800f5ac:	e7f6      	b.n	800f59c <_printf_i+0x194>
 800f5ae:	4616      	mov	r6, r2
 800f5b0:	e7bd      	b.n	800f52e <_printf_i+0x126>
 800f5b2:	6833      	ldr	r3, [r6, #0]
 800f5b4:	6825      	ldr	r5, [r4, #0]
 800f5b6:	6961      	ldr	r1, [r4, #20]
 800f5b8:	1d18      	adds	r0, r3, #4
 800f5ba:	6030      	str	r0, [r6, #0]
 800f5bc:	062e      	lsls	r6, r5, #24
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	d501      	bpl.n	800f5c6 <_printf_i+0x1be>
 800f5c2:	6019      	str	r1, [r3, #0]
 800f5c4:	e002      	b.n	800f5cc <_printf_i+0x1c4>
 800f5c6:	0668      	lsls	r0, r5, #25
 800f5c8:	d5fb      	bpl.n	800f5c2 <_printf_i+0x1ba>
 800f5ca:	8019      	strh	r1, [r3, #0]
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	6123      	str	r3, [r4, #16]
 800f5d0:	4616      	mov	r6, r2
 800f5d2:	e7bc      	b.n	800f54e <_printf_i+0x146>
 800f5d4:	6833      	ldr	r3, [r6, #0]
 800f5d6:	1d1a      	adds	r2, r3, #4
 800f5d8:	6032      	str	r2, [r6, #0]
 800f5da:	681e      	ldr	r6, [r3, #0]
 800f5dc:	6862      	ldr	r2, [r4, #4]
 800f5de:	2100      	movs	r1, #0
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7f0 fdf5 	bl	80001d0 <memchr>
 800f5e6:	b108      	cbz	r0, 800f5ec <_printf_i+0x1e4>
 800f5e8:	1b80      	subs	r0, r0, r6
 800f5ea:	6060      	str	r0, [r4, #4]
 800f5ec:	6863      	ldr	r3, [r4, #4]
 800f5ee:	6123      	str	r3, [r4, #16]
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5f6:	e7aa      	b.n	800f54e <_printf_i+0x146>
 800f5f8:	6923      	ldr	r3, [r4, #16]
 800f5fa:	4632      	mov	r2, r6
 800f5fc:	4649      	mov	r1, r9
 800f5fe:	4640      	mov	r0, r8
 800f600:	47d0      	blx	sl
 800f602:	3001      	adds	r0, #1
 800f604:	d0ad      	beq.n	800f562 <_printf_i+0x15a>
 800f606:	6823      	ldr	r3, [r4, #0]
 800f608:	079b      	lsls	r3, r3, #30
 800f60a:	d413      	bmi.n	800f634 <_printf_i+0x22c>
 800f60c:	68e0      	ldr	r0, [r4, #12]
 800f60e:	9b03      	ldr	r3, [sp, #12]
 800f610:	4298      	cmp	r0, r3
 800f612:	bfb8      	it	lt
 800f614:	4618      	movlt	r0, r3
 800f616:	e7a6      	b.n	800f566 <_printf_i+0x15e>
 800f618:	2301      	movs	r3, #1
 800f61a:	4632      	mov	r2, r6
 800f61c:	4649      	mov	r1, r9
 800f61e:	4640      	mov	r0, r8
 800f620:	47d0      	blx	sl
 800f622:	3001      	adds	r0, #1
 800f624:	d09d      	beq.n	800f562 <_printf_i+0x15a>
 800f626:	3501      	adds	r5, #1
 800f628:	68e3      	ldr	r3, [r4, #12]
 800f62a:	9903      	ldr	r1, [sp, #12]
 800f62c:	1a5b      	subs	r3, r3, r1
 800f62e:	42ab      	cmp	r3, r5
 800f630:	dcf2      	bgt.n	800f618 <_printf_i+0x210>
 800f632:	e7eb      	b.n	800f60c <_printf_i+0x204>
 800f634:	2500      	movs	r5, #0
 800f636:	f104 0619 	add.w	r6, r4, #25
 800f63a:	e7f5      	b.n	800f628 <_printf_i+0x220>
 800f63c:	08011e72 	.word	0x08011e72
 800f640:	08011e83 	.word	0x08011e83

0800f644 <std>:
 800f644:	2300      	movs	r3, #0
 800f646:	b510      	push	{r4, lr}
 800f648:	4604      	mov	r4, r0
 800f64a:	e9c0 3300 	strd	r3, r3, [r0]
 800f64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f652:	6083      	str	r3, [r0, #8]
 800f654:	8181      	strh	r1, [r0, #12]
 800f656:	6643      	str	r3, [r0, #100]	@ 0x64
 800f658:	81c2      	strh	r2, [r0, #14]
 800f65a:	6183      	str	r3, [r0, #24]
 800f65c:	4619      	mov	r1, r3
 800f65e:	2208      	movs	r2, #8
 800f660:	305c      	adds	r0, #92	@ 0x5c
 800f662:	f000 f8d1 	bl	800f808 <memset>
 800f666:	4b0d      	ldr	r3, [pc, #52]	@ (800f69c <std+0x58>)
 800f668:	6263      	str	r3, [r4, #36]	@ 0x24
 800f66a:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a0 <std+0x5c>)
 800f66c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f66e:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a4 <std+0x60>)
 800f670:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f672:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a8 <std+0x64>)
 800f674:	6323      	str	r3, [r4, #48]	@ 0x30
 800f676:	4b0d      	ldr	r3, [pc, #52]	@ (800f6ac <std+0x68>)
 800f678:	6224      	str	r4, [r4, #32]
 800f67a:	429c      	cmp	r4, r3
 800f67c:	d006      	beq.n	800f68c <std+0x48>
 800f67e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f682:	4294      	cmp	r4, r2
 800f684:	d002      	beq.n	800f68c <std+0x48>
 800f686:	33d0      	adds	r3, #208	@ 0xd0
 800f688:	429c      	cmp	r4, r3
 800f68a:	d105      	bne.n	800f698 <std+0x54>
 800f68c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f694:	f000 b8ea 	b.w	800f86c <__retarget_lock_init_recursive>
 800f698:	bd10      	pop	{r4, pc}
 800f69a:	bf00      	nop
 800f69c:	08011305 	.word	0x08011305
 800f6a0:	08011327 	.word	0x08011327
 800f6a4:	0801135f 	.word	0x0801135f
 800f6a8:	08011383 	.word	0x08011383
 800f6ac:	20005958 	.word	0x20005958

0800f6b0 <stdio_exit_handler>:
 800f6b0:	4a02      	ldr	r2, [pc, #8]	@ (800f6bc <stdio_exit_handler+0xc>)
 800f6b2:	4903      	ldr	r1, [pc, #12]	@ (800f6c0 <stdio_exit_handler+0x10>)
 800f6b4:	4803      	ldr	r0, [pc, #12]	@ (800f6c4 <stdio_exit_handler+0x14>)
 800f6b6:	f000 b889 	b.w	800f7cc <_fwalk_sglue>
 800f6ba:	bf00      	nop
 800f6bc:	2000003c 	.word	0x2000003c
 800f6c0:	08010ba9 	.word	0x08010ba9
 800f6c4:	2000004c 	.word	0x2000004c

0800f6c8 <cleanup_stdio>:
 800f6c8:	6841      	ldr	r1, [r0, #4]
 800f6ca:	4b0c      	ldr	r3, [pc, #48]	@ (800f6fc <cleanup_stdio+0x34>)
 800f6cc:	4299      	cmp	r1, r3
 800f6ce:	b510      	push	{r4, lr}
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	d001      	beq.n	800f6d8 <cleanup_stdio+0x10>
 800f6d4:	f001 fa68 	bl	8010ba8 <_fflush_r>
 800f6d8:	68a1      	ldr	r1, [r4, #8]
 800f6da:	4b09      	ldr	r3, [pc, #36]	@ (800f700 <cleanup_stdio+0x38>)
 800f6dc:	4299      	cmp	r1, r3
 800f6de:	d002      	beq.n	800f6e6 <cleanup_stdio+0x1e>
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	f001 fa61 	bl	8010ba8 <_fflush_r>
 800f6e6:	68e1      	ldr	r1, [r4, #12]
 800f6e8:	4b06      	ldr	r3, [pc, #24]	@ (800f704 <cleanup_stdio+0x3c>)
 800f6ea:	4299      	cmp	r1, r3
 800f6ec:	d004      	beq.n	800f6f8 <cleanup_stdio+0x30>
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6f4:	f001 ba58 	b.w	8010ba8 <_fflush_r>
 800f6f8:	bd10      	pop	{r4, pc}
 800f6fa:	bf00      	nop
 800f6fc:	20005958 	.word	0x20005958
 800f700:	200059c0 	.word	0x200059c0
 800f704:	20005a28 	.word	0x20005a28

0800f708 <global_stdio_init.part.0>:
 800f708:	b510      	push	{r4, lr}
 800f70a:	4b0b      	ldr	r3, [pc, #44]	@ (800f738 <global_stdio_init.part.0+0x30>)
 800f70c:	4c0b      	ldr	r4, [pc, #44]	@ (800f73c <global_stdio_init.part.0+0x34>)
 800f70e:	4a0c      	ldr	r2, [pc, #48]	@ (800f740 <global_stdio_init.part.0+0x38>)
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	4620      	mov	r0, r4
 800f714:	2200      	movs	r2, #0
 800f716:	2104      	movs	r1, #4
 800f718:	f7ff ff94 	bl	800f644 <std>
 800f71c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f720:	2201      	movs	r2, #1
 800f722:	2109      	movs	r1, #9
 800f724:	f7ff ff8e 	bl	800f644 <std>
 800f728:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f72c:	2202      	movs	r2, #2
 800f72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f732:	2112      	movs	r1, #18
 800f734:	f7ff bf86 	b.w	800f644 <std>
 800f738:	20005a90 	.word	0x20005a90
 800f73c:	20005958 	.word	0x20005958
 800f740:	0800f6b1 	.word	0x0800f6b1

0800f744 <__sfp_lock_acquire>:
 800f744:	4801      	ldr	r0, [pc, #4]	@ (800f74c <__sfp_lock_acquire+0x8>)
 800f746:	f000 b892 	b.w	800f86e <__retarget_lock_acquire_recursive>
 800f74a:	bf00      	nop
 800f74c:	20005a95 	.word	0x20005a95

0800f750 <__sfp_lock_release>:
 800f750:	4801      	ldr	r0, [pc, #4]	@ (800f758 <__sfp_lock_release+0x8>)
 800f752:	f000 b88d 	b.w	800f870 <__retarget_lock_release_recursive>
 800f756:	bf00      	nop
 800f758:	20005a95 	.word	0x20005a95

0800f75c <__sinit>:
 800f75c:	b510      	push	{r4, lr}
 800f75e:	4604      	mov	r4, r0
 800f760:	f7ff fff0 	bl	800f744 <__sfp_lock_acquire>
 800f764:	6a23      	ldr	r3, [r4, #32]
 800f766:	b11b      	cbz	r3, 800f770 <__sinit+0x14>
 800f768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f76c:	f7ff bff0 	b.w	800f750 <__sfp_lock_release>
 800f770:	4b04      	ldr	r3, [pc, #16]	@ (800f784 <__sinit+0x28>)
 800f772:	6223      	str	r3, [r4, #32]
 800f774:	4b04      	ldr	r3, [pc, #16]	@ (800f788 <__sinit+0x2c>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d1f5      	bne.n	800f768 <__sinit+0xc>
 800f77c:	f7ff ffc4 	bl	800f708 <global_stdio_init.part.0>
 800f780:	e7f2      	b.n	800f768 <__sinit+0xc>
 800f782:	bf00      	nop
 800f784:	0800f6c9 	.word	0x0800f6c9
 800f788:	20005a90 	.word	0x20005a90

0800f78c <_vsiprintf_r>:
 800f78c:	b510      	push	{r4, lr}
 800f78e:	b09a      	sub	sp, #104	@ 0x68
 800f790:	2400      	movs	r4, #0
 800f792:	9100      	str	r1, [sp, #0]
 800f794:	9104      	str	r1, [sp, #16]
 800f796:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f79a:	9105      	str	r1, [sp, #20]
 800f79c:	9102      	str	r1, [sp, #8]
 800f79e:	4905      	ldr	r1, [pc, #20]	@ (800f7b4 <_vsiprintf_r+0x28>)
 800f7a0:	9103      	str	r1, [sp, #12]
 800f7a2:	4669      	mov	r1, sp
 800f7a4:	9419      	str	r4, [sp, #100]	@ 0x64
 800f7a6:	f000 ffd5 	bl	8010754 <_svfiprintf_r>
 800f7aa:	9b00      	ldr	r3, [sp, #0]
 800f7ac:	701c      	strb	r4, [r3, #0]
 800f7ae:	b01a      	add	sp, #104	@ 0x68
 800f7b0:	bd10      	pop	{r4, pc}
 800f7b2:	bf00      	nop
 800f7b4:	ffff0208 	.word	0xffff0208

0800f7b8 <vsiprintf>:
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	460a      	mov	r2, r1
 800f7bc:	4601      	mov	r1, r0
 800f7be:	4802      	ldr	r0, [pc, #8]	@ (800f7c8 <vsiprintf+0x10>)
 800f7c0:	6800      	ldr	r0, [r0, #0]
 800f7c2:	f7ff bfe3 	b.w	800f78c <_vsiprintf_r>
 800f7c6:	bf00      	nop
 800f7c8:	20000048 	.word	0x20000048

0800f7cc <_fwalk_sglue>:
 800f7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7d0:	4607      	mov	r7, r0
 800f7d2:	4688      	mov	r8, r1
 800f7d4:	4614      	mov	r4, r2
 800f7d6:	2600      	movs	r6, #0
 800f7d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7dc:	f1b9 0901 	subs.w	r9, r9, #1
 800f7e0:	d505      	bpl.n	800f7ee <_fwalk_sglue+0x22>
 800f7e2:	6824      	ldr	r4, [r4, #0]
 800f7e4:	2c00      	cmp	r4, #0
 800f7e6:	d1f7      	bne.n	800f7d8 <_fwalk_sglue+0xc>
 800f7e8:	4630      	mov	r0, r6
 800f7ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ee:	89ab      	ldrh	r3, [r5, #12]
 800f7f0:	2b01      	cmp	r3, #1
 800f7f2:	d907      	bls.n	800f804 <_fwalk_sglue+0x38>
 800f7f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7f8:	3301      	adds	r3, #1
 800f7fa:	d003      	beq.n	800f804 <_fwalk_sglue+0x38>
 800f7fc:	4629      	mov	r1, r5
 800f7fe:	4638      	mov	r0, r7
 800f800:	47c0      	blx	r8
 800f802:	4306      	orrs	r6, r0
 800f804:	3568      	adds	r5, #104	@ 0x68
 800f806:	e7e9      	b.n	800f7dc <_fwalk_sglue+0x10>

0800f808 <memset>:
 800f808:	4402      	add	r2, r0
 800f80a:	4603      	mov	r3, r0
 800f80c:	4293      	cmp	r3, r2
 800f80e:	d100      	bne.n	800f812 <memset+0xa>
 800f810:	4770      	bx	lr
 800f812:	f803 1b01 	strb.w	r1, [r3], #1
 800f816:	e7f9      	b.n	800f80c <memset+0x4>

0800f818 <__errno>:
 800f818:	4b01      	ldr	r3, [pc, #4]	@ (800f820 <__errno+0x8>)
 800f81a:	6818      	ldr	r0, [r3, #0]
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	20000048 	.word	0x20000048

0800f824 <__libc_init_array>:
 800f824:	b570      	push	{r4, r5, r6, lr}
 800f826:	4d0d      	ldr	r5, [pc, #52]	@ (800f85c <__libc_init_array+0x38>)
 800f828:	4c0d      	ldr	r4, [pc, #52]	@ (800f860 <__libc_init_array+0x3c>)
 800f82a:	1b64      	subs	r4, r4, r5
 800f82c:	10a4      	asrs	r4, r4, #2
 800f82e:	2600      	movs	r6, #0
 800f830:	42a6      	cmp	r6, r4
 800f832:	d109      	bne.n	800f848 <__libc_init_array+0x24>
 800f834:	4d0b      	ldr	r5, [pc, #44]	@ (800f864 <__libc_init_array+0x40>)
 800f836:	4c0c      	ldr	r4, [pc, #48]	@ (800f868 <__libc_init_array+0x44>)
 800f838:	f002 f956 	bl	8011ae8 <_init>
 800f83c:	1b64      	subs	r4, r4, r5
 800f83e:	10a4      	asrs	r4, r4, #2
 800f840:	2600      	movs	r6, #0
 800f842:	42a6      	cmp	r6, r4
 800f844:	d105      	bne.n	800f852 <__libc_init_array+0x2e>
 800f846:	bd70      	pop	{r4, r5, r6, pc}
 800f848:	f855 3b04 	ldr.w	r3, [r5], #4
 800f84c:	4798      	blx	r3
 800f84e:	3601      	adds	r6, #1
 800f850:	e7ee      	b.n	800f830 <__libc_init_array+0xc>
 800f852:	f855 3b04 	ldr.w	r3, [r5], #4
 800f856:	4798      	blx	r3
 800f858:	3601      	adds	r6, #1
 800f85a:	e7f2      	b.n	800f842 <__libc_init_array+0x1e>
 800f85c:	080121dc 	.word	0x080121dc
 800f860:	080121dc 	.word	0x080121dc
 800f864:	080121dc 	.word	0x080121dc
 800f868:	080121e0 	.word	0x080121e0

0800f86c <__retarget_lock_init_recursive>:
 800f86c:	4770      	bx	lr

0800f86e <__retarget_lock_acquire_recursive>:
 800f86e:	4770      	bx	lr

0800f870 <__retarget_lock_release_recursive>:
 800f870:	4770      	bx	lr
	...

0800f874 <_localeconv_r>:
 800f874:	4800      	ldr	r0, [pc, #0]	@ (800f878 <_localeconv_r+0x4>)
 800f876:	4770      	bx	lr
 800f878:	20000188 	.word	0x20000188

0800f87c <_reclaim_reent>:
 800f87c:	4b2d      	ldr	r3, [pc, #180]	@ (800f934 <_reclaim_reent+0xb8>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	4283      	cmp	r3, r0
 800f882:	b570      	push	{r4, r5, r6, lr}
 800f884:	4604      	mov	r4, r0
 800f886:	d053      	beq.n	800f930 <_reclaim_reent+0xb4>
 800f888:	69c3      	ldr	r3, [r0, #28]
 800f88a:	b31b      	cbz	r3, 800f8d4 <_reclaim_reent+0x58>
 800f88c:	68db      	ldr	r3, [r3, #12]
 800f88e:	b163      	cbz	r3, 800f8aa <_reclaim_reent+0x2e>
 800f890:	2500      	movs	r5, #0
 800f892:	69e3      	ldr	r3, [r4, #28]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	5959      	ldr	r1, [r3, r5]
 800f898:	b9b1      	cbnz	r1, 800f8c8 <_reclaim_reent+0x4c>
 800f89a:	3504      	adds	r5, #4
 800f89c:	2d80      	cmp	r5, #128	@ 0x80
 800f89e:	d1f8      	bne.n	800f892 <_reclaim_reent+0x16>
 800f8a0:	69e3      	ldr	r3, [r4, #28]
 800f8a2:	4620      	mov	r0, r4
 800f8a4:	68d9      	ldr	r1, [r3, #12]
 800f8a6:	f000 feaf 	bl	8010608 <_free_r>
 800f8aa:	69e3      	ldr	r3, [r4, #28]
 800f8ac:	6819      	ldr	r1, [r3, #0]
 800f8ae:	b111      	cbz	r1, 800f8b6 <_reclaim_reent+0x3a>
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 fea9 	bl	8010608 <_free_r>
 800f8b6:	69e3      	ldr	r3, [r4, #28]
 800f8b8:	689d      	ldr	r5, [r3, #8]
 800f8ba:	b15d      	cbz	r5, 800f8d4 <_reclaim_reent+0x58>
 800f8bc:	4629      	mov	r1, r5
 800f8be:	4620      	mov	r0, r4
 800f8c0:	682d      	ldr	r5, [r5, #0]
 800f8c2:	f000 fea1 	bl	8010608 <_free_r>
 800f8c6:	e7f8      	b.n	800f8ba <_reclaim_reent+0x3e>
 800f8c8:	680e      	ldr	r6, [r1, #0]
 800f8ca:	4620      	mov	r0, r4
 800f8cc:	f000 fe9c 	bl	8010608 <_free_r>
 800f8d0:	4631      	mov	r1, r6
 800f8d2:	e7e1      	b.n	800f898 <_reclaim_reent+0x1c>
 800f8d4:	6961      	ldr	r1, [r4, #20]
 800f8d6:	b111      	cbz	r1, 800f8de <_reclaim_reent+0x62>
 800f8d8:	4620      	mov	r0, r4
 800f8da:	f000 fe95 	bl	8010608 <_free_r>
 800f8de:	69e1      	ldr	r1, [r4, #28]
 800f8e0:	b111      	cbz	r1, 800f8e8 <_reclaim_reent+0x6c>
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f000 fe90 	bl	8010608 <_free_r>
 800f8e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f8ea:	b111      	cbz	r1, 800f8f2 <_reclaim_reent+0x76>
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f000 fe8b 	bl	8010608 <_free_r>
 800f8f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8f4:	b111      	cbz	r1, 800f8fc <_reclaim_reent+0x80>
 800f8f6:	4620      	mov	r0, r4
 800f8f8:	f000 fe86 	bl	8010608 <_free_r>
 800f8fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f8fe:	b111      	cbz	r1, 800f906 <_reclaim_reent+0x8a>
 800f900:	4620      	mov	r0, r4
 800f902:	f000 fe81 	bl	8010608 <_free_r>
 800f906:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f908:	b111      	cbz	r1, 800f910 <_reclaim_reent+0x94>
 800f90a:	4620      	mov	r0, r4
 800f90c:	f000 fe7c 	bl	8010608 <_free_r>
 800f910:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f912:	b111      	cbz	r1, 800f91a <_reclaim_reent+0x9e>
 800f914:	4620      	mov	r0, r4
 800f916:	f000 fe77 	bl	8010608 <_free_r>
 800f91a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f91c:	b111      	cbz	r1, 800f924 <_reclaim_reent+0xa8>
 800f91e:	4620      	mov	r0, r4
 800f920:	f000 fe72 	bl	8010608 <_free_r>
 800f924:	6a23      	ldr	r3, [r4, #32]
 800f926:	b11b      	cbz	r3, 800f930 <_reclaim_reent+0xb4>
 800f928:	4620      	mov	r0, r4
 800f92a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f92e:	4718      	bx	r3
 800f930:	bd70      	pop	{r4, r5, r6, pc}
 800f932:	bf00      	nop
 800f934:	20000048 	.word	0x20000048

0800f938 <memcpy>:
 800f938:	440a      	add	r2, r1
 800f93a:	4291      	cmp	r1, r2
 800f93c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f940:	d100      	bne.n	800f944 <memcpy+0xc>
 800f942:	4770      	bx	lr
 800f944:	b510      	push	{r4, lr}
 800f946:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f94a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f94e:	4291      	cmp	r1, r2
 800f950:	d1f9      	bne.n	800f946 <memcpy+0xe>
 800f952:	bd10      	pop	{r4, pc}

0800f954 <quorem>:
 800f954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f958:	6903      	ldr	r3, [r0, #16]
 800f95a:	690c      	ldr	r4, [r1, #16]
 800f95c:	42a3      	cmp	r3, r4
 800f95e:	4607      	mov	r7, r0
 800f960:	db7e      	blt.n	800fa60 <quorem+0x10c>
 800f962:	3c01      	subs	r4, #1
 800f964:	f101 0814 	add.w	r8, r1, #20
 800f968:	00a3      	lsls	r3, r4, #2
 800f96a:	f100 0514 	add.w	r5, r0, #20
 800f96e:	9300      	str	r3, [sp, #0]
 800f970:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f974:	9301      	str	r3, [sp, #4]
 800f976:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f97a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f97e:	3301      	adds	r3, #1
 800f980:	429a      	cmp	r2, r3
 800f982:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f986:	fbb2 f6f3 	udiv	r6, r2, r3
 800f98a:	d32e      	bcc.n	800f9ea <quorem+0x96>
 800f98c:	f04f 0a00 	mov.w	sl, #0
 800f990:	46c4      	mov	ip, r8
 800f992:	46ae      	mov	lr, r5
 800f994:	46d3      	mov	fp, sl
 800f996:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f99a:	b298      	uxth	r0, r3
 800f99c:	fb06 a000 	mla	r0, r6, r0, sl
 800f9a0:	0c02      	lsrs	r2, r0, #16
 800f9a2:	0c1b      	lsrs	r3, r3, #16
 800f9a4:	fb06 2303 	mla	r3, r6, r3, r2
 800f9a8:	f8de 2000 	ldr.w	r2, [lr]
 800f9ac:	b280      	uxth	r0, r0
 800f9ae:	b292      	uxth	r2, r2
 800f9b0:	1a12      	subs	r2, r2, r0
 800f9b2:	445a      	add	r2, fp
 800f9b4:	f8de 0000 	ldr.w	r0, [lr]
 800f9b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f9bc:	b29b      	uxth	r3, r3
 800f9be:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f9c2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f9c6:	b292      	uxth	r2, r2
 800f9c8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f9cc:	45e1      	cmp	r9, ip
 800f9ce:	f84e 2b04 	str.w	r2, [lr], #4
 800f9d2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f9d6:	d2de      	bcs.n	800f996 <quorem+0x42>
 800f9d8:	9b00      	ldr	r3, [sp, #0]
 800f9da:	58eb      	ldr	r3, [r5, r3]
 800f9dc:	b92b      	cbnz	r3, 800f9ea <quorem+0x96>
 800f9de:	9b01      	ldr	r3, [sp, #4]
 800f9e0:	3b04      	subs	r3, #4
 800f9e2:	429d      	cmp	r5, r3
 800f9e4:	461a      	mov	r2, r3
 800f9e6:	d32f      	bcc.n	800fa48 <quorem+0xf4>
 800f9e8:	613c      	str	r4, [r7, #16]
 800f9ea:	4638      	mov	r0, r7
 800f9ec:	f001 fb82 	bl	80110f4 <__mcmp>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	db25      	blt.n	800fa40 <quorem+0xec>
 800f9f4:	4629      	mov	r1, r5
 800f9f6:	2000      	movs	r0, #0
 800f9f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800f9fc:	f8d1 c000 	ldr.w	ip, [r1]
 800fa00:	fa1f fe82 	uxth.w	lr, r2
 800fa04:	fa1f f38c 	uxth.w	r3, ip
 800fa08:	eba3 030e 	sub.w	r3, r3, lr
 800fa0c:	4403      	add	r3, r0
 800fa0e:	0c12      	lsrs	r2, r2, #16
 800fa10:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fa14:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fa1e:	45c1      	cmp	r9, r8
 800fa20:	f841 3b04 	str.w	r3, [r1], #4
 800fa24:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fa28:	d2e6      	bcs.n	800f9f8 <quorem+0xa4>
 800fa2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fa2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fa32:	b922      	cbnz	r2, 800fa3e <quorem+0xea>
 800fa34:	3b04      	subs	r3, #4
 800fa36:	429d      	cmp	r5, r3
 800fa38:	461a      	mov	r2, r3
 800fa3a:	d30b      	bcc.n	800fa54 <quorem+0x100>
 800fa3c:	613c      	str	r4, [r7, #16]
 800fa3e:	3601      	adds	r6, #1
 800fa40:	4630      	mov	r0, r6
 800fa42:	b003      	add	sp, #12
 800fa44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa48:	6812      	ldr	r2, [r2, #0]
 800fa4a:	3b04      	subs	r3, #4
 800fa4c:	2a00      	cmp	r2, #0
 800fa4e:	d1cb      	bne.n	800f9e8 <quorem+0x94>
 800fa50:	3c01      	subs	r4, #1
 800fa52:	e7c6      	b.n	800f9e2 <quorem+0x8e>
 800fa54:	6812      	ldr	r2, [r2, #0]
 800fa56:	3b04      	subs	r3, #4
 800fa58:	2a00      	cmp	r2, #0
 800fa5a:	d1ef      	bne.n	800fa3c <quorem+0xe8>
 800fa5c:	3c01      	subs	r4, #1
 800fa5e:	e7ea      	b.n	800fa36 <quorem+0xe2>
 800fa60:	2000      	movs	r0, #0
 800fa62:	e7ee      	b.n	800fa42 <quorem+0xee>
 800fa64:	0000      	movs	r0, r0
	...

0800fa68 <_dtoa_r>:
 800fa68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa6c:	69c7      	ldr	r7, [r0, #28]
 800fa6e:	b097      	sub	sp, #92	@ 0x5c
 800fa70:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fa74:	ec55 4b10 	vmov	r4, r5, d0
 800fa78:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fa7a:	9107      	str	r1, [sp, #28]
 800fa7c:	4681      	mov	r9, r0
 800fa7e:	920c      	str	r2, [sp, #48]	@ 0x30
 800fa80:	9311      	str	r3, [sp, #68]	@ 0x44
 800fa82:	b97f      	cbnz	r7, 800faa4 <_dtoa_r+0x3c>
 800fa84:	2010      	movs	r0, #16
 800fa86:	f000 ff61 	bl	801094c <malloc>
 800fa8a:	4602      	mov	r2, r0
 800fa8c:	f8c9 001c 	str.w	r0, [r9, #28]
 800fa90:	b920      	cbnz	r0, 800fa9c <_dtoa_r+0x34>
 800fa92:	4ba9      	ldr	r3, [pc, #676]	@ (800fd38 <_dtoa_r+0x2d0>)
 800fa94:	21ef      	movs	r1, #239	@ 0xef
 800fa96:	48a9      	ldr	r0, [pc, #676]	@ (800fd3c <_dtoa_r+0x2d4>)
 800fa98:	f001 fd16 	bl	80114c8 <__assert_func>
 800fa9c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800faa0:	6007      	str	r7, [r0, #0]
 800faa2:	60c7      	str	r7, [r0, #12]
 800faa4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800faa8:	6819      	ldr	r1, [r3, #0]
 800faaa:	b159      	cbz	r1, 800fac4 <_dtoa_r+0x5c>
 800faac:	685a      	ldr	r2, [r3, #4]
 800faae:	604a      	str	r2, [r1, #4]
 800fab0:	2301      	movs	r3, #1
 800fab2:	4093      	lsls	r3, r2
 800fab4:	608b      	str	r3, [r1, #8]
 800fab6:	4648      	mov	r0, r9
 800fab8:	f001 f8ea 	bl	8010c90 <_Bfree>
 800fabc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fac0:	2200      	movs	r2, #0
 800fac2:	601a      	str	r2, [r3, #0]
 800fac4:	1e2b      	subs	r3, r5, #0
 800fac6:	bfb9      	ittee	lt
 800fac8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800facc:	9305      	strlt	r3, [sp, #20]
 800face:	2300      	movge	r3, #0
 800fad0:	6033      	strge	r3, [r6, #0]
 800fad2:	9f05      	ldr	r7, [sp, #20]
 800fad4:	4b9a      	ldr	r3, [pc, #616]	@ (800fd40 <_dtoa_r+0x2d8>)
 800fad6:	bfbc      	itt	lt
 800fad8:	2201      	movlt	r2, #1
 800fada:	6032      	strlt	r2, [r6, #0]
 800fadc:	43bb      	bics	r3, r7
 800fade:	d112      	bne.n	800fb06 <_dtoa_r+0x9e>
 800fae0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fae2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fae6:	6013      	str	r3, [r2, #0]
 800fae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800faec:	4323      	orrs	r3, r4
 800faee:	f000 855a 	beq.w	80105a6 <_dtoa_r+0xb3e>
 800faf2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800faf4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800fd54 <_dtoa_r+0x2ec>
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	f000 855c 	beq.w	80105b6 <_dtoa_r+0xb4e>
 800fafe:	f10a 0303 	add.w	r3, sl, #3
 800fb02:	f000 bd56 	b.w	80105b2 <_dtoa_r+0xb4a>
 800fb06:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	ec51 0b17 	vmov	r0, r1, d7
 800fb10:	2300      	movs	r3, #0
 800fb12:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800fb16:	f7f0 ffd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800fb1a:	4680      	mov	r8, r0
 800fb1c:	b158      	cbz	r0, 800fb36 <_dtoa_r+0xce>
 800fb1e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fb20:	2301      	movs	r3, #1
 800fb22:	6013      	str	r3, [r2, #0]
 800fb24:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fb26:	b113      	cbz	r3, 800fb2e <_dtoa_r+0xc6>
 800fb28:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fb2a:	4b86      	ldr	r3, [pc, #536]	@ (800fd44 <_dtoa_r+0x2dc>)
 800fb2c:	6013      	str	r3, [r2, #0]
 800fb2e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800fd58 <_dtoa_r+0x2f0>
 800fb32:	f000 bd40 	b.w	80105b6 <_dtoa_r+0xb4e>
 800fb36:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800fb3a:	aa14      	add	r2, sp, #80	@ 0x50
 800fb3c:	a915      	add	r1, sp, #84	@ 0x54
 800fb3e:	4648      	mov	r0, r9
 800fb40:	f001 fb88 	bl	8011254 <__d2b>
 800fb44:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800fb48:	9002      	str	r0, [sp, #8]
 800fb4a:	2e00      	cmp	r6, #0
 800fb4c:	d078      	beq.n	800fc40 <_dtoa_r+0x1d8>
 800fb4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb50:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800fb54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fb58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fb5c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800fb60:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800fb64:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800fb68:	4619      	mov	r1, r3
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	4b76      	ldr	r3, [pc, #472]	@ (800fd48 <_dtoa_r+0x2e0>)
 800fb6e:	f7f0 fb8b 	bl	8000288 <__aeabi_dsub>
 800fb72:	a36b      	add	r3, pc, #428	@ (adr r3, 800fd20 <_dtoa_r+0x2b8>)
 800fb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb78:	f7f0 fd3e 	bl	80005f8 <__aeabi_dmul>
 800fb7c:	a36a      	add	r3, pc, #424	@ (adr r3, 800fd28 <_dtoa_r+0x2c0>)
 800fb7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb82:	f7f0 fb83 	bl	800028c <__adddf3>
 800fb86:	4604      	mov	r4, r0
 800fb88:	4630      	mov	r0, r6
 800fb8a:	460d      	mov	r5, r1
 800fb8c:	f7f0 fcca 	bl	8000524 <__aeabi_i2d>
 800fb90:	a367      	add	r3, pc, #412	@ (adr r3, 800fd30 <_dtoa_r+0x2c8>)
 800fb92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb96:	f7f0 fd2f 	bl	80005f8 <__aeabi_dmul>
 800fb9a:	4602      	mov	r2, r0
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	4620      	mov	r0, r4
 800fba0:	4629      	mov	r1, r5
 800fba2:	f7f0 fb73 	bl	800028c <__adddf3>
 800fba6:	4604      	mov	r4, r0
 800fba8:	460d      	mov	r5, r1
 800fbaa:	f7f0 ffd5 	bl	8000b58 <__aeabi_d2iz>
 800fbae:	2200      	movs	r2, #0
 800fbb0:	4607      	mov	r7, r0
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	4620      	mov	r0, r4
 800fbb6:	4629      	mov	r1, r5
 800fbb8:	f7f0 ff90 	bl	8000adc <__aeabi_dcmplt>
 800fbbc:	b140      	cbz	r0, 800fbd0 <_dtoa_r+0x168>
 800fbbe:	4638      	mov	r0, r7
 800fbc0:	f7f0 fcb0 	bl	8000524 <__aeabi_i2d>
 800fbc4:	4622      	mov	r2, r4
 800fbc6:	462b      	mov	r3, r5
 800fbc8:	f7f0 ff7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800fbcc:	b900      	cbnz	r0, 800fbd0 <_dtoa_r+0x168>
 800fbce:	3f01      	subs	r7, #1
 800fbd0:	2f16      	cmp	r7, #22
 800fbd2:	d852      	bhi.n	800fc7a <_dtoa_r+0x212>
 800fbd4:	4b5d      	ldr	r3, [pc, #372]	@ (800fd4c <_dtoa_r+0x2e4>)
 800fbd6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fbe2:	f7f0 ff7b 	bl	8000adc <__aeabi_dcmplt>
 800fbe6:	2800      	cmp	r0, #0
 800fbe8:	d049      	beq.n	800fc7e <_dtoa_r+0x216>
 800fbea:	3f01      	subs	r7, #1
 800fbec:	2300      	movs	r3, #0
 800fbee:	9310      	str	r3, [sp, #64]	@ 0x40
 800fbf0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fbf2:	1b9b      	subs	r3, r3, r6
 800fbf4:	1e5a      	subs	r2, r3, #1
 800fbf6:	bf45      	ittet	mi
 800fbf8:	f1c3 0301 	rsbmi	r3, r3, #1
 800fbfc:	9300      	strmi	r3, [sp, #0]
 800fbfe:	2300      	movpl	r3, #0
 800fc00:	2300      	movmi	r3, #0
 800fc02:	9206      	str	r2, [sp, #24]
 800fc04:	bf54      	ite	pl
 800fc06:	9300      	strpl	r3, [sp, #0]
 800fc08:	9306      	strmi	r3, [sp, #24]
 800fc0a:	2f00      	cmp	r7, #0
 800fc0c:	db39      	blt.n	800fc82 <_dtoa_r+0x21a>
 800fc0e:	9b06      	ldr	r3, [sp, #24]
 800fc10:	970d      	str	r7, [sp, #52]	@ 0x34
 800fc12:	443b      	add	r3, r7
 800fc14:	9306      	str	r3, [sp, #24]
 800fc16:	2300      	movs	r3, #0
 800fc18:	9308      	str	r3, [sp, #32]
 800fc1a:	9b07      	ldr	r3, [sp, #28]
 800fc1c:	2b09      	cmp	r3, #9
 800fc1e:	d863      	bhi.n	800fce8 <_dtoa_r+0x280>
 800fc20:	2b05      	cmp	r3, #5
 800fc22:	bfc4      	itt	gt
 800fc24:	3b04      	subgt	r3, #4
 800fc26:	9307      	strgt	r3, [sp, #28]
 800fc28:	9b07      	ldr	r3, [sp, #28]
 800fc2a:	f1a3 0302 	sub.w	r3, r3, #2
 800fc2e:	bfcc      	ite	gt
 800fc30:	2400      	movgt	r4, #0
 800fc32:	2401      	movle	r4, #1
 800fc34:	2b03      	cmp	r3, #3
 800fc36:	d863      	bhi.n	800fd00 <_dtoa_r+0x298>
 800fc38:	e8df f003 	tbb	[pc, r3]
 800fc3c:	2b375452 	.word	0x2b375452
 800fc40:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800fc44:	441e      	add	r6, r3
 800fc46:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800fc4a:	2b20      	cmp	r3, #32
 800fc4c:	bfc1      	itttt	gt
 800fc4e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800fc52:	409f      	lslgt	r7, r3
 800fc54:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800fc58:	fa24 f303 	lsrgt.w	r3, r4, r3
 800fc5c:	bfd6      	itet	le
 800fc5e:	f1c3 0320 	rsble	r3, r3, #32
 800fc62:	ea47 0003 	orrgt.w	r0, r7, r3
 800fc66:	fa04 f003 	lslle.w	r0, r4, r3
 800fc6a:	f7f0 fc4b 	bl	8000504 <__aeabi_ui2d>
 800fc6e:	2201      	movs	r2, #1
 800fc70:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800fc74:	3e01      	subs	r6, #1
 800fc76:	9212      	str	r2, [sp, #72]	@ 0x48
 800fc78:	e776      	b.n	800fb68 <_dtoa_r+0x100>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e7b7      	b.n	800fbee <_dtoa_r+0x186>
 800fc7e:	9010      	str	r0, [sp, #64]	@ 0x40
 800fc80:	e7b6      	b.n	800fbf0 <_dtoa_r+0x188>
 800fc82:	9b00      	ldr	r3, [sp, #0]
 800fc84:	1bdb      	subs	r3, r3, r7
 800fc86:	9300      	str	r3, [sp, #0]
 800fc88:	427b      	negs	r3, r7
 800fc8a:	9308      	str	r3, [sp, #32]
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	930d      	str	r3, [sp, #52]	@ 0x34
 800fc90:	e7c3      	b.n	800fc1a <_dtoa_r+0x1b2>
 800fc92:	2301      	movs	r3, #1
 800fc94:	9309      	str	r3, [sp, #36]	@ 0x24
 800fc96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fc98:	eb07 0b03 	add.w	fp, r7, r3
 800fc9c:	f10b 0301 	add.w	r3, fp, #1
 800fca0:	2b01      	cmp	r3, #1
 800fca2:	9303      	str	r3, [sp, #12]
 800fca4:	bfb8      	it	lt
 800fca6:	2301      	movlt	r3, #1
 800fca8:	e006      	b.n	800fcb8 <_dtoa_r+0x250>
 800fcaa:	2301      	movs	r3, #1
 800fcac:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	dd28      	ble.n	800fd06 <_dtoa_r+0x29e>
 800fcb4:	469b      	mov	fp, r3
 800fcb6:	9303      	str	r3, [sp, #12]
 800fcb8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800fcbc:	2100      	movs	r1, #0
 800fcbe:	2204      	movs	r2, #4
 800fcc0:	f102 0514 	add.w	r5, r2, #20
 800fcc4:	429d      	cmp	r5, r3
 800fcc6:	d926      	bls.n	800fd16 <_dtoa_r+0x2ae>
 800fcc8:	6041      	str	r1, [r0, #4]
 800fcca:	4648      	mov	r0, r9
 800fccc:	f000 ffa0 	bl	8010c10 <_Balloc>
 800fcd0:	4682      	mov	sl, r0
 800fcd2:	2800      	cmp	r0, #0
 800fcd4:	d142      	bne.n	800fd5c <_dtoa_r+0x2f4>
 800fcd6:	4b1e      	ldr	r3, [pc, #120]	@ (800fd50 <_dtoa_r+0x2e8>)
 800fcd8:	4602      	mov	r2, r0
 800fcda:	f240 11af 	movw	r1, #431	@ 0x1af
 800fcde:	e6da      	b.n	800fa96 <_dtoa_r+0x2e>
 800fce0:	2300      	movs	r3, #0
 800fce2:	e7e3      	b.n	800fcac <_dtoa_r+0x244>
 800fce4:	2300      	movs	r3, #0
 800fce6:	e7d5      	b.n	800fc94 <_dtoa_r+0x22c>
 800fce8:	2401      	movs	r4, #1
 800fcea:	2300      	movs	r3, #0
 800fcec:	9307      	str	r3, [sp, #28]
 800fcee:	9409      	str	r4, [sp, #36]	@ 0x24
 800fcf0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800fcf4:	2200      	movs	r2, #0
 800fcf6:	f8cd b00c 	str.w	fp, [sp, #12]
 800fcfa:	2312      	movs	r3, #18
 800fcfc:	920c      	str	r2, [sp, #48]	@ 0x30
 800fcfe:	e7db      	b.n	800fcb8 <_dtoa_r+0x250>
 800fd00:	2301      	movs	r3, #1
 800fd02:	9309      	str	r3, [sp, #36]	@ 0x24
 800fd04:	e7f4      	b.n	800fcf0 <_dtoa_r+0x288>
 800fd06:	f04f 0b01 	mov.w	fp, #1
 800fd0a:	f8cd b00c 	str.w	fp, [sp, #12]
 800fd0e:	465b      	mov	r3, fp
 800fd10:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800fd14:	e7d0      	b.n	800fcb8 <_dtoa_r+0x250>
 800fd16:	3101      	adds	r1, #1
 800fd18:	0052      	lsls	r2, r2, #1
 800fd1a:	e7d1      	b.n	800fcc0 <_dtoa_r+0x258>
 800fd1c:	f3af 8000 	nop.w
 800fd20:	636f4361 	.word	0x636f4361
 800fd24:	3fd287a7 	.word	0x3fd287a7
 800fd28:	8b60c8b3 	.word	0x8b60c8b3
 800fd2c:	3fc68a28 	.word	0x3fc68a28
 800fd30:	509f79fb 	.word	0x509f79fb
 800fd34:	3fd34413 	.word	0x3fd34413
 800fd38:	08011ea1 	.word	0x08011ea1
 800fd3c:	08011eb8 	.word	0x08011eb8
 800fd40:	7ff00000 	.word	0x7ff00000
 800fd44:	08011e71 	.word	0x08011e71
 800fd48:	3ff80000 	.word	0x3ff80000
 800fd4c:	08012008 	.word	0x08012008
 800fd50:	08011f10 	.word	0x08011f10
 800fd54:	08011e9d 	.word	0x08011e9d
 800fd58:	08011e70 	.word	0x08011e70
 800fd5c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fd60:	6018      	str	r0, [r3, #0]
 800fd62:	9b03      	ldr	r3, [sp, #12]
 800fd64:	2b0e      	cmp	r3, #14
 800fd66:	f200 80a1 	bhi.w	800feac <_dtoa_r+0x444>
 800fd6a:	2c00      	cmp	r4, #0
 800fd6c:	f000 809e 	beq.w	800feac <_dtoa_r+0x444>
 800fd70:	2f00      	cmp	r7, #0
 800fd72:	dd33      	ble.n	800fddc <_dtoa_r+0x374>
 800fd74:	4b9c      	ldr	r3, [pc, #624]	@ (800ffe8 <_dtoa_r+0x580>)
 800fd76:	f007 020f 	and.w	r2, r7, #15
 800fd7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd7e:	ed93 7b00 	vldr	d7, [r3]
 800fd82:	05f8      	lsls	r0, r7, #23
 800fd84:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800fd88:	ea4f 1427 	mov.w	r4, r7, asr #4
 800fd8c:	d516      	bpl.n	800fdbc <_dtoa_r+0x354>
 800fd8e:	4b97      	ldr	r3, [pc, #604]	@ (800ffec <_dtoa_r+0x584>)
 800fd90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fd94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd98:	f7f0 fd58 	bl	800084c <__aeabi_ddiv>
 800fd9c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fda0:	f004 040f 	and.w	r4, r4, #15
 800fda4:	2603      	movs	r6, #3
 800fda6:	4d91      	ldr	r5, [pc, #580]	@ (800ffec <_dtoa_r+0x584>)
 800fda8:	b954      	cbnz	r4, 800fdc0 <_dtoa_r+0x358>
 800fdaa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800fdae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fdb2:	f7f0 fd4b 	bl	800084c <__aeabi_ddiv>
 800fdb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fdba:	e028      	b.n	800fe0e <_dtoa_r+0x3a6>
 800fdbc:	2602      	movs	r6, #2
 800fdbe:	e7f2      	b.n	800fda6 <_dtoa_r+0x33e>
 800fdc0:	07e1      	lsls	r1, r4, #31
 800fdc2:	d508      	bpl.n	800fdd6 <_dtoa_r+0x36e>
 800fdc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fdc8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fdcc:	f7f0 fc14 	bl	80005f8 <__aeabi_dmul>
 800fdd0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fdd4:	3601      	adds	r6, #1
 800fdd6:	1064      	asrs	r4, r4, #1
 800fdd8:	3508      	adds	r5, #8
 800fdda:	e7e5      	b.n	800fda8 <_dtoa_r+0x340>
 800fddc:	f000 80af 	beq.w	800ff3e <_dtoa_r+0x4d6>
 800fde0:	427c      	negs	r4, r7
 800fde2:	4b81      	ldr	r3, [pc, #516]	@ (800ffe8 <_dtoa_r+0x580>)
 800fde4:	4d81      	ldr	r5, [pc, #516]	@ (800ffec <_dtoa_r+0x584>)
 800fde6:	f004 020f 	and.w	r2, r4, #15
 800fdea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800fdf6:	f7f0 fbff 	bl	80005f8 <__aeabi_dmul>
 800fdfa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fdfe:	1124      	asrs	r4, r4, #4
 800fe00:	2300      	movs	r3, #0
 800fe02:	2602      	movs	r6, #2
 800fe04:	2c00      	cmp	r4, #0
 800fe06:	f040 808f 	bne.w	800ff28 <_dtoa_r+0x4c0>
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d1d3      	bne.n	800fdb6 <_dtoa_r+0x34e>
 800fe0e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fe10:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	f000 8094 	beq.w	800ff42 <_dtoa_r+0x4da>
 800fe1a:	4b75      	ldr	r3, [pc, #468]	@ (800fff0 <_dtoa_r+0x588>)
 800fe1c:	2200      	movs	r2, #0
 800fe1e:	4620      	mov	r0, r4
 800fe20:	4629      	mov	r1, r5
 800fe22:	f7f0 fe5b 	bl	8000adc <__aeabi_dcmplt>
 800fe26:	2800      	cmp	r0, #0
 800fe28:	f000 808b 	beq.w	800ff42 <_dtoa_r+0x4da>
 800fe2c:	9b03      	ldr	r3, [sp, #12]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	f000 8087 	beq.w	800ff42 <_dtoa_r+0x4da>
 800fe34:	f1bb 0f00 	cmp.w	fp, #0
 800fe38:	dd34      	ble.n	800fea4 <_dtoa_r+0x43c>
 800fe3a:	4620      	mov	r0, r4
 800fe3c:	4b6d      	ldr	r3, [pc, #436]	@ (800fff4 <_dtoa_r+0x58c>)
 800fe3e:	2200      	movs	r2, #0
 800fe40:	4629      	mov	r1, r5
 800fe42:	f7f0 fbd9 	bl	80005f8 <__aeabi_dmul>
 800fe46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fe4a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800fe4e:	3601      	adds	r6, #1
 800fe50:	465c      	mov	r4, fp
 800fe52:	4630      	mov	r0, r6
 800fe54:	f7f0 fb66 	bl	8000524 <__aeabi_i2d>
 800fe58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800fe5c:	f7f0 fbcc 	bl	80005f8 <__aeabi_dmul>
 800fe60:	4b65      	ldr	r3, [pc, #404]	@ (800fff8 <_dtoa_r+0x590>)
 800fe62:	2200      	movs	r2, #0
 800fe64:	f7f0 fa12 	bl	800028c <__adddf3>
 800fe68:	4605      	mov	r5, r0
 800fe6a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fe6e:	2c00      	cmp	r4, #0
 800fe70:	d16a      	bne.n	800ff48 <_dtoa_r+0x4e0>
 800fe72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe76:	4b61      	ldr	r3, [pc, #388]	@ (800fffc <_dtoa_r+0x594>)
 800fe78:	2200      	movs	r2, #0
 800fe7a:	f7f0 fa05 	bl	8000288 <__aeabi_dsub>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	460b      	mov	r3, r1
 800fe82:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fe86:	462a      	mov	r2, r5
 800fe88:	4633      	mov	r3, r6
 800fe8a:	f7f0 fe45 	bl	8000b18 <__aeabi_dcmpgt>
 800fe8e:	2800      	cmp	r0, #0
 800fe90:	f040 8298 	bne.w	80103c4 <_dtoa_r+0x95c>
 800fe94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fe98:	462a      	mov	r2, r5
 800fe9a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fe9e:	f7f0 fe1d 	bl	8000adc <__aeabi_dcmplt>
 800fea2:	bb38      	cbnz	r0, 800fef4 <_dtoa_r+0x48c>
 800fea4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800fea8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800feac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800feae:	2b00      	cmp	r3, #0
 800feb0:	f2c0 8157 	blt.w	8010162 <_dtoa_r+0x6fa>
 800feb4:	2f0e      	cmp	r7, #14
 800feb6:	f300 8154 	bgt.w	8010162 <_dtoa_r+0x6fa>
 800feba:	4b4b      	ldr	r3, [pc, #300]	@ (800ffe8 <_dtoa_r+0x580>)
 800febc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fec0:	ed93 7b00 	vldr	d7, [r3]
 800fec4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	ed8d 7b00 	vstr	d7, [sp]
 800fecc:	f280 80e5 	bge.w	801009a <_dtoa_r+0x632>
 800fed0:	9b03      	ldr	r3, [sp, #12]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	f300 80e1 	bgt.w	801009a <_dtoa_r+0x632>
 800fed8:	d10c      	bne.n	800fef4 <_dtoa_r+0x48c>
 800feda:	4b48      	ldr	r3, [pc, #288]	@ (800fffc <_dtoa_r+0x594>)
 800fedc:	2200      	movs	r2, #0
 800fede:	ec51 0b17 	vmov	r0, r1, d7
 800fee2:	f7f0 fb89 	bl	80005f8 <__aeabi_dmul>
 800fee6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800feea:	f7f0 fe0b 	bl	8000b04 <__aeabi_dcmpge>
 800feee:	2800      	cmp	r0, #0
 800fef0:	f000 8266 	beq.w	80103c0 <_dtoa_r+0x958>
 800fef4:	2400      	movs	r4, #0
 800fef6:	4625      	mov	r5, r4
 800fef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fefa:	4656      	mov	r6, sl
 800fefc:	ea6f 0803 	mvn.w	r8, r3
 800ff00:	2700      	movs	r7, #0
 800ff02:	4621      	mov	r1, r4
 800ff04:	4648      	mov	r0, r9
 800ff06:	f000 fec3 	bl	8010c90 <_Bfree>
 800ff0a:	2d00      	cmp	r5, #0
 800ff0c:	f000 80bd 	beq.w	801008a <_dtoa_r+0x622>
 800ff10:	b12f      	cbz	r7, 800ff1e <_dtoa_r+0x4b6>
 800ff12:	42af      	cmp	r7, r5
 800ff14:	d003      	beq.n	800ff1e <_dtoa_r+0x4b6>
 800ff16:	4639      	mov	r1, r7
 800ff18:	4648      	mov	r0, r9
 800ff1a:	f000 feb9 	bl	8010c90 <_Bfree>
 800ff1e:	4629      	mov	r1, r5
 800ff20:	4648      	mov	r0, r9
 800ff22:	f000 feb5 	bl	8010c90 <_Bfree>
 800ff26:	e0b0      	b.n	801008a <_dtoa_r+0x622>
 800ff28:	07e2      	lsls	r2, r4, #31
 800ff2a:	d505      	bpl.n	800ff38 <_dtoa_r+0x4d0>
 800ff2c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ff30:	f7f0 fb62 	bl	80005f8 <__aeabi_dmul>
 800ff34:	3601      	adds	r6, #1
 800ff36:	2301      	movs	r3, #1
 800ff38:	1064      	asrs	r4, r4, #1
 800ff3a:	3508      	adds	r5, #8
 800ff3c:	e762      	b.n	800fe04 <_dtoa_r+0x39c>
 800ff3e:	2602      	movs	r6, #2
 800ff40:	e765      	b.n	800fe0e <_dtoa_r+0x3a6>
 800ff42:	9c03      	ldr	r4, [sp, #12]
 800ff44:	46b8      	mov	r8, r7
 800ff46:	e784      	b.n	800fe52 <_dtoa_r+0x3ea>
 800ff48:	4b27      	ldr	r3, [pc, #156]	@ (800ffe8 <_dtoa_r+0x580>)
 800ff4a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ff4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ff50:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ff54:	4454      	add	r4, sl
 800ff56:	2900      	cmp	r1, #0
 800ff58:	d054      	beq.n	8010004 <_dtoa_r+0x59c>
 800ff5a:	4929      	ldr	r1, [pc, #164]	@ (8010000 <_dtoa_r+0x598>)
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	f7f0 fc75 	bl	800084c <__aeabi_ddiv>
 800ff62:	4633      	mov	r3, r6
 800ff64:	462a      	mov	r2, r5
 800ff66:	f7f0 f98f 	bl	8000288 <__aeabi_dsub>
 800ff6a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ff6e:	4656      	mov	r6, sl
 800ff70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff74:	f7f0 fdf0 	bl	8000b58 <__aeabi_d2iz>
 800ff78:	4605      	mov	r5, r0
 800ff7a:	f7f0 fad3 	bl	8000524 <__aeabi_i2d>
 800ff7e:	4602      	mov	r2, r0
 800ff80:	460b      	mov	r3, r1
 800ff82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ff86:	f7f0 f97f 	bl	8000288 <__aeabi_dsub>
 800ff8a:	3530      	adds	r5, #48	@ 0x30
 800ff8c:	4602      	mov	r2, r0
 800ff8e:	460b      	mov	r3, r1
 800ff90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ff94:	f806 5b01 	strb.w	r5, [r6], #1
 800ff98:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ff9c:	f7f0 fd9e 	bl	8000adc <__aeabi_dcmplt>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d172      	bne.n	801008a <_dtoa_r+0x622>
 800ffa4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ffa8:	4911      	ldr	r1, [pc, #68]	@ (800fff0 <_dtoa_r+0x588>)
 800ffaa:	2000      	movs	r0, #0
 800ffac:	f7f0 f96c 	bl	8000288 <__aeabi_dsub>
 800ffb0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ffb4:	f7f0 fd92 	bl	8000adc <__aeabi_dcmplt>
 800ffb8:	2800      	cmp	r0, #0
 800ffba:	f040 80b4 	bne.w	8010126 <_dtoa_r+0x6be>
 800ffbe:	42a6      	cmp	r6, r4
 800ffc0:	f43f af70 	beq.w	800fea4 <_dtoa_r+0x43c>
 800ffc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ffc8:	4b0a      	ldr	r3, [pc, #40]	@ (800fff4 <_dtoa_r+0x58c>)
 800ffca:	2200      	movs	r2, #0
 800ffcc:	f7f0 fb14 	bl	80005f8 <__aeabi_dmul>
 800ffd0:	4b08      	ldr	r3, [pc, #32]	@ (800fff4 <_dtoa_r+0x58c>)
 800ffd2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ffdc:	f7f0 fb0c 	bl	80005f8 <__aeabi_dmul>
 800ffe0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ffe4:	e7c4      	b.n	800ff70 <_dtoa_r+0x508>
 800ffe6:	bf00      	nop
 800ffe8:	08012008 	.word	0x08012008
 800ffec:	08011fe0 	.word	0x08011fe0
 800fff0:	3ff00000 	.word	0x3ff00000
 800fff4:	40240000 	.word	0x40240000
 800fff8:	401c0000 	.word	0x401c0000
 800fffc:	40140000 	.word	0x40140000
 8010000:	3fe00000 	.word	0x3fe00000
 8010004:	4631      	mov	r1, r6
 8010006:	4628      	mov	r0, r5
 8010008:	f7f0 faf6 	bl	80005f8 <__aeabi_dmul>
 801000c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010010:	9413      	str	r4, [sp, #76]	@ 0x4c
 8010012:	4656      	mov	r6, sl
 8010014:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010018:	f7f0 fd9e 	bl	8000b58 <__aeabi_d2iz>
 801001c:	4605      	mov	r5, r0
 801001e:	f7f0 fa81 	bl	8000524 <__aeabi_i2d>
 8010022:	4602      	mov	r2, r0
 8010024:	460b      	mov	r3, r1
 8010026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801002a:	f7f0 f92d 	bl	8000288 <__aeabi_dsub>
 801002e:	3530      	adds	r5, #48	@ 0x30
 8010030:	f806 5b01 	strb.w	r5, [r6], #1
 8010034:	4602      	mov	r2, r0
 8010036:	460b      	mov	r3, r1
 8010038:	42a6      	cmp	r6, r4
 801003a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801003e:	f04f 0200 	mov.w	r2, #0
 8010042:	d124      	bne.n	801008e <_dtoa_r+0x626>
 8010044:	4baf      	ldr	r3, [pc, #700]	@ (8010304 <_dtoa_r+0x89c>)
 8010046:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801004a:	f7f0 f91f 	bl	800028c <__adddf3>
 801004e:	4602      	mov	r2, r0
 8010050:	460b      	mov	r3, r1
 8010052:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010056:	f7f0 fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 801005a:	2800      	cmp	r0, #0
 801005c:	d163      	bne.n	8010126 <_dtoa_r+0x6be>
 801005e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010062:	49a8      	ldr	r1, [pc, #672]	@ (8010304 <_dtoa_r+0x89c>)
 8010064:	2000      	movs	r0, #0
 8010066:	f7f0 f90f 	bl	8000288 <__aeabi_dsub>
 801006a:	4602      	mov	r2, r0
 801006c:	460b      	mov	r3, r1
 801006e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010072:	f7f0 fd33 	bl	8000adc <__aeabi_dcmplt>
 8010076:	2800      	cmp	r0, #0
 8010078:	f43f af14 	beq.w	800fea4 <_dtoa_r+0x43c>
 801007c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801007e:	1e73      	subs	r3, r6, #1
 8010080:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010082:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010086:	2b30      	cmp	r3, #48	@ 0x30
 8010088:	d0f8      	beq.n	801007c <_dtoa_r+0x614>
 801008a:	4647      	mov	r7, r8
 801008c:	e03b      	b.n	8010106 <_dtoa_r+0x69e>
 801008e:	4b9e      	ldr	r3, [pc, #632]	@ (8010308 <_dtoa_r+0x8a0>)
 8010090:	f7f0 fab2 	bl	80005f8 <__aeabi_dmul>
 8010094:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010098:	e7bc      	b.n	8010014 <_dtoa_r+0x5ac>
 801009a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801009e:	4656      	mov	r6, sl
 80100a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100a4:	4620      	mov	r0, r4
 80100a6:	4629      	mov	r1, r5
 80100a8:	f7f0 fbd0 	bl	800084c <__aeabi_ddiv>
 80100ac:	f7f0 fd54 	bl	8000b58 <__aeabi_d2iz>
 80100b0:	4680      	mov	r8, r0
 80100b2:	f7f0 fa37 	bl	8000524 <__aeabi_i2d>
 80100b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100ba:	f7f0 fa9d 	bl	80005f8 <__aeabi_dmul>
 80100be:	4602      	mov	r2, r0
 80100c0:	460b      	mov	r3, r1
 80100c2:	4620      	mov	r0, r4
 80100c4:	4629      	mov	r1, r5
 80100c6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80100ca:	f7f0 f8dd 	bl	8000288 <__aeabi_dsub>
 80100ce:	f806 4b01 	strb.w	r4, [r6], #1
 80100d2:	9d03      	ldr	r5, [sp, #12]
 80100d4:	eba6 040a 	sub.w	r4, r6, sl
 80100d8:	42a5      	cmp	r5, r4
 80100da:	4602      	mov	r2, r0
 80100dc:	460b      	mov	r3, r1
 80100de:	d133      	bne.n	8010148 <_dtoa_r+0x6e0>
 80100e0:	f7f0 f8d4 	bl	800028c <__adddf3>
 80100e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100e8:	4604      	mov	r4, r0
 80100ea:	460d      	mov	r5, r1
 80100ec:	f7f0 fd14 	bl	8000b18 <__aeabi_dcmpgt>
 80100f0:	b9c0      	cbnz	r0, 8010124 <_dtoa_r+0x6bc>
 80100f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80100f6:	4620      	mov	r0, r4
 80100f8:	4629      	mov	r1, r5
 80100fa:	f7f0 fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 80100fe:	b110      	cbz	r0, 8010106 <_dtoa_r+0x69e>
 8010100:	f018 0f01 	tst.w	r8, #1
 8010104:	d10e      	bne.n	8010124 <_dtoa_r+0x6bc>
 8010106:	9902      	ldr	r1, [sp, #8]
 8010108:	4648      	mov	r0, r9
 801010a:	f000 fdc1 	bl	8010c90 <_Bfree>
 801010e:	2300      	movs	r3, #0
 8010110:	7033      	strb	r3, [r6, #0]
 8010112:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010114:	3701      	adds	r7, #1
 8010116:	601f      	str	r7, [r3, #0]
 8010118:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801011a:	2b00      	cmp	r3, #0
 801011c:	f000 824b 	beq.w	80105b6 <_dtoa_r+0xb4e>
 8010120:	601e      	str	r6, [r3, #0]
 8010122:	e248      	b.n	80105b6 <_dtoa_r+0xb4e>
 8010124:	46b8      	mov	r8, r7
 8010126:	4633      	mov	r3, r6
 8010128:	461e      	mov	r6, r3
 801012a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801012e:	2a39      	cmp	r2, #57	@ 0x39
 8010130:	d106      	bne.n	8010140 <_dtoa_r+0x6d8>
 8010132:	459a      	cmp	sl, r3
 8010134:	d1f8      	bne.n	8010128 <_dtoa_r+0x6c0>
 8010136:	2230      	movs	r2, #48	@ 0x30
 8010138:	f108 0801 	add.w	r8, r8, #1
 801013c:	f88a 2000 	strb.w	r2, [sl]
 8010140:	781a      	ldrb	r2, [r3, #0]
 8010142:	3201      	adds	r2, #1
 8010144:	701a      	strb	r2, [r3, #0]
 8010146:	e7a0      	b.n	801008a <_dtoa_r+0x622>
 8010148:	4b6f      	ldr	r3, [pc, #444]	@ (8010308 <_dtoa_r+0x8a0>)
 801014a:	2200      	movs	r2, #0
 801014c:	f7f0 fa54 	bl	80005f8 <__aeabi_dmul>
 8010150:	2200      	movs	r2, #0
 8010152:	2300      	movs	r3, #0
 8010154:	4604      	mov	r4, r0
 8010156:	460d      	mov	r5, r1
 8010158:	f7f0 fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 801015c:	2800      	cmp	r0, #0
 801015e:	d09f      	beq.n	80100a0 <_dtoa_r+0x638>
 8010160:	e7d1      	b.n	8010106 <_dtoa_r+0x69e>
 8010162:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010164:	2a00      	cmp	r2, #0
 8010166:	f000 80ea 	beq.w	801033e <_dtoa_r+0x8d6>
 801016a:	9a07      	ldr	r2, [sp, #28]
 801016c:	2a01      	cmp	r2, #1
 801016e:	f300 80cd 	bgt.w	801030c <_dtoa_r+0x8a4>
 8010172:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8010174:	2a00      	cmp	r2, #0
 8010176:	f000 80c1 	beq.w	80102fc <_dtoa_r+0x894>
 801017a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801017e:	9c08      	ldr	r4, [sp, #32]
 8010180:	9e00      	ldr	r6, [sp, #0]
 8010182:	9a00      	ldr	r2, [sp, #0]
 8010184:	441a      	add	r2, r3
 8010186:	9200      	str	r2, [sp, #0]
 8010188:	9a06      	ldr	r2, [sp, #24]
 801018a:	2101      	movs	r1, #1
 801018c:	441a      	add	r2, r3
 801018e:	4648      	mov	r0, r9
 8010190:	9206      	str	r2, [sp, #24]
 8010192:	f000 fe31 	bl	8010df8 <__i2b>
 8010196:	4605      	mov	r5, r0
 8010198:	b166      	cbz	r6, 80101b4 <_dtoa_r+0x74c>
 801019a:	9b06      	ldr	r3, [sp, #24]
 801019c:	2b00      	cmp	r3, #0
 801019e:	dd09      	ble.n	80101b4 <_dtoa_r+0x74c>
 80101a0:	42b3      	cmp	r3, r6
 80101a2:	9a00      	ldr	r2, [sp, #0]
 80101a4:	bfa8      	it	ge
 80101a6:	4633      	movge	r3, r6
 80101a8:	1ad2      	subs	r2, r2, r3
 80101aa:	9200      	str	r2, [sp, #0]
 80101ac:	9a06      	ldr	r2, [sp, #24]
 80101ae:	1af6      	subs	r6, r6, r3
 80101b0:	1ad3      	subs	r3, r2, r3
 80101b2:	9306      	str	r3, [sp, #24]
 80101b4:	9b08      	ldr	r3, [sp, #32]
 80101b6:	b30b      	cbz	r3, 80101fc <_dtoa_r+0x794>
 80101b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	f000 80c6 	beq.w	801034c <_dtoa_r+0x8e4>
 80101c0:	2c00      	cmp	r4, #0
 80101c2:	f000 80c0 	beq.w	8010346 <_dtoa_r+0x8de>
 80101c6:	4629      	mov	r1, r5
 80101c8:	4622      	mov	r2, r4
 80101ca:	4648      	mov	r0, r9
 80101cc:	f000 fecc 	bl	8010f68 <__pow5mult>
 80101d0:	9a02      	ldr	r2, [sp, #8]
 80101d2:	4601      	mov	r1, r0
 80101d4:	4605      	mov	r5, r0
 80101d6:	4648      	mov	r0, r9
 80101d8:	f000 fe24 	bl	8010e24 <__multiply>
 80101dc:	9902      	ldr	r1, [sp, #8]
 80101de:	4680      	mov	r8, r0
 80101e0:	4648      	mov	r0, r9
 80101e2:	f000 fd55 	bl	8010c90 <_Bfree>
 80101e6:	9b08      	ldr	r3, [sp, #32]
 80101e8:	1b1b      	subs	r3, r3, r4
 80101ea:	9308      	str	r3, [sp, #32]
 80101ec:	f000 80b1 	beq.w	8010352 <_dtoa_r+0x8ea>
 80101f0:	9a08      	ldr	r2, [sp, #32]
 80101f2:	4641      	mov	r1, r8
 80101f4:	4648      	mov	r0, r9
 80101f6:	f000 feb7 	bl	8010f68 <__pow5mult>
 80101fa:	9002      	str	r0, [sp, #8]
 80101fc:	2101      	movs	r1, #1
 80101fe:	4648      	mov	r0, r9
 8010200:	f000 fdfa 	bl	8010df8 <__i2b>
 8010204:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010206:	4604      	mov	r4, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	f000 81d8 	beq.w	80105be <_dtoa_r+0xb56>
 801020e:	461a      	mov	r2, r3
 8010210:	4601      	mov	r1, r0
 8010212:	4648      	mov	r0, r9
 8010214:	f000 fea8 	bl	8010f68 <__pow5mult>
 8010218:	9b07      	ldr	r3, [sp, #28]
 801021a:	2b01      	cmp	r3, #1
 801021c:	4604      	mov	r4, r0
 801021e:	f300 809f 	bgt.w	8010360 <_dtoa_r+0x8f8>
 8010222:	9b04      	ldr	r3, [sp, #16]
 8010224:	2b00      	cmp	r3, #0
 8010226:	f040 8097 	bne.w	8010358 <_dtoa_r+0x8f0>
 801022a:	9b05      	ldr	r3, [sp, #20]
 801022c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010230:	2b00      	cmp	r3, #0
 8010232:	f040 8093 	bne.w	801035c <_dtoa_r+0x8f4>
 8010236:	9b05      	ldr	r3, [sp, #20]
 8010238:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801023c:	0d1b      	lsrs	r3, r3, #20
 801023e:	051b      	lsls	r3, r3, #20
 8010240:	b133      	cbz	r3, 8010250 <_dtoa_r+0x7e8>
 8010242:	9b00      	ldr	r3, [sp, #0]
 8010244:	3301      	adds	r3, #1
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	9b06      	ldr	r3, [sp, #24]
 801024a:	3301      	adds	r3, #1
 801024c:	9306      	str	r3, [sp, #24]
 801024e:	2301      	movs	r3, #1
 8010250:	9308      	str	r3, [sp, #32]
 8010252:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 81b8 	beq.w	80105ca <_dtoa_r+0xb62>
 801025a:	6923      	ldr	r3, [r4, #16]
 801025c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010260:	6918      	ldr	r0, [r3, #16]
 8010262:	f000 fd7d 	bl	8010d60 <__hi0bits>
 8010266:	f1c0 0020 	rsb	r0, r0, #32
 801026a:	9b06      	ldr	r3, [sp, #24]
 801026c:	4418      	add	r0, r3
 801026e:	f010 001f 	ands.w	r0, r0, #31
 8010272:	f000 8082 	beq.w	801037a <_dtoa_r+0x912>
 8010276:	f1c0 0320 	rsb	r3, r0, #32
 801027a:	2b04      	cmp	r3, #4
 801027c:	dd73      	ble.n	8010366 <_dtoa_r+0x8fe>
 801027e:	9b00      	ldr	r3, [sp, #0]
 8010280:	f1c0 001c 	rsb	r0, r0, #28
 8010284:	4403      	add	r3, r0
 8010286:	9300      	str	r3, [sp, #0]
 8010288:	9b06      	ldr	r3, [sp, #24]
 801028a:	4403      	add	r3, r0
 801028c:	4406      	add	r6, r0
 801028e:	9306      	str	r3, [sp, #24]
 8010290:	9b00      	ldr	r3, [sp, #0]
 8010292:	2b00      	cmp	r3, #0
 8010294:	dd05      	ble.n	80102a2 <_dtoa_r+0x83a>
 8010296:	9902      	ldr	r1, [sp, #8]
 8010298:	461a      	mov	r2, r3
 801029a:	4648      	mov	r0, r9
 801029c:	f000 febe 	bl	801101c <__lshift>
 80102a0:	9002      	str	r0, [sp, #8]
 80102a2:	9b06      	ldr	r3, [sp, #24]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	dd05      	ble.n	80102b4 <_dtoa_r+0x84c>
 80102a8:	4621      	mov	r1, r4
 80102aa:	461a      	mov	r2, r3
 80102ac:	4648      	mov	r0, r9
 80102ae:	f000 feb5 	bl	801101c <__lshift>
 80102b2:	4604      	mov	r4, r0
 80102b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d061      	beq.n	801037e <_dtoa_r+0x916>
 80102ba:	9802      	ldr	r0, [sp, #8]
 80102bc:	4621      	mov	r1, r4
 80102be:	f000 ff19 	bl	80110f4 <__mcmp>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	da5b      	bge.n	801037e <_dtoa_r+0x916>
 80102c6:	2300      	movs	r3, #0
 80102c8:	9902      	ldr	r1, [sp, #8]
 80102ca:	220a      	movs	r2, #10
 80102cc:	4648      	mov	r0, r9
 80102ce:	f000 fd01 	bl	8010cd4 <__multadd>
 80102d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102d4:	9002      	str	r0, [sp, #8]
 80102d6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f000 8177 	beq.w	80105ce <_dtoa_r+0xb66>
 80102e0:	4629      	mov	r1, r5
 80102e2:	2300      	movs	r3, #0
 80102e4:	220a      	movs	r2, #10
 80102e6:	4648      	mov	r0, r9
 80102e8:	f000 fcf4 	bl	8010cd4 <__multadd>
 80102ec:	f1bb 0f00 	cmp.w	fp, #0
 80102f0:	4605      	mov	r5, r0
 80102f2:	dc6f      	bgt.n	80103d4 <_dtoa_r+0x96c>
 80102f4:	9b07      	ldr	r3, [sp, #28]
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	dc49      	bgt.n	801038e <_dtoa_r+0x926>
 80102fa:	e06b      	b.n	80103d4 <_dtoa_r+0x96c>
 80102fc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80102fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8010302:	e73c      	b.n	801017e <_dtoa_r+0x716>
 8010304:	3fe00000 	.word	0x3fe00000
 8010308:	40240000 	.word	0x40240000
 801030c:	9b03      	ldr	r3, [sp, #12]
 801030e:	1e5c      	subs	r4, r3, #1
 8010310:	9b08      	ldr	r3, [sp, #32]
 8010312:	42a3      	cmp	r3, r4
 8010314:	db09      	blt.n	801032a <_dtoa_r+0x8c2>
 8010316:	1b1c      	subs	r4, r3, r4
 8010318:	9b03      	ldr	r3, [sp, #12]
 801031a:	2b00      	cmp	r3, #0
 801031c:	f6bf af30 	bge.w	8010180 <_dtoa_r+0x718>
 8010320:	9b00      	ldr	r3, [sp, #0]
 8010322:	9a03      	ldr	r2, [sp, #12]
 8010324:	1a9e      	subs	r6, r3, r2
 8010326:	2300      	movs	r3, #0
 8010328:	e72b      	b.n	8010182 <_dtoa_r+0x71a>
 801032a:	9b08      	ldr	r3, [sp, #32]
 801032c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801032e:	9408      	str	r4, [sp, #32]
 8010330:	1ae3      	subs	r3, r4, r3
 8010332:	441a      	add	r2, r3
 8010334:	9e00      	ldr	r6, [sp, #0]
 8010336:	9b03      	ldr	r3, [sp, #12]
 8010338:	920d      	str	r2, [sp, #52]	@ 0x34
 801033a:	2400      	movs	r4, #0
 801033c:	e721      	b.n	8010182 <_dtoa_r+0x71a>
 801033e:	9c08      	ldr	r4, [sp, #32]
 8010340:	9e00      	ldr	r6, [sp, #0]
 8010342:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8010344:	e728      	b.n	8010198 <_dtoa_r+0x730>
 8010346:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801034a:	e751      	b.n	80101f0 <_dtoa_r+0x788>
 801034c:	9a08      	ldr	r2, [sp, #32]
 801034e:	9902      	ldr	r1, [sp, #8]
 8010350:	e750      	b.n	80101f4 <_dtoa_r+0x78c>
 8010352:	f8cd 8008 	str.w	r8, [sp, #8]
 8010356:	e751      	b.n	80101fc <_dtoa_r+0x794>
 8010358:	2300      	movs	r3, #0
 801035a:	e779      	b.n	8010250 <_dtoa_r+0x7e8>
 801035c:	9b04      	ldr	r3, [sp, #16]
 801035e:	e777      	b.n	8010250 <_dtoa_r+0x7e8>
 8010360:	2300      	movs	r3, #0
 8010362:	9308      	str	r3, [sp, #32]
 8010364:	e779      	b.n	801025a <_dtoa_r+0x7f2>
 8010366:	d093      	beq.n	8010290 <_dtoa_r+0x828>
 8010368:	9a00      	ldr	r2, [sp, #0]
 801036a:	331c      	adds	r3, #28
 801036c:	441a      	add	r2, r3
 801036e:	9200      	str	r2, [sp, #0]
 8010370:	9a06      	ldr	r2, [sp, #24]
 8010372:	441a      	add	r2, r3
 8010374:	441e      	add	r6, r3
 8010376:	9206      	str	r2, [sp, #24]
 8010378:	e78a      	b.n	8010290 <_dtoa_r+0x828>
 801037a:	4603      	mov	r3, r0
 801037c:	e7f4      	b.n	8010368 <_dtoa_r+0x900>
 801037e:	9b03      	ldr	r3, [sp, #12]
 8010380:	2b00      	cmp	r3, #0
 8010382:	46b8      	mov	r8, r7
 8010384:	dc20      	bgt.n	80103c8 <_dtoa_r+0x960>
 8010386:	469b      	mov	fp, r3
 8010388:	9b07      	ldr	r3, [sp, #28]
 801038a:	2b02      	cmp	r3, #2
 801038c:	dd1e      	ble.n	80103cc <_dtoa_r+0x964>
 801038e:	f1bb 0f00 	cmp.w	fp, #0
 8010392:	f47f adb1 	bne.w	800fef8 <_dtoa_r+0x490>
 8010396:	4621      	mov	r1, r4
 8010398:	465b      	mov	r3, fp
 801039a:	2205      	movs	r2, #5
 801039c:	4648      	mov	r0, r9
 801039e:	f000 fc99 	bl	8010cd4 <__multadd>
 80103a2:	4601      	mov	r1, r0
 80103a4:	4604      	mov	r4, r0
 80103a6:	9802      	ldr	r0, [sp, #8]
 80103a8:	f000 fea4 	bl	80110f4 <__mcmp>
 80103ac:	2800      	cmp	r0, #0
 80103ae:	f77f ada3 	ble.w	800fef8 <_dtoa_r+0x490>
 80103b2:	4656      	mov	r6, sl
 80103b4:	2331      	movs	r3, #49	@ 0x31
 80103b6:	f806 3b01 	strb.w	r3, [r6], #1
 80103ba:	f108 0801 	add.w	r8, r8, #1
 80103be:	e59f      	b.n	800ff00 <_dtoa_r+0x498>
 80103c0:	9c03      	ldr	r4, [sp, #12]
 80103c2:	46b8      	mov	r8, r7
 80103c4:	4625      	mov	r5, r4
 80103c6:	e7f4      	b.n	80103b2 <_dtoa_r+0x94a>
 80103c8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80103cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	f000 8101 	beq.w	80105d6 <_dtoa_r+0xb6e>
 80103d4:	2e00      	cmp	r6, #0
 80103d6:	dd05      	ble.n	80103e4 <_dtoa_r+0x97c>
 80103d8:	4629      	mov	r1, r5
 80103da:	4632      	mov	r2, r6
 80103dc:	4648      	mov	r0, r9
 80103de:	f000 fe1d 	bl	801101c <__lshift>
 80103e2:	4605      	mov	r5, r0
 80103e4:	9b08      	ldr	r3, [sp, #32]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d05c      	beq.n	80104a4 <_dtoa_r+0xa3c>
 80103ea:	6869      	ldr	r1, [r5, #4]
 80103ec:	4648      	mov	r0, r9
 80103ee:	f000 fc0f 	bl	8010c10 <_Balloc>
 80103f2:	4606      	mov	r6, r0
 80103f4:	b928      	cbnz	r0, 8010402 <_dtoa_r+0x99a>
 80103f6:	4b82      	ldr	r3, [pc, #520]	@ (8010600 <_dtoa_r+0xb98>)
 80103f8:	4602      	mov	r2, r0
 80103fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80103fe:	f7ff bb4a 	b.w	800fa96 <_dtoa_r+0x2e>
 8010402:	692a      	ldr	r2, [r5, #16]
 8010404:	3202      	adds	r2, #2
 8010406:	0092      	lsls	r2, r2, #2
 8010408:	f105 010c 	add.w	r1, r5, #12
 801040c:	300c      	adds	r0, #12
 801040e:	f7ff fa93 	bl	800f938 <memcpy>
 8010412:	2201      	movs	r2, #1
 8010414:	4631      	mov	r1, r6
 8010416:	4648      	mov	r0, r9
 8010418:	f000 fe00 	bl	801101c <__lshift>
 801041c:	f10a 0301 	add.w	r3, sl, #1
 8010420:	9300      	str	r3, [sp, #0]
 8010422:	eb0a 030b 	add.w	r3, sl, fp
 8010426:	9308      	str	r3, [sp, #32]
 8010428:	9b04      	ldr	r3, [sp, #16]
 801042a:	f003 0301 	and.w	r3, r3, #1
 801042e:	462f      	mov	r7, r5
 8010430:	9306      	str	r3, [sp, #24]
 8010432:	4605      	mov	r5, r0
 8010434:	9b00      	ldr	r3, [sp, #0]
 8010436:	9802      	ldr	r0, [sp, #8]
 8010438:	4621      	mov	r1, r4
 801043a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 801043e:	f7ff fa89 	bl	800f954 <quorem>
 8010442:	4603      	mov	r3, r0
 8010444:	3330      	adds	r3, #48	@ 0x30
 8010446:	9003      	str	r0, [sp, #12]
 8010448:	4639      	mov	r1, r7
 801044a:	9802      	ldr	r0, [sp, #8]
 801044c:	9309      	str	r3, [sp, #36]	@ 0x24
 801044e:	f000 fe51 	bl	80110f4 <__mcmp>
 8010452:	462a      	mov	r2, r5
 8010454:	9004      	str	r0, [sp, #16]
 8010456:	4621      	mov	r1, r4
 8010458:	4648      	mov	r0, r9
 801045a:	f000 fe67 	bl	801112c <__mdiff>
 801045e:	68c2      	ldr	r2, [r0, #12]
 8010460:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010462:	4606      	mov	r6, r0
 8010464:	bb02      	cbnz	r2, 80104a8 <_dtoa_r+0xa40>
 8010466:	4601      	mov	r1, r0
 8010468:	9802      	ldr	r0, [sp, #8]
 801046a:	f000 fe43 	bl	80110f4 <__mcmp>
 801046e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010470:	4602      	mov	r2, r0
 8010472:	4631      	mov	r1, r6
 8010474:	4648      	mov	r0, r9
 8010476:	920c      	str	r2, [sp, #48]	@ 0x30
 8010478:	9309      	str	r3, [sp, #36]	@ 0x24
 801047a:	f000 fc09 	bl	8010c90 <_Bfree>
 801047e:	9b07      	ldr	r3, [sp, #28]
 8010480:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010482:	9e00      	ldr	r6, [sp, #0]
 8010484:	ea42 0103 	orr.w	r1, r2, r3
 8010488:	9b06      	ldr	r3, [sp, #24]
 801048a:	4319      	orrs	r1, r3
 801048c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801048e:	d10d      	bne.n	80104ac <_dtoa_r+0xa44>
 8010490:	2b39      	cmp	r3, #57	@ 0x39
 8010492:	d027      	beq.n	80104e4 <_dtoa_r+0xa7c>
 8010494:	9a04      	ldr	r2, [sp, #16]
 8010496:	2a00      	cmp	r2, #0
 8010498:	dd01      	ble.n	801049e <_dtoa_r+0xa36>
 801049a:	9b03      	ldr	r3, [sp, #12]
 801049c:	3331      	adds	r3, #49	@ 0x31
 801049e:	f88b 3000 	strb.w	r3, [fp]
 80104a2:	e52e      	b.n	800ff02 <_dtoa_r+0x49a>
 80104a4:	4628      	mov	r0, r5
 80104a6:	e7b9      	b.n	801041c <_dtoa_r+0x9b4>
 80104a8:	2201      	movs	r2, #1
 80104aa:	e7e2      	b.n	8010472 <_dtoa_r+0xa0a>
 80104ac:	9904      	ldr	r1, [sp, #16]
 80104ae:	2900      	cmp	r1, #0
 80104b0:	db04      	blt.n	80104bc <_dtoa_r+0xa54>
 80104b2:	9807      	ldr	r0, [sp, #28]
 80104b4:	4301      	orrs	r1, r0
 80104b6:	9806      	ldr	r0, [sp, #24]
 80104b8:	4301      	orrs	r1, r0
 80104ba:	d120      	bne.n	80104fe <_dtoa_r+0xa96>
 80104bc:	2a00      	cmp	r2, #0
 80104be:	ddee      	ble.n	801049e <_dtoa_r+0xa36>
 80104c0:	9902      	ldr	r1, [sp, #8]
 80104c2:	9300      	str	r3, [sp, #0]
 80104c4:	2201      	movs	r2, #1
 80104c6:	4648      	mov	r0, r9
 80104c8:	f000 fda8 	bl	801101c <__lshift>
 80104cc:	4621      	mov	r1, r4
 80104ce:	9002      	str	r0, [sp, #8]
 80104d0:	f000 fe10 	bl	80110f4 <__mcmp>
 80104d4:	2800      	cmp	r0, #0
 80104d6:	9b00      	ldr	r3, [sp, #0]
 80104d8:	dc02      	bgt.n	80104e0 <_dtoa_r+0xa78>
 80104da:	d1e0      	bne.n	801049e <_dtoa_r+0xa36>
 80104dc:	07da      	lsls	r2, r3, #31
 80104de:	d5de      	bpl.n	801049e <_dtoa_r+0xa36>
 80104e0:	2b39      	cmp	r3, #57	@ 0x39
 80104e2:	d1da      	bne.n	801049a <_dtoa_r+0xa32>
 80104e4:	2339      	movs	r3, #57	@ 0x39
 80104e6:	f88b 3000 	strb.w	r3, [fp]
 80104ea:	4633      	mov	r3, r6
 80104ec:	461e      	mov	r6, r3
 80104ee:	3b01      	subs	r3, #1
 80104f0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80104f4:	2a39      	cmp	r2, #57	@ 0x39
 80104f6:	d04e      	beq.n	8010596 <_dtoa_r+0xb2e>
 80104f8:	3201      	adds	r2, #1
 80104fa:	701a      	strb	r2, [r3, #0]
 80104fc:	e501      	b.n	800ff02 <_dtoa_r+0x49a>
 80104fe:	2a00      	cmp	r2, #0
 8010500:	dd03      	ble.n	801050a <_dtoa_r+0xaa2>
 8010502:	2b39      	cmp	r3, #57	@ 0x39
 8010504:	d0ee      	beq.n	80104e4 <_dtoa_r+0xa7c>
 8010506:	3301      	adds	r3, #1
 8010508:	e7c9      	b.n	801049e <_dtoa_r+0xa36>
 801050a:	9a00      	ldr	r2, [sp, #0]
 801050c:	9908      	ldr	r1, [sp, #32]
 801050e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010512:	428a      	cmp	r2, r1
 8010514:	d028      	beq.n	8010568 <_dtoa_r+0xb00>
 8010516:	9902      	ldr	r1, [sp, #8]
 8010518:	2300      	movs	r3, #0
 801051a:	220a      	movs	r2, #10
 801051c:	4648      	mov	r0, r9
 801051e:	f000 fbd9 	bl	8010cd4 <__multadd>
 8010522:	42af      	cmp	r7, r5
 8010524:	9002      	str	r0, [sp, #8]
 8010526:	f04f 0300 	mov.w	r3, #0
 801052a:	f04f 020a 	mov.w	r2, #10
 801052e:	4639      	mov	r1, r7
 8010530:	4648      	mov	r0, r9
 8010532:	d107      	bne.n	8010544 <_dtoa_r+0xadc>
 8010534:	f000 fbce 	bl	8010cd4 <__multadd>
 8010538:	4607      	mov	r7, r0
 801053a:	4605      	mov	r5, r0
 801053c:	9b00      	ldr	r3, [sp, #0]
 801053e:	3301      	adds	r3, #1
 8010540:	9300      	str	r3, [sp, #0]
 8010542:	e777      	b.n	8010434 <_dtoa_r+0x9cc>
 8010544:	f000 fbc6 	bl	8010cd4 <__multadd>
 8010548:	4629      	mov	r1, r5
 801054a:	4607      	mov	r7, r0
 801054c:	2300      	movs	r3, #0
 801054e:	220a      	movs	r2, #10
 8010550:	4648      	mov	r0, r9
 8010552:	f000 fbbf 	bl	8010cd4 <__multadd>
 8010556:	4605      	mov	r5, r0
 8010558:	e7f0      	b.n	801053c <_dtoa_r+0xad4>
 801055a:	f1bb 0f00 	cmp.w	fp, #0
 801055e:	bfcc      	ite	gt
 8010560:	465e      	movgt	r6, fp
 8010562:	2601      	movle	r6, #1
 8010564:	4456      	add	r6, sl
 8010566:	2700      	movs	r7, #0
 8010568:	9902      	ldr	r1, [sp, #8]
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	2201      	movs	r2, #1
 801056e:	4648      	mov	r0, r9
 8010570:	f000 fd54 	bl	801101c <__lshift>
 8010574:	4621      	mov	r1, r4
 8010576:	9002      	str	r0, [sp, #8]
 8010578:	f000 fdbc 	bl	80110f4 <__mcmp>
 801057c:	2800      	cmp	r0, #0
 801057e:	dcb4      	bgt.n	80104ea <_dtoa_r+0xa82>
 8010580:	d102      	bne.n	8010588 <_dtoa_r+0xb20>
 8010582:	9b00      	ldr	r3, [sp, #0]
 8010584:	07db      	lsls	r3, r3, #31
 8010586:	d4b0      	bmi.n	80104ea <_dtoa_r+0xa82>
 8010588:	4633      	mov	r3, r6
 801058a:	461e      	mov	r6, r3
 801058c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010590:	2a30      	cmp	r2, #48	@ 0x30
 8010592:	d0fa      	beq.n	801058a <_dtoa_r+0xb22>
 8010594:	e4b5      	b.n	800ff02 <_dtoa_r+0x49a>
 8010596:	459a      	cmp	sl, r3
 8010598:	d1a8      	bne.n	80104ec <_dtoa_r+0xa84>
 801059a:	2331      	movs	r3, #49	@ 0x31
 801059c:	f108 0801 	add.w	r8, r8, #1
 80105a0:	f88a 3000 	strb.w	r3, [sl]
 80105a4:	e4ad      	b.n	800ff02 <_dtoa_r+0x49a>
 80105a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80105a8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010604 <_dtoa_r+0xb9c>
 80105ac:	b11b      	cbz	r3, 80105b6 <_dtoa_r+0xb4e>
 80105ae:	f10a 0308 	add.w	r3, sl, #8
 80105b2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80105b4:	6013      	str	r3, [r2, #0]
 80105b6:	4650      	mov	r0, sl
 80105b8:	b017      	add	sp, #92	@ 0x5c
 80105ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105be:	9b07      	ldr	r3, [sp, #28]
 80105c0:	2b01      	cmp	r3, #1
 80105c2:	f77f ae2e 	ble.w	8010222 <_dtoa_r+0x7ba>
 80105c6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105c8:	9308      	str	r3, [sp, #32]
 80105ca:	2001      	movs	r0, #1
 80105cc:	e64d      	b.n	801026a <_dtoa_r+0x802>
 80105ce:	f1bb 0f00 	cmp.w	fp, #0
 80105d2:	f77f aed9 	ble.w	8010388 <_dtoa_r+0x920>
 80105d6:	4656      	mov	r6, sl
 80105d8:	9802      	ldr	r0, [sp, #8]
 80105da:	4621      	mov	r1, r4
 80105dc:	f7ff f9ba 	bl	800f954 <quorem>
 80105e0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80105e4:	f806 3b01 	strb.w	r3, [r6], #1
 80105e8:	eba6 020a 	sub.w	r2, r6, sl
 80105ec:	4593      	cmp	fp, r2
 80105ee:	ddb4      	ble.n	801055a <_dtoa_r+0xaf2>
 80105f0:	9902      	ldr	r1, [sp, #8]
 80105f2:	2300      	movs	r3, #0
 80105f4:	220a      	movs	r2, #10
 80105f6:	4648      	mov	r0, r9
 80105f8:	f000 fb6c 	bl	8010cd4 <__multadd>
 80105fc:	9002      	str	r0, [sp, #8]
 80105fe:	e7eb      	b.n	80105d8 <_dtoa_r+0xb70>
 8010600:	08011f10 	.word	0x08011f10
 8010604:	08011e94 	.word	0x08011e94

08010608 <_free_r>:
 8010608:	b538      	push	{r3, r4, r5, lr}
 801060a:	4605      	mov	r5, r0
 801060c:	2900      	cmp	r1, #0
 801060e:	d041      	beq.n	8010694 <_free_r+0x8c>
 8010610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010614:	1f0c      	subs	r4, r1, #4
 8010616:	2b00      	cmp	r3, #0
 8010618:	bfb8      	it	lt
 801061a:	18e4      	addlt	r4, r4, r3
 801061c:	f000 faec 	bl	8010bf8 <__malloc_lock>
 8010620:	4a1d      	ldr	r2, [pc, #116]	@ (8010698 <_free_r+0x90>)
 8010622:	6813      	ldr	r3, [r2, #0]
 8010624:	b933      	cbnz	r3, 8010634 <_free_r+0x2c>
 8010626:	6063      	str	r3, [r4, #4]
 8010628:	6014      	str	r4, [r2, #0]
 801062a:	4628      	mov	r0, r5
 801062c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010630:	f000 bae8 	b.w	8010c04 <__malloc_unlock>
 8010634:	42a3      	cmp	r3, r4
 8010636:	d908      	bls.n	801064a <_free_r+0x42>
 8010638:	6820      	ldr	r0, [r4, #0]
 801063a:	1821      	adds	r1, r4, r0
 801063c:	428b      	cmp	r3, r1
 801063e:	bf01      	itttt	eq
 8010640:	6819      	ldreq	r1, [r3, #0]
 8010642:	685b      	ldreq	r3, [r3, #4]
 8010644:	1809      	addeq	r1, r1, r0
 8010646:	6021      	streq	r1, [r4, #0]
 8010648:	e7ed      	b.n	8010626 <_free_r+0x1e>
 801064a:	461a      	mov	r2, r3
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	b10b      	cbz	r3, 8010654 <_free_r+0x4c>
 8010650:	42a3      	cmp	r3, r4
 8010652:	d9fa      	bls.n	801064a <_free_r+0x42>
 8010654:	6811      	ldr	r1, [r2, #0]
 8010656:	1850      	adds	r0, r2, r1
 8010658:	42a0      	cmp	r0, r4
 801065a:	d10b      	bne.n	8010674 <_free_r+0x6c>
 801065c:	6820      	ldr	r0, [r4, #0]
 801065e:	4401      	add	r1, r0
 8010660:	1850      	adds	r0, r2, r1
 8010662:	4283      	cmp	r3, r0
 8010664:	6011      	str	r1, [r2, #0]
 8010666:	d1e0      	bne.n	801062a <_free_r+0x22>
 8010668:	6818      	ldr	r0, [r3, #0]
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	6053      	str	r3, [r2, #4]
 801066e:	4408      	add	r0, r1
 8010670:	6010      	str	r0, [r2, #0]
 8010672:	e7da      	b.n	801062a <_free_r+0x22>
 8010674:	d902      	bls.n	801067c <_free_r+0x74>
 8010676:	230c      	movs	r3, #12
 8010678:	602b      	str	r3, [r5, #0]
 801067a:	e7d6      	b.n	801062a <_free_r+0x22>
 801067c:	6820      	ldr	r0, [r4, #0]
 801067e:	1821      	adds	r1, r4, r0
 8010680:	428b      	cmp	r3, r1
 8010682:	bf04      	itt	eq
 8010684:	6819      	ldreq	r1, [r3, #0]
 8010686:	685b      	ldreq	r3, [r3, #4]
 8010688:	6063      	str	r3, [r4, #4]
 801068a:	bf04      	itt	eq
 801068c:	1809      	addeq	r1, r1, r0
 801068e:	6021      	streq	r1, [r4, #0]
 8010690:	6054      	str	r4, [r2, #4]
 8010692:	e7ca      	b.n	801062a <_free_r+0x22>
 8010694:	bd38      	pop	{r3, r4, r5, pc}
 8010696:	bf00      	nop
 8010698:	20005aa0 	.word	0x20005aa0

0801069c <__ssputs_r>:
 801069c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80106a0:	688e      	ldr	r6, [r1, #8]
 80106a2:	461f      	mov	r7, r3
 80106a4:	42be      	cmp	r6, r7
 80106a6:	680b      	ldr	r3, [r1, #0]
 80106a8:	4682      	mov	sl, r0
 80106aa:	460c      	mov	r4, r1
 80106ac:	4690      	mov	r8, r2
 80106ae:	d82d      	bhi.n	801070c <__ssputs_r+0x70>
 80106b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80106b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80106b8:	d026      	beq.n	8010708 <__ssputs_r+0x6c>
 80106ba:	6965      	ldr	r5, [r4, #20]
 80106bc:	6909      	ldr	r1, [r1, #16]
 80106be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80106c2:	eba3 0901 	sub.w	r9, r3, r1
 80106c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80106ca:	1c7b      	adds	r3, r7, #1
 80106cc:	444b      	add	r3, r9
 80106ce:	106d      	asrs	r5, r5, #1
 80106d0:	429d      	cmp	r5, r3
 80106d2:	bf38      	it	cc
 80106d4:	461d      	movcc	r5, r3
 80106d6:	0553      	lsls	r3, r2, #21
 80106d8:	d527      	bpl.n	801072a <__ssputs_r+0x8e>
 80106da:	4629      	mov	r1, r5
 80106dc:	f000 f960 	bl	80109a0 <_malloc_r>
 80106e0:	4606      	mov	r6, r0
 80106e2:	b360      	cbz	r0, 801073e <__ssputs_r+0xa2>
 80106e4:	6921      	ldr	r1, [r4, #16]
 80106e6:	464a      	mov	r2, r9
 80106e8:	f7ff f926 	bl	800f938 <memcpy>
 80106ec:	89a3      	ldrh	r3, [r4, #12]
 80106ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80106f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106f6:	81a3      	strh	r3, [r4, #12]
 80106f8:	6126      	str	r6, [r4, #16]
 80106fa:	6165      	str	r5, [r4, #20]
 80106fc:	444e      	add	r6, r9
 80106fe:	eba5 0509 	sub.w	r5, r5, r9
 8010702:	6026      	str	r6, [r4, #0]
 8010704:	60a5      	str	r5, [r4, #8]
 8010706:	463e      	mov	r6, r7
 8010708:	42be      	cmp	r6, r7
 801070a:	d900      	bls.n	801070e <__ssputs_r+0x72>
 801070c:	463e      	mov	r6, r7
 801070e:	6820      	ldr	r0, [r4, #0]
 8010710:	4632      	mov	r2, r6
 8010712:	4641      	mov	r1, r8
 8010714:	f000 fe67 	bl	80113e6 <memmove>
 8010718:	68a3      	ldr	r3, [r4, #8]
 801071a:	1b9b      	subs	r3, r3, r6
 801071c:	60a3      	str	r3, [r4, #8]
 801071e:	6823      	ldr	r3, [r4, #0]
 8010720:	4433      	add	r3, r6
 8010722:	6023      	str	r3, [r4, #0]
 8010724:	2000      	movs	r0, #0
 8010726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801072a:	462a      	mov	r2, r5
 801072c:	f000 fe2d 	bl	801138a <_realloc_r>
 8010730:	4606      	mov	r6, r0
 8010732:	2800      	cmp	r0, #0
 8010734:	d1e0      	bne.n	80106f8 <__ssputs_r+0x5c>
 8010736:	6921      	ldr	r1, [r4, #16]
 8010738:	4650      	mov	r0, sl
 801073a:	f7ff ff65 	bl	8010608 <_free_r>
 801073e:	230c      	movs	r3, #12
 8010740:	f8ca 3000 	str.w	r3, [sl]
 8010744:	89a3      	ldrh	r3, [r4, #12]
 8010746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801074a:	81a3      	strh	r3, [r4, #12]
 801074c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010750:	e7e9      	b.n	8010726 <__ssputs_r+0x8a>
	...

08010754 <_svfiprintf_r>:
 8010754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010758:	4698      	mov	r8, r3
 801075a:	898b      	ldrh	r3, [r1, #12]
 801075c:	061b      	lsls	r3, r3, #24
 801075e:	b09d      	sub	sp, #116	@ 0x74
 8010760:	4607      	mov	r7, r0
 8010762:	460d      	mov	r5, r1
 8010764:	4614      	mov	r4, r2
 8010766:	d510      	bpl.n	801078a <_svfiprintf_r+0x36>
 8010768:	690b      	ldr	r3, [r1, #16]
 801076a:	b973      	cbnz	r3, 801078a <_svfiprintf_r+0x36>
 801076c:	2140      	movs	r1, #64	@ 0x40
 801076e:	f000 f917 	bl	80109a0 <_malloc_r>
 8010772:	6028      	str	r0, [r5, #0]
 8010774:	6128      	str	r0, [r5, #16]
 8010776:	b930      	cbnz	r0, 8010786 <_svfiprintf_r+0x32>
 8010778:	230c      	movs	r3, #12
 801077a:	603b      	str	r3, [r7, #0]
 801077c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010780:	b01d      	add	sp, #116	@ 0x74
 8010782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010786:	2340      	movs	r3, #64	@ 0x40
 8010788:	616b      	str	r3, [r5, #20]
 801078a:	2300      	movs	r3, #0
 801078c:	9309      	str	r3, [sp, #36]	@ 0x24
 801078e:	2320      	movs	r3, #32
 8010790:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010794:	f8cd 800c 	str.w	r8, [sp, #12]
 8010798:	2330      	movs	r3, #48	@ 0x30
 801079a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010938 <_svfiprintf_r+0x1e4>
 801079e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80107a2:	f04f 0901 	mov.w	r9, #1
 80107a6:	4623      	mov	r3, r4
 80107a8:	469a      	mov	sl, r3
 80107aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80107ae:	b10a      	cbz	r2, 80107b4 <_svfiprintf_r+0x60>
 80107b0:	2a25      	cmp	r2, #37	@ 0x25
 80107b2:	d1f9      	bne.n	80107a8 <_svfiprintf_r+0x54>
 80107b4:	ebba 0b04 	subs.w	fp, sl, r4
 80107b8:	d00b      	beq.n	80107d2 <_svfiprintf_r+0x7e>
 80107ba:	465b      	mov	r3, fp
 80107bc:	4622      	mov	r2, r4
 80107be:	4629      	mov	r1, r5
 80107c0:	4638      	mov	r0, r7
 80107c2:	f7ff ff6b 	bl	801069c <__ssputs_r>
 80107c6:	3001      	adds	r0, #1
 80107c8:	f000 80a7 	beq.w	801091a <_svfiprintf_r+0x1c6>
 80107cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80107ce:	445a      	add	r2, fp
 80107d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80107d2:	f89a 3000 	ldrb.w	r3, [sl]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	f000 809f 	beq.w	801091a <_svfiprintf_r+0x1c6>
 80107dc:	2300      	movs	r3, #0
 80107de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80107e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80107e6:	f10a 0a01 	add.w	sl, sl, #1
 80107ea:	9304      	str	r3, [sp, #16]
 80107ec:	9307      	str	r3, [sp, #28]
 80107ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80107f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80107f4:	4654      	mov	r4, sl
 80107f6:	2205      	movs	r2, #5
 80107f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80107fc:	484e      	ldr	r0, [pc, #312]	@ (8010938 <_svfiprintf_r+0x1e4>)
 80107fe:	f7ef fce7 	bl	80001d0 <memchr>
 8010802:	9a04      	ldr	r2, [sp, #16]
 8010804:	b9d8      	cbnz	r0, 801083e <_svfiprintf_r+0xea>
 8010806:	06d0      	lsls	r0, r2, #27
 8010808:	bf44      	itt	mi
 801080a:	2320      	movmi	r3, #32
 801080c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010810:	0711      	lsls	r1, r2, #28
 8010812:	bf44      	itt	mi
 8010814:	232b      	movmi	r3, #43	@ 0x2b
 8010816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801081a:	f89a 3000 	ldrb.w	r3, [sl]
 801081e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010820:	d015      	beq.n	801084e <_svfiprintf_r+0xfa>
 8010822:	9a07      	ldr	r2, [sp, #28]
 8010824:	4654      	mov	r4, sl
 8010826:	2000      	movs	r0, #0
 8010828:	f04f 0c0a 	mov.w	ip, #10
 801082c:	4621      	mov	r1, r4
 801082e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010832:	3b30      	subs	r3, #48	@ 0x30
 8010834:	2b09      	cmp	r3, #9
 8010836:	d94b      	bls.n	80108d0 <_svfiprintf_r+0x17c>
 8010838:	b1b0      	cbz	r0, 8010868 <_svfiprintf_r+0x114>
 801083a:	9207      	str	r2, [sp, #28]
 801083c:	e014      	b.n	8010868 <_svfiprintf_r+0x114>
 801083e:	eba0 0308 	sub.w	r3, r0, r8
 8010842:	fa09 f303 	lsl.w	r3, r9, r3
 8010846:	4313      	orrs	r3, r2
 8010848:	9304      	str	r3, [sp, #16]
 801084a:	46a2      	mov	sl, r4
 801084c:	e7d2      	b.n	80107f4 <_svfiprintf_r+0xa0>
 801084e:	9b03      	ldr	r3, [sp, #12]
 8010850:	1d19      	adds	r1, r3, #4
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	9103      	str	r1, [sp, #12]
 8010856:	2b00      	cmp	r3, #0
 8010858:	bfbb      	ittet	lt
 801085a:	425b      	neglt	r3, r3
 801085c:	f042 0202 	orrlt.w	r2, r2, #2
 8010860:	9307      	strge	r3, [sp, #28]
 8010862:	9307      	strlt	r3, [sp, #28]
 8010864:	bfb8      	it	lt
 8010866:	9204      	strlt	r2, [sp, #16]
 8010868:	7823      	ldrb	r3, [r4, #0]
 801086a:	2b2e      	cmp	r3, #46	@ 0x2e
 801086c:	d10a      	bne.n	8010884 <_svfiprintf_r+0x130>
 801086e:	7863      	ldrb	r3, [r4, #1]
 8010870:	2b2a      	cmp	r3, #42	@ 0x2a
 8010872:	d132      	bne.n	80108da <_svfiprintf_r+0x186>
 8010874:	9b03      	ldr	r3, [sp, #12]
 8010876:	1d1a      	adds	r2, r3, #4
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	9203      	str	r2, [sp, #12]
 801087c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010880:	3402      	adds	r4, #2
 8010882:	9305      	str	r3, [sp, #20]
 8010884:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010948 <_svfiprintf_r+0x1f4>
 8010888:	7821      	ldrb	r1, [r4, #0]
 801088a:	2203      	movs	r2, #3
 801088c:	4650      	mov	r0, sl
 801088e:	f7ef fc9f 	bl	80001d0 <memchr>
 8010892:	b138      	cbz	r0, 80108a4 <_svfiprintf_r+0x150>
 8010894:	9b04      	ldr	r3, [sp, #16]
 8010896:	eba0 000a 	sub.w	r0, r0, sl
 801089a:	2240      	movs	r2, #64	@ 0x40
 801089c:	4082      	lsls	r2, r0
 801089e:	4313      	orrs	r3, r2
 80108a0:	3401      	adds	r4, #1
 80108a2:	9304      	str	r3, [sp, #16]
 80108a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108a8:	4824      	ldr	r0, [pc, #144]	@ (801093c <_svfiprintf_r+0x1e8>)
 80108aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80108ae:	2206      	movs	r2, #6
 80108b0:	f7ef fc8e 	bl	80001d0 <memchr>
 80108b4:	2800      	cmp	r0, #0
 80108b6:	d036      	beq.n	8010926 <_svfiprintf_r+0x1d2>
 80108b8:	4b21      	ldr	r3, [pc, #132]	@ (8010940 <_svfiprintf_r+0x1ec>)
 80108ba:	bb1b      	cbnz	r3, 8010904 <_svfiprintf_r+0x1b0>
 80108bc:	9b03      	ldr	r3, [sp, #12]
 80108be:	3307      	adds	r3, #7
 80108c0:	f023 0307 	bic.w	r3, r3, #7
 80108c4:	3308      	adds	r3, #8
 80108c6:	9303      	str	r3, [sp, #12]
 80108c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80108ca:	4433      	add	r3, r6
 80108cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80108ce:	e76a      	b.n	80107a6 <_svfiprintf_r+0x52>
 80108d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80108d4:	460c      	mov	r4, r1
 80108d6:	2001      	movs	r0, #1
 80108d8:	e7a8      	b.n	801082c <_svfiprintf_r+0xd8>
 80108da:	2300      	movs	r3, #0
 80108dc:	3401      	adds	r4, #1
 80108de:	9305      	str	r3, [sp, #20]
 80108e0:	4619      	mov	r1, r3
 80108e2:	f04f 0c0a 	mov.w	ip, #10
 80108e6:	4620      	mov	r0, r4
 80108e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80108ec:	3a30      	subs	r2, #48	@ 0x30
 80108ee:	2a09      	cmp	r2, #9
 80108f0:	d903      	bls.n	80108fa <_svfiprintf_r+0x1a6>
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d0c6      	beq.n	8010884 <_svfiprintf_r+0x130>
 80108f6:	9105      	str	r1, [sp, #20]
 80108f8:	e7c4      	b.n	8010884 <_svfiprintf_r+0x130>
 80108fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80108fe:	4604      	mov	r4, r0
 8010900:	2301      	movs	r3, #1
 8010902:	e7f0      	b.n	80108e6 <_svfiprintf_r+0x192>
 8010904:	ab03      	add	r3, sp, #12
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	462a      	mov	r2, r5
 801090a:	4b0e      	ldr	r3, [pc, #56]	@ (8010944 <_svfiprintf_r+0x1f0>)
 801090c:	a904      	add	r1, sp, #16
 801090e:	4638      	mov	r0, r7
 8010910:	f7fe fae2 	bl	800eed8 <_printf_float>
 8010914:	1c42      	adds	r2, r0, #1
 8010916:	4606      	mov	r6, r0
 8010918:	d1d6      	bne.n	80108c8 <_svfiprintf_r+0x174>
 801091a:	89ab      	ldrh	r3, [r5, #12]
 801091c:	065b      	lsls	r3, r3, #25
 801091e:	f53f af2d 	bmi.w	801077c <_svfiprintf_r+0x28>
 8010922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010924:	e72c      	b.n	8010780 <_svfiprintf_r+0x2c>
 8010926:	ab03      	add	r3, sp, #12
 8010928:	9300      	str	r3, [sp, #0]
 801092a:	462a      	mov	r2, r5
 801092c:	4b05      	ldr	r3, [pc, #20]	@ (8010944 <_svfiprintf_r+0x1f0>)
 801092e:	a904      	add	r1, sp, #16
 8010930:	4638      	mov	r0, r7
 8010932:	f7fe fd69 	bl	800f408 <_printf_i>
 8010936:	e7ed      	b.n	8010914 <_svfiprintf_r+0x1c0>
 8010938:	08011f21 	.word	0x08011f21
 801093c:	08011f2b 	.word	0x08011f2b
 8010940:	0800eed9 	.word	0x0800eed9
 8010944:	0801069d 	.word	0x0801069d
 8010948:	08011f27 	.word	0x08011f27

0801094c <malloc>:
 801094c:	4b02      	ldr	r3, [pc, #8]	@ (8010958 <malloc+0xc>)
 801094e:	4601      	mov	r1, r0
 8010950:	6818      	ldr	r0, [r3, #0]
 8010952:	f000 b825 	b.w	80109a0 <_malloc_r>
 8010956:	bf00      	nop
 8010958:	20000048 	.word	0x20000048

0801095c <sbrk_aligned>:
 801095c:	b570      	push	{r4, r5, r6, lr}
 801095e:	4e0f      	ldr	r6, [pc, #60]	@ (801099c <sbrk_aligned+0x40>)
 8010960:	460c      	mov	r4, r1
 8010962:	6831      	ldr	r1, [r6, #0]
 8010964:	4605      	mov	r5, r0
 8010966:	b911      	cbnz	r1, 801096e <sbrk_aligned+0x12>
 8010968:	f000 fd7c 	bl	8011464 <_sbrk_r>
 801096c:	6030      	str	r0, [r6, #0]
 801096e:	4621      	mov	r1, r4
 8010970:	4628      	mov	r0, r5
 8010972:	f000 fd77 	bl	8011464 <_sbrk_r>
 8010976:	1c43      	adds	r3, r0, #1
 8010978:	d103      	bne.n	8010982 <sbrk_aligned+0x26>
 801097a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801097e:	4620      	mov	r0, r4
 8010980:	bd70      	pop	{r4, r5, r6, pc}
 8010982:	1cc4      	adds	r4, r0, #3
 8010984:	f024 0403 	bic.w	r4, r4, #3
 8010988:	42a0      	cmp	r0, r4
 801098a:	d0f8      	beq.n	801097e <sbrk_aligned+0x22>
 801098c:	1a21      	subs	r1, r4, r0
 801098e:	4628      	mov	r0, r5
 8010990:	f000 fd68 	bl	8011464 <_sbrk_r>
 8010994:	3001      	adds	r0, #1
 8010996:	d1f2      	bne.n	801097e <sbrk_aligned+0x22>
 8010998:	e7ef      	b.n	801097a <sbrk_aligned+0x1e>
 801099a:	bf00      	nop
 801099c:	20005a9c 	.word	0x20005a9c

080109a0 <_malloc_r>:
 80109a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80109a4:	1ccd      	adds	r5, r1, #3
 80109a6:	f025 0503 	bic.w	r5, r5, #3
 80109aa:	3508      	adds	r5, #8
 80109ac:	2d0c      	cmp	r5, #12
 80109ae:	bf38      	it	cc
 80109b0:	250c      	movcc	r5, #12
 80109b2:	2d00      	cmp	r5, #0
 80109b4:	4606      	mov	r6, r0
 80109b6:	db01      	blt.n	80109bc <_malloc_r+0x1c>
 80109b8:	42a9      	cmp	r1, r5
 80109ba:	d904      	bls.n	80109c6 <_malloc_r+0x26>
 80109bc:	230c      	movs	r3, #12
 80109be:	6033      	str	r3, [r6, #0]
 80109c0:	2000      	movs	r0, #0
 80109c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80109c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010a9c <_malloc_r+0xfc>
 80109ca:	f000 f915 	bl	8010bf8 <__malloc_lock>
 80109ce:	f8d8 3000 	ldr.w	r3, [r8]
 80109d2:	461c      	mov	r4, r3
 80109d4:	bb44      	cbnz	r4, 8010a28 <_malloc_r+0x88>
 80109d6:	4629      	mov	r1, r5
 80109d8:	4630      	mov	r0, r6
 80109da:	f7ff ffbf 	bl	801095c <sbrk_aligned>
 80109de:	1c43      	adds	r3, r0, #1
 80109e0:	4604      	mov	r4, r0
 80109e2:	d158      	bne.n	8010a96 <_malloc_r+0xf6>
 80109e4:	f8d8 4000 	ldr.w	r4, [r8]
 80109e8:	4627      	mov	r7, r4
 80109ea:	2f00      	cmp	r7, #0
 80109ec:	d143      	bne.n	8010a76 <_malloc_r+0xd6>
 80109ee:	2c00      	cmp	r4, #0
 80109f0:	d04b      	beq.n	8010a8a <_malloc_r+0xea>
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	4639      	mov	r1, r7
 80109f6:	4630      	mov	r0, r6
 80109f8:	eb04 0903 	add.w	r9, r4, r3
 80109fc:	f000 fd32 	bl	8011464 <_sbrk_r>
 8010a00:	4581      	cmp	r9, r0
 8010a02:	d142      	bne.n	8010a8a <_malloc_r+0xea>
 8010a04:	6821      	ldr	r1, [r4, #0]
 8010a06:	1a6d      	subs	r5, r5, r1
 8010a08:	4629      	mov	r1, r5
 8010a0a:	4630      	mov	r0, r6
 8010a0c:	f7ff ffa6 	bl	801095c <sbrk_aligned>
 8010a10:	3001      	adds	r0, #1
 8010a12:	d03a      	beq.n	8010a8a <_malloc_r+0xea>
 8010a14:	6823      	ldr	r3, [r4, #0]
 8010a16:	442b      	add	r3, r5
 8010a18:	6023      	str	r3, [r4, #0]
 8010a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8010a1e:	685a      	ldr	r2, [r3, #4]
 8010a20:	bb62      	cbnz	r2, 8010a7c <_malloc_r+0xdc>
 8010a22:	f8c8 7000 	str.w	r7, [r8]
 8010a26:	e00f      	b.n	8010a48 <_malloc_r+0xa8>
 8010a28:	6822      	ldr	r2, [r4, #0]
 8010a2a:	1b52      	subs	r2, r2, r5
 8010a2c:	d420      	bmi.n	8010a70 <_malloc_r+0xd0>
 8010a2e:	2a0b      	cmp	r2, #11
 8010a30:	d917      	bls.n	8010a62 <_malloc_r+0xc2>
 8010a32:	1961      	adds	r1, r4, r5
 8010a34:	42a3      	cmp	r3, r4
 8010a36:	6025      	str	r5, [r4, #0]
 8010a38:	bf18      	it	ne
 8010a3a:	6059      	strne	r1, [r3, #4]
 8010a3c:	6863      	ldr	r3, [r4, #4]
 8010a3e:	bf08      	it	eq
 8010a40:	f8c8 1000 	streq.w	r1, [r8]
 8010a44:	5162      	str	r2, [r4, r5]
 8010a46:	604b      	str	r3, [r1, #4]
 8010a48:	4630      	mov	r0, r6
 8010a4a:	f000 f8db 	bl	8010c04 <__malloc_unlock>
 8010a4e:	f104 000b 	add.w	r0, r4, #11
 8010a52:	1d23      	adds	r3, r4, #4
 8010a54:	f020 0007 	bic.w	r0, r0, #7
 8010a58:	1ac2      	subs	r2, r0, r3
 8010a5a:	bf1c      	itt	ne
 8010a5c:	1a1b      	subne	r3, r3, r0
 8010a5e:	50a3      	strne	r3, [r4, r2]
 8010a60:	e7af      	b.n	80109c2 <_malloc_r+0x22>
 8010a62:	6862      	ldr	r2, [r4, #4]
 8010a64:	42a3      	cmp	r3, r4
 8010a66:	bf0c      	ite	eq
 8010a68:	f8c8 2000 	streq.w	r2, [r8]
 8010a6c:	605a      	strne	r2, [r3, #4]
 8010a6e:	e7eb      	b.n	8010a48 <_malloc_r+0xa8>
 8010a70:	4623      	mov	r3, r4
 8010a72:	6864      	ldr	r4, [r4, #4]
 8010a74:	e7ae      	b.n	80109d4 <_malloc_r+0x34>
 8010a76:	463c      	mov	r4, r7
 8010a78:	687f      	ldr	r7, [r7, #4]
 8010a7a:	e7b6      	b.n	80109ea <_malloc_r+0x4a>
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	42a3      	cmp	r3, r4
 8010a82:	d1fb      	bne.n	8010a7c <_malloc_r+0xdc>
 8010a84:	2300      	movs	r3, #0
 8010a86:	6053      	str	r3, [r2, #4]
 8010a88:	e7de      	b.n	8010a48 <_malloc_r+0xa8>
 8010a8a:	230c      	movs	r3, #12
 8010a8c:	6033      	str	r3, [r6, #0]
 8010a8e:	4630      	mov	r0, r6
 8010a90:	f000 f8b8 	bl	8010c04 <__malloc_unlock>
 8010a94:	e794      	b.n	80109c0 <_malloc_r+0x20>
 8010a96:	6005      	str	r5, [r0, #0]
 8010a98:	e7d6      	b.n	8010a48 <_malloc_r+0xa8>
 8010a9a:	bf00      	nop
 8010a9c:	20005aa0 	.word	0x20005aa0

08010aa0 <__sflush_r>:
 8010aa0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010aa8:	0716      	lsls	r6, r2, #28
 8010aaa:	4605      	mov	r5, r0
 8010aac:	460c      	mov	r4, r1
 8010aae:	d454      	bmi.n	8010b5a <__sflush_r+0xba>
 8010ab0:	684b      	ldr	r3, [r1, #4]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	dc02      	bgt.n	8010abc <__sflush_r+0x1c>
 8010ab6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	dd48      	ble.n	8010b4e <__sflush_r+0xae>
 8010abc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010abe:	2e00      	cmp	r6, #0
 8010ac0:	d045      	beq.n	8010b4e <__sflush_r+0xae>
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010ac8:	682f      	ldr	r7, [r5, #0]
 8010aca:	6a21      	ldr	r1, [r4, #32]
 8010acc:	602b      	str	r3, [r5, #0]
 8010ace:	d030      	beq.n	8010b32 <__sflush_r+0x92>
 8010ad0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010ad2:	89a3      	ldrh	r3, [r4, #12]
 8010ad4:	0759      	lsls	r1, r3, #29
 8010ad6:	d505      	bpl.n	8010ae4 <__sflush_r+0x44>
 8010ad8:	6863      	ldr	r3, [r4, #4]
 8010ada:	1ad2      	subs	r2, r2, r3
 8010adc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010ade:	b10b      	cbz	r3, 8010ae4 <__sflush_r+0x44>
 8010ae0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010ae2:	1ad2      	subs	r2, r2, r3
 8010ae4:	2300      	movs	r3, #0
 8010ae6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010ae8:	6a21      	ldr	r1, [r4, #32]
 8010aea:	4628      	mov	r0, r5
 8010aec:	47b0      	blx	r6
 8010aee:	1c43      	adds	r3, r0, #1
 8010af0:	89a3      	ldrh	r3, [r4, #12]
 8010af2:	d106      	bne.n	8010b02 <__sflush_r+0x62>
 8010af4:	6829      	ldr	r1, [r5, #0]
 8010af6:	291d      	cmp	r1, #29
 8010af8:	d82b      	bhi.n	8010b52 <__sflush_r+0xb2>
 8010afa:	4a2a      	ldr	r2, [pc, #168]	@ (8010ba4 <__sflush_r+0x104>)
 8010afc:	40ca      	lsrs	r2, r1
 8010afe:	07d6      	lsls	r6, r2, #31
 8010b00:	d527      	bpl.n	8010b52 <__sflush_r+0xb2>
 8010b02:	2200      	movs	r2, #0
 8010b04:	6062      	str	r2, [r4, #4]
 8010b06:	04d9      	lsls	r1, r3, #19
 8010b08:	6922      	ldr	r2, [r4, #16]
 8010b0a:	6022      	str	r2, [r4, #0]
 8010b0c:	d504      	bpl.n	8010b18 <__sflush_r+0x78>
 8010b0e:	1c42      	adds	r2, r0, #1
 8010b10:	d101      	bne.n	8010b16 <__sflush_r+0x76>
 8010b12:	682b      	ldr	r3, [r5, #0]
 8010b14:	b903      	cbnz	r3, 8010b18 <__sflush_r+0x78>
 8010b16:	6560      	str	r0, [r4, #84]	@ 0x54
 8010b18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010b1a:	602f      	str	r7, [r5, #0]
 8010b1c:	b1b9      	cbz	r1, 8010b4e <__sflush_r+0xae>
 8010b1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010b22:	4299      	cmp	r1, r3
 8010b24:	d002      	beq.n	8010b2c <__sflush_r+0x8c>
 8010b26:	4628      	mov	r0, r5
 8010b28:	f7ff fd6e 	bl	8010608 <_free_r>
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010b30:	e00d      	b.n	8010b4e <__sflush_r+0xae>
 8010b32:	2301      	movs	r3, #1
 8010b34:	4628      	mov	r0, r5
 8010b36:	47b0      	blx	r6
 8010b38:	4602      	mov	r2, r0
 8010b3a:	1c50      	adds	r0, r2, #1
 8010b3c:	d1c9      	bne.n	8010ad2 <__sflush_r+0x32>
 8010b3e:	682b      	ldr	r3, [r5, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d0c6      	beq.n	8010ad2 <__sflush_r+0x32>
 8010b44:	2b1d      	cmp	r3, #29
 8010b46:	d001      	beq.n	8010b4c <__sflush_r+0xac>
 8010b48:	2b16      	cmp	r3, #22
 8010b4a:	d11e      	bne.n	8010b8a <__sflush_r+0xea>
 8010b4c:	602f      	str	r7, [r5, #0]
 8010b4e:	2000      	movs	r0, #0
 8010b50:	e022      	b.n	8010b98 <__sflush_r+0xf8>
 8010b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b56:	b21b      	sxth	r3, r3
 8010b58:	e01b      	b.n	8010b92 <__sflush_r+0xf2>
 8010b5a:	690f      	ldr	r7, [r1, #16]
 8010b5c:	2f00      	cmp	r7, #0
 8010b5e:	d0f6      	beq.n	8010b4e <__sflush_r+0xae>
 8010b60:	0793      	lsls	r3, r2, #30
 8010b62:	680e      	ldr	r6, [r1, #0]
 8010b64:	bf08      	it	eq
 8010b66:	694b      	ldreq	r3, [r1, #20]
 8010b68:	600f      	str	r7, [r1, #0]
 8010b6a:	bf18      	it	ne
 8010b6c:	2300      	movne	r3, #0
 8010b6e:	eba6 0807 	sub.w	r8, r6, r7
 8010b72:	608b      	str	r3, [r1, #8]
 8010b74:	f1b8 0f00 	cmp.w	r8, #0
 8010b78:	dde9      	ble.n	8010b4e <__sflush_r+0xae>
 8010b7a:	6a21      	ldr	r1, [r4, #32]
 8010b7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010b7e:	4643      	mov	r3, r8
 8010b80:	463a      	mov	r2, r7
 8010b82:	4628      	mov	r0, r5
 8010b84:	47b0      	blx	r6
 8010b86:	2800      	cmp	r0, #0
 8010b88:	dc08      	bgt.n	8010b9c <__sflush_r+0xfc>
 8010b8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010b8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010b92:	81a3      	strh	r3, [r4, #12]
 8010b94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b9c:	4407      	add	r7, r0
 8010b9e:	eba8 0800 	sub.w	r8, r8, r0
 8010ba2:	e7e7      	b.n	8010b74 <__sflush_r+0xd4>
 8010ba4:	20400001 	.word	0x20400001

08010ba8 <_fflush_r>:
 8010ba8:	b538      	push	{r3, r4, r5, lr}
 8010baa:	690b      	ldr	r3, [r1, #16]
 8010bac:	4605      	mov	r5, r0
 8010bae:	460c      	mov	r4, r1
 8010bb0:	b913      	cbnz	r3, 8010bb8 <_fflush_r+0x10>
 8010bb2:	2500      	movs	r5, #0
 8010bb4:	4628      	mov	r0, r5
 8010bb6:	bd38      	pop	{r3, r4, r5, pc}
 8010bb8:	b118      	cbz	r0, 8010bc2 <_fflush_r+0x1a>
 8010bba:	6a03      	ldr	r3, [r0, #32]
 8010bbc:	b90b      	cbnz	r3, 8010bc2 <_fflush_r+0x1a>
 8010bbe:	f7fe fdcd 	bl	800f75c <__sinit>
 8010bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d0f3      	beq.n	8010bb2 <_fflush_r+0xa>
 8010bca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010bcc:	07d0      	lsls	r0, r2, #31
 8010bce:	d404      	bmi.n	8010bda <_fflush_r+0x32>
 8010bd0:	0599      	lsls	r1, r3, #22
 8010bd2:	d402      	bmi.n	8010bda <_fflush_r+0x32>
 8010bd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bd6:	f7fe fe4a 	bl	800f86e <__retarget_lock_acquire_recursive>
 8010bda:	4628      	mov	r0, r5
 8010bdc:	4621      	mov	r1, r4
 8010bde:	f7ff ff5f 	bl	8010aa0 <__sflush_r>
 8010be2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010be4:	07da      	lsls	r2, r3, #31
 8010be6:	4605      	mov	r5, r0
 8010be8:	d4e4      	bmi.n	8010bb4 <_fflush_r+0xc>
 8010bea:	89a3      	ldrh	r3, [r4, #12]
 8010bec:	059b      	lsls	r3, r3, #22
 8010bee:	d4e1      	bmi.n	8010bb4 <_fflush_r+0xc>
 8010bf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010bf2:	f7fe fe3d 	bl	800f870 <__retarget_lock_release_recursive>
 8010bf6:	e7dd      	b.n	8010bb4 <_fflush_r+0xc>

08010bf8 <__malloc_lock>:
 8010bf8:	4801      	ldr	r0, [pc, #4]	@ (8010c00 <__malloc_lock+0x8>)
 8010bfa:	f7fe be38 	b.w	800f86e <__retarget_lock_acquire_recursive>
 8010bfe:	bf00      	nop
 8010c00:	20005a94 	.word	0x20005a94

08010c04 <__malloc_unlock>:
 8010c04:	4801      	ldr	r0, [pc, #4]	@ (8010c0c <__malloc_unlock+0x8>)
 8010c06:	f7fe be33 	b.w	800f870 <__retarget_lock_release_recursive>
 8010c0a:	bf00      	nop
 8010c0c:	20005a94 	.word	0x20005a94

08010c10 <_Balloc>:
 8010c10:	b570      	push	{r4, r5, r6, lr}
 8010c12:	69c6      	ldr	r6, [r0, #28]
 8010c14:	4604      	mov	r4, r0
 8010c16:	460d      	mov	r5, r1
 8010c18:	b976      	cbnz	r6, 8010c38 <_Balloc+0x28>
 8010c1a:	2010      	movs	r0, #16
 8010c1c:	f7ff fe96 	bl	801094c <malloc>
 8010c20:	4602      	mov	r2, r0
 8010c22:	61e0      	str	r0, [r4, #28]
 8010c24:	b920      	cbnz	r0, 8010c30 <_Balloc+0x20>
 8010c26:	4b18      	ldr	r3, [pc, #96]	@ (8010c88 <_Balloc+0x78>)
 8010c28:	4818      	ldr	r0, [pc, #96]	@ (8010c8c <_Balloc+0x7c>)
 8010c2a:	216b      	movs	r1, #107	@ 0x6b
 8010c2c:	f000 fc4c 	bl	80114c8 <__assert_func>
 8010c30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c34:	6006      	str	r6, [r0, #0]
 8010c36:	60c6      	str	r6, [r0, #12]
 8010c38:	69e6      	ldr	r6, [r4, #28]
 8010c3a:	68f3      	ldr	r3, [r6, #12]
 8010c3c:	b183      	cbz	r3, 8010c60 <_Balloc+0x50>
 8010c3e:	69e3      	ldr	r3, [r4, #28]
 8010c40:	68db      	ldr	r3, [r3, #12]
 8010c42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c46:	b9b8      	cbnz	r0, 8010c78 <_Balloc+0x68>
 8010c48:	2101      	movs	r1, #1
 8010c4a:	fa01 f605 	lsl.w	r6, r1, r5
 8010c4e:	1d72      	adds	r2, r6, #5
 8010c50:	0092      	lsls	r2, r2, #2
 8010c52:	4620      	mov	r0, r4
 8010c54:	f000 fc56 	bl	8011504 <_calloc_r>
 8010c58:	b160      	cbz	r0, 8010c74 <_Balloc+0x64>
 8010c5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c5e:	e00e      	b.n	8010c7e <_Balloc+0x6e>
 8010c60:	2221      	movs	r2, #33	@ 0x21
 8010c62:	2104      	movs	r1, #4
 8010c64:	4620      	mov	r0, r4
 8010c66:	f000 fc4d 	bl	8011504 <_calloc_r>
 8010c6a:	69e3      	ldr	r3, [r4, #28]
 8010c6c:	60f0      	str	r0, [r6, #12]
 8010c6e:	68db      	ldr	r3, [r3, #12]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1e4      	bne.n	8010c3e <_Balloc+0x2e>
 8010c74:	2000      	movs	r0, #0
 8010c76:	bd70      	pop	{r4, r5, r6, pc}
 8010c78:	6802      	ldr	r2, [r0, #0]
 8010c7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c7e:	2300      	movs	r3, #0
 8010c80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c84:	e7f7      	b.n	8010c76 <_Balloc+0x66>
 8010c86:	bf00      	nop
 8010c88:	08011ea1 	.word	0x08011ea1
 8010c8c:	08011f32 	.word	0x08011f32

08010c90 <_Bfree>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	69c6      	ldr	r6, [r0, #28]
 8010c94:	4605      	mov	r5, r0
 8010c96:	460c      	mov	r4, r1
 8010c98:	b976      	cbnz	r6, 8010cb8 <_Bfree+0x28>
 8010c9a:	2010      	movs	r0, #16
 8010c9c:	f7ff fe56 	bl	801094c <malloc>
 8010ca0:	4602      	mov	r2, r0
 8010ca2:	61e8      	str	r0, [r5, #28]
 8010ca4:	b920      	cbnz	r0, 8010cb0 <_Bfree+0x20>
 8010ca6:	4b09      	ldr	r3, [pc, #36]	@ (8010ccc <_Bfree+0x3c>)
 8010ca8:	4809      	ldr	r0, [pc, #36]	@ (8010cd0 <_Bfree+0x40>)
 8010caa:	218f      	movs	r1, #143	@ 0x8f
 8010cac:	f000 fc0c 	bl	80114c8 <__assert_func>
 8010cb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010cb4:	6006      	str	r6, [r0, #0]
 8010cb6:	60c6      	str	r6, [r0, #12]
 8010cb8:	b13c      	cbz	r4, 8010cca <_Bfree+0x3a>
 8010cba:	69eb      	ldr	r3, [r5, #28]
 8010cbc:	6862      	ldr	r2, [r4, #4]
 8010cbe:	68db      	ldr	r3, [r3, #12]
 8010cc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010cc4:	6021      	str	r1, [r4, #0]
 8010cc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010cca:	bd70      	pop	{r4, r5, r6, pc}
 8010ccc:	08011ea1 	.word	0x08011ea1
 8010cd0:	08011f32 	.word	0x08011f32

08010cd4 <__multadd>:
 8010cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cd8:	690d      	ldr	r5, [r1, #16]
 8010cda:	4607      	mov	r7, r0
 8010cdc:	460c      	mov	r4, r1
 8010cde:	461e      	mov	r6, r3
 8010ce0:	f101 0c14 	add.w	ip, r1, #20
 8010ce4:	2000      	movs	r0, #0
 8010ce6:	f8dc 3000 	ldr.w	r3, [ip]
 8010cea:	b299      	uxth	r1, r3
 8010cec:	fb02 6101 	mla	r1, r2, r1, r6
 8010cf0:	0c1e      	lsrs	r6, r3, #16
 8010cf2:	0c0b      	lsrs	r3, r1, #16
 8010cf4:	fb02 3306 	mla	r3, r2, r6, r3
 8010cf8:	b289      	uxth	r1, r1
 8010cfa:	3001      	adds	r0, #1
 8010cfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010d00:	4285      	cmp	r5, r0
 8010d02:	f84c 1b04 	str.w	r1, [ip], #4
 8010d06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010d0a:	dcec      	bgt.n	8010ce6 <__multadd+0x12>
 8010d0c:	b30e      	cbz	r6, 8010d52 <__multadd+0x7e>
 8010d0e:	68a3      	ldr	r3, [r4, #8]
 8010d10:	42ab      	cmp	r3, r5
 8010d12:	dc19      	bgt.n	8010d48 <__multadd+0x74>
 8010d14:	6861      	ldr	r1, [r4, #4]
 8010d16:	4638      	mov	r0, r7
 8010d18:	3101      	adds	r1, #1
 8010d1a:	f7ff ff79 	bl	8010c10 <_Balloc>
 8010d1e:	4680      	mov	r8, r0
 8010d20:	b928      	cbnz	r0, 8010d2e <__multadd+0x5a>
 8010d22:	4602      	mov	r2, r0
 8010d24:	4b0c      	ldr	r3, [pc, #48]	@ (8010d58 <__multadd+0x84>)
 8010d26:	480d      	ldr	r0, [pc, #52]	@ (8010d5c <__multadd+0x88>)
 8010d28:	21ba      	movs	r1, #186	@ 0xba
 8010d2a:	f000 fbcd 	bl	80114c8 <__assert_func>
 8010d2e:	6922      	ldr	r2, [r4, #16]
 8010d30:	3202      	adds	r2, #2
 8010d32:	f104 010c 	add.w	r1, r4, #12
 8010d36:	0092      	lsls	r2, r2, #2
 8010d38:	300c      	adds	r0, #12
 8010d3a:	f7fe fdfd 	bl	800f938 <memcpy>
 8010d3e:	4621      	mov	r1, r4
 8010d40:	4638      	mov	r0, r7
 8010d42:	f7ff ffa5 	bl	8010c90 <_Bfree>
 8010d46:	4644      	mov	r4, r8
 8010d48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d4c:	3501      	adds	r5, #1
 8010d4e:	615e      	str	r6, [r3, #20]
 8010d50:	6125      	str	r5, [r4, #16]
 8010d52:	4620      	mov	r0, r4
 8010d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d58:	08011f10 	.word	0x08011f10
 8010d5c:	08011f32 	.word	0x08011f32

08010d60 <__hi0bits>:
 8010d60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010d64:	4603      	mov	r3, r0
 8010d66:	bf36      	itet	cc
 8010d68:	0403      	lslcc	r3, r0, #16
 8010d6a:	2000      	movcs	r0, #0
 8010d6c:	2010      	movcc	r0, #16
 8010d6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010d72:	bf3c      	itt	cc
 8010d74:	021b      	lslcc	r3, r3, #8
 8010d76:	3008      	addcc	r0, #8
 8010d78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d7c:	bf3c      	itt	cc
 8010d7e:	011b      	lslcc	r3, r3, #4
 8010d80:	3004      	addcc	r0, #4
 8010d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d86:	bf3c      	itt	cc
 8010d88:	009b      	lslcc	r3, r3, #2
 8010d8a:	3002      	addcc	r0, #2
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	db05      	blt.n	8010d9c <__hi0bits+0x3c>
 8010d90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010d94:	f100 0001 	add.w	r0, r0, #1
 8010d98:	bf08      	it	eq
 8010d9a:	2020      	moveq	r0, #32
 8010d9c:	4770      	bx	lr

08010d9e <__lo0bits>:
 8010d9e:	6803      	ldr	r3, [r0, #0]
 8010da0:	4602      	mov	r2, r0
 8010da2:	f013 0007 	ands.w	r0, r3, #7
 8010da6:	d00b      	beq.n	8010dc0 <__lo0bits+0x22>
 8010da8:	07d9      	lsls	r1, r3, #31
 8010daa:	d421      	bmi.n	8010df0 <__lo0bits+0x52>
 8010dac:	0798      	lsls	r0, r3, #30
 8010dae:	bf49      	itett	mi
 8010db0:	085b      	lsrmi	r3, r3, #1
 8010db2:	089b      	lsrpl	r3, r3, #2
 8010db4:	2001      	movmi	r0, #1
 8010db6:	6013      	strmi	r3, [r2, #0]
 8010db8:	bf5c      	itt	pl
 8010dba:	6013      	strpl	r3, [r2, #0]
 8010dbc:	2002      	movpl	r0, #2
 8010dbe:	4770      	bx	lr
 8010dc0:	b299      	uxth	r1, r3
 8010dc2:	b909      	cbnz	r1, 8010dc8 <__lo0bits+0x2a>
 8010dc4:	0c1b      	lsrs	r3, r3, #16
 8010dc6:	2010      	movs	r0, #16
 8010dc8:	b2d9      	uxtb	r1, r3
 8010dca:	b909      	cbnz	r1, 8010dd0 <__lo0bits+0x32>
 8010dcc:	3008      	adds	r0, #8
 8010dce:	0a1b      	lsrs	r3, r3, #8
 8010dd0:	0719      	lsls	r1, r3, #28
 8010dd2:	bf04      	itt	eq
 8010dd4:	091b      	lsreq	r3, r3, #4
 8010dd6:	3004      	addeq	r0, #4
 8010dd8:	0799      	lsls	r1, r3, #30
 8010dda:	bf04      	itt	eq
 8010ddc:	089b      	lsreq	r3, r3, #2
 8010dde:	3002      	addeq	r0, #2
 8010de0:	07d9      	lsls	r1, r3, #31
 8010de2:	d403      	bmi.n	8010dec <__lo0bits+0x4e>
 8010de4:	085b      	lsrs	r3, r3, #1
 8010de6:	f100 0001 	add.w	r0, r0, #1
 8010dea:	d003      	beq.n	8010df4 <__lo0bits+0x56>
 8010dec:	6013      	str	r3, [r2, #0]
 8010dee:	4770      	bx	lr
 8010df0:	2000      	movs	r0, #0
 8010df2:	4770      	bx	lr
 8010df4:	2020      	movs	r0, #32
 8010df6:	4770      	bx	lr

08010df8 <__i2b>:
 8010df8:	b510      	push	{r4, lr}
 8010dfa:	460c      	mov	r4, r1
 8010dfc:	2101      	movs	r1, #1
 8010dfe:	f7ff ff07 	bl	8010c10 <_Balloc>
 8010e02:	4602      	mov	r2, r0
 8010e04:	b928      	cbnz	r0, 8010e12 <__i2b+0x1a>
 8010e06:	4b05      	ldr	r3, [pc, #20]	@ (8010e1c <__i2b+0x24>)
 8010e08:	4805      	ldr	r0, [pc, #20]	@ (8010e20 <__i2b+0x28>)
 8010e0a:	f240 1145 	movw	r1, #325	@ 0x145
 8010e0e:	f000 fb5b 	bl	80114c8 <__assert_func>
 8010e12:	2301      	movs	r3, #1
 8010e14:	6144      	str	r4, [r0, #20]
 8010e16:	6103      	str	r3, [r0, #16]
 8010e18:	bd10      	pop	{r4, pc}
 8010e1a:	bf00      	nop
 8010e1c:	08011f10 	.word	0x08011f10
 8010e20:	08011f32 	.word	0x08011f32

08010e24 <__multiply>:
 8010e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e28:	4617      	mov	r7, r2
 8010e2a:	690a      	ldr	r2, [r1, #16]
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	bfa8      	it	ge
 8010e32:	463b      	movge	r3, r7
 8010e34:	4689      	mov	r9, r1
 8010e36:	bfa4      	itt	ge
 8010e38:	460f      	movge	r7, r1
 8010e3a:	4699      	movge	r9, r3
 8010e3c:	693d      	ldr	r5, [r7, #16]
 8010e3e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010e42:	68bb      	ldr	r3, [r7, #8]
 8010e44:	6879      	ldr	r1, [r7, #4]
 8010e46:	eb05 060a 	add.w	r6, r5, sl
 8010e4a:	42b3      	cmp	r3, r6
 8010e4c:	b085      	sub	sp, #20
 8010e4e:	bfb8      	it	lt
 8010e50:	3101      	addlt	r1, #1
 8010e52:	f7ff fedd 	bl	8010c10 <_Balloc>
 8010e56:	b930      	cbnz	r0, 8010e66 <__multiply+0x42>
 8010e58:	4602      	mov	r2, r0
 8010e5a:	4b41      	ldr	r3, [pc, #260]	@ (8010f60 <__multiply+0x13c>)
 8010e5c:	4841      	ldr	r0, [pc, #260]	@ (8010f64 <__multiply+0x140>)
 8010e5e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010e62:	f000 fb31 	bl	80114c8 <__assert_func>
 8010e66:	f100 0414 	add.w	r4, r0, #20
 8010e6a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010e6e:	4623      	mov	r3, r4
 8010e70:	2200      	movs	r2, #0
 8010e72:	4573      	cmp	r3, lr
 8010e74:	d320      	bcc.n	8010eb8 <__multiply+0x94>
 8010e76:	f107 0814 	add.w	r8, r7, #20
 8010e7a:	f109 0114 	add.w	r1, r9, #20
 8010e7e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010e82:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010e86:	9302      	str	r3, [sp, #8]
 8010e88:	1beb      	subs	r3, r5, r7
 8010e8a:	3b15      	subs	r3, #21
 8010e8c:	f023 0303 	bic.w	r3, r3, #3
 8010e90:	3304      	adds	r3, #4
 8010e92:	3715      	adds	r7, #21
 8010e94:	42bd      	cmp	r5, r7
 8010e96:	bf38      	it	cc
 8010e98:	2304      	movcc	r3, #4
 8010e9a:	9301      	str	r3, [sp, #4]
 8010e9c:	9b02      	ldr	r3, [sp, #8]
 8010e9e:	9103      	str	r1, [sp, #12]
 8010ea0:	428b      	cmp	r3, r1
 8010ea2:	d80c      	bhi.n	8010ebe <__multiply+0x9a>
 8010ea4:	2e00      	cmp	r6, #0
 8010ea6:	dd03      	ble.n	8010eb0 <__multiply+0x8c>
 8010ea8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d055      	beq.n	8010f5c <__multiply+0x138>
 8010eb0:	6106      	str	r6, [r0, #16]
 8010eb2:	b005      	add	sp, #20
 8010eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eb8:	f843 2b04 	str.w	r2, [r3], #4
 8010ebc:	e7d9      	b.n	8010e72 <__multiply+0x4e>
 8010ebe:	f8b1 a000 	ldrh.w	sl, [r1]
 8010ec2:	f1ba 0f00 	cmp.w	sl, #0
 8010ec6:	d01f      	beq.n	8010f08 <__multiply+0xe4>
 8010ec8:	46c4      	mov	ip, r8
 8010eca:	46a1      	mov	r9, r4
 8010ecc:	2700      	movs	r7, #0
 8010ece:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010ed2:	f8d9 3000 	ldr.w	r3, [r9]
 8010ed6:	fa1f fb82 	uxth.w	fp, r2
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	fb0a 330b 	mla	r3, sl, fp, r3
 8010ee0:	443b      	add	r3, r7
 8010ee2:	f8d9 7000 	ldr.w	r7, [r9]
 8010ee6:	0c12      	lsrs	r2, r2, #16
 8010ee8:	0c3f      	lsrs	r7, r7, #16
 8010eea:	fb0a 7202 	mla	r2, sl, r2, r7
 8010eee:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010ef2:	b29b      	uxth	r3, r3
 8010ef4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ef8:	4565      	cmp	r5, ip
 8010efa:	f849 3b04 	str.w	r3, [r9], #4
 8010efe:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010f02:	d8e4      	bhi.n	8010ece <__multiply+0xaa>
 8010f04:	9b01      	ldr	r3, [sp, #4]
 8010f06:	50e7      	str	r7, [r4, r3]
 8010f08:	9b03      	ldr	r3, [sp, #12]
 8010f0a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010f0e:	3104      	adds	r1, #4
 8010f10:	f1b9 0f00 	cmp.w	r9, #0
 8010f14:	d020      	beq.n	8010f58 <__multiply+0x134>
 8010f16:	6823      	ldr	r3, [r4, #0]
 8010f18:	4647      	mov	r7, r8
 8010f1a:	46a4      	mov	ip, r4
 8010f1c:	f04f 0a00 	mov.w	sl, #0
 8010f20:	f8b7 b000 	ldrh.w	fp, [r7]
 8010f24:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010f28:	fb09 220b 	mla	r2, r9, fp, r2
 8010f2c:	4452      	add	r2, sl
 8010f2e:	b29b      	uxth	r3, r3
 8010f30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f34:	f84c 3b04 	str.w	r3, [ip], #4
 8010f38:	f857 3b04 	ldr.w	r3, [r7], #4
 8010f3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f40:	f8bc 3000 	ldrh.w	r3, [ip]
 8010f44:	fb09 330a 	mla	r3, r9, sl, r3
 8010f48:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010f4c:	42bd      	cmp	r5, r7
 8010f4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f52:	d8e5      	bhi.n	8010f20 <__multiply+0xfc>
 8010f54:	9a01      	ldr	r2, [sp, #4]
 8010f56:	50a3      	str	r3, [r4, r2]
 8010f58:	3404      	adds	r4, #4
 8010f5a:	e79f      	b.n	8010e9c <__multiply+0x78>
 8010f5c:	3e01      	subs	r6, #1
 8010f5e:	e7a1      	b.n	8010ea4 <__multiply+0x80>
 8010f60:	08011f10 	.word	0x08011f10
 8010f64:	08011f32 	.word	0x08011f32

08010f68 <__pow5mult>:
 8010f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f6c:	4615      	mov	r5, r2
 8010f6e:	f012 0203 	ands.w	r2, r2, #3
 8010f72:	4607      	mov	r7, r0
 8010f74:	460e      	mov	r6, r1
 8010f76:	d007      	beq.n	8010f88 <__pow5mult+0x20>
 8010f78:	4c25      	ldr	r4, [pc, #148]	@ (8011010 <__pow5mult+0xa8>)
 8010f7a:	3a01      	subs	r2, #1
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f82:	f7ff fea7 	bl	8010cd4 <__multadd>
 8010f86:	4606      	mov	r6, r0
 8010f88:	10ad      	asrs	r5, r5, #2
 8010f8a:	d03d      	beq.n	8011008 <__pow5mult+0xa0>
 8010f8c:	69fc      	ldr	r4, [r7, #28]
 8010f8e:	b97c      	cbnz	r4, 8010fb0 <__pow5mult+0x48>
 8010f90:	2010      	movs	r0, #16
 8010f92:	f7ff fcdb 	bl	801094c <malloc>
 8010f96:	4602      	mov	r2, r0
 8010f98:	61f8      	str	r0, [r7, #28]
 8010f9a:	b928      	cbnz	r0, 8010fa8 <__pow5mult+0x40>
 8010f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8011014 <__pow5mult+0xac>)
 8010f9e:	481e      	ldr	r0, [pc, #120]	@ (8011018 <__pow5mult+0xb0>)
 8010fa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010fa4:	f000 fa90 	bl	80114c8 <__assert_func>
 8010fa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010fac:	6004      	str	r4, [r0, #0]
 8010fae:	60c4      	str	r4, [r0, #12]
 8010fb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010fb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fb8:	b94c      	cbnz	r4, 8010fce <__pow5mult+0x66>
 8010fba:	f240 2171 	movw	r1, #625	@ 0x271
 8010fbe:	4638      	mov	r0, r7
 8010fc0:	f7ff ff1a 	bl	8010df8 <__i2b>
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010fca:	4604      	mov	r4, r0
 8010fcc:	6003      	str	r3, [r0, #0]
 8010fce:	f04f 0900 	mov.w	r9, #0
 8010fd2:	07eb      	lsls	r3, r5, #31
 8010fd4:	d50a      	bpl.n	8010fec <__pow5mult+0x84>
 8010fd6:	4631      	mov	r1, r6
 8010fd8:	4622      	mov	r2, r4
 8010fda:	4638      	mov	r0, r7
 8010fdc:	f7ff ff22 	bl	8010e24 <__multiply>
 8010fe0:	4631      	mov	r1, r6
 8010fe2:	4680      	mov	r8, r0
 8010fe4:	4638      	mov	r0, r7
 8010fe6:	f7ff fe53 	bl	8010c90 <_Bfree>
 8010fea:	4646      	mov	r6, r8
 8010fec:	106d      	asrs	r5, r5, #1
 8010fee:	d00b      	beq.n	8011008 <__pow5mult+0xa0>
 8010ff0:	6820      	ldr	r0, [r4, #0]
 8010ff2:	b938      	cbnz	r0, 8011004 <__pow5mult+0x9c>
 8010ff4:	4622      	mov	r2, r4
 8010ff6:	4621      	mov	r1, r4
 8010ff8:	4638      	mov	r0, r7
 8010ffa:	f7ff ff13 	bl	8010e24 <__multiply>
 8010ffe:	6020      	str	r0, [r4, #0]
 8011000:	f8c0 9000 	str.w	r9, [r0]
 8011004:	4604      	mov	r4, r0
 8011006:	e7e4      	b.n	8010fd2 <__pow5mult+0x6a>
 8011008:	4630      	mov	r0, r6
 801100a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801100e:	bf00      	nop
 8011010:	08011fd4 	.word	0x08011fd4
 8011014:	08011ea1 	.word	0x08011ea1
 8011018:	08011f32 	.word	0x08011f32

0801101c <__lshift>:
 801101c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011020:	460c      	mov	r4, r1
 8011022:	6849      	ldr	r1, [r1, #4]
 8011024:	6923      	ldr	r3, [r4, #16]
 8011026:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801102a:	68a3      	ldr	r3, [r4, #8]
 801102c:	4607      	mov	r7, r0
 801102e:	4691      	mov	r9, r2
 8011030:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011034:	f108 0601 	add.w	r6, r8, #1
 8011038:	42b3      	cmp	r3, r6
 801103a:	db0b      	blt.n	8011054 <__lshift+0x38>
 801103c:	4638      	mov	r0, r7
 801103e:	f7ff fde7 	bl	8010c10 <_Balloc>
 8011042:	4605      	mov	r5, r0
 8011044:	b948      	cbnz	r0, 801105a <__lshift+0x3e>
 8011046:	4602      	mov	r2, r0
 8011048:	4b28      	ldr	r3, [pc, #160]	@ (80110ec <__lshift+0xd0>)
 801104a:	4829      	ldr	r0, [pc, #164]	@ (80110f0 <__lshift+0xd4>)
 801104c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011050:	f000 fa3a 	bl	80114c8 <__assert_func>
 8011054:	3101      	adds	r1, #1
 8011056:	005b      	lsls	r3, r3, #1
 8011058:	e7ee      	b.n	8011038 <__lshift+0x1c>
 801105a:	2300      	movs	r3, #0
 801105c:	f100 0114 	add.w	r1, r0, #20
 8011060:	f100 0210 	add.w	r2, r0, #16
 8011064:	4618      	mov	r0, r3
 8011066:	4553      	cmp	r3, sl
 8011068:	db33      	blt.n	80110d2 <__lshift+0xb6>
 801106a:	6920      	ldr	r0, [r4, #16]
 801106c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011070:	f104 0314 	add.w	r3, r4, #20
 8011074:	f019 091f 	ands.w	r9, r9, #31
 8011078:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801107c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011080:	d02b      	beq.n	80110da <__lshift+0xbe>
 8011082:	f1c9 0e20 	rsb	lr, r9, #32
 8011086:	468a      	mov	sl, r1
 8011088:	2200      	movs	r2, #0
 801108a:	6818      	ldr	r0, [r3, #0]
 801108c:	fa00 f009 	lsl.w	r0, r0, r9
 8011090:	4310      	orrs	r0, r2
 8011092:	f84a 0b04 	str.w	r0, [sl], #4
 8011096:	f853 2b04 	ldr.w	r2, [r3], #4
 801109a:	459c      	cmp	ip, r3
 801109c:	fa22 f20e 	lsr.w	r2, r2, lr
 80110a0:	d8f3      	bhi.n	801108a <__lshift+0x6e>
 80110a2:	ebac 0304 	sub.w	r3, ip, r4
 80110a6:	3b15      	subs	r3, #21
 80110a8:	f023 0303 	bic.w	r3, r3, #3
 80110ac:	3304      	adds	r3, #4
 80110ae:	f104 0015 	add.w	r0, r4, #21
 80110b2:	4560      	cmp	r0, ip
 80110b4:	bf88      	it	hi
 80110b6:	2304      	movhi	r3, #4
 80110b8:	50ca      	str	r2, [r1, r3]
 80110ba:	b10a      	cbz	r2, 80110c0 <__lshift+0xa4>
 80110bc:	f108 0602 	add.w	r6, r8, #2
 80110c0:	3e01      	subs	r6, #1
 80110c2:	4638      	mov	r0, r7
 80110c4:	612e      	str	r6, [r5, #16]
 80110c6:	4621      	mov	r1, r4
 80110c8:	f7ff fde2 	bl	8010c90 <_Bfree>
 80110cc:	4628      	mov	r0, r5
 80110ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80110d6:	3301      	adds	r3, #1
 80110d8:	e7c5      	b.n	8011066 <__lshift+0x4a>
 80110da:	3904      	subs	r1, #4
 80110dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80110e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80110e4:	459c      	cmp	ip, r3
 80110e6:	d8f9      	bhi.n	80110dc <__lshift+0xc0>
 80110e8:	e7ea      	b.n	80110c0 <__lshift+0xa4>
 80110ea:	bf00      	nop
 80110ec:	08011f10 	.word	0x08011f10
 80110f0:	08011f32 	.word	0x08011f32

080110f4 <__mcmp>:
 80110f4:	690a      	ldr	r2, [r1, #16]
 80110f6:	4603      	mov	r3, r0
 80110f8:	6900      	ldr	r0, [r0, #16]
 80110fa:	1a80      	subs	r0, r0, r2
 80110fc:	b530      	push	{r4, r5, lr}
 80110fe:	d10e      	bne.n	801111e <__mcmp+0x2a>
 8011100:	3314      	adds	r3, #20
 8011102:	3114      	adds	r1, #20
 8011104:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011108:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801110c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011110:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011114:	4295      	cmp	r5, r2
 8011116:	d003      	beq.n	8011120 <__mcmp+0x2c>
 8011118:	d205      	bcs.n	8011126 <__mcmp+0x32>
 801111a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801111e:	bd30      	pop	{r4, r5, pc}
 8011120:	42a3      	cmp	r3, r4
 8011122:	d3f3      	bcc.n	801110c <__mcmp+0x18>
 8011124:	e7fb      	b.n	801111e <__mcmp+0x2a>
 8011126:	2001      	movs	r0, #1
 8011128:	e7f9      	b.n	801111e <__mcmp+0x2a>
	...

0801112c <__mdiff>:
 801112c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011130:	4689      	mov	r9, r1
 8011132:	4606      	mov	r6, r0
 8011134:	4611      	mov	r1, r2
 8011136:	4648      	mov	r0, r9
 8011138:	4614      	mov	r4, r2
 801113a:	f7ff ffdb 	bl	80110f4 <__mcmp>
 801113e:	1e05      	subs	r5, r0, #0
 8011140:	d112      	bne.n	8011168 <__mdiff+0x3c>
 8011142:	4629      	mov	r1, r5
 8011144:	4630      	mov	r0, r6
 8011146:	f7ff fd63 	bl	8010c10 <_Balloc>
 801114a:	4602      	mov	r2, r0
 801114c:	b928      	cbnz	r0, 801115a <__mdiff+0x2e>
 801114e:	4b3f      	ldr	r3, [pc, #252]	@ (801124c <__mdiff+0x120>)
 8011150:	f240 2137 	movw	r1, #567	@ 0x237
 8011154:	483e      	ldr	r0, [pc, #248]	@ (8011250 <__mdiff+0x124>)
 8011156:	f000 f9b7 	bl	80114c8 <__assert_func>
 801115a:	2301      	movs	r3, #1
 801115c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011160:	4610      	mov	r0, r2
 8011162:	b003      	add	sp, #12
 8011164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011168:	bfbc      	itt	lt
 801116a:	464b      	movlt	r3, r9
 801116c:	46a1      	movlt	r9, r4
 801116e:	4630      	mov	r0, r6
 8011170:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011174:	bfba      	itte	lt
 8011176:	461c      	movlt	r4, r3
 8011178:	2501      	movlt	r5, #1
 801117a:	2500      	movge	r5, #0
 801117c:	f7ff fd48 	bl	8010c10 <_Balloc>
 8011180:	4602      	mov	r2, r0
 8011182:	b918      	cbnz	r0, 801118c <__mdiff+0x60>
 8011184:	4b31      	ldr	r3, [pc, #196]	@ (801124c <__mdiff+0x120>)
 8011186:	f240 2145 	movw	r1, #581	@ 0x245
 801118a:	e7e3      	b.n	8011154 <__mdiff+0x28>
 801118c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011190:	6926      	ldr	r6, [r4, #16]
 8011192:	60c5      	str	r5, [r0, #12]
 8011194:	f109 0310 	add.w	r3, r9, #16
 8011198:	f109 0514 	add.w	r5, r9, #20
 801119c:	f104 0e14 	add.w	lr, r4, #20
 80111a0:	f100 0b14 	add.w	fp, r0, #20
 80111a4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80111a8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80111ac:	9301      	str	r3, [sp, #4]
 80111ae:	46d9      	mov	r9, fp
 80111b0:	f04f 0c00 	mov.w	ip, #0
 80111b4:	9b01      	ldr	r3, [sp, #4]
 80111b6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80111ba:	f853 af04 	ldr.w	sl, [r3, #4]!
 80111be:	9301      	str	r3, [sp, #4]
 80111c0:	fa1f f38a 	uxth.w	r3, sl
 80111c4:	4619      	mov	r1, r3
 80111c6:	b283      	uxth	r3, r0
 80111c8:	1acb      	subs	r3, r1, r3
 80111ca:	0c00      	lsrs	r0, r0, #16
 80111cc:	4463      	add	r3, ip
 80111ce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80111d2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80111d6:	b29b      	uxth	r3, r3
 80111d8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80111dc:	4576      	cmp	r6, lr
 80111de:	f849 3b04 	str.w	r3, [r9], #4
 80111e2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80111e6:	d8e5      	bhi.n	80111b4 <__mdiff+0x88>
 80111e8:	1b33      	subs	r3, r6, r4
 80111ea:	3b15      	subs	r3, #21
 80111ec:	f023 0303 	bic.w	r3, r3, #3
 80111f0:	3415      	adds	r4, #21
 80111f2:	3304      	adds	r3, #4
 80111f4:	42a6      	cmp	r6, r4
 80111f6:	bf38      	it	cc
 80111f8:	2304      	movcc	r3, #4
 80111fa:	441d      	add	r5, r3
 80111fc:	445b      	add	r3, fp
 80111fe:	461e      	mov	r6, r3
 8011200:	462c      	mov	r4, r5
 8011202:	4544      	cmp	r4, r8
 8011204:	d30e      	bcc.n	8011224 <__mdiff+0xf8>
 8011206:	f108 0103 	add.w	r1, r8, #3
 801120a:	1b49      	subs	r1, r1, r5
 801120c:	f021 0103 	bic.w	r1, r1, #3
 8011210:	3d03      	subs	r5, #3
 8011212:	45a8      	cmp	r8, r5
 8011214:	bf38      	it	cc
 8011216:	2100      	movcc	r1, #0
 8011218:	440b      	add	r3, r1
 801121a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801121e:	b191      	cbz	r1, 8011246 <__mdiff+0x11a>
 8011220:	6117      	str	r7, [r2, #16]
 8011222:	e79d      	b.n	8011160 <__mdiff+0x34>
 8011224:	f854 1b04 	ldr.w	r1, [r4], #4
 8011228:	46e6      	mov	lr, ip
 801122a:	0c08      	lsrs	r0, r1, #16
 801122c:	fa1c fc81 	uxtah	ip, ip, r1
 8011230:	4471      	add	r1, lr
 8011232:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011236:	b289      	uxth	r1, r1
 8011238:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801123c:	f846 1b04 	str.w	r1, [r6], #4
 8011240:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011244:	e7dd      	b.n	8011202 <__mdiff+0xd6>
 8011246:	3f01      	subs	r7, #1
 8011248:	e7e7      	b.n	801121a <__mdiff+0xee>
 801124a:	bf00      	nop
 801124c:	08011f10 	.word	0x08011f10
 8011250:	08011f32 	.word	0x08011f32

08011254 <__d2b>:
 8011254:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011258:	460f      	mov	r7, r1
 801125a:	2101      	movs	r1, #1
 801125c:	ec59 8b10 	vmov	r8, r9, d0
 8011260:	4616      	mov	r6, r2
 8011262:	f7ff fcd5 	bl	8010c10 <_Balloc>
 8011266:	4604      	mov	r4, r0
 8011268:	b930      	cbnz	r0, 8011278 <__d2b+0x24>
 801126a:	4602      	mov	r2, r0
 801126c:	4b23      	ldr	r3, [pc, #140]	@ (80112fc <__d2b+0xa8>)
 801126e:	4824      	ldr	r0, [pc, #144]	@ (8011300 <__d2b+0xac>)
 8011270:	f240 310f 	movw	r1, #783	@ 0x30f
 8011274:	f000 f928 	bl	80114c8 <__assert_func>
 8011278:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801127c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011280:	b10d      	cbz	r5, 8011286 <__d2b+0x32>
 8011282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011286:	9301      	str	r3, [sp, #4]
 8011288:	f1b8 0300 	subs.w	r3, r8, #0
 801128c:	d023      	beq.n	80112d6 <__d2b+0x82>
 801128e:	4668      	mov	r0, sp
 8011290:	9300      	str	r3, [sp, #0]
 8011292:	f7ff fd84 	bl	8010d9e <__lo0bits>
 8011296:	e9dd 1200 	ldrd	r1, r2, [sp]
 801129a:	b1d0      	cbz	r0, 80112d2 <__d2b+0x7e>
 801129c:	f1c0 0320 	rsb	r3, r0, #32
 80112a0:	fa02 f303 	lsl.w	r3, r2, r3
 80112a4:	430b      	orrs	r3, r1
 80112a6:	40c2      	lsrs	r2, r0
 80112a8:	6163      	str	r3, [r4, #20]
 80112aa:	9201      	str	r2, [sp, #4]
 80112ac:	9b01      	ldr	r3, [sp, #4]
 80112ae:	61a3      	str	r3, [r4, #24]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	bf0c      	ite	eq
 80112b4:	2201      	moveq	r2, #1
 80112b6:	2202      	movne	r2, #2
 80112b8:	6122      	str	r2, [r4, #16]
 80112ba:	b1a5      	cbz	r5, 80112e6 <__d2b+0x92>
 80112bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80112c0:	4405      	add	r5, r0
 80112c2:	603d      	str	r5, [r7, #0]
 80112c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80112c8:	6030      	str	r0, [r6, #0]
 80112ca:	4620      	mov	r0, r4
 80112cc:	b003      	add	sp, #12
 80112ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112d2:	6161      	str	r1, [r4, #20]
 80112d4:	e7ea      	b.n	80112ac <__d2b+0x58>
 80112d6:	a801      	add	r0, sp, #4
 80112d8:	f7ff fd61 	bl	8010d9e <__lo0bits>
 80112dc:	9b01      	ldr	r3, [sp, #4]
 80112de:	6163      	str	r3, [r4, #20]
 80112e0:	3020      	adds	r0, #32
 80112e2:	2201      	movs	r2, #1
 80112e4:	e7e8      	b.n	80112b8 <__d2b+0x64>
 80112e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80112ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80112ee:	6038      	str	r0, [r7, #0]
 80112f0:	6918      	ldr	r0, [r3, #16]
 80112f2:	f7ff fd35 	bl	8010d60 <__hi0bits>
 80112f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80112fa:	e7e5      	b.n	80112c8 <__d2b+0x74>
 80112fc:	08011f10 	.word	0x08011f10
 8011300:	08011f32 	.word	0x08011f32

08011304 <__sread>:
 8011304:	b510      	push	{r4, lr}
 8011306:	460c      	mov	r4, r1
 8011308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801130c:	f000 f898 	bl	8011440 <_read_r>
 8011310:	2800      	cmp	r0, #0
 8011312:	bfab      	itete	ge
 8011314:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011316:	89a3      	ldrhlt	r3, [r4, #12]
 8011318:	181b      	addge	r3, r3, r0
 801131a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801131e:	bfac      	ite	ge
 8011320:	6563      	strge	r3, [r4, #84]	@ 0x54
 8011322:	81a3      	strhlt	r3, [r4, #12]
 8011324:	bd10      	pop	{r4, pc}

08011326 <__swrite>:
 8011326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801132a:	461f      	mov	r7, r3
 801132c:	898b      	ldrh	r3, [r1, #12]
 801132e:	05db      	lsls	r3, r3, #23
 8011330:	4605      	mov	r5, r0
 8011332:	460c      	mov	r4, r1
 8011334:	4616      	mov	r6, r2
 8011336:	d505      	bpl.n	8011344 <__swrite+0x1e>
 8011338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801133c:	2302      	movs	r3, #2
 801133e:	2200      	movs	r2, #0
 8011340:	f000 f86c 	bl	801141c <_lseek_r>
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801134a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801134e:	81a3      	strh	r3, [r4, #12]
 8011350:	4632      	mov	r2, r6
 8011352:	463b      	mov	r3, r7
 8011354:	4628      	mov	r0, r5
 8011356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801135a:	f000 b893 	b.w	8011484 <_write_r>

0801135e <__sseek>:
 801135e:	b510      	push	{r4, lr}
 8011360:	460c      	mov	r4, r1
 8011362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011366:	f000 f859 	bl	801141c <_lseek_r>
 801136a:	1c43      	adds	r3, r0, #1
 801136c:	89a3      	ldrh	r3, [r4, #12]
 801136e:	bf15      	itete	ne
 8011370:	6560      	strne	r0, [r4, #84]	@ 0x54
 8011372:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8011376:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801137a:	81a3      	strheq	r3, [r4, #12]
 801137c:	bf18      	it	ne
 801137e:	81a3      	strhne	r3, [r4, #12]
 8011380:	bd10      	pop	{r4, pc}

08011382 <__sclose>:
 8011382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011386:	f000 b88f 	b.w	80114a8 <_close_r>

0801138a <_realloc_r>:
 801138a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801138e:	4607      	mov	r7, r0
 8011390:	4614      	mov	r4, r2
 8011392:	460d      	mov	r5, r1
 8011394:	b921      	cbnz	r1, 80113a0 <_realloc_r+0x16>
 8011396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801139a:	4611      	mov	r1, r2
 801139c:	f7ff bb00 	b.w	80109a0 <_malloc_r>
 80113a0:	b92a      	cbnz	r2, 80113ae <_realloc_r+0x24>
 80113a2:	f7ff f931 	bl	8010608 <_free_r>
 80113a6:	4625      	mov	r5, r4
 80113a8:	4628      	mov	r0, r5
 80113aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113ae:	f000 f8cf 	bl	8011550 <_malloc_usable_size_r>
 80113b2:	4284      	cmp	r4, r0
 80113b4:	4606      	mov	r6, r0
 80113b6:	d802      	bhi.n	80113be <_realloc_r+0x34>
 80113b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80113bc:	d8f4      	bhi.n	80113a8 <_realloc_r+0x1e>
 80113be:	4621      	mov	r1, r4
 80113c0:	4638      	mov	r0, r7
 80113c2:	f7ff faed 	bl	80109a0 <_malloc_r>
 80113c6:	4680      	mov	r8, r0
 80113c8:	b908      	cbnz	r0, 80113ce <_realloc_r+0x44>
 80113ca:	4645      	mov	r5, r8
 80113cc:	e7ec      	b.n	80113a8 <_realloc_r+0x1e>
 80113ce:	42b4      	cmp	r4, r6
 80113d0:	4622      	mov	r2, r4
 80113d2:	4629      	mov	r1, r5
 80113d4:	bf28      	it	cs
 80113d6:	4632      	movcs	r2, r6
 80113d8:	f7fe faae 	bl	800f938 <memcpy>
 80113dc:	4629      	mov	r1, r5
 80113de:	4638      	mov	r0, r7
 80113e0:	f7ff f912 	bl	8010608 <_free_r>
 80113e4:	e7f1      	b.n	80113ca <_realloc_r+0x40>

080113e6 <memmove>:
 80113e6:	4288      	cmp	r0, r1
 80113e8:	b510      	push	{r4, lr}
 80113ea:	eb01 0402 	add.w	r4, r1, r2
 80113ee:	d902      	bls.n	80113f6 <memmove+0x10>
 80113f0:	4284      	cmp	r4, r0
 80113f2:	4623      	mov	r3, r4
 80113f4:	d807      	bhi.n	8011406 <memmove+0x20>
 80113f6:	1e43      	subs	r3, r0, #1
 80113f8:	42a1      	cmp	r1, r4
 80113fa:	d008      	beq.n	801140e <memmove+0x28>
 80113fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011400:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011404:	e7f8      	b.n	80113f8 <memmove+0x12>
 8011406:	4402      	add	r2, r0
 8011408:	4601      	mov	r1, r0
 801140a:	428a      	cmp	r2, r1
 801140c:	d100      	bne.n	8011410 <memmove+0x2a>
 801140e:	bd10      	pop	{r4, pc}
 8011410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011414:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011418:	e7f7      	b.n	801140a <memmove+0x24>
	...

0801141c <_lseek_r>:
 801141c:	b538      	push	{r3, r4, r5, lr}
 801141e:	4d07      	ldr	r5, [pc, #28]	@ (801143c <_lseek_r+0x20>)
 8011420:	4604      	mov	r4, r0
 8011422:	4608      	mov	r0, r1
 8011424:	4611      	mov	r1, r2
 8011426:	2200      	movs	r2, #0
 8011428:	602a      	str	r2, [r5, #0]
 801142a:	461a      	mov	r2, r3
 801142c:	f7f5 fda5 	bl	8006f7a <_lseek>
 8011430:	1c43      	adds	r3, r0, #1
 8011432:	d102      	bne.n	801143a <_lseek_r+0x1e>
 8011434:	682b      	ldr	r3, [r5, #0]
 8011436:	b103      	cbz	r3, 801143a <_lseek_r+0x1e>
 8011438:	6023      	str	r3, [r4, #0]
 801143a:	bd38      	pop	{r3, r4, r5, pc}
 801143c:	20005a98 	.word	0x20005a98

08011440 <_read_r>:
 8011440:	b538      	push	{r3, r4, r5, lr}
 8011442:	4d07      	ldr	r5, [pc, #28]	@ (8011460 <_read_r+0x20>)
 8011444:	4604      	mov	r4, r0
 8011446:	4608      	mov	r0, r1
 8011448:	4611      	mov	r1, r2
 801144a:	2200      	movs	r2, #0
 801144c:	602a      	str	r2, [r5, #0]
 801144e:	461a      	mov	r2, r3
 8011450:	f7f5 fd33 	bl	8006eba <_read>
 8011454:	1c43      	adds	r3, r0, #1
 8011456:	d102      	bne.n	801145e <_read_r+0x1e>
 8011458:	682b      	ldr	r3, [r5, #0]
 801145a:	b103      	cbz	r3, 801145e <_read_r+0x1e>
 801145c:	6023      	str	r3, [r4, #0]
 801145e:	bd38      	pop	{r3, r4, r5, pc}
 8011460:	20005a98 	.word	0x20005a98

08011464 <_sbrk_r>:
 8011464:	b538      	push	{r3, r4, r5, lr}
 8011466:	4d06      	ldr	r5, [pc, #24]	@ (8011480 <_sbrk_r+0x1c>)
 8011468:	2300      	movs	r3, #0
 801146a:	4604      	mov	r4, r0
 801146c:	4608      	mov	r0, r1
 801146e:	602b      	str	r3, [r5, #0]
 8011470:	f7f5 fd90 	bl	8006f94 <_sbrk>
 8011474:	1c43      	adds	r3, r0, #1
 8011476:	d102      	bne.n	801147e <_sbrk_r+0x1a>
 8011478:	682b      	ldr	r3, [r5, #0]
 801147a:	b103      	cbz	r3, 801147e <_sbrk_r+0x1a>
 801147c:	6023      	str	r3, [r4, #0]
 801147e:	bd38      	pop	{r3, r4, r5, pc}
 8011480:	20005a98 	.word	0x20005a98

08011484 <_write_r>:
 8011484:	b538      	push	{r3, r4, r5, lr}
 8011486:	4d07      	ldr	r5, [pc, #28]	@ (80114a4 <_write_r+0x20>)
 8011488:	4604      	mov	r4, r0
 801148a:	4608      	mov	r0, r1
 801148c:	4611      	mov	r1, r2
 801148e:	2200      	movs	r2, #0
 8011490:	602a      	str	r2, [r5, #0]
 8011492:	461a      	mov	r2, r3
 8011494:	f7f5 fd2e 	bl	8006ef4 <_write>
 8011498:	1c43      	adds	r3, r0, #1
 801149a:	d102      	bne.n	80114a2 <_write_r+0x1e>
 801149c:	682b      	ldr	r3, [r5, #0]
 801149e:	b103      	cbz	r3, 80114a2 <_write_r+0x1e>
 80114a0:	6023      	str	r3, [r4, #0]
 80114a2:	bd38      	pop	{r3, r4, r5, pc}
 80114a4:	20005a98 	.word	0x20005a98

080114a8 <_close_r>:
 80114a8:	b538      	push	{r3, r4, r5, lr}
 80114aa:	4d06      	ldr	r5, [pc, #24]	@ (80114c4 <_close_r+0x1c>)
 80114ac:	2300      	movs	r3, #0
 80114ae:	4604      	mov	r4, r0
 80114b0:	4608      	mov	r0, r1
 80114b2:	602b      	str	r3, [r5, #0]
 80114b4:	f7f5 fd3a 	bl	8006f2c <_close>
 80114b8:	1c43      	adds	r3, r0, #1
 80114ba:	d102      	bne.n	80114c2 <_close_r+0x1a>
 80114bc:	682b      	ldr	r3, [r5, #0]
 80114be:	b103      	cbz	r3, 80114c2 <_close_r+0x1a>
 80114c0:	6023      	str	r3, [r4, #0]
 80114c2:	bd38      	pop	{r3, r4, r5, pc}
 80114c4:	20005a98 	.word	0x20005a98

080114c8 <__assert_func>:
 80114c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80114ca:	4614      	mov	r4, r2
 80114cc:	461a      	mov	r2, r3
 80114ce:	4b09      	ldr	r3, [pc, #36]	@ (80114f4 <__assert_func+0x2c>)
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	4605      	mov	r5, r0
 80114d4:	68d8      	ldr	r0, [r3, #12]
 80114d6:	b14c      	cbz	r4, 80114ec <__assert_func+0x24>
 80114d8:	4b07      	ldr	r3, [pc, #28]	@ (80114f8 <__assert_func+0x30>)
 80114da:	9100      	str	r1, [sp, #0]
 80114dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80114e0:	4906      	ldr	r1, [pc, #24]	@ (80114fc <__assert_func+0x34>)
 80114e2:	462b      	mov	r3, r5
 80114e4:	f000 f83c 	bl	8011560 <fiprintf>
 80114e8:	f000 f859 	bl	801159e <abort>
 80114ec:	4b04      	ldr	r3, [pc, #16]	@ (8011500 <__assert_func+0x38>)
 80114ee:	461c      	mov	r4, r3
 80114f0:	e7f3      	b.n	80114da <__assert_func+0x12>
 80114f2:	bf00      	nop
 80114f4:	20000048 	.word	0x20000048
 80114f8:	08011f95 	.word	0x08011f95
 80114fc:	08011fa2 	.word	0x08011fa2
 8011500:	08011fd0 	.word	0x08011fd0

08011504 <_calloc_r>:
 8011504:	b570      	push	{r4, r5, r6, lr}
 8011506:	fba1 5402 	umull	r5, r4, r1, r2
 801150a:	b934      	cbnz	r4, 801151a <_calloc_r+0x16>
 801150c:	4629      	mov	r1, r5
 801150e:	f7ff fa47 	bl	80109a0 <_malloc_r>
 8011512:	4606      	mov	r6, r0
 8011514:	b928      	cbnz	r0, 8011522 <_calloc_r+0x1e>
 8011516:	4630      	mov	r0, r6
 8011518:	bd70      	pop	{r4, r5, r6, pc}
 801151a:	220c      	movs	r2, #12
 801151c:	6002      	str	r2, [r0, #0]
 801151e:	2600      	movs	r6, #0
 8011520:	e7f9      	b.n	8011516 <_calloc_r+0x12>
 8011522:	462a      	mov	r2, r5
 8011524:	4621      	mov	r1, r4
 8011526:	f7fe f96f 	bl	800f808 <memset>
 801152a:	e7f4      	b.n	8011516 <_calloc_r+0x12>

0801152c <__ascii_mbtowc>:
 801152c:	b082      	sub	sp, #8
 801152e:	b901      	cbnz	r1, 8011532 <__ascii_mbtowc+0x6>
 8011530:	a901      	add	r1, sp, #4
 8011532:	b142      	cbz	r2, 8011546 <__ascii_mbtowc+0x1a>
 8011534:	b14b      	cbz	r3, 801154a <__ascii_mbtowc+0x1e>
 8011536:	7813      	ldrb	r3, [r2, #0]
 8011538:	600b      	str	r3, [r1, #0]
 801153a:	7812      	ldrb	r2, [r2, #0]
 801153c:	1e10      	subs	r0, r2, #0
 801153e:	bf18      	it	ne
 8011540:	2001      	movne	r0, #1
 8011542:	b002      	add	sp, #8
 8011544:	4770      	bx	lr
 8011546:	4610      	mov	r0, r2
 8011548:	e7fb      	b.n	8011542 <__ascii_mbtowc+0x16>
 801154a:	f06f 0001 	mvn.w	r0, #1
 801154e:	e7f8      	b.n	8011542 <__ascii_mbtowc+0x16>

08011550 <_malloc_usable_size_r>:
 8011550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011554:	1f18      	subs	r0, r3, #4
 8011556:	2b00      	cmp	r3, #0
 8011558:	bfbc      	itt	lt
 801155a:	580b      	ldrlt	r3, [r1, r0]
 801155c:	18c0      	addlt	r0, r0, r3
 801155e:	4770      	bx	lr

08011560 <fiprintf>:
 8011560:	b40e      	push	{r1, r2, r3}
 8011562:	b503      	push	{r0, r1, lr}
 8011564:	4601      	mov	r1, r0
 8011566:	ab03      	add	r3, sp, #12
 8011568:	4805      	ldr	r0, [pc, #20]	@ (8011580 <fiprintf+0x20>)
 801156a:	f853 2b04 	ldr.w	r2, [r3], #4
 801156e:	6800      	ldr	r0, [r0, #0]
 8011570:	9301      	str	r3, [sp, #4]
 8011572:	f000 f845 	bl	8011600 <_vfiprintf_r>
 8011576:	b002      	add	sp, #8
 8011578:	f85d eb04 	ldr.w	lr, [sp], #4
 801157c:	b003      	add	sp, #12
 801157e:	4770      	bx	lr
 8011580:	20000048 	.word	0x20000048

08011584 <__ascii_wctomb>:
 8011584:	4603      	mov	r3, r0
 8011586:	4608      	mov	r0, r1
 8011588:	b141      	cbz	r1, 801159c <__ascii_wctomb+0x18>
 801158a:	2aff      	cmp	r2, #255	@ 0xff
 801158c:	d904      	bls.n	8011598 <__ascii_wctomb+0x14>
 801158e:	228a      	movs	r2, #138	@ 0x8a
 8011590:	601a      	str	r2, [r3, #0]
 8011592:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011596:	4770      	bx	lr
 8011598:	700a      	strb	r2, [r1, #0]
 801159a:	2001      	movs	r0, #1
 801159c:	4770      	bx	lr

0801159e <abort>:
 801159e:	b508      	push	{r3, lr}
 80115a0:	2006      	movs	r0, #6
 80115a2:	f000 fa63 	bl	8011a6c <raise>
 80115a6:	2001      	movs	r0, #1
 80115a8:	f7f5 fc7c 	bl	8006ea4 <_exit>

080115ac <__sfputc_r>:
 80115ac:	6893      	ldr	r3, [r2, #8]
 80115ae:	3b01      	subs	r3, #1
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	b410      	push	{r4}
 80115b4:	6093      	str	r3, [r2, #8]
 80115b6:	da08      	bge.n	80115ca <__sfputc_r+0x1e>
 80115b8:	6994      	ldr	r4, [r2, #24]
 80115ba:	42a3      	cmp	r3, r4
 80115bc:	db01      	blt.n	80115c2 <__sfputc_r+0x16>
 80115be:	290a      	cmp	r1, #10
 80115c0:	d103      	bne.n	80115ca <__sfputc_r+0x1e>
 80115c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115c6:	f000 b933 	b.w	8011830 <__swbuf_r>
 80115ca:	6813      	ldr	r3, [r2, #0]
 80115cc:	1c58      	adds	r0, r3, #1
 80115ce:	6010      	str	r0, [r2, #0]
 80115d0:	7019      	strb	r1, [r3, #0]
 80115d2:	4608      	mov	r0, r1
 80115d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115d8:	4770      	bx	lr

080115da <__sfputs_r>:
 80115da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115dc:	4606      	mov	r6, r0
 80115de:	460f      	mov	r7, r1
 80115e0:	4614      	mov	r4, r2
 80115e2:	18d5      	adds	r5, r2, r3
 80115e4:	42ac      	cmp	r4, r5
 80115e6:	d101      	bne.n	80115ec <__sfputs_r+0x12>
 80115e8:	2000      	movs	r0, #0
 80115ea:	e007      	b.n	80115fc <__sfputs_r+0x22>
 80115ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115f0:	463a      	mov	r2, r7
 80115f2:	4630      	mov	r0, r6
 80115f4:	f7ff ffda 	bl	80115ac <__sfputc_r>
 80115f8:	1c43      	adds	r3, r0, #1
 80115fa:	d1f3      	bne.n	80115e4 <__sfputs_r+0xa>
 80115fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011600 <_vfiprintf_r>:
 8011600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011604:	460d      	mov	r5, r1
 8011606:	b09d      	sub	sp, #116	@ 0x74
 8011608:	4614      	mov	r4, r2
 801160a:	4698      	mov	r8, r3
 801160c:	4606      	mov	r6, r0
 801160e:	b118      	cbz	r0, 8011618 <_vfiprintf_r+0x18>
 8011610:	6a03      	ldr	r3, [r0, #32]
 8011612:	b90b      	cbnz	r3, 8011618 <_vfiprintf_r+0x18>
 8011614:	f7fe f8a2 	bl	800f75c <__sinit>
 8011618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801161a:	07d9      	lsls	r1, r3, #31
 801161c:	d405      	bmi.n	801162a <_vfiprintf_r+0x2a>
 801161e:	89ab      	ldrh	r3, [r5, #12]
 8011620:	059a      	lsls	r2, r3, #22
 8011622:	d402      	bmi.n	801162a <_vfiprintf_r+0x2a>
 8011624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011626:	f7fe f922 	bl	800f86e <__retarget_lock_acquire_recursive>
 801162a:	89ab      	ldrh	r3, [r5, #12]
 801162c:	071b      	lsls	r3, r3, #28
 801162e:	d501      	bpl.n	8011634 <_vfiprintf_r+0x34>
 8011630:	692b      	ldr	r3, [r5, #16]
 8011632:	b99b      	cbnz	r3, 801165c <_vfiprintf_r+0x5c>
 8011634:	4629      	mov	r1, r5
 8011636:	4630      	mov	r0, r6
 8011638:	f000 f938 	bl	80118ac <__swsetup_r>
 801163c:	b170      	cbz	r0, 801165c <_vfiprintf_r+0x5c>
 801163e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011640:	07dc      	lsls	r4, r3, #31
 8011642:	d504      	bpl.n	801164e <_vfiprintf_r+0x4e>
 8011644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011648:	b01d      	add	sp, #116	@ 0x74
 801164a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801164e:	89ab      	ldrh	r3, [r5, #12]
 8011650:	0598      	lsls	r0, r3, #22
 8011652:	d4f7      	bmi.n	8011644 <_vfiprintf_r+0x44>
 8011654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011656:	f7fe f90b 	bl	800f870 <__retarget_lock_release_recursive>
 801165a:	e7f3      	b.n	8011644 <_vfiprintf_r+0x44>
 801165c:	2300      	movs	r3, #0
 801165e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011660:	2320      	movs	r3, #32
 8011662:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011666:	f8cd 800c 	str.w	r8, [sp, #12]
 801166a:	2330      	movs	r3, #48	@ 0x30
 801166c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801181c <_vfiprintf_r+0x21c>
 8011670:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011674:	f04f 0901 	mov.w	r9, #1
 8011678:	4623      	mov	r3, r4
 801167a:	469a      	mov	sl, r3
 801167c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011680:	b10a      	cbz	r2, 8011686 <_vfiprintf_r+0x86>
 8011682:	2a25      	cmp	r2, #37	@ 0x25
 8011684:	d1f9      	bne.n	801167a <_vfiprintf_r+0x7a>
 8011686:	ebba 0b04 	subs.w	fp, sl, r4
 801168a:	d00b      	beq.n	80116a4 <_vfiprintf_r+0xa4>
 801168c:	465b      	mov	r3, fp
 801168e:	4622      	mov	r2, r4
 8011690:	4629      	mov	r1, r5
 8011692:	4630      	mov	r0, r6
 8011694:	f7ff ffa1 	bl	80115da <__sfputs_r>
 8011698:	3001      	adds	r0, #1
 801169a:	f000 80a7 	beq.w	80117ec <_vfiprintf_r+0x1ec>
 801169e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80116a0:	445a      	add	r2, fp
 80116a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80116a4:	f89a 3000 	ldrb.w	r3, [sl]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	f000 809f 	beq.w	80117ec <_vfiprintf_r+0x1ec>
 80116ae:	2300      	movs	r3, #0
 80116b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80116b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116b8:	f10a 0a01 	add.w	sl, sl, #1
 80116bc:	9304      	str	r3, [sp, #16]
 80116be:	9307      	str	r3, [sp, #28]
 80116c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80116c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80116c6:	4654      	mov	r4, sl
 80116c8:	2205      	movs	r2, #5
 80116ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116ce:	4853      	ldr	r0, [pc, #332]	@ (801181c <_vfiprintf_r+0x21c>)
 80116d0:	f7ee fd7e 	bl	80001d0 <memchr>
 80116d4:	9a04      	ldr	r2, [sp, #16]
 80116d6:	b9d8      	cbnz	r0, 8011710 <_vfiprintf_r+0x110>
 80116d8:	06d1      	lsls	r1, r2, #27
 80116da:	bf44      	itt	mi
 80116dc:	2320      	movmi	r3, #32
 80116de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116e2:	0713      	lsls	r3, r2, #28
 80116e4:	bf44      	itt	mi
 80116e6:	232b      	movmi	r3, #43	@ 0x2b
 80116e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116ec:	f89a 3000 	ldrb.w	r3, [sl]
 80116f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80116f2:	d015      	beq.n	8011720 <_vfiprintf_r+0x120>
 80116f4:	9a07      	ldr	r2, [sp, #28]
 80116f6:	4654      	mov	r4, sl
 80116f8:	2000      	movs	r0, #0
 80116fa:	f04f 0c0a 	mov.w	ip, #10
 80116fe:	4621      	mov	r1, r4
 8011700:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011704:	3b30      	subs	r3, #48	@ 0x30
 8011706:	2b09      	cmp	r3, #9
 8011708:	d94b      	bls.n	80117a2 <_vfiprintf_r+0x1a2>
 801170a:	b1b0      	cbz	r0, 801173a <_vfiprintf_r+0x13a>
 801170c:	9207      	str	r2, [sp, #28]
 801170e:	e014      	b.n	801173a <_vfiprintf_r+0x13a>
 8011710:	eba0 0308 	sub.w	r3, r0, r8
 8011714:	fa09 f303 	lsl.w	r3, r9, r3
 8011718:	4313      	orrs	r3, r2
 801171a:	9304      	str	r3, [sp, #16]
 801171c:	46a2      	mov	sl, r4
 801171e:	e7d2      	b.n	80116c6 <_vfiprintf_r+0xc6>
 8011720:	9b03      	ldr	r3, [sp, #12]
 8011722:	1d19      	adds	r1, r3, #4
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	9103      	str	r1, [sp, #12]
 8011728:	2b00      	cmp	r3, #0
 801172a:	bfbb      	ittet	lt
 801172c:	425b      	neglt	r3, r3
 801172e:	f042 0202 	orrlt.w	r2, r2, #2
 8011732:	9307      	strge	r3, [sp, #28]
 8011734:	9307      	strlt	r3, [sp, #28]
 8011736:	bfb8      	it	lt
 8011738:	9204      	strlt	r2, [sp, #16]
 801173a:	7823      	ldrb	r3, [r4, #0]
 801173c:	2b2e      	cmp	r3, #46	@ 0x2e
 801173e:	d10a      	bne.n	8011756 <_vfiprintf_r+0x156>
 8011740:	7863      	ldrb	r3, [r4, #1]
 8011742:	2b2a      	cmp	r3, #42	@ 0x2a
 8011744:	d132      	bne.n	80117ac <_vfiprintf_r+0x1ac>
 8011746:	9b03      	ldr	r3, [sp, #12]
 8011748:	1d1a      	adds	r2, r3, #4
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	9203      	str	r2, [sp, #12]
 801174e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011752:	3402      	adds	r4, #2
 8011754:	9305      	str	r3, [sp, #20]
 8011756:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801182c <_vfiprintf_r+0x22c>
 801175a:	7821      	ldrb	r1, [r4, #0]
 801175c:	2203      	movs	r2, #3
 801175e:	4650      	mov	r0, sl
 8011760:	f7ee fd36 	bl	80001d0 <memchr>
 8011764:	b138      	cbz	r0, 8011776 <_vfiprintf_r+0x176>
 8011766:	9b04      	ldr	r3, [sp, #16]
 8011768:	eba0 000a 	sub.w	r0, r0, sl
 801176c:	2240      	movs	r2, #64	@ 0x40
 801176e:	4082      	lsls	r2, r0
 8011770:	4313      	orrs	r3, r2
 8011772:	3401      	adds	r4, #1
 8011774:	9304      	str	r3, [sp, #16]
 8011776:	f814 1b01 	ldrb.w	r1, [r4], #1
 801177a:	4829      	ldr	r0, [pc, #164]	@ (8011820 <_vfiprintf_r+0x220>)
 801177c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011780:	2206      	movs	r2, #6
 8011782:	f7ee fd25 	bl	80001d0 <memchr>
 8011786:	2800      	cmp	r0, #0
 8011788:	d03f      	beq.n	801180a <_vfiprintf_r+0x20a>
 801178a:	4b26      	ldr	r3, [pc, #152]	@ (8011824 <_vfiprintf_r+0x224>)
 801178c:	bb1b      	cbnz	r3, 80117d6 <_vfiprintf_r+0x1d6>
 801178e:	9b03      	ldr	r3, [sp, #12]
 8011790:	3307      	adds	r3, #7
 8011792:	f023 0307 	bic.w	r3, r3, #7
 8011796:	3308      	adds	r3, #8
 8011798:	9303      	str	r3, [sp, #12]
 801179a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801179c:	443b      	add	r3, r7
 801179e:	9309      	str	r3, [sp, #36]	@ 0x24
 80117a0:	e76a      	b.n	8011678 <_vfiprintf_r+0x78>
 80117a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80117a6:	460c      	mov	r4, r1
 80117a8:	2001      	movs	r0, #1
 80117aa:	e7a8      	b.n	80116fe <_vfiprintf_r+0xfe>
 80117ac:	2300      	movs	r3, #0
 80117ae:	3401      	adds	r4, #1
 80117b0:	9305      	str	r3, [sp, #20]
 80117b2:	4619      	mov	r1, r3
 80117b4:	f04f 0c0a 	mov.w	ip, #10
 80117b8:	4620      	mov	r0, r4
 80117ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117be:	3a30      	subs	r2, #48	@ 0x30
 80117c0:	2a09      	cmp	r2, #9
 80117c2:	d903      	bls.n	80117cc <_vfiprintf_r+0x1cc>
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d0c6      	beq.n	8011756 <_vfiprintf_r+0x156>
 80117c8:	9105      	str	r1, [sp, #20]
 80117ca:	e7c4      	b.n	8011756 <_vfiprintf_r+0x156>
 80117cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80117d0:	4604      	mov	r4, r0
 80117d2:	2301      	movs	r3, #1
 80117d4:	e7f0      	b.n	80117b8 <_vfiprintf_r+0x1b8>
 80117d6:	ab03      	add	r3, sp, #12
 80117d8:	9300      	str	r3, [sp, #0]
 80117da:	462a      	mov	r2, r5
 80117dc:	4b12      	ldr	r3, [pc, #72]	@ (8011828 <_vfiprintf_r+0x228>)
 80117de:	a904      	add	r1, sp, #16
 80117e0:	4630      	mov	r0, r6
 80117e2:	f7fd fb79 	bl	800eed8 <_printf_float>
 80117e6:	4607      	mov	r7, r0
 80117e8:	1c78      	adds	r0, r7, #1
 80117ea:	d1d6      	bne.n	801179a <_vfiprintf_r+0x19a>
 80117ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117ee:	07d9      	lsls	r1, r3, #31
 80117f0:	d405      	bmi.n	80117fe <_vfiprintf_r+0x1fe>
 80117f2:	89ab      	ldrh	r3, [r5, #12]
 80117f4:	059a      	lsls	r2, r3, #22
 80117f6:	d402      	bmi.n	80117fe <_vfiprintf_r+0x1fe>
 80117f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117fa:	f7fe f839 	bl	800f870 <__retarget_lock_release_recursive>
 80117fe:	89ab      	ldrh	r3, [r5, #12]
 8011800:	065b      	lsls	r3, r3, #25
 8011802:	f53f af1f 	bmi.w	8011644 <_vfiprintf_r+0x44>
 8011806:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011808:	e71e      	b.n	8011648 <_vfiprintf_r+0x48>
 801180a:	ab03      	add	r3, sp, #12
 801180c:	9300      	str	r3, [sp, #0]
 801180e:	462a      	mov	r2, r5
 8011810:	4b05      	ldr	r3, [pc, #20]	@ (8011828 <_vfiprintf_r+0x228>)
 8011812:	a904      	add	r1, sp, #16
 8011814:	4630      	mov	r0, r6
 8011816:	f7fd fdf7 	bl	800f408 <_printf_i>
 801181a:	e7e4      	b.n	80117e6 <_vfiprintf_r+0x1e6>
 801181c:	08011f21 	.word	0x08011f21
 8011820:	08011f2b 	.word	0x08011f2b
 8011824:	0800eed9 	.word	0x0800eed9
 8011828:	080115db 	.word	0x080115db
 801182c:	08011f27 	.word	0x08011f27

08011830 <__swbuf_r>:
 8011830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011832:	460e      	mov	r6, r1
 8011834:	4614      	mov	r4, r2
 8011836:	4605      	mov	r5, r0
 8011838:	b118      	cbz	r0, 8011842 <__swbuf_r+0x12>
 801183a:	6a03      	ldr	r3, [r0, #32]
 801183c:	b90b      	cbnz	r3, 8011842 <__swbuf_r+0x12>
 801183e:	f7fd ff8d 	bl	800f75c <__sinit>
 8011842:	69a3      	ldr	r3, [r4, #24]
 8011844:	60a3      	str	r3, [r4, #8]
 8011846:	89a3      	ldrh	r3, [r4, #12]
 8011848:	071a      	lsls	r2, r3, #28
 801184a:	d501      	bpl.n	8011850 <__swbuf_r+0x20>
 801184c:	6923      	ldr	r3, [r4, #16]
 801184e:	b943      	cbnz	r3, 8011862 <__swbuf_r+0x32>
 8011850:	4621      	mov	r1, r4
 8011852:	4628      	mov	r0, r5
 8011854:	f000 f82a 	bl	80118ac <__swsetup_r>
 8011858:	b118      	cbz	r0, 8011862 <__swbuf_r+0x32>
 801185a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801185e:	4638      	mov	r0, r7
 8011860:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011862:	6823      	ldr	r3, [r4, #0]
 8011864:	6922      	ldr	r2, [r4, #16]
 8011866:	1a98      	subs	r0, r3, r2
 8011868:	6963      	ldr	r3, [r4, #20]
 801186a:	b2f6      	uxtb	r6, r6
 801186c:	4283      	cmp	r3, r0
 801186e:	4637      	mov	r7, r6
 8011870:	dc05      	bgt.n	801187e <__swbuf_r+0x4e>
 8011872:	4621      	mov	r1, r4
 8011874:	4628      	mov	r0, r5
 8011876:	f7ff f997 	bl	8010ba8 <_fflush_r>
 801187a:	2800      	cmp	r0, #0
 801187c:	d1ed      	bne.n	801185a <__swbuf_r+0x2a>
 801187e:	68a3      	ldr	r3, [r4, #8]
 8011880:	3b01      	subs	r3, #1
 8011882:	60a3      	str	r3, [r4, #8]
 8011884:	6823      	ldr	r3, [r4, #0]
 8011886:	1c5a      	adds	r2, r3, #1
 8011888:	6022      	str	r2, [r4, #0]
 801188a:	701e      	strb	r6, [r3, #0]
 801188c:	6962      	ldr	r2, [r4, #20]
 801188e:	1c43      	adds	r3, r0, #1
 8011890:	429a      	cmp	r2, r3
 8011892:	d004      	beq.n	801189e <__swbuf_r+0x6e>
 8011894:	89a3      	ldrh	r3, [r4, #12]
 8011896:	07db      	lsls	r3, r3, #31
 8011898:	d5e1      	bpl.n	801185e <__swbuf_r+0x2e>
 801189a:	2e0a      	cmp	r6, #10
 801189c:	d1df      	bne.n	801185e <__swbuf_r+0x2e>
 801189e:	4621      	mov	r1, r4
 80118a0:	4628      	mov	r0, r5
 80118a2:	f7ff f981 	bl	8010ba8 <_fflush_r>
 80118a6:	2800      	cmp	r0, #0
 80118a8:	d0d9      	beq.n	801185e <__swbuf_r+0x2e>
 80118aa:	e7d6      	b.n	801185a <__swbuf_r+0x2a>

080118ac <__swsetup_r>:
 80118ac:	b538      	push	{r3, r4, r5, lr}
 80118ae:	4b29      	ldr	r3, [pc, #164]	@ (8011954 <__swsetup_r+0xa8>)
 80118b0:	4605      	mov	r5, r0
 80118b2:	6818      	ldr	r0, [r3, #0]
 80118b4:	460c      	mov	r4, r1
 80118b6:	b118      	cbz	r0, 80118c0 <__swsetup_r+0x14>
 80118b8:	6a03      	ldr	r3, [r0, #32]
 80118ba:	b90b      	cbnz	r3, 80118c0 <__swsetup_r+0x14>
 80118bc:	f7fd ff4e 	bl	800f75c <__sinit>
 80118c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80118c4:	0719      	lsls	r1, r3, #28
 80118c6:	d422      	bmi.n	801190e <__swsetup_r+0x62>
 80118c8:	06da      	lsls	r2, r3, #27
 80118ca:	d407      	bmi.n	80118dc <__swsetup_r+0x30>
 80118cc:	2209      	movs	r2, #9
 80118ce:	602a      	str	r2, [r5, #0]
 80118d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118d4:	81a3      	strh	r3, [r4, #12]
 80118d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80118da:	e033      	b.n	8011944 <__swsetup_r+0x98>
 80118dc:	0758      	lsls	r0, r3, #29
 80118de:	d512      	bpl.n	8011906 <__swsetup_r+0x5a>
 80118e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118e2:	b141      	cbz	r1, 80118f6 <__swsetup_r+0x4a>
 80118e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118e8:	4299      	cmp	r1, r3
 80118ea:	d002      	beq.n	80118f2 <__swsetup_r+0x46>
 80118ec:	4628      	mov	r0, r5
 80118ee:	f7fe fe8b 	bl	8010608 <_free_r>
 80118f2:	2300      	movs	r3, #0
 80118f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80118f6:	89a3      	ldrh	r3, [r4, #12]
 80118f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80118fc:	81a3      	strh	r3, [r4, #12]
 80118fe:	2300      	movs	r3, #0
 8011900:	6063      	str	r3, [r4, #4]
 8011902:	6923      	ldr	r3, [r4, #16]
 8011904:	6023      	str	r3, [r4, #0]
 8011906:	89a3      	ldrh	r3, [r4, #12]
 8011908:	f043 0308 	orr.w	r3, r3, #8
 801190c:	81a3      	strh	r3, [r4, #12]
 801190e:	6923      	ldr	r3, [r4, #16]
 8011910:	b94b      	cbnz	r3, 8011926 <__swsetup_r+0x7a>
 8011912:	89a3      	ldrh	r3, [r4, #12]
 8011914:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011918:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801191c:	d003      	beq.n	8011926 <__swsetup_r+0x7a>
 801191e:	4621      	mov	r1, r4
 8011920:	4628      	mov	r0, r5
 8011922:	f000 f83f 	bl	80119a4 <__smakebuf_r>
 8011926:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801192a:	f013 0201 	ands.w	r2, r3, #1
 801192e:	d00a      	beq.n	8011946 <__swsetup_r+0x9a>
 8011930:	2200      	movs	r2, #0
 8011932:	60a2      	str	r2, [r4, #8]
 8011934:	6962      	ldr	r2, [r4, #20]
 8011936:	4252      	negs	r2, r2
 8011938:	61a2      	str	r2, [r4, #24]
 801193a:	6922      	ldr	r2, [r4, #16]
 801193c:	b942      	cbnz	r2, 8011950 <__swsetup_r+0xa4>
 801193e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011942:	d1c5      	bne.n	80118d0 <__swsetup_r+0x24>
 8011944:	bd38      	pop	{r3, r4, r5, pc}
 8011946:	0799      	lsls	r1, r3, #30
 8011948:	bf58      	it	pl
 801194a:	6962      	ldrpl	r2, [r4, #20]
 801194c:	60a2      	str	r2, [r4, #8]
 801194e:	e7f4      	b.n	801193a <__swsetup_r+0x8e>
 8011950:	2000      	movs	r0, #0
 8011952:	e7f7      	b.n	8011944 <__swsetup_r+0x98>
 8011954:	20000048 	.word	0x20000048

08011958 <__swhatbuf_r>:
 8011958:	b570      	push	{r4, r5, r6, lr}
 801195a:	460c      	mov	r4, r1
 801195c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011960:	2900      	cmp	r1, #0
 8011962:	b096      	sub	sp, #88	@ 0x58
 8011964:	4615      	mov	r5, r2
 8011966:	461e      	mov	r6, r3
 8011968:	da0d      	bge.n	8011986 <__swhatbuf_r+0x2e>
 801196a:	89a3      	ldrh	r3, [r4, #12]
 801196c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011970:	f04f 0100 	mov.w	r1, #0
 8011974:	bf14      	ite	ne
 8011976:	2340      	movne	r3, #64	@ 0x40
 8011978:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801197c:	2000      	movs	r0, #0
 801197e:	6031      	str	r1, [r6, #0]
 8011980:	602b      	str	r3, [r5, #0]
 8011982:	b016      	add	sp, #88	@ 0x58
 8011984:	bd70      	pop	{r4, r5, r6, pc}
 8011986:	466a      	mov	r2, sp
 8011988:	f000 f89c 	bl	8011ac4 <_fstat_r>
 801198c:	2800      	cmp	r0, #0
 801198e:	dbec      	blt.n	801196a <__swhatbuf_r+0x12>
 8011990:	9901      	ldr	r1, [sp, #4]
 8011992:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011996:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801199a:	4259      	negs	r1, r3
 801199c:	4159      	adcs	r1, r3
 801199e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80119a2:	e7eb      	b.n	801197c <__swhatbuf_r+0x24>

080119a4 <__smakebuf_r>:
 80119a4:	898b      	ldrh	r3, [r1, #12]
 80119a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119a8:	079d      	lsls	r5, r3, #30
 80119aa:	4606      	mov	r6, r0
 80119ac:	460c      	mov	r4, r1
 80119ae:	d507      	bpl.n	80119c0 <__smakebuf_r+0x1c>
 80119b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80119b4:	6023      	str	r3, [r4, #0]
 80119b6:	6123      	str	r3, [r4, #16]
 80119b8:	2301      	movs	r3, #1
 80119ba:	6163      	str	r3, [r4, #20]
 80119bc:	b003      	add	sp, #12
 80119be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80119c0:	ab01      	add	r3, sp, #4
 80119c2:	466a      	mov	r2, sp
 80119c4:	f7ff ffc8 	bl	8011958 <__swhatbuf_r>
 80119c8:	9f00      	ldr	r7, [sp, #0]
 80119ca:	4605      	mov	r5, r0
 80119cc:	4639      	mov	r1, r7
 80119ce:	4630      	mov	r0, r6
 80119d0:	f7fe ffe6 	bl	80109a0 <_malloc_r>
 80119d4:	b948      	cbnz	r0, 80119ea <__smakebuf_r+0x46>
 80119d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119da:	059a      	lsls	r2, r3, #22
 80119dc:	d4ee      	bmi.n	80119bc <__smakebuf_r+0x18>
 80119de:	f023 0303 	bic.w	r3, r3, #3
 80119e2:	f043 0302 	orr.w	r3, r3, #2
 80119e6:	81a3      	strh	r3, [r4, #12]
 80119e8:	e7e2      	b.n	80119b0 <__smakebuf_r+0xc>
 80119ea:	89a3      	ldrh	r3, [r4, #12]
 80119ec:	6020      	str	r0, [r4, #0]
 80119ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80119f2:	81a3      	strh	r3, [r4, #12]
 80119f4:	9b01      	ldr	r3, [sp, #4]
 80119f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80119fa:	b15b      	cbz	r3, 8011a14 <__smakebuf_r+0x70>
 80119fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a00:	4630      	mov	r0, r6
 8011a02:	f000 f83b 	bl	8011a7c <_isatty_r>
 8011a06:	b128      	cbz	r0, 8011a14 <__smakebuf_r+0x70>
 8011a08:	89a3      	ldrh	r3, [r4, #12]
 8011a0a:	f023 0303 	bic.w	r3, r3, #3
 8011a0e:	f043 0301 	orr.w	r3, r3, #1
 8011a12:	81a3      	strh	r3, [r4, #12]
 8011a14:	89a3      	ldrh	r3, [r4, #12]
 8011a16:	431d      	orrs	r5, r3
 8011a18:	81a5      	strh	r5, [r4, #12]
 8011a1a:	e7cf      	b.n	80119bc <__smakebuf_r+0x18>

08011a1c <_raise_r>:
 8011a1c:	291f      	cmp	r1, #31
 8011a1e:	b538      	push	{r3, r4, r5, lr}
 8011a20:	4605      	mov	r5, r0
 8011a22:	460c      	mov	r4, r1
 8011a24:	d904      	bls.n	8011a30 <_raise_r+0x14>
 8011a26:	2316      	movs	r3, #22
 8011a28:	6003      	str	r3, [r0, #0]
 8011a2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011a2e:	bd38      	pop	{r3, r4, r5, pc}
 8011a30:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011a32:	b112      	cbz	r2, 8011a3a <_raise_r+0x1e>
 8011a34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a38:	b94b      	cbnz	r3, 8011a4e <_raise_r+0x32>
 8011a3a:	4628      	mov	r0, r5
 8011a3c:	f000 f840 	bl	8011ac0 <_getpid_r>
 8011a40:	4622      	mov	r2, r4
 8011a42:	4601      	mov	r1, r0
 8011a44:	4628      	mov	r0, r5
 8011a46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a4a:	f000 b827 	b.w	8011a9c <_kill_r>
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d00a      	beq.n	8011a68 <_raise_r+0x4c>
 8011a52:	1c59      	adds	r1, r3, #1
 8011a54:	d103      	bne.n	8011a5e <_raise_r+0x42>
 8011a56:	2316      	movs	r3, #22
 8011a58:	6003      	str	r3, [r0, #0]
 8011a5a:	2001      	movs	r0, #1
 8011a5c:	e7e7      	b.n	8011a2e <_raise_r+0x12>
 8011a5e:	2100      	movs	r1, #0
 8011a60:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011a64:	4620      	mov	r0, r4
 8011a66:	4798      	blx	r3
 8011a68:	2000      	movs	r0, #0
 8011a6a:	e7e0      	b.n	8011a2e <_raise_r+0x12>

08011a6c <raise>:
 8011a6c:	4b02      	ldr	r3, [pc, #8]	@ (8011a78 <raise+0xc>)
 8011a6e:	4601      	mov	r1, r0
 8011a70:	6818      	ldr	r0, [r3, #0]
 8011a72:	f7ff bfd3 	b.w	8011a1c <_raise_r>
 8011a76:	bf00      	nop
 8011a78:	20000048 	.word	0x20000048

08011a7c <_isatty_r>:
 8011a7c:	b538      	push	{r3, r4, r5, lr}
 8011a7e:	4d06      	ldr	r5, [pc, #24]	@ (8011a98 <_isatty_r+0x1c>)
 8011a80:	2300      	movs	r3, #0
 8011a82:	4604      	mov	r4, r0
 8011a84:	4608      	mov	r0, r1
 8011a86:	602b      	str	r3, [r5, #0]
 8011a88:	f7f5 fa6c 	bl	8006f64 <_isatty>
 8011a8c:	1c43      	adds	r3, r0, #1
 8011a8e:	d102      	bne.n	8011a96 <_isatty_r+0x1a>
 8011a90:	682b      	ldr	r3, [r5, #0]
 8011a92:	b103      	cbz	r3, 8011a96 <_isatty_r+0x1a>
 8011a94:	6023      	str	r3, [r4, #0]
 8011a96:	bd38      	pop	{r3, r4, r5, pc}
 8011a98:	20005a98 	.word	0x20005a98

08011a9c <_kill_r>:
 8011a9c:	b538      	push	{r3, r4, r5, lr}
 8011a9e:	4d07      	ldr	r5, [pc, #28]	@ (8011abc <_kill_r+0x20>)
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	4608      	mov	r0, r1
 8011aa6:	4611      	mov	r1, r2
 8011aa8:	602b      	str	r3, [r5, #0]
 8011aaa:	f7f5 f9eb 	bl	8006e84 <_kill>
 8011aae:	1c43      	adds	r3, r0, #1
 8011ab0:	d102      	bne.n	8011ab8 <_kill_r+0x1c>
 8011ab2:	682b      	ldr	r3, [r5, #0]
 8011ab4:	b103      	cbz	r3, 8011ab8 <_kill_r+0x1c>
 8011ab6:	6023      	str	r3, [r4, #0]
 8011ab8:	bd38      	pop	{r3, r4, r5, pc}
 8011aba:	bf00      	nop
 8011abc:	20005a98 	.word	0x20005a98

08011ac0 <_getpid_r>:
 8011ac0:	f7f5 b9d8 	b.w	8006e74 <_getpid>

08011ac4 <_fstat_r>:
 8011ac4:	b538      	push	{r3, r4, r5, lr}
 8011ac6:	4d07      	ldr	r5, [pc, #28]	@ (8011ae4 <_fstat_r+0x20>)
 8011ac8:	2300      	movs	r3, #0
 8011aca:	4604      	mov	r4, r0
 8011acc:	4608      	mov	r0, r1
 8011ace:	4611      	mov	r1, r2
 8011ad0:	602b      	str	r3, [r5, #0]
 8011ad2:	f7f5 fa37 	bl	8006f44 <_fstat>
 8011ad6:	1c43      	adds	r3, r0, #1
 8011ad8:	d102      	bne.n	8011ae0 <_fstat_r+0x1c>
 8011ada:	682b      	ldr	r3, [r5, #0]
 8011adc:	b103      	cbz	r3, 8011ae0 <_fstat_r+0x1c>
 8011ade:	6023      	str	r3, [r4, #0]
 8011ae0:	bd38      	pop	{r3, r4, r5, pc}
 8011ae2:	bf00      	nop
 8011ae4:	20005a98 	.word	0x20005a98

08011ae8 <_init>:
 8011ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aea:	bf00      	nop
 8011aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aee:	bc08      	pop	{r3}
 8011af0:	469e      	mov	lr, r3
 8011af2:	4770      	bx	lr

08011af4 <_fini>:
 8011af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011af6:	bf00      	nop
 8011af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011afa:	bc08      	pop	{r3}
 8011afc:	469e      	mov	lr, r3
 8011afe:	4770      	bx	lr
