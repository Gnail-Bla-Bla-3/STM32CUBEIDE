
SentryCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011978  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  08011b08  08011b08  00012b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011fa8  08011fa8  00013250  2**0
                  CONTENTS
  4 .ARM          00000008  08011fa8  08011fa8  00012fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011fb0  08011fb0  00013250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011fb0  08011fb0  00012fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011fb4  08011fb4  00012fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000250  20000000  08011fb8  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00013250  2**0
                  CONTENTS
 10 .bss          000058ec  20000250  20000250  00013250  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005b3c  20005b3c  00013250  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00013250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002701d  00000000  00000000  00013280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000594f  00000000  00000000  0003a29d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001fe8  00000000  00000000  0003fbf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018e2  00000000  00000000  00041bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c57  00000000  00000000  000434ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027fd9  00000000  00000000  0006a111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1c51  00000000  00000000  000920ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00173d3b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e1c  00000000  00000000  00173d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  0017cb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000250 	.word	0x20000250
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011af0 	.word	0x08011af0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000254 	.word	0x20000254
 80001cc:	08011af0 	.word	0x08011af0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_frsub>:
 8000c1c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c20:	e002      	b.n	8000c28 <__addsf3>
 8000c22:	bf00      	nop

08000c24 <__aeabi_fsub>:
 8000c24:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c28 <__addsf3>:
 8000c28:	0042      	lsls	r2, r0, #1
 8000c2a:	bf1f      	itttt	ne
 8000c2c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c30:	ea92 0f03 	teqne	r2, r3
 8000c34:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c38:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c3c:	d06a      	beq.n	8000d14 <__addsf3+0xec>
 8000c3e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c42:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c46:	bfc1      	itttt	gt
 8000c48:	18d2      	addgt	r2, r2, r3
 8000c4a:	4041      	eorgt	r1, r0
 8000c4c:	4048      	eorgt	r0, r1
 8000c4e:	4041      	eorgt	r1, r0
 8000c50:	bfb8      	it	lt
 8000c52:	425b      	neglt	r3, r3
 8000c54:	2b19      	cmp	r3, #25
 8000c56:	bf88      	it	hi
 8000c58:	4770      	bxhi	lr
 8000c5a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c62:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c66:	bf18      	it	ne
 8000c68:	4240      	negne	r0, r0
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c6e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c72:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c76:	bf18      	it	ne
 8000c78:	4249      	negne	r1, r1
 8000c7a:	ea92 0f03 	teq	r2, r3
 8000c7e:	d03f      	beq.n	8000d00 <__addsf3+0xd8>
 8000c80:	f1a2 0201 	sub.w	r2, r2, #1
 8000c84:	fa41 fc03 	asr.w	ip, r1, r3
 8000c88:	eb10 000c 	adds.w	r0, r0, ip
 8000c8c:	f1c3 0320 	rsb	r3, r3, #32
 8000c90:	fa01 f103 	lsl.w	r1, r1, r3
 8000c94:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__addsf3+0x78>
 8000c9a:	4249      	negs	r1, r1
 8000c9c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ca0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ca4:	d313      	bcc.n	8000cce <__addsf3+0xa6>
 8000ca6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000caa:	d306      	bcc.n	8000cba <__addsf3+0x92>
 8000cac:	0840      	lsrs	r0, r0, #1
 8000cae:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cb2:	f102 0201 	add.w	r2, r2, #1
 8000cb6:	2afe      	cmp	r2, #254	@ 0xfe
 8000cb8:	d251      	bcs.n	8000d5e <__addsf3+0x136>
 8000cba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cbe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cc2:	bf08      	it	eq
 8000cc4:	f020 0001 	biceq.w	r0, r0, #1
 8000cc8:	ea40 0003 	orr.w	r0, r0, r3
 8000ccc:	4770      	bx	lr
 8000cce:	0049      	lsls	r1, r1, #1
 8000cd0:	eb40 0000 	adc.w	r0, r0, r0
 8000cd4:	3a01      	subs	r2, #1
 8000cd6:	bf28      	it	cs
 8000cd8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000cdc:	d2ed      	bcs.n	8000cba <__addsf3+0x92>
 8000cde:	fab0 fc80 	clz	ip, r0
 8000ce2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ce6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cea:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cee:	bfaa      	itet	ge
 8000cf0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cf4:	4252      	neglt	r2, r2
 8000cf6:	4318      	orrge	r0, r3
 8000cf8:	bfbc      	itt	lt
 8000cfa:	40d0      	lsrlt	r0, r2
 8000cfc:	4318      	orrlt	r0, r3
 8000cfe:	4770      	bx	lr
 8000d00:	f092 0f00 	teq	r2, #0
 8000d04:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d08:	bf06      	itte	eq
 8000d0a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d0e:	3201      	addeq	r2, #1
 8000d10:	3b01      	subne	r3, #1
 8000d12:	e7b5      	b.n	8000c80 <__addsf3+0x58>
 8000d14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d1c:	bf18      	it	ne
 8000d1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d22:	d021      	beq.n	8000d68 <__addsf3+0x140>
 8000d24:	ea92 0f03 	teq	r2, r3
 8000d28:	d004      	beq.n	8000d34 <__addsf3+0x10c>
 8000d2a:	f092 0f00 	teq	r2, #0
 8000d2e:	bf08      	it	eq
 8000d30:	4608      	moveq	r0, r1
 8000d32:	4770      	bx	lr
 8000d34:	ea90 0f01 	teq	r0, r1
 8000d38:	bf1c      	itt	ne
 8000d3a:	2000      	movne	r0, #0
 8000d3c:	4770      	bxne	lr
 8000d3e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d42:	d104      	bne.n	8000d4e <__addsf3+0x126>
 8000d44:	0040      	lsls	r0, r0, #1
 8000d46:	bf28      	it	cs
 8000d48:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d4c:	4770      	bx	lr
 8000d4e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d52:	bf3c      	itt	cc
 8000d54:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d58:	4770      	bxcc	lr
 8000d5a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d5e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d66:	4770      	bx	lr
 8000d68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d6c:	bf16      	itet	ne
 8000d6e:	4608      	movne	r0, r1
 8000d70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d74:	4601      	movne	r1, r0
 8000d76:	0242      	lsls	r2, r0, #9
 8000d78:	bf06      	itte	eq
 8000d7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d7e:	ea90 0f01 	teqeq	r0, r1
 8000d82:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_ui2f>:
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e004      	b.n	8000d98 <__aeabi_i2f+0x8>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_i2f>:
 8000d90:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d94:	bf48      	it	mi
 8000d96:	4240      	negmi	r0, r0
 8000d98:	ea5f 0c00 	movs.w	ip, r0
 8000d9c:	bf08      	it	eq
 8000d9e:	4770      	bxeq	lr
 8000da0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000da4:	4601      	mov	r1, r0
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	e01c      	b.n	8000de6 <__aeabi_l2f+0x2a>

08000dac <__aeabi_ul2f>:
 8000dac:	ea50 0201 	orrs.w	r2, r0, r1
 8000db0:	bf08      	it	eq
 8000db2:	4770      	bxeq	lr
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e00a      	b.n	8000dd0 <__aeabi_l2f+0x14>
 8000dba:	bf00      	nop

08000dbc <__aeabi_l2f>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000dc8:	d502      	bpl.n	8000dd0 <__aeabi_l2f+0x14>
 8000dca:	4240      	negs	r0, r0
 8000dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dd0:	ea5f 0c01 	movs.w	ip, r1
 8000dd4:	bf02      	ittt	eq
 8000dd6:	4684      	moveq	ip, r0
 8000dd8:	4601      	moveq	r1, r0
 8000dda:	2000      	moveq	r0, #0
 8000ddc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000de0:	bf08      	it	eq
 8000de2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000de6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dea:	fabc f28c 	clz	r2, ip
 8000dee:	3a08      	subs	r2, #8
 8000df0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000df4:	db10      	blt.n	8000e18 <__aeabi_l2f+0x5c>
 8000df6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dfa:	4463      	add	r3, ip
 8000dfc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e00:	f1c2 0220 	rsb	r2, r2, #32
 8000e04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e08:	fa20 f202 	lsr.w	r2, r0, r2
 8000e0c:	eb43 0002 	adc.w	r0, r3, r2
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f102 0220 	add.w	r2, r2, #32
 8000e1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e20:	f1c2 0220 	rsb	r2, r2, #32
 8000e24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e28:	fa21 f202 	lsr.w	r2, r1, r2
 8000e2c:	eb43 0002 	adc.w	r0, r3, r2
 8000e30:	bf08      	it	eq
 8000e32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_uldivmod>:
 8000e38:	b953      	cbnz	r3, 8000e50 <__aeabi_uldivmod+0x18>
 8000e3a:	b94a      	cbnz	r2, 8000e50 <__aeabi_uldivmod+0x18>
 8000e3c:	2900      	cmp	r1, #0
 8000e3e:	bf08      	it	eq
 8000e40:	2800      	cmpeq	r0, #0
 8000e42:	bf1c      	itt	ne
 8000e44:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000e48:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e4c:	f000 b96a 	b.w	8001124 <__aeabi_idiv0>
 8000e50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e58:	f000 f806 	bl	8000e68 <__udivmoddi4>
 8000e5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e64:	b004      	add	sp, #16
 8000e66:	4770      	bx	lr

08000e68 <__udivmoddi4>:
 8000e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e6c:	9d08      	ldr	r5, [sp, #32]
 8000e6e:	460c      	mov	r4, r1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d14e      	bne.n	8000f12 <__udivmoddi4+0xaa>
 8000e74:	4694      	mov	ip, r2
 8000e76:	458c      	cmp	ip, r1
 8000e78:	4686      	mov	lr, r0
 8000e7a:	fab2 f282 	clz	r2, r2
 8000e7e:	d962      	bls.n	8000f46 <__udivmoddi4+0xde>
 8000e80:	b14a      	cbz	r2, 8000e96 <__udivmoddi4+0x2e>
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	4091      	lsls	r1, r2
 8000e88:	fa20 f303 	lsr.w	r3, r0, r3
 8000e8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e90:	4319      	orrs	r1, r3
 8000e92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9a:	fa1f f68c 	uxth.w	r6, ip
 8000e9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ea2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ea6:	fb07 1114 	mls	r1, r7, r4, r1
 8000eaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eae:	fb04 f106 	mul.w	r1, r4, r6
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d90a      	bls.n	8000ecc <__udivmoddi4+0x64>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ebe:	f080 8112 	bcs.w	80010e6 <__udivmoddi4+0x27e>
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	f240 810f 	bls.w	80010e6 <__udivmoddi4+0x27e>
 8000ec8:	3c02      	subs	r4, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	1a59      	subs	r1, r3, r1
 8000ece:	fa1f f38e 	uxth.w	r3, lr
 8000ed2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed6:	fb07 1110 	mls	r1, r7, r0, r1
 8000eda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ede:	fb00 f606 	mul.w	r6, r0, r6
 8000ee2:	429e      	cmp	r6, r3
 8000ee4:	d90a      	bls.n	8000efc <__udivmoddi4+0x94>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000eee:	f080 80fc 	bcs.w	80010ea <__udivmoddi4+0x282>
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	f240 80f9 	bls.w	80010ea <__udivmoddi4+0x282>
 8000ef8:	4463      	add	r3, ip
 8000efa:	3802      	subs	r0, #2
 8000efc:	1b9b      	subs	r3, r3, r6
 8000efe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f02:	2100      	movs	r1, #0
 8000f04:	b11d      	cbz	r5, 8000f0e <__udivmoddi4+0xa6>
 8000f06:	40d3      	lsrs	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d905      	bls.n	8000f22 <__udivmoddi4+0xba>
 8000f16:	b10d      	cbz	r5, 8000f1c <__udivmoddi4+0xb4>
 8000f18:	e9c5 0100 	strd	r0, r1, [r5]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	e7f5      	b.n	8000f0e <__udivmoddi4+0xa6>
 8000f22:	fab3 f183 	clz	r1, r3
 8000f26:	2900      	cmp	r1, #0
 8000f28:	d146      	bne.n	8000fb8 <__udivmoddi4+0x150>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	d302      	bcc.n	8000f34 <__udivmoddi4+0xcc>
 8000f2e:	4290      	cmp	r0, r2
 8000f30:	f0c0 80f0 	bcc.w	8001114 <__udivmoddi4+0x2ac>
 8000f34:	1a86      	subs	r6, r0, r2
 8000f36:	eb64 0303 	sbc.w	r3, r4, r3
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	2d00      	cmp	r5, #0
 8000f3e:	d0e6      	beq.n	8000f0e <__udivmoddi4+0xa6>
 8000f40:	e9c5 6300 	strd	r6, r3, [r5]
 8000f44:	e7e3      	b.n	8000f0e <__udivmoddi4+0xa6>
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	f040 8090 	bne.w	800106c <__udivmoddi4+0x204>
 8000f4c:	eba1 040c 	sub.w	r4, r1, ip
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f62:	fb08 4416 	mls	r4, r8, r6, r4
 8000f66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6a:	fb07 f006 	mul.w	r0, r7, r6
 8000f6e:	4298      	cmp	r0, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x11c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000f7a:	d202      	bcs.n	8000f82 <__udivmoddi4+0x11a>
 8000f7c:	4298      	cmp	r0, r3
 8000f7e:	f200 80cd 	bhi.w	800111c <__udivmoddi4+0x2b4>
 8000f82:	4626      	mov	r6, r4
 8000f84:	1a1c      	subs	r4, r3, r0
 8000f86:	fa1f f38e 	uxth.w	r3, lr
 8000f8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000f92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f96:	fb00 f707 	mul.w	r7, r0, r7
 8000f9a:	429f      	cmp	r7, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x148>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000fa6:	d202      	bcs.n	8000fae <__udivmoddi4+0x146>
 8000fa8:	429f      	cmp	r7, r3
 8000faa:	f200 80b0 	bhi.w	800110e <__udivmoddi4+0x2a6>
 8000fae:	4620      	mov	r0, r4
 8000fb0:	1bdb      	subs	r3, r3, r7
 8000fb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fb6:	e7a5      	b.n	8000f04 <__udivmoddi4+0x9c>
 8000fb8:	f1c1 0620 	rsb	r6, r1, #32
 8000fbc:	408b      	lsls	r3, r1
 8000fbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000fc2:	431f      	orrs	r7, r3
 8000fc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000fcc:	ea43 030c 	orr.w	r3, r3, ip
 8000fd0:	40f4      	lsrs	r4, r6
 8000fd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000fd6:	0c38      	lsrs	r0, r7, #16
 8000fd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fdc:	fbb4 fef0 	udiv	lr, r4, r0
 8000fe0:	fa1f fc87 	uxth.w	ip, r7
 8000fe4:	fb00 441e 	mls	r4, r0, lr, r4
 8000fe8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fec:	fb0e f90c 	mul.w	r9, lr, ip
 8000ff0:	45a1      	cmp	r9, r4
 8000ff2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ff6:	d90a      	bls.n	800100e <__udivmoddi4+0x1a6>
 8000ff8:	193c      	adds	r4, r7, r4
 8000ffa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ffe:	f080 8084 	bcs.w	800110a <__udivmoddi4+0x2a2>
 8001002:	45a1      	cmp	r9, r4
 8001004:	f240 8081 	bls.w	800110a <__udivmoddi4+0x2a2>
 8001008:	f1ae 0e02 	sub.w	lr, lr, #2
 800100c:	443c      	add	r4, r7
 800100e:	eba4 0409 	sub.w	r4, r4, r9
 8001012:	fa1f f983 	uxth.w	r9, r3
 8001016:	fbb4 f3f0 	udiv	r3, r4, r0
 800101a:	fb00 4413 	mls	r4, r0, r3, r4
 800101e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001022:	fb03 fc0c 	mul.w	ip, r3, ip
 8001026:	45a4      	cmp	ip, r4
 8001028:	d907      	bls.n	800103a <__udivmoddi4+0x1d2>
 800102a:	193c      	adds	r4, r7, r4
 800102c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001030:	d267      	bcs.n	8001102 <__udivmoddi4+0x29a>
 8001032:	45a4      	cmp	ip, r4
 8001034:	d965      	bls.n	8001102 <__udivmoddi4+0x29a>
 8001036:	3b02      	subs	r3, #2
 8001038:	443c      	add	r4, r7
 800103a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800103e:	fba0 9302 	umull	r9, r3, r0, r2
 8001042:	eba4 040c 	sub.w	r4, r4, ip
 8001046:	429c      	cmp	r4, r3
 8001048:	46ce      	mov	lr, r9
 800104a:	469c      	mov	ip, r3
 800104c:	d351      	bcc.n	80010f2 <__udivmoddi4+0x28a>
 800104e:	d04e      	beq.n	80010ee <__udivmoddi4+0x286>
 8001050:	b155      	cbz	r5, 8001068 <__udivmoddi4+0x200>
 8001052:	ebb8 030e 	subs.w	r3, r8, lr
 8001056:	eb64 040c 	sbc.w	r4, r4, ip
 800105a:	fa04 f606 	lsl.w	r6, r4, r6
 800105e:	40cb      	lsrs	r3, r1
 8001060:	431e      	orrs	r6, r3
 8001062:	40cc      	lsrs	r4, r1
 8001064:	e9c5 6400 	strd	r6, r4, [r5]
 8001068:	2100      	movs	r1, #0
 800106a:	e750      	b.n	8000f0e <__udivmoddi4+0xa6>
 800106c:	f1c2 0320 	rsb	r3, r2, #32
 8001070:	fa20 f103 	lsr.w	r1, r0, r3
 8001074:	fa0c fc02 	lsl.w	ip, ip, r2
 8001078:	fa24 f303 	lsr.w	r3, r4, r3
 800107c:	4094      	lsls	r4, r2
 800107e:	430c      	orrs	r4, r1
 8001080:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001084:	fa00 fe02 	lsl.w	lr, r0, r2
 8001088:	fa1f f78c 	uxth.w	r7, ip
 800108c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001090:	fb08 3110 	mls	r1, r8, r0, r3
 8001094:	0c23      	lsrs	r3, r4, #16
 8001096:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800109a:	fb00 f107 	mul.w	r1, r0, r7
 800109e:	4299      	cmp	r1, r3
 80010a0:	d908      	bls.n	80010b4 <__udivmoddi4+0x24c>
 80010a2:	eb1c 0303 	adds.w	r3, ip, r3
 80010a6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80010aa:	d22c      	bcs.n	8001106 <__udivmoddi4+0x29e>
 80010ac:	4299      	cmp	r1, r3
 80010ae:	d92a      	bls.n	8001106 <__udivmoddi4+0x29e>
 80010b0:	3802      	subs	r0, #2
 80010b2:	4463      	add	r3, ip
 80010b4:	1a5b      	subs	r3, r3, r1
 80010b6:	b2a4      	uxth	r4, r4
 80010b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80010bc:	fb08 3311 	mls	r3, r8, r1, r3
 80010c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010c4:	fb01 f307 	mul.w	r3, r1, r7
 80010c8:	42a3      	cmp	r3, r4
 80010ca:	d908      	bls.n	80010de <__udivmoddi4+0x276>
 80010cc:	eb1c 0404 	adds.w	r4, ip, r4
 80010d0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80010d4:	d213      	bcs.n	80010fe <__udivmoddi4+0x296>
 80010d6:	42a3      	cmp	r3, r4
 80010d8:	d911      	bls.n	80010fe <__udivmoddi4+0x296>
 80010da:	3902      	subs	r1, #2
 80010dc:	4464      	add	r4, ip
 80010de:	1ae4      	subs	r4, r4, r3
 80010e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010e4:	e739      	b.n	8000f5a <__udivmoddi4+0xf2>
 80010e6:	4604      	mov	r4, r0
 80010e8:	e6f0      	b.n	8000ecc <__udivmoddi4+0x64>
 80010ea:	4608      	mov	r0, r1
 80010ec:	e706      	b.n	8000efc <__udivmoddi4+0x94>
 80010ee:	45c8      	cmp	r8, r9
 80010f0:	d2ae      	bcs.n	8001050 <__udivmoddi4+0x1e8>
 80010f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80010f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80010fa:	3801      	subs	r0, #1
 80010fc:	e7a8      	b.n	8001050 <__udivmoddi4+0x1e8>
 80010fe:	4631      	mov	r1, r6
 8001100:	e7ed      	b.n	80010de <__udivmoddi4+0x276>
 8001102:	4603      	mov	r3, r0
 8001104:	e799      	b.n	800103a <__udivmoddi4+0x1d2>
 8001106:	4630      	mov	r0, r6
 8001108:	e7d4      	b.n	80010b4 <__udivmoddi4+0x24c>
 800110a:	46d6      	mov	lr, sl
 800110c:	e77f      	b.n	800100e <__udivmoddi4+0x1a6>
 800110e:	4463      	add	r3, ip
 8001110:	3802      	subs	r0, #2
 8001112:	e74d      	b.n	8000fb0 <__udivmoddi4+0x148>
 8001114:	4606      	mov	r6, r0
 8001116:	4623      	mov	r3, r4
 8001118:	4608      	mov	r0, r1
 800111a:	e70f      	b.n	8000f3c <__udivmoddi4+0xd4>
 800111c:	3e02      	subs	r6, #2
 800111e:	4463      	add	r3, ip
 8001120:	e730      	b.n	8000f84 <__udivmoddi4+0x11c>
 8001122:	bf00      	nop

08001124 <__aeabi_idiv0>:
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8001132:	e003      	b.n	800113c <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8001134:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001138:	f000 f80a 	bl	8001150 <BMI088_delay_us>
    while(ms--)
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	80fa      	strh	r2, [r7, #6]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d1f6      	bne.n	8001134 <BMI088_delay_ms+0xc>
    }
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8001150:	b480      	push	{r7}
 8001152:	b089      	sub	sp, #36	@ 0x24
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <BMI088_delay_us+0x84>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8001174:	88fb      	ldrh	r3, [r7, #6]
 8001176:	22a8      	movs	r2, #168	@ 0xa8
 8001178:	fb02 f303 	mul.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 800117e:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <BMI088_delay_us+0x84>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8001184:	4b13      	ldr	r3, [pc, #76]	@ (80011d4 <BMI088_delay_us+0x84>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	429a      	cmp	r2, r3
 8001190:	d0f8      	beq.n	8001184 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	429a      	cmp	r2, r3
 8001198:	d206      	bcs.n	80011a8 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 800119a:	69fa      	ldr	r2, [r7, #28]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4413      	add	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
 80011a6:	e007      	b.n	80011b8 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	1ad2      	subs	r2, r2, r3
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	4413      	add	r3, r2
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4413      	add	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d200      	bcs.n	80011c6 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 80011c4:	e7de      	b.n	8001184 <BMI088_delay_us+0x34>
            {
                break;
 80011c6:	bf00      	nop
            }
        }
    }


}
 80011c8:	bf00      	nop
 80011ca:	3724      	adds	r7, #36	@ 0x24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <BMI088_ACCEL_NS_L+0x18>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <BMI088_ACCEL_NS_L+0x1c>)
 80011e2:	8811      	ldrh	r1, [r2, #0]
 80011e4:	2200      	movs	r2, #0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f007 fd9a 	bl	8008d20 <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004

080011f8 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <BMI088_ACCEL_NS_H+0x18>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <BMI088_ACCEL_NS_H+0x1c>)
 8001202:	8811      	ldrh	r1, [r2, #0]
 8001204:	2201      	movs	r2, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f007 fd8a 	bl	8008d20 <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000004 	.word	0x20000004

08001218 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <BMI088_GYRO_NS_L+0x18>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <BMI088_GYRO_NS_L+0x1c>)
 8001222:	8811      	ldrh	r1, [r2, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f007 fd7a 	bl	8008d20 <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000008 	.word	0x20000008
 8001234:	2000000c 	.word	0x2000000c

08001238 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 800123c:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <BMI088_GYRO_NS_H+0x18>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <BMI088_GYRO_NS_H+0x1c>)
 8001242:	8811      	ldrh	r1, [r2, #0]
 8001244:	2201      	movs	r2, #1
 8001246:	4618      	mov	r0, r3
 8001248:	f007 fd6a 	bl	8008d20 <HAL_GPIO_WritePin>
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000008 	.word	0x20000008
 8001254:	2000000c 	.word	0x2000000c

08001258 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af02      	add	r7, sp, #8
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8001262:	f107 020f 	add.w	r2, r7, #15
 8001266:	1df9      	adds	r1, r7, #7
 8001268:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2301      	movs	r3, #1
 8001270:	4803      	ldr	r0, [pc, #12]	@ (8001280 <BMI088_read_write_byte+0x28>)
 8001272:	f009 fab3 	bl	800a7dc <HAL_SPI_TransmitReceive>
    return rx_data;
 8001276:	7bfb      	ldrb	r3, [r7, #15]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000096c 	.word	0x2000096c

08001284 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001292:	f7ff ffa1 	bl	80011d8 <BMI088_ACCEL_NS_L>
 8001296:	2080      	movs	r0, #128	@ 0x80
 8001298:	f7ff ffde 	bl	8001258 <BMI088_read_write_byte>
 800129c:	2055      	movs	r0, #85	@ 0x55
 800129e:	f7ff ffdb 	bl	8001258 <BMI088_read_write_byte>
 80012a2:	2055      	movs	r0, #85	@ 0x55
 80012a4:	f7ff ffd8 	bl	8001258 <BMI088_read_write_byte>
 80012a8:	4603      	mov	r3, r0
 80012aa:	71bb      	strb	r3, [r7, #6]
 80012ac:	f7ff ffa4 	bl	80011f8 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80012b0:	2096      	movs	r0, #150	@ 0x96
 80012b2:	f7ff ff4d 	bl	8001150 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80012b6:	f7ff ff8f 	bl	80011d8 <BMI088_ACCEL_NS_L>
 80012ba:	2080      	movs	r0, #128	@ 0x80
 80012bc:	f7ff ffcc 	bl	8001258 <BMI088_read_write_byte>
 80012c0:	2055      	movs	r0, #85	@ 0x55
 80012c2:	f7ff ffc9 	bl	8001258 <BMI088_read_write_byte>
 80012c6:	2055      	movs	r0, #85	@ 0x55
 80012c8:	f7ff ffc6 	bl	8001258 <BMI088_read_write_byte>
 80012cc:	4603      	mov	r3, r0
 80012ce:	71bb      	strb	r3, [r7, #6]
 80012d0:	f7ff ff92 	bl	80011f8 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80012d4:	2096      	movs	r0, #150	@ 0x96
 80012d6:	f7ff ff3b 	bl	8001150 <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 80012da:	f7ff ff7d 	bl	80011d8 <BMI088_ACCEL_NS_L>
 80012de:	21b6      	movs	r1, #182	@ 0xb6
 80012e0:	207e      	movs	r0, #126	@ 0x7e
 80012e2:	f000 fa4d 	bl	8001780 <BMI088_write_single_reg>
 80012e6:	f7ff ff87 	bl	80011f8 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80012ea:	2050      	movs	r0, #80	@ 0x50
 80012ec:	f7ff ff1c 	bl	8001128 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80012f0:	f7ff ff72 	bl	80011d8 <BMI088_ACCEL_NS_L>
 80012f4:	2080      	movs	r0, #128	@ 0x80
 80012f6:	f7ff ffaf 	bl	8001258 <BMI088_read_write_byte>
 80012fa:	2055      	movs	r0, #85	@ 0x55
 80012fc:	f7ff ffac 	bl	8001258 <BMI088_read_write_byte>
 8001300:	2055      	movs	r0, #85	@ 0x55
 8001302:	f7ff ffa9 	bl	8001258 <BMI088_read_write_byte>
 8001306:	4603      	mov	r3, r0
 8001308:	71bb      	strb	r3, [r7, #6]
 800130a:	f7ff ff75 	bl	80011f8 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800130e:	2096      	movs	r0, #150	@ 0x96
 8001310:	f7ff ff1e 	bl	8001150 <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001314:	f7ff ff60 	bl	80011d8 <BMI088_ACCEL_NS_L>
 8001318:	2080      	movs	r0, #128	@ 0x80
 800131a:	f7ff ff9d 	bl	8001258 <BMI088_read_write_byte>
 800131e:	2055      	movs	r0, #85	@ 0x55
 8001320:	f7ff ff9a 	bl	8001258 <BMI088_read_write_byte>
 8001324:	2055      	movs	r0, #85	@ 0x55
 8001326:	f7ff ff97 	bl	8001258 <BMI088_read_write_byte>
 800132a:	4603      	mov	r3, r0
 800132c:	71bb      	strb	r3, [r7, #6]
 800132e:	f7ff ff63 	bl	80011f8 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001332:	2096      	movs	r0, #150	@ 0x96
 8001334:	f7ff ff0c 	bl	8001150 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 8001338:	79bb      	ldrb	r3, [r7, #6]
 800133a:	2b1e      	cmp	r3, #30
 800133c:	d001      	beq.n	8001342 <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 800133e:	23ff      	movs	r3, #255	@ 0xff
 8001340:	e052      	b.n	80013e8 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8001342:	2300      	movs	r3, #0
 8001344:	71fb      	strb	r3, [r7, #7]
 8001346:	e04b      	b.n	80013e0 <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 8001348:	f7ff ff46 	bl	80011d8 <BMI088_ACCEL_NS_L>
 800134c:	79fa      	ldrb	r2, [r7, #7]
 800134e:	4928      	ldr	r1, [pc, #160]	@ (80013f0 <BMI088_accel_init+0x16c>)
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	440b      	add	r3, r1
 8001358:	7818      	ldrb	r0, [r3, #0]
 800135a:	79fa      	ldrb	r2, [r7, #7]
 800135c:	4924      	ldr	r1, [pc, #144]	@ (80013f0 <BMI088_accel_init+0x16c>)
 800135e:	4613      	mov	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	4413      	add	r3, r2
 8001364:	440b      	add	r3, r1
 8001366:	3301      	adds	r3, #1
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	4619      	mov	r1, r3
 800136c:	f000 fa08 	bl	8001780 <BMI088_write_single_reg>
 8001370:	f7ff ff42 	bl	80011f8 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001374:	2096      	movs	r0, #150	@ 0x96
 8001376:	f7ff feeb 	bl	8001150 <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 800137a:	f7ff ff2d 	bl	80011d8 <BMI088_ACCEL_NS_L>
 800137e:	79fa      	ldrb	r2, [r7, #7]
 8001380:	491b      	ldr	r1, [pc, #108]	@ (80013f0 <BMI088_accel_init+0x16c>)
 8001382:	4613      	mov	r3, r2
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4413      	add	r3, r2
 8001388:	440b      	add	r3, r1
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001390:	b2db      	uxtb	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff ff60 	bl	8001258 <BMI088_read_write_byte>
 8001398:	2055      	movs	r0, #85	@ 0x55
 800139a:	f7ff ff5d 	bl	8001258 <BMI088_read_write_byte>
 800139e:	2055      	movs	r0, #85	@ 0x55
 80013a0:	f7ff ff5a 	bl	8001258 <BMI088_read_write_byte>
 80013a4:	4603      	mov	r3, r0
 80013a6:	71bb      	strb	r3, [r7, #6]
 80013a8:	f7ff ff26 	bl	80011f8 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80013ac:	2096      	movs	r0, #150	@ 0x96
 80013ae:	f7ff fecf 	bl	8001150 <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 80013b2:	79fa      	ldrb	r2, [r7, #7]
 80013b4:	490e      	ldr	r1, [pc, #56]	@ (80013f0 <BMI088_accel_init+0x16c>)
 80013b6:	4613      	mov	r3, r2
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	4413      	add	r3, r2
 80013bc:	440b      	add	r3, r1
 80013be:	3301      	adds	r3, #1
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	79ba      	ldrb	r2, [r7, #6]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d008      	beq.n	80013da <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 80013c8:	79fa      	ldrb	r2, [r7, #7]
 80013ca:	4909      	ldr	r1, [pc, #36]	@ (80013f0 <BMI088_accel_init+0x16c>)
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	3302      	adds	r3, #2
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	e006      	b.n	80013e8 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	3301      	adds	r3, #1
 80013de:	71fb      	strb	r3, [r7, #7]
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d9b0      	bls.n	8001348 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	20000018 	.word	0x20000018

080013f4 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001402:	f7ff ff09 	bl	8001218 <BMI088_GYRO_NS_L>
 8001406:	1dbb      	adds	r3, r7, #6
 8001408:	4619      	mov	r1, r3
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f9cc 	bl	80017a8 <BMI088_read_single_reg>
 8001410:	f7ff ff12 	bl	8001238 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001414:	2096      	movs	r0, #150	@ 0x96
 8001416:	f7ff fe9b 	bl	8001150 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800141a:	f7ff fefd 	bl	8001218 <BMI088_GYRO_NS_L>
 800141e:	1dbb      	adds	r3, r7, #6
 8001420:	4619      	mov	r1, r3
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f9c0 	bl	80017a8 <BMI088_read_single_reg>
 8001428:	f7ff ff06 	bl	8001238 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800142c:	2096      	movs	r0, #150	@ 0x96
 800142e:	f7ff fe8f 	bl	8001150 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 8001432:	f7ff fef1 	bl	8001218 <BMI088_GYRO_NS_L>
 8001436:	21b6      	movs	r1, #182	@ 0xb6
 8001438:	2014      	movs	r0, #20
 800143a:	f000 f9a1 	bl	8001780 <BMI088_write_single_reg>
 800143e:	f7ff fefb 	bl	8001238 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8001442:	2050      	movs	r0, #80	@ 0x50
 8001444:	f7ff fe70 	bl	8001128 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001448:	f7ff fee6 	bl	8001218 <BMI088_GYRO_NS_L>
 800144c:	1dbb      	adds	r3, r7, #6
 800144e:	4619      	mov	r1, r3
 8001450:	2000      	movs	r0, #0
 8001452:	f000 f9a9 	bl	80017a8 <BMI088_read_single_reg>
 8001456:	f7ff feef 	bl	8001238 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800145a:	2096      	movs	r0, #150	@ 0x96
 800145c:	f7ff fe78 	bl	8001150 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8001460:	f7ff feda 	bl	8001218 <BMI088_GYRO_NS_L>
 8001464:	1dbb      	adds	r3, r7, #6
 8001466:	4619      	mov	r1, r3
 8001468:	2000      	movs	r0, #0
 800146a:	f000 f99d 	bl	80017a8 <BMI088_read_single_reg>
 800146e:	f7ff fee3 	bl	8001238 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001472:	2096      	movs	r0, #150	@ 0x96
 8001474:	f7ff fe6c 	bl	8001150 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8001478:	79bb      	ldrb	r3, [r7, #6]
 800147a:	2b0f      	cmp	r3, #15
 800147c:	d001      	beq.n	8001482 <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 800147e:	23ff      	movs	r3, #255	@ 0xff
 8001480:	e049      	b.n	8001516 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001482:	2300      	movs	r3, #0
 8001484:	71fb      	strb	r3, [r7, #7]
 8001486:	e042      	b.n	800150e <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8001488:	f7ff fec6 	bl	8001218 <BMI088_GYRO_NS_L>
 800148c:	79fa      	ldrb	r2, [r7, #7]
 800148e:	4924      	ldr	r1, [pc, #144]	@ (8001520 <BMI088_gyro_init+0x12c>)
 8001490:	4613      	mov	r3, r2
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	4413      	add	r3, r2
 8001496:	440b      	add	r3, r1
 8001498:	7818      	ldrb	r0, [r3, #0]
 800149a:	79fa      	ldrb	r2, [r7, #7]
 800149c:	4920      	ldr	r1, [pc, #128]	@ (8001520 <BMI088_gyro_init+0x12c>)
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	3301      	adds	r3, #1
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4619      	mov	r1, r3
 80014ac:	f000 f968 	bl	8001780 <BMI088_write_single_reg>
 80014b0:	f7ff fec2 	bl	8001238 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80014b4:	2096      	movs	r0, #150	@ 0x96
 80014b6:	f7ff fe4b 	bl	8001150 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 80014ba:	f7ff fead 	bl	8001218 <BMI088_GYRO_NS_L>
 80014be:	79fa      	ldrb	r2, [r7, #7]
 80014c0:	4917      	ldr	r1, [pc, #92]	@ (8001520 <BMI088_gyro_init+0x12c>)
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	440b      	add	r3, r1
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	1dba      	adds	r2, r7, #6
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 f969 	bl	80017a8 <BMI088_read_single_reg>
 80014d6:	f7ff feaf 	bl	8001238 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80014da:	2096      	movs	r0, #150	@ 0x96
 80014dc:	f7ff fe38 	bl	8001150 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 80014e0:	79fa      	ldrb	r2, [r7, #7]
 80014e2:	490f      	ldr	r1, [pc, #60]	@ (8001520 <BMI088_gyro_init+0x12c>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	440b      	add	r3, r1
 80014ec:	3301      	adds	r3, #1
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	79bb      	ldrb	r3, [r7, #6]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d008      	beq.n	8001508 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 80014f6:	79fa      	ldrb	r2, [r7, #7]
 80014f8:	4909      	ldr	r1, [pc, #36]	@ (8001520 <BMI088_gyro_init+0x12c>)
 80014fa:	4613      	mov	r3, r2
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	4413      	add	r3, r2
 8001500:	440b      	add	r3, r1
 8001502:	3302      	adds	r3, #2
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	e006      	b.n	8001516 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	3301      	adds	r3, #1
 800150c:	71fb      	strb	r3, [r7, #7]
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	2b05      	cmp	r3, #5
 8001512:	d9b9      	bls.n	8001488 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000002c 	.word	0x2000002c

08001524 <IMU_get_gyro>:

float IMU_get_gyro(axis_t axis) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	BMI088_read(gyro, accel, &temp);
 800152e:	4a10      	ldr	r2, [pc, #64]	@ (8001570 <IMU_get_gyro+0x4c>)
 8001530:	4910      	ldr	r1, [pc, #64]	@ (8001574 <IMU_get_gyro+0x50>)
 8001532:	4811      	ldr	r0, [pc, #68]	@ (8001578 <IMU_get_gyro+0x54>)
 8001534:	f000 f836 	bl	80015a4 <BMI088_read>
	if(axis == x){
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d102      	bne.n	8001544 <IMU_get_gyro+0x20>
		return gyro[0];
 800153e:	4b0e      	ldr	r3, [pc, #56]	@ (8001578 <IMU_get_gyro+0x54>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	e00d      	b.n	8001560 <IMU_get_gyro+0x3c>
	} else if (axis == y) {
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d102      	bne.n	8001550 <IMU_get_gyro+0x2c>
		return gyro[1];
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <IMU_get_gyro+0x54>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	e007      	b.n	8001560 <IMU_get_gyro+0x3c>
	} else if (axis == z) {
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	2b02      	cmp	r3, #2
 8001554:	d102      	bne.n	800155c <IMU_get_gyro+0x38>
		return gyro[2];
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <IMU_get_gyro+0x54>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	e001      	b.n	8001560 <IMU_get_gyro+0x3c>
	} else {
		return 0;
 800155c:	f04f 0300 	mov.w	r3, #0
	}
}
 8001560:	ee07 3a90 	vmov	s15, r3
 8001564:	eeb0 0a67 	vmov.f32	s0, s15
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000284 	.word	0x20000284
 8001574:	20000278 	.word	0x20000278
 8001578:	2000026c 	.word	0x2000026c

0800157c <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8001580:	4a05      	ldr	r2, [pc, #20]	@ (8001598 <IMU_get_temp+0x1c>)
 8001582:	4906      	ldr	r1, [pc, #24]	@ (800159c <IMU_get_temp+0x20>)
 8001584:	4806      	ldr	r0, [pc, #24]	@ (80015a0 <IMU_get_temp+0x24>)
 8001586:	f000 f80d 	bl	80015a4 <BMI088_read>
	return temp;
 800158a:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <IMU_get_temp+0x1c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	ee07 3a90 	vmov	s15, r3
}
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000284 	.word	0x20000284
 800159c:	20000278 	.word	0x20000278
 80015a0:	2000026c 	.word	0x2000026c

080015a4 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 80015b0:	4a70      	ldr	r2, [pc, #448]	@ (8001774 <BMI088_read+0x1d0>)
 80015b2:	f107 0314 	add.w	r3, r7, #20
 80015b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ba:	6018      	str	r0, [r3, #0]
 80015bc:	3304      	adds	r3, #4
 80015be:	8019      	strh	r1, [r3, #0]
 80015c0:	3302      	adds	r3, #2
 80015c2:	0c0a      	lsrs	r2, r1, #16
 80015c4:	701a      	strb	r2, [r3, #0]
 80015c6:	2300      	movs	r3, #0
 80015c8:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 80015ca:	f7ff fe05 	bl	80011d8 <BMI088_ACCEL_NS_L>
 80015ce:	2092      	movs	r0, #146	@ 0x92
 80015d0:	f7ff fe42 	bl	8001258 <BMI088_read_write_byte>
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2206      	movs	r2, #6
 80015da:	4619      	mov	r1, r3
 80015dc:	2012      	movs	r0, #18
 80015de:	f000 f8fb 	bl	80017d8 <BMI088_read_muli_reg>
 80015e2:	f7ff fe09 	bl	80011f8 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80015e6:	7d7b      	ldrb	r3, [r7, #21]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	b21a      	sxth	r2, r3
 80015ec:	7d3b      	ldrb	r3, [r7, #20]
 80015ee:	b21b      	sxth	r3, r3
 80015f0:	4313      	orrs	r3, r2
 80015f2:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80015f4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015f8:	ee07 3a90 	vmov	s15, r3
 80015fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001600:	4b5d      	ldr	r3, [pc, #372]	@ (8001778 <BMI088_read+0x1d4>)
 8001602:	edd3 7a00 	vldr	s15, [r3]
 8001606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21a      	sxth	r2, r3
 8001616:	7dbb      	ldrb	r3, [r7, #22]
 8001618:	b21b      	sxth	r3, r3
 800161a:	4313      	orrs	r3, r2
 800161c:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800161e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001622:	ee07 3a90 	vmov	s15, r3
 8001626:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800162a:	4b53      	ldr	r3, [pc, #332]	@ (8001778 <BMI088_read+0x1d4>)
 800162c:	edd3 7a00 	vldr	s15, [r3]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	3304      	adds	r3, #4
 8001634:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001638:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800163c:	7e7b      	ldrb	r3, [r7, #25]
 800163e:	021b      	lsls	r3, r3, #8
 8001640:	b21a      	sxth	r2, r3
 8001642:	7e3b      	ldrb	r3, [r7, #24]
 8001644:	b21b      	sxth	r3, r3
 8001646:	4313      	orrs	r3, r2
 8001648:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800164a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800164e:	ee07 3a90 	vmov	s15, r3
 8001652:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001656:	4b48      	ldr	r3, [pc, #288]	@ (8001778 <BMI088_read+0x1d4>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	3308      	adds	r3, #8
 8001660:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001664:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8001668:	f7ff fdd6 	bl	8001218 <BMI088_GYRO_NS_L>
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2208      	movs	r2, #8
 8001672:	4619      	mov	r1, r3
 8001674:	2000      	movs	r0, #0
 8001676:	f000 f8af 	bl	80017d8 <BMI088_read_muli_reg>
 800167a:	f7ff fddd 	bl	8001238 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 800167e:	7d3b      	ldrb	r3, [r7, #20]
 8001680:	2b0f      	cmp	r3, #15
 8001682:	d140      	bne.n	8001706 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001684:	7dfb      	ldrb	r3, [r7, #23]
 8001686:	021b      	lsls	r3, r3, #8
 8001688:	b21a      	sxth	r2, r3
 800168a:	7dbb      	ldrb	r3, [r7, #22]
 800168c:	b21b      	sxth	r3, r3
 800168e:	4313      	orrs	r3, r2
 8001690:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001692:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <BMI088_read+0x1d8>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80016ae:	7e7b      	ldrb	r3, [r7, #25]
 80016b0:	021b      	lsls	r3, r3, #8
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	7e3b      	ldrb	r3, [r7, #24]
 80016b6:	b21b      	sxth	r3, r3
 80016b8:	4313      	orrs	r3, r2
 80016ba:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80016bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016c8:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <BMI088_read+0x1d8>)
 80016ca:	edd3 7a00 	vldr	s15, [r3]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	3304      	adds	r3, #4
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d6:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80016da:	7efb      	ldrb	r3, [r7, #27]
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	b21a      	sxth	r2, r3
 80016e0:	7ebb      	ldrb	r3, [r7, #26]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	4313      	orrs	r3, r2
 80016e6:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80016e8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80016ec:	ee07 3a90 	vmov	s15, r3
 80016f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016f4:	4b21      	ldr	r3, [pc, #132]	@ (800177c <BMI088_read+0x1d8>)
 80016f6:	edd3 7a00 	vldr	s15, [r3]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	3308      	adds	r3, #8
 80016fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001702:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001706:	f7ff fd67 	bl	80011d8 <BMI088_ACCEL_NS_L>
 800170a:	20a2      	movs	r0, #162	@ 0xa2
 800170c:	f7ff fda4 	bl	8001258 <BMI088_read_write_byte>
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	2202      	movs	r2, #2
 8001716:	4619      	mov	r1, r3
 8001718:	2022      	movs	r0, #34	@ 0x22
 800171a:	f000 f85d 	bl	80017d8 <BMI088_read_muli_reg>
 800171e:	f7ff fd6b 	bl	80011f8 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8001722:	7d3b      	ldrb	r3, [r7, #20]
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	b21a      	sxth	r2, r3
 8001728:	7d7b      	ldrb	r3, [r7, #21]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	b2db      	uxtb	r3, r3
 800172e:	b21b      	sxth	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8001734:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800173c:	db04      	blt.n	8001748 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 800173e:	8bfb      	ldrh	r3, [r7, #30]
 8001740:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001744:	b29b      	uxth	r3, r3
 8001746:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8001748:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001754:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8001758:	ee67 7a87 	vmul.f32	s15, s15, s14
 800175c:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8001760:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edc3 7a00 	vstr	s15, [r3]
}
 800176a:	bf00      	nop
 800176c:	3720      	adds	r7, #32
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	08011b08 	.word	0x08011b08
 8001778:	20000010 	.word	0x20000010
 800177c:	20000014 	.word	0x20000014

08001780 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	460a      	mov	r2, r1
 800178a:	71fb      	strb	r3, [r7, #7]
 800178c:	4613      	mov	r3, r2
 800178e:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fd60 	bl	8001258 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 8001798:	79bb      	ldrb	r3, [r7, #6]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fd5c 	bl	8001258 <BMI088_read_write_byte>
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fd4b 	bl	8001258 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 80017c2:	2055      	movs	r0, #85	@ 0x55
 80017c4:	f7ff fd48 	bl	8001258 <BMI088_read_write_byte>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	701a      	strb	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	71fb      	strb	r3, [r7, #7]
 80017e4:	4613      	mov	r3, r2
 80017e6:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff fd31 	bl	8001258 <BMI088_read_write_byte>

    while (len != 0)
 80017f6:	e00c      	b.n	8001812 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 80017f8:	2055      	movs	r0, #85	@ 0x55
 80017fa:	f7ff fd2d 	bl	8001258 <BMI088_read_write_byte>
 80017fe:	4603      	mov	r3, r0
 8001800:	461a      	mov	r2, r3
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	701a      	strb	r2, [r3, #0]
        buf++;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	3301      	adds	r3, #1
 800180a:	603b      	str	r3, [r7, #0]
        len--;
 800180c:	79bb      	ldrb	r3, [r7, #6]
 800180e:	3b01      	subs	r3, #1
 8001810:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8001812:	79bb      	ldrb	r3, [r7, #6]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d1ef      	bne.n	80017f8 <BMI088_read_muli_reg+0x20>
    }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_CAN_RxFifo0MsgPendingCallback>:

extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;
extern game_status_t game_status;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b08e      	sub	sp, #56	@ 0x38
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	f107 0218 	add.w	r2, r7, #24
 8001834:	2100      	movs	r1, #0
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f006 f84a 	bl	80078d0 <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 800183c:	69bb      	ldr	r3, [r7, #24]
 800183e:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8001842:	d817      	bhi.n	8001874 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
 8001844:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001848:	f240 80e2 	bls.w	8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 800184c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8001850:	2b05      	cmp	r3, #5
 8001852:	f200 80dd 	bhi.w	8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
 8001856:	a201      	add	r2, pc, #4	@ (adr r2, 800185c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185c:	0800196b 	.word	0x0800196b
 8001860:	0800197d 	.word	0x0800197d
 8001864:	08001a11 	.word	0x08001a11
 8001868:	08001a11 	.word	0x08001a11
 800186c:	0800198f 	.word	0x0800198f
 8001870:	08001a09 	.word	0x08001a09
 8001874:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8001878:	2b0a      	cmp	r3, #10
 800187a:	f200 80c9 	bhi.w	8001a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3b01      	subs	r3, #1
 8001884:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
            if (hcan == &hcan1) {
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a65      	ldr	r2, [pc, #404]	@ (8001a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d131      	bne.n	80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 8001890:	7c3b      	ldrb	r3, [r7, #16]
 8001892:	021b      	lsls	r3, r3, #8
 8001894:	b21a      	sxth	r2, r3
 8001896:	7c7b      	ldrb	r3, [r7, #17]
 8001898:	b21b      	sxth	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b21a      	sxth	r2, r3
 800189e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80018a2:	b291      	uxth	r1, r2
 80018a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80018a6:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80018aa:	7cbb      	ldrb	r3, [r7, #18]
 80018ac:	021b      	lsls	r3, r3, #8
 80018ae:	b219      	sxth	r1, r3
 80018b0:	7cfb      	ldrb	r3, [r7, #19]
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80018b8:	430a      	orrs	r2, r1
 80018ba:	b211      	sxth	r1, r2
 80018bc:	4a59      	ldr	r2, [pc, #356]	@ (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4413      	add	r3, r2
 80018c2:	460a      	mov	r2, r1
 80018c4:	805a      	strh	r2, [r3, #2]
 80018c6:	7d3b      	ldrb	r3, [r7, #20]
 80018c8:	021b      	lsls	r3, r3, #8
 80018ca:	b219      	sxth	r1, r3
 80018cc:	7d7b      	ldrb	r3, [r7, #21]
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80018d4:	430a      	orrs	r2, r1
 80018d6:	b211      	sxth	r1, r2
 80018d8:	4a52      	ldr	r2, [pc, #328]	@ (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80018da:	00db      	lsls	r3, r3, #3
 80018dc:	4413      	add	r3, r2
 80018de:	460a      	mov	r2, r1
 80018e0:	809a      	strh	r2, [r3, #4]
 80018e2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80018e6:	7db9      	ldrb	r1, [r7, #22]
 80018e8:	4a4e      	ldr	r2, [pc, #312]	@ (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	4413      	add	r3, r2
 80018ee:	460a      	mov	r2, r1
 80018f0:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 80018f2:	e08f      	b.n	8001a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
            } else if (hcan == &hcan2) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	f040 808b 	bne.w	8001a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 80018fe:	7c3b      	ldrb	r3, [r7, #16]
 8001900:	021b      	lsls	r3, r3, #8
 8001902:	b21a      	sxth	r2, r3
 8001904:	7c7b      	ldrb	r3, [r7, #17]
 8001906:	b21b      	sxth	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b21a      	sxth	r2, r3
 800190c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001910:	b291      	uxth	r1, r2
 8001912:	4a44      	ldr	r2, [pc, #272]	@ (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 8001914:	330b      	adds	r3, #11
 8001916:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 800191a:	7cbb      	ldrb	r3, [r7, #18]
 800191c:	021b      	lsls	r3, r3, #8
 800191e:	b219      	sxth	r1, r3
 8001920:	7cfb      	ldrb	r3, [r7, #19]
 8001922:	b21a      	sxth	r2, r3
 8001924:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001928:	430a      	orrs	r2, r1
 800192a:	b211      	sxth	r1, r2
 800192c:	4a3d      	ldr	r2, [pc, #244]	@ (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800192e:	330b      	adds	r3, #11
 8001930:	00db      	lsls	r3, r3, #3
 8001932:	4413      	add	r3, r2
 8001934:	460a      	mov	r2, r1
 8001936:	805a      	strh	r2, [r3, #2]
 8001938:	7d3b      	ldrb	r3, [r7, #20]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b219      	sxth	r1, r3
 800193e:	7d7b      	ldrb	r3, [r7, #21]
 8001940:	b21a      	sxth	r2, r3
 8001942:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001946:	430a      	orrs	r2, r1
 8001948:	b211      	sxth	r1, r2
 800194a:	4a36      	ldr	r2, [pc, #216]	@ (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800194c:	330b      	adds	r3, #11
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	460a      	mov	r2, r1
 8001954:	809a      	strh	r2, [r3, #4]
 8001956:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800195a:	7db9      	ldrb	r1, [r7, #22]
 800195c:	4a31      	ldr	r2, [pc, #196]	@ (8001a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 800195e:	330b      	adds	r3, #11
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4413      	add	r3, r2
 8001964:	460a      	mov	r2, r1
 8001966:	719a      	strb	r2, [r3, #6]
            break;
 8001968:	e054      	b.n	8001a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 800196a:	4b30      	ldr	r3, [pc, #192]	@ (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 800196c:	461a      	mov	r2, r3
 800196e:	f107 0310 	add.w	r3, r7, #16
 8001972:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001976:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 800197a:	e04c      	b.n	8001a16 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 800197c:	4b2b      	ldr	r3, [pc, #172]	@ (8001a2c <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 800197e:	3308      	adds	r3, #8
 8001980:	f107 0210 	add.w	r2, r7, #16
 8001984:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001988:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 800198c:	e043      	b.n	8001a16 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
        case CAN_STATUS_2_ID: {
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }
        case CAN_GAME_STATUS_ID: {
            uint8_t game_progress_temp = 0;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
            uint8_t game_progress = 0;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            memcpy(&game_progress_temp, &rx_data, 1);
 8001998:	7c3b      	ldrb	r3, [r7, #16]
 800199a:	73fb      	strb	r3, [r7, #15]
            if(game_progress_temp > 127){
 800199c:	7bfb      	ldrb	r3, [r7, #15]
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	da08      	bge.n	80019b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x192>
                game_progress+=8;
 80019a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019a8:	3308      	adds	r3, #8
 80019aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                game_progress_temp-=128;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
 80019b0:	3b80      	subs	r3, #128	@ 0x80
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	73fb      	strb	r3, [r7, #15]
            }
            if(game_progress_temp > 63){
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	2b3f      	cmp	r3, #63	@ 0x3f
 80019ba:	d908      	bls.n	80019ce <HAL_CAN_RxFifo0MsgPendingCallback+0x1aa>
                game_progress+=4;
 80019bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019c0:	3304      	adds	r3, #4
 80019c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                game_progress_temp-=64;
 80019c6:	7bfb      	ldrb	r3, [r7, #15]
 80019c8:	3b40      	subs	r3, #64	@ 0x40
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	73fb      	strb	r3, [r7, #15]
            }
            if(game_progress_temp > 31){
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	2b1f      	cmp	r3, #31
 80019d2:	d908      	bls.n	80019e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c2>
                game_progress+=2;
 80019d4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019d8:	3302      	adds	r3, #2
 80019da:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                game_progress_temp-=32;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	3b20      	subs	r3, #32
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	73fb      	strb	r3, [r7, #15]
            }
            if(game_progress_temp > 15){
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	2b0f      	cmp	r3, #15
 80019ea:	d908      	bls.n	80019fe <HAL_CAN_RxFifo0MsgPendingCallback+0x1da>
                game_progress+=1;
 80019ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80019f0:	3301      	adds	r3, #1
 80019f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                game_progress_temp-=16;
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3b10      	subs	r3, #16
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	73fb      	strb	r3, [r7, #15]
            }
            game_status.game_progress = game_progress;
 80019fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001a30 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 8001a00:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001a04:	7053      	strb	r3, [r2, #1]
            break;
 8001a06:	e006      	b.n	8001a16 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
        }
        case CAN_COLOUR_TRANSMIT_ID: {
        	memcpy(&robot_status.robot_id, &rx_data, 1);
 8001a08:	7c3a      	ldrb	r2, [r7, #16]
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a34 <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8001a0c:	701a      	strb	r2, [r3, #0]
        	break;
 8001a0e:	e002      	b.n	8001a16 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
        }

        default: {
            break;
 8001a10:	bf00      	nop
 8001a12:	e000      	b.n	8001a16 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f2>
            break;
 8001a14:	bf00      	nop
        }
    }
}
 8001a16:	bf00      	nop
 8001a18:	3738      	adds	r7, #56	@ 0x38
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200008c8 	.word	0x200008c8
 8001a24:	200002d8 	.word	0x200002d8
 8001a28:	200008f0 	.word	0x200008f0
 8001a2c:	20000708 	.word	0x20000708
 8001a30:	200006e8 	.word	0x200006e8
 8001a34:	200006f8 	.word	0x200006f8

08001a38 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001a38:	b590      	push	{r4, r7, lr}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	4604      	mov	r4, r0
 8001a40:	4608      	mov	r0, r1
 8001a42:	4611      	mov	r1, r2
 8001a44:	461a      	mov	r2, r3
 8001a46:	4623      	mov	r3, r4
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	80bb      	strh	r3, [r7, #4]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	807b      	strh	r3, [r7, #2]
 8001a52:	4613      	mov	r3, r2
 8001a54:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8001a56:	88bb      	ldrh	r3, [r7, #4]
 8001a58:	4a27      	ldr	r2, [pc, #156]	@ (8001af8 <CAN_DriveMotor+0xc0>)
 8001a5a:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 8001a5c:	4b26      	ldr	r3, [pc, #152]	@ (8001af8 <CAN_DriveMotor+0xc0>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8001a62:	4b25      	ldr	r3, [pc, #148]	@ (8001af8 <CAN_DriveMotor+0xc0>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001a68:	4b23      	ldr	r3, [pc, #140]	@ (8001af8 <CAN_DriveMotor+0xc0>)
 8001a6a:	2208      	movs	r2, #8
 8001a6c:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8001a6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a72:	121b      	asrs	r3, r3, #8
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001a7a:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001a82:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8001a84:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a88:	121b      	asrs	r3, r3, #8
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001a90:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8001a92:	883b      	ldrh	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4b19      	ldr	r3, [pc, #100]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001a98:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 8001a9a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a9e:	121b      	asrs	r3, r3, #8
 8001aa0:	b21b      	sxth	r3, r3
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001aa6:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8001aa8:	8c3b      	ldrh	r3, [r7, #32]
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001aae:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8001ab0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001ab4:	121b      	asrs	r3, r3, #8
 8001ab6:	b21b      	sxth	r3, r3
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001abc:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8001abe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001ac4:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d107      	bne.n	8001adc <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001ad2:	4909      	ldr	r1, [pc, #36]	@ (8001af8 <CAN_DriveMotor+0xc0>)
 8001ad4:	480a      	ldr	r0, [pc, #40]	@ (8001b00 <CAN_DriveMotor+0xc8>)
 8001ad6:	f005 fe2b 	bl	8007730 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 8001ada:	e009      	b.n	8001af0 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d106      	bne.n	8001af0 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <CAN_DriveMotor+0xc4>)
 8001ae8:	4903      	ldr	r1, [pc, #12]	@ (8001af8 <CAN_DriveMotor+0xc0>)
 8001aea:	4806      	ldr	r0, [pc, #24]	@ (8001b04 <CAN_DriveMotor+0xcc>)
 8001aec:	f005 fe20 	bl	8007730 <HAL_CAN_AddTxMessage>
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd90      	pop	{r4, r7, pc}
 8001af8:	20000288 	.word	0x20000288
 8001afc:	200002a0 	.word	0x200002a0
 8001b00:	200008c8 	.word	0x200008c8
 8001b04:	200008f0 	.word	0x200008f0

08001b08 <CAN_defineMotor>:

void CAN_defineMotor(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	71fb      	strb	r3, [r7, #7]
 8001b12:	460b      	mov	r3, r1
 8001b14:	71bb      	strb	r3, [r7, #6]
 8001b16:	4613      	mov	r3, r2
 8001b18:	717b      	strb	r3, [r7, #5]
	switch(motorType) {
 8001b1a:	79bb      	ldrb	r3, [r7, #6]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	dc02      	bgt.n	8001b26 <CAN_defineMotor+0x1e>
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	dc03      	bgt.n	8001b2c <CAN_defineMotor+0x24>
 8001b24:	e082      	b.n	8001c2c <CAN_defineMotor+0x124>
 8001b26:	2b03      	cmp	r3, #3
 8001b28:	d03a      	beq.n	8001ba0 <CAN_defineMotor+0x98>
 8001b2a:	e07f      	b.n	8001c2c <CAN_defineMotor+0x124>
		case (1) :
		case (2) : {
			switch(motorID) {
 8001b2c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	dc02      	bgt.n	8001b3a <CAN_defineMotor+0x32>
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	dc04      	bgt.n	8001b42 <CAN_defineMotor+0x3a>
 8001b38:	e02a      	b.n	8001b90 <CAN_defineMotor+0x88>
 8001b3a:	3b05      	subs	r3, #5
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	d827      	bhi.n	8001b90 <CAN_defineMotor+0x88>
 8001b40:	e012      	b.n	8001b68 <CAN_defineMotor+0x60>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group1[motorID - 1], motorType);
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	1e5a      	subs	r2, r3, #1
 8001b46:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b4a:	1e59      	subs	r1, r3, #1
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	4413      	add	r3, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	4a39      	ldr	r2, [pc, #228]	@ (8001c40 <CAN_defineMotor+0x138>)
 8001b5a:	4413      	add	r3, r2
 8001b5c:	79ba      	ldrb	r2, [r7, #6]
 8001b5e:	4611      	mov	r1, r2
 8001b60:	4618      	mov	r0, r3
 8001b62:	f000 f875 	bl	8001c50 <CAN_setMotorDefinition>
					break;
 8001b66:	e01a      	b.n	8001b9e <CAN_defineMotor+0x96>
				}
				case (5):
				case (6):
				case (7):
				case (8): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	1e5a      	subs	r2, r3, #1
 8001b6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b70:	1e59      	subs	r1, r3, #1
 8001b72:	4613      	mov	r3, r2
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	4413      	add	r3, r2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	4a30      	ldr	r2, [pc, #192]	@ (8001c40 <CAN_defineMotor+0x138>)
 8001b80:	4413      	add	r3, r2
 8001b82:	3304      	adds	r3, #4
 8001b84:	79ba      	ldrb	r2, [r7, #6]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f000 f861 	bl	8001c50 <CAN_setMotorDefinition>
					break;
 8001b8e:	e006      	b.n	8001b9e <CAN_defineMotor+0x96>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 8001b90:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b94:	4619      	mov	r1, r3
 8001b96:	482b      	ldr	r0, [pc, #172]	@ (8001c44 <CAN_defineMotor+0x13c>)
 8001b98:	f000 fe90 	bl	80028bc <usart_printf>
					break;
 8001b9c:	bf00      	nop
				}
			}
			break;
 8001b9e:	e04b      	b.n	8001c38 <CAN_defineMotor+0x130>
		}
		case (3): {
			switch(motorID) {
 8001ba0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ba4:	2b08      	cmp	r3, #8
 8001ba6:	d032      	beq.n	8001c0e <CAN_defineMotor+0x106>
 8001ba8:	2b08      	cmp	r3, #8
 8001baa:	dc37      	bgt.n	8001c1c <CAN_defineMotor+0x114>
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	dc02      	bgt.n	8001bb6 <CAN_defineMotor+0xae>
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	dc04      	bgt.n	8001bbe <CAN_defineMotor+0xb6>
 8001bb4:	e032      	b.n	8001c1c <CAN_defineMotor+0x114>
 8001bb6:	3b05      	subs	r3, #5
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d82f      	bhi.n	8001c1c <CAN_defineMotor+0x114>
 8001bbc:	e013      	b.n	8001be6 <CAN_defineMotor+0xde>
				case (1):
				case (2):
				case (3):
				case (4): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group2[motorID - 1], motorType);
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	1e5a      	subs	r2, r3, #1
 8001bc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bc6:	1e59      	subs	r1, r3, #1
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	4413      	add	r3, r2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	4a1a      	ldr	r2, [pc, #104]	@ (8001c40 <CAN_defineMotor+0x138>)
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3304      	adds	r3, #4
 8001bda:	79ba      	ldrb	r2, [r7, #6]
 8001bdc:	4611      	mov	r1, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f836 	bl	8001c50 <CAN_setMotorDefinition>
					break;
 8001be4:	e021      	b.n	8001c2a <CAN_defineMotor+0x122>
				}
				case (5):
				case (6):
				case (7): {
					CAN_setMotorDefinition(&DJI_MotorDeclaration[bus - 1].Group3[motorID - 5], motorType);
 8001be6:	79fb      	ldrb	r3, [r7, #7]
 8001be8:	1e5a      	subs	r2, r3, #1
 8001bea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bee:	1f59      	subs	r1, r3, #5
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	440b      	add	r3, r1
 8001bfc:	3308      	adds	r3, #8
 8001bfe:	4a10      	ldr	r2, [pc, #64]	@ (8001c40 <CAN_defineMotor+0x138>)
 8001c00:	4413      	add	r3, r2
 8001c02:	79ba      	ldrb	r2, [r7, #6]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f822 	bl	8001c50 <CAN_setMotorDefinition>
					break;
 8001c0c:	e00d      	b.n	8001c2a <CAN_defineMotor+0x122>
				}
				case (8): {               // call the user a dumbass for spawning an ID 8 on 0x2FF
					usart_printf("WARNING - motor ID 8 is not available for GM6020s according to DJI's CAN protocols \r\n", motorID);
 8001c0e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c12:	4619      	mov	r1, r3
 8001c14:	480c      	ldr	r0, [pc, #48]	@ (8001c48 <CAN_defineMotor+0x140>)
 8001c16:	f000 fe51 	bl	80028bc <usart_printf>
					break;
 8001c1a:	e006      	b.n	8001c2a <CAN_defineMotor+0x122>
				}
				default: {
					usart_printf("WARNING - motor ID %d does not match any known motors IDs \r\n", motorID);
 8001c1c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c20:	4619      	mov	r1, r3
 8001c22:	4808      	ldr	r0, [pc, #32]	@ (8001c44 <CAN_defineMotor+0x13c>)
 8001c24:	f000 fe4a 	bl	80028bc <usart_printf>
					break;
 8001c28:	bf00      	nop
				}
			}
			break;
 8001c2a:	e005      	b.n	8001c38 <CAN_defineMotor+0x130>
		}
		default: {
			usart_printf("WARNING - motor type %d does not match any registered motors \r\n", motorType);
 8001c2c:	79bb      	ldrb	r3, [r7, #6]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4806      	ldr	r0, [pc, #24]	@ (8001c4c <CAN_defineMotor+0x144>)
 8001c32:	f000 fe43 	bl	80028bc <usart_printf>
			break;
 8001c36:	bf00      	nop
		}
	}
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	20000040 	.word	0x20000040
 8001c44:	08011b10 	.word	0x08011b10
 8001c48:	08011b50 	.word	0x08011b50
 8001c4c:	08011ba8 	.word	0x08011ba8

08001c50 <CAN_setMotorDefinition>:

void CAN_setMotorDefinition(int8_t *Declaration, MotorType_ID motorType) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	70fb      	strb	r3, [r7, #3]
	if (*Declaration == -1) {    // ok
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001c62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c66:	d104      	bne.n	8001c72 <CAN_setMotorDefinition+0x22>
		*Declaration = motorType;
 8001c68:	f997 2003 	ldrsb.w	r2, [r7, #3]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	701a      	strb	r2, [r3, #0]
	} else {                           // repeat definition, do nothing
		usart_printf("WARNING - motor ID has already been set \r\n");
	}
}
 8001c70:	e002      	b.n	8001c78 <CAN_setMotorDefinition+0x28>
		usart_printf("WARNING - motor ID has already been set \r\n");
 8001c72:	4803      	ldr	r0, [pc, #12]	@ (8001c80 <CAN_setMotorDefinition+0x30>)
 8001c74:	f000 fe22 	bl	80028bc <usart_printf>
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	08011be8 	.word	0x08011be8

08001c84 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	4604      	mov	r4, r0
 8001c8c:	4608      	mov	r0, r1
 8001c8e:	4611      	mov	r1, r2
 8001c90:	461a      	mov	r2, r3
 8001c92:	4623      	mov	r3, r4
 8001c94:	71fb      	strb	r3, [r7, #7]
 8001c96:	4603      	mov	r3, r0
 8001c98:	71bb      	strb	r3, [r7, #6]
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	717b      	strb	r3, [r7, #5]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	2b04      	cmp	r3, #4
 8001ca6:	f000 8142 	beq.w	8001f2e <CAN_setMotorCtrlVal+0x2aa>
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	f300 81e1 	bgt.w	8002072 <CAN_setMotorCtrlVal+0x3ee>
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	dc02      	bgt.n	8001cba <CAN_setMotorCtrlVal+0x36>
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	dc04      	bgt.n	8001cc2 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8001cb8:	e1db      	b.n	8002072 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	f000 8097 	beq.w	8001dee <CAN_setMotorCtrlVal+0x16a>
}
 8001cc0:	e1d7      	b.n	8002072 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001cc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	dc02      	bgt.n	8001cd0 <CAN_setMotorCtrlVal+0x4c>
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	dc05      	bgt.n	8001cda <CAN_setMotorCtrlVal+0x56>
					break;
 8001cce:	e08c      	b.n	8001dea <CAN_setMotorCtrlVal+0x166>
 8001cd0:	3b05      	subs	r3, #5
 8001cd2:	2b03      	cmp	r3, #3
 8001cd4:	f200 8089 	bhi.w	8001dea <CAN_setMotorCtrlVal+0x166>
 8001cd8:	e042      	b.n	8001d60 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	1e5a      	subs	r2, r3, #1
 8001cde:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ce2:	1e59      	subs	r1, r3, #1
 8001ce4:	48bd      	ldr	r0, [pc, #756]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	440b      	add	r3, r1
 8001cf0:	887a      	ldrh	r2, [r7, #2]
 8001cf2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	1e5a      	subs	r2, r3, #1
 8001cfa:	49b8      	ldr	r1, [pc, #736]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	440b      	add	r3, r1
 8001d06:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	1e5a      	subs	r2, r3, #1
 8001d0e:	49b3      	ldr	r1, [pc, #716]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001d10:	4613      	mov	r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	440b      	add	r3, r1
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	1e5a      	subs	r2, r3, #1
 8001d24:	49ad      	ldr	r1, [pc, #692]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	3304      	adds	r3, #4
 8001d32:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	1e5a      	subs	r2, r3, #1
 8001d3a:	48a8      	ldr	r0, [pc, #672]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4403      	add	r3, r0
 8001d46:	3306      	adds	r3, #6
 8001d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4c:	79f8      	ldrb	r0, [r7, #7]
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	9100      	str	r1, [sp, #0]
 8001d52:	462b      	mov	r3, r5
 8001d54:	4622      	mov	r2, r4
 8001d56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d5a:	f7ff fe6d 	bl	8001a38 <CAN_DriveMotor>
					break;
 8001d5e:	e045      	b.n	8001dec <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001d60:	79fb      	ldrb	r3, [r7, #7]
 8001d62:	1e5a      	subs	r2, r3, #1
 8001d64:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001d68:	1f59      	subs	r1, r3, #5
 8001d6a:	489c      	ldr	r0, [pc, #624]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	3304      	adds	r3, #4
 8001d78:	887a      	ldrh	r2, [r7, #2]
 8001d7a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001d7e:	79fb      	ldrb	r3, [r7, #7]
 8001d80:	1e5a      	subs	r2, r3, #1
 8001d82:	4996      	ldr	r1, [pc, #600]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001d84:	4613      	mov	r3, r2
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	4413      	add	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	440b      	add	r3, r1
 8001d8e:	3308      	adds	r3, #8
 8001d90:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001d94:	79fb      	ldrb	r3, [r7, #7]
 8001d96:	1e5a      	subs	r2, r3, #1
 8001d98:	4990      	ldr	r1, [pc, #576]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	440b      	add	r3, r1
 8001da4:	330a      	adds	r3, #10
 8001da6:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	1e5a      	subs	r2, r3, #1
 8001dae:	498b      	ldr	r1, [pc, #556]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001db0:	4613      	mov	r3, r2
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	440b      	add	r3, r1
 8001dba:	330c      	adds	r3, #12
 8001dbc:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	1e5a      	subs	r2, r3, #1
 8001dc4:	4885      	ldr	r0, [pc, #532]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4403      	add	r3, r0
 8001dd0:	330e      	adds	r3, #14
 8001dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd6:	79f8      	ldrb	r0, [r7, #7]
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	9100      	str	r1, [sp, #0]
 8001ddc:	462b      	mov	r3, r5
 8001dde:	4622      	mov	r2, r4
 8001de0:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001de4:	f7ff fe28 	bl	8001a38 <CAN_DriveMotor>
					break;
 8001de8:	e000      	b.n	8001dec <CAN_setMotorCtrlVal+0x168>
					break;
 8001dea:	bf00      	nop
			break;
 8001dec:	e141      	b.n	8002072 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001dee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001df2:	2b08      	cmp	r3, #8
 8001df4:	f000 8097 	beq.w	8001f26 <CAN_setMotorCtrlVal+0x2a2>
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	f300 8096 	bgt.w	8001f2a <CAN_setMotorCtrlVal+0x2a6>
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	dc02      	bgt.n	8001e08 <CAN_setMotorCtrlVal+0x184>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	dc05      	bgt.n	8001e12 <CAN_setMotorCtrlVal+0x18e>
					break;
 8001e06:	e090      	b.n	8001f2a <CAN_setMotorCtrlVal+0x2a6>
 8001e08:	3b05      	subs	r3, #5
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	f200 808d 	bhi.w	8001f2a <CAN_setMotorCtrlVal+0x2a6>
 8001e10:	e044      	b.n	8001e9c <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	1e5a      	subs	r2, r3, #1
 8001e16:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e1a:	1e59      	subs	r1, r3, #1
 8001e1c:	486f      	ldr	r0, [pc, #444]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001e1e:	4613      	mov	r3, r2
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	440b      	add	r3, r1
 8001e28:	3304      	adds	r3, #4
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001e30:	79fb      	ldrb	r3, [r7, #7]
 8001e32:	1e5a      	subs	r2, r3, #1
 8001e34:	4969      	ldr	r1, [pc, #420]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	00db      	lsls	r3, r3, #3
 8001e3e:	440b      	add	r3, r1
 8001e40:	3308      	adds	r3, #8
 8001e42:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	1e5a      	subs	r2, r3, #1
 8001e4a:	4964      	ldr	r1, [pc, #400]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	440b      	add	r3, r1
 8001e56:	330a      	adds	r3, #10
 8001e58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	1e5a      	subs	r2, r3, #1
 8001e60:	495e      	ldr	r1, [pc, #376]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001e62:	4613      	mov	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	4413      	add	r3, r2
 8001e68:	00db      	lsls	r3, r3, #3
 8001e6a:	440b      	add	r3, r1
 8001e6c:	330c      	adds	r3, #12
 8001e6e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001e72:	79fb      	ldrb	r3, [r7, #7]
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	4859      	ldr	r0, [pc, #356]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	4403      	add	r3, r0
 8001e82:	330e      	adds	r3, #14
 8001e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e88:	79f8      	ldrb	r0, [r7, #7]
 8001e8a:	9301      	str	r3, [sp, #4]
 8001e8c:	9100      	str	r1, [sp, #0]
 8001e8e:	462b      	mov	r3, r5
 8001e90:	4622      	mov	r2, r4
 8001e92:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001e96:	f7ff fdcf 	bl	8001a38 <CAN_DriveMotor>
					break;
 8001e9a:	e047      	b.n	8001f2c <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	1e5a      	subs	r2, r3, #1
 8001ea0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ea4:	1f59      	subs	r1, r3, #5
 8001ea6:	484d      	ldr	r0, [pc, #308]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	887a      	ldrh	r2, [r7, #2]
 8001eb6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	1e5a      	subs	r2, r3, #1
 8001ebe:	4947      	ldr	r1, [pc, #284]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	4413      	add	r3, r2
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	440b      	add	r3, r1
 8001eca:	3310      	adds	r3, #16
 8001ecc:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	1e5a      	subs	r2, r3, #1
 8001ed4:	4941      	ldr	r1, [pc, #260]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	3312      	adds	r3, #18
 8001ee2:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	493c      	ldr	r1, [pc, #240]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001eec:	4613      	mov	r3, r2
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4413      	add	r3, r2
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	440b      	add	r3, r1
 8001ef6:	3314      	adds	r3, #20
 8001ef8:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	1e5a      	subs	r2, r3, #1
 8001f00:	4836      	ldr	r0, [pc, #216]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001f02:	4613      	mov	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4413      	add	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4403      	add	r3, r0
 8001f0c:	3316      	adds	r3, #22
 8001f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f12:	79f8      	ldrb	r0, [r7, #7]
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	9100      	str	r1, [sp, #0]
 8001f18:	462b      	mov	r3, r5
 8001f1a:	4622      	mov	r2, r4
 8001f1c:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001f20:	f7ff fd8a 	bl	8001a38 <CAN_DriveMotor>
					break;
 8001f24:	e002      	b.n	8001f2c <CAN_setMotorCtrlVal+0x2a8>
					break;
 8001f26:	bf00      	nop
 8001f28:	e0a3      	b.n	8002072 <CAN_setMotorCtrlVal+0x3ee>
					break;
 8001f2a:	bf00      	nop
			break;
 8001f2c:	e0a1      	b.n	8002072 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001f2e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f32:	2b08      	cmp	r3, #8
 8001f34:	f000 8099 	beq.w	800206a <CAN_setMotorCtrlVal+0x3e6>
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	f300 8098 	bgt.w	800206e <CAN_setMotorCtrlVal+0x3ea>
 8001f3e:	2b04      	cmp	r3, #4
 8001f40:	dc02      	bgt.n	8001f48 <CAN_setMotorCtrlVal+0x2c4>
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	dc05      	bgt.n	8001f52 <CAN_setMotorCtrlVal+0x2ce>
					break;
 8001f46:	e092      	b.n	800206e <CAN_setMotorCtrlVal+0x3ea>
 8001f48:	3b05      	subs	r3, #5
 8001f4a:	2b02      	cmp	r3, #2
 8001f4c:	f200 808f 	bhi.w	800206e <CAN_setMotorCtrlVal+0x3ea>
 8001f50:	e046      	b.n	8001fe0 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	1e5a      	subs	r2, r3, #1
 8001f56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f5a:	1e59      	subs	r1, r3, #1
 8001f5c:	481f      	ldr	r0, [pc, #124]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	3304      	adds	r3, #4
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	1e5a      	subs	r2, r3, #1
 8001f74:	4919      	ldr	r1, [pc, #100]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	3308      	adds	r3, #8
 8001f82:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	1e5a      	subs	r2, r3, #1
 8001f8a:	4914      	ldr	r1, [pc, #80]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	440b      	add	r3, r1
 8001f96:	330a      	adds	r3, #10
 8001f98:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	1e5a      	subs	r2, r3, #1
 8001fa0:	490e      	ldr	r1, [pc, #56]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	440b      	add	r3, r1
 8001fac:	330c      	adds	r3, #12
 8001fae:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001fb2:	79fb      	ldrb	r3, [r7, #7]
 8001fb4:	1e5a      	subs	r2, r3, #1
 8001fb6:	4809      	ldr	r0, [pc, #36]	@ (8001fdc <CAN_setMotorCtrlVal+0x358>)
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4403      	add	r3, r0
 8001fc2:	330e      	adds	r3, #14
 8001fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc8:	79f8      	ldrb	r0, [r7, #7]
 8001fca:	9301      	str	r3, [sp, #4]
 8001fcc:	9100      	str	r1, [sp, #0]
 8001fce:	462b      	mov	r3, r5
 8001fd0:	4622      	mov	r2, r4
 8001fd2:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001fd6:	f7ff fd2f 	bl	8001a38 <CAN_DriveMotor>
					break;
 8001fda:	e049      	b.n	8002070 <CAN_setMotorCtrlVal+0x3ec>
 8001fdc:	200002a8 	.word	0x200002a8
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	1e5a      	subs	r2, r3, #1
 8001fe4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fe8:	1f59      	subs	r1, r3, #5
 8001fea:	4824      	ldr	r0, [pc, #144]	@ (800207c <CAN_setMotorCtrlVal+0x3f8>)
 8001fec:	4613      	mov	r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3308      	adds	r3, #8
 8001ff8:	887a      	ldrh	r2, [r7, #2]
 8001ffa:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	1e5a      	subs	r2, r3, #1
 8002002:	491e      	ldr	r1, [pc, #120]	@ (800207c <CAN_setMotorCtrlVal+0x3f8>)
 8002004:	4613      	mov	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4413      	add	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	440b      	add	r3, r1
 800200e:	3310      	adds	r3, #16
 8002010:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	1e5a      	subs	r2, r3, #1
 8002018:	4918      	ldr	r1, [pc, #96]	@ (800207c <CAN_setMotorCtrlVal+0x3f8>)
 800201a:	4613      	mov	r3, r2
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	4413      	add	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	440b      	add	r3, r1
 8002024:	3312      	adds	r3, #18
 8002026:	f9b3 5000 	ldrsh.w	r5, [r3]
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	1e5a      	subs	r2, r3, #1
 800202e:	4913      	ldr	r1, [pc, #76]	@ (800207c <CAN_setMotorCtrlVal+0x3f8>)
 8002030:	4613      	mov	r3, r2
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	4413      	add	r3, r2
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	440b      	add	r3, r1
 800203a:	3314      	adds	r3, #20
 800203c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	1e5a      	subs	r2, r3, #1
 8002044:	480d      	ldr	r0, [pc, #52]	@ (800207c <CAN_setMotorCtrlVal+0x3f8>)
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4403      	add	r3, r0
 8002050:	3316      	adds	r3, #22
 8002052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002056:	79f8      	ldrb	r0, [r7, #7]
 8002058:	9301      	str	r3, [sp, #4]
 800205a:	9100      	str	r1, [sp, #0]
 800205c:	462b      	mov	r3, r5
 800205e:	4622      	mov	r2, r4
 8002060:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8002064:	f7ff fce8 	bl	8001a38 <CAN_DriveMotor>
					break;
 8002068:	e002      	b.n	8002070 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800206a:	bf00      	nop
 800206c:	e000      	b.n	8002070 <CAN_setMotorCtrlVal+0x3ec>
					break;
 800206e:	bf00      	nop
			break;
 8002070:	bf00      	nop
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bdb0      	pop	{r4, r5, r7, pc}
 800207a:	bf00      	nop
 800207c:	200002a8 	.word	0x200002a8

08002080 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002080:	b590      	push	{r4, r7, lr}
 8002082:	b08b      	sub	sp, #44	@ 0x2c
 8002084:	af00      	add	r7, sp, #0
 8002086:	4604      	mov	r4, r0
 8002088:	4608      	mov	r0, r1
 800208a:	4611      	mov	r1, r2
 800208c:	461a      	mov	r2, r3
 800208e:	eef0 6a40 	vmov.f32	s13, s0
 8002092:	eeb0 7a60 	vmov.f32	s14, s1
 8002096:	eef0 7a41 	vmov.f32	s15, s2
 800209a:	4623      	mov	r3, r4
 800209c:	75fb      	strb	r3, [r7, #23]
 800209e:	4603      	mov	r3, r0
 80020a0:	75bb      	strb	r3, [r7, #22]
 80020a2:	460b      	mov	r3, r1
 80020a4:	757b      	strb	r3, [r7, #21]
 80020a6:	4613      	mov	r3, r2
 80020a8:	827b      	strh	r3, [r7, #18]
 80020aa:	edc7 6a01 	vstr	s13, [r7, #4]
 80020ae:	ed87 7a02 	vstr	s14, [r7, #8]
 80020b2:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 80020ba:	7dfb      	ldrb	r3, [r7, #23]
 80020bc:	3b01      	subs	r3, #1
 80020be:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 80020c0:	7dbb      	ldrb	r3, [r7, #22]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	dc02      	bgt.n	80020cc <calcRPM_PID+0x4c>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	dc04      	bgt.n	80020d4 <calcRPM_PID+0x54>
 80020ca:	e00d      	b.n	80020e8 <calcRPM_PID+0x68>
 80020cc:	3b03      	subs	r3, #3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d80a      	bhi.n	80020e8 <calcRPM_PID+0x68>
 80020d2:	e004      	b.n	80020de <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 80020d4:	7d7b      	ldrb	r3, [r7, #21]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80020dc:	e009      	b.n	80020f2 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80020de:	7d7b      	ldrb	r3, [r7, #21]
 80020e0:	3303      	adds	r3, #3
 80020e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80020e6:	e004      	b.n	80020f2 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 80020e8:	7d7b      	ldrb	r3, [r7, #21]
 80020ea:	3b01      	subs	r3, #1
 80020ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80020f0:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 80020f2:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80020f6:	7ffa      	ldrb	r2, [r7, #31]
 80020f8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80020fc:	4c70      	ldr	r4, [pc, #448]	@ (80022c0 <calcRPM_PID+0x240>)
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	4403      	add	r3, r0
 800210a:	00db      	lsls	r3, r3, #3
 800210c:	4423      	add	r3, r4
 800210e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002112:	7ffa      	ldrb	r2, [r7, #31]
 8002114:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002118:	1ac9      	subs	r1, r1, r3
 800211a:	4c6a      	ldr	r4, [pc, #424]	@ (80022c4 <calcRPM_PID+0x244>)
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4413      	add	r3, r2
 8002126:	4403      	add	r3, r0
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	4423      	add	r3, r4
 800212c:	3304      	adds	r3, #4
 800212e:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8002130:	7ffa      	ldrb	r2, [r7, #31]
 8002132:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002136:	4863      	ldr	r0, [pc, #396]	@ (80022c4 <calcRPM_PID+0x244>)
 8002138:	4613      	mov	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	440b      	add	r3, r1
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	4403      	add	r3, r0
 8002148:	3308      	adds	r3, #8
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	7ffa      	ldrb	r2, [r7, #31]
 800214e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002152:	4c5c      	ldr	r4, [pc, #368]	@ (80022c4 <calcRPM_PID+0x244>)
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4413      	add	r3, r2
 800215e:	4403      	add	r3, r0
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	4423      	add	r3, r4
 8002164:	3304      	adds	r3, #4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	7ffa      	ldrb	r2, [r7, #31]
 800216a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800216e:	4419      	add	r1, r3
 8002170:	4c54      	ldr	r4, [pc, #336]	@ (80022c4 <calcRPM_PID+0x244>)
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	4403      	add	r3, r0
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4423      	add	r3, r4
 8002182:	3308      	adds	r3, #8
 8002184:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8002186:	7ffa      	ldrb	r2, [r7, #31]
 8002188:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800218c:	484d      	ldr	r0, [pc, #308]	@ (80022c4 <calcRPM_PID+0x244>)
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	440b      	add	r3, r1
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	4403      	add	r3, r0
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	7ffa      	ldrb	r2, [r7, #31]
 80021a2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80021a6:	4c46      	ldr	r4, [pc, #280]	@ (80022c0 <calcRPM_PID+0x240>)
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	4403      	add	r3, r0
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4423      	add	r3, r4
 80021b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021bc:	7ffa      	ldrb	r2, [r7, #31]
 80021be:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80021c2:	1ac9      	subs	r1, r1, r3
 80021c4:	4c3f      	ldr	r4, [pc, #252]	@ (80022c4 <calcRPM_PID+0x244>)
 80021c6:	4613      	mov	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	4413      	add	r3, r2
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	4403      	add	r3, r0
 80021d2:	011b      	lsls	r3, r3, #4
 80021d4:	4423      	add	r3, r4
 80021d6:	330c      	adds	r3, #12
 80021d8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 80021da:	7ffa      	ldrb	r2, [r7, #31]
 80021dc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80021e0:	4837      	ldr	r0, [pc, #220]	@ (80022c0 <calcRPM_PID+0x240>)
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	4413      	add	r3, r2
 80021ec:	440b      	add	r3, r1
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	4403      	add	r3, r0
 80021f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80021f6:	7ffa      	ldrb	r2, [r7, #31]
 80021f8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80021fc:	461c      	mov	r4, r3
 80021fe:	4831      	ldr	r0, [pc, #196]	@ (80022c4 <calcRPM_PID+0x244>)
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	4413      	add	r3, r2
 800220a:	440b      	add	r3, r1
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	4403      	add	r3, r0
 8002210:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8002212:	ed97 7a01 	vldr	s14, [r7, #4]
 8002216:	7ffa      	ldrb	r2, [r7, #31]
 8002218:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800221c:	4829      	ldr	r0, [pc, #164]	@ (80022c4 <calcRPM_PID+0x244>)
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	4413      	add	r3, r2
 8002228:	440b      	add	r3, r1
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	4403      	add	r3, r0
 800222e:	3304      	adds	r3, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	ee07 3a90 	vmov	s15, r3
 8002236:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800223a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800223e:	edd7 6a02 	vldr	s13, [r7, #8]
 8002242:	7ffa      	ldrb	r2, [r7, #31]
 8002244:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002248:	481e      	ldr	r0, [pc, #120]	@ (80022c4 <calcRPM_PID+0x244>)
 800224a:	4613      	mov	r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4413      	add	r3, r2
 8002254:	440b      	add	r3, r1
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	4403      	add	r3, r0
 800225a:	3308      	adds	r3, #8
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	ee07 3a90 	vmov	s15, r3
 8002262:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002266:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800226a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800226e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002272:	7ffa      	ldrb	r2, [r7, #31]
 8002274:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002278:	4812      	ldr	r0, [pc, #72]	@ (80022c4 <calcRPM_PID+0x244>)
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	440b      	add	r3, r1
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	4403      	add	r3, r0
 800228a:	330c      	adds	r3, #12
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a2:	ee17 3a90 	vmov	r3, s15
 80022a6:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 80022a8:	7dbb      	ldrb	r3, [r7, #22]
 80022aa:	6a39      	ldr	r1, [r7, #32]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f000 f997 	bl	80025e0 <applyCtrlLimit>
 80022b2:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 80022b4:	6a3b      	ldr	r3, [r7, #32]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	372c      	adds	r7, #44	@ 0x2c
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd90      	pop	{r4, r7, pc}
 80022be:	bf00      	nop
 80022c0:	200002d8 	.word	0x200002d8
 80022c4:	20000388 	.word	0x20000388

080022c8 <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b08b      	sub	sp, #44	@ 0x2c
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	4604      	mov	r4, r0
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	eef0 6a40 	vmov.f32	s13, s0
 80022da:	eeb0 7a60 	vmov.f32	s14, s1
 80022de:	eef0 7a41 	vmov.f32	s15, s2
 80022e2:	4623      	mov	r3, r4
 80022e4:	75fb      	strb	r3, [r7, #23]
 80022e6:	4603      	mov	r3, r0
 80022e8:	75bb      	strb	r3, [r7, #22]
 80022ea:	460b      	mov	r3, r1
 80022ec:	757b      	strb	r3, [r7, #21]
 80022ee:	4613      	mov	r3, r2
 80022f0:	827b      	strh	r3, [r7, #18]
 80022f2:	edc7 6a01 	vstr	s13, [r7, #4]
 80022f6:	ed87 7a02 	vstr	s14, [r7, #8]
 80022fa:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8002302:	7dfb      	ldrb	r3, [r7, #23]
 8002304:	3b01      	subs	r3, #1
 8002306:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 800230c:	2300      	movs	r3, #0
 800230e:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 8002310:	7dbb      	ldrb	r3, [r7, #22]
 8002312:	2b02      	cmp	r3, #2
 8002314:	dc02      	bgt.n	800231c <calcPosition_PID+0x54>
 8002316:	2b00      	cmp	r3, #0
 8002318:	dc04      	bgt.n	8002324 <calcPosition_PID+0x5c>
 800231a:	e00d      	b.n	8002338 <calcPosition_PID+0x70>
 800231c:	3b03      	subs	r3, #3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d80a      	bhi.n	8002338 <calcPosition_PID+0x70>
 8002322:	e004      	b.n	800232e <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 8002324:	7d7b      	ldrb	r3, [r7, #21]
 8002326:	3b01      	subs	r3, #1
 8002328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800232c:	e009      	b.n	8002342 <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 800232e:	7d7b      	ldrb	r3, [r7, #21]
 8002330:	3303      	adds	r3, #3
 8002332:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002336:	e004      	b.n	8002342 <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 8002338:	7d7b      	ldrb	r3, [r7, #21]
 800233a:	3b01      	subs	r3, #1
 800233c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8002340:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 8002342:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8002346:	7ffa      	ldrb	r2, [r7, #31]
 8002348:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800234c:	4ca2      	ldr	r4, [pc, #648]	@ (80025d8 <calcPosition_PID+0x310>)
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	4403      	add	r3, r0
 800235a:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 800235e:	1acb      	subs	r3, r1, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	db10      	blt.n	8002386 <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 8002364:	8a79      	ldrh	r1, [r7, #18]
 8002366:	7ffa      	ldrb	r2, [r7, #31]
 8002368:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800236c:	4c9a      	ldr	r4, [pc, #616]	@ (80025d8 <calcPosition_PID+0x310>)
 800236e:	4613      	mov	r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4413      	add	r3, r2
 8002378:	4403      	add	r3, r0
 800237a:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 800237e:	1acb      	subs	r3, r1, r3
 8002380:	b29b      	uxth	r3, r3
 8002382:	83bb      	strh	r3, [r7, #28]
 8002384:	e012      	b.n	80023ac <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 8002386:	8a79      	ldrh	r1, [r7, #18]
 8002388:	7ffa      	ldrb	r2, [r7, #31]
 800238a:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800238e:	4c92      	ldr	r4, [pc, #584]	@ (80025d8 <calcPosition_PID+0x310>)
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	4403      	add	r3, r0
 800239c:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80023a0:	1acb      	subs	r3, r1, r3
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 80023ac:	7ffa      	ldrb	r2, [r7, #31]
 80023ae:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80023b2:	4889      	ldr	r0, [pc, #548]	@ (80025d8 <calcPosition_PID+0x310>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	440b      	add	r3, r1
 80023c0:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	db10      	blt.n	80023f2 <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 80023d0:	7ffa      	ldrb	r2, [r7, #31]
 80023d2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80023d6:	4880      	ldr	r0, [pc, #512]	@ (80025d8 <calcPosition_PID+0x310>)
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	440b      	add	r3, r1
 80023e4:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 80023e8:	8a7b      	ldrh	r3, [r7, #18]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	837b      	strh	r3, [r7, #26]
 80023f0:	e012      	b.n	8002418 <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 80023f2:	7ffa      	ldrb	r2, [r7, #31]
 80023f4:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80023f8:	4877      	ldr	r0, [pc, #476]	@ (80025d8 <calcPosition_PID+0x310>)
 80023fa:	4613      	mov	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	4413      	add	r3, r2
 8002404:	440b      	add	r3, r1
 8002406:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 800240a:	8a7b      	ldrh	r3, [r7, #18]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	b29b      	uxth	r3, r3
 8002410:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002414:	b29b      	uxth	r3, r3
 8002416:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 8002418:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800241c:	7ffa      	ldrb	r2, [r7, #31]
 800241e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002422:	4c6d      	ldr	r4, [pc, #436]	@ (80025d8 <calcPosition_PID+0x310>)
 8002424:	4613      	mov	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	4403      	add	r3, r0
 8002430:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8002434:	7ffa      	ldrb	r2, [r7, #31]
 8002436:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800243a:	1ac9      	subs	r1, r1, r3
 800243c:	4c67      	ldr	r4, [pc, #412]	@ (80025dc <calcPosition_PID+0x314>)
 800243e:	4613      	mov	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	4413      	add	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	4403      	add	r3, r0
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	4423      	add	r3, r4
 800244e:	3304      	adds	r3, #4
 8002450:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8002452:	7ffa      	ldrb	r2, [r7, #31]
 8002454:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002458:	4860      	ldr	r0, [pc, #384]	@ (80025dc <calcPosition_PID+0x314>)
 800245a:	4613      	mov	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	4413      	add	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	440b      	add	r3, r1
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	4403      	add	r3, r0
 800246a:	3308      	adds	r3, #8
 800246c:	6819      	ldr	r1, [r3, #0]
 800246e:	7ffa      	ldrb	r2, [r7, #31]
 8002470:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002474:	4c59      	ldr	r4, [pc, #356]	@ (80025dc <calcPosition_PID+0x314>)
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	4403      	add	r3, r0
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4423      	add	r3, r4
 8002486:	3304      	adds	r3, #4
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	7ffa      	ldrb	r2, [r7, #31]
 800248c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8002490:	4419      	add	r1, r3
 8002492:	4c52      	ldr	r4, [pc, #328]	@ (80025dc <calcPosition_PID+0x314>)
 8002494:	4613      	mov	r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	4413      	add	r3, r2
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	4413      	add	r3, r2
 800249e:	4403      	add	r3, r0
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	4423      	add	r3, r4
 80024a4:	3308      	adds	r3, #8
 80024a6:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 80024a8:	7ffa      	ldrb	r2, [r7, #31]
 80024aa:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80024ae:	484b      	ldr	r0, [pc, #300]	@ (80025dc <calcPosition_PID+0x314>)
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	440b      	add	r3, r1
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	4403      	add	r3, r0
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	7ffa      	ldrb	r2, [r7, #31]
 80024c4:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80024c8:	4c43      	ldr	r4, [pc, #268]	@ (80025d8 <calcPosition_PID+0x310>)
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	005b      	lsls	r3, r3, #1
 80024d2:	4413      	add	r3, r2
 80024d4:	4403      	add	r3, r0
 80024d6:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80024da:	7ffa      	ldrb	r2, [r7, #31]
 80024dc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80024e0:	1ac9      	subs	r1, r1, r3
 80024e2:	4c3e      	ldr	r4, [pc, #248]	@ (80025dc <calcPosition_PID+0x314>)
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	4403      	add	r3, r0
 80024f0:	011b      	lsls	r3, r3, #4
 80024f2:	4423      	add	r3, r4
 80024f4:	330c      	adds	r3, #12
 80024f6:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 80024f8:	7ffa      	ldrb	r2, [r7, #31]
 80024fa:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80024fe:	4836      	ldr	r0, [pc, #216]	@ (80025d8 <calcPosition_PID+0x310>)
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	440b      	add	r3, r1
 800250c:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8002510:	7ffa      	ldrb	r2, [r7, #31]
 8002512:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002516:	461c      	mov	r4, r3
 8002518:	4830      	ldr	r0, [pc, #192]	@ (80025dc <calcPosition_PID+0x314>)
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	440b      	add	r3, r1
 8002526:	011b      	lsls	r3, r3, #4
 8002528:	4403      	add	r3, r0
 800252a:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 800252c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002530:	7ffa      	ldrb	r2, [r7, #31]
 8002532:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002536:	4829      	ldr	r0, [pc, #164]	@ (80025dc <calcPosition_PID+0x314>)
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	440b      	add	r3, r1
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	4403      	add	r3, r0
 8002548:	3304      	adds	r3, #4
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002554:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002558:	edd7 6a02 	vldr	s13, [r7, #8]
 800255c:	7ffa      	ldrb	r2, [r7, #31]
 800255e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002562:	481e      	ldr	r0, [pc, #120]	@ (80025dc <calcPosition_PID+0x314>)
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	440b      	add	r3, r1
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4403      	add	r3, r0
 8002574:	3308      	adds	r3, #8
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	ee07 3a90 	vmov	s15, r3
 800257c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002588:	edd7 6a03 	vldr	s13, [r7, #12]
 800258c:	7ffa      	ldrb	r2, [r7, #31]
 800258e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002592:	4812      	ldr	r0, [pc, #72]	@ (80025dc <calcPosition_PID+0x314>)
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	4413      	add	r3, r2
 800259e:	440b      	add	r3, r1
 80025a0:	011b      	lsls	r3, r3, #4
 80025a2:	4403      	add	r3, r0
 80025a4:	330c      	adds	r3, #12
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	ee07 3a90 	vmov	s15, r3
 80025ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025bc:	ee17 3a90 	vmov	r3, s15
 80025c0:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 80025c2:	7dbb      	ldrb	r3, [r7, #22]
 80025c4:	6a39      	ldr	r1, [r7, #32]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 f80a 	bl	80025e0 <applyCtrlLimit>
 80025cc:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 80025ce:	6a3b      	ldr	r3, [r7, #32]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	372c      	adds	r7, #44	@ 0x2c
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd90      	pop	{r4, r7, pc}
 80025d8:	200002d8 	.word	0x200002d8
 80025dc:	20000388 	.word	0x20000388

080025e0 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	4603      	mov	r3, r0
 80025e8:	6039      	str	r1, [r7, #0]
 80025ea:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d009      	beq.n	8002606 <applyCtrlLimit+0x26>
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	dc29      	bgt.n	800264a <applyCtrlLimit+0x6a>
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	dc02      	bgt.n	8002600 <applyCtrlLimit+0x20>
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	dc03      	bgt.n	8002606 <applyCtrlLimit+0x26>
 80025fe:	e024      	b.n	800264a <applyCtrlLimit+0x6a>
 8002600:	2b03      	cmp	r3, #3
 8002602:	d00f      	beq.n	8002624 <applyCtrlLimit+0x44>
 8002604:	e021      	b.n	800264a <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800260c:	dd03      	ble.n	8002616 <applyCtrlLimit+0x36>
				val = 16384;
 800260e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002612:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8002614:	e016      	b.n	8002644 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 800261c:	da12      	bge.n	8002644 <applyCtrlLimit+0x64>
				val = -16384;
 800261e:	4b0e      	ldr	r3, [pc, #56]	@ (8002658 <applyCtrlLimit+0x78>)
 8002620:	603b      	str	r3, [r7, #0]
			break;
 8002622:	e00f      	b.n	8002644 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800262a:	4293      	cmp	r3, r2
 800262c:	dd03      	ble.n	8002636 <applyCtrlLimit+0x56>
				val = 25000;
 800262e:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8002632:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8002634:	e008      	b.n	8002648 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	4a08      	ldr	r2, [pc, #32]	@ (800265c <applyCtrlLimit+0x7c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	da04      	bge.n	8002648 <applyCtrlLimit+0x68>
				val = -25000;
 800263e:	4b07      	ldr	r3, [pc, #28]	@ (800265c <applyCtrlLimit+0x7c>)
 8002640:	603b      	str	r3, [r7, #0]
			break;
 8002642:	e001      	b.n	8002648 <applyCtrlLimit+0x68>
			break;
 8002644:	bf00      	nop
 8002646:	e000      	b.n	800264a <applyCtrlLimit+0x6a>
			break;
 8002648:	bf00      	nop
		}
	}
	return val;
 800264a:	683b      	ldr	r3, [r7, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	ffffc000 	.word	0xffffc000
 800265c:	ffff9e58 	.word	0xffff9e58

08002660 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	4604      	mov	r4, r0
 8002668:	4608      	mov	r0, r1
 800266a:	4611      	mov	r1, r2
 800266c:	461a      	mov	r2, r3
 800266e:	eef0 6a40 	vmov.f32	s13, s0
 8002672:	eeb0 7a60 	vmov.f32	s14, s1
 8002676:	eef0 7a41 	vmov.f32	s15, s2
 800267a:	4623      	mov	r3, r4
 800267c:	75fb      	strb	r3, [r7, #23]
 800267e:	4603      	mov	r3, r0
 8002680:	75bb      	strb	r3, [r7, #22]
 8002682:	460b      	mov	r3, r1
 8002684:	757b      	strb	r3, [r7, #21]
 8002686:	4613      	mov	r3, r2
 8002688:	827b      	strh	r3, [r7, #18]
 800268a:	edc7 6a01 	vstr	s13, [r7, #4]
 800268e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002692:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 8002696:	edd7 6a01 	vldr	s13, [r7, #4]
 800269a:	ed97 7a02 	vldr	s14, [r7, #8]
 800269e:	edd7 7a03 	vldr	s15, [r7, #12]
 80026a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026a6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80026aa:	7db9      	ldrb	r1, [r7, #22]
 80026ac:	7df8      	ldrb	r0, [r7, #23]
 80026ae:	eeb0 0a66 	vmov.f32	s0, s13
 80026b2:	eef0 0a47 	vmov.f32	s1, s14
 80026b6:	eeb0 1a67 	vmov.f32	s2, s15
 80026ba:	f7ff fce1 	bl	8002080 <calcRPM_PID>
 80026be:	4603      	mov	r3, r0
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80026c6:	7db9      	ldrb	r1, [r7, #22]
 80026c8:	7df8      	ldrb	r0, [r7, #23]
 80026ca:	f7ff fadb 	bl	8001c84 <CAN_setMotorCtrlVal>
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}

080026d6 <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 80026d6:	b590      	push	{r4, r7, lr}
 80026d8:	b087      	sub	sp, #28
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4604      	mov	r4, r0
 80026de:	4608      	mov	r0, r1
 80026e0:	4611      	mov	r1, r2
 80026e2:	461a      	mov	r2, r3
 80026e4:	eef0 6a40 	vmov.f32	s13, s0
 80026e8:	eeb0 7a60 	vmov.f32	s14, s1
 80026ec:	eef0 7a41 	vmov.f32	s15, s2
 80026f0:	4623      	mov	r3, r4
 80026f2:	75fb      	strb	r3, [r7, #23]
 80026f4:	4603      	mov	r3, r0
 80026f6:	75bb      	strb	r3, [r7, #22]
 80026f8:	460b      	mov	r3, r1
 80026fa:	757b      	strb	r3, [r7, #21]
 80026fc:	4613      	mov	r3, r2
 80026fe:	827b      	strh	r3, [r7, #18]
 8002700:	edc7 6a01 	vstr	s13, [r7, #4]
 8002704:	ed87 7a02 	vstr	s14, [r7, #8]
 8002708:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 800270c:	edd7 6a01 	vldr	s13, [r7, #4]
 8002710:	ed97 7a02 	vldr	s14, [r7, #8]
 8002714:	edd7 7a03 	vldr	s15, [r7, #12]
 8002718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800271c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002720:	7db9      	ldrb	r1, [r7, #22]
 8002722:	7df8      	ldrb	r0, [r7, #23]
 8002724:	eeb0 0a66 	vmov.f32	s0, s13
 8002728:	eef0 0a47 	vmov.f32	s1, s14
 800272c:	eeb0 1a67 	vmov.f32	s2, s15
 8002730:	f7ff fdca 	bl	80022c8 <calcPosition_PID>
 8002734:	4603      	mov	r3, r0
 8002736:	b21b      	sxth	r3, r3
 8002738:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800273c:	7db9      	ldrb	r1, [r7, #22]
 800273e:	7df8      	ldrb	r0, [r7, #23]
 8002740:	f7ff faa0 	bl	8001c84 <CAN_setMotorCtrlVal>
}
 8002744:	bf00      	nop
 8002746:	371c      	adds	r7, #28
 8002748:	46bd      	mov	sp, r7
 800274a:	bd90      	pop	{r4, r7, pc}

0800274c <getRotorPosition>:

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
 8002756:	460b      	mov	r3, r1
 8002758:	71bb      	strb	r3, [r7, #6]
 800275a:	4613      	mov	r3, r2
 800275c:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 800275e:	79bb      	ldrb	r3, [r7, #6]
 8002760:	2b02      	cmp	r3, #2
 8002762:	dc02      	bgt.n	800276a <getRotorPosition+0x1e>
 8002764:	2b00      	cmp	r3, #0
 8002766:	dc04      	bgt.n	8002772 <getRotorPosition+0x26>
 8002768:	e034      	b.n	80027d4 <getRotorPosition+0x88>
 800276a:	3b03      	subs	r3, #3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d831      	bhi.n	80027d4 <getRotorPosition+0x88>
 8002770:	e016      	b.n	80027a0 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8002772:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002776:	2b00      	cmp	r3, #0
 8002778:	dd29      	ble.n	80027ce <getRotorPosition+0x82>
 800277a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800277e:	2b08      	cmp	r3, #8
 8002780:	dc25      	bgt.n	80027ce <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	1e5a      	subs	r2, r3, #1
 8002786:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800278a:	1e59      	subs	r1, r3, #1
 800278c:	4815      	ldr	r0, [pc, #84]	@ (80027e4 <getRotorPosition+0x98>)
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	4413      	add	r3, r2
 8002798:	440b      	add	r3, r1
 800279a:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800279e:	e01b      	b.n	80027d8 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 80027a0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	dd14      	ble.n	80027d2 <getRotorPosition+0x86>
 80027a8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027ac:	2b07      	cmp	r3, #7
 80027ae:	dc10      	bgt.n	80027d2 <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	1e5a      	subs	r2, r3, #1
 80027b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80027b8:	1cd9      	adds	r1, r3, #3
 80027ba:	480a      	ldr	r0, [pc, #40]	@ (80027e4 <getRotorPosition+0x98>)
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	440b      	add	r3, r1
 80027c8:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 80027cc:	e004      	b.n	80027d8 <getRotorPosition+0x8c>
			break;
 80027ce:	bf00      	nop
 80027d0:	e000      	b.n	80027d4 <getRotorPosition+0x88>
			}
			break;
 80027d2:	bf00      	nop
		}
	}
	return -1;
 80027d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80027d8:	4618      	mov	r0, r3
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	200002d8 	.word	0x200002d8

080027e8 <getMotorRPM>:

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	4603      	mov	r3, r0
 80027f0:	71fb      	strb	r3, [r7, #7]
 80027f2:	460b      	mov	r3, r1
 80027f4:	71bb      	strb	r3, [r7, #6]
 80027f6:	4613      	mov	r3, r2
 80027f8:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 80027fa:	79bb      	ldrb	r3, [r7, #6]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	dc02      	bgt.n	8002806 <getMotorRPM+0x1e>
 8002800:	2b00      	cmp	r3, #0
 8002802:	dc04      	bgt.n	800280e <getMotorRPM+0x26>
 8002804:	e038      	b.n	8002878 <getMotorRPM+0x90>
 8002806:	3b03      	subs	r3, #3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d835      	bhi.n	8002878 <getMotorRPM+0x90>
 800280c:	e018      	b.n	8002840 <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 800280e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002812:	2b00      	cmp	r3, #0
 8002814:	dd2d      	ble.n	8002872 <getMotorRPM+0x8a>
 8002816:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800281a:	2b08      	cmp	r3, #8
 800281c:	dc29      	bgt.n	8002872 <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 800281e:	79fb      	ldrb	r3, [r7, #7]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002826:	1e59      	subs	r1, r3, #1
 8002828:	4817      	ldr	r0, [pc, #92]	@ (8002888 <getMotorRPM+0xa0>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	440b      	add	r3, r1
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	4403      	add	r3, r0
 800283a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800283e:	e01d      	b.n	800287c <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002840:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002844:	2b00      	cmp	r3, #0
 8002846:	dd16      	ble.n	8002876 <getMotorRPM+0x8e>
 8002848:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800284c:	2b07      	cmp	r3, #7
 800284e:	dc12      	bgt.n	8002876 <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	1e5a      	subs	r2, r3, #1
 8002854:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002858:	1cd9      	adds	r1, r3, #3
 800285a:	480b      	ldr	r0, [pc, #44]	@ (8002888 <getMotorRPM+0xa0>)
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	440b      	add	r3, r1
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	4403      	add	r3, r0
 800286c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002870:	e004      	b.n	800287c <getMotorRPM+0x94>
			break;
 8002872:	bf00      	nop
 8002874:	e000      	b.n	8002878 <getMotorRPM+0x90>
			}
			break;
 8002876:	bf00      	nop
		}
	}
	return -1;
 8002878:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	200002d8 	.word	0x200002d8

0800288c <usart_Init>:
0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330,
0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78,
};

void usart_Init(void) {
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8002890:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002894:	4905      	ldr	r1, [pc, #20]	@ (80028ac <usart_Init+0x20>)
 8002896:	4806      	ldr	r0, [pc, #24]	@ (80028b0 <usart_Init+0x24>)
 8002898:	f009 faa0 	bl	800bddc <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 800289c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028a0:	4904      	ldr	r1, [pc, #16]	@ (80028b4 <usart_Init+0x28>)
 80028a2:	4805      	ldr	r0, [pc, #20]	@ (80028b8 <usart_Init+0x2c>)
 80028a4:	f009 fa9a 	bl	800bddc <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80028a8:	bf00      	nop
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	200004e8 	.word	0x200004e8
 80028b0:	20000c4c 	.word	0x20000c4c
 80028b4:	200005e8 	.word	0x200005e8
 80028b8:	20000cdc 	.word	0x20000cdc

080028bc <usart_printf>:

void usart_printf(const char *fmt,...) {
 80028bc:	b40f      	push	{r0, r1, r2, r3}
 80028be:	b580      	push	{r7, lr}
 80028c0:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <usart_printf+0x3c>)
 80028c8:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 80028ca:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <usart_printf+0x3c>)
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	68b9      	ldr	r1, [r7, #8]
 80028d0:	480a      	ldr	r0, [pc, #40]	@ (80028fc <usart_printf+0x40>)
 80028d2:	f00d fba7 	bl	8010024 <vsiprintf>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b29a      	uxth	r2, r3
 80028da:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <usart_printf+0x44>)
 80028dc:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <usart_printf+0x44>)
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	4905      	ldr	r1, [pc, #20]	@ (80028fc <usart_printf+0x40>)
 80028e6:	4807      	ldr	r0, [pc, #28]	@ (8002904 <usart_printf+0x48>)
 80028e8:	f009 fa08 	bl	800bcfc <HAL_UART_Transmit_DMA>
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028f4:	b004      	add	sp, #16
 80028f6:	4770      	bx	lr
 80028f8:	20000738 	.word	0x20000738
 80028fc:	2000073c 	.word	0x2000073c
 8002900:	2000083c 	.word	0x2000083c
 8002904:	20000c4c 	.word	0x20000c4c

08002908 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
	if(huart==&huart6){
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a08      	ldr	r2, [pc, #32]	@ (8002938 <HAL_UARTEx_RxEventCallback+0x30>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d109      	bne.n	8002930 <HAL_UARTEx_RxEventCallback+0x28>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 800291c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002920:	4906      	ldr	r1, [pc, #24]	@ (800293c <HAL_UARTEx_RxEventCallback+0x34>)
 8002922:	4805      	ldr	r0, [pc, #20]	@ (8002938 <HAL_UARTEx_RxEventCallback+0x30>)
 8002924:	f009 fa5a 	bl	800bddc <HAL_UARTEx_ReceiveToIdle_DMA>
		memcpy(&cv_receive,&RxBuff_2,4);
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <HAL_UARTEx_RxEventCallback+0x34>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a04      	ldr	r2, [pc, #16]	@ (8002940 <HAL_UARTEx_RxEventCallback+0x38>)
 800292e:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	*/
}
 8002930:	bf00      	nop
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000cdc 	.word	0x20000cdc
 800293c:	200005e8 	.word	0x200005e8
 8002940:	20000734 	.word	0x20000734

08002944 <getRedX>:
	pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
	pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
	}


uint8_t getRedX(){
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
	return cv_receive.redx;
 8002948:	4b03      	ldr	r3, [pc, #12]	@ (8002958 <getRedX+0x14>)
 800294a:	781b      	ldrb	r3, [r3, #0]
}
 800294c:	4618      	mov	r0, r3
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000734 	.word	0x20000734

0800295c <getRedY>:
uint8_t getRedY(){
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
	return cv_receive.redy;
 8002960:	4b03      	ldr	r3, [pc, #12]	@ (8002970 <getRedY+0x14>)
 8002962:	785b      	ldrb	r3, [r3, #1]
}
 8002964:	4618      	mov	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	20000734 	.word	0x20000734

08002974 <getBlueX>:
uint8_t getBlueX(){
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
	return cv_receive.bluex;
 8002978:	4b03      	ldr	r3, [pc, #12]	@ (8002988 <getBlueX+0x14>)
 800297a:	789b      	ldrb	r3, [r3, #2]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	20000734 	.word	0x20000734

0800298c <getBlueY>:
uint8_t getBlueY(){
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
	return cv_receive.bluey;
 8002990:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <getBlueY+0x14>)
 8002992:	78db      	ldrb	r3, [r3, #3]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	20000734 	.word	0x20000734

080029a4 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	@ 0x28
 80029a8:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 80029aa:	2301      	movs	r3, #1
 80029ac:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80029b2:	2301      	movs	r3, #1
 80029b4:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 80029b6:	2300      	movs	r3, #0
 80029b8:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80029ce:	463b      	mov	r3, r7
 80029d0:	4619      	mov	r1, r3
 80029d2:	480f      	ldr	r0, [pc, #60]	@ (8002a10 <can_filter_init+0x6c>)
 80029d4:	f004 fd88 	bl	80074e8 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80029d8:	480d      	ldr	r0, [pc, #52]	@ (8002a10 <can_filter_init+0x6c>)
 80029da:	f004 fe65 	bl	80076a8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80029de:	2102      	movs	r1, #2
 80029e0:	480b      	ldr	r0, [pc, #44]	@ (8002a10 <can_filter_init+0x6c>)
 80029e2:	f005 f897 	bl	8007b14 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 80029e6:	230e      	movs	r3, #14
 80029e8:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 80029ea:	230e      	movs	r3, #14
 80029ec:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80029ee:	463b      	mov	r3, r7
 80029f0:	4619      	mov	r1, r3
 80029f2:	4808      	ldr	r0, [pc, #32]	@ (8002a14 <can_filter_init+0x70>)
 80029f4:	f004 fd78 	bl	80074e8 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80029f8:	4806      	ldr	r0, [pc, #24]	@ (8002a14 <can_filter_init+0x70>)
 80029fa:	f004 fe55 	bl	80076a8 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80029fe:	2102      	movs	r1, #2
 8002a00:	4804      	ldr	r0, [pc, #16]	@ (8002a14 <can_filter_init+0x70>)
 8002a02:	f005 f887 	bl	8007b14 <HAL_CAN_ActivateNotification>
}
 8002a06:	bf00      	nop
 8002a08:	3728      	adds	r7, #40	@ 0x28
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	200008c8 	.word	0x200008c8
 8002a14:	200008f0 	.word	0x200008f0

08002a18 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8002a22:	4a04      	ldr	r2, [pc, #16]	@ (8002a34 <imu_pwm_set+0x1c>)
 8002a24:	88fb      	ldrh	r3, [r7, #6]
 8002a26:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	40014400 	.word	0x40014400

08002a38 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	4613      	mov	r3, r2
 8002a44:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 8002a46:	4b27      	ldr	r3, [pc, #156]	@ (8002ae4 <RC_init+0xac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ae4 <RC_init+0xac>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a54:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8002a56:	4b23      	ldr	r3, [pc, #140]	@ (8002ae4 <RC_init+0xac>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68da      	ldr	r2, [r3, #12]
 8002a5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ae4 <RC_init+0xac>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0210 	orr.w	r2, r2, #16
 8002a64:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8002a66:	4b20      	ldr	r3, [pc, #128]	@ (8002ae8 <RC_init+0xb0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ae8 <RC_init+0xb0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0201 	bic.w	r2, r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002a76:	e007      	b.n	8002a88 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8002a78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <RC_init+0xb0>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ae8 <RC_init+0xb0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8002a88:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <RC_init+0xb0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d1f0      	bne.n	8002a78 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8002a96:	4b14      	ldr	r3, [pc, #80]	@ (8002ae8 <RC_init+0xb0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <RC_init+0xb4>)
 8002a9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8002a9e:	4b12      	ldr	r3, [pc, #72]	@ (8002ae8 <RC_init+0xb0>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <RC_init+0xb0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8002aae:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae8 <RC_init+0xb0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	88fa      	ldrh	r2, [r7, #6]
 8002ab4:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8002ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ae8 <RC_init+0xb0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <RC_init+0xb0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002ac4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8002ac6:	4b08      	ldr	r3, [pc, #32]	@ (8002ae8 <RC_init+0xb0>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <RC_init+0xb0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f042 0201 	orr.w	r2, r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000c94 	.word	0x20000c94
 8002ae8:	20000de4 	.word	0x20000de4
 8002aec:	40004804 	.word	0x40004804

08002af0 <findingKIScaler>:
float maxPowerLimitor = 0;
float powerScaler = 0;
int16_t M3508Current[4] = {0, 0, 0, 0};
int16_t M3508ScaledCurrent[4] = {0, 0, 0, 0};

void findingKIScaler() {
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
	uint32_t sum = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002afa:	2300      	movs	r3, #0
 8002afc:	603b      	str	r3, [r7, #0]
 8002afe:	e019      	b.n	8002b34 <findingKIScaler+0x44>
		if (M3508Current[i] > 0) {
 8002b00:	4a25      	ldr	r2, [pc, #148]	@ (8002b98 <findingKIScaler+0xa8>)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	dd08      	ble.n	8002b1e <findingKIScaler+0x2e>
			sum += M3508Current[i];
 8002b0c:	4a22      	ldr	r2, [pc, #136]	@ (8002b98 <findingKIScaler+0xa8>)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b14:	461a      	mov	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4413      	add	r3, r2
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	e007      	b.n	8002b2e <findingKIScaler+0x3e>
		} else {
			sum -= M3508Current[i];
 8002b1e:	4a1e      	ldr	r2, [pc, #120]	@ (8002b98 <findingKIScaler+0xa8>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	1a9b      	subs	r3, r3, r2
 8002b2c:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 4; i++) {
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	3301      	adds	r3, #1
 8002b32:	603b      	str	r3, [r7, #0]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b03      	cmp	r3, #3
 8002b38:	dde2      	ble.n	8002b00 <findingKIScaler+0x10>
		}
	}
	powerScaler = maxPowerLimitor/sum;
 8002b3a:	4b18      	ldr	r3, [pc, #96]	@ (8002b9c <findingKIScaler+0xac>)
 8002b3c:	edd3 6a00 	vldr	s13, [r3]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b4e:	4b14      	ldr	r3, [pc, #80]	@ (8002ba0 <findingKIScaler+0xb0>)
 8002b50:	edc3 7a00 	vstr	s15, [r3]
	if (powerScaler > 1) {
 8002b54:	4b12      	ldr	r3, [pc, #72]	@ (8002ba0 <findingKIScaler+0xb0>)
 8002b56:	edd3 7a00 	vldr	s15, [r3]
 8002b5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b66:	dd04      	ble.n	8002b72 <findingKIScaler+0x82>
		powerScaler = 1;
 8002b68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <findingKIScaler+0xb0>)
 8002b6a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b6e:	601a      	str	r2, [r3, #0]
	} else if (powerScaler < 0) {
		powerScaler = 0;
	}
	// usart_printf("%f/%d = %f\r\n", maxPowerLimitor, sum, powerScaler);
}
 8002b70:	e00c      	b.n	8002b8c <findingKIScaler+0x9c>
	} else if (powerScaler < 0) {
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <findingKIScaler+0xb0>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	d400      	bmi.n	8002b84 <findingKIScaler+0x94>
}
 8002b82:	e003      	b.n	8002b8c <findingKIScaler+0x9c>
		powerScaler = 0;
 8002b84:	4b06      	ldr	r3, [pc, #24]	@ (8002ba0 <findingKIScaler+0xb0>)
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	601a      	str	r2, [r3, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	20000848 	.word	0x20000848
 8002b9c:	20000840 	.word	0x20000840
 8002ba0:	20000844 	.word	0x20000844
 8002ba4:	00000000 	.word	0x00000000

08002ba8 <settingMaxCurrentVal>:

void settingMaxCurrentVal (float bufferValFromPMM, uint16_t powerLimit) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	ed87 0a01 	vstr	s0, [r7, #4]
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	807b      	strh	r3, [r7, #2]

	// uint16_t adjustedPowerLimit = powerLimit - 6;

	float maxPowerForRobot = 0;
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
	if (powerLimit > 100) {
 8002bbc:	887b      	ldrh	r3, [r7, #2]
 8002bbe:	2b64      	cmp	r3, #100	@ 0x64
 8002bc0:	d902      	bls.n	8002bc8 <settingMaxCurrentVal+0x20>
		maxPowerForRobot = 4;
 8002bc2:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8002bc6:	60fb      	str	r3, [r7, #12]
	} if (powerLimit >= 60 && powerLimit <=100) {
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	2b3b      	cmp	r3, #59	@ 0x3b
 8002bcc:	d91c      	bls.n	8002c08 <settingMaxCurrentVal+0x60>
 8002bce:	887b      	ldrh	r3, [r7, #2]
 8002bd0:	2b64      	cmp	r3, #100	@ 0x64
 8002bd2:	d819      	bhi.n	8002c08 <settingMaxCurrentVal+0x60>
		maxPowerForRobot = (0.05*powerLimit)-1;
 8002bd4:	887b      	ldrh	r3, [r7, #2]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fd fca4 	bl	8000524 <__aeabi_i2d>
 8002bdc:	a33f      	add	r3, pc, #252	@ (adr r3, 8002cdc <settingMaxCurrentVal+0x134>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fd09 	bl	80005f8 <__aeabi_dmul>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	4b35      	ldr	r3, [pc, #212]	@ (8002cc8 <settingMaxCurrentVal+0x120>)
 8002bf4:	f7fd fb48 	bl	8000288 <__aeabi_dsub>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	4610      	mov	r0, r2
 8002bfe:	4619      	mov	r1, r3
 8002c00:	f7fd ffbc 	bl	8000b7c <__aeabi_d2f>
 8002c04:	4603      	mov	r3, r0
 8002c06:	60fb      	str	r3, [r7, #12]
	} if (powerLimit < 60) {
 8002c08:	887b      	ldrh	r3, [r7, #2]
 8002c0a:	2b3b      	cmp	r3, #59	@ 0x3b
 8002c0c:	d802      	bhi.n	8002c14 <settingMaxCurrentVal+0x6c>
		maxPowerForRobot = 2;
 8002c0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002c12:	60fb      	str	r3, [r7, #12]
	}

	if (bufferValFromPMM > 50) {
 8002c14:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c18:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002ccc <settingMaxCurrentVal+0x124>
 8002c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c24:	dd03      	ble.n	8002c2e <settingMaxCurrentVal+0x86>
		maxPowerLimitor = 8192;
 8002c26:	4b2a      	ldr	r3, [pc, #168]	@ (8002cd0 <settingMaxCurrentVal+0x128>)
 8002c28:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8002c2c:	601a      	str	r2, [r3, #0]
	} if (bufferValFromPMM > 5 && bufferValFromPMM <= 50) {
 8002c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c32:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3e:	dd22      	ble.n	8002c86 <settingMaxCurrentVal+0xde>
 8002c40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c44:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002ccc <settingMaxCurrentVal+0x124>
 8002c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	d819      	bhi.n	8002c86 <settingMaxCurrentVal+0xde>
		maxPowerLimitor = (179.8*bufferValFromPMM) - 798.0f;
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd fc78 	bl	8000548 <__aeabi_f2d>
 8002c58:	a319      	add	r3, pc, #100	@ (adr r3, 8002cc0 <settingMaxCurrentVal+0x118>)
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f7fd fccb 	bl	80005f8 <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <settingMaxCurrentVal+0x12c>)
 8002c70:	f7fd fb0a 	bl	8000288 <__aeabi_dsub>
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	4610      	mov	r0, r2
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	f7fd ff7e 	bl	8000b7c <__aeabi_d2f>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4a13      	ldr	r2, [pc, #76]	@ (8002cd0 <settingMaxCurrentVal+0x128>)
 8002c84:	6013      	str	r3, [r2, #0]
	} if (bufferValFromPMM <= 5) {
 8002c86:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c8a:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8002c8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c96:	d802      	bhi.n	8002c9e <settingMaxCurrentVal+0xf6>
		maxPowerLimitor = 0.00001;
 8002c98:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd0 <settingMaxCurrentVal+0x128>)
 8002c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8002cd8 <settingMaxCurrentVal+0x130>)
 8002c9c:	601a      	str	r2, [r3, #0]
	}
	maxPowerLimitor = maxPowerLimitor * maxPowerForRobot;
 8002c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002cd0 <settingMaxCurrentVal+0x128>)
 8002ca0:	ed93 7a00 	vldr	s14, [r3]
 8002ca4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cac:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <settingMaxCurrentVal+0x128>)
 8002cae:	edc3 7a00 	vstr	s15, [r3]
	// maxPowerLimitor = 8192*8;
}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	f3af 8000 	nop.w
 8002cc0:	9999999a 	.word	0x9999999a
 8002cc4:	40667999 	.word	0x40667999
 8002cc8:	3ff00000 	.word	0x3ff00000
 8002ccc:	42480000 	.word	0x42480000
 8002cd0:	20000840 	.word	0x20000840
 8002cd4:	4088f000 	.word	0x4088f000
 8002cd8:	3727c5ac 	.word	0x3727c5ac
 8002cdc:	9999999a 	.word	0x9999999a
 8002ce0:	3fa99999 	.word	0x3fa99999

08002ce4 <driveMotorRPM>:

void driveMotorRPM (int16_t RPMtarget[], PID_preset_t preset) {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	eef0 6a40 	vmov.f32	s13, s0
 8002cf0:	eeb0 7a60 	vmov.f32	s14, s1
 8002cf4:	eef0 7a41 	vmov.f32	s15, s2
 8002cf8:	edc7 6a00 	vstr	s13, [r7]
 8002cfc:	ed87 7a01 	vstr	s14, [r7, #4]
 8002d00:	edc7 7a02 	vstr	s15, [r7, #8]
	for (int i = 0; i < 4; i++) {
 8002d04:	2300      	movs	r3, #0
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	e024      	b.n	8002d54 <driveMotorRPM+0x70>
		M3508Current[i] = calcRPM_PID(Bus1, M3508, i+1, RPMtarget[i], preset);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	3301      	adds	r3, #1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	b259      	sxtb	r1, r3
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d20:	edd7 6a00 	vldr	s13, [r7]
 8002d24:	ed97 7a01 	vldr	s14, [r7, #4]
 8002d28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d2c:	eeb0 0a66 	vmov.f32	s0, s13
 8002d30:	eef0 0a47 	vmov.f32	s1, s14
 8002d34:	eeb0 1a67 	vmov.f32	s2, s15
 8002d38:	460a      	mov	r2, r1
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f7ff f99f 	bl	8002080 <calcRPM_PID>
 8002d42:	4603      	mov	r3, r0
 8002d44:	b219      	sxth	r1, r3
 8002d46:	4a07      	ldr	r2, [pc, #28]	@ (8002d64 <driveMotorRPM+0x80>)
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	3301      	adds	r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	ddd7      	ble.n	8002d0a <driveMotorRPM+0x26>
	}
	// M3508Current[motorID-1] = calcRPM_PID(Bus2, M3508, motorID, RPMtarget, preset);
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	20000848 	.word	0x20000848

08002d68 <ScaleAllCurrentValuesForDriveMotors>:

void ScaleAllCurrentValuesForDriveMotors () {
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
	findingKIScaler();
 8002d6e:	f7ff febf 	bl	8002af0 <findingKIScaler>
	for (int i = 0; i < 4; i++) {
 8002d72:	2300      	movs	r3, #0
 8002d74:	607b      	str	r3, [r7, #4]
 8002d76:	e018      	b.n	8002daa <ScaleAllCurrentValuesForDriveMotors+0x42>
		M3508ScaledCurrent[i] = M3508Current[i] * powerScaler;
 8002d78:	4a10      	ldr	r2, [pc, #64]	@ (8002dbc <ScaleAllCurrentValuesForDriveMotors+0x54>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8002d80:	ee07 3a90 	vmov	s15, r3
 8002d84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d88:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc0 <ScaleAllCurrentValuesForDriveMotors+0x58>)
 8002d8a:	edd3 7a00 	vldr	s15, [r3]
 8002d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d92:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d96:	ee17 3a90 	vmov	r3, s15
 8002d9a:	b219      	sxth	r1, r3
 8002d9c:	4a09      	ldr	r2, [pc, #36]	@ (8002dc4 <ScaleAllCurrentValuesForDriveMotors+0x5c>)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 4; i++) {
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	3301      	adds	r3, #1
 8002da8:	607b      	str	r3, [r7, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b03      	cmp	r3, #3
 8002dae:	dde3      	ble.n	8002d78 <ScaleAllCurrentValuesForDriveMotors+0x10>
	}
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000848 	.word	0x20000848
 8002dc0:	20000844 	.word	0x20000844
 8002dc4:	20000850 	.word	0x20000850

08002dc8 <createDriveMotorCAN>:

void createDriveMotorCAN() {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
	for (int j = 0; j < 4; j++) {
 8002dce:	2300      	movs	r3, #0
 8002dd0:	607b      	str	r3, [r7, #4]
 8002dd2:	e00f      	b.n	8002df4 <createDriveMotorCAN+0x2c>
		CAN_setMotorCtrlVal(Bus1, M3508, j+1, M3508ScaledCurrent[j]);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	b25a      	sxtb	r2, r3
 8002dde:	4909      	ldr	r1, [pc, #36]	@ (8002e04 <createDriveMotorCAN+0x3c>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002de6:	2101      	movs	r1, #1
 8002de8:	2001      	movs	r0, #1
 8002dea:	f7fe ff4b 	bl	8001c84 <CAN_setMotorCtrlVal>
	for (int j = 0; j < 4; j++) {
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3301      	adds	r3, #1
 8002df2:	607b      	str	r3, [r7, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	ddec      	ble.n	8002dd4 <createDriveMotorCAN+0xc>
	}
}
 8002dfa:	bf00      	nop
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	20000850 	.word	0x20000850

08002e08 <bufferLimitedDriveMode>:

void bufferLimitedDriveMode(int16_t RPMtarget[], PID_preset_t preset) {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b084      	sub	sp, #16
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	eef0 6a40 	vmov.f32	s13, s0
 8002e14:	eeb0 7a60 	vmov.f32	s14, s1
 8002e18:	eef0 7a41 	vmov.f32	s15, s2
 8002e1c:	edc7 6a00 	vstr	s13, [r7]
 8002e20:	ed87 7a01 	vstr	s14, [r7, #4]
 8002e24:	edc7 7a02 	vstr	s15, [r7, #8]
	driveMotorRPM(RPMtarget, preset);
 8002e28:	edd7 6a00 	vldr	s13, [r7]
 8002e2c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e30:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e34:	eeb0 0a66 	vmov.f32	s0, s13
 8002e38:	eef0 0a47 	vmov.f32	s1, s14
 8002e3c:	eeb0 1a67 	vmov.f32	s2, s15
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f7ff ff4f 	bl	8002ce4 <driveMotorRPM>
	findingKIScaler();
 8002e46:	f7ff fe53 	bl	8002af0 <findingKIScaler>
	ScaleAllCurrentValuesForDriveMotors();
 8002e4a:	f7ff ff8d 	bl	8002d68 <ScaleAllCurrentValuesForDriveMotors>
	createDriveMotorCAN();
 8002e4e:	f7ff ffbb 	bl	8002dc8 <createDriveMotorCAN>
}
 8002e52:	bf00      	nop
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <graphingFunction>:
int8_t qButtonDown = 0;
int8_t eButtonDown = 0;
int8_t rButtonDown = 0;
float movementCounter[4] = {0, 0, 0, 0};

float graphingFunction (float x) {
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	ed87 0a01 	vstr	s0, [r7, #4]
	float y = x;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	60fb      	str	r3, [r7, #12]
	return y;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	ee07 3a90 	vmov	s15, r3
}
 8002e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <graphingFunctionEdgeCase>:

float graphingFunctionEdgeCase (float x) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	ed87 0a01 	vstr	s0, [r7, #4]
	float y = graphingFunction(x);
 8002e86:	ed97 0a01 	vldr	s0, [r7, #4]
 8002e8a:	f7ff ffe6 	bl	8002e5a <graphingFunction>
 8002e8e:	ed87 0a03 	vstr	s0, [r7, #12]
	if (x <= 0) {
 8002e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e9e:	d803      	bhi.n	8002ea8 <graphingFunctionEdgeCase+0x2c>
		y = 0;
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	60fb      	str	r3, [r7, #12]
 8002ea6:	e00e      	b.n	8002ec6 <graphingFunctionEdgeCase+0x4a>
	} else if (x > 1) {
 8002ea8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002eac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	dd05      	ble.n	8002ec6 <graphingFunctionEdgeCase+0x4a>
		y = graphingFunction(1.0);
 8002eba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002ebe:	f7ff ffcc 	bl	8002e5a <graphingFunction>
 8002ec2:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	return y;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	ee07 3a90 	vmov	s15, r3
}
 8002ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <allCheShit>:

void allCheShit(uint8_t w, uint8_t a, uint8_t s, uint8_t d, uint8_t rotation, int16_t rcRPM[], int8_t chassisVsTurretDrive, float convertedAngle, PID_preset_t chassisPreset) {
 8002ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002edc:	b090      	sub	sp, #64	@ 0x40
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	4604      	mov	r4, r0
 8002ee2:	4608      	mov	r0, r1
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	ed87 0a04 	vstr	s0, [r7, #16]
 8002eec:	eef0 6a60 	vmov.f32	s13, s1
 8002ef0:	eeb0 7a41 	vmov.f32	s14, s2
 8002ef4:	eef0 7a61 	vmov.f32	s15, s3
 8002ef8:	4623      	mov	r3, r4
 8002efa:	75fb      	strb	r3, [r7, #23]
 8002efc:	4603      	mov	r3, r0
 8002efe:	75bb      	strb	r3, [r7, #22]
 8002f00:	460b      	mov	r3, r1
 8002f02:	757b      	strb	r3, [r7, #21]
 8002f04:	4613      	mov	r3, r2
 8002f06:	753b      	strb	r3, [r7, #20]
 8002f08:	edc7 6a01 	vstr	s13, [r7, #4]
 8002f0c:	ed87 7a02 	vstr	s14, [r7, #8]
 8002f10:	edc7 7a03 	vstr	s15, [r7, #12]
	float scaledMovementCounter[4] = {0, 0, 0, 0};
 8002f14:	f107 0320 	add.w	r3, r7, #32
 8002f18:	2200      	movs	r2, #0
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	605a      	str	r2, [r3, #4]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	60da      	str	r2, [r3, #12]
	int16_t xJoystickDirection = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	877b      	strh	r3, [r7, #58]	@ 0x3a
	int16_t yJoystickDirection = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	873b      	strh	r3, [r7, #56]	@ 0x38
	int16_t rotationOfChassis = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t chassisTargetRPM[4] = {0, 0, 0, 0};
 8002f2e:	f107 0318 	add.w	r3, r7, #24
 8002f32:	2200      	movs	r2, #0
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	605a      	str	r2, [r3, #4]

	if (w == 1) {
 8002f38:	7dfb      	ldrb	r3, [r7, #23]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d10a      	bne.n	8002f54 <allCheShit+0x7c>
		movementCounter[0]+= increaseSpeed;
 8002f3e:	4b3a      	ldr	r3, [pc, #232]	@ (8003028 <allCheShit+0x150>)
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800302c <allCheShit+0x154>
 8002f48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f4c:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <allCheShit+0x150>)
 8002f4e:	edc3 7a00 	vstr	s15, [r3]
 8002f52:	e009      	b.n	8002f68 <allCheShit+0x90>
	} else {
		movementCounter[0]-= decreaseSpeed;
 8002f54:	4b34      	ldr	r3, [pc, #208]	@ (8003028 <allCheShit+0x150>)
 8002f56:	edd3 7a00 	vldr	s15, [r3]
 8002f5a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8003030 <allCheShit+0x158>
 8002f5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f62:	4b31      	ldr	r3, [pc, #196]	@ (8003028 <allCheShit+0x150>)
 8002f64:	edc3 7a00 	vstr	s15, [r3]
	}
	if (a == 1) {
 8002f68:	7dbb      	ldrb	r3, [r7, #22]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d10a      	bne.n	8002f84 <allCheShit+0xac>
		movementCounter[1]+= increaseSpeed;
 8002f6e:	4b2e      	ldr	r3, [pc, #184]	@ (8003028 <allCheShit+0x150>)
 8002f70:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f74:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 800302c <allCheShit+0x154>
 8002f78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003028 <allCheShit+0x150>)
 8002f7e:	edc3 7a01 	vstr	s15, [r3, #4]
 8002f82:	e009      	b.n	8002f98 <allCheShit+0xc0>
	} else {
		movementCounter[1]-= decreaseSpeed;
 8002f84:	4b28      	ldr	r3, [pc, #160]	@ (8003028 <allCheShit+0x150>)
 8002f86:	edd3 7a01 	vldr	s15, [r3, #4]
 8002f8a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003030 <allCheShit+0x158>
 8002f8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002f92:	4b25      	ldr	r3, [pc, #148]	@ (8003028 <allCheShit+0x150>)
 8002f94:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	if (s == 1) {
 8002f98:	7d7b      	ldrb	r3, [r7, #21]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10a      	bne.n	8002fb4 <allCheShit+0xdc>
		movementCounter[2]+= increaseSpeed;
 8002f9e:	4b22      	ldr	r3, [pc, #136]	@ (8003028 <allCheShit+0x150>)
 8002fa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fa4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800302c <allCheShit+0x154>
 8002fa8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fac:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <allCheShit+0x150>)
 8002fae:	edc3 7a02 	vstr	s15, [r3, #8]
 8002fb2:	e009      	b.n	8002fc8 <allCheShit+0xf0>
	} else {
		movementCounter[2]-= decreaseSpeed;
 8002fb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003028 <allCheShit+0x150>)
 8002fb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8002fba:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8003030 <allCheShit+0x158>
 8002fbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002fc2:	4b19      	ldr	r3, [pc, #100]	@ (8003028 <allCheShit+0x150>)
 8002fc4:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	if (d == 1) {
 8002fc8:	7d3b      	ldrb	r3, [r7, #20]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10a      	bne.n	8002fe4 <allCheShit+0x10c>
		movementCounter[3]+= increaseSpeed;
 8002fce:	4b16      	ldr	r3, [pc, #88]	@ (8003028 <allCheShit+0x150>)
 8002fd0:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fd4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800302c <allCheShit+0x154>
 8002fd8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fdc:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <allCheShit+0x150>)
 8002fde:	edc3 7a03 	vstr	s15, [r3, #12]
 8002fe2:	e009      	b.n	8002ff8 <allCheShit+0x120>
	} else {
		movementCounter[3]-= decreaseSpeed;
 8002fe4:	4b10      	ldr	r3, [pc, #64]	@ (8003028 <allCheShit+0x150>)
 8002fe6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fea:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8003030 <allCheShit+0x158>
 8002fee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8003028 <allCheShit+0x150>)
 8002ff4:	edc3 7a03 	vstr	s15, [r3, #12]
	}

	// usart_printf("1\r\n");

	// usart_printf("2\r\n");
	for (int i = 0; i < 4; i++) {
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ffc:	e042      	b.n	8003084 <allCheShit+0x1ac>
		if (movementCounter[i] > 1) {
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8003028 <allCheShit+0x150>)
 8003000:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800300e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003016:	dd0d      	ble.n	8003034 <allCheShit+0x15c>
			movementCounter[i] = 1;
 8003018:	4a03      	ldr	r2, [pc, #12]	@ (8003028 <allCheShit+0x150>)
 800301a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	e017      	b.n	8003058 <allCheShit+0x180>
 8003028:	20000858 	.word	0x20000858
 800302c:	3c03126f 	.word	0x3c03126f
 8003030:	3ca3d70a 	.word	0x3ca3d70a
		} else if (movementCounter[i] < 0) {
 8003034:	4ad6      	ldr	r2, [pc, #856]	@ (8003390 <allCheShit+0x4b8>)
 8003036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	edd3 7a00 	vldr	s15, [r3]
 8003040:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003048:	d506      	bpl.n	8003058 <allCheShit+0x180>
			movementCounter[i] = 0;
 800304a:	4ad1      	ldr	r2, [pc, #836]	@ (8003390 <allCheShit+0x4b8>)
 800304c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	601a      	str	r2, [r3, #0]
		}
		scaledMovementCounter[i] = graphingFunctionEdgeCase(movementCounter[i]);
 8003058:	4acd      	ldr	r2, [pc, #820]	@ (8003390 <allCheShit+0x4b8>)
 800305a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	edd3 7a00 	vldr	s15, [r3]
 8003064:	eeb0 0a67 	vmov.f32	s0, s15
 8003068:	f7ff ff08 	bl	8002e7c <graphingFunctionEdgeCase>
 800306c:	eef0 7a40 	vmov.f32	s15, s0
 8003070:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	3340      	adds	r3, #64	@ 0x40
 8003076:	443b      	add	r3, r7
 8003078:	3b20      	subs	r3, #32
 800307a:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 4; i++) {
 800307e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003080:	3301      	adds	r3, #1
 8003082:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003086:	2b03      	cmp	r3, #3
 8003088:	ddb9      	ble.n	8002ffe <allCheShit+0x126>
	}

	int16_t rcWS = 9005.7*((scaledMovementCounter[0]-scaledMovementCounter[2]));
 800308a:	ed97 7a08 	vldr	s14, [r7, #32]
 800308e:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003096:	ee17 0a90 	vmov	r0, s15
 800309a:	f7fd fa55 	bl	8000548 <__aeabi_f2d>
 800309e:	a3ba      	add	r3, pc, #744	@ (adr r3, 8003388 <allCheShit+0x4b0>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd faa8 	bl	80005f8 <__aeabi_dmul>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	f7fd fd3c 	bl	8000b2c <__aeabi_d2iz>
 80030b4:	4603      	mov	r3, r0
 80030b6:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int16_t rcAD = 9005.7*((scaledMovementCounter[3]-scaledMovementCounter[1]));
 80030b8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80030bc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80030c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c4:	ee17 0a90 	vmov	r0, s15
 80030c8:	f7fd fa3e 	bl	8000548 <__aeabi_f2d>
 80030cc:	a3ae      	add	r3, pc, #696	@ (adr r3, 8003388 <allCheShit+0x4b0>)
 80030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d2:	f7fd fa91 	bl	80005f8 <__aeabi_dmul>
 80030d6:	4602      	mov	r2, r0
 80030d8:	460b      	mov	r3, r1
 80030da:	4610      	mov	r0, r2
 80030dc:	4619      	mov	r1, r3
 80030de:	f7fd fd25 	bl	8000b2c <__aeabi_d2iz>
 80030e2:	4603      	mov	r3, r0
 80030e4:	867b      	strh	r3, [r7, #50]	@ 0x32


	xJoystickDirection = (rcRPM[2]*cos(convertedAngle) - rcRPM[3]*sin(convertedAngle) + (rcAD*cos(convertedAngle) - rcWS*sin(convertedAngle)));
 80030e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030e8:	3304      	adds	r3, #4
 80030ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fd fa18 	bl	8000524 <__aeabi_i2d>
 80030f4:	4604      	mov	r4, r0
 80030f6:	460d      	mov	r5, r1
 80030f8:	6938      	ldr	r0, [r7, #16]
 80030fa:	f7fd fa25 	bl	8000548 <__aeabi_f2d>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	ec43 2b10 	vmov	d0, r2, r3
 8003106:	f00d fc6f 	bl	80109e8 <cos>
 800310a:	ec53 2b10 	vmov	r2, r3, d0
 800310e:	4620      	mov	r0, r4
 8003110:	4629      	mov	r1, r5
 8003112:	f7fd fa71 	bl	80005f8 <__aeabi_dmul>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4690      	mov	r8, r2
 800311c:	4699      	mov	r9, r3
 800311e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003120:	3306      	adds	r3, #6
 8003122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd f9fc 	bl	8000524 <__aeabi_i2d>
 800312c:	4604      	mov	r4, r0
 800312e:	460d      	mov	r5, r1
 8003130:	6938      	ldr	r0, [r7, #16]
 8003132:	f7fd fa09 	bl	8000548 <__aeabi_f2d>
 8003136:	4602      	mov	r2, r0
 8003138:	460b      	mov	r3, r1
 800313a:	ec43 2b10 	vmov	d0, r2, r3
 800313e:	f00d fca7 	bl	8010a90 <sin>
 8003142:	ec53 2b10 	vmov	r2, r3, d0
 8003146:	4620      	mov	r0, r4
 8003148:	4629      	mov	r1, r5
 800314a:	f7fd fa55 	bl	80005f8 <__aeabi_dmul>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4640      	mov	r0, r8
 8003154:	4649      	mov	r1, r9
 8003156:	f7fd f897 	bl	8000288 <__aeabi_dsub>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4690      	mov	r8, r2
 8003160:	4699      	mov	r9, r3
 8003162:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd f9dc 	bl	8000524 <__aeabi_i2d>
 800316c:	4604      	mov	r4, r0
 800316e:	460d      	mov	r5, r1
 8003170:	6938      	ldr	r0, [r7, #16]
 8003172:	f7fd f9e9 	bl	8000548 <__aeabi_f2d>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	ec43 2b10 	vmov	d0, r2, r3
 800317e:	f00d fc33 	bl	80109e8 <cos>
 8003182:	ec53 2b10 	vmov	r2, r3, d0
 8003186:	4620      	mov	r0, r4
 8003188:	4629      	mov	r1, r5
 800318a:	f7fd fa35 	bl	80005f8 <__aeabi_dmul>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	4692      	mov	sl, r2
 8003194:	469b      	mov	fp, r3
 8003196:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd f9c2 	bl	8000524 <__aeabi_i2d>
 80031a0:	4604      	mov	r4, r0
 80031a2:	460d      	mov	r5, r1
 80031a4:	6938      	ldr	r0, [r7, #16]
 80031a6:	f7fd f9cf 	bl	8000548 <__aeabi_f2d>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	ec43 2b10 	vmov	d0, r2, r3
 80031b2:	f00d fc6d 	bl	8010a90 <sin>
 80031b6:	ec53 2b10 	vmov	r2, r3, d0
 80031ba:	4620      	mov	r0, r4
 80031bc:	4629      	mov	r1, r5
 80031be:	f7fd fa1b 	bl	80005f8 <__aeabi_dmul>
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	4650      	mov	r0, sl
 80031c8:	4659      	mov	r1, fp
 80031ca:	f7fd f85d 	bl	8000288 <__aeabi_dsub>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	4640      	mov	r0, r8
 80031d4:	4649      	mov	r1, r9
 80031d6:	f7fd f859 	bl	800028c <__adddf3>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	4610      	mov	r0, r2
 80031e0:	4619      	mov	r1, r3
 80031e2:	f7fd fca3 	bl	8000b2c <__aeabi_d2iz>
 80031e6:	4603      	mov	r3, r0
 80031e8:	877b      	strh	r3, [r7, #58]	@ 0x3a
	yJoystickDirection = (rcRPM[2]*sin(convertedAngle) + rcRPM[3]*cos(convertedAngle) + (rcAD*sin(convertedAngle) + rcWS*cos(convertedAngle)));
 80031ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031ec:	3304      	adds	r3, #4
 80031ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f996 	bl	8000524 <__aeabi_i2d>
 80031f8:	4604      	mov	r4, r0
 80031fa:	460d      	mov	r5, r1
 80031fc:	6938      	ldr	r0, [r7, #16]
 80031fe:	f7fd f9a3 	bl	8000548 <__aeabi_f2d>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	ec43 2b10 	vmov	d0, r2, r3
 800320a:	f00d fc41 	bl	8010a90 <sin>
 800320e:	ec53 2b10 	vmov	r2, r3, d0
 8003212:	4620      	mov	r0, r4
 8003214:	4629      	mov	r1, r5
 8003216:	f7fd f9ef 	bl	80005f8 <__aeabi_dmul>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4690      	mov	r8, r2
 8003220:	4699      	mov	r9, r3
 8003222:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003224:	3306      	adds	r3, #6
 8003226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f97a 	bl	8000524 <__aeabi_i2d>
 8003230:	4604      	mov	r4, r0
 8003232:	460d      	mov	r5, r1
 8003234:	6938      	ldr	r0, [r7, #16]
 8003236:	f7fd f987 	bl	8000548 <__aeabi_f2d>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	ec43 2b10 	vmov	d0, r2, r3
 8003242:	f00d fbd1 	bl	80109e8 <cos>
 8003246:	ec53 2b10 	vmov	r2, r3, d0
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fd f9d3 	bl	80005f8 <__aeabi_dmul>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4640      	mov	r0, r8
 8003258:	4649      	mov	r1, r9
 800325a:	f7fd f817 	bl	800028c <__adddf3>
 800325e:	4602      	mov	r2, r0
 8003260:	460b      	mov	r3, r1
 8003262:	4690      	mov	r8, r2
 8003264:	4699      	mov	r9, r3
 8003266:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd f95a 	bl	8000524 <__aeabi_i2d>
 8003270:	4604      	mov	r4, r0
 8003272:	460d      	mov	r5, r1
 8003274:	6938      	ldr	r0, [r7, #16]
 8003276:	f7fd f967 	bl	8000548 <__aeabi_f2d>
 800327a:	4602      	mov	r2, r0
 800327c:	460b      	mov	r3, r1
 800327e:	ec43 2b10 	vmov	d0, r2, r3
 8003282:	f00d fc05 	bl	8010a90 <sin>
 8003286:	ec53 2b10 	vmov	r2, r3, d0
 800328a:	4620      	mov	r0, r4
 800328c:	4629      	mov	r1, r5
 800328e:	f7fd f9b3 	bl	80005f8 <__aeabi_dmul>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4692      	mov	sl, r2
 8003298:	469b      	mov	fp, r3
 800329a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd f940 	bl	8000524 <__aeabi_i2d>
 80032a4:	4604      	mov	r4, r0
 80032a6:	460d      	mov	r5, r1
 80032a8:	6938      	ldr	r0, [r7, #16]
 80032aa:	f7fd f94d 	bl	8000548 <__aeabi_f2d>
 80032ae:	4602      	mov	r2, r0
 80032b0:	460b      	mov	r3, r1
 80032b2:	ec43 2b10 	vmov	d0, r2, r3
 80032b6:	f00d fb97 	bl	80109e8 <cos>
 80032ba:	ec53 2b10 	vmov	r2, r3, d0
 80032be:	4620      	mov	r0, r4
 80032c0:	4629      	mov	r1, r5
 80032c2:	f7fd f999 	bl	80005f8 <__aeabi_dmul>
 80032c6:	4602      	mov	r2, r0
 80032c8:	460b      	mov	r3, r1
 80032ca:	4650      	mov	r0, sl
 80032cc:	4659      	mov	r1, fp
 80032ce:	f7fc ffdd 	bl	800028c <__adddf3>
 80032d2:	4602      	mov	r2, r0
 80032d4:	460b      	mov	r3, r1
 80032d6:	4640      	mov	r0, r8
 80032d8:	4649      	mov	r1, r9
 80032da:	f7fc ffd7 	bl	800028c <__adddf3>
 80032de:	4602      	mov	r2, r0
 80032e0:	460b      	mov	r3, r1
 80032e2:	4610      	mov	r0, r2
 80032e4:	4619      	mov	r1, r3
 80032e6:	f7fd fc21 	bl	8000b2c <__aeabi_d2iz>
 80032ea:	4603      	mov	r3, r0
 80032ec:	873b      	strh	r3, [r7, #56]	@ 0x38
	rotationOfChassis = (rotationSpeedOfChassis * rotation) + rcRPM[0];
 80032ee:	f897 3060 	ldrb.w	r3, [r7, #96]	@ 0x60
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	f641 3358 	movw	r3, #7000	@ 0x1b58
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	fb12 f303 	smulbb	r3, r2, r3
 80032fe:	b29a      	uxth	r2, r3
 8003300:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003306:	b29b      	uxth	r3, r3
 8003308:	4413      	add	r3, r2
 800330a:	b29b      	uxth	r3, r3
 800330c:	86fb      	strh	r3, [r7, #54]	@ 0x36

	// usart_printf("3\r\n");
    chassisTargetRPM[0] = yJoystickDirection + rotationOfChassis + xJoystickDirection;
 800330e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003310:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003312:	4413      	add	r3, r2
 8003314:	b29a      	uxth	r2, r3
 8003316:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8003318:	4413      	add	r3, r2
 800331a:	b29b      	uxth	r3, r3
 800331c:	b21b      	sxth	r3, r3
 800331e:	833b      	strh	r3, [r7, #24]
    chassisTargetRPM[1] = yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8003320:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003322:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003324:	4413      	add	r3, r2
 8003326:	b29a      	uxth	r2, r3
 8003328:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	b29b      	uxth	r3, r3
 800332e:	b21b      	sxth	r3, r3
 8003330:	837b      	strh	r3, [r7, #26]
    chassisTargetRPM[2] = -yJoystickDirection + rotationOfChassis - xJoystickDirection;
 8003332:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003334:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	b29a      	uxth	r2, r3
 800333a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	b21b      	sxth	r3, r3
 8003342:	83bb      	strh	r3, [r7, #28]
    chassisTargetRPM[3] = -yJoystickDirection + rotationOfChassis + xJoystickDirection;
 8003344:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003346:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	b29a      	uxth	r2, r3
 800334c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800334e:	4413      	add	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	b21b      	sxth	r3, r3
 8003354:	83fb      	strh	r3, [r7, #30]

    bufferLimitedDriveMode(chassisTargetRPM, chassisPreset);
 8003356:	edd7 6a01 	vldr	s13, [r7, #4]
 800335a:	ed97 7a02 	vldr	s14, [r7, #8]
 800335e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003362:	f107 0318 	add.w	r3, r7, #24
 8003366:	eeb0 0a66 	vmov.f32	s0, s13
 800336a:	eef0 0a47 	vmov.f32	s1, s14
 800336e:	eeb0 1a67 	vmov.f32	s2, s15
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fd48 	bl	8002e08 <bufferLimitedDriveMode>

}
 8003378:	bf00      	nop
 800337a:	3740      	adds	r7, #64	@ 0x40
 800337c:	46bd      	mov	sp, r7
 800337e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003382:	bf00      	nop
 8003384:	f3af 8000 	nop.w
 8003388:	9999999a 	.word	0x9999999a
 800338c:	40c196d9 	.word	0x40c196d9
 8003390:	20000858 	.word	0x20000858

08003394 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
    osDelay(500);
 800339c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80033a0:	f009 ff7c 	bl	800d29c <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 80033a4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8003448 <imu_temp_control_task+0xb4>
 80033a8:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 800344c <imu_temp_control_task+0xb8>
 80033ac:	4a28      	ldr	r2, [pc, #160]	@ (8003450 <imu_temp_control_task+0xbc>)
 80033ae:	2100      	movs	r1, #0
 80033b0:	4828      	ldr	r0, [pc, #160]	@ (8003454 <imu_temp_control_task+0xc0>)
 80033b2:	f001 ff07 	bl	80051c4 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80033b6:	4b28      	ldr	r3, [pc, #160]	@ (8003458 <imu_temp_control_task+0xc4>)
 80033b8:	2210      	movs	r2, #16
 80033ba:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80033bc:	4826      	ldr	r0, [pc, #152]	@ (8003458 <imu_temp_control_task+0xc4>)
 80033be:	f007 f984 	bl	800a6ca <HAL_SPI_Init>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80033c8:	f001 fef6 	bl	80051b8 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80033cc:	2000      	movs	r0, #0
 80033ce:	f00b f883 	bl	800e4d8 <pcTaskGetName>
 80033d2:	4603      	mov	r3, r0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f00b f913 	bl	800e600 <xTaskGetHandle>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a1f      	ldr	r2, [pc, #124]	@ (800345c <imu_temp_control_task+0xc8>)
 80033de:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 80033e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003460 <imu_temp_control_task+0xcc>)
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 80033e6:	bf00      	nop
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033ec:	2001      	movs	r0, #1
 80033ee:	f00b fd33 	bl	800ee58 <ulTaskNotifyTake>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d1f7      	bne.n	80033e8 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 80033f8:	f7fe f8c0 	bl	800157c <IMU_get_temp>
 80033fc:	eef0 7a40 	vmov.f32	s15, s0
 8003400:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8003464 <imu_temp_control_task+0xd0>
 8003404:	eeb0 0a67 	vmov.f32	s0, s15
 8003408:	4812      	ldr	r0, [pc, #72]	@ (8003454 <imu_temp_control_task+0xc0>)
 800340a:	f001 ff32 	bl	8005272 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 800340e:	4b11      	ldr	r3, [pc, #68]	@ (8003454 <imu_temp_control_task+0xc0>)
 8003410:	edd3 7a08 	vldr	s15, [r3, #32]
 8003414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800341c:	d503      	bpl.n	8003426 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 800341e:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <imu_temp_control_task+0xc0>)
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8003426:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <imu_temp_control_task+0xc0>)
 8003428:	edd3 7a08 	vldr	s15, [r3, #32]
 800342c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003430:	ee17 3a90 	vmov	r3, s15
 8003434:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8003436:	89fb      	ldrh	r3, [r7, #14]
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff faed 	bl	8002a18 <imu_pwm_set>
        osDelay(5);
 800343e:	2005      	movs	r0, #5
 8003440:	f009 ff2c 	bl	800d29c <osDelay>
    {
 8003444:	e7cf      	b.n	80033e6 <imu_temp_control_task+0x52>
 8003446:	bf00      	nop
 8003448:	45898000 	.word	0x45898000
 800344c:	458ca000 	.word	0x458ca000
 8003450:	08011ccc 	.word	0x08011ccc
 8003454:	20000870 	.word	0x20000870
 8003458:	2000096c 	.word	0x2000096c
 800345c:	20000868 	.word	0x20000868
 8003460:	2000086c 	.word	0x2000086c
 8003464:	42200000 	.word	0x42200000

08003468 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	4603      	mov	r3, r0
 8003470:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8003472:	4b12      	ldr	r3, [pc, #72]	@ (80034bc <HAL_GPIO_EXTI_Callback+0x54>)
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	88fa      	ldrh	r2, [r7, #6]
 8003478:	429a      	cmp	r2, r3
 800347a:	d11b      	bne.n	80034b4 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 800347c:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <HAL_GPIO_EXTI_Callback+0x58>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d016      	beq.n	80034b4 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003486:	f00b fc59 	bl	800ed3c <xTaskGetSchedulerState>
 800348a:	4603      	mov	r3, r0
 800348c:	2b01      	cmp	r3, #1
 800348e:	d011      	beq.n	80034b4 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8003490:	4b0c      	ldr	r3, [pc, #48]	@ (80034c4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	490c      	ldr	r1, [pc, #48]	@ (80034c8 <HAL_GPIO_EXTI_Callback+0x60>)
 8003496:	4618      	mov	r0, r3
 8003498:	f00b fd2a 	bl	800eef0 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800349c:	4b0a      	ldr	r3, [pc, #40]	@ (80034c8 <HAL_GPIO_EXTI_Callback+0x60>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_GPIO_EXTI_Callback+0x4c>
 80034a4:	4b09      	ldr	r3, [pc, #36]	@ (80034cc <HAL_GPIO_EXTI_Callback+0x64>)
 80034a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f3bf 8f4f 	dsb	sy
 80034b0:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 80034b4:	bf00      	nop
 80034b6:	3708      	adds	r7, #8
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	2000000e 	.word	0x2000000e
 80034c0:	2000086c 	.word	0x2000086c
 80034c4:	20000868 	.word	0x20000868
 80034c8:	200008b8 	.word	0x200008b8
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <ist8310_init>:
/**
  * @brief          initialize ist8310
  * @param[in]      none
  * @retval         error value
  */
uint8_t ist8310_init(void) {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
    static const uint8_t wait_time = 150;
    static const uint8_t sleepTime = 50;
    uint8_t res = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	71bb      	strb	r3, [r7, #6]
    uint8_t writeNum = 0;
 80034da:	2300      	movs	r3, #0
 80034dc:	71fb      	strb	r3, [r7, #7]

    ist8310_GPIO_init();
 80034de:	f000 f8bd 	bl	800365c <ist8310_GPIO_init>
    ist8310_com_init();
 80034e2:	f000 f8c2 	bl	800366a <ist8310_com_init>

    ist8310_RST_L();
 80034e6:	f000 f97b 	bl	80037e0 <ist8310_RST_L>
    ist8310_delay_ms(sleepTime);
 80034ea:	4b30      	ldr	r3, [pc, #192]	@ (80035ac <ist8310_init+0xdc>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f916 	bl	8003720 <ist8310_delay_ms>
    ist8310_RST_H();
 80034f4:	f000 f968 	bl	80037c8 <ist8310_RST_H>
    ist8310_delay_ms(sleepTime);
 80034f8:	4b2c      	ldr	r3, [pc, #176]	@ (80035ac <ist8310_init+0xdc>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f000 f90f 	bl	8003720 <ist8310_delay_ms>

    res = ist8310_IIC_read_single_reg(IST8310_WHO_AM_I);
 8003502:	2000      	movs	r0, #0
 8003504:	f000 f8b8 	bl	8003678 <ist8310_IIC_read_single_reg>
 8003508:	4603      	mov	r3, r0
 800350a:	71bb      	strb	r3, [r7, #6]
    if (res != IST8310_WHO_AM_I_VALUE) {
 800350c:	79bb      	ldrb	r3, [r7, #6]
 800350e:	2b10      	cmp	r3, #16
 8003510:	d001      	beq.n	8003516 <ist8310_init+0x46>
        return IST8310_NO_SENSOR;
 8003512:	2340      	movs	r3, #64	@ 0x40
 8003514:	e045      	b.n	80035a2 <ist8310_init+0xd2>
    }
    //set mpu6500 sonsor config and check
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8003516:	2300      	movs	r3, #0
 8003518:	71fb      	strb	r3, [r7, #7]
 800351a:	e03e      	b.n	800359a <ist8310_init+0xca>
        ist8310_IIC_write_single_reg(ist8310_write_reg_data_error[writeNum][0], ist8310_write_reg_data_error[writeNum][1]);
 800351c:	79fa      	ldrb	r2, [r7, #7]
 800351e:	4924      	ldr	r1, [pc, #144]	@ (80035b0 <ist8310_init+0xe0>)
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	440b      	add	r3, r1
 8003528:	7818      	ldrb	r0, [r3, #0]
 800352a:	79fa      	ldrb	r2, [r7, #7]
 800352c:	4920      	ldr	r1, [pc, #128]	@ (80035b0 <ist8310_init+0xe0>)
 800352e:	4613      	mov	r3, r2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4413      	add	r3, r2
 8003534:	440b      	add	r3, r1
 8003536:	3301      	adds	r3, #1
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	4619      	mov	r1, r3
 800353c:	f000 f8b8 	bl	80036b0 <ist8310_IIC_write_single_reg>
        ist8310_delay_us(wait_time);
 8003540:	4b1c      	ldr	r3, [pc, #112]	@ (80035b4 <ist8310_init+0xe4>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f000 f8f9 	bl	800373c <ist8310_delay_us>
        res = ist8310_IIC_read_single_reg(ist8310_write_reg_data_error[writeNum][0]);
 800354a:	79fa      	ldrb	r2, [r7, #7]
 800354c:	4918      	ldr	r1, [pc, #96]	@ (80035b0 <ist8310_init+0xe0>)
 800354e:	4613      	mov	r3, r2
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	4413      	add	r3, r2
 8003554:	440b      	add	r3, r1
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 f88d 	bl	8003678 <ist8310_IIC_read_single_reg>
 800355e:	4603      	mov	r3, r0
 8003560:	71bb      	strb	r3, [r7, #6]
        ist8310_delay_us(wait_time);
 8003562:	4b14      	ldr	r3, [pc, #80]	@ (80035b4 <ist8310_init+0xe4>)
 8003564:	781b      	ldrb	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f8e8 	bl	800373c <ist8310_delay_us>
        if (res != ist8310_write_reg_data_error[writeNum][1]) {
 800356c:	79fa      	ldrb	r2, [r7, #7]
 800356e:	4910      	ldr	r1, [pc, #64]	@ (80035b0 <ist8310_init+0xe0>)
 8003570:	4613      	mov	r3, r2
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	4413      	add	r3, r2
 8003576:	440b      	add	r3, r1
 8003578:	3301      	adds	r3, #1
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	79ba      	ldrb	r2, [r7, #6]
 800357e:	429a      	cmp	r2, r3
 8003580:	d008      	beq.n	8003594 <ist8310_init+0xc4>
            return ist8310_write_reg_data_error[writeNum][2];
 8003582:	79fa      	ldrb	r2, [r7, #7]
 8003584:	490a      	ldr	r1, [pc, #40]	@ (80035b0 <ist8310_init+0xe0>)
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	440b      	add	r3, r1
 800358e:	3302      	adds	r3, #2
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	e006      	b.n	80035a2 <ist8310_init+0xd2>
    for (writeNum = 0; writeNum < IST8310_WRITE_REG_NUM; writeNum++) {
 8003594:	79fb      	ldrb	r3, [r7, #7]
 8003596:	3301      	adds	r3, #1
 8003598:	71fb      	strb	r3, [r7, #7]
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d9bd      	bls.n	800351c <ist8310_init+0x4c>
        }
    }
    return IST8310_NO_ERROR;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	08011ce4 	.word	0x08011ce4
 80035b0:	08011cd8 	.word	0x08011cd8
 80035b4:	08011ce5 	.word	0x08011ce5

080035b8 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 80035c0:	2300      	movs	r3, #0
 80035c2:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 80035c4:	f107 0308 	add.w	r3, r7, #8
 80035c8:	2206      	movs	r2, #6
 80035ca:	4619      	mov	r1, r3
 80035cc:	2003      	movs	r0, #3
 80035ce:	f000 f88b 	bl	80036e8 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 80035d2:	7a7b      	ldrb	r3, [r7, #9]
 80035d4:	021b      	lsls	r3, r3, #8
 80035d6:	b21a      	sxth	r2, r3
 80035d8:	7a3b      	ldrb	r3, [r7, #8]
 80035da:	b21b      	sxth	r3, r3
 80035dc:	4313      	orrs	r3, r2
 80035de:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 80035e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035ec:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003658 <ist8310_read_mag+0xa0>
 80035f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 80035fa:	7afb      	ldrb	r3, [r7, #11]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	b21a      	sxth	r2, r3
 8003600:	7abb      	ldrb	r3, [r7, #10]
 8003602:	b21b      	sxth	r3, r3
 8003604:	4313      	orrs	r3, r2
 8003606:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8003608:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800360c:	ee07 3a90 	vmov	s15, r3
 8003610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003658 <ist8310_read_mag+0xa0>
 800361c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003620:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8003624:	7b7b      	ldrb	r3, [r7, #13]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	b21a      	sxth	r2, r3
 800362a:	7b3b      	ldrb	r3, [r7, #12]
 800362c:	b21b      	sxth	r3, r3
 800362e:	4313      	orrs	r3, r2
 8003630:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8003632:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003636:	ee07 3a90 	vmov	s15, r3
 800363a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3308      	adds	r3, #8
 8003642:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8003658 <ist8310_read_mag+0xa0>
 8003646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800364a:	edc3 7a00 	vstr	s15, [r3]
}
 800364e:	bf00      	nop
 8003650:	3710      	adds	r7, #16
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	3e99999a 	.word	0x3e99999a

0800365c <ist8310_GPIO_init>:
  * @brief          initialize ist8310 gpio.
  * @param[in]      none
  * @retval         none
  */
void ist8310_GPIO_init(void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0

}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <ist8310_com_init>:
  * @brief          initialize ist8310 communication interface
  * @param[in]      none
  * @retval         none
  */
void ist8310_com_init(void)
{
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0
}
 800366e:	bf00      	nop
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <ist8310_IIC_read_single_reg>:
  * @brief          read a byte of ist8310 by i2c
  * @param[in]      register address
  * @retval         value of the register
  */
uint8_t ist8310_IIC_read_single_reg(uint8_t reg)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af04      	add	r7, sp, #16
 800367e:	4603      	mov	r3, r0
 8003680:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&res,1,10);
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	b29a      	uxth	r2, r3
 800368a:	230a      	movs	r3, #10
 800368c:	9302      	str	r3, [sp, #8]
 800368e:	2301      	movs	r3, #1
 8003690:	9301      	str	r3, [sp, #4]
 8003692:	f107 030f 	add.w	r3, r7, #15
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	2301      	movs	r3, #1
 800369a:	211c      	movs	r1, #28
 800369c:	4803      	ldr	r0, [pc, #12]	@ (80036ac <ist8310_IIC_read_single_reg+0x34>)
 800369e:	f005 fdaf 	bl	8009200 <HAL_I2C_Mem_Read>
    return res;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	20000918 	.word	0x20000918

080036b0 <ist8310_IIC_write_single_reg>:
  * @param[in]      register address
  * @param[in]      write value
  * @retval         value of the register
  */
void ist8310_IIC_write_single_reg(uint8_t reg, uint8_t data)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af04      	add	r7, sp, #16
 80036b6:	4603      	mov	r3, r0
 80036b8:	460a      	mov	r2, r1
 80036ba:	71fb      	strb	r3, [r7, #7]
 80036bc:	4613      	mov	r3, r2
 80036be:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,&data,1,10);
 80036c0:	79fb      	ldrb	r3, [r7, #7]
 80036c2:	b29a      	uxth	r2, r3
 80036c4:	230a      	movs	r3, #10
 80036c6:	9302      	str	r3, [sp, #8]
 80036c8:	2301      	movs	r3, #1
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	2301      	movs	r3, #1
 80036d2:	211c      	movs	r1, #28
 80036d4:	4803      	ldr	r0, [pc, #12]	@ (80036e4 <ist8310_IIC_write_single_reg+0x34>)
 80036d6:	f005 fc99 	bl	800900c <HAL_I2C_Mem_Write>
}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000918 	.word	0x20000918

080036e8 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af04      	add	r7, sp, #16
 80036ee:	4603      	mov	r3, r0
 80036f0:	6039      	str	r1, [r7, #0]
 80036f2:	71fb      	strb	r3, [r7, #7]
 80036f4:	4613      	mov	r3, r2
 80036f6:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	b29a      	uxth	r2, r3
 80036fc:	79bb      	ldrb	r3, [r7, #6]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	210a      	movs	r1, #10
 8003702:	9102      	str	r1, [sp, #8]
 8003704:	9301      	str	r3, [sp, #4]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	2301      	movs	r3, #1
 800370c:	211c      	movs	r1, #28
 800370e:	4803      	ldr	r0, [pc, #12]	@ (800371c <ist8310_IIC_read_muli_reg+0x34>)
 8003710:	f005 fd76 	bl	8009200 <HAL_I2C_Mem_Read>
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000918 	.word	0x20000918

08003720 <ist8310_delay_ms>:
  * @brief          delay x millisecond
  * @param[in]      ms: ms millisecond
  * @retval         none
  */
void ist8310_delay_ms(uint16_t ms)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	4603      	mov	r3, r0
 8003728:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(ms);
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	4618      	mov	r0, r3
 800372e:	f003 fdbb 	bl	80072a8 <HAL_Delay>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <ist8310_delay_us>:
  * @brief          delay x microsecond
  * @param[in]      us: us microsecond
  * @retval         none
  */
void ist8310_delay_us(uint16_t us)
{
 800373c:	b480      	push	{r7}
 800373e:	b089      	sub	sp, #36	@ 0x24
 8003740:	af00      	add	r7, sp, #0
 8003742:	4603      	mov	r3, r0
 8003744:	80fb      	strh	r3, [r7, #6]
    uint32_t ticks = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	617b      	str	r3, [r7, #20]
    uint32_t told = 0, tnow = 0, tcnt = 0;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
 800374e:	2300      	movs	r3, #0
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8003756:	2300      	movs	r3, #0
 8003758:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 800375a:	4b1a      	ldr	r3, [pc, #104]	@ (80037c4 <ist8310_delay_us+0x88>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	60fb      	str	r3, [r7, #12]
    ticks = us * 72;
 8003760:	88fa      	ldrh	r2, [r7, #6]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 800376c:	4b15      	ldr	r3, [pc, #84]	@ (80037c4 <ist8310_delay_us+0x88>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8003772:	4b14      	ldr	r3, [pc, #80]	@ (80037c4 <ist8310_delay_us+0x88>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	429a      	cmp	r2, r3
 800377e:	d0f8      	beq.n	8003772 <ist8310_delay_us+0x36>
        {
            if (tnow < told)
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	429a      	cmp	r2, r3
 8003786:	d206      	bcs.n	8003796 <ist8310_delay_us+0x5a>
            {
                tcnt += told - tnow;
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4413      	add	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e007      	b.n	80037a6 <ist8310_delay_us+0x6a>
            }
            else
            {
                tcnt += reload - tnow + told;
 8003796:	68fa      	ldr	r2, [r7, #12]
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	1ad2      	subs	r2, r2, r3
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	4413      	add	r3, r2
 80037a4:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d200      	bcs.n	80037b4 <ist8310_delay_us+0x78>
        tnow = SysTick->VAL;
 80037b2:	e7de      	b.n	8003772 <ist8310_delay_us+0x36>
            {
                break;
 80037b4:	bf00      	nop
            }
        }
    }
}
 80037b6:	bf00      	nop
 80037b8:	3724      	adds	r7, #36	@ 0x24
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e010 	.word	0xe000e010

080037c8 <ist8310_RST_H>:
  * @brief          set the RSTN PIN to 1
  * @param[in]      none
  * @retval         none
  */
void ist8310_RST_H(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 80037cc:	2201      	movs	r2, #1
 80037ce:	2140      	movs	r1, #64	@ 0x40
 80037d0:	4802      	ldr	r0, [pc, #8]	@ (80037dc <ist8310_RST_H+0x14>)
 80037d2:	f005 faa5 	bl	8008d20 <HAL_GPIO_WritePin>
}
 80037d6:	bf00      	nop
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40021800 	.word	0x40021800

080037e0 <ist8310_RST_L>:
  * @brief          set the RSTN PIN to 0
  * @param[in]      none
  * @retval         none
  */
extern void ist8310_RST_L(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2140      	movs	r1, #64	@ 0x40
 80037e8:	4802      	ldr	r0, [pc, #8]	@ (80037f4 <ist8310_RST_L+0x14>)
 80037ea:	f005 fa99 	bl	8008d20 <HAL_GPIO_WritePin>
}
 80037ee:	bf00      	nop
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40021800 	.word	0x40021800

080037f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037fc:	f003 fce2 	bl	80071c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003800:	f000 f868 	bl	80038d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003804:	f000 fd02 	bl	800420c <MX_GPIO_Init>
  MX_DMA_Init();
 8003808:	f000 fc9a 	bl	8004140 <MX_DMA_Init>
  MX_CAN1_Init();
 800380c:	f000 f8ce 	bl	80039ac <MX_CAN1_Init>
  MX_CAN2_Init();
 8003810:	f000 f902 	bl	8003a18 <MX_CAN2_Init>
  MX_SPI1_Init();
 8003814:	f000 f964 	bl	8003ae0 <MX_SPI1_Init>
  MX_TIM4_Init();
 8003818:	f000 fa40 	bl	8003c9c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800381c:	f000 fc10 	bl	8004040 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003820:	f000 fc64 	bl	80040ec <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8003824:	f000 f992 	bl	8003b4c <MX_TIM1_Init>
  MX_TIM8_Init();
 8003828:	f000 fb20 	bl	8003e6c <MX_TIM8_Init>
  MX_USART3_UART_Init();
 800382c:	f000 fc32 	bl	8004094 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003830:	f000 fbb8 	bl	8003fa4 <MX_TIM10_Init>
  MX_I2C3_Init();
 8003834:	f000 f926 	bl	8003a84 <MX_I2C3_Init>
  MX_TIM5_Init();
 8003838:	f000 faa8 	bl	8003d8c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 800383c:	f7ff f8b2 	bl	80029a4 <can_filter_init>
  remote_control_init();
 8003840:	f002 fa2a 	bl	8005c98 <remote_control_init>
  usart_Init();
 8003844:	f7ff f822 	bl	800288c <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8003848:	f002 fa34 	bl	8005cb4 <get_remote_control_point>
 800384c:	4603      	mov	r3, r0
 800384e:	4a14      	ldr	r2, [pc, #80]	@ (80038a0 <main+0xa8>)
 8003850:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003852:	f009 fc47 	bl	800d0e4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8003856:	4a13      	ldr	r2, [pc, #76]	@ (80038a4 <main+0xac>)
 8003858:	2100      	movs	r1, #0
 800385a:	4813      	ldr	r0, [pc, #76]	@ (80038a8 <main+0xb0>)
 800385c:	f009 fc8c 	bl	800d178 <osThreadNew>
 8003860:	4603      	mov	r3, r0
 8003862:	4a12      	ldr	r2, [pc, #72]	@ (80038ac <main+0xb4>)
 8003864:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8003866:	4a12      	ldr	r2, [pc, #72]	@ (80038b0 <main+0xb8>)
 8003868:	2100      	movs	r1, #0
 800386a:	4812      	ldr	r0, [pc, #72]	@ (80038b4 <main+0xbc>)
 800386c:	f009 fc84 	bl	800d178 <osThreadNew>
 8003870:	4603      	mov	r3, r0
 8003872:	4a11      	ldr	r2, [pc, #68]	@ (80038b8 <main+0xc0>)
 8003874:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8003876:	4a11      	ldr	r2, [pc, #68]	@ (80038bc <main+0xc4>)
 8003878:	2100      	movs	r1, #0
 800387a:	4811      	ldr	r0, [pc, #68]	@ (80038c0 <main+0xc8>)
 800387c:	f009 fc7c 	bl	800d178 <osThreadNew>
 8003880:	4603      	mov	r3, r0
 8003882:	4a10      	ldr	r2, [pc, #64]	@ (80038c4 <main+0xcc>)
 8003884:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8003886:	4a10      	ldr	r2, [pc, #64]	@ (80038c8 <main+0xd0>)
 8003888:	2100      	movs	r1, #0
 800388a:	4810      	ldr	r0, [pc, #64]	@ (80038cc <main+0xd4>)
 800388c:	f009 fc74 	bl	800d178 <osThreadNew>
 8003890:	4603      	mov	r3, r0
 8003892:	4a0f      	ldr	r2, [pc, #60]	@ (80038d0 <main+0xd8>)
 8003894:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003896:	f009 fc49 	bl	800d12c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800389a:	bf00      	nop
 800389c:	e7fd      	b.n	800389a <main+0xa2>
 800389e:	bf00      	nop
 80038a0:	20000f14 	.word	0x20000f14
 80038a4:	08011ce8 	.word	0x08011ce8
 80038a8:	08004401 	.word	0x08004401
 80038ac:	20000f04 	.word	0x20000f04
 80038b0:	08011d0c 	.word	0x08011d0c
 80038b4:	080047f1 	.word	0x080047f1
 80038b8:	20000f08 	.word	0x20000f08
 80038bc:	08011d30 	.word	0x08011d30
 80038c0:	08003395 	.word	0x08003395
 80038c4:	20000f0c 	.word	0x20000f0c
 80038c8:	08011d54 	.word	0x08011d54
 80038cc:	080051a9 	.word	0x080051a9
 80038d0:	20000f10 	.word	0x20000f10

080038d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b094      	sub	sp, #80	@ 0x50
 80038d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80038da:	f107 0320 	add.w	r3, r7, #32
 80038de:	2230      	movs	r2, #48	@ 0x30
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f00c fba8 	bl	8010038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80038e8:	f107 030c 	add.w	r3, r7, #12
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]
 80038f0:	605a      	str	r2, [r3, #4]
 80038f2:	609a      	str	r2, [r3, #8]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80038f8:	2300      	movs	r3, #0
 80038fa:	60bb      	str	r3, [r7, #8]
 80038fc:	4b29      	ldr	r3, [pc, #164]	@ (80039a4 <SystemClock_Config+0xd0>)
 80038fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003900:	4a28      	ldr	r2, [pc, #160]	@ (80039a4 <SystemClock_Config+0xd0>)
 8003902:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003906:	6413      	str	r3, [r2, #64]	@ 0x40
 8003908:	4b26      	ldr	r3, [pc, #152]	@ (80039a4 <SystemClock_Config+0xd0>)
 800390a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800390c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003914:	2300      	movs	r3, #0
 8003916:	607b      	str	r3, [r7, #4]
 8003918:	4b23      	ldr	r3, [pc, #140]	@ (80039a8 <SystemClock_Config+0xd4>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a22      	ldr	r2, [pc, #136]	@ (80039a8 <SystemClock_Config+0xd4>)
 800391e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	4b20      	ldr	r3, [pc, #128]	@ (80039a8 <SystemClock_Config+0xd4>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003930:	2301      	movs	r3, #1
 8003932:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800393a:	2302      	movs	r3, #2
 800393c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800393e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003944:	2306      	movs	r3, #6
 8003946:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003948:	23a8      	movs	r3, #168	@ 0xa8
 800394a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800394c:	2302      	movs	r3, #2
 800394e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003950:	2304      	movs	r3, #4
 8003952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003954:	f107 0320 	add.w	r3, r7, #32
 8003958:	4618      	mov	r0, r3
 800395a:	f006 fa37 	bl	8009dcc <HAL_RCC_OscConfig>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d001      	beq.n	8003968 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003964:	f001 fc28 	bl	80051b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003968:	230f      	movs	r3, #15
 800396a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800396c:	2302      	movs	r3, #2
 800396e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003974:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003978:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800397a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800397e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003980:	f107 030c 	add.w	r3, r7, #12
 8003984:	2105      	movs	r1, #5
 8003986:	4618      	mov	r0, r3
 8003988:	f006 fc98 	bl	800a2bc <HAL_RCC_ClockConfig>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003992:	f001 fc11 	bl	80051b8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003996:	f006 fd77 	bl	800a488 <HAL_RCC_EnableCSS>
}
 800399a:	bf00      	nop
 800399c:	3750      	adds	r7, #80	@ 0x50
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40023800 	.word	0x40023800
 80039a8:	40007000 	.word	0x40007000

080039ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80039b0:	4b17      	ldr	r3, [pc, #92]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039b2:	4a18      	ldr	r2, [pc, #96]	@ (8003a14 <MX_CAN1_Init+0x68>)
 80039b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80039b6:	4b16      	ldr	r3, [pc, #88]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039b8:	2203      	movs	r2, #3
 80039ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80039bc:	4b14      	ldr	r3, [pc, #80]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80039c2:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039ca:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80039ce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80039d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039d2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80039d6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80039d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039da:	2200      	movs	r2, #0
 80039dc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80039de:	4b0c      	ldr	r3, [pc, #48]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80039e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80039ea:	4b09      	ldr	r3, [pc, #36]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80039f0:	4b07      	ldr	r3, [pc, #28]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80039fc:	4804      	ldr	r0, [pc, #16]	@ (8003a10 <MX_CAN1_Init+0x64>)
 80039fe:	f003 fc77 	bl	80072f0 <HAL_CAN_Init>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003a08:	f001 fbd6 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003a0c:	bf00      	nop
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	200008c8 	.word	0x200008c8
 8003a14:	40006400 	.word	0x40006400

08003a18 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003a1c:	4b17      	ldr	r3, [pc, #92]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a1e:	4a18      	ldr	r2, [pc, #96]	@ (8003a80 <MX_CAN2_Init+0x68>)
 8003a20:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8003a22:	4b16      	ldr	r3, [pc, #88]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a24:	2203      	movs	r2, #3
 8003a26:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003a28:	4b14      	ldr	r3, [pc, #80]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003a2e:	4b13      	ldr	r3, [pc, #76]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003a34:	4b11      	ldr	r3, [pc, #68]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a36:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003a3a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a3e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003a42:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003a44:	4b0d      	ldr	r3, [pc, #52]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a46:	2200      	movs	r2, #0
 8003a48:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003a50:	4b0a      	ldr	r3, [pc, #40]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003a56:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003a5c:	4b07      	ldr	r3, [pc, #28]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003a62:	4b06      	ldr	r3, [pc, #24]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003a68:	4804      	ldr	r0, [pc, #16]	@ (8003a7c <MX_CAN2_Init+0x64>)
 8003a6a:	f003 fc41 	bl	80072f0 <HAL_CAN_Init>
 8003a6e:	4603      	mov	r3, r0
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d001      	beq.n	8003a78 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003a74:	f001 fba0 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200008f0 	.word	0x200008f0
 8003a80:	40006800 	.word	0x40006800

08003a84 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003a88:	4b12      	ldr	r3, [pc, #72]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003a8a:	4a13      	ldr	r2, [pc, #76]	@ (8003ad8 <MX_I2C3_Init+0x54>)
 8003a8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003a8e:	4b11      	ldr	r3, [pc, #68]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003a90:	4a12      	ldr	r2, [pc, #72]	@ (8003adc <MX_I2C3_Init+0x58>)
 8003a92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a94:	4b0f      	ldr	r3, [pc, #60]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003a96:	2200      	movs	r2, #0
 8003a98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003aa2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003aa6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003aae:	4b09      	ldr	r3, [pc, #36]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ab4:	4b07      	ldr	r3, [pc, #28]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003aba:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003ac0:	4804      	ldr	r0, [pc, #16]	@ (8003ad4 <MX_I2C3_Init+0x50>)
 8003ac2:	f005 f95f 	bl	8008d84 <HAL_I2C_Init>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003acc:	f001 fb74 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003ad0:	bf00      	nop
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20000918 	.word	0x20000918
 8003ad8:	40005c00 	.word	0x40005c00
 8003adc:	00061a80 	.word	0x00061a80

08003ae0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003ae4:	4b17      	ldr	r3, [pc, #92]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003ae6:	4a18      	ldr	r2, [pc, #96]	@ (8003b48 <MX_SPI1_Init+0x68>)
 8003ae8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003aea:	4b16      	ldr	r3, [pc, #88]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003aec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003af0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003af2:	4b14      	ldr	r3, [pc, #80]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003af8:	4b12      	ldr	r3, [pc, #72]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003afe:	4b11      	ldr	r3, [pc, #68]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003b00:	2202      	movs	r2, #2
 8003b02:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003b04:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b10:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003b12:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003b14:	2238      	movs	r2, #56	@ 0x38
 8003b16:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003b18:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003b1e:	4b09      	ldr	r3, [pc, #36]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b24:	4b07      	ldr	r3, [pc, #28]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003b2a:	4b06      	ldr	r3, [pc, #24]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003b2c:	220a      	movs	r2, #10
 8003b2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b30:	4804      	ldr	r0, [pc, #16]	@ (8003b44 <MX_SPI1_Init+0x64>)
 8003b32:	f006 fdca 	bl	800a6ca <HAL_SPI_Init>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003b3c:	f001 fb3c 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003b40:	bf00      	nop
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	2000096c 	.word	0x2000096c
 8003b48:	40013000 	.word	0x40013000

08003b4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b092      	sub	sp, #72	@ 0x48
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003b56:	2200      	movs	r2, #0
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
 8003b64:	605a      	str	r2, [r3, #4]
 8003b66:	609a      	str	r2, [r3, #8]
 8003b68:	60da      	str	r2, [r3, #12]
 8003b6a:	611a      	str	r2, [r3, #16]
 8003b6c:	615a      	str	r2, [r3, #20]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	2220      	movs	r2, #32
 8003b74:	2100      	movs	r1, #0
 8003b76:	4618      	mov	r0, r3
 8003b78:	f00c fa5e 	bl	8010038 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b7c:	4b45      	ldr	r3, [pc, #276]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003b7e:	4a46      	ldr	r2, [pc, #280]	@ (8003c98 <MX_TIM1_Init+0x14c>)
 8003b80:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8003b82:	4b44      	ldr	r3, [pc, #272]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003b84:	2253      	movs	r2, #83	@ 0x53
 8003b86:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b88:	4b42      	ldr	r3, [pc, #264]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003b8e:	4b41      	ldr	r3, [pc, #260]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003b90:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003b94:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b96:	4b3f      	ldr	r3, [pc, #252]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ba2:	4b3c      	ldr	r3, [pc, #240]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003ba8:	483a      	ldr	r0, [pc, #232]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003baa:	f007 f95b 	bl	800ae64 <HAL_TIM_PWM_Init>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003bb4:	f001 fb00 	bl	80051b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003bc0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	4833      	ldr	r0, [pc, #204]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003bc8:	f007 ff7a 	bl	800bac0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003bd2:	f001 faf1 	bl	80051b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bd6:	2360      	movs	r3, #96	@ 0x60
 8003bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bde:	2300      	movs	r3, #0
 8003be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003be2:	2300      	movs	r3, #0
 8003be4:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bea:	2300      	movs	r3, #0
 8003bec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4826      	ldr	r0, [pc, #152]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003bfc:	f007 faba 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003c06:	f001 fad7 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c0e:	2204      	movs	r2, #4
 8003c10:	4619      	mov	r1, r3
 8003c12:	4820      	ldr	r0, [pc, #128]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003c14:	f007 faae 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003c1e:	f001 facb 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c26:	2208      	movs	r2, #8
 8003c28:	4619      	mov	r1, r3
 8003c2a:	481a      	ldr	r0, [pc, #104]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003c2c:	f007 faa2 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003c36:	f001 fabf 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c3e:	220c      	movs	r2, #12
 8003c40:	4619      	mov	r1, r3
 8003c42:	4814      	ldr	r0, [pc, #80]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003c44:	f007 fa96 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003c4e:	f001 fab3 	bl	80051b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003c66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003c6a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c70:	1d3b      	adds	r3, r7, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4807      	ldr	r0, [pc, #28]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003c76:	f007 ff9f 	bl	800bbb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003c80:	f001 fa9a 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c84:	4803      	ldr	r0, [pc, #12]	@ (8003c94 <MX_TIM1_Init+0x148>)
 8003c86:	f002 fe85 	bl	8006994 <HAL_TIM_MspPostInit>

}
 8003c8a:	bf00      	nop
 8003c8c:	3748      	adds	r7, #72	@ 0x48
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200009c4 	.word	0x200009c4
 8003c98:	40010000 	.word	0x40010000

08003c9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08e      	sub	sp, #56	@ 0x38
 8003ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	605a      	str	r2, [r3, #4]
 8003cac:	609a      	str	r2, [r3, #8]
 8003cae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003cb0:	f107 0320 	add.w	r3, r7, #32
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
 8003cc8:	615a      	str	r2, [r3, #20]
 8003cca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003cce:	4a2e      	ldr	r2, [pc, #184]	@ (8003d88 <MX_TIM4_Init+0xec>)
 8003cd0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8003cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003cd4:	2253      	movs	r2, #83	@ 0x53
 8003cd6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8003cde:	4b29      	ldr	r3, [pc, #164]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003ce0:	f245 2207 	movw	r2, #20999	@ 0x5207
 8003ce4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ce6:	4b27      	ldr	r3, [pc, #156]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003ce8:	2200      	movs	r2, #0
 8003cea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003cec:	4b25      	ldr	r3, [pc, #148]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003cee:	2280      	movs	r2, #128	@ 0x80
 8003cf0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003cf2:	4824      	ldr	r0, [pc, #144]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003cf4:	f006 fffe 	bl	800acf4 <HAL_TIM_Base_Init>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003cfe:	f001 fa5b 	bl	80051b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d02:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003d08:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	481d      	ldr	r0, [pc, #116]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003d10:	f007 faf2 	bl	800b2f8 <HAL_TIM_ConfigClockSource>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003d1a:	f001 fa4d 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d1e:	4819      	ldr	r0, [pc, #100]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003d20:	f007 f8a0 	bl	800ae64 <HAL_TIM_PWM_Init>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003d2a:	f001 fa45 	bl	80051b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d36:	f107 0320 	add.w	r3, r7, #32
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4811      	ldr	r0, [pc, #68]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003d3e:	f007 febf 	bl	800bac0 <HAL_TIMEx_MasterConfigSynchronization>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003d48:	f001 fa36 	bl	80051b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d4c:	2360      	movs	r3, #96	@ 0x60
 8003d4e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8003d50:	f642 1303 	movw	r3, #10499	@ 0x2903
 8003d54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d5e:	1d3b      	adds	r3, r7, #4
 8003d60:	2208      	movs	r2, #8
 8003d62:	4619      	mov	r1, r3
 8003d64:	4807      	ldr	r0, [pc, #28]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003d66:	f007 fa05 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003d70:	f001 fa22 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003d74:	4803      	ldr	r0, [pc, #12]	@ (8003d84 <MX_TIM4_Init+0xe8>)
 8003d76:	f002 fe0d 	bl	8006994 <HAL_TIM_MspPostInit>

}
 8003d7a:	bf00      	nop
 8003d7c:	3738      	adds	r7, #56	@ 0x38
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	20000a0c 	.word	0x20000a0c
 8003d88:	40000800 	.word	0x40000800

08003d8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b08a      	sub	sp, #40	@ 0x28
 8003d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d92:	f107 0320 	add.w	r3, r7, #32
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
 8003d9a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d9c:	1d3b      	adds	r3, r7, #4
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]
 8003da2:	605a      	str	r2, [r3, #4]
 8003da4:	609a      	str	r2, [r3, #8]
 8003da6:	60da      	str	r2, [r3, #12]
 8003da8:	611a      	str	r2, [r3, #16]
 8003daa:	615a      	str	r2, [r3, #20]
 8003dac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003dae:	4b2d      	ldr	r3, [pc, #180]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003db0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e68 <MX_TIM5_Init+0xdc>)
 8003db2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8003db4:	4b2b      	ldr	r3, [pc, #172]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003db6:	2253      	movs	r2, #83	@ 0x53
 8003db8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dba:	4b2a      	ldr	r3, [pc, #168]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8003dc0:	4b28      	ldr	r3, [pc, #160]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003dc2:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8003dc6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dc8:	4b26      	ldr	r3, [pc, #152]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003dca:	2200      	movs	r2, #0
 8003dcc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dce:	4b25      	ldr	r3, [pc, #148]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003dd4:	4823      	ldr	r0, [pc, #140]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003dd6:	f007 f845 	bl	800ae64 <HAL_TIM_PWM_Init>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8003de0:	f001 f9ea 	bl	80051b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003de4:	2300      	movs	r3, #0
 8003de6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003de8:	2300      	movs	r3, #0
 8003dea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003dec:	f107 0320 	add.w	r3, r7, #32
 8003df0:	4619      	mov	r1, r3
 8003df2:	481c      	ldr	r0, [pc, #112]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003df4:	f007 fe64 	bl	800bac0 <HAL_TIMEx_MasterConfigSynchronization>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8003dfe:	f001 f9db 	bl	80051b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e02:	2360      	movs	r3, #96	@ 0x60
 8003e04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003e12:	1d3b      	adds	r3, r7, #4
 8003e14:	2200      	movs	r2, #0
 8003e16:	4619      	mov	r1, r3
 8003e18:	4812      	ldr	r0, [pc, #72]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003e1a:	f007 f9ab 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d001      	beq.n	8003e28 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003e24:	f001 f9c8 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003e28:	1d3b      	adds	r3, r7, #4
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	480d      	ldr	r0, [pc, #52]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003e30:	f007 f9a0 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003e3a:	f001 f9bd 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e3e:	1d3b      	adds	r3, r7, #4
 8003e40:	2208      	movs	r2, #8
 8003e42:	4619      	mov	r1, r3
 8003e44:	4807      	ldr	r0, [pc, #28]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003e46:	f007 f995 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d001      	beq.n	8003e54 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8003e50:	f001 f9b2 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003e54:	4803      	ldr	r0, [pc, #12]	@ (8003e64 <MX_TIM5_Init+0xd8>)
 8003e56:	f002 fd9d 	bl	8006994 <HAL_TIM_MspPostInit>

}
 8003e5a:	bf00      	nop
 8003e5c:	3728      	adds	r7, #40	@ 0x28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000a54 	.word	0x20000a54
 8003e68:	40000c00 	.word	0x40000c00

08003e6c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b092      	sub	sp, #72	@ 0x48
 8003e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]
 8003e7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e80:	2200      	movs	r2, #0
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	609a      	str	r2, [r3, #8]
 8003e88:	60da      	str	r2, [r3, #12]
 8003e8a:	611a      	str	r2, [r3, #16]
 8003e8c:	615a      	str	r2, [r3, #20]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003e90:	1d3b      	adds	r3, r7, #4
 8003e92:	2220      	movs	r2, #32
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f00c f8ce 	bl	8010038 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003e9c:	4b3f      	ldr	r3, [pc, #252]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003e9e:	4a40      	ldr	r2, [pc, #256]	@ (8003fa0 <MX_TIM8_Init+0x134>)
 8003ea0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8003ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003ea4:	2253      	movs	r2, #83	@ 0x53
 8003ea6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ea8:	4b3c      	ldr	r3, [pc, #240]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8003eae:	4b3b      	ldr	r3, [pc, #236]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003eb0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003eb4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003eb6:	4b39      	ldr	r3, [pc, #228]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003eb8:	2200      	movs	r2, #0
 8003eba:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003ebc:	4b37      	ldr	r3, [pc, #220]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003ec2:	4b36      	ldr	r3, [pc, #216]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003ec4:	2280      	movs	r2, #128	@ 0x80
 8003ec6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003ec8:	4834      	ldr	r0, [pc, #208]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003eca:	f006 ffcb 	bl	800ae64 <HAL_TIM_PWM_Init>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003ed4:	f001 f970 	bl	80051b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003edc:	2300      	movs	r3, #0
 8003ede:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003ee0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003ee4:	4619      	mov	r1, r3
 8003ee6:	482d      	ldr	r0, [pc, #180]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003ee8:	f007 fdea 	bl	800bac0 <HAL_TIMEx_MasterConfigSynchronization>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d001      	beq.n	8003ef6 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003ef2:	f001 f961 	bl	80051b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ef6:	2360      	movs	r3, #96	@ 0x60
 8003ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003efe:	2300      	movs	r3, #0
 8003f00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f02:	2300      	movs	r3, #0
 8003f04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f06:	2300      	movs	r3, #0
 8003f08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003f12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f16:	2200      	movs	r2, #0
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4820      	ldr	r0, [pc, #128]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003f1c:	f007 f92a 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003f26:	f001 f947 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f2e:	2204      	movs	r2, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	481a      	ldr	r0, [pc, #104]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003f34:	f007 f91e 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 8003f3e:	f001 f93b 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f46:	2208      	movs	r2, #8
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4814      	ldr	r0, [pc, #80]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003f4c:	f007 f912 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8003f56:	f001 f92f 	bl	80051b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f62:	2300      	movs	r3, #0
 8003f64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f66:	2300      	movs	r3, #0
 8003f68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003f74:	2300      	movs	r3, #0
 8003f76:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003f78:	1d3b      	adds	r3, r7, #4
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4807      	ldr	r0, [pc, #28]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003f7e:	f007 fe1b 	bl	800bbb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8003f88:	f001 f916 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8003f8c:	4803      	ldr	r0, [pc, #12]	@ (8003f9c <MX_TIM8_Init+0x130>)
 8003f8e:	f002 fd01 	bl	8006994 <HAL_TIM_MspPostInit>

}
 8003f92:	bf00      	nop
 8003f94:	3748      	adds	r7, #72	@ 0x48
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20000a9c 	.word	0x20000a9c
 8003fa0:	40010400 	.word	0x40010400

08003fa4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
 8003fb8:	615a      	str	r2, [r3, #20]
 8003fba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8004038 <MX_TIM10_Init+0x94>)
 8003fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800403c <MX_TIM10_Init+0x98>)
 8003fc0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8004038 <MX_TIM10_Init+0x94>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <MX_TIM10_Init+0x94>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8003fce:	4b1a      	ldr	r3, [pc, #104]	@ (8004038 <MX_TIM10_Init+0x94>)
 8003fd0:	f241 3287 	movw	r2, #4999	@ 0x1387
 8003fd4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fd6:	4b18      	ldr	r3, [pc, #96]	@ (8004038 <MX_TIM10_Init+0x94>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fdc:	4b16      	ldr	r3, [pc, #88]	@ (8004038 <MX_TIM10_Init+0x94>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003fe2:	4815      	ldr	r0, [pc, #84]	@ (8004038 <MX_TIM10_Init+0x94>)
 8003fe4:	f006 fe86 	bl	800acf4 <HAL_TIM_Base_Init>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003fee:	f001 f8e3 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003ff2:	4811      	ldr	r0, [pc, #68]	@ (8004038 <MX_TIM10_Init+0x94>)
 8003ff4:	f006 ff36 	bl	800ae64 <HAL_TIM_PWM_Init>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003ffe:	f001 f8db 	bl	80051b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004002:	2360      	movs	r3, #96	@ 0x60
 8004004:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004012:	1d3b      	adds	r3, r7, #4
 8004014:	2200      	movs	r2, #0
 8004016:	4619      	mov	r1, r3
 8004018:	4807      	ldr	r0, [pc, #28]	@ (8004038 <MX_TIM10_Init+0x94>)
 800401a:	f007 f8ab 	bl	800b174 <HAL_TIM_PWM_ConfigChannel>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004024:	f001 f8c8 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004028:	4803      	ldr	r0, [pc, #12]	@ (8004038 <MX_TIM10_Init+0x94>)
 800402a:	f002 fcb3 	bl	8006994 <HAL_TIM_MspPostInit>

}
 800402e:	bf00      	nop
 8004030:	3720      	adds	r7, #32
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	20000ae4 	.word	0x20000ae4
 800403c:	40014400 	.word	0x40014400

08004040 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004044:	4b11      	ldr	r3, [pc, #68]	@ (800408c <MX_USART1_UART_Init+0x4c>)
 8004046:	4a12      	ldr	r2, [pc, #72]	@ (8004090 <MX_USART1_UART_Init+0x50>)
 8004048:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800404a:	4b10      	ldr	r3, [pc, #64]	@ (800408c <MX_USART1_UART_Init+0x4c>)
 800404c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004050:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004052:	4b0e      	ldr	r3, [pc, #56]	@ (800408c <MX_USART1_UART_Init+0x4c>)
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004058:	4b0c      	ldr	r3, [pc, #48]	@ (800408c <MX_USART1_UART_Init+0x4c>)
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800405e:	4b0b      	ldr	r3, [pc, #44]	@ (800408c <MX_USART1_UART_Init+0x4c>)
 8004060:	2200      	movs	r2, #0
 8004062:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004064:	4b09      	ldr	r3, [pc, #36]	@ (800408c <MX_USART1_UART_Init+0x4c>)
 8004066:	220c      	movs	r2, #12
 8004068:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800406a:	4b08      	ldr	r3, [pc, #32]	@ (800408c <MX_USART1_UART_Init+0x4c>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <MX_USART1_UART_Init+0x4c>)
 8004072:	2200      	movs	r2, #0
 8004074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004076:	4805      	ldr	r0, [pc, #20]	@ (800408c <MX_USART1_UART_Init+0x4c>)
 8004078:	f007 fdf0 	bl	800bc5c <HAL_UART_Init>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d001      	beq.n	8004086 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004082:	f001 f899 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000c4c 	.word	0x20000c4c
 8004090:	40011000 	.word	0x40011000

08004094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004098:	4b11      	ldr	r3, [pc, #68]	@ (80040e0 <MX_USART3_UART_Init+0x4c>)
 800409a:	4a12      	ldr	r2, [pc, #72]	@ (80040e4 <MX_USART3_UART_Init+0x50>)
 800409c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800409e:	4b10      	ldr	r3, [pc, #64]	@ (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040a0:	4a11      	ldr	r2, [pc, #68]	@ (80040e8 <MX_USART3_UART_Init+0x54>)
 80040a2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040a4:	4b0e      	ldr	r3, [pc, #56]	@ (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040aa:	4b0d      	ldr	r3, [pc, #52]	@ (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80040b0:	4b0b      	ldr	r3, [pc, #44]	@ (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040ba:	220c      	movs	r2, #12
 80040bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040be:	4b08      	ldr	r3, [pc, #32]	@ (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80040ca:	4805      	ldr	r0, [pc, #20]	@ (80040e0 <MX_USART3_UART_Init+0x4c>)
 80040cc:	f007 fdc6 	bl	800bc5c <HAL_UART_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80040d6:	f001 f86f 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000c94 	.word	0x20000c94
 80040e4:	40004800 	.word	0x40004800
 80040e8:	000186a0 	.word	0x000186a0

080040ec <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80040f0:	4b11      	ldr	r3, [pc, #68]	@ (8004138 <MX_USART6_UART_Init+0x4c>)
 80040f2:	4a12      	ldr	r2, [pc, #72]	@ (800413c <MX_USART6_UART_Init+0x50>)
 80040f4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80040f6:	4b10      	ldr	r3, [pc, #64]	@ (8004138 <MX_USART6_UART_Init+0x4c>)
 80040f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80040fc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80040fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004138 <MX_USART6_UART_Init+0x4c>)
 8004100:	2200      	movs	r2, #0
 8004102:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004104:	4b0c      	ldr	r3, [pc, #48]	@ (8004138 <MX_USART6_UART_Init+0x4c>)
 8004106:	2200      	movs	r2, #0
 8004108:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800410a:	4b0b      	ldr	r3, [pc, #44]	@ (8004138 <MX_USART6_UART_Init+0x4c>)
 800410c:	2200      	movs	r2, #0
 800410e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004110:	4b09      	ldr	r3, [pc, #36]	@ (8004138 <MX_USART6_UART_Init+0x4c>)
 8004112:	220c      	movs	r2, #12
 8004114:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004116:	4b08      	ldr	r3, [pc, #32]	@ (8004138 <MX_USART6_UART_Init+0x4c>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800411c:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <MX_USART6_UART_Init+0x4c>)
 800411e:	2200      	movs	r2, #0
 8004120:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004122:	4805      	ldr	r0, [pc, #20]	@ (8004138 <MX_USART6_UART_Init+0x4c>)
 8004124:	f007 fd9a 	bl	800bc5c <HAL_UART_Init>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800412e:	f001 f843 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004132:	bf00      	nop
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	20000cdc 	.word	0x20000cdc
 800413c:	40011400 	.word	0x40011400

08004140 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004146:	2300      	movs	r3, #0
 8004148:	607b      	str	r3, [r7, #4]
 800414a:	4b2f      	ldr	r3, [pc, #188]	@ (8004208 <MX_DMA_Init+0xc8>)
 800414c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414e:	4a2e      	ldr	r2, [pc, #184]	@ (8004208 <MX_DMA_Init+0xc8>)
 8004150:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004154:	6313      	str	r3, [r2, #48]	@ 0x30
 8004156:	4b2c      	ldr	r3, [pc, #176]	@ (8004208 <MX_DMA_Init+0xc8>)
 8004158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800415e:	607b      	str	r3, [r7, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004162:	2300      	movs	r3, #0
 8004164:	603b      	str	r3, [r7, #0]
 8004166:	4b28      	ldr	r3, [pc, #160]	@ (8004208 <MX_DMA_Init+0xc8>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	4a27      	ldr	r2, [pc, #156]	@ (8004208 <MX_DMA_Init+0xc8>)
 800416c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004170:	6313      	str	r3, [r2, #48]	@ 0x30
 8004172:	4b25      	ldr	r3, [pc, #148]	@ (8004208 <MX_DMA_Init+0xc8>)
 8004174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800417e:	2200      	movs	r2, #0
 8004180:	2105      	movs	r1, #5
 8004182:	200c      	movs	r0, #12
 8004184:	f003 fff7 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004188:	200c      	movs	r0, #12
 800418a:	f004 f810 	bl	80081ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 800418e:	2200      	movs	r2, #0
 8004190:	2105      	movs	r1, #5
 8004192:	200d      	movs	r0, #13
 8004194:	f003 ffef 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004198:	200d      	movs	r0, #13
 800419a:	f004 f808 	bl	80081ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800419e:	2200      	movs	r2, #0
 80041a0:	2105      	movs	r1, #5
 80041a2:	200f      	movs	r0, #15
 80041a4:	f003 ffe7 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80041a8:	200f      	movs	r0, #15
 80041aa:	f004 f800 	bl	80081ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80041ae:	2200      	movs	r2, #0
 80041b0:	2105      	movs	r1, #5
 80041b2:	202f      	movs	r0, #47	@ 0x2f
 80041b4:	f003 ffdf 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80041b8:	202f      	movs	r0, #47	@ 0x2f
 80041ba:	f003 fff8 	bl	80081ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80041be:	2200      	movs	r2, #0
 80041c0:	2105      	movs	r1, #5
 80041c2:	2039      	movs	r0, #57	@ 0x39
 80041c4:	f003 ffd7 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80041c8:	2039      	movs	r0, #57	@ 0x39
 80041ca:	f003 fff0 	bl	80081ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2105      	movs	r1, #5
 80041d2:	203a      	movs	r0, #58	@ 0x3a
 80041d4:	f003 ffcf 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80041d8:	203a      	movs	r0, #58	@ 0x3a
 80041da:	f003 ffe8 	bl	80081ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80041de:	2200      	movs	r2, #0
 80041e0:	2105      	movs	r1, #5
 80041e2:	2045      	movs	r0, #69	@ 0x45
 80041e4:	f003 ffc7 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80041e8:	2045      	movs	r0, #69	@ 0x45
 80041ea:	f003 ffe0 	bl	80081ae <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80041ee:	2200      	movs	r2, #0
 80041f0:	2105      	movs	r1, #5
 80041f2:	2046      	movs	r0, #70	@ 0x46
 80041f4:	f003 ffbf 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80041f8:	2046      	movs	r0, #70	@ 0x46
 80041fa:	f003 ffd8 	bl	80081ae <HAL_NVIC_EnableIRQ>

}
 80041fe:	bf00      	nop
 8004200:	3708      	adds	r7, #8
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800

0800420c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08e      	sub	sp, #56	@ 0x38
 8004210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004216:	2200      	movs	r2, #0
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	609a      	str	r2, [r3, #8]
 800421e:	60da      	str	r2, [r3, #12]
 8004220:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004222:	2300      	movs	r3, #0
 8004224:	623b      	str	r3, [r7, #32]
 8004226:	4b71      	ldr	r3, [pc, #452]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422a:	4a70      	ldr	r2, [pc, #448]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 800422c:	f043 0302 	orr.w	r3, r3, #2
 8004230:	6313      	str	r3, [r2, #48]	@ 0x30
 8004232:	4b6e      	ldr	r3, [pc, #440]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	623b      	str	r3, [r7, #32]
 800423c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800423e:	2300      	movs	r3, #0
 8004240:	61fb      	str	r3, [r7, #28]
 8004242:	4b6a      	ldr	r3, [pc, #424]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	4a69      	ldr	r2, [pc, #420]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800424c:	6313      	str	r3, [r2, #48]	@ 0x30
 800424e:	4b67      	ldr	r3, [pc, #412]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004256:	61fb      	str	r3, [r7, #28]
 8004258:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800425a:	2300      	movs	r3, #0
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	4b63      	ldr	r3, [pc, #396]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004262:	4a62      	ldr	r2, [pc, #392]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	6313      	str	r3, [r2, #48]	@ 0x30
 800426a:	4b60      	ldr	r3, [pc, #384]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426e:	f003 0301 	and.w	r3, r3, #1
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	4b5c      	ldr	r3, [pc, #368]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 800427c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800427e:	4a5b      	ldr	r2, [pc, #364]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004280:	f043 0308 	orr.w	r3, r3, #8
 8004284:	6313      	str	r3, [r2, #48]	@ 0x30
 8004286:	4b59      	ldr	r3, [pc, #356]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800428a:	f003 0308 	and.w	r3, r3, #8
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	4b55      	ldr	r3, [pc, #340]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429a:	4a54      	ldr	r2, [pc, #336]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 800429c:	f043 0304 	orr.w	r3, r3, #4
 80042a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80042a2:	4b52      	ldr	r3, [pc, #328]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	613b      	str	r3, [r7, #16]
 80042ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	4b4e      	ldr	r3, [pc, #312]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b6:	4a4d      	ldr	r2, [pc, #308]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80042be:	4b4b      	ldr	r3, [pc, #300]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80042ca:	2300      	movs	r3, #0
 80042cc:	60bb      	str	r3, [r7, #8]
 80042ce:	4b47      	ldr	r3, [pc, #284]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	4a46      	ldr	r2, [pc, #280]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80042d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042da:	4b44      	ldr	r3, [pc, #272]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e2:	60bb      	str	r3, [r7, #8]
 80042e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042e6:	2300      	movs	r3, #0
 80042e8:	607b      	str	r3, [r7, #4]
 80042ea:	4b40      	ldr	r3, [pc, #256]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ee:	4a3f      	ldr	r2, [pc, #252]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042f0:	f043 0320 	orr.w	r3, r3, #32
 80042f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042f6:	4b3d      	ldr	r3, [pc, #244]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	607b      	str	r3, [r7, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004302:	2300      	movs	r3, #0
 8004304:	603b      	str	r3, [r7, #0]
 8004306:	4b39      	ldr	r3, [pc, #228]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800430a:	4a38      	ldr	r2, [pc, #224]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 800430c:	f043 0310 	orr.w	r3, r3, #16
 8004310:	6313      	str	r3, [r2, #48]	@ 0x30
 8004312:	4b36      	ldr	r3, [pc, #216]	@ (80043ec <MX_GPIO_Init+0x1e0>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	f003 0310 	and.w	r3, r3, #16
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800431e:	2200      	movs	r2, #0
 8004320:	2140      	movs	r1, #64	@ 0x40
 8004322:	4833      	ldr	r0, [pc, #204]	@ (80043f0 <MX_GPIO_Init+0x1e4>)
 8004324:	f004 fcfc 	bl	8008d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004328:	2200      	movs	r2, #0
 800432a:	2110      	movs	r1, #16
 800432c:	4831      	ldr	r0, [pc, #196]	@ (80043f4 <MX_GPIO_Init+0x1e8>)
 800432e:	f004 fcf7 	bl	8008d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8004332:	2200      	movs	r2, #0
 8004334:	2101      	movs	r1, #1
 8004336:	4830      	ldr	r0, [pc, #192]	@ (80043f8 <MX_GPIO_Init+0x1ec>)
 8004338:	f004 fcf2 	bl	8008d20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800433c:	2340      	movs	r3, #64	@ 0x40
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004340:	2301      	movs	r3, #1
 8004342:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004344:	2300      	movs	r3, #0
 8004346:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004348:	2300      	movs	r3, #0
 800434a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800434c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004350:	4619      	mov	r1, r3
 8004352:	4827      	ldr	r0, [pc, #156]	@ (80043f0 <MX_GPIO_Init+0x1e4>)
 8004354:	f004 fb48 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004358:	2308      	movs	r3, #8
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800435c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004360:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004362:	2300      	movs	r3, #0
 8004364:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004366:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800436a:	4619      	mov	r1, r3
 800436c:	4820      	ldr	r0, [pc, #128]	@ (80043f0 <MX_GPIO_Init+0x1e4>)
 800436e:	f004 fb3b 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004372:	2310      	movs	r3, #16
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004376:	2301      	movs	r3, #1
 8004378:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437a:	2300      	movs	r3, #0
 800437c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437e:	2300      	movs	r3, #0
 8004380:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004382:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004386:	4619      	mov	r1, r3
 8004388:	481a      	ldr	r0, [pc, #104]	@ (80043f4 <MX_GPIO_Init+0x1e8>)
 800438a:	f004 fb2d 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 800438e:	2330      	movs	r3, #48	@ 0x30
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004392:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8004396:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800439c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043a0:	4619      	mov	r1, r3
 80043a2:	4816      	ldr	r0, [pc, #88]	@ (80043fc <MX_GPIO_Init+0x1f0>)
 80043a4:	f004 fb20 	bl	80089e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80043a8:	2301      	movs	r3, #1
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043ac:	2301      	movs	r3, #1
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b4:	2300      	movs	r3, #0
 80043b6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043bc:	4619      	mov	r1, r3
 80043be:	480e      	ldr	r0, [pc, #56]	@ (80043f8 <MX_GPIO_Init+0x1ec>)
 80043c0:	f004 fb12 	bl	80089e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80043c4:	2200      	movs	r2, #0
 80043c6:	2105      	movs	r1, #5
 80043c8:	2009      	movs	r0, #9
 80043ca:	f003 fed4 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80043ce:	2009      	movs	r0, #9
 80043d0:	f003 feed 	bl	80081ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80043d4:	2200      	movs	r2, #0
 80043d6:	2105      	movs	r1, #5
 80043d8:	200a      	movs	r0, #10
 80043da:	f003 fecc 	bl	8008176 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80043de:	200a      	movs	r0, #10
 80043e0:	f003 fee5 	bl	80081ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80043e4:	bf00      	nop
 80043e6:	3738      	adds	r7, #56	@ 0x38
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	40021800 	.word	0x40021800
 80043f4:	40020000 	.word	0x40020000
 80043f8:	40020400 	.word	0x40020400
 80043fc:	40020800 	.word	0x40020800

08004400 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int16_t aimingCounter = 0;
 8004408:	2300      	movs	r3, #0
 800440a:	81fb      	strh	r3, [r7, #14]
	int16_t firingCounter = 0;
 800440c:	2300      	movs	r3, #0
 800440e:	81bb      	strh	r3, [r7, #12]
	// LED_PWM_Start();
	// HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, 1);
	// __HAL_TIM_PRESCALER(&htim4, 2);
	// HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
	// HAL_TIM_Base_Start(&htim4);
	if (BMI088_accel_init()) {
 8004410:	f7fc ff38 	bl	8001284 <BMI088_accel_init>
		//usart_printf("WARNING - BMI088 accelerometer init failed \r\n");
	}
	if (BMI088_gyro_init()) {
 8004414:	f7fc ffee 	bl	80013f4 <BMI088_gyro_init>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d002      	beq.n	8004424 <TaskMain+0x24>
		usart_printf("WARNING - BMI088 gyroscope init failed \r\n");
 800441e:	4893      	ldr	r0, [pc, #588]	@ (800466c <TaskMain+0x26c>)
 8004420:	f7fe fa4c 	bl	80028bc <usart_printf>
	}
	if (ist8310_init()) {
 8004424:	f7ff f854 	bl	80034d0 <ist8310_init>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <TaskMain+0x34>
		usart_printf("WARNING - IST8310 compass init failed \r\n");
 800442e:	4890      	ldr	r0, [pc, #576]	@ (8004670 <TaskMain+0x270>)
 8004430:	f7fe fa44 	bl	80028bc <usart_printf>
	}
	CAN_defineMotor(Bus2, M3508, 1);
 8004434:	2201      	movs	r2, #1
 8004436:	2101      	movs	r1, #1
 8004438:	2002      	movs	r0, #2
 800443a:	f7fd fb65 	bl	8001b08 <CAN_defineMotor>
	CAN_defineMotor(Bus2, M2006, 2);
 800443e:	2202      	movs	r2, #2
 8004440:	2102      	movs	r1, #2
 8004442:	2002      	movs	r0, #2
 8004444:	f7fd fb60 	bl	8001b08 <CAN_defineMotor>
	CAN_defineMotor(Bus2, GM6020, 1);
 8004448:	2201      	movs	r2, #1
 800444a:	2103      	movs	r1, #3
 800444c:	2002      	movs	r0, #2
 800444e:	f7fd fb5b 	bl	8001b08 <CAN_defineMotor>

	osDelay(150);
 8004452:	2096      	movs	r0, #150	@ 0x96
 8004454:	f008 ff22 	bl	800d29c <osDelay>

	// HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
	JoulesBuffer = 60;
 8004458:	4b86      	ldr	r3, [pc, #536]	@ (8004674 <TaskMain+0x274>)
 800445a:	4a87      	ldr	r2, [pc, #540]	@ (8004678 <TaskMain+0x278>)
 800445c:	601a      	str	r2, [r3, #0]
	for(;;) {

    	int8_t leftSwitch = getRCswitch(1);
 800445e:	2001      	movs	r0, #1
 8004460:	f001 fdf2 	bl	8006048 <getRCswitch>
 8004464:	4603      	mov	r3, r0
 8004466:	72fb      	strb	r3, [r7, #11]
		// currentGameStatus = game_status.game_progress;
		if (game_status.game_progress == 0 && currentGameStatus < 0) {
			currentGameStatus = 0;
		} else if ((game_status.game_progress == 1 && currentGameStatus < 1) || leftSwitch == 2) {
 8004468:	4b84      	ldr	r3, [pc, #528]	@ (800467c <TaskMain+0x27c>)
 800446a:	785b      	ldrb	r3, [r3, #1]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d103      	bne.n	8004478 <TaskMain+0x78>
 8004470:	4b83      	ldr	r3, [pc, #524]	@ (8004680 <TaskMain+0x280>)
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d003      	beq.n	8004480 <TaskMain+0x80>
 8004478:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d103      	bne.n	8004488 <TaskMain+0x88>
			currentGameStatus = 1;
 8004480:	4b7f      	ldr	r3, [pc, #508]	@ (8004680 <TaskMain+0x280>)
 8004482:	2201      	movs	r2, #1
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	e036      	b.n	80044f6 <TaskMain+0xf6>
		} else if (game_status.game_progress == 2 && currentGameStatus < 2) {
 8004488:	4b7c      	ldr	r3, [pc, #496]	@ (800467c <TaskMain+0x27c>)
 800448a:	785b      	ldrb	r3, [r3, #1]
 800448c:	2b02      	cmp	r3, #2
 800448e:	d107      	bne.n	80044a0 <TaskMain+0xa0>
 8004490:	4b7b      	ldr	r3, [pc, #492]	@ (8004680 <TaskMain+0x280>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d803      	bhi.n	80044a0 <TaskMain+0xa0>
			currentGameStatus = 2;
 8004498:	4b79      	ldr	r3, [pc, #484]	@ (8004680 <TaskMain+0x280>)
 800449a:	2202      	movs	r2, #2
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e02a      	b.n	80044f6 <TaskMain+0xf6>
		} else if (game_status.game_progress == 3 && currentGameStatus < 3) {
 80044a0:	4b76      	ldr	r3, [pc, #472]	@ (800467c <TaskMain+0x27c>)
 80044a2:	785b      	ldrb	r3, [r3, #1]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d107      	bne.n	80044b8 <TaskMain+0xb8>
 80044a8:	4b75      	ldr	r3, [pc, #468]	@ (8004680 <TaskMain+0x280>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d803      	bhi.n	80044b8 <TaskMain+0xb8>
			currentGameStatus = 3;
 80044b0:	4b73      	ldr	r3, [pc, #460]	@ (8004680 <TaskMain+0x280>)
 80044b2:	2203      	movs	r2, #3
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	e01e      	b.n	80044f6 <TaskMain+0xf6>
		} else if ((game_status.game_progress == 4 && currentGameStatus < 4) || leftSwitch == 3) {
 80044b8:	4b70      	ldr	r3, [pc, #448]	@ (800467c <TaskMain+0x27c>)
 80044ba:	785b      	ldrb	r3, [r3, #1]
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d103      	bne.n	80044c8 <TaskMain+0xc8>
 80044c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004680 <TaskMain+0x280>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b03      	cmp	r3, #3
 80044c6:	d903      	bls.n	80044d0 <TaskMain+0xd0>
 80044c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d103      	bne.n	80044d8 <TaskMain+0xd8>
			currentGameStatus = 4;
 80044d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004680 <TaskMain+0x280>)
 80044d2:	2204      	movs	r2, #4
 80044d4:	701a      	strb	r2, [r3, #0]
 80044d6:	e00e      	b.n	80044f6 <TaskMain+0xf6>
		} else if ((game_status.game_progress == 5 && currentGameStatus < 5) || leftSwitch == 1) {
 80044d8:	4b68      	ldr	r3, [pc, #416]	@ (800467c <TaskMain+0x27c>)
 80044da:	785b      	ldrb	r3, [r3, #1]
 80044dc:	2b05      	cmp	r3, #5
 80044de:	d103      	bne.n	80044e8 <TaskMain+0xe8>
 80044e0:	4b67      	ldr	r3, [pc, #412]	@ (8004680 <TaskMain+0x280>)
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d903      	bls.n	80044f0 <TaskMain+0xf0>
 80044e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d102      	bne.n	80044f6 <TaskMain+0xf6>
			currentGameStatus = 5;
 80044f0:	4b63      	ldr	r3, [pc, #396]	@ (8004680 <TaskMain+0x280>)
 80044f2:	2205      	movs	r2, #5
 80044f4:	701a      	strb	r2, [r3, #0]
		}
		PWMOutput(LED, 2, 1);
 80044f6:	2201      	movs	r2, #1
 80044f8:	2102      	movs	r1, #2
 80044fa:	2001      	movs	r0, #1
 80044fc:	f001 fa38 	bl	8005970 <PWMOutput>
		PWMInitialize(LED, FR, 2, 0.5);
 8004500:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8004504:	2202      	movs	r2, #2
 8004506:	2101      	movs	r1, #1
 8004508:	2001      	movs	r0, #1
 800450a:	f001 f919 	bl	8005740 <PWMInitialize>
		settingMaxCurrentVal((float)power_heat_data.buffer_energy,100);
 800450e:	4b5d      	ldr	r3, [pc, #372]	@ (8004684 <TaskMain+0x284>)
 8004510:	891b      	ldrh	r3, [r3, #8]
 8004512:	ee07 3a90 	vmov	s15, r3
 8004516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800451a:	2064      	movs	r0, #100	@ 0x64
 800451c:	eeb0 0a67 	vmov.f32	s0, s15
 8004520:	f7fe fb42 	bl	8002ba8 <settingMaxCurrentVal>

		// 0 = red, 1 = blue
		// 0 = SHOOT AT BLUE, 1 = SHOOT AT RED


		switch (currentGameStatus) {
 8004524:	4b56      	ldr	r3, [pc, #344]	@ (8004680 <TaskMain+0x280>)
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b05      	cmp	r3, #5
 800452a:	d85d      	bhi.n	80045e8 <TaskMain+0x1e8>
 800452c:	a201      	add	r2, pc, #4	@ (adr r2, 8004534 <TaskMain+0x134>)
 800452e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004532:	bf00      	nop
 8004534:	0800454d 	.word	0x0800454d
 8004538:	08004567 	.word	0x08004567
 800453c:	08004581 	.word	0x08004581
 8004540:	0800459b 	.word	0x0800459b
 8004544:	080045b5 	.word	0x080045b5
 8004548:	080045cf 	.word	0x080045cf
		case 0:
			calibration = 0;
 800454c:	4b4e      	ldr	r3, [pc, #312]	@ (8004688 <TaskMain+0x288>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
			rotationTime = 0;
 8004552:	4b4e      	ldr	r3, [pc, #312]	@ (800468c <TaskMain+0x28c>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
			shootingPhase = 0;
 8004558:	4b4d      	ldr	r3, [pc, #308]	@ (8004690 <TaskMain+0x290>)
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]
			songPhase = 0;
 800455e:	4b4d      	ldr	r3, [pc, #308]	@ (8004694 <TaskMain+0x294>)
 8004560:	2200      	movs	r2, #0
 8004562:	701a      	strb	r2, [r3, #0]
			break;
 8004564:	e040      	b.n	80045e8 <TaskMain+0x1e8>
		case 1:
			calibration = 1;
 8004566:	4b48      	ldr	r3, [pc, #288]	@ (8004688 <TaskMain+0x288>)
 8004568:	2201      	movs	r2, #1
 800456a:	701a      	strb	r2, [r3, #0]
			rotationTime = 0;
 800456c:	4b47      	ldr	r3, [pc, #284]	@ (800468c <TaskMain+0x28c>)
 800456e:	2200      	movs	r2, #0
 8004570:	701a      	strb	r2, [r3, #0]
			shootingPhase = 0;
 8004572:	4b47      	ldr	r3, [pc, #284]	@ (8004690 <TaskMain+0x290>)
 8004574:	2200      	movs	r2, #0
 8004576:	701a      	strb	r2, [r3, #0]
			songPhase = 0;
 8004578:	4b46      	ldr	r3, [pc, #280]	@ (8004694 <TaskMain+0x294>)
 800457a:	2200      	movs	r2, #0
 800457c:	701a      	strb	r2, [r3, #0]
			break;
 800457e:	e033      	b.n	80045e8 <TaskMain+0x1e8>
		case 2:
			calibration = 1;
 8004580:	4b41      	ldr	r3, [pc, #260]	@ (8004688 <TaskMain+0x288>)
 8004582:	2201      	movs	r2, #1
 8004584:	701a      	strb	r2, [r3, #0]
			rotationTime = 0;
 8004586:	4b41      	ldr	r3, [pc, #260]	@ (800468c <TaskMain+0x28c>)
 8004588:	2200      	movs	r2, #0
 800458a:	701a      	strb	r2, [r3, #0]
			shootingPhase = 0;
 800458c:	4b40      	ldr	r3, [pc, #256]	@ (8004690 <TaskMain+0x290>)
 800458e:	2200      	movs	r2, #0
 8004590:	701a      	strb	r2, [r3, #0]
			songPhase = 1;
 8004592:	4b40      	ldr	r3, [pc, #256]	@ (8004694 <TaskMain+0x294>)
 8004594:	2201      	movs	r2, #1
 8004596:	701a      	strb	r2, [r3, #0]
			break;
 8004598:	e026      	b.n	80045e8 <TaskMain+0x1e8>
		case 3:
			calibration = 1;
 800459a:	4b3b      	ldr	r3, [pc, #236]	@ (8004688 <TaskMain+0x288>)
 800459c:	2201      	movs	r2, #1
 800459e:	701a      	strb	r2, [r3, #0]
			rotationTime = 0;
 80045a0:	4b3a      	ldr	r3, [pc, #232]	@ (800468c <TaskMain+0x28c>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	701a      	strb	r2, [r3, #0]
			shootingPhase = 0;
 80045a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004690 <TaskMain+0x290>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	701a      	strb	r2, [r3, #0]
			songPhase = 1;
 80045ac:	4b39      	ldr	r3, [pc, #228]	@ (8004694 <TaskMain+0x294>)
 80045ae:	2201      	movs	r2, #1
 80045b0:	701a      	strb	r2, [r3, #0]
			break;
 80045b2:	e019      	b.n	80045e8 <TaskMain+0x1e8>
		case 4:
			calibration = 0;
 80045b4:	4b34      	ldr	r3, [pc, #208]	@ (8004688 <TaskMain+0x288>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	701a      	strb	r2, [r3, #0]
			rotationTime = 1;
 80045ba:	4b34      	ldr	r3, [pc, #208]	@ (800468c <TaskMain+0x28c>)
 80045bc:	2201      	movs	r2, #1
 80045be:	701a      	strb	r2, [r3, #0]
			shootingPhase = 1;
 80045c0:	4b33      	ldr	r3, [pc, #204]	@ (8004690 <TaskMain+0x290>)
 80045c2:	2201      	movs	r2, #1
 80045c4:	701a      	strb	r2, [r3, #0]
			songPhase = 1;
 80045c6:	4b33      	ldr	r3, [pc, #204]	@ (8004694 <TaskMain+0x294>)
 80045c8:	2201      	movs	r2, #1
 80045ca:	701a      	strb	r2, [r3, #0]
			break;
 80045cc:	e00c      	b.n	80045e8 <TaskMain+0x1e8>
		case 5:
			calibration = 0;
 80045ce:	4b2e      	ldr	r3, [pc, #184]	@ (8004688 <TaskMain+0x288>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	701a      	strb	r2, [r3, #0]
			rotationTime = 0;
 80045d4:	4b2d      	ldr	r3, [pc, #180]	@ (800468c <TaskMain+0x28c>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	701a      	strb	r2, [r3, #0]
			shootingPhase = 0;
 80045da:	4b2d      	ldr	r3, [pc, #180]	@ (8004690 <TaskMain+0x290>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
			songPhase = 0;
 80045e0:	4b2c      	ldr	r3, [pc, #176]	@ (8004694 <TaskMain+0x294>)
 80045e2:	2200      	movs	r2, #0
 80045e4:	701a      	strb	r2, [r3, #0]
			break;
 80045e6:	bf00      	nop
		}

		uint8_t deltaY = 20;
 80045e8:	2314      	movs	r3, #20
 80045ea:	72bb      	strb	r3, [r7, #10]
		uint8_t deltaX = 20;
 80045ec:	2314      	movs	r3, #20
 80045ee:	727b      	strb	r3, [r7, #9]

		if (shootingPhase == 1) {
 80045f0:	4b27      	ldr	r3, [pc, #156]	@ (8004690 <TaskMain+0x290>)
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	f040 80e9 	bne.w	80047cc <TaskMain+0x3cc>
			switch (robot_status.robot_id) {
 80045fa:	4b27      	ldr	r3, [pc, #156]	@ (8004698 <TaskMain+0x298>)
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d002      	beq.n	8004608 <TaskMain+0x208>
 8004602:	2b01      	cmp	r3, #1
 8004604:	d07f      	beq.n	8004706 <TaskMain+0x306>
 8004606:	e0e7      	b.n	80047d8 <TaskMain+0x3d8>
			case 0:
				if (getBlueX() != 255) {
 8004608:	f7fe f9b4 	bl	8002974 <getBlueX>
 800460c:	4603      	mov	r3, r0
 800460e:	2bff      	cmp	r3, #255	@ 0xff
 8004610:	d002      	beq.n	8004618 <TaskMain+0x218>
					aimingCounter = 100;
 8004612:	2364      	movs	r3, #100	@ 0x64
 8004614:	81fb      	strh	r3, [r7, #14]
 8004616:	e005      	b.n	8004624 <TaskMain+0x224>
				} else {
					aimingCounter--;
 8004618:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	81fb      	strh	r3, [r7, #14]
				}
				if (aimingCounter < 0) {
 8004624:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004628:	2b00      	cmp	r3, #0
 800462a:	da05      	bge.n	8004638 <TaskMain+0x238>
					aimingCounter = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	81fb      	strh	r3, [r7, #14]
					firingStages = 0;
 8004630:	4b1a      	ldr	r3, [pc, #104]	@ (800469c <TaskMain+0x29c>)
 8004632:	2200      	movs	r2, #0
 8004634:	701a      	strb	r2, [r3, #0]
 8004636:	e006      	b.n	8004646 <TaskMain+0x246>
				} else if (aimingCounter > 0){
 8004638:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800463c:	2b00      	cmp	r3, #0
 800463e:	dd02      	ble.n	8004646 <TaskMain+0x246>
					firingStages = 1;
 8004640:	4b16      	ldr	r3, [pc, #88]	@ (800469c <TaskMain+0x29c>)
 8004642:	2201      	movs	r2, #1
 8004644:	701a      	strb	r2, [r3, #0]
				}

				if (firingCounter > 0) {
 8004646:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	dd05      	ble.n	800465a <TaskMain+0x25a>
					firingCounter--;
 800464e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29b      	uxth	r3, r3
 8004658:	81bb      	strh	r3, [r7, #12]
				}
				if (firingCounter == 0) {
 800465a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d120      	bne.n	80046a4 <TaskMain+0x2a4>
					SHOOT = 0;
 8004662:	4b0f      	ldr	r3, [pc, #60]	@ (80046a0 <TaskMain+0x2a0>)
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
 8004668:	e01f      	b.n	80046aa <TaskMain+0x2aa>
 800466a:	bf00      	nop
 800466c:	08011c48 	.word	0x08011c48
 8004670:	08011c74 	.word	0x08011c74
 8004674:	20000094 	.word	0x20000094
 8004678:	42700000 	.word	0x42700000
 800467c:	200006e8 	.word	0x200006e8
 8004680:	20000f1c 	.word	0x20000f1c
 8004684:	20000708 	.word	0x20000708
 8004688:	20000f1d 	.word	0x20000f1d
 800468c:	20000f1e 	.word	0x20000f1e
 8004690:	20000f1f 	.word	0x20000f1f
 8004694:	20000f20 	.word	0x20000f20
 8004698:	200006f8 	.word	0x200006f8
 800469c:	20000f21 	.word	0x20000f21
 80046a0:	20000f22 	.word	0x20000f22
				} else {
					SHOOT = 1;
 80046a4:	4b4e      	ldr	r3, [pc, #312]	@ (80047e0 <TaskMain+0x3e0>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
				}
				if ((getBlueX() < (setX + deltaX)) && (getBlueX() > (setX - deltaX)) && (getBlueY() < (setY + deltaY)) && (getBlueY() > (setY - deltaY))) {
 80046aa:	f7fe f963 	bl	8002974 <getBlueX>
 80046ae:	4603      	mov	r3, r0
 80046b0:	461a      	mov	r2, r3
 80046b2:	4b4c      	ldr	r3, [pc, #304]	@ (80047e4 <TaskMain+0x3e4>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4619      	mov	r1, r3
 80046b8:	7a7b      	ldrb	r3, [r7, #9]
 80046ba:	440b      	add	r3, r1
 80046bc:	429a      	cmp	r2, r3
 80046be:	da22      	bge.n	8004706 <TaskMain+0x306>
 80046c0:	f7fe f958 	bl	8002974 <getBlueX>
 80046c4:	4603      	mov	r3, r0
 80046c6:	461a      	mov	r2, r3
 80046c8:	4b46      	ldr	r3, [pc, #280]	@ (80047e4 <TaskMain+0x3e4>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	4619      	mov	r1, r3
 80046ce:	7a7b      	ldrb	r3, [r7, #9]
 80046d0:	1acb      	subs	r3, r1, r3
 80046d2:	429a      	cmp	r2, r3
 80046d4:	dd17      	ble.n	8004706 <TaskMain+0x306>
 80046d6:	f7fe f959 	bl	800298c <getBlueY>
 80046da:	4603      	mov	r3, r0
 80046dc:	461a      	mov	r2, r3
 80046de:	4b42      	ldr	r3, [pc, #264]	@ (80047e8 <TaskMain+0x3e8>)
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	4619      	mov	r1, r3
 80046e4:	7abb      	ldrb	r3, [r7, #10]
 80046e6:	440b      	add	r3, r1
 80046e8:	429a      	cmp	r2, r3
 80046ea:	da0c      	bge.n	8004706 <TaskMain+0x306>
 80046ec:	f7fe f94e 	bl	800298c <getBlueY>
 80046f0:	4603      	mov	r3, r0
 80046f2:	461a      	mov	r2, r3
 80046f4:	4b3c      	ldr	r3, [pc, #240]	@ (80047e8 <TaskMain+0x3e8>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	4619      	mov	r1, r3
 80046fa:	7abb      	ldrb	r3, [r7, #10]
 80046fc:	1acb      	subs	r3, r1, r3
 80046fe:	429a      	cmp	r2, r3
 8004700:	dd01      	ble.n	8004706 <TaskMain+0x306>
					firingCounter = 5;
 8004702:	2305      	movs	r3, #5
 8004704:	81bb      	strh	r3, [r7, #12]
				}

			case 1:
				if (getRedX() != 255) {
 8004706:	f7fe f91d 	bl	8002944 <getRedX>
 800470a:	4603      	mov	r3, r0
 800470c:	2bff      	cmp	r3, #255	@ 0xff
 800470e:	d002      	beq.n	8004716 <TaskMain+0x316>
					aimingCounter = 100;
 8004710:	2364      	movs	r3, #100	@ 0x64
 8004712:	81fb      	strh	r3, [r7, #14]
 8004714:	e005      	b.n	8004722 <TaskMain+0x322>
				} else {
					aimingCounter--;
 8004716:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29b      	uxth	r3, r3
 8004720:	81fb      	strh	r3, [r7, #14]
				}
				if (aimingCounter < 0) {
 8004722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004726:	2b00      	cmp	r3, #0
 8004728:	da05      	bge.n	8004736 <TaskMain+0x336>
					aimingCounter = 0;
 800472a:	2300      	movs	r3, #0
 800472c:	81fb      	strh	r3, [r7, #14]
					firingStages = 0;
 800472e:	4b2f      	ldr	r3, [pc, #188]	@ (80047ec <TaskMain+0x3ec>)
 8004730:	2200      	movs	r2, #0
 8004732:	701a      	strb	r2, [r3, #0]
 8004734:	e006      	b.n	8004744 <TaskMain+0x344>
				} else if (aimingCounter > 0){
 8004736:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800473a:	2b00      	cmp	r3, #0
 800473c:	dd02      	ble.n	8004744 <TaskMain+0x344>
					firingStages = 1;
 800473e:	4b2b      	ldr	r3, [pc, #172]	@ (80047ec <TaskMain+0x3ec>)
 8004740:	2201      	movs	r2, #1
 8004742:	701a      	strb	r2, [r3, #0]
				}

				if (firingCounter > 0) {
 8004744:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	dd05      	ble.n	8004758 <TaskMain+0x358>
					firingCounter--;
 800474c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004750:	b29b      	uxth	r3, r3
 8004752:	3b01      	subs	r3, #1
 8004754:	b29b      	uxth	r3, r3
 8004756:	81bb      	strh	r3, [r7, #12]
				}
				if (firingCounter == 0) {
 8004758:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d103      	bne.n	8004768 <TaskMain+0x368>
					SHOOT = 0;
 8004760:	4b1f      	ldr	r3, [pc, #124]	@ (80047e0 <TaskMain+0x3e0>)
 8004762:	2200      	movs	r2, #0
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e002      	b.n	800476e <TaskMain+0x36e>
				} else {
					SHOOT = 1;
 8004768:	4b1d      	ldr	r3, [pc, #116]	@ (80047e0 <TaskMain+0x3e0>)
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
				}
				if ((getRedX() < (setX + deltaX)) && (getRedX() > (setX - deltaX)) && (getRedY() < (setY + deltaY)) && (getRedY() > (setY - deltaY))) {
 800476e:	f7fe f8e9 	bl	8002944 <getRedX>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <TaskMain+0x3e4>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	4619      	mov	r1, r3
 800477c:	7a7b      	ldrb	r3, [r7, #9]
 800477e:	440b      	add	r3, r1
 8004780:	429a      	cmp	r2, r3
 8004782:	da29      	bge.n	80047d8 <TaskMain+0x3d8>
 8004784:	f7fe f8de 	bl	8002944 <getRedX>
 8004788:	4603      	mov	r3, r0
 800478a:	461a      	mov	r2, r3
 800478c:	4b15      	ldr	r3, [pc, #84]	@ (80047e4 <TaskMain+0x3e4>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	4619      	mov	r1, r3
 8004792:	7a7b      	ldrb	r3, [r7, #9]
 8004794:	1acb      	subs	r3, r1, r3
 8004796:	429a      	cmp	r2, r3
 8004798:	dd1e      	ble.n	80047d8 <TaskMain+0x3d8>
 800479a:	f7fe f8df 	bl	800295c <getRedY>
 800479e:	4603      	mov	r3, r0
 80047a0:	461a      	mov	r2, r3
 80047a2:	4b11      	ldr	r3, [pc, #68]	@ (80047e8 <TaskMain+0x3e8>)
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	4619      	mov	r1, r3
 80047a8:	7abb      	ldrb	r3, [r7, #10]
 80047aa:	440b      	add	r3, r1
 80047ac:	429a      	cmp	r2, r3
 80047ae:	da13      	bge.n	80047d8 <TaskMain+0x3d8>
 80047b0:	f7fe f8d4 	bl	800295c <getRedY>
 80047b4:	4603      	mov	r3, r0
 80047b6:	461a      	mov	r2, r3
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <TaskMain+0x3e8>)
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	4619      	mov	r1, r3
 80047be:	7abb      	ldrb	r3, [r7, #10]
 80047c0:	1acb      	subs	r3, r1, r3
 80047c2:	429a      	cmp	r2, r3
 80047c4:	dd08      	ble.n	80047d8 <TaskMain+0x3d8>
					firingCounter = 5;
 80047c6:	2305      	movs	r3, #5
 80047c8:	81bb      	strh	r3, [r7, #12]
 80047ca:	e005      	b.n	80047d8 <TaskMain+0x3d8>
				}
			}
		} else {
			firingStages = 0;
 80047cc:	4b07      	ldr	r3, [pc, #28]	@ (80047ec <TaskMain+0x3ec>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	701a      	strb	r2, [r3, #0]
			SHOOT = 0;
 80047d2:	4b03      	ldr	r3, [pc, #12]	@ (80047e0 <TaskMain+0x3e0>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	701a      	strb	r2, [r3, #0]
		}


		osDelay(5);
 80047d8:	2005      	movs	r0, #5
 80047da:	f008 fd5f 	bl	800d29c <osDelay>
	for(;;) {
 80047de:	e63e      	b.n	800445e <TaskMain+0x5e>
 80047e0:	20000f22 	.word	0x20000f22
 80047e4:	20000099 	.word	0x20000099
 80047e8:	20000098 	.word	0x20000098
 80047ec:	20000f21 	.word	0x20000f21

080047f0 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 80047f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f4:	b0ac      	sub	sp, #176	@ 0xb0
 80047f6:	af04      	add	r7, sp, #16
 80047f8:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN TaskChassis */

	PWMInit(&htim1, &htim4, &htim5, &htim8);
 80047fa:	4b76      	ldr	r3, [pc, #472]	@ (80049d4 <TaskChassis+0x1e4>)
 80047fc:	4a76      	ldr	r2, [pc, #472]	@ (80049d8 <TaskChassis+0x1e8>)
 80047fe:	4977      	ldr	r1, [pc, #476]	@ (80049dc <TaskChassis+0x1ec>)
 8004800:	4877      	ldr	r0, [pc, #476]	@ (80049e0 <TaskChassis+0x1f0>)
 8004802:	f000 fe7f 	bl	8005504 <PWMInit>

    int16_t rcRPM[4] = {0,0,0,0};                              // maps rc percentage reading to motors, assuming we're running M3508s at max 469RPM
 8004806:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]
    int16_t chassisTargetRPM[4] = {0, 0, 0, 0};
 8004810:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004814:	2200      	movs	r2, #0
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	605a      	str	r2, [r3, #4]


    int16_t rcYaw = 0;
 800481a:	2300      	movs	r3, #0
 800481c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
    int16_t chassisrcYaw = 0;
 8004820:	2300      	movs	r3, #0
 8004822:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70


    // int16_t rcPitch = 0;   	                    // range: 2204 ~ 4726


    int8_t jammed = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    int8_t indexerStopped = 1;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
    int8_t indexerTargetReached = 0;
 8004832:	2300      	movs	r3, #0
 8004834:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d

    int8_t previousC = 0;
 8004838:	2300      	movs	r3, #0
 800483a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

    int8_t bufferDead = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
    int8_t M3508Voltage = 24;
 8004844:	2318      	movs	r3, #24
 8004846:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d

    maxPower = 0;
 800484a:	4b66      	ldr	r3, [pc, #408]	@ (80049e4 <TaskChassis+0x1f4>)
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	601a      	str	r2, [r3, #0]
    float scuffedMaxedPower = 0;
 8004852:	f04f 0300 	mov.w	r3, #0
 8004856:	66bb      	str	r3, [r7, #104]	@ 0x68
    // float percentagePowerLimit = 1;

    float gyroidValue = 0;
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

    // int8_t switchForShooter = 0;
    int8_t motorOn = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    float MC[4] = {0, 0, 0, 0};
 8004866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	605a      	str	r2, [r3, #4]
 8004870:	609a      	str	r2, [r3, #8]
 8004872:	60da      	str	r2, [r3, #12]
	*/

    // int8_t switcherForBuzzer = 0;
    // int16_t counterForBuzzer = 0;

    int16_t turretPitchNew = 4750;
 8004874:	f241 238e 	movw	r3, #4750	@ 0x128e
 8004878:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94

    // int32_t actualTurretAngle = 0;


    double convertedAngle = 0;
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    int16_t rotationSpeedOfChassis = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
    // int16_t 你是一个奴隶 = 5;

    int8_t chassisVsTurretDrive = 0;
 800488e:	2300      	movs	r3, #0
 8004890:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
    int32_t motorRotationCounter = 0;
 8004894:	2300      	movs	r3, #0
 8004896:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	int64_t turretMotorPosition = 0;
 800489a:	f04f 0200 	mov.w	r2, #0
 800489e:	f04f 0300 	mov.w	r3, #0
 80048a2:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	int16_t initialTurretPosition = getRotorPosition(Bus2, GM6020, 1);
 80048a6:	2201      	movs	r2, #1
 80048a8:	2103      	movs	r1, #3
 80048aa:	2002      	movs	r0, #2
 80048ac:	f7fd ff4e 	bl	800274c <getRotorPosition>
 80048b0:	4603      	mov	r3, r0
 80048b2:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	int16_t currentMotorPosition = getRotorPosition(Bus2, GM6020, 1);
 80048b6:	2201      	movs	r2, #1
 80048b8:	2103      	movs	r1, #3
 80048ba:	2002      	movs	r0, #2
 80048bc:	f7fd ff46 	bl	800274c <getRotorPosition>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	int16_t previousMotorPosition = getRotorPosition(Bus2, GM6020, 1);
 80048c6:	2201      	movs	r2, #1
 80048c8:	2103      	movs	r1, #3
 80048ca:	2002      	movs	r0, #2
 80048cc:	f7fd ff3e 	bl	800274c <getRotorPosition>
 80048d0:	4603      	mov	r3, r0
 80048d2:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
	int16_t turingDirectionX = 0;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
	int16_t turingDirectionY = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

	uint8_t blueX = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	uint8_t blueY = 0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	uint8_t redX = 0;
 80048ee:	2300      	movs	r3, #0
 80048f0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
	uint8_t redY = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52

	int8_t cantShoot = 0;
 80048fa:	2300      	movs	r3, #0
 80048fc:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
    //int16_t targetRPM[4] = {0,0,0,0};

  /* Infinite loop */
    for(;;) {

    	int8_t leftSwitch = getRCswitch(1);
 8004900:	2001      	movs	r0, #1
 8004902:	f001 fba1 	bl	8006048 <getRCswitch>
 8004906:	4603      	mov	r3, r0
 8004908:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
    	int8_t rightSwitch = getRCswitch(0);
 800490c:	2000      	movs	r0, #0
 800490e:	f001 fb9b 	bl	8006048 <getRCswitch>
 8004912:	4603      	mov	r3, r0
 8004914:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50

    	currentMotorPosition = getRotorPosition(Bus1, GM6020, 4);
 8004918:	2204      	movs	r2, #4
 800491a:	2103      	movs	r1, #3
 800491c:	2001      	movs	r0, #1
 800491e:	f7fd ff15 	bl	800274c <getRotorPosition>
 8004922:	4603      	mov	r3, r0
 8004924:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
    	if ((currentMotorPosition - previousMotorPosition) < -6000) {
 8004928:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 800492c:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	@ 0x80
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	4a2d      	ldr	r2, [pc, #180]	@ (80049e8 <TaskChassis+0x1f8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	da05      	bge.n	8004944 <TaskChassis+0x154>
    		motorRotationCounter++;
 8004938:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800493c:	3301      	adds	r3, #1
 800493e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004942:	e00d      	b.n	8004960 <TaskChassis+0x170>
    	} else if ((currentMotorPosition - previousMotorPosition) > 6000) {
 8004944:	f9b7 2056 	ldrsh.w	r2, [r7, #86]	@ 0x56
 8004948:	f9b7 3080 	ldrsh.w	r3, [r7, #128]	@ 0x80
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 7270 	movw	r2, #6000	@ 0x1770
 8004952:	4293      	cmp	r3, r2
 8004954:	dd04      	ble.n	8004960 <TaskChassis+0x170>
    		motorRotationCounter--;
 8004956:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800495a:	3b01      	subs	r3, #1
 800495c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    	}

    	turretMotorPosition = currentMotorPosition + (8191 * motorRotationCounter);
 8004960:	f9b7 1056 	ldrsh.w	r1, [r7, #86]	@ 0x56
 8004964:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8004968:	4613      	mov	r3, r2
 800496a:	035b      	lsls	r3, r3, #13
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	440b      	add	r3, r1
 8004970:	17da      	asrs	r2, r3, #31
 8004972:	603b      	str	r3, [r7, #0]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	e9d7 3400 	ldrd	r3, r4, [r7]
 800497a:	e9c7 3416 	strd	r3, r4, [r7, #88]	@ 0x58

    	// actualTurretAngle = ((turretMotorPosition - initialTurretPosition)*0.025408f);
    	convertedAngle = ((turretMotorPosition - initialTurretPosition)* 0.0004434705f);
 800497e:	f9b7 3082 	ldrsh.w	r3, [r7, #130]	@ 0x82
 8004982:	17da      	asrs	r2, r3, #31
 8004984:	4698      	mov	r8, r3
 8004986:	4691      	mov	r9, r2
 8004988:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800498c:	ebb2 0108 	subs.w	r1, r2, r8
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	eb63 0309 	sbc.w	r3, r3, r9
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800499c:	f7fc fa0e 	bl	8000dbc <__aeabi_l2f>
 80049a0:	ee07 0a10 	vmov	s14, r0
 80049a4:	eddf 7a11 	vldr	s15, [pc, #68]	@ 80049ec <TaskChassis+0x1fc>
 80049a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ac:	ee17 0a90 	vmov	r0, s15
 80049b0:	f7fb fdca 	bl	8000548 <__aeabi_f2d>
 80049b4:	4602      	mov	r2, r0
 80049b6:	460b      	mov	r3, r1
 80049b8:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88


    	// usart_printf("%d %d %d\r\n", turretMotorPosition, initialTurretPosition, actualTurretAngle);
    	previousMotorPosition = getRotorPosition(Bus1, GM6020, 4);
 80049bc:	2204      	movs	r2, #4
 80049be:	2103      	movs	r1, #3
 80049c0:	2001      	movs	r0, #1
 80049c2:	f7fd fec3 	bl	800274c <getRotorPosition>
 80049c6:	4603      	mov	r3, r0
 80049c8:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80

	    for (int i = 0; i < 4; i++) {
 80049cc:	2300      	movs	r3, #0
 80049ce:	677b      	str	r3, [r7, #116]	@ 0x74
 80049d0:	e030      	b.n	8004a34 <TaskChassis+0x244>
 80049d2:	bf00      	nop
 80049d4:	20000a9c 	.word	0x20000a9c
 80049d8:	20000a54 	.word	0x20000a54
 80049dc:	20000a0c 	.word	0x20000a0c
 80049e0:	200009c4 	.word	0x200009c4
 80049e4:	20000f18 	.word	0x20000f18
 80049e8:	ffffe890 	.word	0xffffe890
 80049ec:	39e8819a 	.word	0x39e8819a
 80049f0:	415a51ec 	.word	0x415a51ec
 80049f4:	3f59999a 	.word	0x3f59999a
	        rcRPM[i] = getRCchannel(i) * 13.645f;              // 13.645 = 469 / 187 / 660 * 3591, 660 = max reading in one direction
 80049f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	4618      	mov	r0, r3
 80049fe:	f001 fb0f 	bl	8006020 <getRCchannel>
 8004a02:	4603      	mov	r3, r0
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a0c:	ed1f 7a08 	vldr	s14, [pc, #-32]	@ 80049f0 <TaskChassis+0x200>
 8004a10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a18:	ee17 3a90 	vmov	r3, s15
 8004a1c:	b21a      	sxth	r2, r3
 8004a1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a20:	005b      	lsls	r3, r3, #1
 8004a22:	3390      	adds	r3, #144	@ 0x90
 8004a24:	f107 0110 	add.w	r1, r7, #16
 8004a28:	440b      	add	r3, r1
 8004a2a:	f823 2c64 	strh.w	r2, [r3, #-100]
	    for (int i = 0; i < 4; i++) {
 8004a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a30:	3301      	adds	r3, #1
 8004a32:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a36:	2b03      	cmp	r3, #3
 8004a38:	ddde      	ble.n	80049f8 <TaskChassis+0x208>
	    }

	    rcYaw = getRCchannel(4) * 0.85f;
 8004a3a:	2004      	movs	r0, #4
 8004a3c:	f001 faf0 	bl	8006020 <getRCchannel>
 8004a40:	4603      	mov	r3, r0
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a4a:	ed1f 7a16 	vldr	s14, [pc, #-88]	@ 80049f4 <TaskChassis+0x204>
 8004a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a56:	ee17 3a90 	vmov	r3, s15
 8004a5a:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
	    chassisrcYaw = getRCchannel(0)*0.85f;
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f001 fade 	bl	8006020 <getRCchannel>
 8004a64:	4603      	mov	r3, r0
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a6e:	ed1f 7a1f 	vldr	s14, [pc, #-124]	@ 80049f4 <TaskChassis+0x204>
 8004a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a7a:	ee17 3a90 	vmov	r3, s15
 8004a7e:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70


	    if (calibration == 1) {
 8004a82:	4b99      	ldr	r3, [pc, #612]	@ (8004ce8 <TaskChassis+0x4f8>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d116      	bne.n	8004ab8 <TaskChassis+0x2c8>
	        motorRotationCounter = 0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	    	turretMotorPosition = 0;
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	    	initialTurretPosition = getRotorPosition(Bus1, GM6020, 1);
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	2103      	movs	r1, #3
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f7fd fe53 	bl	800274c <getRotorPosition>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
	        // actualTurretAngle = 0;
	        convertedAngle = 0;
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
	    }


	    int16_t turretPitch = getRCchannel(1)* 0.85f;
 8004ab8:	2001      	movs	r0, #1
 8004aba:	f001 fab1 	bl	8006020 <getRCchannel>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	ee07 3a90 	vmov	s15, r3
 8004ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ac8:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8004cec <TaskChassis+0x4fc>
 8004acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ad4:	ee17 3a90 	vmov	r3, s15
 8004ad8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

	    allCheShit(0, 0, 0, 0, rotationTime, rcRPM, 1, convertedAngle, chassisPreset);
 8004adc:	4b84      	ldr	r3, [pc, #528]	@ (8004cf0 <TaskChassis+0x500>)
 8004ade:	781c      	ldrb	r4, [r3, #0]
 8004ae0:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004ae4:	f7fc f84a 	bl	8000b7c <__aeabi_d2f>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	4b82      	ldr	r3, [pc, #520]	@ (8004cf4 <TaskChassis+0x504>)
 8004aec:	edd3 6a00 	vldr	s13, [r3]
 8004af0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004af4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004af8:	2301      	movs	r3, #1
 8004afa:	9302      	str	r3, [sp, #8]
 8004afc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8004b00:	9301      	str	r3, [sp, #4]
 8004b02:	9400      	str	r4, [sp, #0]
 8004b04:	eef0 0a66 	vmov.f32	s1, s13
 8004b08:	eeb0 1a47 	vmov.f32	s2, s14
 8004b0c:	eef0 1a67 	vmov.f32	s3, s15
 8004b10:	ee00 2a10 	vmov	s0, r2
 8004b14:	2300      	movs	r3, #0
 8004b16:	2200      	movs	r2, #0
 8004b18:	2100      	movs	r1, #0
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f7fe f9dc 	bl	8002ed8 <allCheShit>
	    if (shootingPhase == 1) {
 8004b20:	4b75      	ldr	r3, [pc, #468]	@ (8004cf8 <TaskChassis+0x508>)
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	f040 80a5 	bne.w	8004c74 <TaskChassis+0x484>
			if(getBlueX() != 255) {
 8004b2a:	f7fd ff23 	bl	8002974 <getBlueX>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2bff      	cmp	r3, #255	@ 0xff
 8004b32:	d004      	beq.n	8004b3e <TaskChassis+0x34e>
				blueX = getBlueX();
 8004b34:	f7fd ff1e 	bl	8002974 <getBlueX>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
			}
			if(getBlueY() != 255) {
 8004b3e:	f7fd ff25 	bl	800298c <getBlueY>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2bff      	cmp	r3, #255	@ 0xff
 8004b46:	d004      	beq.n	8004b52 <TaskChassis+0x362>
				blueY = getBlueX();
 8004b48:	f7fd ff14 	bl	8002974 <getBlueX>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
			}
			if(getRedX() != 255) {
 8004b52:	f7fd fef7 	bl	8002944 <getRedX>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2bff      	cmp	r3, #255	@ 0xff
 8004b5a:	d004      	beq.n	8004b66 <TaskChassis+0x376>
				redX = getBlueX();
 8004b5c:	f7fd ff0a 	bl	8002974 <getBlueX>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			}
			if(getRedY() != 255) {
 8004b66:	f7fd fef9 	bl	800295c <getRedY>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2bff      	cmp	r3, #255	@ 0xff
 8004b6e:	d004      	beq.n	8004b7a <TaskChassis+0x38a>
				redY = getBlueX();
 8004b70:	f7fd ff00 	bl	8002974 <getBlueX>
 8004b74:	4603      	mov	r3, r0
 8004b76:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
			}


			if ((firingStages == 1) && (robot_status.robot_id == 0)) {
 8004b7a:	4b60      	ldr	r3, [pc, #384]	@ (8004cfc <TaskChassis+0x50c>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d126      	bne.n	8004bd0 <TaskChassis+0x3e0>
 8004b82:	4b5f      	ldr	r3, [pc, #380]	@ (8004d00 <TaskChassis+0x510>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d122      	bne.n	8004bd0 <TaskChassis+0x3e0>
				turingDirectionX = (-1*((int16_t)(getBlueX())-(setX)))*1;
 8004b8a:	4b5e      	ldr	r3, [pc, #376]	@ (8004d04 <TaskChassis+0x514>)
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	461c      	mov	r4, r3
 8004b90:	f7fd fef0 	bl	8002974 <getBlueX>
 8004b94:	4603      	mov	r3, r0
 8004b96:	1ae3      	subs	r3, r4, r3
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
				turingDirectionY = (-1*((int16_t)(getBlueY())-(setY)))*0.02;
 8004b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8004d08 <TaskChassis+0x518>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	461c      	mov	r4, r3
 8004ba4:	f7fd fef2 	bl	800298c <getBlueY>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	1ae3      	subs	r3, r4, r3
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fb fcb9 	bl	8000524 <__aeabi_i2d>
 8004bb2:	a34b      	add	r3, pc, #300	@ (adr r3, 8004ce0 <TaskChassis+0x4f0>)
 8004bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb8:	f7fb fd1e 	bl	80005f8 <__aeabi_dmul>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f7fb ffb2 	bl	8000b2c <__aeabi_d2iz>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8004bce:	e012      	b.n	8004bf6 <TaskChassis+0x406>
				// usart_printf("working");
			} else if ((firingStages == 0) && (robot_status.robot_id == 0)){
 8004bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8004cfc <TaskChassis+0x50c>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10e      	bne.n	8004bf6 <TaskChassis+0x406>
 8004bd8:	4b49      	ldr	r3, [pc, #292]	@ (8004d00 <TaskChassis+0x510>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d10a      	bne.n	8004bf6 <TaskChassis+0x406>
				turingDirectionX = -1000;
 8004be0:	f64f 4318 	movw	r3, #64536	@ 0xfc18
 8004be4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
				turingDirectionY = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
				turretPitchNew = 4750;
 8004bee:	f241 238e 	movw	r3, #4750	@ 0x128e
 8004bf2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
				// usart_printf("EROOR");
			}
			if ((firingStages == 1) && (robot_status.robot_id == 1)) {
 8004bf6:	4b41      	ldr	r3, [pc, #260]	@ (8004cfc <TaskChassis+0x50c>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d126      	bne.n	8004c4c <TaskChassis+0x45c>
 8004bfe:	4b40      	ldr	r3, [pc, #256]	@ (8004d00 <TaskChassis+0x510>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d122      	bne.n	8004c4c <TaskChassis+0x45c>
				turingDirectionX = (-1*((int16_t)(getRedX())-(setX)))*1;
 8004c06:	4b3f      	ldr	r3, [pc, #252]	@ (8004d04 <TaskChassis+0x514>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	461c      	mov	r4, r3
 8004c0c:	f7fd fe9a 	bl	8002944 <getRedX>
 8004c10:	4603      	mov	r3, r0
 8004c12:	1ae3      	subs	r3, r4, r3
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
				turingDirectionY = (-1*((int16_t)(getRedY())-(setY)))*0.02;
 8004c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004d08 <TaskChassis+0x518>)
 8004c1c:	781b      	ldrb	r3, [r3, #0]
 8004c1e:	461c      	mov	r4, r3
 8004c20:	f7fd fe9c 	bl	800295c <getRedY>
 8004c24:	4603      	mov	r3, r0
 8004c26:	1ae3      	subs	r3, r4, r3
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fb fc7b 	bl	8000524 <__aeabi_i2d>
 8004c2e:	a32c      	add	r3, pc, #176	@ (adr r3, 8004ce0 <TaskChassis+0x4f0>)
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f7fb fce0 	bl	80005f8 <__aeabi_dmul>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	f7fb ff74 	bl	8000b2c <__aeabi_d2iz>
 8004c44:	4603      	mov	r3, r0
 8004c46:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
 8004c4a:	e025      	b.n	8004c98 <TaskChassis+0x4a8>
			} else if ((firingStages == 0) && (robot_status.robot_id == 1)){
 8004c4c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cfc <TaskChassis+0x50c>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d121      	bne.n	8004c98 <TaskChassis+0x4a8>
 8004c54:	4b2a      	ldr	r3, [pc, #168]	@ (8004d00 <TaskChassis+0x510>)
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d11d      	bne.n	8004c98 <TaskChassis+0x4a8>
				turingDirectionX = -1000;
 8004c5c:	f64f 4318 	movw	r3, #64536	@ 0xfc18
 8004c60:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
				turingDirectionY = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
				turretPitchNew = 4750;
 8004c6a:	f241 238e 	movw	r3, #4750	@ 0x128e
 8004c6e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004c72:	e011      	b.n	8004c98 <TaskChassis+0x4a8>
			}
	    } else {
	    	turingDirectionY = 0;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
	    	turingDirectionX = 0;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
		    turretPitchNew -= turingDirectionY + turretPitch;
 8004c80:	f8b7 2094 	ldrh.w	r2, [r7, #148]	@ 0x94
 8004c84:	f8b7 107c 	ldrh.w	r1, [r7, #124]	@ 0x7c
 8004c88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004c8c:	440b      	add	r3, r1
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	    }
	    usart_printf("%d %d %d %d %d\r\n", getBlueX(), getBlueY(), turingDirectionX, turingDirectionY, firingStages);
 8004c98:	f7fd fe6c 	bl	8002974 <getBlueX>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	461c      	mov	r4, r3
 8004ca0:	f7fd fe74 	bl	800298c <getBlueY>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f9b7 207e 	ldrsh.w	r2, [r7, #126]	@ 0x7e
 8004cac:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 8004cb0:	4912      	ldr	r1, [pc, #72]	@ (8004cfc <TaskChassis+0x50c>)
 8004cb2:	7809      	ldrb	r1, [r1, #0]
 8004cb4:	9101      	str	r1, [sp, #4]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4621      	mov	r1, r4
 8004cbe:	4813      	ldr	r0, [pc, #76]	@ (8004d0c <TaskChassis+0x51c>)
 8004cc0:	f7fd fdfc 	bl	80028bc <usart_printf>




	    if (turretPitchNew > 5170) {
 8004cc4:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8004cc8:	f241 4232 	movw	r2, #5170	@ 0x1432
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	dd1f      	ble.n	8004d10 <TaskChassis+0x520>
	    	turretPitchNew = 5170;
 8004cd0:	f241 4332 	movw	r3, #5170	@ 0x1432
 8004cd4:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8004cd8:	e024      	b.n	8004d24 <TaskChassis+0x534>
 8004cda:	bf00      	nop
 8004cdc:	f3af 8000 	nop.w
 8004ce0:	47ae147b 	.word	0x47ae147b
 8004ce4:	3f947ae1 	.word	0x3f947ae1
 8004ce8:	20000f1d 	.word	0x20000f1d
 8004cec:	3f59999a 	.word	0x3f59999a
 8004cf0:	20000f1e 	.word	0x20000f1e
 8004cf4:	20000058 	.word	0x20000058
 8004cf8:	20000f1f 	.word	0x20000f1f
 8004cfc:	20000f21 	.word	0x20000f21
 8004d00:	200006f8 	.word	0x200006f8
 8004d04:	20000099 	.word	0x20000099
 8004d08:	20000098 	.word	0x20000098
 8004d0c:	08011ca0 	.word	0x08011ca0
	    } else if (turretPitchNew < 4330) {
 8004d10:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8004d14:	f241 02e9 	movw	r2, #4329	@ 0x10e9
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	dc03      	bgt.n	8004d24 <TaskChassis+0x534>
	    	turretPitchNew = 4330;
 8004d1c:	f241 03ea 	movw	r3, #4330	@ 0x10ea
 8004d20:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
	    }

	    setMotorPosition(Bus2, GM6020, 3, turretPitchNew, pitchPresetVoltagePosition);
 8004d24:	4bce      	ldr	r3, [pc, #824]	@ (8005060 <TaskChassis+0x870>)
 8004d26:	edd3 6a00 	vldr	s13, [r3]
 8004d2a:	ed93 7a01 	vldr	s14, [r3, #4]
 8004d2e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004d32:	f9b7 3094 	ldrsh.w	r3, [r7, #148]	@ 0x94
 8004d36:	eeb0 0a66 	vmov.f32	s0, s13
 8004d3a:	eef0 0a47 	vmov.f32	s1, s14
 8004d3e:	eeb0 1a67 	vmov.f32	s2, s15
 8004d42:	2203      	movs	r2, #3
 8004d44:	2103      	movs	r1, #3
 8004d46:	2002      	movs	r0, #2
 8004d48:	f7fd fcc5 	bl	80026d6 <setMotorPosition>


	    //setMotorRPM(Bus2, M3508, 8, 50, shooterPreset);
	    float gyroVel[3] = {IMU_get_gyro(x), IMU_get_gyro(y), IMU_get_gyro(z)};
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	f7fc fbe9 	bl	8001524 <IMU_get_gyro>
 8004d52:	eef0 7a40 	vmov.f32	s15, s0
 8004d56:	edc7 7a06 	vstr	s15, [r7, #24]
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	f7fc fbe2 	bl	8001524 <IMU_get_gyro>
 8004d60:	eef0 7a40 	vmov.f32	s15, s0
 8004d64:	edc7 7a07 	vstr	s15, [r7, #28]
 8004d68:	2002      	movs	r0, #2
 8004d6a:	f7fc fbdb 	bl	8001524 <IMU_get_gyro>
 8004d6e:	eef0 7a40 	vmov.f32	s15, s0
 8004d72:	edc7 7a08 	vstr	s15, [r7, #32]

    	if (((gyroVel[2] > -0.02) && (gyroVel[2] < 0.02))) {
 8004d76:	6a3b      	ldr	r3, [r7, #32]
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f7fb fbe5 	bl	8000548 <__aeabi_f2d>
 8004d7e:	a3b0      	add	r3, pc, #704	@ (adr r3, 8005040 <TaskChassis+0x850>)
 8004d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d84:	f7fb fec8 	bl	8000b18 <__aeabi_dcmpgt>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00e      	beq.n	8004dac <TaskChassis+0x5bc>
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fb fbd9 	bl	8000548 <__aeabi_f2d>
 8004d96:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005048 <TaskChassis+0x858>)
 8004d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9c:	f7fb fe9e 	bl	8000adc <__aeabi_dcmplt>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <TaskChassis+0x5bc>
    		gyroVel[2] = 0;
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	623b      	str	r3, [r7, #32]
    	}

    	gyroidValue += (gyroVel[2] + (0.008*((float)(turingDirectionX)))*0.4* mouseXScaler) + (0.008*((float)(getRCchannel(4)))*0.4*mouseXScaler);
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7fb fbca 	bl	8000548 <__aeabi_f2d>
 8004db4:	4682      	mov	sl, r0
 8004db6:	468b      	mov	fp, r1
 8004db8:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8004dbc:	ee07 3a90 	vmov	s15, r3
 8004dc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dc4:	ee17 0a90 	vmov	r0, s15
 8004dc8:	f7fb fbbe 	bl	8000548 <__aeabi_f2d>
 8004dcc:	a3a0      	add	r3, pc, #640	@ (adr r3, 8005050 <TaskChassis+0x860>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	f7fb fc11 	bl	80005f8 <__aeabi_dmul>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	460b      	mov	r3, r1
 8004dda:	4610      	mov	r0, r2
 8004ddc:	4619      	mov	r1, r3
 8004dde:	a39e      	add	r3, pc, #632	@ (adr r3, 8005058 <TaskChassis+0x868>)
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f7fb fc08 	bl	80005f8 <__aeabi_dmul>
 8004de8:	4602      	mov	r2, r0
 8004dea:	460b      	mov	r3, r1
 8004dec:	4614      	mov	r4, r2
 8004dee:	461d      	mov	r5, r3
 8004df0:	4b9c      	ldr	r3, [pc, #624]	@ (8005064 <TaskChassis+0x874>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7fb fba7 	bl	8000548 <__aeabi_f2d>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4620      	mov	r0, r4
 8004e00:	4629      	mov	r1, r5
 8004e02:	f7fb fbf9 	bl	80005f8 <__aeabi_dmul>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4650      	mov	r0, sl
 8004e0c:	4659      	mov	r1, fp
 8004e0e:	f7fb fa3d 	bl	800028c <__adddf3>
 8004e12:	4602      	mov	r2, r0
 8004e14:	460b      	mov	r3, r1
 8004e16:	4692      	mov	sl, r2
 8004e18:	469b      	mov	fp, r3
 8004e1a:	2004      	movs	r0, #4
 8004e1c:	f001 f900 	bl	8006020 <getRCchannel>
 8004e20:	4603      	mov	r3, r0
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e2a:	ee17 0a90 	vmov	r0, s15
 8004e2e:	f7fb fb8b 	bl	8000548 <__aeabi_f2d>
 8004e32:	a387      	add	r3, pc, #540	@ (adr r3, 8005050 <TaskChassis+0x860>)
 8004e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e38:	f7fb fbde 	bl	80005f8 <__aeabi_dmul>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	a384      	add	r3, pc, #528	@ (adr r3, 8005058 <TaskChassis+0x868>)
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	f7fb fbd5 	bl	80005f8 <__aeabi_dmul>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4614      	mov	r4, r2
 8004e54:	461d      	mov	r5, r3
 8004e56:	4b83      	ldr	r3, [pc, #524]	@ (8005064 <TaskChassis+0x874>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb fb74 	bl	8000548 <__aeabi_f2d>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb fbc6 	bl	80005f8 <__aeabi_dmul>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4650      	mov	r0, sl
 8004e72:	4659      	mov	r1, fp
 8004e74:	f7fb fa0a 	bl	800028c <__adddf3>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4614      	mov	r4, r2
 8004e7e:	461d      	mov	r5, r3
 8004e80:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 8004e84:	f7fb fb60 	bl	8000548 <__aeabi_f2d>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	f7fb f9fc 	bl	800028c <__adddf3>
 8004e94:	4602      	mov	r2, r0
 8004e96:	460b      	mov	r3, r1
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	f7fb fe6e 	bl	8000b7c <__aeabi_d2f>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    	setMotorRPM(Bus1, GM6020, 4, (int16_t)(10*gyroidValue), yawPresetVoltageRPM);
 8004ea6:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8004eaa:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8004eae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004eb6:	ee17 3a90 	vmov	r3, s15
 8004eba:	b21a      	sxth	r2, r3
 8004ebc:	4b6a      	ldr	r3, [pc, #424]	@ (8005068 <TaskChassis+0x878>)
 8004ebe:	edd3 6a00 	vldr	s13, [r3]
 8004ec2:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ec6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004eca:	eeb0 0a66 	vmov.f32	s0, s13
 8004ece:	eef0 0a47 	vmov.f32	s1, s14
 8004ed2:	eeb0 1a67 	vmov.f32	s2, s15
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	2204      	movs	r2, #4
 8004eda:	2103      	movs	r1, #3
 8004edc:	2001      	movs	r0, #1
 8004ede:	f7fd fbbf 	bl	8002660 <setMotorRPM>
	    } else {

	    	setMotorRPM(Bus1, GM6020, 1, -0.5*(int16_t)(mouseXScaler*(float)(pc_control.mouse_x)), yawPresetVoltageRPM);
	    }
		*/
    	uint16_t firingHeatTemp = power_heat_data.shooter_17mm_1_barrel_heat;
 8004ee2:	4b62      	ldr	r3, [pc, #392]	@ (800506c <TaskChassis+0x87c>)
 8004ee4:	895b      	ldrh	r3, [r3, #10]
 8004ee6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c


		if (firingHeatTemp > 350) {
 8004eea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8004eee:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 8004ef2:	d903      	bls.n	8004efc <TaskChassis+0x70c>
			cantShoot = 1;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
 8004efa:	e002      	b.n	8004f02 <TaskChassis+0x712>
		} else {
			cantShoot = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b
		}


	    int16_t flywheelSpeed = getMotorRPM(Bus2, M3508, 6);
 8004f02:	2206      	movs	r2, #6
 8004f04:	2101      	movs	r1, #1
 8004f06:	2002      	movs	r0, #2
 8004f08:	f7fd fc6e 	bl	80027e8 <getMotorRPM>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

	    if ((pc_control.right_button_down == 1) || (pc_control.left_button_down == 1) || (rightSwitch == 3) || (rightSwitch == 1) || (SHOOT == 1)) {
 8004f12:	4b57      	ldr	r3, [pc, #348]	@ (8005070 <TaskChassis+0x880>)
 8004f14:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d010      	beq.n	8004f3e <TaskChassis+0x74e>
 8004f1c:	4b54      	ldr	r3, [pc, #336]	@ (8005070 <TaskChassis+0x880>)
 8004f1e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d00b      	beq.n	8004f3e <TaskChassis+0x74e>
 8004f26:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d007      	beq.n	8004f3e <TaskChassis+0x74e>
 8004f2e:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d003      	beq.n	8004f3e <TaskChassis+0x74e>
 8004f36:	4b4f      	ldr	r3, [pc, #316]	@ (8005074 <TaskChassis+0x884>)
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d103      	bne.n	8004f46 <TaskChassis+0x756>
	    	motorOn = 1;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
 8004f44:	e002      	b.n	8004f4c <TaskChassis+0x75c>
	    } else {
	    	motorOn = 0;
 8004f46:	2300      	movs	r3, #0
 8004f48:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
	    }


	    if ((pc_control.left_button_down == 1 || rightSwitch == 1 || SHOOT == 1) && (flywheelSpeed > 7000) && (cantShoot == 0)) {
 8004f4c:	4b48      	ldr	r3, [pc, #288]	@ (8005070 <TaskChassis+0x880>)
 8004f4e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d008      	beq.n	8004f68 <TaskChassis+0x778>
 8004f56:	f997 3050 	ldrsb.w	r3, [r7, #80]	@ 0x50
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d004      	beq.n	8004f68 <TaskChassis+0x778>
 8004f5e:	4b45      	ldr	r3, [pc, #276]	@ (8005074 <TaskChassis+0x884>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	f040 808c 	bne.w	8005080 <TaskChassis+0x890>
 8004f68:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004f6c:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004f70:	4293      	cmp	r3, r2
 8004f72:	f340 8085 	ble.w	8005080 <TaskChassis+0x890>
 8004f76:	f997 307b 	ldrsb.w	r3, [r7, #123]	@ 0x7b
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8080 	bne.w	8005080 <TaskChassis+0x890>
	    	// setMotorRPM(Bus2, M2006, 6, (100), indexerPreset);


			if (jammed > 0 && indexerStopped == 0) {
 8004f80:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dd1f      	ble.n	8004fc8 <TaskChassis+0x7d8>
 8004f88:	f997 309e 	ldrsb.w	r3, [r7, #158]	@ 0x9e
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d11b      	bne.n	8004fc8 <TaskChassis+0x7d8>
				setMotorRPM(Bus2, M2006, 1, 15000, indexerPreset);
 8004f90:	4b39      	ldr	r3, [pc, #228]	@ (8005078 <TaskChassis+0x888>)
 8004f92:	edd3 6a00 	vldr	s13, [r3]
 8004f96:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f9a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004f9e:	eeb0 0a66 	vmov.f32	s0, s13
 8004fa2:	eef0 0a47 	vmov.f32	s1, s14
 8004fa6:	eeb0 1a67 	vmov.f32	s2, s15
 8004faa:	f643 2398 	movw	r3, #15000	@ 0x3a98
 8004fae:	2201      	movs	r2, #1
 8004fb0:	2102      	movs	r1, #2
 8004fb2:	2002      	movs	r0, #2
 8004fb4:	f7fd fb54 	bl	8002660 <setMotorRPM>
				jammed--;
 8004fb8:	f997 309f 	ldrsb.w	r3, [r7, #159]	@ 0x9f
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8004fc6:	e039      	b.n	800503c <TaskChassis+0x84c>
			} else {
				indexerStopped = 0;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
				setMotorRPM(Bus2, M2006, 1, -5400, indexerPreset);
 8004fce:	4b2a      	ldr	r3, [pc, #168]	@ (8005078 <TaskChassis+0x888>)
 8004fd0:	edd3 6a00 	vldr	s13, [r3]
 8004fd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8004fd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fdc:	eeb0 0a66 	vmov.f32	s0, s13
 8004fe0:	eef0 0a47 	vmov.f32	s1, s14
 8004fe4:	eeb0 1a67 	vmov.f32	s2, s15
 8004fe8:	4b24      	ldr	r3, [pc, #144]	@ (800507c <TaskChassis+0x88c>)
 8004fea:	2201      	movs	r2, #1
 8004fec:	2102      	movs	r1, #2
 8004fee:	2002      	movs	r0, #2
 8004ff0:	f7fd fb36 	bl	8002660 <setMotorRPM>
				if (indexerTargetReached == 0 && getMotorRPM(Bus2, M2006, 1) <= -10) {
 8004ff4:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10c      	bne.n	8005016 <TaskChassis+0x826>
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	2102      	movs	r1, #2
 8005000:	2002      	movs	r0, #2
 8005002:	f7fd fbf1 	bl	80027e8 <getMotorRPM>
 8005006:	4603      	mov	r3, r0
 8005008:	f113 0f09 	cmn.w	r3, #9
 800500c:	da03      	bge.n	8005016 <TaskChassis+0x826>
					indexerTargetReached = 1;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8005014:	e012      	b.n	800503c <TaskChassis+0x84c>
				} else if (getMotorRPM(Bus2, M2006, 1) > -1 && indexerTargetReached == 1) {         // jammed
 8005016:	2201      	movs	r2, #1
 8005018:	2102      	movs	r1, #2
 800501a:	2002      	movs	r0, #2
 800501c:	f7fd fbe4 	bl	80027e8 <getMotorRPM>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	db46      	blt.n	80050b4 <TaskChassis+0x8c4>
 8005026:	f997 309d 	ldrsb.w	r3, [r7, #157]	@ 0x9d
 800502a:	2b01      	cmp	r3, #1
 800502c:	d142      	bne.n	80050b4 <TaskChassis+0x8c4>
					jammed = 12;
 800502e:	230c      	movs	r3, #12
 8005030:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					indexerTargetReached = 0;
 8005034:	2300      	movs	r3, #0
 8005036:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
			if (jammed > 0 && indexerStopped == 0) {
 800503a:	e03b      	b.n	80050b4 <TaskChassis+0x8c4>
 800503c:	e03a      	b.n	80050b4 <TaskChassis+0x8c4>
 800503e:	bf00      	nop
 8005040:	47ae147b 	.word	0x47ae147b
 8005044:	bf947ae1 	.word	0xbf947ae1
 8005048:	47ae147b 	.word	0x47ae147b
 800504c:	3f947ae1 	.word	0x3f947ae1
 8005050:	d2f1a9fc 	.word	0xd2f1a9fc
 8005054:	3f80624d 	.word	0x3f80624d
 8005058:	9999999a 	.word	0x9999999a
 800505c:	3fd99999 	.word	0x3fd99999
 8005060:	20000070 	.word	0x20000070
 8005064:	2000009c 	.word	0x2000009c
 8005068:	20000064 	.word	0x20000064
 800506c:	20000708 	.word	0x20000708
 8005070:	20000718 	.word	0x20000718
 8005074:	20000f22 	.word	0x20000f22
 8005078:	2000007c 	.word	0x2000007c
 800507c:	ffffeae8 	.word	0xffffeae8
				}
			}
	    } else {
			indexerStopped = 1;
 8005080:	2301      	movs	r3, #1
 8005082:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
			indexerTargetReached = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
	    	setMotorRPM(Bus2, M2006, 1, 0, indexerPreset);
 800508c:	4b43      	ldr	r3, [pc, #268]	@ (800519c <TaskChassis+0x9ac>)
 800508e:	edd3 6a00 	vldr	s13, [r3]
 8005092:	ed93 7a01 	vldr	s14, [r3, #4]
 8005096:	edd3 7a02 	vldr	s15, [r3, #8]
 800509a:	eeb0 0a66 	vmov.f32	s0, s13
 800509e:	eef0 0a47 	vmov.f32	s1, s14
 80050a2:	eeb0 1a67 	vmov.f32	s2, s15
 80050a6:	2300      	movs	r3, #0
 80050a8:	2201      	movs	r2, #1
 80050aa:	2102      	movs	r1, #2
 80050ac:	2002      	movs	r0, #2
 80050ae:	f7fd fad7 	bl	8002660 <setMotorRPM>
 80050b2:	e000      	b.n	80050b6 <TaskChassis+0x8c6>
			if (jammed > 0 && indexerStopped == 0) {
 80050b4:	bf00      	nop
	    }

	    // PWMOff(Buzzer, 1);
		setMotorRPM(Bus2, M3508, 5, -7250*motorOn, flywheel);
 80050b6:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	461a      	mov	r2, r3
 80050be:	0112      	lsls	r2, r2, #4
 80050c0:	1ad2      	subs	r2, r2, r3
 80050c2:	4611      	mov	r1, r2
 80050c4:	01c8      	lsls	r0, r1, #7
 80050c6:	4611      	mov	r1, r2
 80050c8:	4602      	mov	r2, r0
 80050ca:	440a      	add	r2, r1
 80050cc:	0092      	lsls	r2, r2, #2
 80050ce:	1ad2      	subs	r2, r2, r3
 80050d0:	00d2      	lsls	r2, r2, #3
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	b21a      	sxth	r2, r3
 80050da:	4b31      	ldr	r3, [pc, #196]	@ (80051a0 <TaskChassis+0x9b0>)
 80050dc:	edd3 6a00 	vldr	s13, [r3]
 80050e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80050e4:	edd3 7a02 	vldr	s15, [r3, #8]
 80050e8:	eeb0 0a66 	vmov.f32	s0, s13
 80050ec:	eef0 0a47 	vmov.f32	s1, s14
 80050f0:	eeb0 1a67 	vmov.f32	s2, s15
 80050f4:	4613      	mov	r3, r2
 80050f6:	2205      	movs	r2, #5
 80050f8:	2101      	movs	r1, #1
 80050fa:	2002      	movs	r0, #2
 80050fc:	f7fd fab0 	bl	8002660 <setMotorRPM>
		setMotorRPM(Bus2, M3508, 6, 7250*motorOn, flywheel);
 8005100:	f997 3097 	ldrsb.w	r3, [r7, #151]	@ 0x97
 8005104:	b29b      	uxth	r3, r3
 8005106:	461a      	mov	r2, r3
 8005108:	00d2      	lsls	r2, r2, #3
 800510a:	441a      	add	r2, r3
 800510c:	0112      	lsls	r2, r2, #4
 800510e:	4413      	add	r3, r2
 8005110:	461a      	mov	r2, r3
 8005112:	0091      	lsls	r1, r2, #2
 8005114:	461a      	mov	r2, r3
 8005116:	460b      	mov	r3, r1
 8005118:	4413      	add	r3, r2
 800511a:	461a      	mov	r2, r3
 800511c:	0091      	lsls	r1, r2, #2
 800511e:	461a      	mov	r2, r3
 8005120:	460b      	mov	r3, r1
 8005122:	4413      	add	r3, r2
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	b29b      	uxth	r3, r3
 8005128:	b21a      	sxth	r2, r3
 800512a:	4b1d      	ldr	r3, [pc, #116]	@ (80051a0 <TaskChassis+0x9b0>)
 800512c:	edd3 6a00 	vldr	s13, [r3]
 8005130:	ed93 7a01 	vldr	s14, [r3, #4]
 8005134:	edd3 7a02 	vldr	s15, [r3, #8]
 8005138:	eeb0 0a66 	vmov.f32	s0, s13
 800513c:	eef0 0a47 	vmov.f32	s1, s14
 8005140:	eeb0 1a67 	vmov.f32	s2, s15
 8005144:	4613      	mov	r3, r2
 8005146:	2206      	movs	r2, #6
 8005148:	2101      	movs	r1, #1
 800514a:	2002      	movs	r0, #2
 800514c:	f7fd fa88 	bl	8002660 <setMotorRPM>

		if (songPhase == 1) {
 8005150:	4b14      	ldr	r3, [pc, #80]	@ (80051a4 <TaskChassis+0x9b4>)
 8005152:	781b      	ldrb	r3, [r3, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d113      	bne.n	8005180 <TaskChassis+0x990>
			uint32_t notes = HampsterNotes();
 8005158:	f001 f89c 	bl	8006294 <HampsterNotes>
 800515c:	6478      	str	r0, [r7, #68]	@ 0x44
			PWMOutput(Buzzer, 1, notes);
 800515e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005160:	2101      	movs	r1, #1
 8005162:	2002      	movs	r0, #2
 8005164:	f000 fc04 	bl	8005970 <PWMOutput>
			PWMInitialize(Buzzer, FR, 1, 0.5);
 8005168:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800516c:	2201      	movs	r2, #1
 800516e:	2101      	movs	r1, #1
 8005170:	2002      	movs	r0, #2
 8005172:	f000 fae5 	bl	8005740 <PWMInitialize>
			PWMOn(Buzzer, 1);
 8005176:	2101      	movs	r1, #1
 8005178:	2002      	movs	r0, #2
 800517a:	f000 fc29 	bl	80059d0 <PWMOn>
 800517e:	e003      	b.n	8005188 <TaskChassis+0x998>
		} else {
			PWMOff(Buzzer, 1);
 8005180:	2101      	movs	r1, #1
 8005182:	2002      	movs	r0, #2
 8005184:	f000 fc50 	bl	8005a28 <PWMOff>



	    // int16_t motorSpeeddd = getMotorRPM(Bus1, GM6020, 1);

		PWMTimerStarter();
 8005188:	f000 fc7a 	bl	8005a80 <PWMTimerStarter>
		RCkeysRefresh();
 800518c:	f000 ff70 	bl	8006070 <RCkeysRefresh>
        osDelay(5);
 8005190:	2005      	movs	r0, #5
 8005192:	f008 f883 	bl	800d29c <osDelay>
    for(;;) {
 8005196:	f7ff bbb3 	b.w	8004900 <TaskChassis+0x110>
 800519a:	bf00      	nop
 800519c:	2000007c 	.word	0x2000007c
 80051a0:	20000088 	.word	0x20000088
 80051a4:	20000f20 	.word	0x20000f20

080051a8 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 80051b0:	2005      	movs	r0, #5
 80051b2:	f008 f873 	bl	800d29c <osDelay>
 80051b6:	e7fb      	b.n	80051b0 <TaskTurret+0x8>

080051b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051bc:	b672      	cpsid	i
}
 80051be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80051c0:	bf00      	nop
 80051c2:	e7fd      	b.n	80051c0 <Error_Handler+0x8>

080051c4 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6178      	str	r0, [r7, #20]
 80051cc:	460b      	mov	r3, r1
 80051ce:	60fa      	str	r2, [r7, #12]
 80051d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80051d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80051d8:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d042      	beq.n	8005266 <PID_init+0xa2>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d03f      	beq.n	8005266 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	7cfa      	ldrb	r2, [r7, #19]
 80051ea:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3304      	adds	r3, #4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3308      	adds	r3, #8
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	639a      	str	r2, [r3, #56]	@ 0x38
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	635a      	str	r2, [r3, #52]	@ 0x34
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	621a      	str	r2, [r3, #32]
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	6a1a      	ldr	r2, [r3, #32]
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	629a      	str	r2, [r3, #40]	@ 0x28
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	625a      	str	r2, [r3, #36]	@ 0x24
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	645a      	str	r2, [r3, #68]	@ 0x44
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	641a      	str	r2, [r3, #64]	@ 0x40
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005264:	e000      	b.n	8005268 <PID_init+0xa4>
        return;
 8005266:	bf00      	nop
}
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	60f8      	str	r0, [r7, #12]
 800527a:	ed87 0a02 	vstr	s0, [r7, #8]
 800527e:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <PID_calc+0x1c>
    {
        return 0.0f;
 8005288:	f04f 0300 	mov.w	r3, #0
 800528c:	e130      	b.n	80054f0 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 80052aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80052ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80052b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f040 8095 	bne.w	80053f0 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	ed93 7a01 	vldr	s14, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80052d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80052ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80052f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8005318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	ed93 7a03 	vldr	s14, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800532e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	edd3 7a05 	vldr	s15, [r3, #20]
 8005344:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534c:	dd04      	ble.n	8005358 <PID_calc+0xe6>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	695a      	ldr	r2, [r3, #20]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	629a      	str	r2, [r3, #40]	@ 0x28
 8005356:	e014      	b.n	8005382 <PID_calc+0x110>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	edd3 7a05 	vldr	s15, [r3, #20]
 8005364:	eef1 7a67 	vneg.f32	s15, s15
 8005368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800536c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005370:	d507      	bpl.n	8005382 <PID_calc+0x110>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	edd3 7a05 	vldr	s15, [r3, #20]
 8005378:	eef1 7a67 	vneg.f32	s15, s15
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800538e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80053ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b6:	dd04      	ble.n	80053c2 <PID_calc+0x150>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	691a      	ldr	r2, [r3, #16]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	621a      	str	r2, [r3, #32]
 80053c0:	e094      	b.n	80054ec <PID_calc+0x27a>
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	ed93 7a08 	vldr	s14, [r3, #32]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80053ce:	eef1 7a67 	vneg.f32	s15, s15
 80053d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053da:	f140 8087 	bpl.w	80054ec <PID_calc+0x27a>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80053e4:	eef1 7a67 	vneg.f32	s15, s15
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	edc3 7a08 	vstr	s15, [r3, #32]
 80053ee:	e07d      	b.n	80054ec <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d179      	bne.n	80054ec <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800540a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800540e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	ed93 7a02 	vldr	s14, [r3, #8]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8005424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800544a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800544e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8005458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	ed93 7a03 	vldr	s14, [r3, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 800546e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	ed93 7a08 	vldr	s14, [r3, #32]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800548a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8005494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	ed93 7a08 	vldr	s14, [r3, #32]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80054ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b6:	dd04      	ble.n	80054c2 <PID_calc+0x250>
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	621a      	str	r2, [r3, #32]
 80054c0:	e014      	b.n	80054ec <PID_calc+0x27a>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	ed93 7a08 	vldr	s14, [r3, #32]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	edd3 7a04 	vldr	s15, [r3, #16]
 80054ce:	eef1 7a67 	vneg.f32	s15, s15
 80054d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054da:	d507      	bpl.n	80054ec <PID_calc+0x27a>
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	edd3 7a04 	vldr	s15, [r3, #16]
 80054e2:	eef1 7a67 	vneg.f32	s15, s15
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
}
 80054f0:	ee07 3a90 	vmov	s15, r3
 80054f4:	eeb0 0a67 	vmov.f32	s0, s15
 80054f8:	3714      	adds	r7, #20
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr
	...

08005504 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8005512:	4a12      	ldr	r2, [pc, #72]	@ (800555c <PWMInit+0x58>)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8005518:	4a11      	ldr	r2, [pc, #68]	@ (8005560 <PWMInit+0x5c>)
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 800551e:	4a11      	ldr	r2, [pc, #68]	@ (8005564 <PWMInit+0x60>)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8005524:	4a10      	ldr	r2, [pc, #64]	@ (8005568 <PWMInit+0x64>)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 800552a:	4b0c      	ldr	r3, [pc, #48]	@ (800555c <PWMInit+0x58>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f005 fc30 	bl	800ad94 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8005534:	4b0a      	ldr	r3, [pc, #40]	@ (8005560 <PWMInit+0x5c>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f005 fc2b 	bl	800ad94 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 800553e:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <PWMInit+0x60>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4618      	mov	r0, r3
 8005544:	f005 fc26 	bl	800ad94 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8005548:	4b07      	ldr	r3, [pc, #28]	@ (8005568 <PWMInit+0x64>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4618      	mov	r0, r3
 800554e:	f005 fc21 	bl	800ad94 <HAL_TIM_Base_Start>
}
 8005552:	bf00      	nop
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20000f24 	.word	0x20000f24
 8005560:	20000f28 	.word	0x20000f28
 8005564:	20000f2c 	.word	0x20000f2c
 8005568:	20000f30 	.word	0x20000f30

0800556c <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	4603      	mov	r3, r0
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d02c      	beq.n	80055dc <calculateOutputPeriodToGetFrequency+0x70>
 8005582:	2b02      	cmp	r3, #2
 8005584:	dc3d      	bgt.n	8005602 <calculateOutputPeriodToGetFrequency+0x96>
 8005586:	2b00      	cmp	r3, #0
 8005588:	d002      	beq.n	8005590 <calculateOutputPeriodToGetFrequency+0x24>
 800558a:	2b01      	cmp	r3, #1
 800558c:	d013      	beq.n	80055b6 <calculateOutputPeriodToGetFrequency+0x4a>
 800558e:	e038      	b.n	8005602 <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	ee07 3a90 	vmov	s15, r3
 8005596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800559a:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005610 <calculateOutputPeriodToGetFrequency+0xa4>
 800559e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ae:	ee17 3a90 	vmov	r3, s15
 80055b2:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 80055b4:	e025      	b.n	8005602 <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	ee07 3a90 	vmov	s15, r3
 80055bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055c0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8005614 <calculateOutputPeriodToGetFrequency+0xa8>
 80055c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055c8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d4:	ee17 3a90 	vmov	r3, s15
 80055d8:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 80055da:	e012      	b.n	8005602 <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	ee07 3a90 	vmov	s15, r3
 80055e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055e6:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005614 <calculateOutputPeriodToGetFrequency+0xa8>
 80055ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80055ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055fa:	ee17 3a90 	vmov	r3, s15
 80055fe:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8005600:	bf00      	nop
	}

	return finalVal;
 8005602:	68fb      	ldr	r3, [r7, #12]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	360637bd 	.word	0x360637bd
 8005614:	358637bd 	.word	0x358637bd

08005618 <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	ee07 3a90 	vmov	s15, r3
 800562a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800562e:	edd7 7a00 	vldr	s15, [r7]
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800563a:	ee17 3a90 	vmov	r3, s15
 800563e:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	429a      	cmp	r2, r3
 8005646:	d902      	bls.n	800564e <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	e004      	b.n	8005658 <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 8005654:	2301      	movs	r3, #1
 8005656:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 8005658:	68fb      	ldr	r3, [r7, #12]

}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005664:	4770      	bx	lr
	...

08005668 <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	4603      	mov	r3, r0
 8005670:	ed87 0a00 	vstr	s0, [r7]
 8005674:	71fb      	strb	r3, [r7, #7]
 8005676:	460b      	mov	r3, r1
 8005678:	71bb      	strb	r3, [r7, #6]
 800567a:	4613      	mov	r3, r2
 800567c:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d03c      	beq.n	8005702 <calculateOutputPeriodValue+0x9a>
 8005688:	2b02      	cmp	r3, #2
 800568a:	dc51      	bgt.n	8005730 <calculateOutputPeriodValue+0xc8>
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <calculateOutputPeriodValue+0x2e>
 8005690:	2b01      	cmp	r3, #1
 8005692:	d01b      	beq.n	80056cc <calculateOutputPeriodValue+0x64>
 8005694:	e04c      	b.n	8005730 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 8005696:	79bb      	ldrb	r3, [r7, #6]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 800569c:	edd7 7a00 	vldr	s15, [r7]
 80056a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056a4:	ee17 2a90 	vmov	r2, s15
 80056a8:	2302      	movs	r3, #2
 80056aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ae:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 80056b0:	e03e      	b.n	8005730 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 80056b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80056b6:	3b01      	subs	r3, #1
 80056b8:	4a20      	ldr	r2, [pc, #128]	@ (800573c <calculateOutputPeriodValue+0xd4>)
 80056ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056be:	ed97 0a00 	vldr	s0, [r7]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7ff ffa8 	bl	8005618 <safeOutputPeriodValueCalculator>
 80056c8:	60f8      	str	r0, [r7, #12]
			break;
 80056ca:	e031      	b.n	8005730 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 80056cc:	79bb      	ldrb	r3, [r7, #6]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 80056d2:	edd7 7a00 	vldr	s15, [r7]
 80056d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056da:	ee17 2a90 	vmov	r2, s15
 80056de:	2301      	movs	r3, #1
 80056e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056e4:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 80056e6:	e023      	b.n	8005730 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 80056e8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80056ec:	3306      	adds	r3, #6
 80056ee:	4a13      	ldr	r2, [pc, #76]	@ (800573c <calculateOutputPeriodValue+0xd4>)
 80056f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056f4:	ed97 0a00 	vldr	s0, [r7]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff ff8d 	bl	8005618 <safeOutputPeriodValueCalculator>
 80056fe:	60f8      	str	r0, [r7, #12]
			break;
 8005700:	e016      	b.n	8005730 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 8005702:	79bb      	ldrb	r3, [r7, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 8005708:	edd7 7a00 	vldr	s15, [r7]
 800570c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005710:	ee17 2a90 	vmov	r2, s15
 8005714:	2301      	movs	r3, #1
 8005716:	fbb2 f3f3 	udiv	r3, r2, r3
 800571a:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 800571c:	e007      	b.n	800572e <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 800571e:	4b07      	ldr	r3, [pc, #28]	@ (800573c <calculateOutputPeriodValue+0xd4>)
 8005720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005722:	ed97 0a00 	vldr	s0, [r7]
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff ff76 	bl	8005618 <safeOutputPeriodValueCalculator>
 800572c:	60f8      	str	r0, [r7, #12]
			break;
 800572e:	bf00      	nop
		default:
	}
	return returnVal;
 8005730:	68fb      	ldr	r3, [r7, #12]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	20000f6c 	.word	0x20000f6c

08005740 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	4603      	mov	r3, r0
 8005748:	ed87 0a00 	vstr	s0, [r7]
 800574c:	71fb      	strb	r3, [r7, #7]
 800574e:	460b      	mov	r3, r1
 8005750:	71bb      	strb	r3, [r7, #6]
 8005752:	4613      	mov	r3, r2
 8005754:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 8005756:	f997 2005 	ldrsb.w	r2, [r7, #5]
 800575a:	79b9      	ldrb	r1, [r7, #6]
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	ed97 0a00 	vldr	s0, [r7]
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff ff80 	bl	8005668 <calculateOutputPeriodValue>
 8005768:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 800576a:	79fb      	ldrb	r3, [r7, #7]
 800576c:	2b02      	cmp	r3, #2
 800576e:	d076      	beq.n	800585e <PWMInitialize+0x11e>
 8005770:	2b02      	cmp	r3, #2
 8005772:	dc7e      	bgt.n	8005872 <PWMInitialize+0x132>
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <PWMInitialize+0x3e>
 8005778:	2b01      	cmp	r3, #1
 800577a:	d04a      	beq.n	8005812 <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 800577c:	e079      	b.n	8005872 <PWMInitialize+0x132>
		switch (position) {
 800577e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005782:	3b01      	subs	r3, #1
 8005784:	2b06      	cmp	r3, #6
 8005786:	d83b      	bhi.n	8005800 <PWMInitialize+0xc0>
 8005788:	a201      	add	r2, pc, #4	@ (adr r2, 8005790 <PWMInitialize+0x50>)
 800578a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578e:	bf00      	nop
 8005790:	080057ad 	.word	0x080057ad
 8005794:	080057b9 	.word	0x080057b9
 8005798:	080057c5 	.word	0x080057c5
 800579c:	080057d1 	.word	0x080057d1
 80057a0:	080057dd 	.word	0x080057dd
 80057a4:	080057e9 	.word	0x080057e9
 80057a8:	080057f5 	.word	0x080057f5
			(*tim1).Instance->CCR1=value;
 80057ac:	4b33      	ldr	r3, [pc, #204]	@ (800587c <PWMInitialize+0x13c>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80057b6:	e024      	b.n	8005802 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 80057b8:	4b30      	ldr	r3, [pc, #192]	@ (800587c <PWMInitialize+0x13c>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	68fa      	ldr	r2, [r7, #12]
 80057c0:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80057c2:	e01e      	b.n	8005802 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 80057c4:	4b2d      	ldr	r3, [pc, #180]	@ (800587c <PWMInitialize+0x13c>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80057ce:	e018      	b.n	8005802 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 80057d0:	4b2a      	ldr	r3, [pc, #168]	@ (800587c <PWMInitialize+0x13c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80057da:	e012      	b.n	8005802 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 80057dc:	4b28      	ldr	r3, [pc, #160]	@ (8005880 <PWMInitialize+0x140>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80057e6:	e00c      	b.n	8005802 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 80057e8:	4b25      	ldr	r3, [pc, #148]	@ (8005880 <PWMInitialize+0x140>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80057f2:	e006      	b.n	8005802 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 80057f4:	4b22      	ldr	r3, [pc, #136]	@ (8005880 <PWMInitialize+0x140>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80057fe:	e000      	b.n	8005802 <PWMInitialize+0xc2>
			break;
 8005800:	bf00      	nop
		subPeriod[position-1] = value;
 8005802:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005806:	3b01      	subs	r3, #1
 8005808:	491e      	ldr	r1, [pc, #120]	@ (8005884 <PWMInitialize+0x144>)
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8005810:	e02e      	b.n	8005870 <PWMInitialize+0x130>
		switch (position) {
 8005812:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005816:	2b03      	cmp	r3, #3
 8005818:	d012      	beq.n	8005840 <PWMInitialize+0x100>
 800581a:	2b03      	cmp	r3, #3
 800581c:	dc16      	bgt.n	800584c <PWMInitialize+0x10c>
 800581e:	2b01      	cmp	r3, #1
 8005820:	d002      	beq.n	8005828 <PWMInitialize+0xe8>
 8005822:	2b02      	cmp	r3, #2
 8005824:	d006      	beq.n	8005834 <PWMInitialize+0xf4>
			break;
 8005826:	e011      	b.n	800584c <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 8005828:	4b17      	ldr	r3, [pc, #92]	@ (8005888 <PWMInitialize+0x148>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8005832:	e00c      	b.n	800584e <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 8005834:	4b14      	ldr	r3, [pc, #80]	@ (8005888 <PWMInitialize+0x148>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800583e:	e006      	b.n	800584e <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 8005840:	4b11      	ldr	r3, [pc, #68]	@ (8005888 <PWMInitialize+0x148>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 800584a:	e000      	b.n	800584e <PWMInitialize+0x10e>
			break;
 800584c:	bf00      	nop
		subPeriod[position+6] = value;
 800584e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8005852:	3306      	adds	r3, #6
 8005854:	490b      	ldr	r1, [pc, #44]	@ (8005884 <PWMInitialize+0x144>)
 8005856:	68fa      	ldr	r2, [r7, #12]
 8005858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800585c:	e008      	b.n	8005870 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 800585e:	4b0b      	ldr	r3, [pc, #44]	@ (800588c <PWMInitialize+0x14c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 8005868:	4a06      	ldr	r2, [pc, #24]	@ (8005884 <PWMInitialize+0x144>)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 800586e:	bf00      	nop
	return;
 8005870:	bf00      	nop
 8005872:	bf00      	nop
}
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	20000f24 	.word	0x20000f24
 8005880:	20000f30 	.word	0x20000f30
 8005884:	20000f40 	.word	0x20000f40
 8005888:	20000f2c 	.word	0x20000f2c
 800588c:	20000f28 	.word	0x20000f28

08005890 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	4603      	mov	r3, r0
 8005898:	6039      	str	r1, [r7, #0]
 800589a:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 800589c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a0:	2b04      	cmp	r3, #4
 80058a2:	dc0c      	bgt.n	80058be <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 80058a4:	4b0f      	ldr	r3, [pc, #60]	@ (80058e4 <MotorPositionForInitializingPeriod+0x54>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 80058ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	490c      	ldr	r1, [pc, #48]	@ (80058e8 <MotorPositionForInitializingPeriod+0x58>)
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 80058bc:	e00b      	b.n	80058d6 <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 80058be:	4b0b      	ldr	r3, [pc, #44]	@ (80058ec <MotorPositionForInitializingPeriod+0x5c>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	683a      	ldr	r2, [r7, #0]
 80058c6:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 80058c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058cc:	3b01      	subs	r3, #1
 80058ce:	4906      	ldr	r1, [pc, #24]	@ (80058e8 <MotorPositionForInitializingPeriod+0x58>)
 80058d0:	683a      	ldr	r2, [r7, #0]
 80058d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80058d6:	bf00      	nop
 80058d8:	370c      	adds	r7, #12
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20000f24 	.word	0x20000f24
 80058e8:	20000f6c 	.word	0x20000f6c
 80058ec:	20000f30 	.word	0x20000f30

080058f0 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	4603      	mov	r3, r0
 80058f8:	603a      	str	r2, [r7, #0]
 80058fa:	71fb      	strb	r3, [r7, #7]
 80058fc:	460b      	mov	r3, r1
 80058fe:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	6839      	ldr	r1, [r7, #0]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff fe31 	bl	800556c <calculateOutputPeriodToGetFrequency>
 800590a:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 800590c:	79fb      	ldrb	r3, [r7, #7]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d01a      	beq.n	8005948 <initializePeriod+0x58>
 8005912:	2b02      	cmp	r3, #2
 8005914:	dc22      	bgt.n	800595c <initializePeriod+0x6c>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d002      	beq.n	8005920 <initializePeriod+0x30>
 800591a:	2b01      	cmp	r3, #1
 800591c:	d007      	beq.n	800592e <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 800591e:	e01d      	b.n	800595c <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 8005920:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005924:	68f9      	ldr	r1, [r7, #12]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ffb2 	bl	8005890 <MotorPositionForInitializingPeriod>
		break;
 800592c:	e015      	b.n	800595a <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 800592e:	4b0d      	ldr	r3, [pc, #52]	@ (8005964 <initializePeriod+0x74>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 8005938:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800593c:	3306      	adds	r3, #6
 800593e:	490a      	ldr	r1, [pc, #40]	@ (8005968 <initializePeriod+0x78>)
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8005946:	e008      	b.n	800595a <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 8005948:	4b08      	ldr	r3, [pc, #32]	@ (800596c <initializePeriod+0x7c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 8005952:	4a05      	ldr	r2, [pc, #20]	@ (8005968 <initializePeriod+0x78>)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8005958:	bf00      	nop
	return;
 800595a:	bf00      	nop
 800595c:	bf00      	nop
}
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000f2c 	.word	0x20000f2c
 8005968:	20000f6c 	.word	0x20000f6c
 800596c:	20000f28 	.word	0x20000f28

08005970 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	4603      	mov	r3, r0
 8005978:	603a      	str	r2, [r7, #0]
 800597a:	71fb      	strb	r3, [r7, #7]
 800597c:	460b      	mov	r3, r1
 800597e:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 8005980:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8005984:	79fb      	ldrb	r3, [r7, #7]
 8005986:	683a      	ldr	r2, [r7, #0]
 8005988:	4618      	mov	r0, r3
 800598a:	f7ff ffb1 	bl	80058f0 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d014      	beq.n	80059be <PWMOutput+0x4e>
 8005994:	2b02      	cmp	r3, #2
 8005996:	dc16      	bgt.n	80059c6 <PWMOutput+0x56>
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <PWMOutput+0x32>
 800599c:	2b01      	cmp	r3, #1
 800599e:	d007      	beq.n	80059b0 <PWMOutput+0x40>
 80059a0:	e011      	b.n	80059c6 <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 80059a2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80059a6:	3b01      	subs	r3, #1
 80059a8:	4a08      	ldr	r2, [pc, #32]	@ (80059cc <PWMOutput+0x5c>)
 80059aa:	2101      	movs	r1, #1
 80059ac:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 80059ae:	e00a      	b.n	80059c6 <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 80059b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80059b4:	3306      	adds	r3, #6
 80059b6:	4a05      	ldr	r2, [pc, #20]	@ (80059cc <PWMOutput+0x5c>)
 80059b8:	2101      	movs	r1, #1
 80059ba:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 80059bc:	e003      	b.n	80059c6 <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 80059be:	4b03      	ldr	r3, [pc, #12]	@ (80059cc <PWMOutput+0x5c>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 80059c4:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 80059c6:	3708      	adds	r7, #8
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	20000f34 	.word	0x20000f34

080059d0 <PWMOn>:

void PWMOn(TypesThatUsePWM_t Type, int8_t Position) {
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	460a      	mov	r2, r1
 80059da:	71fb      	strb	r3, [r7, #7]
 80059dc:	4613      	mov	r3, r2
 80059de:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d014      	beq.n	8005a10 <PWMOn+0x40>
 80059e6:	2b02      	cmp	r3, #2
 80059e8:	dc16      	bgt.n	8005a18 <PWMOn+0x48>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <PWMOn+0x24>
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d007      	beq.n	8005a02 <PWMOn+0x32>
 80059f2:	e011      	b.n	8005a18 <PWMOn+0x48>
	case 0:
		whichPWMisOn[Position-1] = 1;
 80059f4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80059f8:	3b01      	subs	r3, #1
 80059fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005a24 <PWMOn+0x54>)
 80059fc:	2101      	movs	r1, #1
 80059fe:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8005a00:	e00a      	b.n	8005a18 <PWMOn+0x48>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8005a02:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a06:	3306      	adds	r3, #6
 8005a08:	4a06      	ldr	r2, [pc, #24]	@ (8005a24 <PWMOn+0x54>)
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8005a0e:	e003      	b.n	8005a18 <PWMOn+0x48>
	case 2:
		whichPWMisOn[10] = 1;
 8005a10:	4b04      	ldr	r3, [pc, #16]	@ (8005a24 <PWMOn+0x54>)
 8005a12:	2201      	movs	r2, #1
 8005a14:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8005a16:	bf00      	nop
	}
}
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	20000f34 	.word	0x20000f34

08005a28 <PWMOff>:

void PWMOff(TypesThatUsePWM_t Type, int8_t Position) {
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	460a      	mov	r2, r1
 8005a32:	71fb      	strb	r3, [r7, #7]
 8005a34:	4613      	mov	r3, r2
 8005a36:	71bb      	strb	r3, [r7, #6]
	switch (Type) {
 8005a38:	79fb      	ldrb	r3, [r7, #7]
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d014      	beq.n	8005a68 <PWMOff+0x40>
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	dc16      	bgt.n	8005a70 <PWMOff+0x48>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <PWMOff+0x24>
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d007      	beq.n	8005a5a <PWMOff+0x32>
 8005a4a:	e011      	b.n	8005a70 <PWMOff+0x48>
	case 0:
		whichPWMisOn[Position-1] = 0;
 8005a4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a50:	3b01      	subs	r3, #1
 8005a52:	4a0a      	ldr	r2, [pc, #40]	@ (8005a7c <PWMOff+0x54>)
 8005a54:	2100      	movs	r1, #0
 8005a56:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8005a58:	e00a      	b.n	8005a70 <PWMOff+0x48>
	case 1:
		whichPWMisOn[Position+6] = 0;
 8005a5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005a5e:	3306      	adds	r3, #6
 8005a60:	4a06      	ldr	r2, [pc, #24]	@ (8005a7c <PWMOff+0x54>)
 8005a62:	2100      	movs	r1, #0
 8005a64:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8005a66:	e003      	b.n	8005a70 <PWMOff+0x48>
	case 2:
		whichPWMisOn[10] = 0;
 8005a68:	4b04      	ldr	r3, [pc, #16]	@ (8005a7c <PWMOff+0x54>)
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8005a6e:	bf00      	nop
	}
}
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000f34 	.word	0x20000f34

08005a80 <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8005a86:	2300      	movs	r3, #0
 8005a88:	607b      	str	r3, [r7, #4]
 8005a8a:	e0f1      	b.n	8005c70 <PWMTimerStarter+0x1f0>
		switch (i) {
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b0a      	cmp	r3, #10
 8005a90:	f200 80eb 	bhi.w	8005c6a <PWMTimerStarter+0x1ea>
 8005a94:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <PWMTimerStarter+0x1c>)
 8005a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9a:	bf00      	nop
 8005a9c:	08005ac9 	.word	0x08005ac9
 8005aa0:	08005aef 	.word	0x08005aef
 8005aa4:	08005b15 	.word	0x08005b15
 8005aa8:	08005b3b 	.word	0x08005b3b
 8005aac:	08005b61 	.word	0x08005b61
 8005ab0:	08005b87 	.word	0x08005b87
 8005ab4:	08005bad 	.word	0x08005bad
 8005ab8:	08005bd3 	.word	0x08005bd3
 8005abc:	08005bf9 	.word	0x08005bf9
 8005ac0:	08005c1f 	.word	0x08005c1f
 8005ac4:	08005c45 	.word	0x08005c45
		case 0:
			if (whichPWMisOn[0] == 1) {
 8005ac8:	4b6e      	ldr	r3, [pc, #440]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005aca:	f993 3000 	ldrsb.w	r3, [r3]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d106      	bne.n	8005ae0 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8005ad2:	4b6d      	ldr	r3, [pc, #436]	@ (8005c88 <PWMTimerStarter+0x208>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2100      	movs	r1, #0
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f005 fa13 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8005ade:	e0c4      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8005ae0:	4b69      	ldr	r3, [pc, #420]	@ (8005c88 <PWMTimerStarter+0x208>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f005 fad4 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005aec:	e0bd      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8005aee:	4b65      	ldr	r3, [pc, #404]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005af0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d106      	bne.n	8005b06 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8005af8:	4b63      	ldr	r3, [pc, #396]	@ (8005c88 <PWMTimerStarter+0x208>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2104      	movs	r1, #4
 8005afe:	4618      	mov	r0, r3
 8005b00:	f005 fa00 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8005b04:	e0b1      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8005b06:	4b60      	ldr	r3, [pc, #384]	@ (8005c88 <PWMTimerStarter+0x208>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2104      	movs	r1, #4
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f005 fac1 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005b12:	e0aa      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8005b14:	4b5b      	ldr	r3, [pc, #364]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005b16:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d106      	bne.n	8005b2c <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8005b1e:	4b5a      	ldr	r3, [pc, #360]	@ (8005c88 <PWMTimerStarter+0x208>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2108      	movs	r1, #8
 8005b24:	4618      	mov	r0, r3
 8005b26:	f005 f9ed 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8005b2a:	e09e      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8005b2c:	4b56      	ldr	r3, [pc, #344]	@ (8005c88 <PWMTimerStarter+0x208>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2108      	movs	r1, #8
 8005b32:	4618      	mov	r0, r3
 8005b34:	f005 faae 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005b38:	e097      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8005b3a:	4b52      	ldr	r3, [pc, #328]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005b3c:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d106      	bne.n	8005b52 <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8005b44:	4b50      	ldr	r3, [pc, #320]	@ (8005c88 <PWMTimerStarter+0x208>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	210c      	movs	r1, #12
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f005 f9da 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8005b50:	e08b      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8005b52:	4b4d      	ldr	r3, [pc, #308]	@ (8005c88 <PWMTimerStarter+0x208>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	210c      	movs	r1, #12
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f005 fa9b 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005b5e:	e084      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8005b60:	4b48      	ldr	r3, [pc, #288]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005b62:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d106      	bne.n	8005b78 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8005b6a:	4b48      	ldr	r3, [pc, #288]	@ (8005c8c <PWMTimerStarter+0x20c>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2100      	movs	r1, #0
 8005b70:	4618      	mov	r0, r3
 8005b72:	f005 f9c7 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8005b76:	e078      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8005b78:	4b44      	ldr	r3, [pc, #272]	@ (8005c8c <PWMTimerStarter+0x20c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f005 fa88 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005b84:	e071      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8005b86:	4b3f      	ldr	r3, [pc, #252]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005b88:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d106      	bne.n	8005b9e <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8005b90:	4b3e      	ldr	r3, [pc, #248]	@ (8005c8c <PWMTimerStarter+0x20c>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2104      	movs	r1, #4
 8005b96:	4618      	mov	r0, r3
 8005b98:	f005 f9b4 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8005b9c:	e065      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8005b9e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c8c <PWMTimerStarter+0x20c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f005 fa75 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005baa:	e05e      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8005bac:	4b35      	ldr	r3, [pc, #212]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005bae:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d106      	bne.n	8005bc4 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8005bb6:	4b35      	ldr	r3, [pc, #212]	@ (8005c8c <PWMTimerStarter+0x20c>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	2108      	movs	r1, #8
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f005 f9a1 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8005bc2:	e052      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8005bc4:	4b31      	ldr	r3, [pc, #196]	@ (8005c8c <PWMTimerStarter+0x20c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2108      	movs	r1, #8
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f005 fa62 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005bd0:	e04b      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8005bd2:	4b2c      	ldr	r3, [pc, #176]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005bd4:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d106      	bne.n	8005bea <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8005bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8005c90 <PWMTimerStarter+0x210>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2100      	movs	r1, #0
 8005be2:	4618      	mov	r0, r3
 8005be4:	f005 f98e 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8005be8:	e03f      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8005bea:	4b29      	ldr	r3, [pc, #164]	@ (8005c90 <PWMTimerStarter+0x210>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2100      	movs	r1, #0
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f005 fa4f 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005bf6:	e038      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8005bf8:	4b22      	ldr	r3, [pc, #136]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005bfa:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d106      	bne.n	8005c10 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8005c02:	4b23      	ldr	r3, [pc, #140]	@ (8005c90 <PWMTimerStarter+0x210>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2104      	movs	r1, #4
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f005 f97b 	bl	800af04 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 8005c0e:	e02c      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8005c10:	4b1f      	ldr	r3, [pc, #124]	@ (8005c90 <PWMTimerStarter+0x210>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2104      	movs	r1, #4
 8005c16:	4618      	mov	r0, r3
 8005c18:	f005 fa3c 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005c1c:	e025      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8005c1e:	4b19      	ldr	r3, [pc, #100]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005c20:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d106      	bne.n	8005c36 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8005c28:	4b19      	ldr	r3, [pc, #100]	@ (8005c90 <PWMTimerStarter+0x210>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2108      	movs	r1, #8
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f005 f968 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8005c34:	e019      	b.n	8005c6a <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8005c36:	4b16      	ldr	r3, [pc, #88]	@ (8005c90 <PWMTimerStarter+0x210>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2108      	movs	r1, #8
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f005 fa29 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005c42:	e012      	b.n	8005c6a <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8005c44:	4b0f      	ldr	r3, [pc, #60]	@ (8005c84 <PWMTimerStarter+0x204>)
 8005c46:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d106      	bne.n	8005c5c <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8005c4e:	4b11      	ldr	r3, [pc, #68]	@ (8005c94 <PWMTimerStarter+0x214>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2108      	movs	r1, #8
 8005c54:	4618      	mov	r0, r3
 8005c56:	f005 f955 	bl	800af04 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8005c5a:	e005      	b.n	8005c68 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8005c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c94 <PWMTimerStarter+0x214>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2108      	movs	r1, #8
 8005c62:	4618      	mov	r0, r3
 8005c64:	f005 fa16 	bl	800b094 <HAL_TIM_PWM_Stop>
			break;
 8005c68:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	607b      	str	r3, [r7, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b0a      	cmp	r3, #10
 8005c74:	f77f af0a 	ble.w	8005a8c <PWMTimerStarter+0xc>
		}
	}
}
 8005c78:	bf00      	nop
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000f34 	.word	0x20000f34
 8005c88:	20000f24 	.word	0x20000f24
 8005c8c:	20000f30 	.word	0x20000f30
 8005c90:	20000f2c 	.word	0x20000f2c
 8005c94:	20000f28 	.word	0x20000f28

08005c98 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 8005c9c:	2224      	movs	r2, #36	@ 0x24
 8005c9e:	4903      	ldr	r1, [pc, #12]	@ (8005cac <remote_control_init+0x14>)
 8005ca0:	4803      	ldr	r0, [pc, #12]	@ (8005cb0 <remote_control_init+0x18>)
 8005ca2:	f7fc fec9 	bl	8002a38 <RC_init>
}
 8005ca6:	bf00      	nop
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	20000fd4 	.word	0x20000fd4
 8005cb0:	20000fb0 	.word	0x20000fb0

08005cb4 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8005cb4:	b480      	push	{r7}
 8005cb6:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8005cb8:	4b02      	ldr	r3, [pc, #8]	@ (8005cc4 <get_remote_control_point+0x10>)
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	20000f98 	.word	0x20000f98

08005cc8 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 8005cce:	4b44      	ldr	r3, [pc, #272]	@ (8005de0 <USART3_IRQHandler+0x118>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0320 	and.w	r3, r3, #32
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00b      	beq.n	8005cf4 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8005cdc:	2300      	movs	r3, #0
 8005cde:	607b      	str	r3, [r7, #4]
 8005ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8005de0 <USART3_IRQHandler+0x118>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	607b      	str	r3, [r7, #4]
 8005ce8:	4b3d      	ldr	r3, [pc, #244]	@ (8005de0 <USART3_IRQHandler+0x118>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	607b      	str	r3, [r7, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 8005cf2:	e070      	b.n	8005dd6 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8005cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8005de4 <USART3_IRQHandler+0x11c>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d06a      	beq.n	8005dd6 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8005d00:	2300      	movs	r3, #0
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	4b36      	ldr	r3, [pc, #216]	@ (8005de0 <USART3_IRQHandler+0x118>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	603b      	str	r3, [r7, #0]
 8005d0c:	4b34      	ldr	r3, [pc, #208]	@ (8005de0 <USART3_IRQHandler+0x118>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8005d16:	4b34      	ldr	r3, [pc, #208]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d12d      	bne.n	8005d80 <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8005d24:	4b30      	ldr	r3, [pc, #192]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0201 	bic.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8005d34:	4b2c      	ldr	r3, [pc, #176]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005d40:	b29a      	uxth	r2, r3
 8005d42:	4b2a      	ldr	r3, [pc, #168]	@ (8005dec <USART3_IRQHandler+0x124>)
 8005d44:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8005d46:	4b28      	ldr	r3, [pc, #160]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2224      	movs	r2, #36	@ 0x24
 8005d4c:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 8005d4e:	4b26      	ldr	r3, [pc, #152]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4b24      	ldr	r3, [pc, #144]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8005d5c:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8005d5e:	4b22      	ldr	r3, [pc, #136]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	4b20      	ldr	r3, [pc, #128]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 8005d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005dec <USART3_IRQHandler+0x124>)
 8005d70:	881b      	ldrh	r3, [r3, #0]
 8005d72:	2b12      	cmp	r3, #18
 8005d74:	d12f      	bne.n	8005dd6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 8005d76:	491e      	ldr	r1, [pc, #120]	@ (8005df0 <USART3_IRQHandler+0x128>)
 8005d78:	481e      	ldr	r0, [pc, #120]	@ (8005df4 <USART3_IRQHandler+0x12c>)
 8005d7a:	f000 f841 	bl	8005e00 <sbus_to_rc>
}
 8005d7e:	e02a      	b.n	8005dd6 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8005d80:	4b19      	ldr	r3, [pc, #100]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4b18      	ldr	r3, [pc, #96]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 0201 	bic.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8005d90:	4b15      	ldr	r3, [pc, #84]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 8005d9c:	b29a      	uxth	r2, r3
 8005d9e:	4b13      	ldr	r3, [pc, #76]	@ (8005dec <USART3_IRQHandler+0x124>)
 8005da0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 8005da2:	4b11      	ldr	r3, [pc, #68]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2224      	movs	r2, #36	@ 0x24
 8005da8:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8005daa:	4b13      	ldr	r3, [pc, #76]	@ (8005df8 <USART3_IRQHandler+0x130>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a12      	ldr	r2, [pc, #72]	@ (8005df8 <USART3_IRQHandler+0x130>)
 8005db0:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8005db4:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8005db6:	4b0c      	ldr	r3, [pc, #48]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8005de8 <USART3_IRQHandler+0x120>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8005dc6:	4b09      	ldr	r3, [pc, #36]	@ (8005dec <USART3_IRQHandler+0x124>)
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	2b12      	cmp	r3, #18
 8005dcc:	d103      	bne.n	8005dd6 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 8005dce:	4908      	ldr	r1, [pc, #32]	@ (8005df0 <USART3_IRQHandler+0x128>)
 8005dd0:	480a      	ldr	r0, [pc, #40]	@ (8005dfc <USART3_IRQHandler+0x134>)
 8005dd2:	f000 f815 	bl	8005e00 <sbus_to_rc>
}
 8005dd6:	bf00      	nop
 8005dd8:	3708      	adds	r7, #8
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000c94 	.word	0x20000c94
 8005de4:	40004800 	.word	0x40004800
 8005de8:	20000de4 	.word	0x20000de4
 8005dec:	20000ff8 	.word	0x20000ff8
 8005df0:	20000f98 	.word	0x20000f98
 8005df4:	20000fb0 	.word	0x20000fb0
 8005df8:	40026028 	.word	0x40026028
 8005dfc:	20000fd4 	.word	0x20000fd4

08005e00 <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f000 8101 	beq.w	8006014 <sbus_to_rc+0x214>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80fd 	beq.w	8006014 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	b21a      	sxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	3301      	adds	r3, #1
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	021b      	lsls	r3, r3, #8
 8005e2c:	b21b      	sxth	r3, r3
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	b21b      	sxth	r3, r3
 8005e32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e36:	b21a      	sxth	r2, r3
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	08db      	lsrs	r3, r3, #3
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	b21a      	sxth	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	3302      	adds	r3, #2
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	015b      	lsls	r3, r3, #5
 8005e54:	b21b      	sxth	r3, r3
 8005e56:	4313      	orrs	r3, r2
 8005e58:	b21b      	sxth	r3, r3
 8005e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e5e:	b21a      	sxth	r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3302      	adds	r3, #2
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	099b      	lsrs	r3, r3, #6
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	b21a      	sxth	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	3303      	adds	r3, #3
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	b21b      	sxth	r3, r3
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	3304      	adds	r3, #4
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005e8c:	b21b      	sxth	r3, r3
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 8005e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e96:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	085b      	lsrs	r3, r3, #1
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	b21a      	sxth	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	3305      	adds	r3, #5
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	01db      	lsls	r3, r3, #7
 8005eb4:	b21b      	sxth	r3, r3
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	b21b      	sxth	r3, r3
 8005eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ebe:	b21a      	sxth	r2, r3
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3305      	adds	r3, #5
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	091b      	lsrs	r3, r3, #4
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	f003 0303 	and.w	r3, r3, #3
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	3305      	adds	r3, #5
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	091b      	lsrs	r3, r3, #4
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	109b      	asrs	r3, r3, #2
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	f003 0303 	and.w	r3, r3, #3
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3306      	adds	r3, #6
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	b21a      	sxth	r2, r3
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3307      	adds	r3, #7
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	b21b      	sxth	r3, r3
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	b21a      	sxth	r2, r3
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3308      	adds	r3, #8
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	b21a      	sxth	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3309      	adds	r3, #9
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	b21b      	sxth	r3, r3
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b21a      	sxth	r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	330a      	adds	r3, #10
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	b2db      	uxtb	r3, r3
 8005f38:	b21a      	sxth	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	330b      	adds	r3, #11
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	021b      	lsls	r3, r3, #8
 8005f44:	b21b      	sxth	r3, r3
 8005f46:	4313      	orrs	r3, r2
 8005f48:	b21a      	sxth	r2, r3
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	330c      	adds	r3, #12
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	330d      	adds	r3, #13
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	330e      	adds	r3, #14
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	b21a      	sxth	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	330f      	adds	r3, #15
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	b21b      	sxth	r3, r3
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	b21b      	sxth	r3, r3
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3310      	adds	r3, #16
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	b21a      	sxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	3311      	adds	r3, #17
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	021b      	lsls	r3, r3, #8
 8005f9a:	b21b      	sxth	r3, r3
 8005f9c:	4313      	orrs	r3, r2
 8005f9e:	b21a      	sxth	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005faa:	b21b      	sxth	r3, r3
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	b21a      	sxth	r2, r3
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005fc0:	b21b      	sxth	r3, r3
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	b21a      	sxth	r2, r3
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005fd6:	b21b      	sxth	r3, r3
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	b21a      	sxth	r2, r3
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8005fec:	b21b      	sxth	r3, r3
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	b21a      	sxth	r2, r3
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006002:	b21b      	sxth	r3, r3
 8006004:	b29b      	uxth	r3, r3
 8006006:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800600a:	b29b      	uxth	r3, r3
 800600c:	b21a      	sxth	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	811a      	strh	r2, [r3, #8]
 8006012:	e000      	b.n	8006016 <sbus_to_rc+0x216>
        return;
 8006014:	bf00      	nop
}
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	4603      	mov	r3, r0
 8006028:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 800602a:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <getRCchannel+0x24>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8006032:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8006036:	b21b      	sxth	r3, r3
}
 8006038:	4618      	mov	r0, r3
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	200000a0 	.word	0x200000a0

08006048 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 8006052:	4b06      	ldr	r3, [pc, #24]	@ (800606c <getRCswitch+0x24>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800605a:	4413      	add	r3, r2
 800605c:	7a9b      	ldrb	r3, [r3, #10]
 800605e:	b25b      	sxtb	r3, r3
}
 8006060:	4618      	mov	r0, r3
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr
 800606c:	200000a0 	.word	0x200000a0

08006070 <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 8006076:	4b85      	ldr	r3, [pc, #532]	@ (800628c <RCkeysRefresh+0x21c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	7d1a      	ldrb	r2, [r3, #20]
 800607c:	7d5b      	ldrb	r3, [r3, #21]
 800607e:	021b      	lsls	r3, r3, #8
 8006080:	4313      	orrs	r3, r2
 8006082:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 8006084:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006088:	2b00      	cmp	r3, #0
 800608a:	da07      	bge.n	800609c <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 800608c:	4b80      	ldr	r3, [pc, #512]	@ (8006290 <RCkeysRefresh+0x220>)
 800608e:	2201      	movs	r2, #1
 8006090:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 8006092:	88fb      	ldrh	r3, [r7, #6]
 8006094:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8006098:	80fb      	strh	r3, [r7, #6]
 800609a:	e002      	b.n	80060a2 <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 800609c:	4b7c      	ldr	r3, [pc, #496]	@ (8006290 <RCkeysRefresh+0x220>)
 800609e:	2200      	movs	r2, #0
 80060a0:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80060a8:	d307      	bcc.n	80060ba <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 80060aa:	4b79      	ldr	r3, [pc, #484]	@ (8006290 <RCkeysRefresh+0x220>)
 80060ac:	2201      	movs	r2, #1
 80060ae:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 80060b0:	88fb      	ldrh	r3, [r7, #6]
 80060b2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80060b6:	80fb      	strh	r3, [r7, #6]
 80060b8:	e002      	b.n	80060c0 <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 80060ba:	4b75      	ldr	r3, [pc, #468]	@ (8006290 <RCkeysRefresh+0x220>)
 80060bc:	2200      	movs	r2, #0
 80060be:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 80060c0:	88fb      	ldrh	r3, [r7, #6]
 80060c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80060c6:	d307      	bcc.n	80060d8 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 80060c8:	4b71      	ldr	r3, [pc, #452]	@ (8006290 <RCkeysRefresh+0x220>)
 80060ca:	2201      	movs	r2, #1
 80060cc:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 80060ce:	88fb      	ldrh	r3, [r7, #6]
 80060d0:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 80060d4:	80fb      	strh	r3, [r7, #6]
 80060d6:	e002      	b.n	80060de <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 80060d8:	4b6d      	ldr	r3, [pc, #436]	@ (8006290 <RCkeysRefresh+0x220>)
 80060da:	2200      	movs	r2, #0
 80060dc:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 80060de:	88fb      	ldrh	r3, [r7, #6]
 80060e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e4:	d307      	bcc.n	80060f6 <RCkeysRefresh+0x86>
		pc_control.x = 1;
 80060e6:	4b6a      	ldr	r3, [pc, #424]	@ (8006290 <RCkeysRefresh+0x220>)
 80060e8:	2201      	movs	r2, #1
 80060ea:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 80060ec:	88fb      	ldrh	r3, [r7, #6]
 80060ee:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 80060f2:	80fb      	strh	r3, [r7, #6]
 80060f4:	e002      	b.n	80060fc <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 80060f6:	4b66      	ldr	r3, [pc, #408]	@ (8006290 <RCkeysRefresh+0x220>)
 80060f8:	2200      	movs	r2, #0
 80060fa:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 80060fc:	88fb      	ldrh	r3, [r7, #6]
 80060fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006102:	d307      	bcc.n	8006114 <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 8006104:	4b62      	ldr	r3, [pc, #392]	@ (8006290 <RCkeysRefresh+0x220>)
 8006106:	2201      	movs	r2, #1
 8006108:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 800610a:	88fb      	ldrh	r3, [r7, #6]
 800610c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8006110:	80fb      	strh	r3, [r7, #6]
 8006112:	e002      	b.n	800611a <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 8006114:	4b5e      	ldr	r3, [pc, #376]	@ (8006290 <RCkeysRefresh+0x220>)
 8006116:	2200      	movs	r2, #0
 8006118:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 800611a:	88fb      	ldrh	r3, [r7, #6]
 800611c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006120:	d307      	bcc.n	8006132 <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 8006122:	4b5b      	ldr	r3, [pc, #364]	@ (8006290 <RCkeysRefresh+0x220>)
 8006124:	2201      	movs	r2, #1
 8006126:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8006128:	88fb      	ldrh	r3, [r7, #6]
 800612a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800612e:	80fb      	strh	r3, [r7, #6]
 8006130:	e002      	b.n	8006138 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 8006132:	4b57      	ldr	r3, [pc, #348]	@ (8006290 <RCkeysRefresh+0x220>)
 8006134:	2200      	movs	r2, #0
 8006136:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800613e:	d307      	bcc.n	8006150 <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 8006140:	4b53      	ldr	r3, [pc, #332]	@ (8006290 <RCkeysRefresh+0x220>)
 8006142:	2201      	movs	r2, #1
 8006144:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 8006146:	88fb      	ldrh	r3, [r7, #6]
 8006148:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 800614c:	80fb      	strh	r3, [r7, #6]
 800614e:	e002      	b.n	8006156 <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 8006150:	4b4f      	ldr	r3, [pc, #316]	@ (8006290 <RCkeysRefresh+0x220>)
 8006152:	2200      	movs	r2, #0
 8006154:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2bff      	cmp	r3, #255	@ 0xff
 800615a:	d907      	bls.n	800616c <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 800615c:	4b4c      	ldr	r3, [pc, #304]	@ (8006290 <RCkeysRefresh+0x220>)
 800615e:	2201      	movs	r2, #1
 8006160:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 8006162:	88fb      	ldrh	r3, [r7, #6]
 8006164:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8006168:	80fb      	strh	r3, [r7, #6]
 800616a:	e002      	b.n	8006172 <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 800616c:	4b48      	ldr	r3, [pc, #288]	@ (8006290 <RCkeysRefresh+0x220>)
 800616e:	2200      	movs	r2, #0
 8006170:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	2b7f      	cmp	r3, #127	@ 0x7f
 8006176:	d906      	bls.n	8006186 <RCkeysRefresh+0x116>
		pc_control.e = 1;
 8006178:	4b45      	ldr	r3, [pc, #276]	@ (8006290 <RCkeysRefresh+0x220>)
 800617a:	2201      	movs	r2, #1
 800617c:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 800617e:	88fb      	ldrh	r3, [r7, #6]
 8006180:	3b80      	subs	r3, #128	@ 0x80
 8006182:	80fb      	strh	r3, [r7, #6]
 8006184:	e002      	b.n	800618c <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 8006186:	4b42      	ldr	r3, [pc, #264]	@ (8006290 <RCkeysRefresh+0x220>)
 8006188:	2200      	movs	r2, #0
 800618a:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 800618c:	88fb      	ldrh	r3, [r7, #6]
 800618e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006190:	d906      	bls.n	80061a0 <RCkeysRefresh+0x130>
		pc_control.q = 1;
 8006192:	4b3f      	ldr	r3, [pc, #252]	@ (8006290 <RCkeysRefresh+0x220>)
 8006194:	2201      	movs	r2, #1
 8006196:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	3b40      	subs	r3, #64	@ 0x40
 800619c:	80fb      	strh	r3, [r7, #6]
 800619e:	e002      	b.n	80061a6 <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 80061a0:	4b3b      	ldr	r3, [pc, #236]	@ (8006290 <RCkeysRefresh+0x220>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b1f      	cmp	r3, #31
 80061aa:	d906      	bls.n	80061ba <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 80061ac:	4b38      	ldr	r3, [pc, #224]	@ (8006290 <RCkeysRefresh+0x220>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 80061b2:	88fb      	ldrh	r3, [r7, #6]
 80061b4:	3b20      	subs	r3, #32
 80061b6:	80fb      	strh	r3, [r7, #6]
 80061b8:	e002      	b.n	80061c0 <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 80061ba:	4b35      	ldr	r3, [pc, #212]	@ (8006290 <RCkeysRefresh+0x220>)
 80061bc:	2200      	movs	r2, #0
 80061be:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 80061c0:	88fb      	ldrh	r3, [r7, #6]
 80061c2:	2b0f      	cmp	r3, #15
 80061c4:	d906      	bls.n	80061d4 <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 80061c6:	4b32      	ldr	r3, [pc, #200]	@ (8006290 <RCkeysRefresh+0x220>)
 80061c8:	2201      	movs	r2, #1
 80061ca:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 80061cc:	88fb      	ldrh	r3, [r7, #6]
 80061ce:	3b10      	subs	r3, #16
 80061d0:	80fb      	strh	r3, [r7, #6]
 80061d2:	e002      	b.n	80061da <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 80061d4:	4b2e      	ldr	r3, [pc, #184]	@ (8006290 <RCkeysRefresh+0x220>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 80061da:	88fb      	ldrh	r3, [r7, #6]
 80061dc:	2b07      	cmp	r3, #7
 80061de:	d906      	bls.n	80061ee <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 80061e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006290 <RCkeysRefresh+0x220>)
 80061e2:	2201      	movs	r2, #1
 80061e4:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 80061e6:	88fb      	ldrh	r3, [r7, #6]
 80061e8:	3b08      	subs	r3, #8
 80061ea:	80fb      	strh	r3, [r7, #6]
 80061ec:	e002      	b.n	80061f4 <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 80061ee:	4b28      	ldr	r3, [pc, #160]	@ (8006290 <RCkeysRefresh+0x220>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d906      	bls.n	8006208 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 80061fa:	4b25      	ldr	r3, [pc, #148]	@ (8006290 <RCkeysRefresh+0x220>)
 80061fc:	2201      	movs	r2, #1
 80061fe:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 8006200:	88fb      	ldrh	r3, [r7, #6]
 8006202:	3b04      	subs	r3, #4
 8006204:	80fb      	strh	r3, [r7, #6]
 8006206:	e002      	b.n	800620e <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 8006208:	4b21      	ldr	r3, [pc, #132]	@ (8006290 <RCkeysRefresh+0x220>)
 800620a:	2200      	movs	r2, #0
 800620c:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 800620e:	88fb      	ldrh	r3, [r7, #6]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d906      	bls.n	8006222 <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 8006214:	4b1e      	ldr	r3, [pc, #120]	@ (8006290 <RCkeysRefresh+0x220>)
 8006216:	2201      	movs	r2, #1
 8006218:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 800621a:	88fb      	ldrh	r3, [r7, #6]
 800621c:	3b02      	subs	r3, #2
 800621e:	80fb      	strh	r3, [r7, #6]
 8006220:	e002      	b.n	8006228 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 8006222:	4b1b      	ldr	r3, [pc, #108]	@ (8006290 <RCkeysRefresh+0x220>)
 8006224:	2200      	movs	r2, #0
 8006226:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8006228:	88fb      	ldrh	r3, [r7, #6]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d003      	beq.n	8006236 <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 800622e:	4b18      	ldr	r3, [pc, #96]	@ (8006290 <RCkeysRefresh+0x220>)
 8006230:	2201      	movs	r2, #1
 8006232:	731a      	strb	r2, [r3, #12]
 8006234:	e002      	b.n	800623c <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 8006236:	4b16      	ldr	r3, [pc, #88]	@ (8006290 <RCkeysRefresh+0x220>)
 8006238:	2200      	movs	r2, #0
 800623a:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 800623c:	4b13      	ldr	r3, [pc, #76]	@ (800628c <RCkeysRefresh+0x21c>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8006244:	b21a      	sxth	r2, r3
 8006246:	4b12      	ldr	r3, [pc, #72]	@ (8006290 <RCkeysRefresh+0x220>)
 8006248:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 800624a:	4b10      	ldr	r3, [pc, #64]	@ (800628c <RCkeysRefresh+0x21c>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006252:	b21a      	sxth	r2, r3
 8006254:	4b0e      	ldr	r3, [pc, #56]	@ (8006290 <RCkeysRefresh+0x220>)
 8006256:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 8006258:	4b0c      	ldr	r3, [pc, #48]	@ (800628c <RCkeysRefresh+0x21c>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006260:	b21a      	sxth	r2, r3
 8006262:	4b0b      	ldr	r3, [pc, #44]	@ (8006290 <RCkeysRefresh+0x220>)
 8006264:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 8006266:	4b09      	ldr	r3, [pc, #36]	@ (800628c <RCkeysRefresh+0x21c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	7c9b      	ldrb	r3, [r3, #18]
 800626c:	b25a      	sxtb	r2, r3
 800626e:	4b08      	ldr	r3, [pc, #32]	@ (8006290 <RCkeysRefresh+0x220>)
 8006270:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 8006272:	4b06      	ldr	r3, [pc, #24]	@ (800628c <RCkeysRefresh+0x21c>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	7cdb      	ldrb	r3, [r3, #19]
 8006278:	b25a      	sxtb	r2, r3
 800627a:	4b05      	ldr	r3, [pc, #20]	@ (8006290 <RCkeysRefresh+0x220>)
 800627c:	71da      	strb	r2, [r3, #7]
}
 800627e:	bf00      	nop
 8006280:	370c      	adds	r7, #12
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	200000a0 	.word	0x200000a0
 8006290:	20000718 	.word	0x20000718

08006294 <HampsterNotes>:
	timeTracker++;

	return  frequencyMotor[MHLLNotes[noteTracker]];
}

uint32_t HampsterNotes() {
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
	uint32_t actualFrequency = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	607b      	str	r3, [r7, #4]
	if (songProgress == 0 || songProgress == 1) {
 800629e:	4b4d      	ldr	r3, [pc, #308]	@ (80063d4 <HampsterNotes+0x140>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HampsterNotes+0x1a>
 80062a6:	4b4b      	ldr	r3, [pc, #300]	@ (80063d4 <HampsterNotes+0x140>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d130      	bne.n	8006310 <HampsterNotes+0x7c>
		if (timeTracker > (HD1Rests[noteTracker]*2)) {
 80062ae:	4b4a      	ldr	r3, [pc, #296]	@ (80063d8 <HampsterNotes+0x144>)
 80062b0:	881b      	ldrh	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	4b49      	ldr	r3, [pc, #292]	@ (80063dc <HampsterNotes+0x148>)
 80062b6:	881b      	ldrh	r3, [r3, #0]
 80062b8:	4619      	mov	r1, r3
 80062ba:	4b49      	ldr	r3, [pc, #292]	@ (80063e0 <HampsterNotes+0x14c>)
 80062bc:	5c5b      	ldrb	r3, [r3, r1]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	429a      	cmp	r2, r3
 80062c2:	dd08      	ble.n	80062d6 <HampsterNotes+0x42>
			noteTracker++;
 80062c4:	4b45      	ldr	r3, [pc, #276]	@ (80063dc <HampsterNotes+0x148>)
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	3301      	adds	r3, #1
 80062ca:	b29a      	uxth	r2, r3
 80062cc:	4b43      	ldr	r3, [pc, #268]	@ (80063dc <HampsterNotes+0x148>)
 80062ce:	801a      	strh	r2, [r3, #0]
			timeTracker = 0;
 80062d0:	4b41      	ldr	r3, [pc, #260]	@ (80063d8 <HampsterNotes+0x144>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	801a      	strh	r2, [r3, #0]
		}

		if (noteTracker > 44) {
 80062d6:	4b41      	ldr	r3, [pc, #260]	@ (80063dc <HampsterNotes+0x148>)
 80062d8:	881b      	ldrh	r3, [r3, #0]
 80062da:	2b2c      	cmp	r3, #44	@ 0x2c
 80062dc:	d90d      	bls.n	80062fa <HampsterNotes+0x66>
			noteTracker = 0;
 80062de:	4b3f      	ldr	r3, [pc, #252]	@ (80063dc <HampsterNotes+0x148>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	801a      	strh	r2, [r3, #0]
			if (songProgress == 0) {
 80062e4:	4b3b      	ldr	r3, [pc, #236]	@ (80063d4 <HampsterNotes+0x140>)
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d103      	bne.n	80062f4 <HampsterNotes+0x60>
				songProgress = 1;
 80062ec:	4b39      	ldr	r3, [pc, #228]	@ (80063d4 <HampsterNotes+0x140>)
 80062ee:	2201      	movs	r2, #1
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	e002      	b.n	80062fa <HampsterNotes+0x66>
			} else {
				songProgress = 2;
 80062f4:	4b37      	ldr	r3, [pc, #220]	@ (80063d4 <HampsterNotes+0x140>)
 80062f6:	2202      	movs	r2, #2
 80062f8:	701a      	strb	r2, [r3, #0]
			}
		}
		actualFrequency =  frequencyEMajorAtA5[HD1Notes[noteTracker]];
 80062fa:	4b38      	ldr	r3, [pc, #224]	@ (80063dc <HampsterNotes+0x148>)
 80062fc:	881b      	ldrh	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	4b38      	ldr	r3, [pc, #224]	@ (80063e4 <HampsterNotes+0x150>)
 8006302:	5c9b      	ldrb	r3, [r3, r2]
 8006304:	461a      	mov	r2, r3
 8006306:	4b38      	ldr	r3, [pc, #224]	@ (80063e8 <HampsterNotes+0x154>)
 8006308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800630c:	607b      	str	r3, [r7, #4]
 800630e:	e054      	b.n	80063ba <HampsterNotes+0x126>
	} else if (songProgress == 2){
 8006310:	4b30      	ldr	r3, [pc, #192]	@ (80063d4 <HampsterNotes+0x140>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	2b02      	cmp	r3, #2
 8006316:	d128      	bne.n	800636a <HampsterNotes+0xd6>
		if (timeTracker > (HD2Rests[noteTracker])*2) {
 8006318:	4b2f      	ldr	r3, [pc, #188]	@ (80063d8 <HampsterNotes+0x144>)
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	4b2f      	ldr	r3, [pc, #188]	@ (80063dc <HampsterNotes+0x148>)
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	4619      	mov	r1, r3
 8006324:	4b31      	ldr	r3, [pc, #196]	@ (80063ec <HampsterNotes+0x158>)
 8006326:	5c5b      	ldrb	r3, [r3, r1]
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	429a      	cmp	r2, r3
 800632c:	dd08      	ble.n	8006340 <HampsterNotes+0xac>
			noteTracker++;
 800632e:	4b2b      	ldr	r3, [pc, #172]	@ (80063dc <HampsterNotes+0x148>)
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	4b29      	ldr	r3, [pc, #164]	@ (80063dc <HampsterNotes+0x148>)
 8006338:	801a      	strh	r2, [r3, #0]
			timeTracker = 0;
 800633a:	4b27      	ldr	r3, [pc, #156]	@ (80063d8 <HampsterNotes+0x144>)
 800633c:	2200      	movs	r2, #0
 800633e:	801a      	strh	r2, [r3, #0]
		}

		if (noteTracker > 38) {
 8006340:	4b26      	ldr	r3, [pc, #152]	@ (80063dc <HampsterNotes+0x148>)
 8006342:	881b      	ldrh	r3, [r3, #0]
 8006344:	2b26      	cmp	r3, #38	@ 0x26
 8006346:	d905      	bls.n	8006354 <HampsterNotes+0xc0>
			songProgress = 3;
 8006348:	4b22      	ldr	r3, [pc, #136]	@ (80063d4 <HampsterNotes+0x140>)
 800634a:	2203      	movs	r2, #3
 800634c:	701a      	strb	r2, [r3, #0]
			noteTracker = 0;
 800634e:	4b23      	ldr	r3, [pc, #140]	@ (80063dc <HampsterNotes+0x148>)
 8006350:	2200      	movs	r2, #0
 8006352:	801a      	strh	r2, [r3, #0]
		}
		actualFrequency = frequencyEMajorAtA5[HD2Notes[noteTracker]];
 8006354:	4b21      	ldr	r3, [pc, #132]	@ (80063dc <HampsterNotes+0x148>)
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	4b25      	ldr	r3, [pc, #148]	@ (80063f0 <HampsterNotes+0x15c>)
 800635c:	5c9b      	ldrb	r3, [r3, r2]
 800635e:	461a      	mov	r2, r3
 8006360:	4b21      	ldr	r3, [pc, #132]	@ (80063e8 <HampsterNotes+0x154>)
 8006362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006366:	607b      	str	r3, [r7, #4]
 8006368:	e027      	b.n	80063ba <HampsterNotes+0x126>
	} else {
		if (timeTracker > (HD3Rests[noteTracker])*2) {
 800636a:	4b1b      	ldr	r3, [pc, #108]	@ (80063d8 <HampsterNotes+0x144>)
 800636c:	881b      	ldrh	r3, [r3, #0]
 800636e:	461a      	mov	r2, r3
 8006370:	4b1a      	ldr	r3, [pc, #104]	@ (80063dc <HampsterNotes+0x148>)
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	4619      	mov	r1, r3
 8006376:	4b1f      	ldr	r3, [pc, #124]	@ (80063f4 <HampsterNotes+0x160>)
 8006378:	5c5b      	ldrb	r3, [r3, r1]
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	429a      	cmp	r2, r3
 800637e:	dd08      	ble.n	8006392 <HampsterNotes+0xfe>
			noteTracker++;
 8006380:	4b16      	ldr	r3, [pc, #88]	@ (80063dc <HampsterNotes+0x148>)
 8006382:	881b      	ldrh	r3, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	4b14      	ldr	r3, [pc, #80]	@ (80063dc <HampsterNotes+0x148>)
 800638a:	801a      	strh	r2, [r3, #0]
			timeTracker = 0;
 800638c:	4b12      	ldr	r3, [pc, #72]	@ (80063d8 <HampsterNotes+0x144>)
 800638e:	2200      	movs	r2, #0
 8006390:	801a      	strh	r2, [r3, #0]
		}

		if (noteTracker > 45) {
 8006392:	4b12      	ldr	r3, [pc, #72]	@ (80063dc <HampsterNotes+0x148>)
 8006394:	881b      	ldrh	r3, [r3, #0]
 8006396:	2b2d      	cmp	r3, #45	@ 0x2d
 8006398:	d905      	bls.n	80063a6 <HampsterNotes+0x112>
			songProgress = 0;
 800639a:	4b0e      	ldr	r3, [pc, #56]	@ (80063d4 <HampsterNotes+0x140>)
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]
			noteTracker = 0;
 80063a0:	4b0e      	ldr	r3, [pc, #56]	@ (80063dc <HampsterNotes+0x148>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	801a      	strh	r2, [r3, #0]
		}
		actualFrequency = frequencyEMajorAtA5[HD3Notes[noteTracker]];
 80063a6:	4b0d      	ldr	r3, [pc, #52]	@ (80063dc <HampsterNotes+0x148>)
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	4b12      	ldr	r3, [pc, #72]	@ (80063f8 <HampsterNotes+0x164>)
 80063ae:	5c9b      	ldrb	r3, [r3, r2]
 80063b0:	461a      	mov	r2, r3
 80063b2:	4b0d      	ldr	r3, [pc, #52]	@ (80063e8 <HampsterNotes+0x154>)
 80063b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063b8:	607b      	str	r3, [r7, #4]
	}
	timeTracker++;
 80063ba:	4b07      	ldr	r3, [pc, #28]	@ (80063d8 <HampsterNotes+0x144>)
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	3301      	adds	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	4b05      	ldr	r3, [pc, #20]	@ (80063d8 <HampsterNotes+0x144>)
 80063c4:	801a      	strh	r2, [r3, #0]
	return actualFrequency;
 80063c6:	687b      	ldr	r3, [r7, #4]

}
 80063c8:	4618      	mov	r0, r3
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr
 80063d4:	20000ffa 	.word	0x20000ffa
 80063d8:	20000ffc 	.word	0x20000ffc
 80063dc:	20000ffe 	.word	0x20000ffe
 80063e0:	20000168 	.word	0x20000168
 80063e4:	200000e0 	.word	0x200000e0
 80063e8:	200000a4 	.word	0x200000a4
 80063ec:	20000198 	.word	0x20000198
 80063f0:	20000110 	.word	0x20000110
 80063f4:	200001c0 	.word	0x200001c0
 80063f8:	20000138 	.word	0x20000138

080063fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]
 8006406:	4b12      	ldr	r3, [pc, #72]	@ (8006450 <HAL_MspInit+0x54>)
 8006408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640a:	4a11      	ldr	r2, [pc, #68]	@ (8006450 <HAL_MspInit+0x54>)
 800640c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006410:	6453      	str	r3, [r2, #68]	@ 0x44
 8006412:	4b0f      	ldr	r3, [pc, #60]	@ (8006450 <HAL_MspInit+0x54>)
 8006414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006416:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800641a:	607b      	str	r3, [r7, #4]
 800641c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800641e:	2300      	movs	r3, #0
 8006420:	603b      	str	r3, [r7, #0]
 8006422:	4b0b      	ldr	r3, [pc, #44]	@ (8006450 <HAL_MspInit+0x54>)
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	4a0a      	ldr	r2, [pc, #40]	@ (8006450 <HAL_MspInit+0x54>)
 8006428:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800642c:	6413      	str	r3, [r2, #64]	@ 0x40
 800642e:	4b08      	ldr	r3, [pc, #32]	@ (8006450 <HAL_MspInit+0x54>)
 8006430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006432:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006436:	603b      	str	r3, [r7, #0]
 8006438:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800643a:	2200      	movs	r2, #0
 800643c:	210f      	movs	r1, #15
 800643e:	f06f 0001 	mvn.w	r0, #1
 8006442:	f001 fe98 	bl	8008176 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	40023800 	.word	0x40023800

08006454 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	@ 0x30
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800645c:	f107 031c 	add.w	r3, r7, #28
 8006460:	2200      	movs	r2, #0
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	609a      	str	r2, [r3, #8]
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a4a      	ldr	r2, [pc, #296]	@ (800659c <HAL_CAN_MspInit+0x148>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d13d      	bne.n	80064f2 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006476:	4b4a      	ldr	r3, [pc, #296]	@ (80065a0 <HAL_CAN_MspInit+0x14c>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	4a48      	ldr	r2, [pc, #288]	@ (80065a0 <HAL_CAN_MspInit+0x14c>)
 800647e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006480:	4b47      	ldr	r3, [pc, #284]	@ (80065a0 <HAL_CAN_MspInit+0x14c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10d      	bne.n	80064a4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8006488:	2300      	movs	r3, #0
 800648a:	61bb      	str	r3, [r7, #24]
 800648c:	4b45      	ldr	r3, [pc, #276]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 800648e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006490:	4a44      	ldr	r2, [pc, #272]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 8006492:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006496:	6413      	str	r3, [r2, #64]	@ 0x40
 8006498:	4b42      	ldr	r3, [pc, #264]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 800649a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800649c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064a0:	61bb      	str	r3, [r7, #24]
 80064a2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064a4:	2300      	movs	r3, #0
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	4b3e      	ldr	r3, [pc, #248]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 80064aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ac:	4a3d      	ldr	r2, [pc, #244]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 80064ae:	f043 0308 	orr.w	r3, r3, #8
 80064b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80064b4:	4b3b      	ldr	r3, [pc, #236]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 80064b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064b8:	f003 0308 	and.w	r3, r3, #8
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80064c0:	2303      	movs	r3, #3
 80064c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064c4:	2302      	movs	r3, #2
 80064c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064c8:	2300      	movs	r3, #0
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064cc:	2303      	movs	r3, #3
 80064ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80064d0:	2309      	movs	r3, #9
 80064d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80064d4:	f107 031c 	add.w	r3, r7, #28
 80064d8:	4619      	mov	r1, r3
 80064da:	4833      	ldr	r0, [pc, #204]	@ (80065a8 <HAL_CAN_MspInit+0x154>)
 80064dc:	f002 fa84 	bl	80089e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80064e0:	2200      	movs	r2, #0
 80064e2:	2105      	movs	r1, #5
 80064e4:	2014      	movs	r0, #20
 80064e6:	f001 fe46 	bl	8008176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80064ea:	2014      	movs	r0, #20
 80064ec:	f001 fe5f 	bl	80081ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80064f0:	e04f      	b.n	8006592 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a2d      	ldr	r2, [pc, #180]	@ (80065ac <HAL_CAN_MspInit+0x158>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d14a      	bne.n	8006592 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
 8006500:	4b28      	ldr	r3, [pc, #160]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 8006502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006504:	4a27      	ldr	r2, [pc, #156]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 8006506:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800650a:	6413      	str	r3, [r2, #64]	@ 0x40
 800650c:	4b25      	ldr	r3, [pc, #148]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 800650e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006510:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8006518:	4b21      	ldr	r3, [pc, #132]	@ (80065a0 <HAL_CAN_MspInit+0x14c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	4a20      	ldr	r2, [pc, #128]	@ (80065a0 <HAL_CAN_MspInit+0x14c>)
 8006520:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8006522:	4b1f      	ldr	r3, [pc, #124]	@ (80065a0 <HAL_CAN_MspInit+0x14c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d10d      	bne.n	8006546 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
 800652e:	4b1d      	ldr	r3, [pc, #116]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006532:	4a1c      	ldr	r2, [pc, #112]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 8006534:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006538:	6413      	str	r3, [r2, #64]	@ 0x40
 800653a:	4b1a      	ldr	r3, [pc, #104]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 800653c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006546:	2300      	movs	r3, #0
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	4b16      	ldr	r3, [pc, #88]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800654e:	4a15      	ldr	r2, [pc, #84]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 8006550:	f043 0302 	orr.w	r3, r3, #2
 8006554:	6313      	str	r3, [r2, #48]	@ 0x30
 8006556:	4b13      	ldr	r3, [pc, #76]	@ (80065a4 <HAL_CAN_MspInit+0x150>)
 8006558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	60bb      	str	r3, [r7, #8]
 8006560:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006562:	2360      	movs	r3, #96	@ 0x60
 8006564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006566:	2302      	movs	r3, #2
 8006568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800656a:	2300      	movs	r3, #0
 800656c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800656e:	2303      	movs	r3, #3
 8006570:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8006572:	2309      	movs	r3, #9
 8006574:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006576:	f107 031c 	add.w	r3, r7, #28
 800657a:	4619      	mov	r1, r3
 800657c:	480c      	ldr	r0, [pc, #48]	@ (80065b0 <HAL_CAN_MspInit+0x15c>)
 800657e:	f002 fa33 	bl	80089e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8006582:	2200      	movs	r2, #0
 8006584:	2105      	movs	r1, #5
 8006586:	2040      	movs	r0, #64	@ 0x40
 8006588:	f001 fdf5 	bl	8008176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800658c:	2040      	movs	r0, #64	@ 0x40
 800658e:	f001 fe0e 	bl	80081ae <HAL_NVIC_EnableIRQ>
}
 8006592:	bf00      	nop
 8006594:	3730      	adds	r7, #48	@ 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	40006400 	.word	0x40006400
 80065a0:	20001000 	.word	0x20001000
 80065a4:	40023800 	.word	0x40023800
 80065a8:	40020c00 	.word	0x40020c00
 80065ac:	40006800 	.word	0x40006800
 80065b0:	40020400 	.word	0x40020400

080065b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08a      	sub	sp, #40	@ 0x28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065bc:	f107 0314 	add.w	r3, r7, #20
 80065c0:	2200      	movs	r2, #0
 80065c2:	601a      	str	r2, [r3, #0]
 80065c4:	605a      	str	r2, [r3, #4]
 80065c6:	609a      	str	r2, [r3, #8]
 80065c8:	60da      	str	r2, [r3, #12]
 80065ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a29      	ldr	r2, [pc, #164]	@ (8006678 <HAL_I2C_MspInit+0xc4>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d14b      	bne.n	800666e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065d6:	2300      	movs	r3, #0
 80065d8:	613b      	str	r3, [r7, #16]
 80065da:	4b28      	ldr	r3, [pc, #160]	@ (800667c <HAL_I2C_MspInit+0xc8>)
 80065dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065de:	4a27      	ldr	r2, [pc, #156]	@ (800667c <HAL_I2C_MspInit+0xc8>)
 80065e0:	f043 0304 	orr.w	r3, r3, #4
 80065e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80065e6:	4b25      	ldr	r3, [pc, #148]	@ (800667c <HAL_I2C_MspInit+0xc8>)
 80065e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ea:	f003 0304 	and.w	r3, r3, #4
 80065ee:	613b      	str	r3, [r7, #16]
 80065f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	4b21      	ldr	r3, [pc, #132]	@ (800667c <HAL_I2C_MspInit+0xc8>)
 80065f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065fa:	4a20      	ldr	r2, [pc, #128]	@ (800667c <HAL_I2C_MspInit+0xc8>)
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	6313      	str	r3, [r2, #48]	@ 0x30
 8006602:	4b1e      	ldr	r3, [pc, #120]	@ (800667c <HAL_I2C_MspInit+0xc8>)
 8006604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800660e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006614:	2312      	movs	r3, #18
 8006616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800661c:	2303      	movs	r3, #3
 800661e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006620:	2304      	movs	r3, #4
 8006622:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006624:	f107 0314 	add.w	r3, r7, #20
 8006628:	4619      	mov	r1, r3
 800662a:	4815      	ldr	r0, [pc, #84]	@ (8006680 <HAL_I2C_MspInit+0xcc>)
 800662c:	f002 f9dc 	bl	80089e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006630:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006636:	2312      	movs	r3, #18
 8006638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800663a:	2300      	movs	r3, #0
 800663c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800663e:	2303      	movs	r3, #3
 8006640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006642:	2304      	movs	r3, #4
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006646:	f107 0314 	add.w	r3, r7, #20
 800664a:	4619      	mov	r1, r3
 800664c:	480d      	ldr	r0, [pc, #52]	@ (8006684 <HAL_I2C_MspInit+0xd0>)
 800664e:	f002 f9cb 	bl	80089e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006652:	2300      	movs	r3, #0
 8006654:	60bb      	str	r3, [r7, #8]
 8006656:	4b09      	ldr	r3, [pc, #36]	@ (800667c <HAL_I2C_MspInit+0xc8>)
 8006658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665a:	4a08      	ldr	r2, [pc, #32]	@ (800667c <HAL_I2C_MspInit+0xc8>)
 800665c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006660:	6413      	str	r3, [r2, #64]	@ 0x40
 8006662:	4b06      	ldr	r3, [pc, #24]	@ (800667c <HAL_I2C_MspInit+0xc8>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800666a:	60bb      	str	r3, [r7, #8]
 800666c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800666e:	bf00      	nop
 8006670:	3728      	adds	r7, #40	@ 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	40005c00 	.word	0x40005c00
 800667c:	40023800 	.word	0x40023800
 8006680:	40020800 	.word	0x40020800
 8006684:	40020000 	.word	0x40020000

08006688 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b08a      	sub	sp, #40	@ 0x28
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006690:	f107 0314 	add.w	r3, r7, #20
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	60da      	str	r2, [r3, #12]
 800669e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a28      	ldr	r2, [pc, #160]	@ (8006748 <HAL_SPI_MspInit+0xc0>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d149      	bne.n	800673e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	4b27      	ldr	r3, [pc, #156]	@ (800674c <HAL_SPI_MspInit+0xc4>)
 80066b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066b2:	4a26      	ldr	r2, [pc, #152]	@ (800674c <HAL_SPI_MspInit+0xc4>)
 80066b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80066ba:	4b24      	ldr	r3, [pc, #144]	@ (800674c <HAL_SPI_MspInit+0xc4>)
 80066bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066c6:	2300      	movs	r3, #0
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	4b20      	ldr	r3, [pc, #128]	@ (800674c <HAL_SPI_MspInit+0xc4>)
 80066cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ce:	4a1f      	ldr	r2, [pc, #124]	@ (800674c <HAL_SPI_MspInit+0xc4>)
 80066d0:	f043 0302 	orr.w	r3, r3, #2
 80066d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80066d6:	4b1d      	ldr	r3, [pc, #116]	@ (800674c <HAL_SPI_MspInit+0xc4>)
 80066d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	60fb      	str	r3, [r7, #12]
 80066e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066e2:	2300      	movs	r3, #0
 80066e4:	60bb      	str	r3, [r7, #8]
 80066e6:	4b19      	ldr	r3, [pc, #100]	@ (800674c <HAL_SPI_MspInit+0xc4>)
 80066e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ea:	4a18      	ldr	r2, [pc, #96]	@ (800674c <HAL_SPI_MspInit+0xc4>)
 80066ec:	f043 0301 	orr.w	r3, r3, #1
 80066f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80066f2:	4b16      	ldr	r3, [pc, #88]	@ (800674c <HAL_SPI_MspInit+0xc4>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	60bb      	str	r3, [r7, #8]
 80066fc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 80066fe:	2318      	movs	r3, #24
 8006700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006702:	2302      	movs	r3, #2
 8006704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006706:	2300      	movs	r3, #0
 8006708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800670a:	2303      	movs	r3, #3
 800670c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800670e:	2305      	movs	r3, #5
 8006710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006712:	f107 0314 	add.w	r3, r7, #20
 8006716:	4619      	mov	r1, r3
 8006718:	480d      	ldr	r0, [pc, #52]	@ (8006750 <HAL_SPI_MspInit+0xc8>)
 800671a:	f002 f965 	bl	80089e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800671e:	2380      	movs	r3, #128	@ 0x80
 8006720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006722:	2302      	movs	r3, #2
 8006724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800672a:	2303      	movs	r3, #3
 800672c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800672e:	2305      	movs	r3, #5
 8006730:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006732:	f107 0314 	add.w	r3, r7, #20
 8006736:	4619      	mov	r1, r3
 8006738:	4806      	ldr	r0, [pc, #24]	@ (8006754 <HAL_SPI_MspInit+0xcc>)
 800673a:	f002 f955 	bl	80089e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800673e:	bf00      	nop
 8006740:	3728      	adds	r7, #40	@ 0x28
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	40013000 	.word	0x40013000
 800674c:	40023800 	.word	0x40023800
 8006750:	40020400 	.word	0x40020400
 8006754:	40020000 	.word	0x40020000

08006758 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b086      	sub	sp, #24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a4e      	ldr	r2, [pc, #312]	@ (80068a0 <HAL_TIM_PWM_MspInit+0x148>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d10e      	bne.n	8006788 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800676a:	2300      	movs	r3, #0
 800676c:	617b      	str	r3, [r7, #20]
 800676e:	4b4d      	ldr	r3, [pc, #308]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x14c>)
 8006770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006772:	4a4c      	ldr	r2, [pc, #304]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x14c>)
 8006774:	f043 0301 	orr.w	r3, r3, #1
 8006778:	6453      	str	r3, [r2, #68]	@ 0x44
 800677a:	4b4a      	ldr	r3, [pc, #296]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x14c>)
 800677c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006786:	e086      	b.n	8006896 <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM5)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a46      	ldr	r2, [pc, #280]	@ (80068a8 <HAL_TIM_PWM_MspInit+0x150>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d16e      	bne.n	8006870 <HAL_TIM_PWM_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
 8006796:	4b43      	ldr	r3, [pc, #268]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x14c>)
 8006798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679a:	4a42      	ldr	r2, [pc, #264]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x14c>)
 800679c:	f043 0308 	orr.w	r3, r3, #8
 80067a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80067a2:	4b40      	ldr	r3, [pc, #256]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x14c>)
 80067a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	693b      	ldr	r3, [r7, #16]
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 80067ae:	4b3f      	ldr	r3, [pc, #252]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067b0:	4a3f      	ldr	r2, [pc, #252]	@ (80068b0 <HAL_TIM_PWM_MspInit+0x158>)
 80067b2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 80067b4:	4b3d      	ldr	r3, [pc, #244]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067b6:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80067ba:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067bc:	4b3b      	ldr	r3, [pc, #236]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067be:	2200      	movs	r2, #0
 80067c0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80067c2:	4b3a      	ldr	r3, [pc, #232]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80067c8:	4b38      	ldr	r3, [pc, #224]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80067ce:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80067d0:	4b36      	ldr	r3, [pc, #216]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067d2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80067d6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80067d8:	4b34      	ldr	r3, [pc, #208]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80067de:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_NORMAL;
 80067e0:	4b32      	ldr	r3, [pc, #200]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80067e6:	4b31      	ldr	r3, [pc, #196]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067ec:	4b2f      	ldr	r3, [pc, #188]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 80067f2:	482e      	ldr	r0, [pc, #184]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 80067f4:	f001 fcf6 	bl	80081e4 <HAL_DMA_Init>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <HAL_TIM_PWM_MspInit+0xaa>
      Error_Handler();
 80067fe:	f7fe fcdb 	bl	80051b8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a29      	ldr	r2, [pc, #164]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 8006806:	625a      	str	r2, [r3, #36]	@ 0x24
 8006808:	4a28      	ldr	r2, [pc, #160]	@ (80068ac <HAL_TIM_PWM_MspInit+0x154>)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800680e:	4b29      	ldr	r3, [pc, #164]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006810:	4a29      	ldr	r2, [pc, #164]	@ (80068b8 <HAL_TIM_PWM_MspInit+0x160>)
 8006812:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Channel = DMA_CHANNEL_6;
 8006814:	4b27      	ldr	r3, [pc, #156]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006816:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800681a:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800681c:	4b25      	ldr	r3, [pc, #148]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 800681e:	2200      	movs	r2, #0
 8006820:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006822:	4b24      	ldr	r3, [pc, #144]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006824:	2200      	movs	r2, #0
 8006826:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8006828:	4b22      	ldr	r3, [pc, #136]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 800682a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800682e:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006830:	4b20      	ldr	r3, [pc, #128]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006832:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006836:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006838:	4b1e      	ldr	r3, [pc, #120]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 800683a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800683e:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8006840:	4b1c      	ldr	r3, [pc, #112]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006842:	2200      	movs	r2, #0
 8006844:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8006846:	4b1b      	ldr	r3, [pc, #108]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006848:	2200      	movs	r2, #0
 800684a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800684c:	4b19      	ldr	r3, [pc, #100]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 800684e:	2200      	movs	r2, #0
 8006850:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 8006852:	4818      	ldr	r0, [pc, #96]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006854:	f001 fcc6 	bl	80081e4 <HAL_DMA_Init>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <HAL_TIM_PWM_MspInit+0x10a>
      Error_Handler();
 800685e:	f7fe fcab 	bl	80051b8 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a13      	ldr	r2, [pc, #76]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 8006866:	629a      	str	r2, [r3, #40]	@ 0x28
 8006868:	4a12      	ldr	r2, [pc, #72]	@ (80068b4 <HAL_TIM_PWM_MspInit+0x15c>)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800686e:	e012      	b.n	8006896 <HAL_TIM_PWM_MspInit+0x13e>
  else if(htim_pwm->Instance==TIM8)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a11      	ldr	r2, [pc, #68]	@ (80068bc <HAL_TIM_PWM_MspInit+0x164>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10d      	bne.n	8006896 <HAL_TIM_PWM_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	4b09      	ldr	r3, [pc, #36]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x14c>)
 8006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006882:	4a08      	ldr	r2, [pc, #32]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x14c>)
 8006884:	f043 0302 	orr.w	r3, r3, #2
 8006888:	6453      	str	r3, [r2, #68]	@ 0x44
 800688a:	4b06      	ldr	r3, [pc, #24]	@ (80068a4 <HAL_TIM_PWM_MspInit+0x14c>)
 800688c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800688e:	f003 0302 	and.w	r3, r3, #2
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	68fb      	ldr	r3, [r7, #12]
}
 8006896:	bf00      	nop
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40010000 	.word	0x40010000
 80068a4:	40023800 	.word	0x40023800
 80068a8:	40000c00 	.word	0x40000c00
 80068ac:	20000b8c 	.word	0x20000b8c
 80068b0:	40026040 	.word	0x40026040
 80068b4:	20000bec 	.word	0x20000bec
 80068b8:	40026070 	.word	0x40026070
 80068bc:	40010400 	.word	0x40010400

080068c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a2c      	ldr	r2, [pc, #176]	@ (8006980 <HAL_TIM_Base_MspInit+0xc0>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d13e      	bne.n	8006950 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
 80068d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006984 <HAL_TIM_Base_MspInit+0xc4>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	4a2a      	ldr	r2, [pc, #168]	@ (8006984 <HAL_TIM_Base_MspInit+0xc4>)
 80068dc:	f043 0304 	orr.w	r3, r3, #4
 80068e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80068e2:	4b28      	ldr	r3, [pc, #160]	@ (8006984 <HAL_TIM_Base_MspInit+0xc4>)
 80068e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80068ee:	4b26      	ldr	r3, [pc, #152]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 80068f0:	4a26      	ldr	r2, [pc, #152]	@ (800698c <HAL_TIM_Base_MspInit+0xcc>)
 80068f2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80068f4:	4b24      	ldr	r3, [pc, #144]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 80068f6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80068fa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068fc:	4b22      	ldr	r3, [pc, #136]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 80068fe:	2200      	movs	r2, #0
 8006900:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006902:	4b21      	ldr	r3, [pc, #132]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 8006904:	2200      	movs	r2, #0
 8006906:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8006908:	4b1f      	ldr	r3, [pc, #124]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 800690a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800690e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006910:	4b1d      	ldr	r3, [pc, #116]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 8006912:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006916:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006918:	4b1b      	ldr	r3, [pc, #108]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 800691a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800691e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8006920:	4b19      	ldr	r3, [pc, #100]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 8006922:	2200      	movs	r2, #0
 8006924:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8006926:	4b18      	ldr	r3, [pc, #96]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 8006928:	2200      	movs	r2, #0
 800692a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800692c:	4b16      	ldr	r3, [pc, #88]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 800692e:	2200      	movs	r2, #0
 8006930:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8006932:	4815      	ldr	r0, [pc, #84]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 8006934:	f001 fc56 	bl	80081e4 <HAL_DMA_Init>
 8006938:	4603      	mov	r3, r0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d001      	beq.n	8006942 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800693e:	f7fe fc3b 	bl	80051b8 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a10      	ldr	r2, [pc, #64]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 8006946:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006948:	4a0f      	ldr	r2, [pc, #60]	@ (8006988 <HAL_TIM_Base_MspInit+0xc8>)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800694e:	e012      	b.n	8006976 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0e      	ldr	r2, [pc, #56]	@ (8006990 <HAL_TIM_Base_MspInit+0xd0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d10d      	bne.n	8006976 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	60bb      	str	r3, [r7, #8]
 800695e:	4b09      	ldr	r3, [pc, #36]	@ (8006984 <HAL_TIM_Base_MspInit+0xc4>)
 8006960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006962:	4a08      	ldr	r2, [pc, #32]	@ (8006984 <HAL_TIM_Base_MspInit+0xc4>)
 8006964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006968:	6453      	str	r3, [r2, #68]	@ 0x44
 800696a:	4b06      	ldr	r3, [pc, #24]	@ (8006984 <HAL_TIM_Base_MspInit+0xc4>)
 800696c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800696e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006972:	60bb      	str	r3, [r7, #8]
 8006974:	68bb      	ldr	r3, [r7, #8]
}
 8006976:	bf00      	nop
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	40000800 	.word	0x40000800
 8006984:	40023800 	.word	0x40023800
 8006988:	20000b2c 	.word	0x20000b2c
 800698c:	400260b8 	.word	0x400260b8
 8006990:	40014400 	.word	0x40014400

08006994 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08e      	sub	sp, #56	@ 0x38
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800699c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
 80069a4:	605a      	str	r2, [r3, #4]
 80069a6:	609a      	str	r2, [r3, #8]
 80069a8:	60da      	str	r2, [r3, #12]
 80069aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a6a      	ldr	r2, [pc, #424]	@ (8006b5c <HAL_TIM_MspPostInit+0x1c8>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d11f      	bne.n	80069f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	4b69      	ldr	r3, [pc, #420]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069be:	4a68      	ldr	r2, [pc, #416]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 80069c0:	f043 0310 	orr.w	r3, r3, #16
 80069c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80069c6:	4b66      	ldr	r3, [pc, #408]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ca:	f003 0310 	and.w	r3, r3, #16
 80069ce:	623b      	str	r3, [r7, #32]
 80069d0:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80069d2:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80069d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d8:	2302      	movs	r3, #2
 80069da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069dc:	2300      	movs	r3, #0
 80069de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069e0:	2300      	movs	r3, #0
 80069e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80069e4:	2301      	movs	r3, #1
 80069e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80069ec:	4619      	mov	r1, r3
 80069ee:	485d      	ldr	r0, [pc, #372]	@ (8006b64 <HAL_TIM_MspPostInit+0x1d0>)
 80069f0:	f001 fffa 	bl	80089e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80069f4:	e0ae      	b.n	8006b54 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a5b      	ldr	r2, [pc, #364]	@ (8006b68 <HAL_TIM_MspPostInit+0x1d4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d11f      	bne.n	8006a40 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]
 8006a04:	4b56      	ldr	r3, [pc, #344]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a08:	4a55      	ldr	r2, [pc, #340]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006a0a:	f043 0308 	orr.w	r3, r3, #8
 8006a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a10:	4b53      	ldr	r3, [pc, #332]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a14:	f003 0308 	and.w	r3, r3, #8
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006a1c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006a20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a22:	2302      	movs	r3, #2
 8006a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a2e:	2302      	movs	r3, #2
 8006a30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a36:	4619      	mov	r1, r3
 8006a38:	484c      	ldr	r0, [pc, #304]	@ (8006b6c <HAL_TIM_MspPostInit+0x1d8>)
 8006a3a:	f001 ffd5 	bl	80089e8 <HAL_GPIO_Init>
}
 8006a3e:	e089      	b.n	8006b54 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a4a      	ldr	r2, [pc, #296]	@ (8006b70 <HAL_TIM_MspPostInit+0x1dc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d11f      	bne.n	8006a8a <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	4b44      	ldr	r3, [pc, #272]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a52:	4a43      	ldr	r2, [pc, #268]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006a54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a5a:	4b41      	ldr	r3, [pc, #260]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a62:	61bb      	str	r3, [r7, #24]
 8006a64:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8006a66:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8006a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a6c:	2302      	movs	r3, #2
 8006a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a74:	2300      	movs	r3, #0
 8006a76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8006a78:	2302      	movs	r3, #2
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a80:	4619      	mov	r1, r3
 8006a82:	483c      	ldr	r0, [pc, #240]	@ (8006b74 <HAL_TIM_MspPostInit+0x1e0>)
 8006a84:	f001 ffb0 	bl	80089e8 <HAL_GPIO_Init>
}
 8006a88:	e064      	b.n	8006b54 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a3a      	ldr	r2, [pc, #232]	@ (8006b78 <HAL_TIM_MspPostInit+0x1e4>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d13c      	bne.n	8006b0e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8006a94:	2300      	movs	r3, #0
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	4b31      	ldr	r3, [pc, #196]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9c:	4a30      	ldr	r2, [pc, #192]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8006aa4:	4b2e      	ldr	r3, [pc, #184]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aac:	617b      	str	r3, [r7, #20]
 8006aae:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
 8006ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab8:	4a29      	ldr	r2, [pc, #164]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006aba:	f043 0304 	orr.w	r3, r3, #4
 8006abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ac0:	4b27      	ldr	r3, [pc, #156]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac4:	f003 0304 	and.w	r3, r3, #4
 8006ac8:	613b      	str	r3, [r7, #16]
 8006aca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8006acc:	23c0      	movs	r3, #192	@ 0xc0
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006adc:	2303      	movs	r3, #3
 8006ade:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4825      	ldr	r0, [pc, #148]	@ (8006b7c <HAL_TIM_MspPostInit+0x1e8>)
 8006ae8:	f001 ff7e 	bl	80089e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006aec:	2340      	movs	r3, #64	@ 0x40
 8006aee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006af0:	2302      	movs	r3, #2
 8006af2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af4:	2300      	movs	r3, #0
 8006af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006af8:	2300      	movs	r3, #0
 8006afa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8006afc:	2303      	movs	r3, #3
 8006afe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b04:	4619      	mov	r1, r3
 8006b06:	481e      	ldr	r0, [pc, #120]	@ (8006b80 <HAL_TIM_MspPostInit+0x1ec>)
 8006b08:	f001 ff6e 	bl	80089e8 <HAL_GPIO_Init>
}
 8006b0c:	e022      	b.n	8006b54 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a1c      	ldr	r2, [pc, #112]	@ (8006b84 <HAL_TIM_MspPostInit+0x1f0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d11d      	bne.n	8006b54 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b20:	4a0f      	ldr	r2, [pc, #60]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006b22:	f043 0320 	orr.w	r3, r3, #32
 8006b26:	6313      	str	r3, [r2, #48]	@ 0x30
 8006b28:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <HAL_TIM_MspPostInit+0x1cc>)
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2c:	f003 0320 	and.w	r3, r3, #32
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b34:	2340      	movs	r3, #64	@ 0x40
 8006b36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006b40:	2302      	movs	r3, #2
 8006b42:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006b44:	2303      	movs	r3, #3
 8006b46:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006b48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	480e      	ldr	r0, [pc, #56]	@ (8006b88 <HAL_TIM_MspPostInit+0x1f4>)
 8006b50:	f001 ff4a 	bl	80089e8 <HAL_GPIO_Init>
}
 8006b54:	bf00      	nop
 8006b56:	3738      	adds	r7, #56	@ 0x38
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40010000 	.word	0x40010000
 8006b60:	40023800 	.word	0x40023800
 8006b64:	40021000 	.word	0x40021000
 8006b68:	40000800 	.word	0x40000800
 8006b6c:	40020c00 	.word	0x40020c00
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40021c00 	.word	0x40021c00
 8006b78:	40010400 	.word	0x40010400
 8006b7c:	40022000 	.word	0x40022000
 8006b80:	40020800 	.word	0x40020800
 8006b84:	40014400 	.word	0x40014400
 8006b88:	40021400 	.word	0x40021400

08006b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08e      	sub	sp, #56	@ 0x38
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	609a      	str	r2, [r3, #8]
 8006ba0:	60da      	str	r2, [r3, #12]
 8006ba2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a90      	ldr	r2, [pc, #576]	@ (8006dec <HAL_UART_MspInit+0x260>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	f040 80b2 	bne.w	8006d14 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	623b      	str	r3, [r7, #32]
 8006bb4:	4b8e      	ldr	r3, [pc, #568]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bb8:	4a8d      	ldr	r2, [pc, #564]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006bba:	f043 0310 	orr.w	r3, r3, #16
 8006bbe:	6453      	str	r3, [r2, #68]	@ 0x44
 8006bc0:	4b8b      	ldr	r3, [pc, #556]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bc4:	f003 0310 	and.w	r3, r3, #16
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bcc:	2300      	movs	r3, #0
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	4b87      	ldr	r3, [pc, #540]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd4:	4a86      	ldr	r2, [pc, #536]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006bd6:	f043 0302 	orr.w	r3, r3, #2
 8006bda:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bdc:	4b84      	ldr	r3, [pc, #528]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be0:	f003 0302 	and.w	r3, r3, #2
 8006be4:	61fb      	str	r3, [r7, #28]
 8006be6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006be8:	2300      	movs	r3, #0
 8006bea:	61bb      	str	r3, [r7, #24]
 8006bec:	4b80      	ldr	r3, [pc, #512]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bf0:	4a7f      	ldr	r2, [pc, #508]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8006bf8:	4b7d      	ldr	r3, [pc, #500]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bfc:	f003 0301 	and.w	r3, r3, #1
 8006c00:	61bb      	str	r3, [r7, #24]
 8006c02:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006c04:	2380      	movs	r3, #128	@ 0x80
 8006c06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c10:	2303      	movs	r3, #3
 8006c12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c14:	2307      	movs	r3, #7
 8006c16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c1c:	4619      	mov	r1, r3
 8006c1e:	4875      	ldr	r0, [pc, #468]	@ (8006df4 <HAL_UART_MspInit+0x268>)
 8006c20:	f001 fee2 	bl	80089e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c2a:	2302      	movs	r3, #2
 8006c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c32:	2303      	movs	r3, #3
 8006c34:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006c36:	2307      	movs	r3, #7
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006c3e:	4619      	mov	r1, r3
 8006c40:	486d      	ldr	r0, [pc, #436]	@ (8006df8 <HAL_UART_MspInit+0x26c>)
 8006c42:	f001 fed1 	bl	80089e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8006c46:	4b6d      	ldr	r3, [pc, #436]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c48:	4a6d      	ldr	r2, [pc, #436]	@ (8006e00 <HAL_UART_MspInit+0x274>)
 8006c4a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8006c4c:	4b6b      	ldr	r3, [pc, #428]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c4e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006c52:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c54:	4b69      	ldr	r3, [pc, #420]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c56:	2240      	movs	r2, #64	@ 0x40
 8006c58:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c5a:	4b68      	ldr	r3, [pc, #416]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c60:	4b66      	ldr	r3, [pc, #408]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006c66:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c68:	4b64      	ldr	r3, [pc, #400]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c6e:	4b63      	ldr	r3, [pc, #396]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006c74:	4b61      	ldr	r3, [pc, #388]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006c7a:	4b60      	ldr	r3, [pc, #384]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c7c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006c80:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006c82:	4b5e      	ldr	r3, [pc, #376]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c84:	2200      	movs	r2, #0
 8006c86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006c88:	485c      	ldr	r0, [pc, #368]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c8a:	f001 faab 	bl	80081e4 <HAL_DMA_Init>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8006c94:	f7fe fa90 	bl	80051b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a58      	ldr	r2, [pc, #352]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006c9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c9e:	4a57      	ldr	r2, [pc, #348]	@ (8006dfc <HAL_UART_MspInit+0x270>)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8006ca4:	4b57      	ldr	r3, [pc, #348]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006ca6:	4a58      	ldr	r2, [pc, #352]	@ (8006e08 <HAL_UART_MspInit+0x27c>)
 8006ca8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8006caa:	4b56      	ldr	r3, [pc, #344]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006cb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cb2:	4b54      	ldr	r3, [pc, #336]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006cb8:	4b52      	ldr	r3, [pc, #328]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cba:	2200      	movs	r2, #0
 8006cbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006cbe:	4b51      	ldr	r3, [pc, #324]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cc4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006cc6:	4b4f      	ldr	r3, [pc, #316]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006ccc:	4b4d      	ldr	r3, [pc, #308]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006cd2:	4b4c      	ldr	r3, [pc, #304]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cda:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006cde:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ce0:	4b48      	ldr	r3, [pc, #288]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006ce6:	4847      	ldr	r0, [pc, #284]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006ce8:	f001 fa7c 	bl	80081e4 <HAL_DMA_Init>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8006cf2:	f7fe fa61 	bl	80051b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a42      	ldr	r2, [pc, #264]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cfa:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006cfc:	4a41      	ldr	r2, [pc, #260]	@ (8006e04 <HAL_UART_MspInit+0x278>)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006d02:	2200      	movs	r2, #0
 8006d04:	2105      	movs	r1, #5
 8006d06:	2025      	movs	r0, #37	@ 0x25
 8006d08:	f001 fa35 	bl	8008176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006d0c:	2025      	movs	r0, #37	@ 0x25
 8006d0e:	f001 fa4e 	bl	80081ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006d12:	e11c      	b.n	8006f4e <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a3c      	ldr	r2, [pc, #240]	@ (8006e0c <HAL_UART_MspInit+0x280>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d17e      	bne.n	8006e1c <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
 8006d22:	4b33      	ldr	r3, [pc, #204]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d26:	4a32      	ldr	r2, [pc, #200]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006d28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d2e:	4b30      	ldr	r3, [pc, #192]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	613b      	str	r3, [r7, #16]
 8006d3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d42:	4a2b      	ldr	r2, [pc, #172]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006d44:	f043 0304 	orr.w	r3, r3, #4
 8006d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8006d4a:	4b29      	ldr	r3, [pc, #164]	@ (8006df0 <HAL_UART_MspInit+0x264>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d4e:	f003 0304 	and.w	r3, r3, #4
 8006d52:	613b      	str	r3, [r7, #16]
 8006d54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8006d56:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006d5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d60:	2300      	movs	r3, #0
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d64:	2303      	movs	r3, #3
 8006d66:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006d68:	2307      	movs	r3, #7
 8006d6a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006d70:	4619      	mov	r1, r3
 8006d72:	4827      	ldr	r0, [pc, #156]	@ (8006e10 <HAL_UART_MspInit+0x284>)
 8006d74:	f001 fe38 	bl	80089e8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8006d78:	4b26      	ldr	r3, [pc, #152]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006d7a:	4a27      	ldr	r2, [pc, #156]	@ (8006e18 <HAL_UART_MspInit+0x28c>)
 8006d7c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8006d7e:	4b25      	ldr	r3, [pc, #148]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006d80:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8006d84:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d86:	4b23      	ldr	r3, [pc, #140]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d8c:	4b21      	ldr	r3, [pc, #132]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d92:	4b20      	ldr	r3, [pc, #128]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006d94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006d98:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006da0:	4b1c      	ldr	r3, [pc, #112]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006da6:	4b1b      	ldr	r3, [pc, #108]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006da8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006dac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006dae:	4b19      	ldr	r3, [pc, #100]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006db0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006db4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006db6:	4b17      	ldr	r3, [pc, #92]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006dbc:	4815      	ldr	r0, [pc, #84]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006dbe:	f001 fa11 	bl	80081e4 <HAL_DMA_Init>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <HAL_UART_MspInit+0x240>
      Error_Handler();
 8006dc8:	f7fe f9f6 	bl	80051b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a11      	ldr	r2, [pc, #68]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006dd2:	4a10      	ldr	r2, [pc, #64]	@ (8006e14 <HAL_UART_MspInit+0x288>)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2105      	movs	r1, #5
 8006ddc:	2027      	movs	r0, #39	@ 0x27
 8006dde:	f001 f9ca 	bl	8008176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006de2:	2027      	movs	r0, #39	@ 0x27
 8006de4:	f001 f9e3 	bl	80081ae <HAL_NVIC_EnableIRQ>
}
 8006de8:	e0b1      	b.n	8006f4e <HAL_UART_MspInit+0x3c2>
 8006dea:	bf00      	nop
 8006dec:	40011000 	.word	0x40011000
 8006df0:	40023800 	.word	0x40023800
 8006df4:	40020400 	.word	0x40020400
 8006df8:	40020000 	.word	0x40020000
 8006dfc:	20000d24 	.word	0x20000d24
 8006e00:	400264b8 	.word	0x400264b8
 8006e04:	20000d84 	.word	0x20000d84
 8006e08:	40026440 	.word	0x40026440
 8006e0c:	40004800 	.word	0x40004800
 8006e10:	40020800 	.word	0x40020800
 8006e14:	20000de4 	.word	0x20000de4
 8006e18:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a4d      	ldr	r2, [pc, #308]	@ (8006f58 <HAL_UART_MspInit+0x3cc>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	f040 8093 	bne.w	8006f4e <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	4b4b      	ldr	r3, [pc, #300]	@ (8006f5c <HAL_UART_MspInit+0x3d0>)
 8006e2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e30:	4a4a      	ldr	r2, [pc, #296]	@ (8006f5c <HAL_UART_MspInit+0x3d0>)
 8006e32:	f043 0320 	orr.w	r3, r3, #32
 8006e36:	6453      	str	r3, [r2, #68]	@ 0x44
 8006e38:	4b48      	ldr	r3, [pc, #288]	@ (8006f5c <HAL_UART_MspInit+0x3d0>)
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3c:	f003 0320 	and.w	r3, r3, #32
 8006e40:	60fb      	str	r3, [r7, #12]
 8006e42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006e44:	2300      	movs	r3, #0
 8006e46:	60bb      	str	r3, [r7, #8]
 8006e48:	4b44      	ldr	r3, [pc, #272]	@ (8006f5c <HAL_UART_MspInit+0x3d0>)
 8006e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e4c:	4a43      	ldr	r2, [pc, #268]	@ (8006f5c <HAL_UART_MspInit+0x3d0>)
 8006e4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e52:	6313      	str	r3, [r2, #48]	@ 0x30
 8006e54:	4b41      	ldr	r3, [pc, #260]	@ (8006f5c <HAL_UART_MspInit+0x3d0>)
 8006e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e5c:	60bb      	str	r3, [r7, #8]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8006e60:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8006e64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e66:	2302      	movs	r3, #2
 8006e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e6e:	2303      	movs	r3, #3
 8006e70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8006e72:	2308      	movs	r3, #8
 8006e74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006e76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	4838      	ldr	r0, [pc, #224]	@ (8006f60 <HAL_UART_MspInit+0x3d4>)
 8006e7e:	f001 fdb3 	bl	80089e8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8006e82:	4b38      	ldr	r3, [pc, #224]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006e84:	4a38      	ldr	r2, [pc, #224]	@ (8006f68 <HAL_UART_MspInit+0x3dc>)
 8006e86:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006e88:	4b36      	ldr	r3, [pc, #216]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006e8a:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006e8e:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e90:	4b34      	ldr	r3, [pc, #208]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006e92:	2200      	movs	r2, #0
 8006e94:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e96:	4b33      	ldr	r3, [pc, #204]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006e9c:	4b31      	ldr	r3, [pc, #196]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006e9e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006ea2:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006ea4:	4b2f      	ldr	r3, [pc, #188]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006eaa:	4b2e      	ldr	r3, [pc, #184]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8006eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006eb8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006ebc:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006ebe:	4b29      	ldr	r3, [pc, #164]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006ec4:	4827      	ldr	r0, [pc, #156]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006ec6:	f001 f98d 	bl	80081e4 <HAL_DMA_Init>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8006ed0:	f7fe f972 	bl	80051b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	4a23      	ldr	r2, [pc, #140]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006ed8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006eda:	4a22      	ldr	r2, [pc, #136]	@ (8006f64 <HAL_UART_MspInit+0x3d8>)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006ee0:	4b22      	ldr	r3, [pc, #136]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006ee2:	4a23      	ldr	r2, [pc, #140]	@ (8006f70 <HAL_UART_MspInit+0x3e4>)
 8006ee4:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006ee6:	4b21      	ldr	r3, [pc, #132]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006ee8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8006eec:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006eee:	4b1f      	ldr	r3, [pc, #124]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006ef0:	2240      	movs	r2, #64	@ 0x40
 8006ef2:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ef4:	4b1d      	ldr	r3, [pc, #116]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006efa:	4b1c      	ldr	r3, [pc, #112]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006efc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006f00:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006f02:	4b1a      	ldr	r3, [pc, #104]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006f08:	4b18      	ldr	r3, [pc, #96]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8006f0e:	4b17      	ldr	r3, [pc, #92]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006f10:	2200      	movs	r2, #0
 8006f12:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006f14:	4b15      	ldr	r3, [pc, #84]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006f16:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8006f1a:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f1c:	4b13      	ldr	r3, [pc, #76]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006f22:	4812      	ldr	r0, [pc, #72]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006f24:	f001 f95e 	bl	80081e4 <HAL_DMA_Init>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d001      	beq.n	8006f32 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8006f2e:	f7fe f943 	bl	80051b8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	4a0d      	ldr	r2, [pc, #52]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006f36:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f38:	4a0c      	ldr	r2, [pc, #48]	@ (8006f6c <HAL_UART_MspInit+0x3e0>)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2105      	movs	r1, #5
 8006f42:	2047      	movs	r0, #71	@ 0x47
 8006f44:	f001 f917 	bl	8008176 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006f48:	2047      	movs	r0, #71	@ 0x47
 8006f4a:	f001 f930 	bl	80081ae <HAL_NVIC_EnableIRQ>
}
 8006f4e:	bf00      	nop
 8006f50:	3738      	adds	r7, #56	@ 0x38
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	40011400 	.word	0x40011400
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	40021800 	.word	0x40021800
 8006f64:	20000e44 	.word	0x20000e44
 8006f68:	40026428 	.word	0x40026428
 8006f6c:	20000ea4 	.word	0x20000ea4
 8006f70:	400264a0 	.word	0x400264a0

08006f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8006f78:	f003 fb8c 	bl	800a694 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006f7c:	bf00      	nop
 8006f7e:	e7fd      	b.n	8006f7c <NMI_Handler+0x8>

08006f80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006f80:	b480      	push	{r7}
 8006f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006f84:	bf00      	nop
 8006f86:	e7fd      	b.n	8006f84 <HardFault_Handler+0x4>

08006f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006f8c:	bf00      	nop
 8006f8e:	e7fd      	b.n	8006f8c <MemManage_Handler+0x4>

08006f90 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006f94:	bf00      	nop
 8006f96:	e7fd      	b.n	8006f94 <BusFault_Handler+0x4>

08006f98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006f9c:	bf00      	nop
 8006f9e:	e7fd      	b.n	8006f9c <UsageFault_Handler+0x4>

08006fa0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006fa4:	bf00      	nop
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006fb2:	f000 f959 	bl	8007268 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006fb6:	f007 fec1 	bl	800ed3c <xTaskGetSchedulerState>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d001      	beq.n	8006fc4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006fc0:	f008 fd9a 	bl	800faf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006fc4:	bf00      	nop
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8006fcc:	2008      	movs	r0, #8
 8006fce:	f001 fec1 	bl	8008d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8006fd2:	4802      	ldr	r0, [pc, #8]	@ (8006fdc <EXTI3_IRQHandler+0x14>)
 8006fd4:	f7fc faf0 	bl	80035b8 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 8006fd8:	bf00      	nop
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	200008bc 	.word	0x200008bc

08006fe0 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8006fe4:	2010      	movs	r0, #16
 8006fe6:	f001 feb5 	bl	8008d54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006fea:	bf00      	nop
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8006ff4:	4802      	ldr	r0, [pc, #8]	@ (8007000 <DMA1_Stream1_IRQHandler+0x10>)
 8006ff6:	f001 fa8d 	bl	8008514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8006ffa:	bf00      	nop
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20000de4 	.word	0x20000de4

08007004 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8007008:	4802      	ldr	r0, [pc, #8]	@ (8007014 <DMA1_Stream2_IRQHandler+0x10>)
 800700a:	f001 fa83 	bl	8008514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800700e:	bf00      	nop
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000b8c 	.word	0x20000b8c

08007018 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 800701c:	4802      	ldr	r0, [pc, #8]	@ (8007028 <DMA1_Stream4_IRQHandler+0x10>)
 800701e:	f001 fa79 	bl	8008514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007022:	bf00      	nop
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20000bec 	.word	0x20000bec

0800702c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007030:	4802      	ldr	r0, [pc, #8]	@ (800703c <CAN1_RX0_IRQHandler+0x10>)
 8007032:	f000 fd95 	bl	8007b60 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007036:	bf00      	nop
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	200008c8 	.word	0x200008c8

08007040 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007044:	4802      	ldr	r0, [pc, #8]	@ (8007050 <USART1_IRQHandler+0x10>)
 8007046:	f004 ff27 	bl	800be98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800704a:	bf00      	nop
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20000c4c 	.word	0x20000c4c

08007054 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8007058:	4802      	ldr	r0, [pc, #8]	@ (8007064 <DMA1_Stream7_IRQHandler+0x10>)
 800705a:	f001 fa5b 	bl	8008514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800705e:	bf00      	nop
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20000b2c 	.word	0x20000b2c

08007068 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 800706c:	4802      	ldr	r0, [pc, #8]	@ (8007078 <DMA2_Stream1_IRQHandler+0x10>)
 800706e:	f001 fa51 	bl	8008514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8007072:	bf00      	nop
 8007074:	bd80      	pop	{r7, pc}
 8007076:	bf00      	nop
 8007078:	20000e44 	.word	0x20000e44

0800707c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007080:	4802      	ldr	r0, [pc, #8]	@ (800708c <DMA2_Stream2_IRQHandler+0x10>)
 8007082:	f001 fa47 	bl	8008514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007086:	bf00      	nop
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000d84 	.word	0x20000d84

08007090 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007094:	4802      	ldr	r0, [pc, #8]	@ (80070a0 <CAN2_RX0_IRQHandler+0x10>)
 8007096:	f000 fd63 	bl	8007b60 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800709a:	bf00      	nop
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	200008f0 	.word	0x200008f0

080070a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80070a8:	4802      	ldr	r0, [pc, #8]	@ (80070b4 <DMA2_Stream6_IRQHandler+0x10>)
 80070aa:	f001 fa33 	bl	8008514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80070ae:	bf00      	nop
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20000ea4 	.word	0x20000ea4

080070b8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80070bc:	4802      	ldr	r0, [pc, #8]	@ (80070c8 <DMA2_Stream7_IRQHandler+0x10>)
 80070be:	f001 fa29 	bl	8008514 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80070c2:	bf00      	nop
 80070c4:	bd80      	pop	{r7, pc}
 80070c6:	bf00      	nop
 80070c8:	20000d24 	.word	0x20000d24

080070cc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80070d0:	4802      	ldr	r0, [pc, #8]	@ (80070dc <USART6_IRQHandler+0x10>)
 80070d2:	f004 fee1 	bl	800be98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80070d6:	bf00      	nop
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000cdc 	.word	0x20000cdc

080070e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b086      	sub	sp, #24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80070e8:	4a14      	ldr	r2, [pc, #80]	@ (800713c <_sbrk+0x5c>)
 80070ea:	4b15      	ldr	r3, [pc, #84]	@ (8007140 <_sbrk+0x60>)
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80070f4:	4b13      	ldr	r3, [pc, #76]	@ (8007144 <_sbrk+0x64>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d102      	bne.n	8007102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80070fc:	4b11      	ldr	r3, [pc, #68]	@ (8007144 <_sbrk+0x64>)
 80070fe:	4a12      	ldr	r2, [pc, #72]	@ (8007148 <_sbrk+0x68>)
 8007100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007102:	4b10      	ldr	r3, [pc, #64]	@ (8007144 <_sbrk+0x64>)
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4413      	add	r3, r2
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	429a      	cmp	r2, r3
 800710e:	d207      	bcs.n	8007120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007110:	f008 fff0 	bl	80100f4 <__errno>
 8007114:	4603      	mov	r3, r0
 8007116:	220c      	movs	r2, #12
 8007118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800711a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800711e:	e009      	b.n	8007134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007120:	4b08      	ldr	r3, [pc, #32]	@ (8007144 <_sbrk+0x64>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007126:	4b07      	ldr	r3, [pc, #28]	@ (8007144 <_sbrk+0x64>)
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4413      	add	r3, r2
 800712e:	4a05      	ldr	r2, [pc, #20]	@ (8007144 <_sbrk+0x64>)
 8007130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007132:	68fb      	ldr	r3, [r7, #12]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3718      	adds	r7, #24
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20020000 	.word	0x20020000
 8007140:	00000400 	.word	0x00000400
 8007144:	20001004 	.word	0x20001004
 8007148:	20005b40 	.word	0x20005b40

0800714c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800714c:	b480      	push	{r7}
 800714e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007150:	4b06      	ldr	r3, [pc, #24]	@ (800716c <SystemInit+0x20>)
 8007152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007156:	4a05      	ldr	r2, [pc, #20]	@ (800716c <SystemInit+0x20>)
 8007158:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800715c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007160:	bf00      	nop
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	e000ed00 	.word	0xe000ed00

08007170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007170:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80071a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007174:	f7ff ffea 	bl	800714c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007178:	480c      	ldr	r0, [pc, #48]	@ (80071ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800717a:	490d      	ldr	r1, [pc, #52]	@ (80071b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800717c:	4a0d      	ldr	r2, [pc, #52]	@ (80071b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800717e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007180:	e002      	b.n	8007188 <LoopCopyDataInit>

08007182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007186:	3304      	adds	r3, #4

08007188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800718a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800718c:	d3f9      	bcc.n	8007182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800718e:	4a0a      	ldr	r2, [pc, #40]	@ (80071b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007190:	4c0a      	ldr	r4, [pc, #40]	@ (80071bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8007192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007194:	e001      	b.n	800719a <LoopFillZerobss>

08007196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007198:	3204      	adds	r2, #4

0800719a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800719a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800719c:	d3fb      	bcc.n	8007196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800719e:	f008 ffaf 	bl	8010100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80071a2:	f7fc fb29 	bl	80037f8 <main>
  bx  lr    
 80071a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80071a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80071ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80071b0:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 80071b4:	08011fb8 	.word	0x08011fb8
  ldr r2, =_sbss
 80071b8:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 80071bc:	20005b3c 	.word	0x20005b3c

080071c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80071c0:	e7fe      	b.n	80071c0 <ADC_IRQHandler>
	...

080071c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80071c8:	4b0e      	ldr	r3, [pc, #56]	@ (8007204 <HAL_Init+0x40>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a0d      	ldr	r2, [pc, #52]	@ (8007204 <HAL_Init+0x40>)
 80071ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80071d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80071d4:	4b0b      	ldr	r3, [pc, #44]	@ (8007204 <HAL_Init+0x40>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a0a      	ldr	r2, [pc, #40]	@ (8007204 <HAL_Init+0x40>)
 80071da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80071de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80071e0:	4b08      	ldr	r3, [pc, #32]	@ (8007204 <HAL_Init+0x40>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a07      	ldr	r2, [pc, #28]	@ (8007204 <HAL_Init+0x40>)
 80071e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80071ec:	2003      	movs	r0, #3
 80071ee:	f000 ffb7 	bl	8008160 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80071f2:	200f      	movs	r0, #15
 80071f4:	f000 f808 	bl	8007208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80071f8:	f7ff f900 	bl	80063fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	bd80      	pop	{r7, pc}
 8007202:	bf00      	nop
 8007204:	40023c00 	.word	0x40023c00

08007208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007210:	4b12      	ldr	r3, [pc, #72]	@ (800725c <HAL_InitTick+0x54>)
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	4b12      	ldr	r3, [pc, #72]	@ (8007260 <HAL_InitTick+0x58>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	4619      	mov	r1, r3
 800721a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800721e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007222:	fbb2 f3f3 	udiv	r3, r2, r3
 8007226:	4618      	mov	r0, r3
 8007228:	f000 ffcf 	bl	80081ca <HAL_SYSTICK_Config>
 800722c:	4603      	mov	r3, r0
 800722e:	2b00      	cmp	r3, #0
 8007230:	d001      	beq.n	8007236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e00e      	b.n	8007254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b0f      	cmp	r3, #15
 800723a:	d80a      	bhi.n	8007252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800723c:	2200      	movs	r2, #0
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007244:	f000 ff97 	bl	8008176 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007248:	4a06      	ldr	r2, [pc, #24]	@ (8007264 <HAL_InitTick+0x5c>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	e000      	b.n	8007254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
}
 8007254:	4618      	mov	r0, r3
 8007256:	3708      	adds	r7, #8
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	200001f0 	.word	0x200001f0
 8007260:	200001f8 	.word	0x200001f8
 8007264:	200001f4 	.word	0x200001f4

08007268 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800726c:	4b06      	ldr	r3, [pc, #24]	@ (8007288 <HAL_IncTick+0x20>)
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	461a      	mov	r2, r3
 8007272:	4b06      	ldr	r3, [pc, #24]	@ (800728c <HAL_IncTick+0x24>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4413      	add	r3, r2
 8007278:	4a04      	ldr	r2, [pc, #16]	@ (800728c <HAL_IncTick+0x24>)
 800727a:	6013      	str	r3, [r2, #0]
}
 800727c:	bf00      	nop
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	200001f8 	.word	0x200001f8
 800728c:	20001008 	.word	0x20001008

08007290 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  return uwTick;
 8007294:	4b03      	ldr	r3, [pc, #12]	@ (80072a4 <HAL_GetTick+0x14>)
 8007296:	681b      	ldr	r3, [r3, #0]
}
 8007298:	4618      	mov	r0, r3
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20001008 	.word	0x20001008

080072a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80072b0:	f7ff ffee 	bl	8007290 <HAL_GetTick>
 80072b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072c0:	d005      	beq.n	80072ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80072c2:	4b0a      	ldr	r3, [pc, #40]	@ (80072ec <HAL_Delay+0x44>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80072ce:	bf00      	nop
 80072d0:	f7ff ffde 	bl	8007290 <HAL_GetTick>
 80072d4:	4602      	mov	r2, r0
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	1ad3      	subs	r3, r2, r3
 80072da:	68fa      	ldr	r2, [r7, #12]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d8f7      	bhi.n	80072d0 <HAL_Delay+0x28>
  {
  }
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	200001f8 	.word	0x200001f8

080072f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e0ed      	b.n	80074de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d102      	bne.n	8007314 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7ff f8a0 	bl	8006454 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007324:	f7ff ffb4 	bl	8007290 <HAL_GetTick>
 8007328:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800732a:	e012      	b.n	8007352 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800732c:	f7ff ffb0 	bl	8007290 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	2b0a      	cmp	r3, #10
 8007338:	d90b      	bls.n	8007352 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800733e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2205      	movs	r2, #5
 800734a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800734e:	2301      	movs	r3, #1
 8007350:	e0c5      	b.n	80074de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d0e5      	beq.n	800732c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f022 0202 	bic.w	r2, r2, #2
 800736e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007370:	f7ff ff8e 	bl	8007290 <HAL_GetTick>
 8007374:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007376:	e012      	b.n	800739e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007378:	f7ff ff8a 	bl	8007290 <HAL_GetTick>
 800737c:	4602      	mov	r2, r0
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	1ad3      	subs	r3, r2, r3
 8007382:	2b0a      	cmp	r3, #10
 8007384:	d90b      	bls.n	800739e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2205      	movs	r2, #5
 8007396:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e09f      	b.n	80074de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e5      	bne.n	8007378 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	7e1b      	ldrb	r3, [r3, #24]
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	d108      	bne.n	80073c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	e007      	b.n	80073d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80073d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	7e5b      	ldrb	r3, [r3, #25]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d108      	bne.n	80073f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681a      	ldr	r2, [r3, #0]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	e007      	b.n	8007400 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80073fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	7e9b      	ldrb	r3, [r3, #26]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d108      	bne.n	800741a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0220 	orr.w	r2, r2, #32
 8007416:	601a      	str	r2, [r3, #0]
 8007418:	e007      	b.n	800742a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f022 0220 	bic.w	r2, r2, #32
 8007428:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	7edb      	ldrb	r3, [r3, #27]
 800742e:	2b01      	cmp	r3, #1
 8007430:	d108      	bne.n	8007444 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0210 	bic.w	r2, r2, #16
 8007440:	601a      	str	r2, [r3, #0]
 8007442:	e007      	b.n	8007454 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f042 0210 	orr.w	r2, r2, #16
 8007452:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	7f1b      	ldrb	r3, [r3, #28]
 8007458:	2b01      	cmp	r3, #1
 800745a:	d108      	bne.n	800746e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f042 0208 	orr.w	r2, r2, #8
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	e007      	b.n	800747e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0208 	bic.w	r2, r2, #8
 800747c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7f5b      	ldrb	r3, [r3, #29]
 8007482:	2b01      	cmp	r3, #1
 8007484:	d108      	bne.n	8007498 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f042 0204 	orr.w	r2, r2, #4
 8007494:	601a      	str	r2, [r3, #0]
 8007496:	e007      	b.n	80074a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f022 0204 	bic.w	r2, r2, #4
 80074a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	431a      	orrs	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	ea42 0103 	orr.w	r1, r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	1e5a      	subs	r2, r3, #1
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	430a      	orrs	r2, r1
 80074cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074fe:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007500:	7cfb      	ldrb	r3, [r7, #19]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d003      	beq.n	800750e <HAL_CAN_ConfigFilter+0x26>
 8007506:	7cfb      	ldrb	r3, [r7, #19]
 8007508:	2b02      	cmp	r3, #2
 800750a:	f040 80be 	bne.w	800768a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800750e:	4b65      	ldr	r3, [pc, #404]	@ (80076a4 <HAL_CAN_ConfigFilter+0x1bc>)
 8007510:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007518:	f043 0201 	orr.w	r2, r3, #1
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007528:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	431a      	orrs	r2, r3
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	695b      	ldr	r3, [r3, #20]
 800754a:	f003 031f 	and.w	r3, r3, #31
 800754e:	2201      	movs	r2, #1
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	43db      	mvns	r3, r3
 8007560:	401a      	ands	r2, r3
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d123      	bne.n	80075b8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	43db      	mvns	r3, r3
 800757a:	401a      	ands	r2, r3
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007592:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	3248      	adds	r2, #72	@ 0x48
 8007598:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80075ac:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80075ae:	6979      	ldr	r1, [r7, #20]
 80075b0:	3348      	adds	r3, #72	@ 0x48
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	440b      	add	r3, r1
 80075b6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d122      	bne.n	8007606 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	431a      	orrs	r2, r3
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80075e0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	3248      	adds	r2, #72	@ 0x48
 80075e6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	68db      	ldr	r3, [r3, #12]
 80075f4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80075fa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80075fc:	6979      	ldr	r1, [r7, #20]
 80075fe:	3348      	adds	r3, #72	@ 0x48
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	440b      	add	r3, r1
 8007604:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d109      	bne.n	8007622 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	43db      	mvns	r3, r3
 8007618:	401a      	ands	r2, r3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8007620:	e007      	b.n	8007632 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	431a      	orrs	r2, r3
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d109      	bne.n	800764e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	43db      	mvns	r3, r3
 8007644:	401a      	ands	r2, r3
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800764c:	e007      	b.n	800765e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	431a      	orrs	r2, r3
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d107      	bne.n	8007676 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	431a      	orrs	r2, r3
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800767c:	f023 0201 	bic.w	r2, r3, #1
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	e006      	b.n	8007698 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800768e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
  }
}
 8007698:	4618      	mov	r0, r3
 800769a:	371c      	adds	r7, #28
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr
 80076a4:	40006400 	.word	0x40006400

080076a8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d12e      	bne.n	800771a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2202      	movs	r2, #2
 80076c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0201 	bic.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80076d4:	f7ff fddc 	bl	8007290 <HAL_GetTick>
 80076d8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80076da:	e012      	b.n	8007702 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80076dc:	f7ff fdd8 	bl	8007290 <HAL_GetTick>
 80076e0:	4602      	mov	r2, r0
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	1ad3      	subs	r3, r2, r3
 80076e6:	2b0a      	cmp	r3, #10
 80076e8:	d90b      	bls.n	8007702 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2205      	movs	r2, #5
 80076fa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80076fe:	2301      	movs	r3, #1
 8007700:	e012      	b.n	8007728 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f003 0301 	and.w	r3, r3, #1
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e5      	bne.n	80076dc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	e006      	b.n	8007728 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800771e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
  }
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8007730:	b480      	push	{r7}
 8007732:	b089      	sub	sp, #36	@ 0x24
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	607a      	str	r2, [r7, #4]
 800773c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007744:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800774e:	7ffb      	ldrb	r3, [r7, #31]
 8007750:	2b01      	cmp	r3, #1
 8007752:	d003      	beq.n	800775c <HAL_CAN_AddTxMessage+0x2c>
 8007754:	7ffb      	ldrb	r3, [r7, #31]
 8007756:	2b02      	cmp	r3, #2
 8007758:	f040 80ad 	bne.w	80078b6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10a      	bne.n	800777c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800776c:	2b00      	cmp	r3, #0
 800776e:	d105      	bne.n	800777c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 8095 	beq.w	80078a6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	0e1b      	lsrs	r3, r3, #24
 8007780:	f003 0303 	and.w	r3, r3, #3
 8007784:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007786:	2201      	movs	r2, #1
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	409a      	lsls	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10d      	bne.n	80077b4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80077a2:	68f9      	ldr	r1, [r7, #12]
 80077a4:	6809      	ldr	r1, [r1, #0]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	3318      	adds	r3, #24
 80077ac:	011b      	lsls	r3, r3, #4
 80077ae:	440b      	add	r3, r1
 80077b0:	601a      	str	r2, [r3, #0]
 80077b2:	e00f      	b.n	80077d4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80077be:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80077c4:	68f9      	ldr	r1, [r7, #12]
 80077c6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80077c8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	3318      	adds	r3, #24
 80077ce:	011b      	lsls	r3, r3, #4
 80077d0:	440b      	add	r3, r1
 80077d2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6819      	ldr	r1, [r3, #0]
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	691a      	ldr	r2, [r3, #16]
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	3318      	adds	r3, #24
 80077e0:	011b      	lsls	r3, r3, #4
 80077e2:	440b      	add	r3, r1
 80077e4:	3304      	adds	r3, #4
 80077e6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	7d1b      	ldrb	r3, [r3, #20]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d111      	bne.n	8007814 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	3318      	adds	r3, #24
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	4413      	add	r3, r2
 80077fc:	3304      	adds	r3, #4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	6811      	ldr	r1, [r2, #0]
 8007804:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	3318      	adds	r3, #24
 800780c:	011b      	lsls	r3, r3, #4
 800780e:	440b      	add	r3, r1
 8007810:	3304      	adds	r3, #4
 8007812:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	3307      	adds	r3, #7
 8007818:	781b      	ldrb	r3, [r3, #0]
 800781a:	061a      	lsls	r2, r3, #24
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3306      	adds	r3, #6
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	431a      	orrs	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	3305      	adds	r3, #5
 800782a:	781b      	ldrb	r3, [r3, #0]
 800782c:	021b      	lsls	r3, r3, #8
 800782e:	4313      	orrs	r3, r2
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	3204      	adds	r2, #4
 8007834:	7812      	ldrb	r2, [r2, #0]
 8007836:	4610      	mov	r0, r2
 8007838:	68fa      	ldr	r2, [r7, #12]
 800783a:	6811      	ldr	r1, [r2, #0]
 800783c:	ea43 0200 	orr.w	r2, r3, r0
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	011b      	lsls	r3, r3, #4
 8007844:	440b      	add	r3, r1
 8007846:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800784a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	3303      	adds	r3, #3
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	061a      	lsls	r2, r3, #24
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3302      	adds	r3, #2
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	041b      	lsls	r3, r3, #16
 800785c:	431a      	orrs	r2, r3
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	3301      	adds	r3, #1
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	021b      	lsls	r3, r3, #8
 8007866:	4313      	orrs	r3, r2
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	7812      	ldrb	r2, [r2, #0]
 800786c:	4610      	mov	r0, r2
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	6811      	ldr	r1, [r2, #0]
 8007872:	ea43 0200 	orr.w	r2, r3, r0
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	440b      	add	r3, r1
 800787c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8007880:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	3318      	adds	r3, #24
 800788a:	011b      	lsls	r3, r3, #4
 800788c:	4413      	add	r3, r2
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	6811      	ldr	r1, [r2, #0]
 8007894:	f043 0201 	orr.w	r2, r3, #1
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	3318      	adds	r3, #24
 800789c:	011b      	lsls	r3, r3, #4
 800789e:	440b      	add	r3, r1
 80078a0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	e00e      	b.n	80078c4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078aa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e006      	b.n	80078c4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
  }
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3724      	adds	r7, #36	@ 0x24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80078d0:	b480      	push	{r7}
 80078d2:	b087      	sub	sp, #28
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078e4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	d003      	beq.n	80078f4 <HAL_CAN_GetRxMessage+0x24>
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	f040 8103 	bne.w	8007afa <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10e      	bne.n	8007918 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f003 0303 	and.w	r3, r3, #3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d116      	bne.n	8007936 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0f7      	b.n	8007b08 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	691b      	ldr	r3, [r3, #16]
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d107      	bne.n	8007936 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e0e8      	b.n	8007b08 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	331b      	adds	r3, #27
 800793e:	011b      	lsls	r3, r3, #4
 8007940:	4413      	add	r3, r2
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 0204 	and.w	r2, r3, #4
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	689b      	ldr	r3, [r3, #8]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10c      	bne.n	800796e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681a      	ldr	r2, [r3, #0]
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	331b      	adds	r3, #27
 800795c:	011b      	lsls	r3, r3, #4
 800795e:	4413      	add	r3, r2
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	0d5b      	lsrs	r3, r3, #21
 8007964:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	601a      	str	r2, [r3, #0]
 800796c:	e00b      	b.n	8007986 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681a      	ldr	r2, [r3, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	331b      	adds	r3, #27
 8007976:	011b      	lsls	r3, r3, #4
 8007978:	4413      	add	r3, r2
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	08db      	lsrs	r3, r3, #3
 800797e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	331b      	adds	r3, #27
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	4413      	add	r3, r2
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 0202 	and.w	r2, r3, #2
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	331b      	adds	r3, #27
 80079a4:	011b      	lsls	r3, r3, #4
 80079a6:	4413      	add	r3, r2
 80079a8:	3304      	adds	r3, #4
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f003 0308 	and.w	r3, r3, #8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d003      	beq.n	80079bc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2208      	movs	r2, #8
 80079b8:	611a      	str	r2, [r3, #16]
 80079ba:	e00b      	b.n	80079d4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	331b      	adds	r3, #27
 80079c4:	011b      	lsls	r3, r3, #4
 80079c6:	4413      	add	r3, r2
 80079c8:	3304      	adds	r3, #4
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 020f 	and.w	r2, r3, #15
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	331b      	adds	r3, #27
 80079dc:	011b      	lsls	r3, r3, #4
 80079de:	4413      	add	r3, r2
 80079e0:	3304      	adds	r3, #4
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	0a1b      	lsrs	r3, r3, #8
 80079e6:	b2da      	uxtb	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	331b      	adds	r3, #27
 80079f4:	011b      	lsls	r3, r3, #4
 80079f6:	4413      	add	r3, r2
 80079f8:	3304      	adds	r3, #4
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	0c1b      	lsrs	r3, r3, #16
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	011b      	lsls	r3, r3, #4
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	011b      	lsls	r3, r3, #4
 8007a22:	4413      	add	r3, r2
 8007a24:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	0a1a      	lsrs	r2, r3, #8
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	b2d2      	uxtb	r2, r2
 8007a32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	4413      	add	r3, r2
 8007a3e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	0c1a      	lsrs	r2, r3, #16
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	3302      	adds	r3, #2
 8007a4a:	b2d2      	uxtb	r2, r2
 8007a4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	011b      	lsls	r3, r3, #4
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	0e1a      	lsrs	r2, r3, #24
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	3303      	adds	r3, #3
 8007a64:	b2d2      	uxtb	r2, r2
 8007a66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	011b      	lsls	r3, r3, #4
 8007a70:	4413      	add	r3, r2
 8007a72:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	b2d2      	uxtb	r2, r2
 8007a7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	011b      	lsls	r3, r3, #4
 8007a88:	4413      	add	r3, r2
 8007a8a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	0a1a      	lsrs	r2, r3, #8
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	3305      	adds	r3, #5
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	011b      	lsls	r3, r3, #4
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	0c1a      	lsrs	r2, r3, #16
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	3306      	adds	r3, #6
 8007ab0:	b2d2      	uxtb	r2, r2
 8007ab2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	011b      	lsls	r3, r3, #4
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	0e1a      	lsrs	r2, r3, #24
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	3307      	adds	r3, #7
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d108      	bne.n	8007ae6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68da      	ldr	r2, [r3, #12]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0220 	orr.w	r2, r2, #32
 8007ae2:	60da      	str	r2, [r3, #12]
 8007ae4:	e007      	b.n	8007af6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	691a      	ldr	r2, [r3, #16]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f042 0220 	orr.w	r2, r2, #32
 8007af4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	e006      	b.n	8007b08 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007afe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
  }
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	371c      	adds	r7, #28
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007b24:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007b26:	7bfb      	ldrb	r3, [r7, #15]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d002      	beq.n	8007b32 <HAL_CAN_ActivateNotification+0x1e>
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d109      	bne.n	8007b46 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6959      	ldr	r1, [r3, #20]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	683a      	ldr	r2, [r7, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	e006      	b.n	8007b54 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b4a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
  }
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3714      	adds	r7, #20
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b08a      	sub	sp, #40	@ 0x28
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	689b      	ldr	r3, [r3, #8]
 8007b82:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007b9c:	6a3b      	ldr	r3, [r7, #32]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d07c      	beq.n	8007ca0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	f003 0301 	and.w	r3, r3, #1
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d023      	beq.n	8007bf8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 f983 	bl	8007ece <HAL_CAN_TxMailbox0CompleteCallback>
 8007bc8:	e016      	b.n	8007bf8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007bca:	69bb      	ldr	r3, [r7, #24]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bdc:	e00c      	b.n	8007bf8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007bde:	69bb      	ldr	r3, [r7, #24]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d004      	beq.n	8007bf2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bea:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8007bf0:	e002      	b.n	8007bf8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f989 	bl	8007f0a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d024      	beq.n	8007c4c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d003      	beq.n	8007c1e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f963 	bl	8007ee2 <HAL_CAN_TxMailbox1CompleteCallback>
 8007c1c:	e016      	b.n	8007c4c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d004      	beq.n	8007c32 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c30:	e00c      	b.n	8007c4c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007c32:	69bb      	ldr	r3, [r7, #24]
 8007c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d004      	beq.n	8007c46 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007c42:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c44:	e002      	b.n	8007c4c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f969 	bl	8007f1e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d024      	beq.n	8007ca0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8007c5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d003      	beq.n	8007c72 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 f943 	bl	8007ef6 <HAL_CAN_TxMailbox2CompleteCallback>
 8007c70:	e016      	b.n	8007ca0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d004      	beq.n	8007c86 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c84:	e00c      	b.n	8007ca0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d004      	beq.n	8007c9a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c98:	e002      	b.n	8007ca0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f949 	bl	8007f32 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00c      	beq.n	8007cc4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	f003 0310 	and.w	r3, r3, #16
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d007      	beq.n	8007cc4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007cba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2210      	movs	r2, #16
 8007cc2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	f003 0304 	and.w	r3, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f003 0308 	and.w	r3, r3, #8
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d006      	beq.n	8007ce6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2208      	movs	r2, #8
 8007cde:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 f930 	bl	8007f46 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	f003 0302 	and.w	r3, r3, #2
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d009      	beq.n	8007d04 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f003 0303 	and.w	r3, r3, #3
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7f9 fd90 	bl	8001824 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007d04:	6a3b      	ldr	r3, [r7, #32]
 8007d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00c      	beq.n	8007d28 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f003 0310 	and.w	r3, r3, #16
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d007      	beq.n	8007d28 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007d1e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2210      	movs	r2, #16
 8007d26:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	f003 0320 	and.w	r3, r3, #32
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00b      	beq.n	8007d4a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	f003 0308 	and.w	r3, r3, #8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d006      	beq.n	8007d4a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2208      	movs	r2, #8
 8007d42:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f000 f912 	bl	8007f6e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	f003 0310 	and.w	r3, r3, #16
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d009      	beq.n	8007d68 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0303 	and.w	r3, r3, #3
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f8f9 	bl	8007f5a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d00b      	beq.n	8007d8a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	f003 0310 	and.w	r3, r3, #16
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d006      	beq.n	8007d8a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2210      	movs	r2, #16
 8007d82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f8fc 	bl	8007f82 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007d8a:	6a3b      	ldr	r3, [r7, #32]
 8007d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d00b      	beq.n	8007dac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d006      	beq.n	8007dac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2208      	movs	r2, #8
 8007da4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f8f5 	bl	8007f96 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d07b      	beq.n	8007eae <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	f003 0304 	and.w	r3, r3, #4
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d072      	beq.n	8007ea6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d008      	beq.n	8007ddc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d003      	beq.n	8007ddc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	f043 0301 	orr.w	r3, r3, #1
 8007dda:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d008      	beq.n	8007df8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df2:	f043 0302 	orr.w	r3, r3, #2
 8007df6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007df8:	6a3b      	ldr	r3, [r7, #32]
 8007dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d008      	beq.n	8007e14 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0e:	f043 0304 	orr.w	r3, r3, #4
 8007e12:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d043      	beq.n	8007ea6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d03e      	beq.n	8007ea6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007e2e:	2b60      	cmp	r3, #96	@ 0x60
 8007e30:	d02b      	beq.n	8007e8a <HAL_CAN_IRQHandler+0x32a>
 8007e32:	2b60      	cmp	r3, #96	@ 0x60
 8007e34:	d82e      	bhi.n	8007e94 <HAL_CAN_IRQHandler+0x334>
 8007e36:	2b50      	cmp	r3, #80	@ 0x50
 8007e38:	d022      	beq.n	8007e80 <HAL_CAN_IRQHandler+0x320>
 8007e3a:	2b50      	cmp	r3, #80	@ 0x50
 8007e3c:	d82a      	bhi.n	8007e94 <HAL_CAN_IRQHandler+0x334>
 8007e3e:	2b40      	cmp	r3, #64	@ 0x40
 8007e40:	d019      	beq.n	8007e76 <HAL_CAN_IRQHandler+0x316>
 8007e42:	2b40      	cmp	r3, #64	@ 0x40
 8007e44:	d826      	bhi.n	8007e94 <HAL_CAN_IRQHandler+0x334>
 8007e46:	2b30      	cmp	r3, #48	@ 0x30
 8007e48:	d010      	beq.n	8007e6c <HAL_CAN_IRQHandler+0x30c>
 8007e4a:	2b30      	cmp	r3, #48	@ 0x30
 8007e4c:	d822      	bhi.n	8007e94 <HAL_CAN_IRQHandler+0x334>
 8007e4e:	2b10      	cmp	r3, #16
 8007e50:	d002      	beq.n	8007e58 <HAL_CAN_IRQHandler+0x2f8>
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d005      	beq.n	8007e62 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007e56:	e01d      	b.n	8007e94 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5a:	f043 0308 	orr.w	r3, r3, #8
 8007e5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007e60:	e019      	b.n	8007e96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e64:	f043 0310 	orr.w	r3, r3, #16
 8007e68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007e6a:	e014      	b.n	8007e96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6e:	f043 0320 	orr.w	r3, r3, #32
 8007e72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007e74:	e00f      	b.n	8007e96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007e7e:	e00a      	b.n	8007e96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e86:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007e88:	e005      	b.n	8007e96 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e90:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007e92:	e000      	b.n	8007e96 <HAL_CAN_IRQHandler+0x336>
            break;
 8007e94:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	699a      	ldr	r2, [r3, #24]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007ea4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2204      	movs	r2, #4
 8007eac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d008      	beq.n	8007ec6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 f872 	bl	8007faa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007ec6:	bf00      	nop
 8007ec8:	3728      	adds	r7, #40	@ 0x28
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b083      	sub	sp, #12
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007ed6:	bf00      	nop
 8007ed8:	370c      	adds	r7, #12
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr

08007ee2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007ee2:	b480      	push	{r7}
 8007ee4:	b083      	sub	sp, #12
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b083      	sub	sp, #12
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007efe:	bf00      	nop
 8007f00:	370c      	adds	r7, #12
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b083      	sub	sp, #12
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007f6e:	b480      	push	{r7}
 8007f70:	b083      	sub	sp, #12
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007f8a:	bf00      	nop
 8007f8c:	370c      	adds	r7, #12
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007f96:	b480      	push	{r7}
 8007f98:	b083      	sub	sp, #12
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007f9e:	bf00      	nop
 8007fa0:	370c      	adds	r7, #12
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr

08007faa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007faa:	b480      	push	{r7}
 8007fac:	b083      	sub	sp, #12
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007fb2:	bf00      	nop
 8007fb4:	370c      	adds	r7, #12
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
	...

08007fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b085      	sub	sp, #20
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8008004 <__NVIC_SetPriorityGrouping+0x44>)
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007fdc:	4013      	ands	r3, r2
 8007fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fe8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007fec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ff2:	4a04      	ldr	r2, [pc, #16]	@ (8008004 <__NVIC_SetPriorityGrouping+0x44>)
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	60d3      	str	r3, [r2, #12]
}
 8007ff8:	bf00      	nop
 8007ffa:	3714      	adds	r7, #20
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr
 8008004:	e000ed00 	.word	0xe000ed00

08008008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008008:	b480      	push	{r7}
 800800a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800800c:	4b04      	ldr	r3, [pc, #16]	@ (8008020 <__NVIC_GetPriorityGrouping+0x18>)
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	0a1b      	lsrs	r3, r3, #8
 8008012:	f003 0307 	and.w	r3, r3, #7
}
 8008016:	4618      	mov	r0, r3
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	e000ed00 	.word	0xe000ed00

08008024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800802e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008032:	2b00      	cmp	r3, #0
 8008034:	db0b      	blt.n	800804e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	f003 021f 	and.w	r2, r3, #31
 800803c:	4907      	ldr	r1, [pc, #28]	@ (800805c <__NVIC_EnableIRQ+0x38>)
 800803e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008042:	095b      	lsrs	r3, r3, #5
 8008044:	2001      	movs	r0, #1
 8008046:	fa00 f202 	lsl.w	r2, r0, r2
 800804a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr
 800805a:	bf00      	nop
 800805c:	e000e100 	.word	0xe000e100

08008060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008060:	b480      	push	{r7}
 8008062:	b083      	sub	sp, #12
 8008064:	af00      	add	r7, sp, #0
 8008066:	4603      	mov	r3, r0
 8008068:	6039      	str	r1, [r7, #0]
 800806a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800806c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008070:	2b00      	cmp	r3, #0
 8008072:	db0a      	blt.n	800808a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	b2da      	uxtb	r2, r3
 8008078:	490c      	ldr	r1, [pc, #48]	@ (80080ac <__NVIC_SetPriority+0x4c>)
 800807a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800807e:	0112      	lsls	r2, r2, #4
 8008080:	b2d2      	uxtb	r2, r2
 8008082:	440b      	add	r3, r1
 8008084:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008088:	e00a      	b.n	80080a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	b2da      	uxtb	r2, r3
 800808e:	4908      	ldr	r1, [pc, #32]	@ (80080b0 <__NVIC_SetPriority+0x50>)
 8008090:	79fb      	ldrb	r3, [r7, #7]
 8008092:	f003 030f 	and.w	r3, r3, #15
 8008096:	3b04      	subs	r3, #4
 8008098:	0112      	lsls	r2, r2, #4
 800809a:	b2d2      	uxtb	r2, r2
 800809c:	440b      	add	r3, r1
 800809e:	761a      	strb	r2, [r3, #24]
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	e000e100 	.word	0xe000e100
 80080b0:	e000ed00 	.word	0xe000ed00

080080b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b089      	sub	sp, #36	@ 0x24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	f1c3 0307 	rsb	r3, r3, #7
 80080ce:	2b04      	cmp	r3, #4
 80080d0:	bf28      	it	cs
 80080d2:	2304      	movcs	r3, #4
 80080d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	3304      	adds	r3, #4
 80080da:	2b06      	cmp	r3, #6
 80080dc:	d902      	bls.n	80080e4 <NVIC_EncodePriority+0x30>
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	3b03      	subs	r3, #3
 80080e2:	e000      	b.n	80080e6 <NVIC_EncodePriority+0x32>
 80080e4:	2300      	movs	r3, #0
 80080e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	43da      	mvns	r2, r3
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	401a      	ands	r2, r3
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	fa01 f303 	lsl.w	r3, r1, r3
 8008106:	43d9      	mvns	r1, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800810c:	4313      	orrs	r3, r2
         );
}
 800810e:	4618      	mov	r0, r3
 8008110:	3724      	adds	r7, #36	@ 0x24
 8008112:	46bd      	mov	sp, r7
 8008114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008118:	4770      	bx	lr
	...

0800811c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3b01      	subs	r3, #1
 8008128:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800812c:	d301      	bcc.n	8008132 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800812e:	2301      	movs	r3, #1
 8008130:	e00f      	b.n	8008152 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008132:	4a0a      	ldr	r2, [pc, #40]	@ (800815c <SysTick_Config+0x40>)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	3b01      	subs	r3, #1
 8008138:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800813a:	210f      	movs	r1, #15
 800813c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008140:	f7ff ff8e 	bl	8008060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008144:	4b05      	ldr	r3, [pc, #20]	@ (800815c <SysTick_Config+0x40>)
 8008146:	2200      	movs	r2, #0
 8008148:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800814a:	4b04      	ldr	r3, [pc, #16]	@ (800815c <SysTick_Config+0x40>)
 800814c:	2207      	movs	r2, #7
 800814e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	e000e010 	.word	0xe000e010

08008160 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff ff29 	bl	8007fc0 <__NVIC_SetPriorityGrouping>
}
 800816e:	bf00      	nop
 8008170:	3708      	adds	r7, #8
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008176:	b580      	push	{r7, lr}
 8008178:	b086      	sub	sp, #24
 800817a:	af00      	add	r7, sp, #0
 800817c:	4603      	mov	r3, r0
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	607a      	str	r2, [r7, #4]
 8008182:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008184:	2300      	movs	r3, #0
 8008186:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008188:	f7ff ff3e 	bl	8008008 <__NVIC_GetPriorityGrouping>
 800818c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	6978      	ldr	r0, [r7, #20]
 8008194:	f7ff ff8e 	bl	80080b4 <NVIC_EncodePriority>
 8008198:	4602      	mov	r2, r0
 800819a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800819e:	4611      	mov	r1, r2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff ff5d 	bl	8008060 <__NVIC_SetPriority>
}
 80081a6:	bf00      	nop
 80081a8:	3718      	adds	r7, #24
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b082      	sub	sp, #8
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	4603      	mov	r3, r0
 80081b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081bc:	4618      	mov	r0, r3
 80081be:	f7ff ff31 	bl	8008024 <__NVIC_EnableIRQ>
}
 80081c2:	bf00      	nop
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff ffa2 	bl	800811c <SysTick_Config>
 80081d8:	4603      	mov	r3, r0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
	...

080081e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80081f0:	f7ff f84e 	bl	8007290 <HAL_GetTick>
 80081f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d101      	bne.n	8008200 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e099      	b.n	8008334 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2202      	movs	r2, #2
 8008204:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0201 	bic.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008220:	e00f      	b.n	8008242 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008222:	f7ff f835 	bl	8007290 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b05      	cmp	r3, #5
 800822e:	d908      	bls.n	8008242 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2220      	movs	r2, #32
 8008234:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2203      	movs	r2, #3
 800823a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800823e:	2303      	movs	r3, #3
 8008240:	e078      	b.n	8008334 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0301 	and.w	r3, r3, #1
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e8      	bne.n	8008222 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008258:	697a      	ldr	r2, [r7, #20]
 800825a:	4b38      	ldr	r3, [pc, #224]	@ (800833c <HAL_DMA_Init+0x158>)
 800825c:	4013      	ands	r3, r2
 800825e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800826e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800827a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008286:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800828e:	697a      	ldr	r2, [r7, #20]
 8008290:	4313      	orrs	r3, r2
 8008292:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008298:	2b04      	cmp	r3, #4
 800829a:	d107      	bne.n	80082ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a4:	4313      	orrs	r3, r2
 80082a6:	697a      	ldr	r2, [r7, #20]
 80082a8:	4313      	orrs	r3, r2
 80082aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	697a      	ldr	r2, [r7, #20]
 80082b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	f023 0307 	bic.w	r3, r3, #7
 80082c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082d2:	2b04      	cmp	r3, #4
 80082d4:	d117      	bne.n	8008306 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	4313      	orrs	r3, r2
 80082de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00e      	beq.n	8008306 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fb01 	bl	80088f0 <DMA_CheckFifoParam>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d008      	beq.n	8008306 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2240      	movs	r2, #64	@ 0x40
 80082f8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8008302:	2301      	movs	r3, #1
 8008304:	e016      	b.n	8008334 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fab8 	bl	8008884 <DMA_CalcBaseAndBitshift>
 8008314:	4603      	mov	r3, r0
 8008316:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800831c:	223f      	movs	r2, #63	@ 0x3f
 800831e:	409a      	lsls	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2200      	movs	r2, #0
 8008328:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	f010803f 	.word	0xf010803f

08008340 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	607a      	str	r2, [r7, #4]
 800834c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008356:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_DMA_Start_IT+0x26>
 8008362:	2302      	movs	r3, #2
 8008364:	e040      	b.n	80083e8 <HAL_DMA_Start_IT+0xa8>
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b01      	cmp	r3, #1
 8008378:	d12f      	bne.n	80083da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2202      	movs	r2, #2
 800837e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2200      	movs	r2, #0
 8008386:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	687a      	ldr	r2, [r7, #4]
 800838c:	68b9      	ldr	r1, [r7, #8]
 800838e:	68f8      	ldr	r0, [r7, #12]
 8008390:	f000 fa4a 	bl	8008828 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008398:	223f      	movs	r2, #63	@ 0x3f
 800839a:	409a      	lsls	r2, r3
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f042 0216 	orr.w	r2, r2, #22
 80083ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d007      	beq.n	80083c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f042 0208 	orr.w	r2, r2, #8
 80083c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f042 0201 	orr.w	r2, r2, #1
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	e005      	b.n	80083e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80083e2:	2302      	movs	r3, #2
 80083e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80083e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3718      	adds	r7, #24
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80083fe:	f7fe ff47 	bl	8007290 <HAL_GetTick>
 8008402:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b02      	cmp	r3, #2
 800840e:	d008      	beq.n	8008422 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2280      	movs	r2, #128	@ 0x80
 8008414:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e052      	b.n	80084c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0216 	bic.w	r2, r2, #22
 8008430:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	695a      	ldr	r2, [r3, #20]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008440:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008446:	2b00      	cmp	r3, #0
 8008448:	d103      	bne.n	8008452 <HAL_DMA_Abort+0x62>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800844e:	2b00      	cmp	r3, #0
 8008450:	d007      	beq.n	8008462 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f022 0208 	bic.w	r2, r2, #8
 8008460:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f022 0201 	bic.w	r2, r2, #1
 8008470:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008472:	e013      	b.n	800849c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008474:	f7fe ff0c 	bl	8007290 <HAL_GetTick>
 8008478:	4602      	mov	r2, r0
 800847a:	68bb      	ldr	r3, [r7, #8]
 800847c:	1ad3      	subs	r3, r2, r3
 800847e:	2b05      	cmp	r3, #5
 8008480:	d90c      	bls.n	800849c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2220      	movs	r2, #32
 8008486:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2203      	movs	r2, #3
 800848c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8008498:	2303      	movs	r3, #3
 800849a:	e015      	b.n	80084c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0301 	and.w	r3, r3, #1
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1e4      	bne.n	8008474 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80084ae:	223f      	movs	r2, #63	@ 0x3f
 80084b0:	409a      	lsls	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b083      	sub	sp, #12
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b02      	cmp	r3, #2
 80084e2:	d004      	beq.n	80084ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2280      	movs	r2, #128	@ 0x80
 80084e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e00c      	b.n	8008508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2205      	movs	r2, #5
 80084f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0201 	bic.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b086      	sub	sp, #24
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800851c:	2300      	movs	r3, #0
 800851e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008520:	4b8e      	ldr	r3, [pc, #568]	@ (800875c <HAL_DMA_IRQHandler+0x248>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	4a8e      	ldr	r2, [pc, #568]	@ (8008760 <HAL_DMA_IRQHandler+0x24c>)
 8008526:	fba2 2303 	umull	r2, r3, r2, r3
 800852a:	0a9b      	lsrs	r3, r3, #10
 800852c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008532:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800853e:	2208      	movs	r2, #8
 8008540:	409a      	lsls	r2, r3
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	4013      	ands	r3, r2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d01a      	beq.n	8008580 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f003 0304 	and.w	r3, r3, #4
 8008554:	2b00      	cmp	r3, #0
 8008556:	d013      	beq.n	8008580 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	681a      	ldr	r2, [r3, #0]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0204 	bic.w	r2, r2, #4
 8008566:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800856c:	2208      	movs	r2, #8
 800856e:	409a      	lsls	r2, r3
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008578:	f043 0201 	orr.w	r2, r3, #1
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008584:	2201      	movs	r2, #1
 8008586:	409a      	lsls	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	4013      	ands	r3, r2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d012      	beq.n	80085b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00b      	beq.n	80085b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085a2:	2201      	movs	r2, #1
 80085a4:	409a      	lsls	r2, r3
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ae:	f043 0202 	orr.w	r2, r3, #2
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085ba:	2204      	movs	r2, #4
 80085bc:	409a      	lsls	r2, r3
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	4013      	ands	r3, r2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d012      	beq.n	80085ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d00b      	beq.n	80085ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085d8:	2204      	movs	r2, #4
 80085da:	409a      	lsls	r2, r3
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085e4:	f043 0204 	orr.w	r2, r3, #4
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085f0:	2210      	movs	r2, #16
 80085f2:	409a      	lsls	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	4013      	ands	r3, r2
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d043      	beq.n	8008684 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0308 	and.w	r3, r3, #8
 8008606:	2b00      	cmp	r3, #0
 8008608:	d03c      	beq.n	8008684 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800860e:	2210      	movs	r2, #16
 8008610:	409a      	lsls	r2, r3
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d018      	beq.n	8008656 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800862e:	2b00      	cmp	r3, #0
 8008630:	d108      	bne.n	8008644 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008636:	2b00      	cmp	r3, #0
 8008638:	d024      	beq.n	8008684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	4798      	blx	r3
 8008642:	e01f      	b.n	8008684 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01b      	beq.n	8008684 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
 8008654:	e016      	b.n	8008684 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008660:	2b00      	cmp	r3, #0
 8008662:	d107      	bne.n	8008674 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0208 	bic.w	r2, r2, #8
 8008672:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008678:	2b00      	cmp	r3, #0
 800867a:	d003      	beq.n	8008684 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008688:	2220      	movs	r2, #32
 800868a:	409a      	lsls	r2, r3
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4013      	ands	r3, r2
 8008690:	2b00      	cmp	r3, #0
 8008692:	f000 808f 	beq.w	80087b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0310 	and.w	r3, r3, #16
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	f000 8087 	beq.w	80087b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80086aa:	2220      	movs	r2, #32
 80086ac:	409a      	lsls	r2, r3
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	2b05      	cmp	r3, #5
 80086bc:	d136      	bne.n	800872c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f022 0216 	bic.w	r2, r2, #22
 80086cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	695a      	ldr	r2, [r3, #20]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80086dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d103      	bne.n	80086ee <HAL_DMA_IRQHandler+0x1da>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d007      	beq.n	80086fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f022 0208 	bic.w	r2, r2, #8
 80086fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008702:	223f      	movs	r2, #63	@ 0x3f
 8008704:	409a      	lsls	r2, r3
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800871e:	2b00      	cmp	r3, #0
 8008720:	d07e      	beq.n	8008820 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	4798      	blx	r3
        }
        return;
 800872a:	e079      	b.n	8008820 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d01d      	beq.n	8008776 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10d      	bne.n	8008764 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800874c:	2b00      	cmp	r3, #0
 800874e:	d031      	beq.n	80087b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	4798      	blx	r3
 8008758:	e02c      	b.n	80087b4 <HAL_DMA_IRQHandler+0x2a0>
 800875a:	bf00      	nop
 800875c:	200001f0 	.word	0x200001f0
 8008760:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d023      	beq.n	80087b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	4798      	blx	r3
 8008774:	e01e      	b.n	80087b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10f      	bne.n	80087a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f022 0210 	bic.w	r2, r2, #16
 8008792:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d032      	beq.n	8008822 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80087c0:	f003 0301 	and.w	r3, r3, #1
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d022      	beq.n	800880e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2205      	movs	r2, #5
 80087cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f022 0201 	bic.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	3301      	adds	r3, #1
 80087e4:	60bb      	str	r3, [r7, #8]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d307      	bcc.n	80087fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0301 	and.w	r3, r3, #1
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1f2      	bne.n	80087e0 <HAL_DMA_IRQHandler+0x2cc>
 80087fa:	e000      	b.n	80087fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80087fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2201      	movs	r2, #1
 8008802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008812:	2b00      	cmp	r3, #0
 8008814:	d005      	beq.n	8008822 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	4798      	blx	r3
 800881e:	e000      	b.n	8008822 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008820:	bf00      	nop
    }
  }
}
 8008822:	3718      	adds	r7, #24
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008844:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	2b40      	cmp	r3, #64	@ 0x40
 8008854:	d108      	bne.n	8008868 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68ba      	ldr	r2, [r7, #8]
 8008864:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008866:	e007      	b.n	8008878 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68ba      	ldr	r2, [r7, #8]
 800886e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	60da      	str	r2, [r3, #12]
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008884:	b480      	push	{r7}
 8008886:	b085      	sub	sp, #20
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	b2db      	uxtb	r3, r3
 8008892:	3b10      	subs	r3, #16
 8008894:	4a14      	ldr	r2, [pc, #80]	@ (80088e8 <DMA_CalcBaseAndBitshift+0x64>)
 8008896:	fba2 2303 	umull	r2, r3, r2, r3
 800889a:	091b      	lsrs	r3, r3, #4
 800889c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800889e:	4a13      	ldr	r2, [pc, #76]	@ (80088ec <DMA_CalcBaseAndBitshift+0x68>)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	781b      	ldrb	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2b03      	cmp	r3, #3
 80088b0:	d909      	bls.n	80088c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80088ba:	f023 0303 	bic.w	r3, r3, #3
 80088be:	1d1a      	adds	r2, r3, #4
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	659a      	str	r2, [r3, #88]	@ 0x58
 80088c4:	e007      	b.n	80088d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80088ce:	f023 0303 	bic.w	r3, r3, #3
 80088d2:	687a      	ldr	r2, [r7, #4]
 80088d4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	aaaaaaab 	.word	0xaaaaaaab
 80088ec:	08011d90 	.word	0x08011d90

080088f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b085      	sub	sp, #20
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088f8:	2300      	movs	r3, #0
 80088fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008900:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	699b      	ldr	r3, [r3, #24]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d11f      	bne.n	800894a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	2b03      	cmp	r3, #3
 800890e:	d856      	bhi.n	80089be <DMA_CheckFifoParam+0xce>
 8008910:	a201      	add	r2, pc, #4	@ (adr r2, 8008918 <DMA_CheckFifoParam+0x28>)
 8008912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008916:	bf00      	nop
 8008918:	08008929 	.word	0x08008929
 800891c:	0800893b 	.word	0x0800893b
 8008920:	08008929 	.word	0x08008929
 8008924:	080089bf 	.word	0x080089bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800892c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008930:	2b00      	cmp	r3, #0
 8008932:	d046      	beq.n	80089c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008938:	e043      	b.n	80089c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800893e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008942:	d140      	bne.n	80089c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008944:	2301      	movs	r3, #1
 8008946:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008948:	e03d      	b.n	80089c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	699b      	ldr	r3, [r3, #24]
 800894e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008952:	d121      	bne.n	8008998 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2b03      	cmp	r3, #3
 8008958:	d837      	bhi.n	80089ca <DMA_CheckFifoParam+0xda>
 800895a:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <DMA_CheckFifoParam+0x70>)
 800895c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008960:	08008971 	.word	0x08008971
 8008964:	08008977 	.word	0x08008977
 8008968:	08008971 	.word	0x08008971
 800896c:	08008989 	.word	0x08008989
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008970:	2301      	movs	r3, #1
 8008972:	73fb      	strb	r3, [r7, #15]
      break;
 8008974:	e030      	b.n	80089d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800897a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800897e:	2b00      	cmp	r3, #0
 8008980:	d025      	beq.n	80089ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008982:	2301      	movs	r3, #1
 8008984:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008986:	e022      	b.n	80089ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800898c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8008990:	d11f      	bne.n	80089d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008996:	e01c      	b.n	80089d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2b02      	cmp	r3, #2
 800899c:	d903      	bls.n	80089a6 <DMA_CheckFifoParam+0xb6>
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2b03      	cmp	r3, #3
 80089a2:	d003      	beq.n	80089ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80089a4:	e018      	b.n	80089d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]
      break;
 80089aa:	e015      	b.n	80089d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00e      	beq.n	80089d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80089b8:	2301      	movs	r3, #1
 80089ba:	73fb      	strb	r3, [r7, #15]
      break;
 80089bc:	e00b      	b.n	80089d6 <DMA_CheckFifoParam+0xe6>
      break;
 80089be:	bf00      	nop
 80089c0:	e00a      	b.n	80089d8 <DMA_CheckFifoParam+0xe8>
      break;
 80089c2:	bf00      	nop
 80089c4:	e008      	b.n	80089d8 <DMA_CheckFifoParam+0xe8>
      break;
 80089c6:	bf00      	nop
 80089c8:	e006      	b.n	80089d8 <DMA_CheckFifoParam+0xe8>
      break;
 80089ca:	bf00      	nop
 80089cc:	e004      	b.n	80089d8 <DMA_CheckFifoParam+0xe8>
      break;
 80089ce:	bf00      	nop
 80089d0:	e002      	b.n	80089d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80089d2:	bf00      	nop
 80089d4:	e000      	b.n	80089d8 <DMA_CheckFifoParam+0xe8>
      break;
 80089d6:	bf00      	nop
    }
  } 
  
  return status; 
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop

080089e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80089e8:	b480      	push	{r7}
 80089ea:	b089      	sub	sp, #36	@ 0x24
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80089f6:	2300      	movs	r3, #0
 80089f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80089fe:	2300      	movs	r3, #0
 8008a00:	61fb      	str	r3, [r7, #28]
 8008a02:	e16b      	b.n	8008cdc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008a04:	2201      	movs	r2, #1
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	697a      	ldr	r2, [r7, #20]
 8008a14:	4013      	ands	r3, r2
 8008a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a18:	693a      	ldr	r2, [r7, #16]
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	429a      	cmp	r2, r3
 8008a1e:	f040 815a 	bne.w	8008cd6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d005      	beq.n	8008a3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d130      	bne.n	8008a9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	005b      	lsls	r3, r3, #1
 8008a44:	2203      	movs	r2, #3
 8008a46:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4a:	43db      	mvns	r3, r3
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	4013      	ands	r3, r2
 8008a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68da      	ldr	r2, [r3, #12]
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	005b      	lsls	r3, r3, #1
 8008a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	69ba      	ldr	r2, [r7, #24]
 8008a68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a70:	2201      	movs	r2, #1
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	fa02 f303 	lsl.w	r3, r2, r3
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	091b      	lsrs	r3, r3, #4
 8008a86:	f003 0201 	and.w	r2, r3, #1
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	f003 0303 	and.w	r3, r3, #3
 8008aa4:	2b03      	cmp	r3, #3
 8008aa6:	d017      	beq.n	8008ad8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	005b      	lsls	r3, r3, #1
 8008ab2:	2203      	movs	r2, #3
 8008ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab8:	43db      	mvns	r3, r3
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	4013      	ands	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	005b      	lsls	r3, r3, #1
 8008ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	69ba      	ldr	r2, [r7, #24]
 8008ad6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	d123      	bne.n	8008b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ae4:	69fb      	ldr	r3, [r7, #28]
 8008ae6:	08da      	lsrs	r2, r3, #3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3208      	adds	r2, #8
 8008aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	f003 0307 	and.w	r3, r3, #7
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	220f      	movs	r2, #15
 8008afc:	fa02 f303 	lsl.w	r3, r2, r3
 8008b00:	43db      	mvns	r3, r3
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	4013      	ands	r3, r2
 8008b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	691a      	ldr	r2, [r3, #16]
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	f003 0307 	and.w	r3, r3, #7
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	fa02 f303 	lsl.w	r3, r2, r3
 8008b18:	69ba      	ldr	r2, [r7, #24]
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b1e:	69fb      	ldr	r3, [r7, #28]
 8008b20:	08da      	lsrs	r2, r3, #3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	3208      	adds	r2, #8
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	005b      	lsls	r3, r3, #1
 8008b36:	2203      	movs	r2, #3
 8008b38:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3c:	43db      	mvns	r3, r3
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	4013      	ands	r3, r2
 8008b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	f003 0203 	and.w	r2, r3, #3
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	005b      	lsls	r3, r3, #1
 8008b50:	fa02 f303 	lsl.w	r3, r2, r3
 8008b54:	69ba      	ldr	r2, [r7, #24]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	69ba      	ldr	r2, [r7, #24]
 8008b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	f000 80b4 	beq.w	8008cd6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b6e:	2300      	movs	r3, #0
 8008b70:	60fb      	str	r3, [r7, #12]
 8008b72:	4b60      	ldr	r3, [pc, #384]	@ (8008cf4 <HAL_GPIO_Init+0x30c>)
 8008b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b76:	4a5f      	ldr	r2, [pc, #380]	@ (8008cf4 <HAL_GPIO_Init+0x30c>)
 8008b78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8008b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8008cf4 <HAL_GPIO_Init+0x30c>)
 8008b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008b86:	60fb      	str	r3, [r7, #12]
 8008b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008b8a:	4a5b      	ldr	r2, [pc, #364]	@ (8008cf8 <HAL_GPIO_Init+0x310>)
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	089b      	lsrs	r3, r3, #2
 8008b90:	3302      	adds	r3, #2
 8008b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008b98:	69fb      	ldr	r3, [r7, #28]
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	220f      	movs	r2, #15
 8008ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ba6:	43db      	mvns	r3, r3
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	4013      	ands	r3, r2
 8008bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	4a52      	ldr	r2, [pc, #328]	@ (8008cfc <HAL_GPIO_Init+0x314>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d02b      	beq.n	8008c0e <HAL_GPIO_Init+0x226>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	4a51      	ldr	r2, [pc, #324]	@ (8008d00 <HAL_GPIO_Init+0x318>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d025      	beq.n	8008c0a <HAL_GPIO_Init+0x222>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a50      	ldr	r2, [pc, #320]	@ (8008d04 <HAL_GPIO_Init+0x31c>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d01f      	beq.n	8008c06 <HAL_GPIO_Init+0x21e>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a4f      	ldr	r2, [pc, #316]	@ (8008d08 <HAL_GPIO_Init+0x320>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d019      	beq.n	8008c02 <HAL_GPIO_Init+0x21a>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a4e      	ldr	r2, [pc, #312]	@ (8008d0c <HAL_GPIO_Init+0x324>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d013      	beq.n	8008bfe <HAL_GPIO_Init+0x216>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a4d      	ldr	r2, [pc, #308]	@ (8008d10 <HAL_GPIO_Init+0x328>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d00d      	beq.n	8008bfa <HAL_GPIO_Init+0x212>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a4c      	ldr	r2, [pc, #304]	@ (8008d14 <HAL_GPIO_Init+0x32c>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d007      	beq.n	8008bf6 <HAL_GPIO_Init+0x20e>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a4b      	ldr	r2, [pc, #300]	@ (8008d18 <HAL_GPIO_Init+0x330>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d101      	bne.n	8008bf2 <HAL_GPIO_Init+0x20a>
 8008bee:	2307      	movs	r3, #7
 8008bf0:	e00e      	b.n	8008c10 <HAL_GPIO_Init+0x228>
 8008bf2:	2308      	movs	r3, #8
 8008bf4:	e00c      	b.n	8008c10 <HAL_GPIO_Init+0x228>
 8008bf6:	2306      	movs	r3, #6
 8008bf8:	e00a      	b.n	8008c10 <HAL_GPIO_Init+0x228>
 8008bfa:	2305      	movs	r3, #5
 8008bfc:	e008      	b.n	8008c10 <HAL_GPIO_Init+0x228>
 8008bfe:	2304      	movs	r3, #4
 8008c00:	e006      	b.n	8008c10 <HAL_GPIO_Init+0x228>
 8008c02:	2303      	movs	r3, #3
 8008c04:	e004      	b.n	8008c10 <HAL_GPIO_Init+0x228>
 8008c06:	2302      	movs	r3, #2
 8008c08:	e002      	b.n	8008c10 <HAL_GPIO_Init+0x228>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e000      	b.n	8008c10 <HAL_GPIO_Init+0x228>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	69fa      	ldr	r2, [r7, #28]
 8008c12:	f002 0203 	and.w	r2, r2, #3
 8008c16:	0092      	lsls	r2, r2, #2
 8008c18:	4093      	lsls	r3, r2
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c20:	4935      	ldr	r1, [pc, #212]	@ (8008cf8 <HAL_GPIO_Init+0x310>)
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	089b      	lsrs	r3, r3, #2
 8008c26:	3302      	adds	r3, #2
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008c2e:	4b3b      	ldr	r3, [pc, #236]	@ (8008d1c <HAL_GPIO_Init+0x334>)
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	43db      	mvns	r3, r3
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	4013      	ands	r3, r2
 8008c3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008c52:	4a32      	ldr	r2, [pc, #200]	@ (8008d1c <HAL_GPIO_Init+0x334>)
 8008c54:	69bb      	ldr	r3, [r7, #24]
 8008c56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008c58:	4b30      	ldr	r3, [pc, #192]	@ (8008d1c <HAL_GPIO_Init+0x334>)
 8008c5a:	68db      	ldr	r3, [r3, #12]
 8008c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	43db      	mvns	r3, r3
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	4013      	ands	r3, r2
 8008c66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d003      	beq.n	8008c7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008c74:	69ba      	ldr	r2, [r7, #24]
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c7c:	4a27      	ldr	r2, [pc, #156]	@ (8008d1c <HAL_GPIO_Init+0x334>)
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008c82:	4b26      	ldr	r3, [pc, #152]	@ (8008d1c <HAL_GPIO_Init+0x334>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	43db      	mvns	r3, r3
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8008d1c <HAL_GPIO_Init+0x334>)
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008cac:	4b1b      	ldr	r3, [pc, #108]	@ (8008d1c <HAL_GPIO_Init+0x334>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	43db      	mvns	r3, r3
 8008cb6:	69ba      	ldr	r2, [r7, #24]
 8008cb8:	4013      	ands	r3, r2
 8008cba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d003      	beq.n	8008cd0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008cc8:	69ba      	ldr	r2, [r7, #24]
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008cd0:	4a12      	ldr	r2, [pc, #72]	@ (8008d1c <HAL_GPIO_Init+0x334>)
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	3301      	adds	r3, #1
 8008cda:	61fb      	str	r3, [r7, #28]
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	2b0f      	cmp	r3, #15
 8008ce0:	f67f ae90 	bls.w	8008a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ce4:	bf00      	nop
 8008ce6:	bf00      	nop
 8008ce8:	3724      	adds	r7, #36	@ 0x24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr
 8008cf2:	bf00      	nop
 8008cf4:	40023800 	.word	0x40023800
 8008cf8:	40013800 	.word	0x40013800
 8008cfc:	40020000 	.word	0x40020000
 8008d00:	40020400 	.word	0x40020400
 8008d04:	40020800 	.word	0x40020800
 8008d08:	40020c00 	.word	0x40020c00
 8008d0c:	40021000 	.word	0x40021000
 8008d10:	40021400 	.word	0x40021400
 8008d14:	40021800 	.word	0x40021800
 8008d18:	40021c00 	.word	0x40021c00
 8008d1c:	40013c00 	.word	0x40013c00

08008d20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b083      	sub	sp, #12
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	807b      	strh	r3, [r7, #2]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d30:	787b      	ldrb	r3, [r7, #1]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d003      	beq.n	8008d3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d36:	887a      	ldrh	r2, [r7, #2]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008d3c:	e003      	b.n	8008d46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008d3e:	887b      	ldrh	r3, [r7, #2]
 8008d40:	041a      	lsls	r2, r3, #16
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	619a      	str	r2, [r3, #24]
}
 8008d46:	bf00      	nop
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
	...

08008d54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b082      	sub	sp, #8
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008d5e:	4b08      	ldr	r3, [pc, #32]	@ (8008d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d60:	695a      	ldr	r2, [r3, #20]
 8008d62:	88fb      	ldrh	r3, [r7, #6]
 8008d64:	4013      	ands	r3, r2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d006      	beq.n	8008d78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008d6a:	4a05      	ldr	r2, [pc, #20]	@ (8008d80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008d6c:	88fb      	ldrh	r3, [r7, #6]
 8008d6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008d70:	88fb      	ldrh	r3, [r7, #6]
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fa fb78 	bl	8003468 <HAL_GPIO_EXTI_Callback>
  }
}
 8008d78:	bf00      	nop
 8008d7a:	3708      	adds	r7, #8
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	40013c00 	.word	0x40013c00

08008d84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d101      	bne.n	8008d96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d92:	2301      	movs	r3, #1
 8008d94:	e12b      	b.n	8008fee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d106      	bne.n	8008db0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f7fd fc02 	bl	80065b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2224      	movs	r2, #36	@ 0x24
 8008db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681a      	ldr	r2, [r3, #0]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f022 0201 	bic.w	r2, r2, #1
 8008dc6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008dd6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008de6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008de8:	f001 fc2c 	bl	800a644 <HAL_RCC_GetPCLK1Freq>
 8008dec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	4a81      	ldr	r2, [pc, #516]	@ (8008ff8 <HAL_I2C_Init+0x274>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d807      	bhi.n	8008e08 <HAL_I2C_Init+0x84>
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	4a80      	ldr	r2, [pc, #512]	@ (8008ffc <HAL_I2C_Init+0x278>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	bf94      	ite	ls
 8008e00:	2301      	movls	r3, #1
 8008e02:	2300      	movhi	r3, #0
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	e006      	b.n	8008e16 <HAL_I2C_Init+0x92>
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4a7d      	ldr	r2, [pc, #500]	@ (8009000 <HAL_I2C_Init+0x27c>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	bf94      	ite	ls
 8008e10:	2301      	movls	r3, #1
 8008e12:	2300      	movhi	r3, #0
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d001      	beq.n	8008e1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e0e7      	b.n	8008fee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	4a78      	ldr	r2, [pc, #480]	@ (8009004 <HAL_I2C_Init+0x280>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	0c9b      	lsrs	r3, r3, #18
 8008e28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68ba      	ldr	r2, [r7, #8]
 8008e3a:	430a      	orrs	r2, r1
 8008e3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6a1b      	ldr	r3, [r3, #32]
 8008e44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8008ff8 <HAL_I2C_Init+0x274>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d802      	bhi.n	8008e58 <HAL_I2C_Init+0xd4>
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	3301      	adds	r3, #1
 8008e56:	e009      	b.n	8008e6c <HAL_I2C_Init+0xe8>
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008e5e:	fb02 f303 	mul.w	r3, r2, r3
 8008e62:	4a69      	ldr	r2, [pc, #420]	@ (8009008 <HAL_I2C_Init+0x284>)
 8008e64:	fba2 2303 	umull	r2, r3, r2, r3
 8008e68:	099b      	lsrs	r3, r3, #6
 8008e6a:	3301      	adds	r3, #1
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	6812      	ldr	r2, [r2, #0]
 8008e70:	430b      	orrs	r3, r1
 8008e72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8008e7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	495c      	ldr	r1, [pc, #368]	@ (8008ff8 <HAL_I2C_Init+0x274>)
 8008e88:	428b      	cmp	r3, r1
 8008e8a:	d819      	bhi.n	8008ec0 <HAL_I2C_Init+0x13c>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	1e59      	subs	r1, r3, #1
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	005b      	lsls	r3, r3, #1
 8008e96:	fbb1 f3f3 	udiv	r3, r1, r3
 8008e9a:	1c59      	adds	r1, r3, #1
 8008e9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8008ea0:	400b      	ands	r3, r1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00a      	beq.n	8008ebc <HAL_I2C_Init+0x138>
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	1e59      	subs	r1, r3, #1
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	005b      	lsls	r3, r3, #1
 8008eb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8008eb4:	3301      	adds	r3, #1
 8008eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008eba:	e051      	b.n	8008f60 <HAL_I2C_Init+0x1dc>
 8008ebc:	2304      	movs	r3, #4
 8008ebe:	e04f      	b.n	8008f60 <HAL_I2C_Init+0x1dc>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d111      	bne.n	8008eec <HAL_I2C_Init+0x168>
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	1e58      	subs	r0, r3, #1
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6859      	ldr	r1, [r3, #4]
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	005b      	lsls	r3, r3, #1
 8008ed4:	440b      	add	r3, r1
 8008ed6:	fbb0 f3f3 	udiv	r3, r0, r3
 8008eda:	3301      	adds	r3, #1
 8008edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	bf0c      	ite	eq
 8008ee4:	2301      	moveq	r3, #1
 8008ee6:	2300      	movne	r3, #0
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	e012      	b.n	8008f12 <HAL_I2C_Init+0x18e>
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	1e58      	subs	r0, r3, #1
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6859      	ldr	r1, [r3, #4]
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	440b      	add	r3, r1
 8008efa:	0099      	lsls	r1, r3, #2
 8008efc:	440b      	add	r3, r1
 8008efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f02:	3301      	adds	r3, #1
 8008f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	bf0c      	ite	eq
 8008f0c:	2301      	moveq	r3, #1
 8008f0e:	2300      	movne	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d001      	beq.n	8008f1a <HAL_I2C_Init+0x196>
 8008f16:	2301      	movs	r3, #1
 8008f18:	e022      	b.n	8008f60 <HAL_I2C_Init+0x1dc>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10e      	bne.n	8008f40 <HAL_I2C_Init+0x1bc>
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	1e58      	subs	r0, r3, #1
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6859      	ldr	r1, [r3, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	005b      	lsls	r3, r3, #1
 8008f2e:	440b      	add	r3, r1
 8008f30:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f34:	3301      	adds	r3, #1
 8008f36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008f3e:	e00f      	b.n	8008f60 <HAL_I2C_Init+0x1dc>
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	1e58      	subs	r0, r3, #1
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6859      	ldr	r1, [r3, #4]
 8008f48:	460b      	mov	r3, r1
 8008f4a:	009b      	lsls	r3, r3, #2
 8008f4c:	440b      	add	r3, r1
 8008f4e:	0099      	lsls	r1, r3, #2
 8008f50:	440b      	add	r3, r1
 8008f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f56:	3301      	adds	r3, #1
 8008f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008f5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	6809      	ldr	r1, [r1, #0]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	69da      	ldr	r2, [r3, #28]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6a1b      	ldr	r3, [r3, #32]
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	430a      	orrs	r2, r1
 8008f82:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8008f8e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	6911      	ldr	r1, [r2, #16]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	68d2      	ldr	r2, [r2, #12]
 8008f9a:	4311      	orrs	r1, r2
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	6812      	ldr	r2, [r2, #0]
 8008fa0:	430b      	orrs	r3, r1
 8008fa2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68db      	ldr	r3, [r3, #12]
 8008faa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	695a      	ldr	r2, [r3, #20]
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	431a      	orrs	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f042 0201 	orr.w	r2, r2, #1
 8008fce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2220      	movs	r2, #32
 8008fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	000186a0 	.word	0x000186a0
 8008ffc:	001e847f 	.word	0x001e847f
 8009000:	003d08ff 	.word	0x003d08ff
 8009004:	431bde83 	.word	0x431bde83
 8009008:	10624dd3 	.word	0x10624dd3

0800900c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b088      	sub	sp, #32
 8009010:	af02      	add	r7, sp, #8
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	461a      	mov	r2, r3
 800901a:	4603      	mov	r3, r0
 800901c:	817b      	strh	r3, [r7, #10]
 800901e:	460b      	mov	r3, r1
 8009020:	813b      	strh	r3, [r7, #8]
 8009022:	4613      	mov	r3, r2
 8009024:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009026:	f7fe f933 	bl	8007290 <HAL_GetTick>
 800902a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b20      	cmp	r3, #32
 8009036:	f040 80d9 	bne.w	80091ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	9300      	str	r3, [sp, #0]
 800903e:	2319      	movs	r3, #25
 8009040:	2201      	movs	r2, #1
 8009042:	496d      	ldr	r1, [pc, #436]	@ (80091f8 <HAL_I2C_Mem_Write+0x1ec>)
 8009044:	68f8      	ldr	r0, [r7, #12]
 8009046:	f000 fc8b 	bl	8009960 <I2C_WaitOnFlagUntilTimeout>
 800904a:	4603      	mov	r3, r0
 800904c:	2b00      	cmp	r3, #0
 800904e:	d001      	beq.n	8009054 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009050:	2302      	movs	r3, #2
 8009052:	e0cc      	b.n	80091ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800905a:	2b01      	cmp	r3, #1
 800905c:	d101      	bne.n	8009062 <HAL_I2C_Mem_Write+0x56>
 800905e:	2302      	movs	r3, #2
 8009060:	e0c5      	b.n	80091ee <HAL_I2C_Mem_Write+0x1e2>
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	2201      	movs	r2, #1
 8009066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0301 	and.w	r3, r3, #1
 8009074:	2b01      	cmp	r3, #1
 8009076:	d007      	beq.n	8009088 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f042 0201 	orr.w	r2, r2, #1
 8009086:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	681a      	ldr	r2, [r3, #0]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009096:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2221      	movs	r2, #33	@ 0x21
 800909c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2240      	movs	r2, #64	@ 0x40
 80090a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6a3a      	ldr	r2, [r7, #32]
 80090b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80090b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4a4d      	ldr	r2, [pc, #308]	@ (80091fc <HAL_I2C_Mem_Write+0x1f0>)
 80090c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090ca:	88f8      	ldrh	r0, [r7, #6]
 80090cc:	893a      	ldrh	r2, [r7, #8]
 80090ce:	8979      	ldrh	r1, [r7, #10]
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	9301      	str	r3, [sp, #4]
 80090d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	4603      	mov	r3, r0
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 fac2 	bl	8009664 <I2C_RequestMemoryWrite>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d052      	beq.n	800918c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e081      	b.n	80091ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80090ee:	68f8      	ldr	r0, [r7, #12]
 80090f0:	f000 fd50 	bl	8009b94 <I2C_WaitOnTXEFlagUntilTimeout>
 80090f4:	4603      	mov	r3, r0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00d      	beq.n	8009116 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d107      	bne.n	8009112 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009110:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e06b      	b.n	80091ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800911a:	781a      	ldrb	r2, [r3, #0]
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009126:	1c5a      	adds	r2, r3, #1
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009130:	3b01      	subs	r3, #1
 8009132:	b29a      	uxth	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800913c:	b29b      	uxth	r3, r3
 800913e:	3b01      	subs	r3, #1
 8009140:	b29a      	uxth	r2, r3
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	695b      	ldr	r3, [r3, #20]
 800914c:	f003 0304 	and.w	r3, r3, #4
 8009150:	2b04      	cmp	r3, #4
 8009152:	d11b      	bne.n	800918c <HAL_I2C_Mem_Write+0x180>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009158:	2b00      	cmp	r3, #0
 800915a:	d017      	beq.n	800918c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009160:	781a      	ldrb	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009176:	3b01      	subs	r3, #1
 8009178:	b29a      	uxth	r2, r3
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009182:	b29b      	uxth	r3, r3
 8009184:	3b01      	subs	r3, #1
 8009186:	b29a      	uxth	r2, r3
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1aa      	bne.n	80090ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f000 fd43 	bl	8009c24 <I2C_WaitOnBTFFlagUntilTimeout>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00d      	beq.n	80091c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091a8:	2b04      	cmp	r3, #4
 80091aa:	d107      	bne.n	80091bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e016      	b.n	80091ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80091ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2220      	movs	r2, #32
 80091d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2200      	movs	r2, #0
 80091e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	e000      	b.n	80091ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80091ec:	2302      	movs	r3, #2
  }
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3718      	adds	r7, #24
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	00100002 	.word	0x00100002
 80091fc:	ffff0000 	.word	0xffff0000

08009200 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b08c      	sub	sp, #48	@ 0x30
 8009204:	af02      	add	r7, sp, #8
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	4608      	mov	r0, r1
 800920a:	4611      	mov	r1, r2
 800920c:	461a      	mov	r2, r3
 800920e:	4603      	mov	r3, r0
 8009210:	817b      	strh	r3, [r7, #10]
 8009212:	460b      	mov	r3, r1
 8009214:	813b      	strh	r3, [r7, #8]
 8009216:	4613      	mov	r3, r2
 8009218:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800921a:	f7fe f839 	bl	8007290 <HAL_GetTick>
 800921e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009226:	b2db      	uxtb	r3, r3
 8009228:	2b20      	cmp	r3, #32
 800922a:	f040 8214 	bne.w	8009656 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800922e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	2319      	movs	r3, #25
 8009234:	2201      	movs	r2, #1
 8009236:	497b      	ldr	r1, [pc, #492]	@ (8009424 <HAL_I2C_Mem_Read+0x224>)
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 fb91 	bl	8009960 <I2C_WaitOnFlagUntilTimeout>
 800923e:	4603      	mov	r3, r0
 8009240:	2b00      	cmp	r3, #0
 8009242:	d001      	beq.n	8009248 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009244:	2302      	movs	r3, #2
 8009246:	e207      	b.n	8009658 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800924e:	2b01      	cmp	r3, #1
 8009250:	d101      	bne.n	8009256 <HAL_I2C_Mem_Read+0x56>
 8009252:	2302      	movs	r3, #2
 8009254:	e200      	b.n	8009658 <HAL_I2C_Mem_Read+0x458>
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2201      	movs	r2, #1
 800925a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b01      	cmp	r3, #1
 800926a:	d007      	beq.n	800927c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f042 0201 	orr.w	r2, r2, #1
 800927a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800928a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	2222      	movs	r2, #34	@ 0x22
 8009290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	2240      	movs	r2, #64	@ 0x40
 8009298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80092ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80092b2:	b29a      	uxth	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	4a5b      	ldr	r2, [pc, #364]	@ (8009428 <HAL_I2C_Mem_Read+0x228>)
 80092bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80092be:	88f8      	ldrh	r0, [r7, #6]
 80092c0:	893a      	ldrh	r2, [r7, #8]
 80092c2:	8979      	ldrh	r1, [r7, #10]
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	4603      	mov	r3, r0
 80092ce:	68f8      	ldr	r0, [r7, #12]
 80092d0:	f000 fa5e 	bl	8009790 <I2C_RequestMemoryRead>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e1bc      	b.n	8009658 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d113      	bne.n	800930e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092e6:	2300      	movs	r3, #0
 80092e8:	623b      	str	r3, [r7, #32]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	623b      	str	r3, [r7, #32]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	623b      	str	r3, [r7, #32]
 80092fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	e190      	b.n	8009630 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009312:	2b01      	cmp	r3, #1
 8009314:	d11b      	bne.n	800934e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009326:	2300      	movs	r3, #0
 8009328:	61fb      	str	r3, [r7, #28]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	695b      	ldr	r3, [r3, #20]
 8009330:	61fb      	str	r3, [r7, #28]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	699b      	ldr	r3, [r3, #24]
 8009338:	61fb      	str	r3, [r7, #28]
 800933a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	e170      	b.n	8009630 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009352:	2b02      	cmp	r3, #2
 8009354:	d11b      	bne.n	800938e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	681a      	ldr	r2, [r3, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009364:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009374:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009376:	2300      	movs	r3, #0
 8009378:	61bb      	str	r3, [r7, #24]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	695b      	ldr	r3, [r3, #20]
 8009380:	61bb      	str	r3, [r7, #24]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	699b      	ldr	r3, [r3, #24]
 8009388:	61bb      	str	r3, [r7, #24]
 800938a:	69bb      	ldr	r3, [r7, #24]
 800938c:	e150      	b.n	8009630 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800938e:	2300      	movs	r3, #0
 8009390:	617b      	str	r3, [r7, #20]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	695b      	ldr	r3, [r3, #20]
 8009398:	617b      	str	r3, [r7, #20]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	699b      	ldr	r3, [r3, #24]
 80093a0:	617b      	str	r3, [r7, #20]
 80093a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80093a4:	e144      	b.n	8009630 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093aa:	2b03      	cmp	r3, #3
 80093ac:	f200 80f1 	bhi.w	8009592 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d123      	bne.n	8009400 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 fc79 	bl	8009cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	e145      	b.n	8009658 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	691a      	ldr	r2, [r3, #16]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093d6:	b2d2      	uxtb	r2, r2
 80093d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093de:	1c5a      	adds	r2, r3, #1
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80093e8:	3b01      	subs	r3, #1
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80093fe:	e117      	b.n	8009630 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009404:	2b02      	cmp	r3, #2
 8009406:	d14e      	bne.n	80094a6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940e:	2200      	movs	r2, #0
 8009410:	4906      	ldr	r1, [pc, #24]	@ (800942c <HAL_I2C_Mem_Read+0x22c>)
 8009412:	68f8      	ldr	r0, [r7, #12]
 8009414:	f000 faa4 	bl	8009960 <I2C_WaitOnFlagUntilTimeout>
 8009418:	4603      	mov	r3, r0
 800941a:	2b00      	cmp	r3, #0
 800941c:	d008      	beq.n	8009430 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800941e:	2301      	movs	r3, #1
 8009420:	e11a      	b.n	8009658 <HAL_I2C_Mem_Read+0x458>
 8009422:	bf00      	nop
 8009424:	00100002 	.word	0x00100002
 8009428:	ffff0000 	.word	0xffff0000
 800942c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800943e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	691a      	ldr	r2, [r3, #16]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800944a:	b2d2      	uxtb	r2, r2
 800944c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009452:	1c5a      	adds	r2, r3, #1
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800945c:	3b01      	subs	r3, #1
 800945e:	b29a      	uxth	r2, r3
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009468:	b29b      	uxth	r3, r3
 800946a:	3b01      	subs	r3, #1
 800946c:	b29a      	uxth	r2, r3
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	691a      	ldr	r2, [r3, #16]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800947c:	b2d2      	uxtb	r2, r2
 800947e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009484:	1c5a      	adds	r2, r3, #1
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800948e:	3b01      	subs	r3, #1
 8009490:	b29a      	uxth	r2, r3
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800949a:	b29b      	uxth	r3, r3
 800949c:	3b01      	subs	r3, #1
 800949e:	b29a      	uxth	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80094a4:	e0c4      	b.n	8009630 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80094a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ac:	2200      	movs	r2, #0
 80094ae:	496c      	ldr	r1, [pc, #432]	@ (8009660 <HAL_I2C_Mem_Read+0x460>)
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f000 fa55 	bl	8009960 <I2C_WaitOnFlagUntilTimeout>
 80094b6:	4603      	mov	r3, r0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d001      	beq.n	80094c0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e0cb      	b.n	8009658 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	691a      	ldr	r2, [r3, #16]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094da:	b2d2      	uxtb	r2, r2
 80094dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e2:	1c5a      	adds	r2, r3, #1
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80094ec:	3b01      	subs	r3, #1
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	3b01      	subs	r3, #1
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009508:	2200      	movs	r2, #0
 800950a:	4955      	ldr	r1, [pc, #340]	@ (8009660 <HAL_I2C_Mem_Read+0x460>)
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f000 fa27 	bl	8009960 <I2C_WaitOnFlagUntilTimeout>
 8009512:	4603      	mov	r3, r0
 8009514:	2b00      	cmp	r3, #0
 8009516:	d001      	beq.n	800951c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009518:	2301      	movs	r3, #1
 800951a:	e09d      	b.n	8009658 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681a      	ldr	r2, [r3, #0]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800952a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	691a      	ldr	r2, [r3, #16]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009536:	b2d2      	uxtb	r2, r2
 8009538:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800953e:	1c5a      	adds	r2, r3, #1
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009548:	3b01      	subs	r3, #1
 800954a:	b29a      	uxth	r2, r3
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009554:	b29b      	uxth	r3, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	b29a      	uxth	r2, r3
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	691a      	ldr	r2, [r3, #16]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009568:	b2d2      	uxtb	r2, r2
 800956a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009570:	1c5a      	adds	r2, r3, #1
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009586:	b29b      	uxth	r3, r3
 8009588:	3b01      	subs	r3, #1
 800958a:	b29a      	uxth	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8009590:	e04e      	b.n	8009630 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009592:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009594:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009596:	68f8      	ldr	r0, [r7, #12]
 8009598:	f000 fb8c 	bl	8009cb4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
 80095a4:	e058      	b.n	8009658 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691a      	ldr	r2, [r3, #16]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b0:	b2d2      	uxtb	r2, r2
 80095b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b8:	1c5a      	adds	r2, r3, #1
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b29a      	uxth	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	3b01      	subs	r3, #1
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	695b      	ldr	r3, [r3, #20]
 80095de:	f003 0304 	and.w	r3, r3, #4
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d124      	bne.n	8009630 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80095ea:	2b03      	cmp	r3, #3
 80095ec:	d107      	bne.n	80095fe <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095fc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	691a      	ldr	r2, [r3, #16]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009608:	b2d2      	uxtb	r2, r2
 800960a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009610:	1c5a      	adds	r2, r3, #1
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800961a:	3b01      	subs	r3, #1
 800961c:	b29a      	uxth	r2, r3
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009626:	b29b      	uxth	r3, r3
 8009628:	3b01      	subs	r3, #1
 800962a:	b29a      	uxth	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009634:	2b00      	cmp	r3, #0
 8009636:	f47f aeb6 	bne.w	80093a6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	2220      	movs	r2, #32
 800963e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2200      	movs	r2, #0
 8009646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2200      	movs	r2, #0
 800964e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	e000      	b.n	8009658 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009656:	2302      	movs	r3, #2
  }
}
 8009658:	4618      	mov	r0, r3
 800965a:	3728      	adds	r7, #40	@ 0x28
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	00010004 	.word	0x00010004

08009664 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b088      	sub	sp, #32
 8009668:	af02      	add	r7, sp, #8
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	4608      	mov	r0, r1
 800966e:	4611      	mov	r1, r2
 8009670:	461a      	mov	r2, r3
 8009672:	4603      	mov	r3, r0
 8009674:	817b      	strh	r3, [r7, #10]
 8009676:	460b      	mov	r3, r1
 8009678:	813b      	strh	r3, [r7, #8]
 800967a:	4613      	mov	r3, r2
 800967c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800968c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800968e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009690:	9300      	str	r3, [sp, #0]
 8009692:	6a3b      	ldr	r3, [r7, #32]
 8009694:	2200      	movs	r2, #0
 8009696:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 f960 	bl	8009960 <I2C_WaitOnFlagUntilTimeout>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00d      	beq.n	80096c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096b4:	d103      	bne.n	80096be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096bc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80096be:	2303      	movs	r3, #3
 80096c0:	e05f      	b.n	8009782 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80096c2:	897b      	ldrh	r3, [r7, #10]
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	461a      	mov	r2, r3
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80096d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80096d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096d4:	6a3a      	ldr	r2, [r7, #32]
 80096d6:	492d      	ldr	r1, [pc, #180]	@ (800978c <I2C_RequestMemoryWrite+0x128>)
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f000 f9bb 	bl	8009a54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80096de:	4603      	mov	r3, r0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e04c      	b.n	8009782 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096e8:	2300      	movs	r3, #0
 80096ea:	617b      	str	r3, [r7, #20]
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	617b      	str	r3, [r7, #20]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	699b      	ldr	r3, [r3, #24]
 80096fa:	617b      	str	r3, [r7, #20]
 80096fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80096fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009700:	6a39      	ldr	r1, [r7, #32]
 8009702:	68f8      	ldr	r0, [r7, #12]
 8009704:	f000 fa46 	bl	8009b94 <I2C_WaitOnTXEFlagUntilTimeout>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00d      	beq.n	800972a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009712:	2b04      	cmp	r3, #4
 8009714:	d107      	bne.n	8009726 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	681a      	ldr	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009724:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e02b      	b.n	8009782 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800972a:	88fb      	ldrh	r3, [r7, #6]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d105      	bne.n	800973c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009730:	893b      	ldrh	r3, [r7, #8]
 8009732:	b2da      	uxtb	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	611a      	str	r2, [r3, #16]
 800973a:	e021      	b.n	8009780 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800973c:	893b      	ldrh	r3, [r7, #8]
 800973e:	0a1b      	lsrs	r3, r3, #8
 8009740:	b29b      	uxth	r3, r3
 8009742:	b2da      	uxtb	r2, r3
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800974a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800974c:	6a39      	ldr	r1, [r7, #32]
 800974e:	68f8      	ldr	r0, [r7, #12]
 8009750:	f000 fa20 	bl	8009b94 <I2C_WaitOnTXEFlagUntilTimeout>
 8009754:	4603      	mov	r3, r0
 8009756:	2b00      	cmp	r3, #0
 8009758:	d00d      	beq.n	8009776 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800975e:	2b04      	cmp	r3, #4
 8009760:	d107      	bne.n	8009772 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009770:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e005      	b.n	8009782 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009776:	893b      	ldrh	r3, [r7, #8]
 8009778:	b2da      	uxtb	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	00010002 	.word	0x00010002

08009790 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af02      	add	r7, sp, #8
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	4608      	mov	r0, r1
 800979a:	4611      	mov	r1, r2
 800979c:	461a      	mov	r2, r3
 800979e:	4603      	mov	r3, r0
 80097a0:	817b      	strh	r3, [r7, #10]
 80097a2:	460b      	mov	r3, r1
 80097a4:	813b      	strh	r3, [r7, #8]
 80097a6:	4613      	mov	r3, r2
 80097a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	681a      	ldr	r2, [r3, #0]
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80097b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80097c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	6a3b      	ldr	r3, [r7, #32]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f000 f8c2 	bl	8009960 <I2C_WaitOnFlagUntilTimeout>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d00d      	beq.n	80097fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097f0:	d103      	bne.n	80097fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80097f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80097fa:	2303      	movs	r3, #3
 80097fc:	e0aa      	b.n	8009954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80097fe:	897b      	ldrh	r3, [r7, #10]
 8009800:	b2db      	uxtb	r3, r3
 8009802:	461a      	mov	r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800980c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009810:	6a3a      	ldr	r2, [r7, #32]
 8009812:	4952      	ldr	r1, [pc, #328]	@ (800995c <I2C_RequestMemoryRead+0x1cc>)
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 f91d 	bl	8009a54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800981a:	4603      	mov	r3, r0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	e097      	b.n	8009954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009824:	2300      	movs	r3, #0
 8009826:	617b      	str	r3, [r7, #20]
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	695b      	ldr	r3, [r3, #20]
 800982e:	617b      	str	r3, [r7, #20]
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800983a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800983c:	6a39      	ldr	r1, [r7, #32]
 800983e:	68f8      	ldr	r0, [r7, #12]
 8009840:	f000 f9a8 	bl	8009b94 <I2C_WaitOnTXEFlagUntilTimeout>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d00d      	beq.n	8009866 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984e:	2b04      	cmp	r3, #4
 8009850:	d107      	bne.n	8009862 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009860:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	e076      	b.n	8009954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009866:	88fb      	ldrh	r3, [r7, #6]
 8009868:	2b01      	cmp	r3, #1
 800986a:	d105      	bne.n	8009878 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800986c:	893b      	ldrh	r3, [r7, #8]
 800986e:	b2da      	uxtb	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	611a      	str	r2, [r3, #16]
 8009876:	e021      	b.n	80098bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009878:	893b      	ldrh	r3, [r7, #8]
 800987a:	0a1b      	lsrs	r3, r3, #8
 800987c:	b29b      	uxth	r3, r3
 800987e:	b2da      	uxtb	r2, r3
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009888:	6a39      	ldr	r1, [r7, #32]
 800988a:	68f8      	ldr	r0, [r7, #12]
 800988c:	f000 f982 	bl	8009b94 <I2C_WaitOnTXEFlagUntilTimeout>
 8009890:	4603      	mov	r3, r0
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00d      	beq.n	80098b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800989a:	2b04      	cmp	r3, #4
 800989c:	d107      	bne.n	80098ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80098ae:	2301      	movs	r3, #1
 80098b0:	e050      	b.n	8009954 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80098b2:	893b      	ldrh	r3, [r7, #8]
 80098b4:	b2da      	uxtb	r2, r3
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80098bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098be:	6a39      	ldr	r1, [r7, #32]
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 f967 	bl	8009b94 <I2C_WaitOnTXEFlagUntilTimeout>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d00d      	beq.n	80098e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098d0:	2b04      	cmp	r3, #4
 80098d2:	d107      	bne.n	80098e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80098e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e035      	b.n	8009954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80098f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	2200      	movs	r2, #0
 8009900:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f82b 	bl	8009960 <I2C_WaitOnFlagUntilTimeout>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00d      	beq.n	800992c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800991a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800991e:	d103      	bne.n	8009928 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009926:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e013      	b.n	8009954 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800992c:	897b      	ldrh	r3, [r7, #10]
 800992e:	b2db      	uxtb	r3, r3
 8009930:	f043 0301 	orr.w	r3, r3, #1
 8009934:	b2da      	uxtb	r2, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800993c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993e:	6a3a      	ldr	r2, [r7, #32]
 8009940:	4906      	ldr	r1, [pc, #24]	@ (800995c <I2C_RequestMemoryRead+0x1cc>)
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f000 f886 	bl	8009a54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009948:	4603      	mov	r3, r0
 800994a:	2b00      	cmp	r3, #0
 800994c:	d001      	beq.n	8009952 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3718      	adds	r7, #24
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	00010002 	.word	0x00010002

08009960 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	603b      	str	r3, [r7, #0]
 800996c:	4613      	mov	r3, r2
 800996e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009970:	e048      	b.n	8009a04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009978:	d044      	beq.n	8009a04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800997a:	f7fd fc89 	bl	8007290 <HAL_GetTick>
 800997e:	4602      	mov	r2, r0
 8009980:	69bb      	ldr	r3, [r7, #24]
 8009982:	1ad3      	subs	r3, r2, r3
 8009984:	683a      	ldr	r2, [r7, #0]
 8009986:	429a      	cmp	r2, r3
 8009988:	d302      	bcc.n	8009990 <I2C_WaitOnFlagUntilTimeout+0x30>
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d139      	bne.n	8009a04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	0c1b      	lsrs	r3, r3, #16
 8009994:	b2db      	uxtb	r3, r3
 8009996:	2b01      	cmp	r3, #1
 8009998:	d10d      	bne.n	80099b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	43da      	mvns	r2, r3
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	4013      	ands	r3, r2
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	bf0c      	ite	eq
 80099ac:	2301      	moveq	r3, #1
 80099ae:	2300      	movne	r3, #0
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	461a      	mov	r2, r3
 80099b4:	e00c      	b.n	80099d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	43da      	mvns	r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	4013      	ands	r3, r2
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	bf0c      	ite	eq
 80099c8:	2301      	moveq	r3, #1
 80099ca:	2300      	movne	r3, #0
 80099cc:	b2db      	uxtb	r3, r3
 80099ce:	461a      	mov	r2, r3
 80099d0:	79fb      	ldrb	r3, [r7, #7]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d116      	bne.n	8009a04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2220      	movs	r2, #32
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099f0:	f043 0220 	orr.w	r2, r3, #32
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009a00:	2301      	movs	r3, #1
 8009a02:	e023      	b.n	8009a4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	0c1b      	lsrs	r3, r3, #16
 8009a08:	b2db      	uxtb	r3, r3
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d10d      	bne.n	8009a2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	695b      	ldr	r3, [r3, #20]
 8009a14:	43da      	mvns	r2, r3
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	4013      	ands	r3, r2
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	bf0c      	ite	eq
 8009a20:	2301      	moveq	r3, #1
 8009a22:	2300      	movne	r3, #0
 8009a24:	b2db      	uxtb	r3, r3
 8009a26:	461a      	mov	r2, r3
 8009a28:	e00c      	b.n	8009a44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	699b      	ldr	r3, [r3, #24]
 8009a30:	43da      	mvns	r2, r3
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	4013      	ands	r3, r2
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	bf0c      	ite	eq
 8009a3c:	2301      	moveq	r3, #1
 8009a3e:	2300      	movne	r3, #0
 8009a40:	b2db      	uxtb	r3, r3
 8009a42:	461a      	mov	r2, r3
 8009a44:	79fb      	ldrb	r3, [r7, #7]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d093      	beq.n	8009972 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	3710      	adds	r7, #16
 8009a50:	46bd      	mov	sp, r7
 8009a52:	bd80      	pop	{r7, pc}

08009a54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
 8009a60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009a62:	e071      	b.n	8009b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	695b      	ldr	r3, [r3, #20]
 8009a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a72:	d123      	bne.n	8009abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009a8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2200      	movs	r2, #0
 8009a92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2220      	movs	r2, #32
 8009a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009aa8:	f043 0204 	orr.w	r2, r3, #4
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	e067      	b.n	8009b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ac2:	d041      	beq.n	8009b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ac4:	f7fd fbe4 	bl	8007290 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	687a      	ldr	r2, [r7, #4]
 8009ad0:	429a      	cmp	r2, r3
 8009ad2:	d302      	bcc.n	8009ada <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d136      	bne.n	8009b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	0c1b      	lsrs	r3, r3, #16
 8009ade:	b2db      	uxtb	r3, r3
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d10c      	bne.n	8009afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	43da      	mvns	r2, r3
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	4013      	ands	r3, r2
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	bf14      	ite	ne
 8009af6:	2301      	movne	r3, #1
 8009af8:	2300      	moveq	r3, #0
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	e00b      	b.n	8009b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	43da      	mvns	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	4013      	ands	r3, r2
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	bf14      	ite	ne
 8009b10:	2301      	movne	r3, #1
 8009b12:	2300      	moveq	r3, #0
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d016      	beq.n	8009b48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b34:	f043 0220 	orr.w	r2, r3, #32
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e021      	b.n	8009b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	0c1b      	lsrs	r3, r3, #16
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d10c      	bne.n	8009b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	695b      	ldr	r3, [r3, #20]
 8009b58:	43da      	mvns	r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	bf14      	ite	ne
 8009b64:	2301      	movne	r3, #1
 8009b66:	2300      	moveq	r3, #0
 8009b68:	b2db      	uxtb	r3, r3
 8009b6a:	e00b      	b.n	8009b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	43da      	mvns	r2, r3
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	4013      	ands	r3, r2
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	bf14      	ite	ne
 8009b7e:	2301      	movne	r3, #1
 8009b80:	2300      	moveq	r3, #0
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f47f af6d 	bne.w	8009a64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	60b9      	str	r1, [r7, #8]
 8009b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ba0:	e034      	b.n	8009c0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f8e3 	bl	8009d6e <I2C_IsAcknowledgeFailed>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d001      	beq.n	8009bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	e034      	b.n	8009c1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009bb8:	d028      	beq.n	8009c0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bba:	f7fd fb69 	bl	8007290 <HAL_GetTick>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	1ad3      	subs	r3, r2, r3
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d302      	bcc.n	8009bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d11d      	bne.n	8009c0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	695b      	ldr	r3, [r3, #20]
 8009bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bda:	2b80      	cmp	r3, #128	@ 0x80
 8009bdc:	d016      	beq.n	8009c0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2220      	movs	r2, #32
 8009be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf8:	f043 0220 	orr.w	r2, r3, #32
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c08:	2301      	movs	r3, #1
 8009c0a:	e007      	b.n	8009c1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	695b      	ldr	r3, [r3, #20]
 8009c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c16:	2b80      	cmp	r3, #128	@ 0x80
 8009c18:	d1c3      	bne.n	8009ba2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c30:	e034      	b.n	8009c9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f000 f89b 	bl	8009d6e <I2C_IsAcknowledgeFailed>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d001      	beq.n	8009c42 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e034      	b.n	8009cac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c48:	d028      	beq.n	8009c9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4a:	f7fd fb21 	bl	8007290 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	68ba      	ldr	r2, [r7, #8]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d302      	bcc.n	8009c60 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d11d      	bne.n	8009c9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	695b      	ldr	r3, [r3, #20]
 8009c66:	f003 0304 	and.w	r3, r3, #4
 8009c6a:	2b04      	cmp	r3, #4
 8009c6c:	d016      	beq.n	8009c9c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	2200      	movs	r2, #0
 8009c72:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2220      	movs	r2, #32
 8009c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c88:	f043 0220 	orr.w	r2, r3, #32
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e007      	b.n	8009cac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	f003 0304 	and.w	r3, r3, #4
 8009ca6:	2b04      	cmp	r3, #4
 8009ca8:	d1c3      	bne.n	8009c32 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009caa:	2300      	movs	r3, #0
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}

08009cb4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009cc0:	e049      	b.n	8009d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	695b      	ldr	r3, [r3, #20]
 8009cc8:	f003 0310 	and.w	r3, r3, #16
 8009ccc:	2b10      	cmp	r3, #16
 8009cce:	d119      	bne.n	8009d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f06f 0210 	mvn.w	r2, #16
 8009cd8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2220      	movs	r2, #32
 8009ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2200      	movs	r2, #0
 8009cec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	e030      	b.n	8009d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d04:	f7fd fac4 	bl	8007290 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	68ba      	ldr	r2, [r7, #8]
 8009d10:	429a      	cmp	r2, r3
 8009d12:	d302      	bcc.n	8009d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d11d      	bne.n	8009d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d24:	2b40      	cmp	r3, #64	@ 0x40
 8009d26:	d016      	beq.n	8009d56 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d42:	f043 0220 	orr.w	r2, r3, #32
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e007      	b.n	8009d66 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	695b      	ldr	r3, [r3, #20]
 8009d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d60:	2b40      	cmp	r3, #64	@ 0x40
 8009d62:	d1ae      	bne.n	8009cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009d64:	2300      	movs	r3, #0
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	695b      	ldr	r3, [r3, #20]
 8009d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d84:	d11b      	bne.n	8009dbe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8009d8e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009daa:	f043 0204 	orr.w	r2, r3, #4
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e000      	b.n	8009dc0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d101      	bne.n	8009dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009dda:	2301      	movs	r3, #1
 8009ddc:	e267      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d075      	beq.n	8009ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dea:	4b88      	ldr	r3, [pc, #544]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	f003 030c 	and.w	r3, r3, #12
 8009df2:	2b04      	cmp	r3, #4
 8009df4:	d00c      	beq.n	8009e10 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009df6:	4b85      	ldr	r3, [pc, #532]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009dfe:	2b08      	cmp	r3, #8
 8009e00:	d112      	bne.n	8009e28 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009e02:	4b82      	ldr	r3, [pc, #520]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009e0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009e0e:	d10b      	bne.n	8009e28 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e10:	4b7e      	ldr	r3, [pc, #504]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d05b      	beq.n	8009ed4 <HAL_RCC_OscConfig+0x108>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d157      	bne.n	8009ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009e24:	2301      	movs	r3, #1
 8009e26:	e242      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	685b      	ldr	r3, [r3, #4]
 8009e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e30:	d106      	bne.n	8009e40 <HAL_RCC_OscConfig+0x74>
 8009e32:	4b76      	ldr	r3, [pc, #472]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	4a75      	ldr	r2, [pc, #468]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	e01d      	b.n	8009e7c <HAL_RCC_OscConfig+0xb0>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009e48:	d10c      	bne.n	8009e64 <HAL_RCC_OscConfig+0x98>
 8009e4a:	4b70      	ldr	r3, [pc, #448]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a6f      	ldr	r2, [pc, #444]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009e54:	6013      	str	r3, [r2, #0]
 8009e56:	4b6d      	ldr	r3, [pc, #436]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a6c      	ldr	r2, [pc, #432]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e60:	6013      	str	r3, [r2, #0]
 8009e62:	e00b      	b.n	8009e7c <HAL_RCC_OscConfig+0xb0>
 8009e64:	4b69      	ldr	r3, [pc, #420]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a68      	ldr	r2, [pc, #416]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e6e:	6013      	str	r3, [r2, #0]
 8009e70:	4b66      	ldr	r3, [pc, #408]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a65      	ldr	r2, [pc, #404]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d013      	beq.n	8009eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e84:	f7fd fa04 	bl	8007290 <HAL_GetTick>
 8009e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e8a:	e008      	b.n	8009e9e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009e8c:	f7fd fa00 	bl	8007290 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b64      	cmp	r3, #100	@ 0x64
 8009e98:	d901      	bls.n	8009e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e207      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009e9e:	4b5b      	ldr	r3, [pc, #364]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0f0      	beq.n	8009e8c <HAL_RCC_OscConfig+0xc0>
 8009eaa:	e014      	b.n	8009ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eac:	f7fd f9f0 	bl	8007290 <HAL_GetTick>
 8009eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009eb2:	e008      	b.n	8009ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009eb4:	f7fd f9ec 	bl	8007290 <HAL_GetTick>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	1ad3      	subs	r3, r2, r3
 8009ebe:	2b64      	cmp	r3, #100	@ 0x64
 8009ec0:	d901      	bls.n	8009ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e1f3      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ec6:	4b51      	ldr	r3, [pc, #324]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d1f0      	bne.n	8009eb4 <HAL_RCC_OscConfig+0xe8>
 8009ed2:	e000      	b.n	8009ed6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d063      	beq.n	8009faa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009ee4:	689b      	ldr	r3, [r3, #8]
 8009ee6:	f003 030c 	and.w	r3, r3, #12
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d00b      	beq.n	8009f06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009eee:	4b47      	ldr	r3, [pc, #284]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009ef6:	2b08      	cmp	r3, #8
 8009ef8:	d11c      	bne.n	8009f34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009efa:	4b44      	ldr	r3, [pc, #272]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d116      	bne.n	8009f34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f06:	4b41      	ldr	r3, [pc, #260]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0302 	and.w	r3, r3, #2
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d005      	beq.n	8009f1e <HAL_RCC_OscConfig+0x152>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d001      	beq.n	8009f1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e1c7      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	691b      	ldr	r3, [r3, #16]
 8009f2a:	00db      	lsls	r3, r3, #3
 8009f2c:	4937      	ldr	r1, [pc, #220]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009f32:	e03a      	b.n	8009faa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d020      	beq.n	8009f7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009f3c:	4b34      	ldr	r3, [pc, #208]	@ (800a010 <HAL_RCC_OscConfig+0x244>)
 8009f3e:	2201      	movs	r2, #1
 8009f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f42:	f7fd f9a5 	bl	8007290 <HAL_GetTick>
 8009f46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f48:	e008      	b.n	8009f5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f4a:	f7fd f9a1 	bl	8007290 <HAL_GetTick>
 8009f4e:	4602      	mov	r2, r0
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	d901      	bls.n	8009f5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009f58:	2303      	movs	r3, #3
 8009f5a:	e1a8      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009f5c:	4b2b      	ldr	r3, [pc, #172]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f003 0302 	and.w	r3, r3, #2
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d0f0      	beq.n	8009f4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f68:	4b28      	ldr	r3, [pc, #160]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	00db      	lsls	r3, r3, #3
 8009f76:	4925      	ldr	r1, [pc, #148]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	600b      	str	r3, [r1, #0]
 8009f7c:	e015      	b.n	8009faa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f7e:	4b24      	ldr	r3, [pc, #144]	@ (800a010 <HAL_RCC_OscConfig+0x244>)
 8009f80:	2200      	movs	r2, #0
 8009f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f84:	f7fd f984 	bl	8007290 <HAL_GetTick>
 8009f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f8a:	e008      	b.n	8009f9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009f8c:	f7fd f980 	bl	8007290 <HAL_GetTick>
 8009f90:	4602      	mov	r2, r0
 8009f92:	693b      	ldr	r3, [r7, #16]
 8009f94:	1ad3      	subs	r3, r2, r3
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d901      	bls.n	8009f9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e187      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	f003 0302 	and.w	r3, r3, #2
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1f0      	bne.n	8009f8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 0308 	and.w	r3, r3, #8
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d036      	beq.n	800a024 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d016      	beq.n	8009fec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009fbe:	4b15      	ldr	r3, [pc, #84]	@ (800a014 <HAL_RCC_OscConfig+0x248>)
 8009fc0:	2201      	movs	r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fc4:	f7fd f964 	bl	8007290 <HAL_GetTick>
 8009fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fca:	e008      	b.n	8009fde <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009fcc:	f7fd f960 	bl	8007290 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b02      	cmp	r3, #2
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e167      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009fde:	4b0b      	ldr	r3, [pc, #44]	@ (800a00c <HAL_RCC_OscConfig+0x240>)
 8009fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009fe2:	f003 0302 	and.w	r3, r3, #2
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0f0      	beq.n	8009fcc <HAL_RCC_OscConfig+0x200>
 8009fea:	e01b      	b.n	800a024 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009fec:	4b09      	ldr	r3, [pc, #36]	@ (800a014 <HAL_RCC_OscConfig+0x248>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ff2:	f7fd f94d 	bl	8007290 <HAL_GetTick>
 8009ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009ff8:	e00e      	b.n	800a018 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009ffa:	f7fd f949 	bl	8007290 <HAL_GetTick>
 8009ffe:	4602      	mov	r2, r0
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	1ad3      	subs	r3, r2, r3
 800a004:	2b02      	cmp	r3, #2
 800a006:	d907      	bls.n	800a018 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a008:	2303      	movs	r3, #3
 800a00a:	e150      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
 800a00c:	40023800 	.word	0x40023800
 800a010:	42470000 	.word	0x42470000
 800a014:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a018:	4b88      	ldr	r3, [pc, #544]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a01a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a01c:	f003 0302 	and.w	r3, r3, #2
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1ea      	bne.n	8009ffa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 0304 	and.w	r3, r3, #4
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 8097 	beq.w	800a160 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a032:	2300      	movs	r3, #0
 800a034:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a036:	4b81      	ldr	r3, [pc, #516]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a03a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d10f      	bne.n	800a062 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a042:	2300      	movs	r3, #0
 800a044:	60bb      	str	r3, [r7, #8]
 800a046:	4b7d      	ldr	r3, [pc, #500]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a04a:	4a7c      	ldr	r2, [pc, #496]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a04c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a050:	6413      	str	r3, [r2, #64]	@ 0x40
 800a052:	4b7a      	ldr	r3, [pc, #488]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a05a:	60bb      	str	r3, [r7, #8]
 800a05c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a05e:	2301      	movs	r3, #1
 800a060:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a062:	4b77      	ldr	r3, [pc, #476]	@ (800a240 <HAL_RCC_OscConfig+0x474>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d118      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a06e:	4b74      	ldr	r3, [pc, #464]	@ (800a240 <HAL_RCC_OscConfig+0x474>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	4a73      	ldr	r2, [pc, #460]	@ (800a240 <HAL_RCC_OscConfig+0x474>)
 800a074:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a078:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a07a:	f7fd f909 	bl	8007290 <HAL_GetTick>
 800a07e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a080:	e008      	b.n	800a094 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a082:	f7fd f905 	bl	8007290 <HAL_GetTick>
 800a086:	4602      	mov	r2, r0
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	1ad3      	subs	r3, r2, r3
 800a08c:	2b02      	cmp	r3, #2
 800a08e:	d901      	bls.n	800a094 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a090:	2303      	movs	r3, #3
 800a092:	e10c      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a094:	4b6a      	ldr	r3, [pc, #424]	@ (800a240 <HAL_RCC_OscConfig+0x474>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d0f0      	beq.n	800a082 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	2b01      	cmp	r3, #1
 800a0a6:	d106      	bne.n	800a0b6 <HAL_RCC_OscConfig+0x2ea>
 800a0a8:	4b64      	ldr	r3, [pc, #400]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0ac:	4a63      	ldr	r2, [pc, #396]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0ae:	f043 0301 	orr.w	r3, r3, #1
 800a0b2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a0b4:	e01c      	b.n	800a0f0 <HAL_RCC_OscConfig+0x324>
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	2b05      	cmp	r3, #5
 800a0bc:	d10c      	bne.n	800a0d8 <HAL_RCC_OscConfig+0x30c>
 800a0be:	4b5f      	ldr	r3, [pc, #380]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0c2:	4a5e      	ldr	r2, [pc, #376]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0c4:	f043 0304 	orr.w	r3, r3, #4
 800a0c8:	6713      	str	r3, [r2, #112]	@ 0x70
 800a0ca:	4b5c      	ldr	r3, [pc, #368]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0ce:	4a5b      	ldr	r2, [pc, #364]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0d0:	f043 0301 	orr.w	r3, r3, #1
 800a0d4:	6713      	str	r3, [r2, #112]	@ 0x70
 800a0d6:	e00b      	b.n	800a0f0 <HAL_RCC_OscConfig+0x324>
 800a0d8:	4b58      	ldr	r3, [pc, #352]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0dc:	4a57      	ldr	r2, [pc, #348]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0de:	f023 0301 	bic.w	r3, r3, #1
 800a0e2:	6713      	str	r3, [r2, #112]	@ 0x70
 800a0e4:	4b55      	ldr	r3, [pc, #340]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a0e8:	4a54      	ldr	r2, [pc, #336]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a0ea:	f023 0304 	bic.w	r3, r3, #4
 800a0ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	689b      	ldr	r3, [r3, #8]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d015      	beq.n	800a124 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0f8:	f7fd f8ca 	bl	8007290 <HAL_GetTick>
 800a0fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a0fe:	e00a      	b.n	800a116 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a100:	f7fd f8c6 	bl	8007290 <HAL_GetTick>
 800a104:	4602      	mov	r2, r0
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a10e:	4293      	cmp	r3, r2
 800a110:	d901      	bls.n	800a116 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e0cb      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a116:	4b49      	ldr	r3, [pc, #292]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a11a:	f003 0302 	and.w	r3, r3, #2
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d0ee      	beq.n	800a100 <HAL_RCC_OscConfig+0x334>
 800a122:	e014      	b.n	800a14e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a124:	f7fd f8b4 	bl	8007290 <HAL_GetTick>
 800a128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a12a:	e00a      	b.n	800a142 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a12c:	f7fd f8b0 	bl	8007290 <HAL_GetTick>
 800a130:	4602      	mov	r2, r0
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	1ad3      	subs	r3, r2, r3
 800a136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d901      	bls.n	800a142 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e0b5      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a142:	4b3e      	ldr	r3, [pc, #248]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a146:	f003 0302 	and.w	r3, r3, #2
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1ee      	bne.n	800a12c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d105      	bne.n	800a160 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a154:	4b39      	ldr	r3, [pc, #228]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a158:	4a38      	ldr	r2, [pc, #224]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a15a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a15e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	699b      	ldr	r3, [r3, #24]
 800a164:	2b00      	cmp	r3, #0
 800a166:	f000 80a1 	beq.w	800a2ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a16a:	4b34      	ldr	r3, [pc, #208]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a16c:	689b      	ldr	r3, [r3, #8]
 800a16e:	f003 030c 	and.w	r3, r3, #12
 800a172:	2b08      	cmp	r3, #8
 800a174:	d05c      	beq.n	800a230 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	2b02      	cmp	r3, #2
 800a17c:	d141      	bne.n	800a202 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a17e:	4b31      	ldr	r3, [pc, #196]	@ (800a244 <HAL_RCC_OscConfig+0x478>)
 800a180:	2200      	movs	r2, #0
 800a182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a184:	f7fd f884 	bl	8007290 <HAL_GetTick>
 800a188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a18a:	e008      	b.n	800a19e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a18c:	f7fd f880 	bl	8007290 <HAL_GetTick>
 800a190:	4602      	mov	r2, r0
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	1ad3      	subs	r3, r2, r3
 800a196:	2b02      	cmp	r3, #2
 800a198:	d901      	bls.n	800a19e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a19a:	2303      	movs	r3, #3
 800a19c:	e087      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a19e:	4b27      	ldr	r3, [pc, #156]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1f0      	bne.n	800a18c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	69da      	ldr	r2, [r3, #28]
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	6a1b      	ldr	r3, [r3, #32]
 800a1b2:	431a      	orrs	r2, r3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1b8:	019b      	lsls	r3, r3, #6
 800a1ba:	431a      	orrs	r2, r3
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1c0:	085b      	lsrs	r3, r3, #1
 800a1c2:	3b01      	subs	r3, #1
 800a1c4:	041b      	lsls	r3, r3, #16
 800a1c6:	431a      	orrs	r2, r3
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1cc:	061b      	lsls	r3, r3, #24
 800a1ce:	491b      	ldr	r1, [pc, #108]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1d4:	4b1b      	ldr	r3, [pc, #108]	@ (800a244 <HAL_RCC_OscConfig+0x478>)
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a1da:	f7fd f859 	bl	8007290 <HAL_GetTick>
 800a1de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1e0:	e008      	b.n	800a1f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a1e2:	f7fd f855 	bl	8007290 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d901      	bls.n	800a1f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e05c      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1f4:	4b11      	ldr	r3, [pc, #68]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d0f0      	beq.n	800a1e2 <HAL_RCC_OscConfig+0x416>
 800a200:	e054      	b.n	800a2ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a202:	4b10      	ldr	r3, [pc, #64]	@ (800a244 <HAL_RCC_OscConfig+0x478>)
 800a204:	2200      	movs	r2, #0
 800a206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a208:	f7fd f842 	bl	8007290 <HAL_GetTick>
 800a20c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a20e:	e008      	b.n	800a222 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a210:	f7fd f83e 	bl	8007290 <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	693b      	ldr	r3, [r7, #16]
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e045      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a222:	4b06      	ldr	r3, [pc, #24]	@ (800a23c <HAL_RCC_OscConfig+0x470>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1f0      	bne.n	800a210 <HAL_RCC_OscConfig+0x444>
 800a22e:	e03d      	b.n	800a2ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d107      	bne.n	800a248 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e038      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
 800a23c:	40023800 	.word	0x40023800
 800a240:	40007000 	.word	0x40007000
 800a244:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a248:	4b1b      	ldr	r3, [pc, #108]	@ (800a2b8 <HAL_RCC_OscConfig+0x4ec>)
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d028      	beq.n	800a2a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a260:	429a      	cmp	r2, r3
 800a262:	d121      	bne.n	800a2a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a26e:	429a      	cmp	r2, r3
 800a270:	d11a      	bne.n	800a2a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800a278:	4013      	ands	r3, r2
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a27e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a280:	4293      	cmp	r3, r2
 800a282:	d111      	bne.n	800a2a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a28e:	085b      	lsrs	r3, r3, #1
 800a290:	3b01      	subs	r3, #1
 800a292:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a294:	429a      	cmp	r2, r3
 800a296:	d107      	bne.n	800a2a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d001      	beq.n	800a2ac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e000      	b.n	800a2ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3718      	adds	r7, #24
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
 800a2b6:	bf00      	nop
 800a2b8:	40023800 	.word	0x40023800

0800a2bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b084      	sub	sp, #16
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d101      	bne.n	800a2d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	e0cc      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a2d0:	4b68      	ldr	r3, [pc, #416]	@ (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0307 	and.w	r3, r3, #7
 800a2d8:	683a      	ldr	r2, [r7, #0]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d90c      	bls.n	800a2f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2de:	4b65      	ldr	r3, [pc, #404]	@ (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a2e0:	683a      	ldr	r2, [r7, #0]
 800a2e2:	b2d2      	uxtb	r2, r2
 800a2e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2e6:	4b63      	ldr	r3, [pc, #396]	@ (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f003 0307 	and.w	r3, r3, #7
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d001      	beq.n	800a2f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	e0b8      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d020      	beq.n	800a346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d005      	beq.n	800a31c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a310:	4b59      	ldr	r3, [pc, #356]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a312:	689b      	ldr	r3, [r3, #8]
 800a314:	4a58      	ldr	r2, [pc, #352]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a316:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800a31a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 0308 	and.w	r3, r3, #8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a328:	4b53      	ldr	r3, [pc, #332]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a32a:	689b      	ldr	r3, [r3, #8]
 800a32c:	4a52      	ldr	r2, [pc, #328]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a32e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800a332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a334:	4b50      	ldr	r3, [pc, #320]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	689b      	ldr	r3, [r3, #8]
 800a340:	494d      	ldr	r1, [pc, #308]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a342:	4313      	orrs	r3, r2
 800a344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d044      	beq.n	800a3dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	2b01      	cmp	r3, #1
 800a358:	d107      	bne.n	800a36a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a35a:	4b47      	ldr	r3, [pc, #284]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a362:	2b00      	cmp	r3, #0
 800a364:	d119      	bne.n	800a39a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e07f      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d003      	beq.n	800a37a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a376:	2b03      	cmp	r3, #3
 800a378:	d107      	bne.n	800a38a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a37a:	4b3f      	ldr	r3, [pc, #252]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a382:	2b00      	cmp	r3, #0
 800a384:	d109      	bne.n	800a39a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e06f      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a38a:	4b3b      	ldr	r3, [pc, #236]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f003 0302 	and.w	r3, r3, #2
 800a392:	2b00      	cmp	r3, #0
 800a394:	d101      	bne.n	800a39a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e067      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a39a:	4b37      	ldr	r3, [pc, #220]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	f023 0203 	bic.w	r2, r3, #3
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	4934      	ldr	r1, [pc, #208]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a3ac:	f7fc ff70 	bl	8007290 <HAL_GetTick>
 800a3b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3b2:	e00a      	b.n	800a3ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3b4:	f7fc ff6c 	bl	8007290 <HAL_GetTick>
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d901      	bls.n	800a3ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a3c6:	2303      	movs	r3, #3
 800a3c8:	e04f      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3ca:	4b2b      	ldr	r3, [pc, #172]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a3cc:	689b      	ldr	r3, [r3, #8]
 800a3ce:	f003 020c 	and.w	r2, r3, #12
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d1eb      	bne.n	800a3b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a3dc:	4b25      	ldr	r3, [pc, #148]	@ (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 0307 	and.w	r3, r3, #7
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d20c      	bcs.n	800a404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ea:	4b22      	ldr	r3, [pc, #136]	@ (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3f2:	4b20      	ldr	r3, [pc, #128]	@ (800a474 <HAL_RCC_ClockConfig+0x1b8>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0307 	and.w	r3, r3, #7
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d001      	beq.n	800a404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e032      	b.n	800a46a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f003 0304 	and.w	r3, r3, #4
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d008      	beq.n	800a422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a410:	4b19      	ldr	r3, [pc, #100]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	4916      	ldr	r1, [pc, #88]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a41e:	4313      	orrs	r3, r2
 800a420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f003 0308 	and.w	r3, r3, #8
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d009      	beq.n	800a442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a42e:	4b12      	ldr	r3, [pc, #72]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	00db      	lsls	r3, r3, #3
 800a43c:	490e      	ldr	r1, [pc, #56]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a43e:	4313      	orrs	r3, r2
 800a440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a442:	f000 f82d 	bl	800a4a0 <HAL_RCC_GetSysClockFreq>
 800a446:	4602      	mov	r2, r0
 800a448:	4b0b      	ldr	r3, [pc, #44]	@ (800a478 <HAL_RCC_ClockConfig+0x1bc>)
 800a44a:	689b      	ldr	r3, [r3, #8]
 800a44c:	091b      	lsrs	r3, r3, #4
 800a44e:	f003 030f 	and.w	r3, r3, #15
 800a452:	490a      	ldr	r1, [pc, #40]	@ (800a47c <HAL_RCC_ClockConfig+0x1c0>)
 800a454:	5ccb      	ldrb	r3, [r1, r3]
 800a456:	fa22 f303 	lsr.w	r3, r2, r3
 800a45a:	4a09      	ldr	r2, [pc, #36]	@ (800a480 <HAL_RCC_ClockConfig+0x1c4>)
 800a45c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a45e:	4b09      	ldr	r3, [pc, #36]	@ (800a484 <HAL_RCC_ClockConfig+0x1c8>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4618      	mov	r0, r3
 800a464:	f7fc fed0 	bl	8007208 <HAL_InitTick>

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3710      	adds	r7, #16
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	40023c00 	.word	0x40023c00
 800a478:	40023800 	.word	0x40023800
 800a47c:	08011d78 	.word	0x08011d78
 800a480:	200001f0 	.word	0x200001f0
 800a484:	200001f4 	.word	0x200001f4

0800a488 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a488:	b480      	push	{r7}
 800a48a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800a48c:	4b03      	ldr	r3, [pc, #12]	@ (800a49c <HAL_RCC_EnableCSS+0x14>)
 800a48e:	2201      	movs	r2, #1
 800a490:	601a      	str	r2, [r3, #0]
}
 800a492:	bf00      	nop
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	4247004c 	.word	0x4247004c

0800a4a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a4a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4a4:	b090      	sub	sp, #64	@ 0x40
 800a4a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a4b8:	4b59      	ldr	r3, [pc, #356]	@ (800a620 <HAL_RCC_GetSysClockFreq+0x180>)
 800a4ba:	689b      	ldr	r3, [r3, #8]
 800a4bc:	f003 030c 	and.w	r3, r3, #12
 800a4c0:	2b08      	cmp	r3, #8
 800a4c2:	d00d      	beq.n	800a4e0 <HAL_RCC_GetSysClockFreq+0x40>
 800a4c4:	2b08      	cmp	r3, #8
 800a4c6:	f200 80a1 	bhi.w	800a60c <HAL_RCC_GetSysClockFreq+0x16c>
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d002      	beq.n	800a4d4 <HAL_RCC_GetSysClockFreq+0x34>
 800a4ce:	2b04      	cmp	r3, #4
 800a4d0:	d003      	beq.n	800a4da <HAL_RCC_GetSysClockFreq+0x3a>
 800a4d2:	e09b      	b.n	800a60c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a4d4:	4b53      	ldr	r3, [pc, #332]	@ (800a624 <HAL_RCC_GetSysClockFreq+0x184>)
 800a4d6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800a4d8:	e09b      	b.n	800a612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a4da:	4b53      	ldr	r3, [pc, #332]	@ (800a628 <HAL_RCC_GetSysClockFreq+0x188>)
 800a4dc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a4de:	e098      	b.n	800a612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a4e0:	4b4f      	ldr	r3, [pc, #316]	@ (800a620 <HAL_RCC_GetSysClockFreq+0x180>)
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a4e8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a4ea:	4b4d      	ldr	r3, [pc, #308]	@ (800a620 <HAL_RCC_GetSysClockFreq+0x180>)
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d028      	beq.n	800a548 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a4f6:	4b4a      	ldr	r3, [pc, #296]	@ (800a620 <HAL_RCC_GetSysClockFreq+0x180>)
 800a4f8:	685b      	ldr	r3, [r3, #4]
 800a4fa:	099b      	lsrs	r3, r3, #6
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	623b      	str	r3, [r7, #32]
 800a500:	627a      	str	r2, [r7, #36]	@ 0x24
 800a502:	6a3b      	ldr	r3, [r7, #32]
 800a504:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800a508:	2100      	movs	r1, #0
 800a50a:	4b47      	ldr	r3, [pc, #284]	@ (800a628 <HAL_RCC_GetSysClockFreq+0x188>)
 800a50c:	fb03 f201 	mul.w	r2, r3, r1
 800a510:	2300      	movs	r3, #0
 800a512:	fb00 f303 	mul.w	r3, r0, r3
 800a516:	4413      	add	r3, r2
 800a518:	4a43      	ldr	r2, [pc, #268]	@ (800a628 <HAL_RCC_GetSysClockFreq+0x188>)
 800a51a:	fba0 1202 	umull	r1, r2, r0, r2
 800a51e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a520:	460a      	mov	r2, r1
 800a522:	62ba      	str	r2, [r7, #40]	@ 0x28
 800a524:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a526:	4413      	add	r3, r2
 800a528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a52c:	2200      	movs	r2, #0
 800a52e:	61bb      	str	r3, [r7, #24]
 800a530:	61fa      	str	r2, [r7, #28]
 800a532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a536:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800a53a:	f7f6 fc7d 	bl	8000e38 <__aeabi_uldivmod>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4613      	mov	r3, r2
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a546:	e053      	b.n	800a5f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a548:	4b35      	ldr	r3, [pc, #212]	@ (800a620 <HAL_RCC_GetSysClockFreq+0x180>)
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	099b      	lsrs	r3, r3, #6
 800a54e:	2200      	movs	r2, #0
 800a550:	613b      	str	r3, [r7, #16]
 800a552:	617a      	str	r2, [r7, #20]
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800a55a:	f04f 0b00 	mov.w	fp, #0
 800a55e:	4652      	mov	r2, sl
 800a560:	465b      	mov	r3, fp
 800a562:	f04f 0000 	mov.w	r0, #0
 800a566:	f04f 0100 	mov.w	r1, #0
 800a56a:	0159      	lsls	r1, r3, #5
 800a56c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a570:	0150      	lsls	r0, r2, #5
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	ebb2 080a 	subs.w	r8, r2, sl
 800a57a:	eb63 090b 	sbc.w	r9, r3, fp
 800a57e:	f04f 0200 	mov.w	r2, #0
 800a582:	f04f 0300 	mov.w	r3, #0
 800a586:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800a58a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800a58e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800a592:	ebb2 0408 	subs.w	r4, r2, r8
 800a596:	eb63 0509 	sbc.w	r5, r3, r9
 800a59a:	f04f 0200 	mov.w	r2, #0
 800a59e:	f04f 0300 	mov.w	r3, #0
 800a5a2:	00eb      	lsls	r3, r5, #3
 800a5a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a5a8:	00e2      	lsls	r2, r4, #3
 800a5aa:	4614      	mov	r4, r2
 800a5ac:	461d      	mov	r5, r3
 800a5ae:	eb14 030a 	adds.w	r3, r4, sl
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	eb45 030b 	adc.w	r3, r5, fp
 800a5b8:	607b      	str	r3, [r7, #4]
 800a5ba:	f04f 0200 	mov.w	r2, #0
 800a5be:	f04f 0300 	mov.w	r3, #0
 800a5c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	028b      	lsls	r3, r1, #10
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	028a      	lsls	r2, r1, #10
 800a5d4:	4610      	mov	r0, r2
 800a5d6:	4619      	mov	r1, r3
 800a5d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5da:	2200      	movs	r2, #0
 800a5dc:	60bb      	str	r3, [r7, #8]
 800a5de:	60fa      	str	r2, [r7, #12]
 800a5e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5e4:	f7f6 fc28 	bl	8000e38 <__aeabi_uldivmod>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	4613      	mov	r3, r2
 800a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a5f0:	4b0b      	ldr	r3, [pc, #44]	@ (800a620 <HAL_RCC_GetSysClockFreq+0x180>)
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	0c1b      	lsrs	r3, r3, #16
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800a600:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a604:	fbb2 f3f3 	udiv	r3, r2, r3
 800a608:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a60a:	e002      	b.n	800a612 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a60c:	4b05      	ldr	r3, [pc, #20]	@ (800a624 <HAL_RCC_GetSysClockFreq+0x184>)
 800a60e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800a610:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800a614:	4618      	mov	r0, r3
 800a616:	3740      	adds	r7, #64	@ 0x40
 800a618:	46bd      	mov	sp, r7
 800a61a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a61e:	bf00      	nop
 800a620:	40023800 	.word	0x40023800
 800a624:	00f42400 	.word	0x00f42400
 800a628:	00b71b00 	.word	0x00b71b00

0800a62c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a62c:	b480      	push	{r7}
 800a62e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a630:	4b03      	ldr	r3, [pc, #12]	@ (800a640 <HAL_RCC_GetHCLKFreq+0x14>)
 800a632:	681b      	ldr	r3, [r3, #0]
}
 800a634:	4618      	mov	r0, r3
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	200001f0 	.word	0x200001f0

0800a644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a648:	f7ff fff0 	bl	800a62c <HAL_RCC_GetHCLKFreq>
 800a64c:	4602      	mov	r2, r0
 800a64e:	4b05      	ldr	r3, [pc, #20]	@ (800a664 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	0a9b      	lsrs	r3, r3, #10
 800a654:	f003 0307 	and.w	r3, r3, #7
 800a658:	4903      	ldr	r1, [pc, #12]	@ (800a668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a65a:	5ccb      	ldrb	r3, [r1, r3]
 800a65c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a660:	4618      	mov	r0, r3
 800a662:	bd80      	pop	{r7, pc}
 800a664:	40023800 	.word	0x40023800
 800a668:	08011d88 	.word	0x08011d88

0800a66c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a670:	f7ff ffdc 	bl	800a62c <HAL_RCC_GetHCLKFreq>
 800a674:	4602      	mov	r2, r0
 800a676:	4b05      	ldr	r3, [pc, #20]	@ (800a68c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	0b5b      	lsrs	r3, r3, #13
 800a67c:	f003 0307 	and.w	r3, r3, #7
 800a680:	4903      	ldr	r1, [pc, #12]	@ (800a690 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a682:	5ccb      	ldrb	r3, [r1, r3]
 800a684:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a688:	4618      	mov	r0, r3
 800a68a:	bd80      	pop	{r7, pc}
 800a68c:	40023800 	.word	0x40023800
 800a690:	08011d88 	.word	0x08011d88

0800a694 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a698:	4b06      	ldr	r3, [pc, #24]	@ (800a6b4 <HAL_RCC_NMI_IRQHandler+0x20>)
 800a69a:	68db      	ldr	r3, [r3, #12]
 800a69c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a6a0:	2b80      	cmp	r3, #128	@ 0x80
 800a6a2:	d104      	bne.n	800a6ae <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800a6a4:	f000 f80a 	bl	800a6bc <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a6a8:	4b03      	ldr	r3, [pc, #12]	@ (800a6b8 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a6aa:	2280      	movs	r2, #128	@ 0x80
 800a6ac:	701a      	strb	r2, [r3, #0]
  }
}
 800a6ae:	bf00      	nop
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	40023800 	.word	0x40023800
 800a6b8:	4002380e 	.word	0x4002380e

0800a6bc <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800a6c0:	bf00      	nop
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d101      	bne.n	800a6dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e07b      	b.n	800a7d4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d108      	bne.n	800a6f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	685b      	ldr	r3, [r3, #4]
 800a6e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a6ec:	d009      	beq.n	800a702 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	61da      	str	r2, [r3, #28]
 800a6f4:	e005      	b.n	800a702 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2200      	movs	r2, #0
 800a700:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2200      	movs	r2, #0
 800a706:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d106      	bne.n	800a722 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a71c:	6878      	ldr	r0, [r7, #4]
 800a71e:	f7fb ffb3 	bl	8006688 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2202      	movs	r2, #2
 800a726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681a      	ldr	r2, [r3, #0]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a738:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a74a:	431a      	orrs	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	f003 0302 	and.w	r3, r3, #2
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	695b      	ldr	r3, [r3, #20]
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	431a      	orrs	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a772:	431a      	orrs	r2, r3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	69db      	ldr	r3, [r3, #28]
 800a778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a77c:	431a      	orrs	r2, r3
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a1b      	ldr	r3, [r3, #32]
 800a782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a786:	ea42 0103 	orr.w	r1, r2, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a78e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	430a      	orrs	r2, r1
 800a798:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	0c1b      	lsrs	r3, r3, #16
 800a7a0:	f003 0104 	and.w	r1, r3, #4
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a8:	f003 0210 	and.w	r2, r3, #16
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	430a      	orrs	r2, r1
 800a7b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	69da      	ldr	r2, [r3, #28]
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a7c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3708      	adds	r7, #8
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}

0800a7dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b08c      	sub	sp, #48	@ 0x30
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	60b9      	str	r1, [r7, #8]
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a7fa:	2b01      	cmp	r3, #1
 800a7fc:	d101      	bne.n	800a802 <HAL_SPI_TransmitReceive+0x26>
 800a7fe:	2302      	movs	r3, #2
 800a800:	e198      	b.n	800ab34 <HAL_SPI_TransmitReceive+0x358>
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	2201      	movs	r2, #1
 800a806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a80a:	f7fc fd41 	bl	8007290 <HAL_GetTick>
 800a80e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a816:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a820:	887b      	ldrh	r3, [r7, #2]
 800a822:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a824:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a828:	2b01      	cmp	r3, #1
 800a82a:	d00f      	beq.n	800a84c <HAL_SPI_TransmitReceive+0x70>
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a832:	d107      	bne.n	800a844 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	689b      	ldr	r3, [r3, #8]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d103      	bne.n	800a844 <HAL_SPI_TransmitReceive+0x68>
 800a83c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a840:	2b04      	cmp	r3, #4
 800a842:	d003      	beq.n	800a84c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a844:	2302      	movs	r3, #2
 800a846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a84a:	e16d      	b.n	800ab28 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d005      	beq.n	800a85e <HAL_SPI_TransmitReceive+0x82>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d002      	beq.n	800a85e <HAL_SPI_TransmitReceive+0x82>
 800a858:	887b      	ldrh	r3, [r7, #2]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d103      	bne.n	800a866 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a85e:	2301      	movs	r3, #1
 800a860:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800a864:	e160      	b.n	800ab28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a86c:	b2db      	uxtb	r3, r3
 800a86e:	2b04      	cmp	r3, #4
 800a870:	d003      	beq.n	800a87a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2205      	movs	r2, #5
 800a876:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2200      	movs	r2, #0
 800a87e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	687a      	ldr	r2, [r7, #4]
 800a884:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	887a      	ldrh	r2, [r7, #2]
 800a88a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	887a      	ldrh	r2, [r7, #2]
 800a890:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	887a      	ldrh	r2, [r7, #2]
 800a89c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	887a      	ldrh	r2, [r7, #2]
 800a8a2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a8ba:	2b40      	cmp	r3, #64	@ 0x40
 800a8bc:	d007      	beq.n	800a8ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a8cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	68db      	ldr	r3, [r3, #12]
 800a8d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a8d6:	d17c      	bne.n	800a9d2 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <HAL_SPI_TransmitReceive+0x10a>
 800a8e0:	8b7b      	ldrh	r3, [r7, #26]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d16a      	bne.n	800a9bc <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8ea:	881a      	ldrh	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8f6:	1c9a      	adds	r2, r3, #2
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a900:	b29b      	uxth	r3, r3
 800a902:	3b01      	subs	r3, #1
 800a904:	b29a      	uxth	r2, r3
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a90a:	e057      	b.n	800a9bc <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f003 0302 	and.w	r3, r3, #2
 800a916:	2b02      	cmp	r3, #2
 800a918:	d11b      	bne.n	800a952 <HAL_SPI_TransmitReceive+0x176>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a91e:	b29b      	uxth	r3, r3
 800a920:	2b00      	cmp	r3, #0
 800a922:	d016      	beq.n	800a952 <HAL_SPI_TransmitReceive+0x176>
 800a924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a926:	2b01      	cmp	r3, #1
 800a928:	d113      	bne.n	800a952 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a92e:	881a      	ldrh	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a93a:	1c9a      	adds	r2, r3, #2
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a944:	b29b      	uxth	r3, r3
 800a946:	3b01      	subs	r3, #1
 800a948:	b29a      	uxth	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a94e:	2300      	movs	r3, #0
 800a950:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	689b      	ldr	r3, [r3, #8]
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d119      	bne.n	800a994 <HAL_SPI_TransmitReceive+0x1b8>
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a964:	b29b      	uxth	r3, r3
 800a966:	2b00      	cmp	r3, #0
 800a968:	d014      	beq.n	800a994 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68da      	ldr	r2, [r3, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a974:	b292      	uxth	r2, r2
 800a976:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97c:	1c9a      	adds	r2, r3, #2
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a986:	b29b      	uxth	r3, r3
 800a988:	3b01      	subs	r3, #1
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a990:	2301      	movs	r3, #1
 800a992:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a994:	f7fc fc7c 	bl	8007290 <HAL_GetTick>
 800a998:	4602      	mov	r2, r0
 800a99a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a99c:	1ad3      	subs	r3, r2, r3
 800a99e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d80b      	bhi.n	800a9bc <HAL_SPI_TransmitReceive+0x1e0>
 800a9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9aa:	d007      	beq.n	800a9bc <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800a9ba:	e0b5      	b.n	800ab28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1a2      	bne.n	800a90c <HAL_SPI_TransmitReceive+0x130>
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d19d      	bne.n	800a90c <HAL_SPI_TransmitReceive+0x130>
 800a9d0:	e080      	b.n	800aad4 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	685b      	ldr	r3, [r3, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d002      	beq.n	800a9e0 <HAL_SPI_TransmitReceive+0x204>
 800a9da:	8b7b      	ldrh	r3, [r7, #26]
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d16f      	bne.n	800aac0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	330c      	adds	r3, #12
 800a9ea:	7812      	ldrb	r2, [r2, #0]
 800a9ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	b29a      	uxth	r2, r3
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa06:	e05b      	b.n	800aac0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	f003 0302 	and.w	r3, r3, #2
 800aa12:	2b02      	cmp	r3, #2
 800aa14:	d11c      	bne.n	800aa50 <HAL_SPI_TransmitReceive+0x274>
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa1a:	b29b      	uxth	r3, r3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d017      	beq.n	800aa50 <HAL_SPI_TransmitReceive+0x274>
 800aa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d114      	bne.n	800aa50 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	330c      	adds	r3, #12
 800aa30:	7812      	ldrb	r2, [r2, #0]
 800aa32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa38:	1c5a      	adds	r2, r3, #1
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	3b01      	subs	r3, #1
 800aa46:	b29a      	uxth	r2, r3
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	689b      	ldr	r3, [r3, #8]
 800aa56:	f003 0301 	and.w	r3, r3, #1
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d119      	bne.n	800aa92 <HAL_SPI_TransmitReceive+0x2b6>
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d014      	beq.n	800aa92 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68da      	ldr	r2, [r3, #12]
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa72:	b2d2      	uxtb	r2, r2
 800aa74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	3b01      	subs	r3, #1
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aa92:	f7fc fbfd 	bl	8007290 <HAL_GetTick>
 800aa96:	4602      	mov	r2, r0
 800aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9a:	1ad3      	subs	r3, r2, r3
 800aa9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d803      	bhi.n	800aaaa <HAL_SPI_TransmitReceive+0x2ce>
 800aaa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaa8:	d102      	bne.n	800aab0 <HAL_SPI_TransmitReceive+0x2d4>
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d107      	bne.n	800aac0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800aab0:	2303      	movs	r3, #3
 800aab2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800aabe:	e033      	b.n	800ab28 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d19e      	bne.n	800aa08 <HAL_SPI_TransmitReceive+0x22c>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800aace:	b29b      	uxth	r3, r3
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d199      	bne.n	800aa08 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800aad4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aad6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800aad8:	68f8      	ldr	r0, [r7, #12]
 800aada:	f000 f8b7 	bl	800ac4c <SPI_EndRxTxTransaction>
 800aade:	4603      	mov	r3, r0
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d006      	beq.n	800aaf2 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2220      	movs	r2, #32
 800aaee:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800aaf0:	e01a      	b.n	800ab28 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d10a      	bne.n	800ab10 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aafa:	2300      	movs	r3, #0
 800aafc:	617b      	str	r3, [r7, #20]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68db      	ldr	r3, [r3, #12]
 800ab04:	617b      	str	r3, [r7, #20]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d003      	beq.n	800ab20 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab1e:	e003      	b.n	800ab28 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800ab30:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3730      	adds	r7, #48	@ 0x30
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b088      	sub	sp, #32
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	60f8      	str	r0, [r7, #12]
 800ab44:	60b9      	str	r1, [r7, #8]
 800ab46:	603b      	str	r3, [r7, #0]
 800ab48:	4613      	mov	r3, r2
 800ab4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800ab4c:	f7fc fba0 	bl	8007290 <HAL_GetTick>
 800ab50:	4602      	mov	r2, r0
 800ab52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab54:	1a9b      	subs	r3, r3, r2
 800ab56:	683a      	ldr	r2, [r7, #0]
 800ab58:	4413      	add	r3, r2
 800ab5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800ab5c:	f7fc fb98 	bl	8007290 <HAL_GetTick>
 800ab60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800ab62:	4b39      	ldr	r3, [pc, #228]	@ (800ac48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	015b      	lsls	r3, r3, #5
 800ab68:	0d1b      	lsrs	r3, r3, #20
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	fb02 f303 	mul.w	r3, r2, r3
 800ab70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ab72:	e054      	b.n	800ac1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab7a:	d050      	beq.n	800ac1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800ab7c:	f7fc fb88 	bl	8007290 <HAL_GetTick>
 800ab80:	4602      	mov	r2, r0
 800ab82:	69bb      	ldr	r3, [r7, #24]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	69fa      	ldr	r2, [r7, #28]
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d902      	bls.n	800ab92 <SPI_WaitFlagStateUntilTimeout+0x56>
 800ab8c:	69fb      	ldr	r3, [r7, #28]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d13d      	bne.n	800ac0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	685a      	ldr	r2, [r3, #4]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800aba0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800abaa:	d111      	bne.n	800abd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abb4:	d004      	beq.n	800abc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	689b      	ldr	r3, [r3, #8]
 800abba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abbe:	d107      	bne.n	800abd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800abce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800abd8:	d10f      	bne.n	800abfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681a      	ldr	r2, [r3, #0]
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800abe8:	601a      	str	r2, [r3, #0]
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681a      	ldr	r2, [r3, #0]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800abf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	2201      	movs	r2, #1
 800abfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800ac0a:	2303      	movs	r3, #3
 800ac0c:	e017      	b.n	800ac3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d101      	bne.n	800ac18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ac14:	2300      	movs	r3, #0
 800ac16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	689a      	ldr	r2, [r3, #8]
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	4013      	ands	r3, r2
 800ac28:	68ba      	ldr	r2, [r7, #8]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	bf0c      	ite	eq
 800ac2e:	2301      	moveq	r3, #1
 800ac30:	2300      	movne	r3, #0
 800ac32:	b2db      	uxtb	r3, r3
 800ac34:	461a      	mov	r2, r3
 800ac36:	79fb      	ldrb	r3, [r7, #7]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d19b      	bne.n	800ab74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800ac3c:	2300      	movs	r3, #0
}
 800ac3e:	4618      	mov	r0, r3
 800ac40:	3720      	adds	r7, #32
 800ac42:	46bd      	mov	sp, r7
 800ac44:	bd80      	pop	{r7, pc}
 800ac46:	bf00      	nop
 800ac48:	200001f0 	.word	0x200001f0

0800ac4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b088      	sub	sp, #32
 800ac50:	af02      	add	r7, sp, #8
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	60b9      	str	r1, [r7, #8]
 800ac56:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	9300      	str	r3, [sp, #0]
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	2201      	movs	r2, #1
 800ac60:	2102      	movs	r1, #2
 800ac62:	68f8      	ldr	r0, [r7, #12]
 800ac64:	f7ff ff6a 	bl	800ab3c <SPI_WaitFlagStateUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d007      	beq.n	800ac7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac72:	f043 0220 	orr.w	r2, r3, #32
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ac7a:	2303      	movs	r3, #3
 800ac7c:	e032      	b.n	800ace4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ac7e:	4b1b      	ldr	r3, [pc, #108]	@ (800acec <SPI_EndRxTxTransaction+0xa0>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	4a1b      	ldr	r2, [pc, #108]	@ (800acf0 <SPI_EndRxTxTransaction+0xa4>)
 800ac84:	fba2 2303 	umull	r2, r3, r2, r3
 800ac88:	0d5b      	lsrs	r3, r3, #21
 800ac8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ac8e:	fb02 f303 	mul.w	r3, r2, r3
 800ac92:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ac9c:	d112      	bne.n	800acc4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	9300      	str	r3, [sp, #0]
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	2200      	movs	r2, #0
 800aca6:	2180      	movs	r1, #128	@ 0x80
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f7ff ff47 	bl	800ab3c <SPI_WaitFlagStateUntilTimeout>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d016      	beq.n	800ace2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acb8:	f043 0220 	orr.w	r2, r3, #32
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800acc0:	2303      	movs	r3, #3
 800acc2:	e00f      	b.n	800ace4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	3b01      	subs	r3, #1
 800acce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	689b      	ldr	r3, [r3, #8]
 800acd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800acda:	2b80      	cmp	r3, #128	@ 0x80
 800acdc:	d0f2      	beq.n	800acc4 <SPI_EndRxTxTransaction+0x78>
 800acde:	e000      	b.n	800ace2 <SPI_EndRxTxTransaction+0x96>
        break;
 800ace0:	bf00      	nop
  }

  return HAL_OK;
 800ace2:	2300      	movs	r3, #0
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	200001f0 	.word	0x200001f0
 800acf0:	165e9f81 	.word	0x165e9f81

0800acf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad02:	2301      	movs	r3, #1
 800ad04:	e041      	b.n	800ad8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d106      	bne.n	800ad20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f7fb fdd0 	bl	80068c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2202      	movs	r2, #2
 800ad24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	3304      	adds	r3, #4
 800ad30:	4619      	mov	r1, r3
 800ad32:	4610      	mov	r0, r2
 800ad34:	f000 fba8 	bl	800b488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2201      	movs	r2, #1
 800ad44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2201      	movs	r2, #1
 800ad84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3708      	adds	r7, #8
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ada2:	b2db      	uxtb	r3, r3
 800ada4:	2b01      	cmp	r3, #1
 800ada6:	d001      	beq.n	800adac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ada8:	2301      	movs	r3, #1
 800adaa:	e046      	b.n	800ae3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2202      	movs	r2, #2
 800adb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a23      	ldr	r2, [pc, #140]	@ (800ae48 <HAL_TIM_Base_Start+0xb4>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d022      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800adc6:	d01d      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a1f      	ldr	r2, [pc, #124]	@ (800ae4c <HAL_TIM_Base_Start+0xb8>)
 800adce:	4293      	cmp	r3, r2
 800add0:	d018      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	4a1e      	ldr	r2, [pc, #120]	@ (800ae50 <HAL_TIM_Base_Start+0xbc>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d013      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4a1c      	ldr	r2, [pc, #112]	@ (800ae54 <HAL_TIM_Base_Start+0xc0>)
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d00e      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a1b      	ldr	r2, [pc, #108]	@ (800ae58 <HAL_TIM_Base_Start+0xc4>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d009      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	4a19      	ldr	r2, [pc, #100]	@ (800ae5c <HAL_TIM_Base_Start+0xc8>)
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d004      	beq.n	800ae04 <HAL_TIM_Base_Start+0x70>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	4a18      	ldr	r2, [pc, #96]	@ (800ae60 <HAL_TIM_Base_Start+0xcc>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d111      	bne.n	800ae28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	f003 0307 	and.w	r3, r3, #7
 800ae0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2b06      	cmp	r3, #6
 800ae14:	d010      	beq.n	800ae38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f042 0201 	orr.w	r2, r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ae26:	e007      	b.n	800ae38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f042 0201 	orr.w	r2, r2, #1
 800ae36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ae38:	2300      	movs	r3, #0
}
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3714      	adds	r7, #20
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40010000 	.word	0x40010000
 800ae4c:	40000400 	.word	0x40000400
 800ae50:	40000800 	.word	0x40000800
 800ae54:	40000c00 	.word	0x40000c00
 800ae58:	40010400 	.word	0x40010400
 800ae5c:	40014000 	.word	0x40014000
 800ae60:	40001800 	.word	0x40001800

0800ae64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae64:	b580      	push	{r7, lr}
 800ae66:	b082      	sub	sp, #8
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae72:	2301      	movs	r3, #1
 800ae74:	e041      	b.n	800aefa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d106      	bne.n	800ae90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f7fb fc64 	bl	8006758 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2202      	movs	r2, #2
 800ae94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3304      	adds	r3, #4
 800aea0:	4619      	mov	r1, r3
 800aea2:	4610      	mov	r0, r2
 800aea4:	f000 faf0 	bl	800b488 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2201      	movs	r2, #1
 800aeac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2201      	movs	r2, #1
 800aeb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2201      	movs	r2, #1
 800aebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2201      	movs	r2, #1
 800aecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2201      	movs	r2, #1
 800aee4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800aef8:	2300      	movs	r3, #0
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3708      	adds	r7, #8
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}
	...

0800af04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
 800af0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d109      	bne.n	800af28 <HAL_TIM_PWM_Start+0x24>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	bf14      	ite	ne
 800af20:	2301      	movne	r3, #1
 800af22:	2300      	moveq	r3, #0
 800af24:	b2db      	uxtb	r3, r3
 800af26:	e022      	b.n	800af6e <HAL_TIM_PWM_Start+0x6a>
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	2b04      	cmp	r3, #4
 800af2c:	d109      	bne.n	800af42 <HAL_TIM_PWM_Start+0x3e>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800af34:	b2db      	uxtb	r3, r3
 800af36:	2b01      	cmp	r3, #1
 800af38:	bf14      	ite	ne
 800af3a:	2301      	movne	r3, #1
 800af3c:	2300      	moveq	r3, #0
 800af3e:	b2db      	uxtb	r3, r3
 800af40:	e015      	b.n	800af6e <HAL_TIM_PWM_Start+0x6a>
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	2b08      	cmp	r3, #8
 800af46:	d109      	bne.n	800af5c <HAL_TIM_PWM_Start+0x58>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b01      	cmp	r3, #1
 800af52:	bf14      	ite	ne
 800af54:	2301      	movne	r3, #1
 800af56:	2300      	moveq	r3, #0
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	e008      	b.n	800af6e <HAL_TIM_PWM_Start+0x6a>
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af62:	b2db      	uxtb	r3, r3
 800af64:	2b01      	cmp	r3, #1
 800af66:	bf14      	ite	ne
 800af68:	2301      	movne	r3, #1
 800af6a:	2300      	moveq	r3, #0
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e07c      	b.n	800b070 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d104      	bne.n	800af86 <HAL_TIM_PWM_Start+0x82>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2202      	movs	r2, #2
 800af80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800af84:	e013      	b.n	800afae <HAL_TIM_PWM_Start+0xaa>
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b04      	cmp	r3, #4
 800af8a:	d104      	bne.n	800af96 <HAL_TIM_PWM_Start+0x92>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2202      	movs	r2, #2
 800af90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800af94:	e00b      	b.n	800afae <HAL_TIM_PWM_Start+0xaa>
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	2b08      	cmp	r3, #8
 800af9a:	d104      	bne.n	800afa6 <HAL_TIM_PWM_Start+0xa2>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2202      	movs	r2, #2
 800afa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800afa4:	e003      	b.n	800afae <HAL_TIM_PWM_Start+0xaa>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2202      	movs	r2, #2
 800afaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	2201      	movs	r2, #1
 800afb4:	6839      	ldr	r1, [r7, #0]
 800afb6:	4618      	mov	r0, r3
 800afb8:	f000 fd5c 	bl	800ba74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a2d      	ldr	r2, [pc, #180]	@ (800b078 <HAL_TIM_PWM_Start+0x174>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d004      	beq.n	800afd0 <HAL_TIM_PWM_Start+0xcc>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	4a2c      	ldr	r2, [pc, #176]	@ (800b07c <HAL_TIM_PWM_Start+0x178>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d101      	bne.n	800afd4 <HAL_TIM_PWM_Start+0xd0>
 800afd0:	2301      	movs	r3, #1
 800afd2:	e000      	b.n	800afd6 <HAL_TIM_PWM_Start+0xd2>
 800afd4:	2300      	movs	r3, #0
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d007      	beq.n	800afea <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800afe8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a22      	ldr	r2, [pc, #136]	@ (800b078 <HAL_TIM_PWM_Start+0x174>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d022      	beq.n	800b03a <HAL_TIM_PWM_Start+0x136>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800affc:	d01d      	beq.n	800b03a <HAL_TIM_PWM_Start+0x136>
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4a1f      	ldr	r2, [pc, #124]	@ (800b080 <HAL_TIM_PWM_Start+0x17c>)
 800b004:	4293      	cmp	r3, r2
 800b006:	d018      	beq.n	800b03a <HAL_TIM_PWM_Start+0x136>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a1d      	ldr	r2, [pc, #116]	@ (800b084 <HAL_TIM_PWM_Start+0x180>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d013      	beq.n	800b03a <HAL_TIM_PWM_Start+0x136>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a1c      	ldr	r2, [pc, #112]	@ (800b088 <HAL_TIM_PWM_Start+0x184>)
 800b018:	4293      	cmp	r3, r2
 800b01a:	d00e      	beq.n	800b03a <HAL_TIM_PWM_Start+0x136>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	4a16      	ldr	r2, [pc, #88]	@ (800b07c <HAL_TIM_PWM_Start+0x178>)
 800b022:	4293      	cmp	r3, r2
 800b024:	d009      	beq.n	800b03a <HAL_TIM_PWM_Start+0x136>
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a18      	ldr	r2, [pc, #96]	@ (800b08c <HAL_TIM_PWM_Start+0x188>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d004      	beq.n	800b03a <HAL_TIM_PWM_Start+0x136>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a16      	ldr	r2, [pc, #88]	@ (800b090 <HAL_TIM_PWM_Start+0x18c>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d111      	bne.n	800b05e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	689b      	ldr	r3, [r3, #8]
 800b040:	f003 0307 	and.w	r3, r3, #7
 800b044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	2b06      	cmp	r3, #6
 800b04a:	d010      	beq.n	800b06e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f042 0201 	orr.w	r2, r2, #1
 800b05a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b05c:	e007      	b.n	800b06e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f042 0201 	orr.w	r2, r2, #1
 800b06c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b06e:	2300      	movs	r3, #0
}
 800b070:	4618      	mov	r0, r3
 800b072:	3710      	adds	r7, #16
 800b074:	46bd      	mov	sp, r7
 800b076:	bd80      	pop	{r7, pc}
 800b078:	40010000 	.word	0x40010000
 800b07c:	40010400 	.word	0x40010400
 800b080:	40000400 	.word	0x40000400
 800b084:	40000800 	.word	0x40000800
 800b088:	40000c00 	.word	0x40000c00
 800b08c:	40014000 	.word	0x40014000
 800b090:	40001800 	.word	0x40001800

0800b094 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	6839      	ldr	r1, [r7, #0]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 fce4 	bl	800ba74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	4a2e      	ldr	r2, [pc, #184]	@ (800b16c <HAL_TIM_PWM_Stop+0xd8>)
 800b0b2:	4293      	cmp	r3, r2
 800b0b4:	d004      	beq.n	800b0c0 <HAL_TIM_PWM_Stop+0x2c>
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a2d      	ldr	r2, [pc, #180]	@ (800b170 <HAL_TIM_PWM_Stop+0xdc>)
 800b0bc:	4293      	cmp	r3, r2
 800b0be:	d101      	bne.n	800b0c4 <HAL_TIM_PWM_Stop+0x30>
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e000      	b.n	800b0c6 <HAL_TIM_PWM_Stop+0x32>
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d017      	beq.n	800b0fa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	6a1a      	ldr	r2, [r3, #32]
 800b0d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d10f      	bne.n	800b0fa <HAL_TIM_PWM_Stop+0x66>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	6a1a      	ldr	r2, [r3, #32]
 800b0e0:	f240 4344 	movw	r3, #1092	@ 0x444
 800b0e4:	4013      	ands	r3, r2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d107      	bne.n	800b0fa <HAL_TIM_PWM_Stop+0x66>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b0f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	6a1a      	ldr	r2, [r3, #32]
 800b100:	f241 1311 	movw	r3, #4369	@ 0x1111
 800b104:	4013      	ands	r3, r2
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10f      	bne.n	800b12a <HAL_TIM_PWM_Stop+0x96>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	6a1a      	ldr	r2, [r3, #32]
 800b110:	f240 4344 	movw	r3, #1092	@ 0x444
 800b114:	4013      	ands	r3, r2
 800b116:	2b00      	cmp	r3, #0
 800b118:	d107      	bne.n	800b12a <HAL_TIM_PWM_Stop+0x96>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	681a      	ldr	r2, [r3, #0]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f022 0201 	bic.w	r2, r2, #1
 800b128:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d104      	bne.n	800b13a <HAL_TIM_PWM_Stop+0xa6>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2201      	movs	r2, #1
 800b134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b138:	e013      	b.n	800b162 <HAL_TIM_PWM_Stop+0xce>
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	2b04      	cmp	r3, #4
 800b13e:	d104      	bne.n	800b14a <HAL_TIM_PWM_Stop+0xb6>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2201      	movs	r2, #1
 800b144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b148:	e00b      	b.n	800b162 <HAL_TIM_PWM_Stop+0xce>
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b08      	cmp	r3, #8
 800b14e:	d104      	bne.n	800b15a <HAL_TIM_PWM_Stop+0xc6>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2201      	movs	r2, #1
 800b154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b158:	e003      	b.n	800b162 <HAL_TIM_PWM_Stop+0xce>
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2201      	movs	r2, #1
 800b15e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800b162:	2300      	movs	r3, #0
}
 800b164:	4618      	mov	r0, r3
 800b166:	3708      	adds	r7, #8
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	40010000 	.word	0x40010000
 800b170:	40010400 	.word	0x40010400

0800b174 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	d101      	bne.n	800b192 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b18e:	2302      	movs	r3, #2
 800b190:	e0ae      	b.n	800b2f0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2201      	movs	r2, #1
 800b196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2b0c      	cmp	r3, #12
 800b19e:	f200 809f 	bhi.w	800b2e0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b1a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a8:	0800b1dd 	.word	0x0800b1dd
 800b1ac:	0800b2e1 	.word	0x0800b2e1
 800b1b0:	0800b2e1 	.word	0x0800b2e1
 800b1b4:	0800b2e1 	.word	0x0800b2e1
 800b1b8:	0800b21d 	.word	0x0800b21d
 800b1bc:	0800b2e1 	.word	0x0800b2e1
 800b1c0:	0800b2e1 	.word	0x0800b2e1
 800b1c4:	0800b2e1 	.word	0x0800b2e1
 800b1c8:	0800b25f 	.word	0x0800b25f
 800b1cc:	0800b2e1 	.word	0x0800b2e1
 800b1d0:	0800b2e1 	.word	0x0800b2e1
 800b1d4:	0800b2e1 	.word	0x0800b2e1
 800b1d8:	0800b29f 	.word	0x0800b29f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	68b9      	ldr	r1, [r7, #8]
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f000 f9fc 	bl	800b5e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	699a      	ldr	r2, [r3, #24]
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f042 0208 	orr.w	r2, r2, #8
 800b1f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	699a      	ldr	r2, [r3, #24]
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f022 0204 	bic.w	r2, r2, #4
 800b206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	6999      	ldr	r1, [r3, #24]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	691a      	ldr	r2, [r3, #16]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	430a      	orrs	r2, r1
 800b218:	619a      	str	r2, [r3, #24]
      break;
 800b21a:	e064      	b.n	800b2e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	68b9      	ldr	r1, [r7, #8]
 800b222:	4618      	mov	r0, r3
 800b224:	f000 fa4c 	bl	800b6c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	699a      	ldr	r2, [r3, #24]
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	699a      	ldr	r2, [r3, #24]
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	6999      	ldr	r1, [r3, #24]
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	021a      	lsls	r2, r3, #8
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	430a      	orrs	r2, r1
 800b25a:	619a      	str	r2, [r3, #24]
      break;
 800b25c:	e043      	b.n	800b2e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	4618      	mov	r0, r3
 800b266:	f000 faa1 	bl	800b7ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	69da      	ldr	r2, [r3, #28]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f042 0208 	orr.w	r2, r2, #8
 800b278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	69da      	ldr	r2, [r3, #28]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f022 0204 	bic.w	r2, r2, #4
 800b288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	69d9      	ldr	r1, [r3, #28]
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	691a      	ldr	r2, [r3, #16]
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	430a      	orrs	r2, r1
 800b29a:	61da      	str	r2, [r3, #28]
      break;
 800b29c:	e023      	b.n	800b2e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68b9      	ldr	r1, [r7, #8]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	f000 faf5 	bl	800b894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	69da      	ldr	r2, [r3, #28]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b2b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69da      	ldr	r2, [r3, #28]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b2c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69d9      	ldr	r1, [r3, #28]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	021a      	lsls	r2, r3, #8
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	430a      	orrs	r2, r1
 800b2dc:	61da      	str	r2, [r3, #28]
      break;
 800b2de:	e002      	b.n	800b2e6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800b2e4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3718      	adds	r7, #24
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d101      	bne.n	800b314 <HAL_TIM_ConfigClockSource+0x1c>
 800b310:	2302      	movs	r3, #2
 800b312:	e0b4      	b.n	800b47e <HAL_TIM_ConfigClockSource+0x186>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	689b      	ldr	r3, [r3, #8]
 800b32a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b33a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b34c:	d03e      	beq.n	800b3cc <HAL_TIM_ConfigClockSource+0xd4>
 800b34e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b352:	f200 8087 	bhi.w	800b464 <HAL_TIM_ConfigClockSource+0x16c>
 800b356:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b35a:	f000 8086 	beq.w	800b46a <HAL_TIM_ConfigClockSource+0x172>
 800b35e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b362:	d87f      	bhi.n	800b464 <HAL_TIM_ConfigClockSource+0x16c>
 800b364:	2b70      	cmp	r3, #112	@ 0x70
 800b366:	d01a      	beq.n	800b39e <HAL_TIM_ConfigClockSource+0xa6>
 800b368:	2b70      	cmp	r3, #112	@ 0x70
 800b36a:	d87b      	bhi.n	800b464 <HAL_TIM_ConfigClockSource+0x16c>
 800b36c:	2b60      	cmp	r3, #96	@ 0x60
 800b36e:	d050      	beq.n	800b412 <HAL_TIM_ConfigClockSource+0x11a>
 800b370:	2b60      	cmp	r3, #96	@ 0x60
 800b372:	d877      	bhi.n	800b464 <HAL_TIM_ConfigClockSource+0x16c>
 800b374:	2b50      	cmp	r3, #80	@ 0x50
 800b376:	d03c      	beq.n	800b3f2 <HAL_TIM_ConfigClockSource+0xfa>
 800b378:	2b50      	cmp	r3, #80	@ 0x50
 800b37a:	d873      	bhi.n	800b464 <HAL_TIM_ConfigClockSource+0x16c>
 800b37c:	2b40      	cmp	r3, #64	@ 0x40
 800b37e:	d058      	beq.n	800b432 <HAL_TIM_ConfigClockSource+0x13a>
 800b380:	2b40      	cmp	r3, #64	@ 0x40
 800b382:	d86f      	bhi.n	800b464 <HAL_TIM_ConfigClockSource+0x16c>
 800b384:	2b30      	cmp	r3, #48	@ 0x30
 800b386:	d064      	beq.n	800b452 <HAL_TIM_ConfigClockSource+0x15a>
 800b388:	2b30      	cmp	r3, #48	@ 0x30
 800b38a:	d86b      	bhi.n	800b464 <HAL_TIM_ConfigClockSource+0x16c>
 800b38c:	2b20      	cmp	r3, #32
 800b38e:	d060      	beq.n	800b452 <HAL_TIM_ConfigClockSource+0x15a>
 800b390:	2b20      	cmp	r3, #32
 800b392:	d867      	bhi.n	800b464 <HAL_TIM_ConfigClockSource+0x16c>
 800b394:	2b00      	cmp	r3, #0
 800b396:	d05c      	beq.n	800b452 <HAL_TIM_ConfigClockSource+0x15a>
 800b398:	2b10      	cmp	r3, #16
 800b39a:	d05a      	beq.n	800b452 <HAL_TIM_ConfigClockSource+0x15a>
 800b39c:	e062      	b.n	800b464 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3ae:	f000 fb41 	bl	800ba34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	689b      	ldr	r3, [r3, #8]
 800b3b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b3c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	609a      	str	r2, [r3, #8]
      break;
 800b3ca:	e04f      	b.n	800b46c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b3dc:	f000 fb2a 	bl	800ba34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689a      	ldr	r2, [r3, #8]
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b3ee:	609a      	str	r2, [r3, #8]
      break;
 800b3f0:	e03c      	b.n	800b46c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3fe:	461a      	mov	r2, r3
 800b400:	f000 fa9e 	bl	800b940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	2150      	movs	r1, #80	@ 0x50
 800b40a:	4618      	mov	r0, r3
 800b40c:	f000 faf7 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b410:	e02c      	b.n	800b46c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b41e:	461a      	mov	r2, r3
 800b420:	f000 fabd 	bl	800b99e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2160      	movs	r1, #96	@ 0x60
 800b42a:	4618      	mov	r0, r3
 800b42c:	f000 fae7 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b430:	e01c      	b.n	800b46c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b43e:	461a      	mov	r2, r3
 800b440:	f000 fa7e 	bl	800b940 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2140      	movs	r1, #64	@ 0x40
 800b44a:	4618      	mov	r0, r3
 800b44c:	f000 fad7 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b450:	e00c      	b.n	800b46c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	683b      	ldr	r3, [r7, #0]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	4619      	mov	r1, r3
 800b45c:	4610      	mov	r0, r2
 800b45e:	f000 face 	bl	800b9fe <TIM_ITRx_SetConfig>
      break;
 800b462:	e003      	b.n	800b46c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	73fb      	strb	r3, [r7, #15]
      break;
 800b468:	e000      	b.n	800b46c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b46a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
	...

0800b488 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	4a46      	ldr	r2, [pc, #280]	@ (800b5b4 <TIM_Base_SetConfig+0x12c>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d013      	beq.n	800b4c8 <TIM_Base_SetConfig+0x40>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4a6:	d00f      	beq.n	800b4c8 <TIM_Base_SetConfig+0x40>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	4a43      	ldr	r2, [pc, #268]	@ (800b5b8 <TIM_Base_SetConfig+0x130>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d00b      	beq.n	800b4c8 <TIM_Base_SetConfig+0x40>
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	4a42      	ldr	r2, [pc, #264]	@ (800b5bc <TIM_Base_SetConfig+0x134>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d007      	beq.n	800b4c8 <TIM_Base_SetConfig+0x40>
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4a41      	ldr	r2, [pc, #260]	@ (800b5c0 <TIM_Base_SetConfig+0x138>)
 800b4bc:	4293      	cmp	r3, r2
 800b4be:	d003      	beq.n	800b4c8 <TIM_Base_SetConfig+0x40>
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	4a40      	ldr	r2, [pc, #256]	@ (800b5c4 <TIM_Base_SetConfig+0x13c>)
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d108      	bne.n	800b4da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	685b      	ldr	r3, [r3, #4]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a35      	ldr	r2, [pc, #212]	@ (800b5b4 <TIM_Base_SetConfig+0x12c>)
 800b4de:	4293      	cmp	r3, r2
 800b4e0:	d02b      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4e8:	d027      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a32      	ldr	r2, [pc, #200]	@ (800b5b8 <TIM_Base_SetConfig+0x130>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d023      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a31      	ldr	r2, [pc, #196]	@ (800b5bc <TIM_Base_SetConfig+0x134>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d01f      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a30      	ldr	r2, [pc, #192]	@ (800b5c0 <TIM_Base_SetConfig+0x138>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d01b      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a2f      	ldr	r2, [pc, #188]	@ (800b5c4 <TIM_Base_SetConfig+0x13c>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d017      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a2e      	ldr	r2, [pc, #184]	@ (800b5c8 <TIM_Base_SetConfig+0x140>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d013      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a2d      	ldr	r2, [pc, #180]	@ (800b5cc <TIM_Base_SetConfig+0x144>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d00f      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	4a2c      	ldr	r2, [pc, #176]	@ (800b5d0 <TIM_Base_SetConfig+0x148>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d00b      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	4a2b      	ldr	r2, [pc, #172]	@ (800b5d4 <TIM_Base_SetConfig+0x14c>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d007      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4a2a      	ldr	r2, [pc, #168]	@ (800b5d8 <TIM_Base_SetConfig+0x150>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d003      	beq.n	800b53a <TIM_Base_SetConfig+0xb2>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4a29      	ldr	r2, [pc, #164]	@ (800b5dc <TIM_Base_SetConfig+0x154>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d108      	bne.n	800b54c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b540:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	68db      	ldr	r3, [r3, #12]
 800b546:	68fa      	ldr	r2, [r7, #12]
 800b548:	4313      	orrs	r3, r2
 800b54a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b552:	683b      	ldr	r3, [r7, #0]
 800b554:	695b      	ldr	r3, [r3, #20]
 800b556:	4313      	orrs	r3, r2
 800b558:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	68fa      	ldr	r2, [r7, #12]
 800b55e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	689a      	ldr	r2, [r3, #8]
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b568:	683b      	ldr	r3, [r7, #0]
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	4a10      	ldr	r2, [pc, #64]	@ (800b5b4 <TIM_Base_SetConfig+0x12c>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d003      	beq.n	800b580 <TIM_Base_SetConfig+0xf8>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	4a12      	ldr	r2, [pc, #72]	@ (800b5c4 <TIM_Base_SetConfig+0x13c>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d103      	bne.n	800b588 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	691a      	ldr	r2, [r3, #16]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2201      	movs	r2, #1
 800b58c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	f003 0301 	and.w	r3, r3, #1
 800b596:	2b01      	cmp	r3, #1
 800b598:	d105      	bne.n	800b5a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	f023 0201 	bic.w	r2, r3, #1
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	611a      	str	r2, [r3, #16]
  }
}
 800b5a6:	bf00      	nop
 800b5a8:	3714      	adds	r7, #20
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	40010000 	.word	0x40010000
 800b5b8:	40000400 	.word	0x40000400
 800b5bc:	40000800 	.word	0x40000800
 800b5c0:	40000c00 	.word	0x40000c00
 800b5c4:	40010400 	.word	0x40010400
 800b5c8:	40014000 	.word	0x40014000
 800b5cc:	40014400 	.word	0x40014400
 800b5d0:	40014800 	.word	0x40014800
 800b5d4:	40001800 	.word	0x40001800
 800b5d8:	40001c00 	.word	0x40001c00
 800b5dc:	40002000 	.word	0x40002000

0800b5e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b087      	sub	sp, #28
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	6a1b      	ldr	r3, [r3, #32]
 800b5ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6a1b      	ldr	r3, [r3, #32]
 800b5f4:	f023 0201 	bic.w	r2, r3, #1
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	685b      	ldr	r3, [r3, #4]
 800b600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b60e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	f023 0303 	bic.w	r3, r3, #3
 800b616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	68fa      	ldr	r2, [r7, #12]
 800b61e:	4313      	orrs	r3, r2
 800b620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b622:	697b      	ldr	r3, [r7, #20]
 800b624:	f023 0302 	bic.w	r3, r3, #2
 800b628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b62a:	683b      	ldr	r3, [r7, #0]
 800b62c:	689b      	ldr	r3, [r3, #8]
 800b62e:	697a      	ldr	r2, [r7, #20]
 800b630:	4313      	orrs	r3, r2
 800b632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	4a20      	ldr	r2, [pc, #128]	@ (800b6b8 <TIM_OC1_SetConfig+0xd8>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d003      	beq.n	800b644 <TIM_OC1_SetConfig+0x64>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	4a1f      	ldr	r2, [pc, #124]	@ (800b6bc <TIM_OC1_SetConfig+0xdc>)
 800b640:	4293      	cmp	r3, r2
 800b642:	d10c      	bne.n	800b65e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f023 0308 	bic.w	r3, r3, #8
 800b64a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	4313      	orrs	r3, r2
 800b654:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	f023 0304 	bic.w	r3, r3, #4
 800b65c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	4a15      	ldr	r2, [pc, #84]	@ (800b6b8 <TIM_OC1_SetConfig+0xd8>)
 800b662:	4293      	cmp	r3, r2
 800b664:	d003      	beq.n	800b66e <TIM_OC1_SetConfig+0x8e>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	4a14      	ldr	r2, [pc, #80]	@ (800b6bc <TIM_OC1_SetConfig+0xdc>)
 800b66a:	4293      	cmp	r3, r2
 800b66c:	d111      	bne.n	800b692 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b674:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b67c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	4313      	orrs	r3, r2
 800b686:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	4313      	orrs	r3, r2
 800b690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	693a      	ldr	r2, [r7, #16]
 800b696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	685a      	ldr	r2, [r3, #4]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	697a      	ldr	r2, [r7, #20]
 800b6aa:	621a      	str	r2, [r3, #32]
}
 800b6ac:	bf00      	nop
 800b6ae:	371c      	adds	r7, #28
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b6:	4770      	bx	lr
 800b6b8:	40010000 	.word	0x40010000
 800b6bc:	40010400 	.word	0x40010400

0800b6c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b087      	sub	sp, #28
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6a1b      	ldr	r3, [r3, #32]
 800b6ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	6a1b      	ldr	r3, [r3, #32]
 800b6d4:	f023 0210 	bic.w	r2, r3, #16
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	699b      	ldr	r3, [r3, #24]
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b6ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b6f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	021b      	lsls	r3, r3, #8
 800b6fe:	68fa      	ldr	r2, [r7, #12]
 800b700:	4313      	orrs	r3, r2
 800b702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b704:	697b      	ldr	r3, [r7, #20]
 800b706:	f023 0320 	bic.w	r3, r3, #32
 800b70a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	011b      	lsls	r3, r3, #4
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	4313      	orrs	r3, r2
 800b716:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a22      	ldr	r2, [pc, #136]	@ (800b7a4 <TIM_OC2_SetConfig+0xe4>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d003      	beq.n	800b728 <TIM_OC2_SetConfig+0x68>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	4a21      	ldr	r2, [pc, #132]	@ (800b7a8 <TIM_OC2_SetConfig+0xe8>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d10d      	bne.n	800b744 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b728:	697b      	ldr	r3, [r7, #20]
 800b72a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b72e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	011b      	lsls	r3, r3, #4
 800b736:	697a      	ldr	r2, [r7, #20]
 800b738:	4313      	orrs	r3, r2
 800b73a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b742:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	4a17      	ldr	r2, [pc, #92]	@ (800b7a4 <TIM_OC2_SetConfig+0xe4>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d003      	beq.n	800b754 <TIM_OC2_SetConfig+0x94>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	4a16      	ldr	r2, [pc, #88]	@ (800b7a8 <TIM_OC2_SetConfig+0xe8>)
 800b750:	4293      	cmp	r3, r2
 800b752:	d113      	bne.n	800b77c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b75a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b75c:	693b      	ldr	r3, [r7, #16]
 800b75e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b762:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	695b      	ldr	r3, [r3, #20]
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	693a      	ldr	r2, [r7, #16]
 800b76c:	4313      	orrs	r3, r2
 800b76e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	693a      	ldr	r2, [r7, #16]
 800b778:	4313      	orrs	r3, r2
 800b77a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	693a      	ldr	r2, [r7, #16]
 800b780:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	68fa      	ldr	r2, [r7, #12]
 800b786:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b788:	683b      	ldr	r3, [r7, #0]
 800b78a:	685a      	ldr	r2, [r3, #4]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	621a      	str	r2, [r3, #32]
}
 800b796:	bf00      	nop
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	40010000 	.word	0x40010000
 800b7a8:	40010400 	.word	0x40010400

0800b7ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7ac:	b480      	push	{r7}
 800b7ae:	b087      	sub	sp, #28
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	6a1b      	ldr	r3, [r3, #32]
 800b7ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6a1b      	ldr	r3, [r3, #32]
 800b7c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	69db      	ldr	r3, [r3, #28]
 800b7d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b7da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	f023 0303 	bic.w	r3, r3, #3
 800b7e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	68fa      	ldr	r2, [r7, #12]
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b7f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	021b      	lsls	r3, r3, #8
 800b7fc:	697a      	ldr	r2, [r7, #20]
 800b7fe:	4313      	orrs	r3, r2
 800b800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4a21      	ldr	r2, [pc, #132]	@ (800b88c <TIM_OC3_SetConfig+0xe0>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d003      	beq.n	800b812 <TIM_OC3_SetConfig+0x66>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4a20      	ldr	r2, [pc, #128]	@ (800b890 <TIM_OC3_SetConfig+0xe4>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d10d      	bne.n	800b82e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	68db      	ldr	r3, [r3, #12]
 800b81e:	021b      	lsls	r3, r3, #8
 800b820:	697a      	ldr	r2, [r7, #20]
 800b822:	4313      	orrs	r3, r2
 800b824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b826:	697b      	ldr	r3, [r7, #20]
 800b828:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b82c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	4a16      	ldr	r2, [pc, #88]	@ (800b88c <TIM_OC3_SetConfig+0xe0>)
 800b832:	4293      	cmp	r3, r2
 800b834:	d003      	beq.n	800b83e <TIM_OC3_SetConfig+0x92>
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a15      	ldr	r2, [pc, #84]	@ (800b890 <TIM_OC3_SetConfig+0xe4>)
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d113      	bne.n	800b866 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b84c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	695b      	ldr	r3, [r3, #20]
 800b852:	011b      	lsls	r3, r3, #4
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	4313      	orrs	r3, r2
 800b858:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	699b      	ldr	r3, [r3, #24]
 800b85e:	011b      	lsls	r3, r3, #4
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	4313      	orrs	r3, r2
 800b864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b872:	683b      	ldr	r3, [r7, #0]
 800b874:	685a      	ldr	r2, [r3, #4]
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	697a      	ldr	r2, [r7, #20]
 800b87e:	621a      	str	r2, [r3, #32]
}
 800b880:	bf00      	nop
 800b882:	371c      	adds	r7, #28
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	40010000 	.word	0x40010000
 800b890:	40010400 	.word	0x40010400

0800b894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b894:	b480      	push	{r7}
 800b896:	b087      	sub	sp, #28
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	6a1b      	ldr	r3, [r3, #32]
 800b8a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6a1b      	ldr	r3, [r3, #32]
 800b8a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	685b      	ldr	r3, [r3, #4]
 800b8b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	69db      	ldr	r3, [r3, #28]
 800b8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b8ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	021b      	lsls	r3, r3, #8
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b8de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	689b      	ldr	r3, [r3, #8]
 800b8e4:	031b      	lsls	r3, r3, #12
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	4313      	orrs	r3, r2
 800b8ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4a12      	ldr	r2, [pc, #72]	@ (800b938 <TIM_OC4_SetConfig+0xa4>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d003      	beq.n	800b8fc <TIM_OC4_SetConfig+0x68>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	4a11      	ldr	r2, [pc, #68]	@ (800b93c <TIM_OC4_SetConfig+0xa8>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d109      	bne.n	800b910 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b902:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	695b      	ldr	r3, [r3, #20]
 800b908:	019b      	lsls	r3, r3, #6
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	68fa      	ldr	r2, [r7, #12]
 800b91a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	685a      	ldr	r2, [r3, #4]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	693a      	ldr	r2, [r7, #16]
 800b928:	621a      	str	r2, [r3, #32]
}
 800b92a:	bf00      	nop
 800b92c:	371c      	adds	r7, #28
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	40010000 	.word	0x40010000
 800b93c:	40010400 	.word	0x40010400

0800b940 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	f023 0201 	bic.w	r2, r3, #1
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	699b      	ldr	r3, [r3, #24]
 800b962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b96a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	011b      	lsls	r3, r3, #4
 800b970:	693a      	ldr	r2, [r7, #16]
 800b972:	4313      	orrs	r3, r2
 800b974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f023 030a 	bic.w	r3, r3, #10
 800b97c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	4313      	orrs	r3, r2
 800b984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	693a      	ldr	r2, [r7, #16]
 800b98a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	621a      	str	r2, [r3, #32]
}
 800b992:	bf00      	nop
 800b994:	371c      	adds	r7, #28
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b087      	sub	sp, #28
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	60f8      	str	r0, [r7, #12]
 800b9a6:	60b9      	str	r1, [r7, #8]
 800b9a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	6a1b      	ldr	r3, [r3, #32]
 800b9ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	6a1b      	ldr	r3, [r3, #32]
 800b9b4:	f023 0210 	bic.w	r2, r3, #16
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	699b      	ldr	r3, [r3, #24]
 800b9c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b9c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	031b      	lsls	r3, r3, #12
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b9da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	011b      	lsls	r3, r3, #4
 800b9e0:	697a      	ldr	r2, [r7, #20]
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	693a      	ldr	r2, [r7, #16]
 800b9ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	621a      	str	r2, [r3, #32]
}
 800b9f2:	bf00      	nop
 800b9f4:	371c      	adds	r7, #28
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr

0800b9fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b9fe:	b480      	push	{r7}
 800ba00:	b085      	sub	sp, #20
 800ba02:	af00      	add	r7, sp, #0
 800ba04:	6078      	str	r0, [r7, #4]
 800ba06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	689b      	ldr	r3, [r3, #8]
 800ba0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	f043 0307 	orr.w	r3, r3, #7
 800ba20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	68fa      	ldr	r2, [r7, #12]
 800ba26:	609a      	str	r2, [r3, #8]
}
 800ba28:	bf00      	nop
 800ba2a:	3714      	adds	r7, #20
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b087      	sub	sp, #28
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	607a      	str	r2, [r7, #4]
 800ba40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	689b      	ldr	r3, [r3, #8]
 800ba46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	021a      	lsls	r2, r3, #8
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	431a      	orrs	r2, r3
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	697a      	ldr	r2, [r7, #20]
 800ba66:	609a      	str	r2, [r3, #8]
}
 800ba68:	bf00      	nop
 800ba6a:	371c      	adds	r7, #28
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b087      	sub	sp, #28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	60b9      	str	r1, [r7, #8]
 800ba7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	f003 031f 	and.w	r3, r3, #31
 800ba86:	2201      	movs	r2, #1
 800ba88:	fa02 f303 	lsl.w	r3, r2, r3
 800ba8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	6a1a      	ldr	r2, [r3, #32]
 800ba92:	697b      	ldr	r3, [r7, #20]
 800ba94:	43db      	mvns	r3, r3
 800ba96:	401a      	ands	r2, r3
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	6a1a      	ldr	r2, [r3, #32]
 800baa0:	68bb      	ldr	r3, [r7, #8]
 800baa2:	f003 031f 	and.w	r3, r3, #31
 800baa6:	6879      	ldr	r1, [r7, #4]
 800baa8:	fa01 f303 	lsl.w	r3, r1, r3
 800baac:	431a      	orrs	r2, r3
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	621a      	str	r2, [r3, #32]
}
 800bab2:	bf00      	nop
 800bab4:	371c      	adds	r7, #28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
	...

0800bac0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b085      	sub	sp, #20
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bad0:	2b01      	cmp	r3, #1
 800bad2:	d101      	bne.n	800bad8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bad4:	2302      	movs	r3, #2
 800bad6:	e05a      	b.n	800bb8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2201      	movs	r2, #1
 800badc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2202      	movs	r2, #2
 800bae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	689b      	ldr	r3, [r3, #8]
 800baf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bafe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68fa      	ldr	r2, [r7, #12]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68fa      	ldr	r2, [r7, #12]
 800bb10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	4a21      	ldr	r2, [pc, #132]	@ (800bb9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bb18:	4293      	cmp	r3, r2
 800bb1a:	d022      	beq.n	800bb62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bb24:	d01d      	beq.n	800bb62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	4a1d      	ldr	r2, [pc, #116]	@ (800bba0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bb2c:	4293      	cmp	r3, r2
 800bb2e:	d018      	beq.n	800bb62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4a1b      	ldr	r2, [pc, #108]	@ (800bba4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bb36:	4293      	cmp	r3, r2
 800bb38:	d013      	beq.n	800bb62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	4a1a      	ldr	r2, [pc, #104]	@ (800bba8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bb40:	4293      	cmp	r3, r2
 800bb42:	d00e      	beq.n	800bb62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a18      	ldr	r2, [pc, #96]	@ (800bbac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bb4a:	4293      	cmp	r3, r2
 800bb4c:	d009      	beq.n	800bb62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a17      	ldr	r2, [pc, #92]	@ (800bbb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bb54:	4293      	cmp	r3, r2
 800bb56:	d004      	beq.n	800bb62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	4a15      	ldr	r2, [pc, #84]	@ (800bbb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d10c      	bne.n	800bb7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bb68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	685b      	ldr	r3, [r3, #4]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	68ba      	ldr	r2, [r7, #8]
 800bb7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr
 800bb9a:	bf00      	nop
 800bb9c:	40010000 	.word	0x40010000
 800bba0:	40000400 	.word	0x40000400
 800bba4:	40000800 	.word	0x40000800
 800bba8:	40000c00 	.word	0x40000c00
 800bbac:	40010400 	.word	0x40010400
 800bbb0:	40014000 	.word	0x40014000
 800bbb4:	40001800 	.word	0x40001800

0800bbb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
 800bbc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	d101      	bne.n	800bbd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bbd0:	2302      	movs	r3, #2
 800bbd2:	e03d      	b.n	800bc50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	68db      	ldr	r3, [r3, #12]
 800bbe6:	4313      	orrs	r3, r2
 800bbe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	689b      	ldr	r3, [r3, #8]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4313      	orrs	r3, r2
 800bc12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	4313      	orrs	r3, r2
 800bc20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	695b      	ldr	r3, [r3, #20]
 800bc2c:	4313      	orrs	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	69db      	ldr	r3, [r3, #28]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68fa      	ldr	r2, [r7, #12]
 800bc44:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bc4e:	2300      	movs	r3, #0
}
 800bc50:	4618      	mov	r0, r3
 800bc52:	3714      	adds	r7, #20
 800bc54:	46bd      	mov	sp, r7
 800bc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5a:	4770      	bx	lr

0800bc5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b082      	sub	sp, #8
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d101      	bne.n	800bc6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e042      	b.n	800bcf4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bc74:	b2db      	uxtb	r3, r3
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d106      	bne.n	800bc88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7fa ff82 	bl	8006b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2224      	movs	r2, #36	@ 0x24
 800bc8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	68da      	ldr	r2, [r3, #12]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bc9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 ff77 	bl	800cb94 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	691a      	ldr	r2, [r3, #16]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800bcb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	695a      	ldr	r2, [r3, #20]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800bcc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	68da      	ldr	r2, [r3, #12]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800bcd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2220      	movs	r2, #32
 800bce0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2220      	movs	r2, #32
 800bce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b08c      	sub	sp, #48	@ 0x30
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	4613      	mov	r3, r2
 800bd08:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b20      	cmp	r3, #32
 800bd14:	d156      	bne.n	800bdc4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d002      	beq.n	800bd22 <HAL_UART_Transmit_DMA+0x26>
 800bd1c:	88fb      	ldrh	r3, [r7, #6]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e04f      	b.n	800bdc6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	88fa      	ldrh	r2, [r7, #6]
 800bd30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	88fa      	ldrh	r2, [r7, #6]
 800bd36:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd3e:	68fb      	ldr	r3, [r7, #12]
 800bd40:	2221      	movs	r2, #33	@ 0x21
 800bd42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd4a:	4a21      	ldr	r2, [pc, #132]	@ (800bdd0 <HAL_UART_Transmit_DMA+0xd4>)
 800bd4c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd52:	4a20      	ldr	r2, [pc, #128]	@ (800bdd4 <HAL_UART_Transmit_DMA+0xd8>)
 800bd54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd5a:	4a1f      	ldr	r2, [pc, #124]	@ (800bdd8 <HAL_UART_Transmit_DMA+0xdc>)
 800bd5c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd62:	2200      	movs	r2, #0
 800bd64:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800bd66:	f107 0308 	add.w	r3, r7, #8
 800bd6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd72:	6819      	ldr	r1, [r3, #0]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	3304      	adds	r3, #4
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	88fb      	ldrh	r3, [r7, #6]
 800bd7e:	f7fc fadf 	bl	8008340 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bd8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3314      	adds	r3, #20
 800bd92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	e853 3f00 	ldrex	r3, [r3]
 800bd9a:	617b      	str	r3, [r7, #20]
   return(result);
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bda2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3314      	adds	r3, #20
 800bdaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bdac:	627a      	str	r2, [r7, #36]	@ 0x24
 800bdae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	6a39      	ldr	r1, [r7, #32]
 800bdb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e5      	bne.n	800bd8c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	e000      	b.n	800bdc6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800bdc4:	2302      	movs	r3, #2
  }
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3730      	adds	r7, #48	@ 0x30
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	0800c421 	.word	0x0800c421
 800bdd4:	0800c4bb 	.word	0x0800c4bb
 800bdd8:	0800c63f 	.word	0x0800c63f

0800bddc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08c      	sub	sp, #48	@ 0x30
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	60f8      	str	r0, [r7, #12]
 800bde4:	60b9      	str	r1, [r7, #8]
 800bde6:	4613      	mov	r3, r2
 800bde8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b20      	cmp	r3, #32
 800bdf4:	d14a      	bne.n	800be8c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d002      	beq.n	800be02 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800bdfc:	88fb      	ldrh	r3, [r7, #6]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d101      	bne.n	800be06 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e043      	b.n	800be8e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	2201      	movs	r2, #1
 800be0a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	2200      	movs	r2, #0
 800be10:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800be12:	88fb      	ldrh	r3, [r7, #6]
 800be14:	461a      	mov	r2, r3
 800be16:	68b9      	ldr	r1, [r7, #8]
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 fc5b 	bl	800c6d4 <UART_Start_Receive_DMA>
 800be1e:	4603      	mov	r3, r0
 800be20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800be24:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d12c      	bne.n	800be86 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be30:	2b01      	cmp	r3, #1
 800be32:	d125      	bne.n	800be80 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800be34:	2300      	movs	r3, #0
 800be36:	613b      	str	r3, [r7, #16]
 800be38:	68fb      	ldr	r3, [r7, #12]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	613b      	str	r3, [r7, #16]
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	613b      	str	r3, [r7, #16]
 800be48:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	330c      	adds	r3, #12
 800be50:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	617b      	str	r3, [r7, #20]
   return(result);
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	f043 0310 	orr.w	r3, r3, #16
 800be60:	62bb      	str	r3, [r7, #40]	@ 0x28
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	330c      	adds	r3, #12
 800be68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be6a:	627a      	str	r2, [r7, #36]	@ 0x24
 800be6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	6a39      	ldr	r1, [r7, #32]
 800be70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	61fb      	str	r3, [r7, #28]
   return(result);
 800be78:	69fb      	ldr	r3, [r7, #28]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e5      	bne.n	800be4a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800be7e:	e002      	b.n	800be86 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800be80:	2301      	movs	r3, #1
 800be82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800be86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be8a:	e000      	b.n	800be8e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800be8c:	2302      	movs	r3, #2
  }
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3730      	adds	r7, #48	@ 0x30
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}
	...

0800be98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b0ba      	sub	sp, #232	@ 0xe8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	695b      	ldr	r3, [r3, #20]
 800beba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800bebe:	2300      	movs	r3, #0
 800bec0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800bec4:	2300      	movs	r3, #0
 800bec6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800beca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bece:	f003 030f 	and.w	r3, r3, #15
 800bed2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800bed6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10f      	bne.n	800befe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bee2:	f003 0320 	and.w	r3, r3, #32
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d009      	beq.n	800befe <HAL_UART_IRQHandler+0x66>
 800beea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800beee:	f003 0320 	and.w	r3, r3, #32
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d003      	beq.n	800befe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f000 fd8d 	bl	800ca16 <UART_Receive_IT>
      return;
 800befc:	e25b      	b.n	800c3b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800befe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 80de 	beq.w	800c0c4 <HAL_UART_IRQHandler+0x22c>
 800bf08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf0c:	f003 0301 	and.w	r3, r3, #1
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d106      	bne.n	800bf22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800bf14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf18:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	f000 80d1 	beq.w	800c0c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800bf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf26:	f003 0301 	and.w	r3, r3, #1
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d00b      	beq.n	800bf46 <HAL_UART_IRQHandler+0xae>
 800bf2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d005      	beq.n	800bf46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf3e:	f043 0201 	orr.w	r2, r3, #1
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf4a:	f003 0304 	and.w	r3, r3, #4
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d00b      	beq.n	800bf6a <HAL_UART_IRQHandler+0xd2>
 800bf52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf56:	f003 0301 	and.w	r3, r3, #1
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d005      	beq.n	800bf6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf62:	f043 0202 	orr.w	r2, r3, #2
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800bf6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf6e:	f003 0302 	and.w	r3, r3, #2
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00b      	beq.n	800bf8e <HAL_UART_IRQHandler+0xf6>
 800bf76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bf7a:	f003 0301 	and.w	r3, r3, #1
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d005      	beq.n	800bf8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf86:	f043 0204 	orr.w	r2, r3, #4
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bf8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bf92:	f003 0308 	and.w	r3, r3, #8
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d011      	beq.n	800bfbe <HAL_UART_IRQHandler+0x126>
 800bf9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bf9e:	f003 0320 	and.w	r3, r3, #32
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d105      	bne.n	800bfb2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800bfa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d005      	beq.n	800bfbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfb6:	f043 0208 	orr.w	r2, r3, #8
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	f000 81f2 	beq.w	800c3ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800bfc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfcc:	f003 0320 	and.w	r3, r3, #32
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d008      	beq.n	800bfe6 <HAL_UART_IRQHandler+0x14e>
 800bfd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bfd8:	f003 0320 	and.w	r3, r3, #32
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d002      	beq.n	800bfe6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fd18 	bl	800ca16 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff0:	2b40      	cmp	r3, #64	@ 0x40
 800bff2:	bf0c      	ite	eq
 800bff4:	2301      	moveq	r3, #1
 800bff6:	2300      	movne	r3, #0
 800bff8:	b2db      	uxtb	r3, r3
 800bffa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c002:	f003 0308 	and.w	r3, r3, #8
 800c006:	2b00      	cmp	r3, #0
 800c008:	d103      	bne.n	800c012 <HAL_UART_IRQHandler+0x17a>
 800c00a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d04f      	beq.n	800c0b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c012:	6878      	ldr	r0, [r7, #4]
 800c014:	f000 fc20 	bl	800c858 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	695b      	ldr	r3, [r3, #20]
 800c01e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c022:	2b40      	cmp	r3, #64	@ 0x40
 800c024:	d141      	bne.n	800c0aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3314      	adds	r3, #20
 800c02c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c030:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c034:	e853 3f00 	ldrex	r3, [r3]
 800c038:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c03c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c040:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c044:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	3314      	adds	r3, #20
 800c04e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c052:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c056:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c05a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c05e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c062:	e841 2300 	strex	r3, r2, [r1]
 800c066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c06a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d1d9      	bne.n	800c026 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c076:	2b00      	cmp	r3, #0
 800c078:	d013      	beq.n	800c0a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c07e:	4a7e      	ldr	r2, [pc, #504]	@ (800c278 <HAL_UART_IRQHandler+0x3e0>)
 800c080:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c086:	4618      	mov	r0, r3
 800c088:	f7fc fa22 	bl	80084d0 <HAL_DMA_Abort_IT>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d016      	beq.n	800c0c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c098:	687a      	ldr	r2, [r7, #4]
 800c09a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c09c:	4610      	mov	r0, r2
 800c09e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0a0:	e00e      	b.n	800c0c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 f9b2 	bl	800c40c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0a8:	e00a      	b.n	800c0c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 f9ae 	bl	800c40c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0b0:	e006      	b.n	800c0c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 f9aa 	bl	800c40c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c0be:	e175      	b.n	800c3ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0c0:	bf00      	nop
    return;
 800c0c2:	e173      	b.n	800c3ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0c8:	2b01      	cmp	r3, #1
 800c0ca:	f040 814f 	bne.w	800c36c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c0ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0d2:	f003 0310 	and.w	r3, r3, #16
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	f000 8148 	beq.w	800c36c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c0dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c0e0:	f003 0310 	and.w	r3, r3, #16
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 8141 	beq.w	800c36c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60bb      	str	r3, [r7, #8]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	60bb      	str	r3, [r7, #8]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	60bb      	str	r3, [r7, #8]
 800c0fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c10a:	2b40      	cmp	r3, #64	@ 0x40
 800c10c:	f040 80b6 	bne.w	800c27c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c11c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c120:	2b00      	cmp	r3, #0
 800c122:	f000 8145 	beq.w	800c3b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c12a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c12e:	429a      	cmp	r2, r3
 800c130:	f080 813e 	bcs.w	800c3b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c13a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c140:	69db      	ldr	r3, [r3, #28]
 800c142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c146:	f000 8088 	beq.w	800c25a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	330c      	adds	r3, #12
 800c150:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c154:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c158:	e853 3f00 	ldrex	r3, [r3]
 800c15c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c160:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c168:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	330c      	adds	r3, #12
 800c172:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c176:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c17a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c182:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c186:	e841 2300 	strex	r3, r2, [r1]
 800c18a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c18e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c192:	2b00      	cmp	r3, #0
 800c194:	d1d9      	bne.n	800c14a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	3314      	adds	r3, #20
 800c19c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c1a0:	e853 3f00 	ldrex	r3, [r3]
 800c1a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c1a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c1a8:	f023 0301 	bic.w	r3, r3, #1
 800c1ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	3314      	adds	r3, #20
 800c1b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c1ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c1be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c1c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c1c6:	e841 2300 	strex	r3, r2, [r1]
 800c1ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c1cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d1e1      	bne.n	800c196 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	3314      	adds	r3, #20
 800c1d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c1e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c1e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	3314      	adds	r3, #20
 800c1f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c1f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c1f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c1fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c204:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1e3      	bne.n	800c1d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2220      	movs	r2, #32
 800c20e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	2200      	movs	r2, #0
 800c216:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	330c      	adds	r3, #12
 800c21e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c222:	e853 3f00 	ldrex	r3, [r3]
 800c226:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c228:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c22a:	f023 0310 	bic.w	r3, r3, #16
 800c22e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	330c      	adds	r3, #12
 800c238:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c23c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c23e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c240:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c242:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c244:	e841 2300 	strex	r3, r2, [r1]
 800c248:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c24a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d1e3      	bne.n	800c218 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c254:	4618      	mov	r0, r3
 800c256:	f7fc f8cb 	bl	80083f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	2202      	movs	r2, #2
 800c25e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c268:	b29b      	uxth	r3, r3
 800c26a:	1ad3      	subs	r3, r2, r3
 800c26c:	b29b      	uxth	r3, r3
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f7f6 fb49 	bl	8002908 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c276:	e09b      	b.n	800c3b0 <HAL_UART_IRQHandler+0x518>
 800c278:	0800c91f 	.word	0x0800c91f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c284:	b29b      	uxth	r3, r3
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c290:	b29b      	uxth	r3, r3
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 808e 	beq.w	800c3b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c298:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	f000 8089 	beq.w	800c3b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	330c      	adds	r3, #12
 800c2a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ac:	e853 3f00 	ldrex	r3, [r3]
 800c2b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c2b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c2b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c2b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	330c      	adds	r3, #12
 800c2c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c2c6:	647a      	str	r2, [r7, #68]	@ 0x44
 800c2c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c2cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c2ce:	e841 2300 	strex	r3, r2, [r1]
 800c2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c2d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d1e3      	bne.n	800c2a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	3314      	adds	r3, #20
 800c2e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2e4:	e853 3f00 	ldrex	r3, [r3]
 800c2e8:	623b      	str	r3, [r7, #32]
   return(result);
 800c2ea:	6a3b      	ldr	r3, [r7, #32]
 800c2ec:	f023 0301 	bic.w	r3, r3, #1
 800c2f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	3314      	adds	r3, #20
 800c2fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c2fe:	633a      	str	r2, [r7, #48]	@ 0x30
 800c300:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c302:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c306:	e841 2300 	strex	r3, r2, [r1]
 800c30a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c30c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d1e3      	bne.n	800c2da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	2220      	movs	r2, #32
 800c316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2200      	movs	r2, #0
 800c31e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	330c      	adds	r3, #12
 800c326:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	e853 3f00 	ldrex	r3, [r3]
 800c32e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f023 0310 	bic.w	r3, r3, #16
 800c336:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	330c      	adds	r3, #12
 800c340:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c344:	61fa      	str	r2, [r7, #28]
 800c346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c348:	69b9      	ldr	r1, [r7, #24]
 800c34a:	69fa      	ldr	r2, [r7, #28]
 800c34c:	e841 2300 	strex	r3, r2, [r1]
 800c350:	617b      	str	r3, [r7, #20]
   return(result);
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d1e3      	bne.n	800c320 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2202      	movs	r2, #2
 800c35c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c35e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c362:	4619      	mov	r1, r3
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f7f6 facf 	bl	8002908 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c36a:	e023      	b.n	800c3b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c36c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c374:	2b00      	cmp	r3, #0
 800c376:	d009      	beq.n	800c38c <HAL_UART_IRQHandler+0x4f4>
 800c378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c37c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c380:	2b00      	cmp	r3, #0
 800c382:	d003      	beq.n	800c38c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f000 fade 	bl	800c946 <UART_Transmit_IT>
    return;
 800c38a:	e014      	b.n	800c3b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c394:	2b00      	cmp	r3, #0
 800c396:	d00e      	beq.n	800c3b6 <HAL_UART_IRQHandler+0x51e>
 800c398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c39c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d008      	beq.n	800c3b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c3a4:	6878      	ldr	r0, [r7, #4]
 800c3a6:	f000 fb1e 	bl	800c9e6 <UART_EndTransmit_IT>
    return;
 800c3aa:	e004      	b.n	800c3b6 <HAL_UART_IRQHandler+0x51e>
    return;
 800c3ac:	bf00      	nop
 800c3ae:	e002      	b.n	800c3b6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c3b0:	bf00      	nop
 800c3b2:	e000      	b.n	800c3b6 <HAL_UART_IRQHandler+0x51e>
      return;
 800c3b4:	bf00      	nop
  }
}
 800c3b6:	37e8      	adds	r7, #232	@ 0xe8
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	bd80      	pop	{r7, pc}

0800c3bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c3ec:	bf00      	nop
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b090      	sub	sp, #64	@ 0x40
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c42c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d137      	bne.n	800c4ac <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800c43c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c43e:	2200      	movs	r2, #0
 800c440:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	3314      	adds	r3, #20
 800c448:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c44c:	e853 3f00 	ldrex	r3, [r3]
 800c450:	623b      	str	r3, [r7, #32]
   return(result);
 800c452:	6a3b      	ldr	r3, [r7, #32]
 800c454:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c458:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c45a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3314      	adds	r3, #20
 800c460:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c462:	633a      	str	r2, [r7, #48]	@ 0x30
 800c464:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c46a:	e841 2300 	strex	r3, r2, [r1]
 800c46e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1e5      	bne.n	800c442 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	330c      	adds	r3, #12
 800c47c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c47e:	693b      	ldr	r3, [r7, #16]
 800c480:	e853 3f00 	ldrex	r3, [r3]
 800c484:	60fb      	str	r3, [r7, #12]
   return(result);
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c48c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	330c      	adds	r3, #12
 800c494:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c496:	61fa      	str	r2, [r7, #28]
 800c498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c49a:	69b9      	ldr	r1, [r7, #24]
 800c49c:	69fa      	ldr	r2, [r7, #28]
 800c49e:	e841 2300 	strex	r3, r2, [r1]
 800c4a2:	617b      	str	r3, [r7, #20]
   return(result);
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1e5      	bne.n	800c476 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c4aa:	e002      	b.n	800c4b2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c4ac:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c4ae:	f7ff ff85 	bl	800c3bc <HAL_UART_TxCpltCallback>
}
 800c4b2:	bf00      	nop
 800c4b4:	3740      	adds	r7, #64	@ 0x40
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c4ba:	b580      	push	{r7, lr}
 800c4bc:	b084      	sub	sp, #16
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4c6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f7ff ff81 	bl	800c3d0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4ce:	bf00      	nop
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b09c      	sub	sp, #112	@ 0x70
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4e2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d172      	bne.n	800c5d8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c4f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	330c      	adds	r3, #12
 800c4fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c500:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c502:	e853 3f00 	ldrex	r3, [r3]
 800c506:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c50a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c50e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c510:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	330c      	adds	r3, #12
 800c516:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c518:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c51a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c51c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c51e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c520:	e841 2300 	strex	r3, r2, [r1]
 800c524:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1e5      	bne.n	800c4f8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3314      	adds	r3, #20
 800c532:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c536:	e853 3f00 	ldrex	r3, [r3]
 800c53a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c53e:	f023 0301 	bic.w	r3, r3, #1
 800c542:	667b      	str	r3, [r7, #100]	@ 0x64
 800c544:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3314      	adds	r3, #20
 800c54a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c54c:	647a      	str	r2, [r7, #68]	@ 0x44
 800c54e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c550:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c554:	e841 2300 	strex	r3, r2, [r1]
 800c558:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c55a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d1e5      	bne.n	800c52c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	3314      	adds	r3, #20
 800c566:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56a:	e853 3f00 	ldrex	r3, [r3]
 800c56e:	623b      	str	r3, [r7, #32]
   return(result);
 800c570:	6a3b      	ldr	r3, [r7, #32]
 800c572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c576:	663b      	str	r3, [r7, #96]	@ 0x60
 800c578:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3314      	adds	r3, #20
 800c57e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c580:	633a      	str	r2, [r7, #48]	@ 0x30
 800c582:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c584:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c588:	e841 2300 	strex	r3, r2, [r1]
 800c58c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1e5      	bne.n	800c560 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c594:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c596:	2220      	movs	r2, #32
 800c598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c59c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c59e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5a0:	2b01      	cmp	r3, #1
 800c5a2:	d119      	bne.n	800c5d8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	330c      	adds	r3, #12
 800c5aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	e853 3f00 	ldrex	r3, [r3]
 800c5b2:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f023 0310 	bic.w	r3, r3, #16
 800c5ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c5bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	330c      	adds	r3, #12
 800c5c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c5c4:	61fa      	str	r2, [r7, #28]
 800c5c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c8:	69b9      	ldr	r1, [r7, #24]
 800c5ca:	69fa      	ldr	r2, [r7, #28]
 800c5cc:	e841 2300 	strex	r3, r2, [r1]
 800c5d0:	617b      	str	r3, [r7, #20]
   return(result);
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d1e5      	bne.n	800c5a4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c5d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5da:	2200      	movs	r2, #0
 800c5dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c5e2:	2b01      	cmp	r3, #1
 800c5e4:	d106      	bne.n	800c5f4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c5ea:	4619      	mov	r1, r3
 800c5ec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5ee:	f7f6 f98b 	bl	8002908 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5f2:	e002      	b.n	800c5fa <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800c5f4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c5f6:	f7ff fef5 	bl	800c3e4 <HAL_UART_RxCpltCallback>
}
 800c5fa:	bf00      	nop
 800c5fc:	3770      	adds	r7, #112	@ 0x70
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b084      	sub	sp, #16
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c60e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2201      	movs	r2, #1
 800c614:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c61a:	2b01      	cmp	r3, #1
 800c61c:	d108      	bne.n	800c630 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c622:	085b      	lsrs	r3, r3, #1
 800c624:	b29b      	uxth	r3, r3
 800c626:	4619      	mov	r1, r3
 800c628:	68f8      	ldr	r0, [r7, #12]
 800c62a:	f7f6 f96d 	bl	8002908 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c62e:	e002      	b.n	800c636 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f7ff fee1 	bl	800c3f8 <HAL_UART_RxHalfCpltCallback>
}
 800c636:	bf00      	nop
 800c638:	3710      	adds	r7, #16
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}

0800c63e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c646:	2300      	movs	r3, #0
 800c648:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c64e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	695b      	ldr	r3, [r3, #20]
 800c656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c65a:	2b80      	cmp	r3, #128	@ 0x80
 800c65c:	bf0c      	ite	eq
 800c65e:	2301      	moveq	r3, #1
 800c660:	2300      	movne	r3, #0
 800c662:	b2db      	uxtb	r3, r3
 800c664:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	2b21      	cmp	r3, #33	@ 0x21
 800c670:	d108      	bne.n	800c684 <UART_DMAError+0x46>
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d005      	beq.n	800c684 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	2200      	movs	r2, #0
 800c67c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800c67e:	68b8      	ldr	r0, [r7, #8]
 800c680:	f000 f8c2 	bl	800c808 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	695b      	ldr	r3, [r3, #20]
 800c68a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c68e:	2b40      	cmp	r3, #64	@ 0x40
 800c690:	bf0c      	ite	eq
 800c692:	2301      	moveq	r3, #1
 800c694:	2300      	movne	r3, #0
 800c696:	b2db      	uxtb	r3, r3
 800c698:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c6a0:	b2db      	uxtb	r3, r3
 800c6a2:	2b22      	cmp	r3, #34	@ 0x22
 800c6a4:	d108      	bne.n	800c6b8 <UART_DMAError+0x7a>
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d005      	beq.n	800c6b8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800c6b2:	68b8      	ldr	r0, [r7, #8]
 800c6b4:	f000 f8d0 	bl	800c858 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6bc:	f043 0210 	orr.w	r2, r3, #16
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6c4:	68b8      	ldr	r0, [r7, #8]
 800c6c6:	f7ff fea1 	bl	800c40c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6ca:	bf00      	nop
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
	...

0800c6d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b098      	sub	sp, #96	@ 0x60
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	60f8      	str	r0, [r7, #12]
 800c6dc:	60b9      	str	r1, [r7, #8]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c6e2:	68ba      	ldr	r2, [r7, #8]
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	88fa      	ldrh	r2, [r7, #6]
 800c6ec:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2222      	movs	r2, #34	@ 0x22
 800c6f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c700:	4a3e      	ldr	r2, [pc, #248]	@ (800c7fc <UART_Start_Receive_DMA+0x128>)
 800c702:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c708:	4a3d      	ldr	r2, [pc, #244]	@ (800c800 <UART_Start_Receive_DMA+0x12c>)
 800c70a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c710:	4a3c      	ldr	r2, [pc, #240]	@ (800c804 <UART_Start_Receive_DMA+0x130>)
 800c712:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c718:	2200      	movs	r2, #0
 800c71a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c71c:	f107 0308 	add.w	r3, r7, #8
 800c720:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	3304      	adds	r3, #4
 800c72c:	4619      	mov	r1, r3
 800c72e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c730:	681a      	ldr	r2, [r3, #0]
 800c732:	88fb      	ldrh	r3, [r7, #6]
 800c734:	f7fb fe04 	bl	8008340 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c738:	2300      	movs	r3, #0
 800c73a:	613b      	str	r3, [r7, #16]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	613b      	str	r3, [r7, #16]
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	685b      	ldr	r3, [r3, #4]
 800c74a:	613b      	str	r3, [r7, #16]
 800c74c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d019      	beq.n	800c78a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	330c      	adds	r3, #12
 800c75c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c760:	e853 3f00 	ldrex	r3, [r3]
 800c764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c76c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	330c      	adds	r3, #12
 800c774:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c776:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800c778:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800c77c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c77e:	e841 2300 	strex	r3, r2, [r1]
 800c782:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800c784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c786:	2b00      	cmp	r3, #0
 800c788:	d1e5      	bne.n	800c756 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	3314      	adds	r3, #20
 800c790:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c794:	e853 3f00 	ldrex	r3, [r3]
 800c798:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c79a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79c:	f043 0301 	orr.w	r3, r3, #1
 800c7a0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	3314      	adds	r3, #20
 800c7a8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c7aa:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c7ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c7b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7b2:	e841 2300 	strex	r3, r2, [r1]
 800c7b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1e5      	bne.n	800c78a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3314      	adds	r3, #20
 800c7c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	e853 3f00 	ldrex	r3, [r3]
 800c7cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7d4:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3314      	adds	r3, #20
 800c7dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c7de:	627a      	str	r2, [r7, #36]	@ 0x24
 800c7e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e2:	6a39      	ldr	r1, [r7, #32]
 800c7e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7e6:	e841 2300 	strex	r3, r2, [r1]
 800c7ea:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7ec:	69fb      	ldr	r3, [r7, #28]
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1e5      	bne.n	800c7be <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800c7f2:	2300      	movs	r3, #0
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3760      	adds	r7, #96	@ 0x60
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}
 800c7fc:	0800c4d7 	.word	0x0800c4d7
 800c800:	0800c603 	.word	0x0800c603
 800c804:	0800c63f 	.word	0x0800c63f

0800c808 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c808:	b480      	push	{r7}
 800c80a:	b089      	sub	sp, #36	@ 0x24
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	330c      	adds	r3, #12
 800c816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	e853 3f00 	ldrex	r3, [r3]
 800c81e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c820:	68bb      	ldr	r3, [r7, #8]
 800c822:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800c826:	61fb      	str	r3, [r7, #28]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	330c      	adds	r3, #12
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	61ba      	str	r2, [r7, #24]
 800c832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c834:	6979      	ldr	r1, [r7, #20]
 800c836:	69ba      	ldr	r2, [r7, #24]
 800c838:	e841 2300 	strex	r3, r2, [r1]
 800c83c:	613b      	str	r3, [r7, #16]
   return(result);
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1e5      	bne.n	800c810 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2220      	movs	r2, #32
 800c848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800c84c:	bf00      	nop
 800c84e:	3724      	adds	r7, #36	@ 0x24
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr

0800c858 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c858:	b480      	push	{r7}
 800c85a:	b095      	sub	sp, #84	@ 0x54
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	330c      	adds	r3, #12
 800c866:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c86a:	e853 3f00 	ldrex	r3, [r3]
 800c86e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c872:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c876:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	330c      	adds	r3, #12
 800c87e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c880:	643a      	str	r2, [r7, #64]	@ 0x40
 800c882:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c884:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c886:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c888:	e841 2300 	strex	r3, r2, [r1]
 800c88c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c890:	2b00      	cmp	r3, #0
 800c892:	d1e5      	bne.n	800c860 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	3314      	adds	r3, #20
 800c89a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c89c:	6a3b      	ldr	r3, [r7, #32]
 800c89e:	e853 3f00 	ldrex	r3, [r3]
 800c8a2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	f023 0301 	bic.w	r3, r3, #1
 800c8aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	3314      	adds	r3, #20
 800c8b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c8ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8bc:	e841 2300 	strex	r3, r2, [r1]
 800c8c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d1e5      	bne.n	800c894 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8cc:	2b01      	cmp	r3, #1
 800c8ce:	d119      	bne.n	800c904 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	330c      	adds	r3, #12
 800c8d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	e853 3f00 	ldrex	r3, [r3]
 800c8de:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8e0:	68bb      	ldr	r3, [r7, #8]
 800c8e2:	f023 0310 	bic.w	r3, r3, #16
 800c8e6:	647b      	str	r3, [r7, #68]	@ 0x44
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	330c      	adds	r3, #12
 800c8ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8f0:	61ba      	str	r2, [r7, #24]
 800c8f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8f4:	6979      	ldr	r1, [r7, #20]
 800c8f6:	69ba      	ldr	r2, [r7, #24]
 800c8f8:	e841 2300 	strex	r3, r2, [r1]
 800c8fc:	613b      	str	r3, [r7, #16]
   return(result);
 800c8fe:	693b      	ldr	r3, [r7, #16]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d1e5      	bne.n	800c8d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2220      	movs	r2, #32
 800c908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800c912:	bf00      	nop
 800c914:	3754      	adds	r7, #84	@ 0x54
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c91e:	b580      	push	{r7, lr}
 800c920:	b084      	sub	sp, #16
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c92a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2200      	movs	r2, #0
 800c936:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f7ff fd67 	bl	800c40c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c93e:	bf00      	nop
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c946:	b480      	push	{r7}
 800c948:	b085      	sub	sp, #20
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c954:	b2db      	uxtb	r3, r3
 800c956:	2b21      	cmp	r3, #33	@ 0x21
 800c958:	d13e      	bne.n	800c9d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	689b      	ldr	r3, [r3, #8]
 800c95e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c962:	d114      	bne.n	800c98e <UART_Transmit_IT+0x48>
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	691b      	ldr	r3, [r3, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d110      	bne.n	800c98e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	6a1b      	ldr	r3, [r3, #32]
 800c970:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	881b      	ldrh	r3, [r3, #0]
 800c976:	461a      	mov	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c980:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	6a1b      	ldr	r3, [r3, #32]
 800c986:	1c9a      	adds	r2, r3, #2
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	621a      	str	r2, [r3, #32]
 800c98c:	e008      	b.n	800c9a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	1c59      	adds	r1, r3, #1
 800c994:	687a      	ldr	r2, [r7, #4]
 800c996:	6211      	str	r1, [r2, #32]
 800c998:	781a      	ldrb	r2, [r3, #0]
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	3b01      	subs	r3, #1
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	687a      	ldr	r2, [r7, #4]
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10f      	bne.n	800c9d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	68da      	ldr	r2, [r3, #12]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800c9c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	68da      	ldr	r2, [r3, #12]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c9d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	e000      	b.n	800c9da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9d8:	2302      	movs	r3, #2
  }
}
 800c9da:	4618      	mov	r0, r3
 800c9dc:	3714      	adds	r7, #20
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e4:	4770      	bx	lr

0800c9e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	68da      	ldr	r2, [r3, #12]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800c9fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2220      	movs	r2, #32
 800ca02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff fcd8 	bl	800c3bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3708      	adds	r7, #8
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}

0800ca16 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ca16:	b580      	push	{r7, lr}
 800ca18:	b08c      	sub	sp, #48	@ 0x30
 800ca1a:	af00      	add	r7, sp, #0
 800ca1c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b22      	cmp	r3, #34	@ 0x22
 800ca28:	f040 80ae 	bne.w	800cb88 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	689b      	ldr	r3, [r3, #8]
 800ca30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca34:	d117      	bne.n	800ca66 <UART_Receive_IT+0x50>
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d113      	bne.n	800ca66 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca46:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	b29b      	uxth	r3, r3
 800ca50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca54:	b29a      	uxth	r2, r3
 800ca56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca5e:	1c9a      	adds	r2, r3, #2
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	629a      	str	r2, [r3, #40]	@ 0x28
 800ca64:	e026      	b.n	800cab4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ca78:	d007      	beq.n	800ca8a <UART_Receive_IT+0x74>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	689b      	ldr	r3, [r3, #8]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d10a      	bne.n	800ca98 <UART_Receive_IT+0x82>
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	691b      	ldr	r3, [r3, #16]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d106      	bne.n	800ca98 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca94:	701a      	strb	r2, [r3, #0]
 800ca96:	e008      	b.n	800caaa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	685b      	ldr	r3, [r3, #4]
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caa8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cab8:	b29b      	uxth	r3, r3
 800caba:	3b01      	subs	r3, #1
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	687a      	ldr	r2, [r7, #4]
 800cac0:	4619      	mov	r1, r3
 800cac2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d15d      	bne.n	800cb84 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	68da      	ldr	r2, [r3, #12]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f022 0220 	bic.w	r2, r2, #32
 800cad6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	68da      	ldr	r2, [r3, #12]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cae6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	695a      	ldr	r2, [r3, #20]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f022 0201 	bic.w	r2, r2, #1
 800caf6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2220      	movs	r2, #32
 800cafc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb0a:	2b01      	cmp	r3, #1
 800cb0c:	d135      	bne.n	800cb7a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	330c      	adds	r3, #12
 800cb1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	e853 3f00 	ldrex	r3, [r3]
 800cb22:	613b      	str	r3, [r7, #16]
   return(result);
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	f023 0310 	bic.w	r3, r3, #16
 800cb2a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	330c      	adds	r3, #12
 800cb32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb34:	623a      	str	r2, [r7, #32]
 800cb36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb38:	69f9      	ldr	r1, [r7, #28]
 800cb3a:	6a3a      	ldr	r2, [r7, #32]
 800cb3c:	e841 2300 	strex	r3, r2, [r1]
 800cb40:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb42:	69bb      	ldr	r3, [r7, #24]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d1e5      	bne.n	800cb14 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f003 0310 	and.w	r3, r3, #16
 800cb52:	2b10      	cmp	r3, #16
 800cb54:	d10a      	bne.n	800cb6c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb56:	2300      	movs	r3, #0
 800cb58:	60fb      	str	r3, [r7, #12]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	60fb      	str	r3, [r7, #12]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	60fb      	str	r3, [r7, #12]
 800cb6a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cb70:	4619      	mov	r1, r3
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f7f5 fec8 	bl	8002908 <HAL_UARTEx_RxEventCallback>
 800cb78:	e002      	b.n	800cb80 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f7ff fc32 	bl	800c3e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	e002      	b.n	800cb8a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb84:	2300      	movs	r3, #0
 800cb86:	e000      	b.n	800cb8a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb88:	2302      	movs	r3, #2
  }
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3730      	adds	r7, #48	@ 0x30
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}
	...

0800cb94 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cb98:	b0c0      	sub	sp, #256	@ 0x100
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	691b      	ldr	r3, [r3, #16]
 800cba8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800cbac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbb0:	68d9      	ldr	r1, [r3, #12]
 800cbb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbb6:	681a      	ldr	r2, [r3, #0]
 800cbb8:	ea40 0301 	orr.w	r3, r0, r1
 800cbbc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cbbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbc2:	689a      	ldr	r2, [r3, #8]
 800cbc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	431a      	orrs	r2, r3
 800cbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbd8:	69db      	ldr	r3, [r3, #28]
 800cbda:	4313      	orrs	r3, r2
 800cbdc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cbe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	68db      	ldr	r3, [r3, #12]
 800cbe8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cbec:	f021 010c 	bic.w	r1, r1, #12
 800cbf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cbf4:	681a      	ldr	r2, [r3, #0]
 800cbf6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cbfa:	430b      	orrs	r3, r1
 800cbfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cbfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	695b      	ldr	r3, [r3, #20]
 800cc06:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cc0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc0e:	6999      	ldr	r1, [r3, #24]
 800cc10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	ea40 0301 	orr.w	r3, r0, r1
 800cc1a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cc1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc20:	681a      	ldr	r2, [r3, #0]
 800cc22:	4b8f      	ldr	r3, [pc, #572]	@ (800ce60 <UART_SetConfig+0x2cc>)
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d005      	beq.n	800cc34 <UART_SetConfig+0xa0>
 800cc28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	4b8d      	ldr	r3, [pc, #564]	@ (800ce64 <UART_SetConfig+0x2d0>)
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d104      	bne.n	800cc3e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cc34:	f7fd fd1a 	bl	800a66c <HAL_RCC_GetPCLK2Freq>
 800cc38:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cc3c:	e003      	b.n	800cc46 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc3e:	f7fd fd01 	bl	800a644 <HAL_RCC_GetPCLK1Freq>
 800cc42:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cc4a:	69db      	ldr	r3, [r3, #28]
 800cc4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cc50:	f040 810c 	bne.w	800ce6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cc54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cc58:	2200      	movs	r2, #0
 800cc5a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cc5e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cc62:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cc66:	4622      	mov	r2, r4
 800cc68:	462b      	mov	r3, r5
 800cc6a:	1891      	adds	r1, r2, r2
 800cc6c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cc6e:	415b      	adcs	r3, r3
 800cc70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc72:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cc76:	4621      	mov	r1, r4
 800cc78:	eb12 0801 	adds.w	r8, r2, r1
 800cc7c:	4629      	mov	r1, r5
 800cc7e:	eb43 0901 	adc.w	r9, r3, r1
 800cc82:	f04f 0200 	mov.w	r2, #0
 800cc86:	f04f 0300 	mov.w	r3, #0
 800cc8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cc8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cc92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cc96:	4690      	mov	r8, r2
 800cc98:	4699      	mov	r9, r3
 800cc9a:	4623      	mov	r3, r4
 800cc9c:	eb18 0303 	adds.w	r3, r8, r3
 800cca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cca4:	462b      	mov	r3, r5
 800cca6:	eb49 0303 	adc.w	r3, r9, r3
 800ccaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800ccae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ccb2:	685b      	ldr	r3, [r3, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ccba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ccbe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	18db      	adds	r3, r3, r3
 800ccc6:	653b      	str	r3, [r7, #80]	@ 0x50
 800ccc8:	4613      	mov	r3, r2
 800ccca:	eb42 0303 	adc.w	r3, r2, r3
 800ccce:	657b      	str	r3, [r7, #84]	@ 0x54
 800ccd0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800ccd4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800ccd8:	f7f4 f8ae 	bl	8000e38 <__aeabi_uldivmod>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	4b61      	ldr	r3, [pc, #388]	@ (800ce68 <UART_SetConfig+0x2d4>)
 800cce2:	fba3 2302 	umull	r2, r3, r3, r2
 800cce6:	095b      	lsrs	r3, r3, #5
 800cce8:	011c      	lsls	r4, r3, #4
 800ccea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800ccf4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800ccf8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800ccfc:	4642      	mov	r2, r8
 800ccfe:	464b      	mov	r3, r9
 800cd00:	1891      	adds	r1, r2, r2
 800cd02:	64b9      	str	r1, [r7, #72]	@ 0x48
 800cd04:	415b      	adcs	r3, r3
 800cd06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cd08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800cd0c:	4641      	mov	r1, r8
 800cd0e:	eb12 0a01 	adds.w	sl, r2, r1
 800cd12:	4649      	mov	r1, r9
 800cd14:	eb43 0b01 	adc.w	fp, r3, r1
 800cd18:	f04f 0200 	mov.w	r2, #0
 800cd1c:	f04f 0300 	mov.w	r3, #0
 800cd20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cd24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cd28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd2c:	4692      	mov	sl, r2
 800cd2e:	469b      	mov	fp, r3
 800cd30:	4643      	mov	r3, r8
 800cd32:	eb1a 0303 	adds.w	r3, sl, r3
 800cd36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800cd3a:	464b      	mov	r3, r9
 800cd3c:	eb4b 0303 	adc.w	r3, fp, r3
 800cd40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800cd44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800cd50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800cd54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	18db      	adds	r3, r3, r3
 800cd5c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cd5e:	4613      	mov	r3, r2
 800cd60:	eb42 0303 	adc.w	r3, r2, r3
 800cd64:	647b      	str	r3, [r7, #68]	@ 0x44
 800cd66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800cd6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800cd6e:	f7f4 f863 	bl	8000e38 <__aeabi_uldivmod>
 800cd72:	4602      	mov	r2, r0
 800cd74:	460b      	mov	r3, r1
 800cd76:	4611      	mov	r1, r2
 800cd78:	4b3b      	ldr	r3, [pc, #236]	@ (800ce68 <UART_SetConfig+0x2d4>)
 800cd7a:	fba3 2301 	umull	r2, r3, r3, r1
 800cd7e:	095b      	lsrs	r3, r3, #5
 800cd80:	2264      	movs	r2, #100	@ 0x64
 800cd82:	fb02 f303 	mul.w	r3, r2, r3
 800cd86:	1acb      	subs	r3, r1, r3
 800cd88:	00db      	lsls	r3, r3, #3
 800cd8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800cd8e:	4b36      	ldr	r3, [pc, #216]	@ (800ce68 <UART_SetConfig+0x2d4>)
 800cd90:	fba3 2302 	umull	r2, r3, r3, r2
 800cd94:	095b      	lsrs	r3, r3, #5
 800cd96:	005b      	lsls	r3, r3, #1
 800cd98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800cd9c:	441c      	add	r4, r3
 800cd9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cda2:	2200      	movs	r2, #0
 800cda4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800cda8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800cdac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800cdb0:	4642      	mov	r2, r8
 800cdb2:	464b      	mov	r3, r9
 800cdb4:	1891      	adds	r1, r2, r2
 800cdb6:	63b9      	str	r1, [r7, #56]	@ 0x38
 800cdb8:	415b      	adcs	r3, r3
 800cdba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdbc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800cdc0:	4641      	mov	r1, r8
 800cdc2:	1851      	adds	r1, r2, r1
 800cdc4:	6339      	str	r1, [r7, #48]	@ 0x30
 800cdc6:	4649      	mov	r1, r9
 800cdc8:	414b      	adcs	r3, r1
 800cdca:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdcc:	f04f 0200 	mov.w	r2, #0
 800cdd0:	f04f 0300 	mov.w	r3, #0
 800cdd4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800cdd8:	4659      	mov	r1, fp
 800cdda:	00cb      	lsls	r3, r1, #3
 800cddc:	4651      	mov	r1, sl
 800cdde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cde2:	4651      	mov	r1, sl
 800cde4:	00ca      	lsls	r2, r1, #3
 800cde6:	4610      	mov	r0, r2
 800cde8:	4619      	mov	r1, r3
 800cdea:	4603      	mov	r3, r0
 800cdec:	4642      	mov	r2, r8
 800cdee:	189b      	adds	r3, r3, r2
 800cdf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800cdf4:	464b      	mov	r3, r9
 800cdf6:	460a      	mov	r2, r1
 800cdf8:	eb42 0303 	adc.w	r3, r2, r3
 800cdfc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ce00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce04:	685b      	ldr	r3, [r3, #4]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ce0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800ce10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800ce14:	460b      	mov	r3, r1
 800ce16:	18db      	adds	r3, r3, r3
 800ce18:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce1a:	4613      	mov	r3, r2
 800ce1c:	eb42 0303 	adc.w	r3, r2, r3
 800ce20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800ce26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800ce2a:	f7f4 f805 	bl	8000e38 <__aeabi_uldivmod>
 800ce2e:	4602      	mov	r2, r0
 800ce30:	460b      	mov	r3, r1
 800ce32:	4b0d      	ldr	r3, [pc, #52]	@ (800ce68 <UART_SetConfig+0x2d4>)
 800ce34:	fba3 1302 	umull	r1, r3, r3, r2
 800ce38:	095b      	lsrs	r3, r3, #5
 800ce3a:	2164      	movs	r1, #100	@ 0x64
 800ce3c:	fb01 f303 	mul.w	r3, r1, r3
 800ce40:	1ad3      	subs	r3, r2, r3
 800ce42:	00db      	lsls	r3, r3, #3
 800ce44:	3332      	adds	r3, #50	@ 0x32
 800ce46:	4a08      	ldr	r2, [pc, #32]	@ (800ce68 <UART_SetConfig+0x2d4>)
 800ce48:	fba2 2303 	umull	r2, r3, r2, r3
 800ce4c:	095b      	lsrs	r3, r3, #5
 800ce4e:	f003 0207 	and.w	r2, r3, #7
 800ce52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	4422      	add	r2, r4
 800ce5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ce5c:	e106      	b.n	800d06c <UART_SetConfig+0x4d8>
 800ce5e:	bf00      	nop
 800ce60:	40011000 	.word	0x40011000
 800ce64:	40011400 	.word	0x40011400
 800ce68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800ce70:	2200      	movs	r2, #0
 800ce72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ce76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800ce7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800ce7e:	4642      	mov	r2, r8
 800ce80:	464b      	mov	r3, r9
 800ce82:	1891      	adds	r1, r2, r2
 800ce84:	6239      	str	r1, [r7, #32]
 800ce86:	415b      	adcs	r3, r3
 800ce88:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ce8e:	4641      	mov	r1, r8
 800ce90:	1854      	adds	r4, r2, r1
 800ce92:	4649      	mov	r1, r9
 800ce94:	eb43 0501 	adc.w	r5, r3, r1
 800ce98:	f04f 0200 	mov.w	r2, #0
 800ce9c:	f04f 0300 	mov.w	r3, #0
 800cea0:	00eb      	lsls	r3, r5, #3
 800cea2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cea6:	00e2      	lsls	r2, r4, #3
 800cea8:	4614      	mov	r4, r2
 800ceaa:	461d      	mov	r5, r3
 800ceac:	4643      	mov	r3, r8
 800ceae:	18e3      	adds	r3, r4, r3
 800ceb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ceb4:	464b      	mov	r3, r9
 800ceb6:	eb45 0303 	adc.w	r3, r5, r3
 800ceba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800cebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cec2:	685b      	ldr	r3, [r3, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ceca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800cece:	f04f 0200 	mov.w	r2, #0
 800ced2:	f04f 0300 	mov.w	r3, #0
 800ced6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800ceda:	4629      	mov	r1, r5
 800cedc:	008b      	lsls	r3, r1, #2
 800cede:	4621      	mov	r1, r4
 800cee0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cee4:	4621      	mov	r1, r4
 800cee6:	008a      	lsls	r2, r1, #2
 800cee8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800ceec:	f7f3 ffa4 	bl	8000e38 <__aeabi_uldivmod>
 800cef0:	4602      	mov	r2, r0
 800cef2:	460b      	mov	r3, r1
 800cef4:	4b60      	ldr	r3, [pc, #384]	@ (800d078 <UART_SetConfig+0x4e4>)
 800cef6:	fba3 2302 	umull	r2, r3, r3, r2
 800cefa:	095b      	lsrs	r3, r3, #5
 800cefc:	011c      	lsls	r4, r3, #4
 800cefe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf02:	2200      	movs	r2, #0
 800cf04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800cf08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800cf0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800cf10:	4642      	mov	r2, r8
 800cf12:	464b      	mov	r3, r9
 800cf14:	1891      	adds	r1, r2, r2
 800cf16:	61b9      	str	r1, [r7, #24]
 800cf18:	415b      	adcs	r3, r3
 800cf1a:	61fb      	str	r3, [r7, #28]
 800cf1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cf20:	4641      	mov	r1, r8
 800cf22:	1851      	adds	r1, r2, r1
 800cf24:	6139      	str	r1, [r7, #16]
 800cf26:	4649      	mov	r1, r9
 800cf28:	414b      	adcs	r3, r1
 800cf2a:	617b      	str	r3, [r7, #20]
 800cf2c:	f04f 0200 	mov.w	r2, #0
 800cf30:	f04f 0300 	mov.w	r3, #0
 800cf34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cf38:	4659      	mov	r1, fp
 800cf3a:	00cb      	lsls	r3, r1, #3
 800cf3c:	4651      	mov	r1, sl
 800cf3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf42:	4651      	mov	r1, sl
 800cf44:	00ca      	lsls	r2, r1, #3
 800cf46:	4610      	mov	r0, r2
 800cf48:	4619      	mov	r1, r3
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	4642      	mov	r2, r8
 800cf4e:	189b      	adds	r3, r3, r2
 800cf50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800cf54:	464b      	mov	r3, r9
 800cf56:	460a      	mov	r2, r1
 800cf58:	eb42 0303 	adc.w	r3, r2, r3
 800cf5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800cf60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf64:	685b      	ldr	r3, [r3, #4]
 800cf66:	2200      	movs	r2, #0
 800cf68:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800cf6c:	f04f 0200 	mov.w	r2, #0
 800cf70:	f04f 0300 	mov.w	r3, #0
 800cf74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800cf78:	4649      	mov	r1, r9
 800cf7a:	008b      	lsls	r3, r1, #2
 800cf7c:	4641      	mov	r1, r8
 800cf7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cf82:	4641      	mov	r1, r8
 800cf84:	008a      	lsls	r2, r1, #2
 800cf86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800cf8a:	f7f3 ff55 	bl	8000e38 <__aeabi_uldivmod>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	460b      	mov	r3, r1
 800cf92:	4611      	mov	r1, r2
 800cf94:	4b38      	ldr	r3, [pc, #224]	@ (800d078 <UART_SetConfig+0x4e4>)
 800cf96:	fba3 2301 	umull	r2, r3, r3, r1
 800cf9a:	095b      	lsrs	r3, r3, #5
 800cf9c:	2264      	movs	r2, #100	@ 0x64
 800cf9e:	fb02 f303 	mul.w	r3, r2, r3
 800cfa2:	1acb      	subs	r3, r1, r3
 800cfa4:	011b      	lsls	r3, r3, #4
 800cfa6:	3332      	adds	r3, #50	@ 0x32
 800cfa8:	4a33      	ldr	r2, [pc, #204]	@ (800d078 <UART_SetConfig+0x4e4>)
 800cfaa:	fba2 2303 	umull	r2, r3, r2, r3
 800cfae:	095b      	lsrs	r3, r3, #5
 800cfb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cfb4:	441c      	add	r4, r3
 800cfb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cfba:	2200      	movs	r2, #0
 800cfbc:	673b      	str	r3, [r7, #112]	@ 0x70
 800cfbe:	677a      	str	r2, [r7, #116]	@ 0x74
 800cfc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800cfc4:	4642      	mov	r2, r8
 800cfc6:	464b      	mov	r3, r9
 800cfc8:	1891      	adds	r1, r2, r2
 800cfca:	60b9      	str	r1, [r7, #8]
 800cfcc:	415b      	adcs	r3, r3
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cfd4:	4641      	mov	r1, r8
 800cfd6:	1851      	adds	r1, r2, r1
 800cfd8:	6039      	str	r1, [r7, #0]
 800cfda:	4649      	mov	r1, r9
 800cfdc:	414b      	adcs	r3, r1
 800cfde:	607b      	str	r3, [r7, #4]
 800cfe0:	f04f 0200 	mov.w	r2, #0
 800cfe4:	f04f 0300 	mov.w	r3, #0
 800cfe8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cfec:	4659      	mov	r1, fp
 800cfee:	00cb      	lsls	r3, r1, #3
 800cff0:	4651      	mov	r1, sl
 800cff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cff6:	4651      	mov	r1, sl
 800cff8:	00ca      	lsls	r2, r1, #3
 800cffa:	4610      	mov	r0, r2
 800cffc:	4619      	mov	r1, r3
 800cffe:	4603      	mov	r3, r0
 800d000:	4642      	mov	r2, r8
 800d002:	189b      	adds	r3, r3, r2
 800d004:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d006:	464b      	mov	r3, r9
 800d008:	460a      	mov	r2, r1
 800d00a:	eb42 0303 	adc.w	r3, r2, r3
 800d00e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	663b      	str	r3, [r7, #96]	@ 0x60
 800d01a:	667a      	str	r2, [r7, #100]	@ 0x64
 800d01c:	f04f 0200 	mov.w	r2, #0
 800d020:	f04f 0300 	mov.w	r3, #0
 800d024:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d028:	4649      	mov	r1, r9
 800d02a:	008b      	lsls	r3, r1, #2
 800d02c:	4641      	mov	r1, r8
 800d02e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d032:	4641      	mov	r1, r8
 800d034:	008a      	lsls	r2, r1, #2
 800d036:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d03a:	f7f3 fefd 	bl	8000e38 <__aeabi_uldivmod>
 800d03e:	4602      	mov	r2, r0
 800d040:	460b      	mov	r3, r1
 800d042:	4b0d      	ldr	r3, [pc, #52]	@ (800d078 <UART_SetConfig+0x4e4>)
 800d044:	fba3 1302 	umull	r1, r3, r3, r2
 800d048:	095b      	lsrs	r3, r3, #5
 800d04a:	2164      	movs	r1, #100	@ 0x64
 800d04c:	fb01 f303 	mul.w	r3, r1, r3
 800d050:	1ad3      	subs	r3, r2, r3
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	3332      	adds	r3, #50	@ 0x32
 800d056:	4a08      	ldr	r2, [pc, #32]	@ (800d078 <UART_SetConfig+0x4e4>)
 800d058:	fba2 2303 	umull	r2, r3, r2, r3
 800d05c:	095b      	lsrs	r3, r3, #5
 800d05e:	f003 020f 	and.w	r2, r3, #15
 800d062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4422      	add	r2, r4
 800d06a:	609a      	str	r2, [r3, #8]
}
 800d06c:	bf00      	nop
 800d06e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d072:	46bd      	mov	sp, r7
 800d074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d078:	51eb851f 	.word	0x51eb851f

0800d07c <__NVIC_SetPriority>:
{
 800d07c:	b480      	push	{r7}
 800d07e:	b083      	sub	sp, #12
 800d080:	af00      	add	r7, sp, #0
 800d082:	4603      	mov	r3, r0
 800d084:	6039      	str	r1, [r7, #0]
 800d086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	db0a      	blt.n	800d0a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	b2da      	uxtb	r2, r3
 800d094:	490c      	ldr	r1, [pc, #48]	@ (800d0c8 <__NVIC_SetPriority+0x4c>)
 800d096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d09a:	0112      	lsls	r2, r2, #4
 800d09c:	b2d2      	uxtb	r2, r2
 800d09e:	440b      	add	r3, r1
 800d0a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800d0a4:	e00a      	b.n	800d0bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	b2da      	uxtb	r2, r3
 800d0aa:	4908      	ldr	r1, [pc, #32]	@ (800d0cc <__NVIC_SetPriority+0x50>)
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	f003 030f 	and.w	r3, r3, #15
 800d0b2:	3b04      	subs	r3, #4
 800d0b4:	0112      	lsls	r2, r2, #4
 800d0b6:	b2d2      	uxtb	r2, r2
 800d0b8:	440b      	add	r3, r1
 800d0ba:	761a      	strb	r2, [r3, #24]
}
 800d0bc:	bf00      	nop
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr
 800d0c8:	e000e100 	.word	0xe000e100
 800d0cc:	e000ed00 	.word	0xe000ed00

0800d0d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	f06f 0004 	mvn.w	r0, #4
 800d0da:	f7ff ffcf 	bl	800d07c <__NVIC_SetPriority>
#endif
}
 800d0de:	bf00      	nop
 800d0e0:	bd80      	pop	{r7, pc}
	...

0800d0e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d0ea:	f3ef 8305 	mrs	r3, IPSR
 800d0ee:	603b      	str	r3, [r7, #0]
  return(result);
 800d0f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d003      	beq.n	800d0fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800d0f6:	f06f 0305 	mvn.w	r3, #5
 800d0fa:	607b      	str	r3, [r7, #4]
 800d0fc:	e00c      	b.n	800d118 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d0fe:	4b0a      	ldr	r3, [pc, #40]	@ (800d128 <osKernelInitialize+0x44>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d105      	bne.n	800d112 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d106:	4b08      	ldr	r3, [pc, #32]	@ (800d128 <osKernelInitialize+0x44>)
 800d108:	2201      	movs	r2, #1
 800d10a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d10c:	2300      	movs	r3, #0
 800d10e:	607b      	str	r3, [r7, #4]
 800d110:	e002      	b.n	800d118 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800d112:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d116:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d118:	687b      	ldr	r3, [r7, #4]
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	2000100c 	.word	0x2000100c

0800d12c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d132:	f3ef 8305 	mrs	r3, IPSR
 800d136:	603b      	str	r3, [r7, #0]
  return(result);
 800d138:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d003      	beq.n	800d146 <osKernelStart+0x1a>
    stat = osErrorISR;
 800d13e:	f06f 0305 	mvn.w	r3, #5
 800d142:	607b      	str	r3, [r7, #4]
 800d144:	e010      	b.n	800d168 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d146:	4b0b      	ldr	r3, [pc, #44]	@ (800d174 <osKernelStart+0x48>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d109      	bne.n	800d162 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d14e:	f7ff ffbf 	bl	800d0d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d152:	4b08      	ldr	r3, [pc, #32]	@ (800d174 <osKernelStart+0x48>)
 800d154:	2202      	movs	r2, #2
 800d156:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d158:	f001 f892 	bl	800e280 <vTaskStartScheduler>
      stat = osOK;
 800d15c:	2300      	movs	r3, #0
 800d15e:	607b      	str	r3, [r7, #4]
 800d160:	e002      	b.n	800d168 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800d162:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d166:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800d168:	687b      	ldr	r3, [r7, #4]
}
 800d16a:	4618      	mov	r0, r3
 800d16c:	3708      	adds	r7, #8
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
 800d172:	bf00      	nop
 800d174:	2000100c 	.word	0x2000100c

0800d178 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d178:	b580      	push	{r7, lr}
 800d17a:	b08e      	sub	sp, #56	@ 0x38
 800d17c:	af04      	add	r7, sp, #16
 800d17e:	60f8      	str	r0, [r7, #12]
 800d180:	60b9      	str	r1, [r7, #8]
 800d182:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d184:	2300      	movs	r3, #0
 800d186:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d188:	f3ef 8305 	mrs	r3, IPSR
 800d18c:	617b      	str	r3, [r7, #20]
  return(result);
 800d18e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800d190:	2b00      	cmp	r3, #0
 800d192:	d17e      	bne.n	800d292 <osThreadNew+0x11a>
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d07b      	beq.n	800d292 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800d19a:	2380      	movs	r3, #128	@ 0x80
 800d19c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800d19e:	2318      	movs	r3, #24
 800d1a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800d1a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d1aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d045      	beq.n	800d23e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d002      	beq.n	800d1c0 <osThreadNew+0x48>
        name = attr->name;
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d002      	beq.n	800d1ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	699b      	ldr	r3, [r3, #24]
 800d1cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d008      	beq.n	800d1e6 <osThreadNew+0x6e>
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	2b38      	cmp	r3, #56	@ 0x38
 800d1d8:	d805      	bhi.n	800d1e6 <osThreadNew+0x6e>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	685b      	ldr	r3, [r3, #4]
 800d1de:	f003 0301 	and.w	r3, r3, #1
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d001      	beq.n	800d1ea <osThreadNew+0x72>
        return (NULL);
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	e054      	b.n	800d294 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	695b      	ldr	r3, [r3, #20]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d003      	beq.n	800d1fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	089b      	lsrs	r3, r3, #2
 800d1f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d00e      	beq.n	800d220 <osThreadNew+0xa8>
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	2ba7      	cmp	r3, #167	@ 0xa7
 800d208:	d90a      	bls.n	800d220 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d006      	beq.n	800d220 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	695b      	ldr	r3, [r3, #20]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d002      	beq.n	800d220 <osThreadNew+0xa8>
        mem = 1;
 800d21a:	2301      	movs	r3, #1
 800d21c:	61bb      	str	r3, [r7, #24]
 800d21e:	e010      	b.n	800d242 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	689b      	ldr	r3, [r3, #8]
 800d224:	2b00      	cmp	r3, #0
 800d226:	d10c      	bne.n	800d242 <osThreadNew+0xca>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	68db      	ldr	r3, [r3, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d108      	bne.n	800d242 <osThreadNew+0xca>
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	691b      	ldr	r3, [r3, #16]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d104      	bne.n	800d242 <osThreadNew+0xca>
          mem = 0;
 800d238:	2300      	movs	r3, #0
 800d23a:	61bb      	str	r3, [r7, #24]
 800d23c:	e001      	b.n	800d242 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800d23e:	2300      	movs	r3, #0
 800d240:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d110      	bne.n	800d26a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800d24c:	687a      	ldr	r2, [r7, #4]
 800d24e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d250:	9202      	str	r2, [sp, #8]
 800d252:	9301      	str	r3, [sp, #4]
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	9300      	str	r3, [sp, #0]
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	6a3a      	ldr	r2, [r7, #32]
 800d25c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d25e:	68f8      	ldr	r0, [r7, #12]
 800d260:	f000 fe1a 	bl	800de98 <xTaskCreateStatic>
 800d264:	4603      	mov	r3, r0
 800d266:	613b      	str	r3, [r7, #16]
 800d268:	e013      	b.n	800d292 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800d26a:	69bb      	ldr	r3, [r7, #24]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d110      	bne.n	800d292 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d270:	6a3b      	ldr	r3, [r7, #32]
 800d272:	b29a      	uxth	r2, r3
 800d274:	f107 0310 	add.w	r3, r7, #16
 800d278:	9301      	str	r3, [sp, #4]
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	9300      	str	r3, [sp, #0]
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d282:	68f8      	ldr	r0, [r7, #12]
 800d284:	f000 fe68 	bl	800df58 <xTaskCreate>
 800d288:	4603      	mov	r3, r0
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d001      	beq.n	800d292 <osThreadNew+0x11a>
            hTask = NULL;
 800d28e:	2300      	movs	r3, #0
 800d290:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d292:	693b      	ldr	r3, [r7, #16]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3728      	adds	r7, #40	@ 0x28
 800d298:	46bd      	mov	sp, r7
 800d29a:	bd80      	pop	{r7, pc}

0800d29c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800d29c:	b580      	push	{r7, lr}
 800d29e:	b084      	sub	sp, #16
 800d2a0:	af00      	add	r7, sp, #0
 800d2a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d2a4:	f3ef 8305 	mrs	r3, IPSR
 800d2a8:	60bb      	str	r3, [r7, #8]
  return(result);
 800d2aa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d003      	beq.n	800d2b8 <osDelay+0x1c>
    stat = osErrorISR;
 800d2b0:	f06f 0305 	mvn.w	r3, #5
 800d2b4:	60fb      	str	r3, [r7, #12]
 800d2b6:	e007      	b.n	800d2c8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d002      	beq.n	800d2c8 <osDelay+0x2c>
      vTaskDelay(ticks);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 ffa6 	bl	800e214 <vTaskDelay>
    }
  }

  return (stat);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
	...

0800d2d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d2d4:	b480      	push	{r7}
 800d2d6:	b085      	sub	sp, #20
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	60f8      	str	r0, [r7, #12]
 800d2dc:	60b9      	str	r1, [r7, #8]
 800d2de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	4a07      	ldr	r2, [pc, #28]	@ (800d300 <vApplicationGetIdleTaskMemory+0x2c>)
 800d2e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	4a06      	ldr	r2, [pc, #24]	@ (800d304 <vApplicationGetIdleTaskMemory+0x30>)
 800d2ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2280      	movs	r2, #128	@ 0x80
 800d2f0:	601a      	str	r2, [r3, #0]
}
 800d2f2:	bf00      	nop
 800d2f4:	3714      	adds	r7, #20
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	20001010 	.word	0x20001010
 800d304:	200010b8 	.word	0x200010b8

0800d308 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	60b9      	str	r1, [r7, #8]
 800d312:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	4a07      	ldr	r2, [pc, #28]	@ (800d334 <vApplicationGetTimerTaskMemory+0x2c>)
 800d318:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	4a06      	ldr	r2, [pc, #24]	@ (800d338 <vApplicationGetTimerTaskMemory+0x30>)
 800d31e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d326:	601a      	str	r2, [r3, #0]
}
 800d328:	bf00      	nop
 800d32a:	3714      	adds	r7, #20
 800d32c:	46bd      	mov	sp, r7
 800d32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d332:	4770      	bx	lr
 800d334:	200012b8 	.word	0x200012b8
 800d338:	20001360 	.word	0x20001360

0800d33c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f103 0208 	add.w	r2, r3, #8
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d354:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f103 0208 	add.w	r2, r3, #8
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f103 0208 	add.w	r2, r3, #8
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d370:	bf00      	nop
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d38a:	bf00      	nop
 800d38c:	370c      	adds	r7, #12
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d396:	b480      	push	{r7}
 800d398:	b085      	sub	sp, #20
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
 800d39e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	689a      	ldr	r2, [r3, #8]
 800d3b0:	683b      	ldr	r3, [r7, #0]
 800d3b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	689b      	ldr	r3, [r3, #8]
 800d3b8:	683a      	ldr	r2, [r7, #0]
 800d3ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	683a      	ldr	r2, [r7, #0]
 800d3c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	687a      	ldr	r2, [r7, #4]
 800d3c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	1c5a      	adds	r2, r3, #1
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	601a      	str	r2, [r3, #0]
}
 800d3d2:	bf00      	nop
 800d3d4:	3714      	adds	r7, #20
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr

0800d3de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d3de:	b480      	push	{r7}
 800d3e0:	b085      	sub	sp, #20
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3f4:	d103      	bne.n	800d3fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	60fb      	str	r3, [r7, #12]
 800d3fc:	e00c      	b.n	800d418 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	3308      	adds	r3, #8
 800d402:	60fb      	str	r3, [r7, #12]
 800d404:	e002      	b.n	800d40c <vListInsert+0x2e>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	685b      	ldr	r3, [r3, #4]
 800d40a:	60fb      	str	r3, [r7, #12]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	68ba      	ldr	r2, [r7, #8]
 800d414:	429a      	cmp	r2, r3
 800d416:	d2f6      	bcs.n	800d406 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	685a      	ldr	r2, [r3, #4]
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	683a      	ldr	r2, [r7, #0]
 800d426:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	68fa      	ldr	r2, [r7, #12]
 800d42c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	683a      	ldr	r2, [r7, #0]
 800d432:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	687a      	ldr	r2, [r7, #4]
 800d438:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	601a      	str	r2, [r3, #0]
}
 800d444:	bf00      	nop
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	691b      	ldr	r3, [r3, #16]
 800d45c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	685b      	ldr	r3, [r3, #4]
 800d462:	687a      	ldr	r2, [r7, #4]
 800d464:	6892      	ldr	r2, [r2, #8]
 800d466:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	689b      	ldr	r3, [r3, #8]
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	6852      	ldr	r2, [r2, #4]
 800d470:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	687a      	ldr	r2, [r7, #4]
 800d478:	429a      	cmp	r2, r3
 800d47a:	d103      	bne.n	800d484 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	689a      	ldr	r2, [r3, #8]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	1e5a      	subs	r2, r3, #1
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	681b      	ldr	r3, [r3, #0]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3714      	adds	r7, #20
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
 800d4ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d10b      	bne.n	800d4d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d4b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4bc:	f383 8811 	msr	BASEPRI, r3
 800d4c0:	f3bf 8f6f 	isb	sy
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d4ca:	bf00      	nop
 800d4cc:	bf00      	nop
 800d4ce:	e7fd      	b.n	800d4cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d4d0:	f002 fa82 	bl	800f9d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4dc:	68f9      	ldr	r1, [r7, #12]
 800d4de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d4e0:	fb01 f303 	mul.w	r3, r1, r3
 800d4e4:	441a      	add	r2, r3
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d500:	3b01      	subs	r3, #1
 800d502:	68f9      	ldr	r1, [r7, #12]
 800d504:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d506:	fb01 f303 	mul.w	r3, r1, r3
 800d50a:	441a      	add	r2, r3
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	22ff      	movs	r2, #255	@ 0xff
 800d514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	22ff      	movs	r2, #255	@ 0xff
 800d51c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d520:	683b      	ldr	r3, [r7, #0]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d114      	bne.n	800d550 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d01a      	beq.n	800d564 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3310      	adds	r3, #16
 800d532:	4618      	mov	r0, r3
 800d534:	f001 fa3c 	bl	800e9b0 <xTaskRemoveFromEventList>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d012      	beq.n	800d564 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d53e:	4b0d      	ldr	r3, [pc, #52]	@ (800d574 <xQueueGenericReset+0xd0>)
 800d540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d544:	601a      	str	r2, [r3, #0]
 800d546:	f3bf 8f4f 	dsb	sy
 800d54a:	f3bf 8f6f 	isb	sy
 800d54e:	e009      	b.n	800d564 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	3310      	adds	r3, #16
 800d554:	4618      	mov	r0, r3
 800d556:	f7ff fef1 	bl	800d33c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3324      	adds	r3, #36	@ 0x24
 800d55e:	4618      	mov	r0, r3
 800d560:	f7ff feec 	bl	800d33c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d564:	f002 fa6a 	bl	800fa3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d568:	2301      	movs	r3, #1
}
 800d56a:	4618      	mov	r0, r3
 800d56c:	3710      	adds	r7, #16
 800d56e:	46bd      	mov	sp, r7
 800d570:	bd80      	pop	{r7, pc}
 800d572:	bf00      	nop
 800d574:	e000ed04 	.word	0xe000ed04

0800d578 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b08e      	sub	sp, #56	@ 0x38
 800d57c:	af02      	add	r7, sp, #8
 800d57e:	60f8      	str	r0, [r7, #12]
 800d580:	60b9      	str	r1, [r7, #8]
 800d582:	607a      	str	r2, [r7, #4]
 800d584:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d10b      	bne.n	800d5a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d590:	f383 8811 	msr	BASEPRI, r3
 800d594:	f3bf 8f6f 	isb	sy
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d59e:	bf00      	nop
 800d5a0:	bf00      	nop
 800d5a2:	e7fd      	b.n	800d5a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d5a4:	683b      	ldr	r3, [r7, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10b      	bne.n	800d5c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	e7fd      	b.n	800d5be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d002      	beq.n	800d5ce <xQueueGenericCreateStatic+0x56>
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d001      	beq.n	800d5d2 <xQueueGenericCreateStatic+0x5a>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e000      	b.n	800d5d4 <xQueueGenericCreateStatic+0x5c>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d10b      	bne.n	800d5f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5dc:	f383 8811 	msr	BASEPRI, r3
 800d5e0:	f3bf 8f6f 	isb	sy
 800d5e4:	f3bf 8f4f 	dsb	sy
 800d5e8:	623b      	str	r3, [r7, #32]
}
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	e7fd      	b.n	800d5ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d102      	bne.n	800d5fc <xQueueGenericCreateStatic+0x84>
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d101      	bne.n	800d600 <xQueueGenericCreateStatic+0x88>
 800d5fc:	2301      	movs	r3, #1
 800d5fe:	e000      	b.n	800d602 <xQueueGenericCreateStatic+0x8a>
 800d600:	2300      	movs	r3, #0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d10b      	bne.n	800d61e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d60a:	f383 8811 	msr	BASEPRI, r3
 800d60e:	f3bf 8f6f 	isb	sy
 800d612:	f3bf 8f4f 	dsb	sy
 800d616:	61fb      	str	r3, [r7, #28]
}
 800d618:	bf00      	nop
 800d61a:	bf00      	nop
 800d61c:	e7fd      	b.n	800d61a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d61e:	2350      	movs	r3, #80	@ 0x50
 800d620:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d622:	697b      	ldr	r3, [r7, #20]
 800d624:	2b50      	cmp	r3, #80	@ 0x50
 800d626:	d00b      	beq.n	800d640 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d62c:	f383 8811 	msr	BASEPRI, r3
 800d630:	f3bf 8f6f 	isb	sy
 800d634:	f3bf 8f4f 	dsb	sy
 800d638:	61bb      	str	r3, [r7, #24]
}
 800d63a:	bf00      	nop
 800d63c:	bf00      	nop
 800d63e:	e7fd      	b.n	800d63c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d640:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d642:	683b      	ldr	r3, [r7, #0]
 800d644:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d00d      	beq.n	800d668 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d64e:	2201      	movs	r2, #1
 800d650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d654:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	4613      	mov	r3, r2
 800d65e:	687a      	ldr	r2, [r7, #4]
 800d660:	68b9      	ldr	r1, [r7, #8]
 800d662:	68f8      	ldr	r0, [r7, #12]
 800d664:	f000 f805 	bl	800d672 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3730      	adds	r7, #48	@ 0x30
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b084      	sub	sp, #16
 800d676:	af00      	add	r7, sp, #0
 800d678:	60f8      	str	r0, [r7, #12]
 800d67a:	60b9      	str	r1, [r7, #8]
 800d67c:	607a      	str	r2, [r7, #4]
 800d67e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d103      	bne.n	800d68e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d686:	69bb      	ldr	r3, [r7, #24]
 800d688:	69ba      	ldr	r2, [r7, #24]
 800d68a:	601a      	str	r2, [r3, #0]
 800d68c:	e002      	b.n	800d694 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d68e:	69bb      	ldr	r3, [r7, #24]
 800d690:	687a      	ldr	r2, [r7, #4]
 800d692:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d694:	69bb      	ldr	r3, [r7, #24]
 800d696:	68fa      	ldr	r2, [r7, #12]
 800d698:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d69a:	69bb      	ldr	r3, [r7, #24]
 800d69c:	68ba      	ldr	r2, [r7, #8]
 800d69e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6a0:	2101      	movs	r1, #1
 800d6a2:	69b8      	ldr	r0, [r7, #24]
 800d6a4:	f7ff fefe 	bl	800d4a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d6a8:	69bb      	ldr	r3, [r7, #24]
 800d6aa:	78fa      	ldrb	r2, [r7, #3]
 800d6ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d6b0:	bf00      	nop
 800d6b2:	3710      	adds	r7, #16
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}

0800d6b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d6b8:	b580      	push	{r7, lr}
 800d6ba:	b08e      	sub	sp, #56	@ 0x38
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	60f8      	str	r0, [r7, #12]
 800d6c0:	60b9      	str	r1, [r7, #8]
 800d6c2:	607a      	str	r2, [r7, #4]
 800d6c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d10b      	bne.n	800d6ec <xQueueGenericSend+0x34>
	__asm volatile
 800d6d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d6e6:	bf00      	nop
 800d6e8:	bf00      	nop
 800d6ea:	e7fd      	b.n	800d6e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d103      	bne.n	800d6fa <xQueueGenericSend+0x42>
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d101      	bne.n	800d6fe <xQueueGenericSend+0x46>
 800d6fa:	2301      	movs	r3, #1
 800d6fc:	e000      	b.n	800d700 <xQueueGenericSend+0x48>
 800d6fe:	2300      	movs	r3, #0
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10b      	bne.n	800d71c <xQueueGenericSend+0x64>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d716:	bf00      	nop
 800d718:	bf00      	nop
 800d71a:	e7fd      	b.n	800d718 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	2b02      	cmp	r3, #2
 800d720:	d103      	bne.n	800d72a <xQueueGenericSend+0x72>
 800d722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d726:	2b01      	cmp	r3, #1
 800d728:	d101      	bne.n	800d72e <xQueueGenericSend+0x76>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e000      	b.n	800d730 <xQueueGenericSend+0x78>
 800d72e:	2300      	movs	r3, #0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10b      	bne.n	800d74c <xQueueGenericSend+0x94>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	623b      	str	r3, [r7, #32]
}
 800d746:	bf00      	nop
 800d748:	bf00      	nop
 800d74a:	e7fd      	b.n	800d748 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d74c:	f001 faf6 	bl	800ed3c <xTaskGetSchedulerState>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d102      	bne.n	800d75c <xQueueGenericSend+0xa4>
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d101      	bne.n	800d760 <xQueueGenericSend+0xa8>
 800d75c:	2301      	movs	r3, #1
 800d75e:	e000      	b.n	800d762 <xQueueGenericSend+0xaa>
 800d760:	2300      	movs	r3, #0
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10b      	bne.n	800d77e <xQueueGenericSend+0xc6>
	__asm volatile
 800d766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d76a:	f383 8811 	msr	BASEPRI, r3
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f3bf 8f4f 	dsb	sy
 800d776:	61fb      	str	r3, [r7, #28]
}
 800d778:	bf00      	nop
 800d77a:	bf00      	nop
 800d77c:	e7fd      	b.n	800d77a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d77e:	f002 f92b 	bl	800f9d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d302      	bcc.n	800d794 <xQueueGenericSend+0xdc>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2b02      	cmp	r3, #2
 800d792:	d129      	bne.n	800d7e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d794:	683a      	ldr	r2, [r7, #0]
 800d796:	68b9      	ldr	r1, [r7, #8]
 800d798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d79a:	f000 fa0f 	bl	800dbbc <prvCopyDataToQueue>
 800d79e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d010      	beq.n	800d7ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7aa:	3324      	adds	r3, #36	@ 0x24
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	f001 f8ff 	bl	800e9b0 <xTaskRemoveFromEventList>
 800d7b2:	4603      	mov	r3, r0
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d013      	beq.n	800d7e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d7b8:	4b3f      	ldr	r3, [pc, #252]	@ (800d8b8 <xQueueGenericSend+0x200>)
 800d7ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7be:	601a      	str	r2, [r3, #0]
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	f3bf 8f6f 	isb	sy
 800d7c8:	e00a      	b.n	800d7e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d7ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d007      	beq.n	800d7e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d7d0:	4b39      	ldr	r3, [pc, #228]	@ (800d8b8 <xQueueGenericSend+0x200>)
 800d7d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7d6:	601a      	str	r2, [r3, #0]
 800d7d8:	f3bf 8f4f 	dsb	sy
 800d7dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d7e0:	f002 f92c 	bl	800fa3c <vPortExitCritical>
				return pdPASS;
 800d7e4:	2301      	movs	r3, #1
 800d7e6:	e063      	b.n	800d8b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d103      	bne.n	800d7f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d7ee:	f002 f925 	bl	800fa3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	e05c      	b.n	800d8b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d7f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d106      	bne.n	800d80a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d7fc:	f107 0314 	add.w	r3, r7, #20
 800d800:	4618      	mov	r0, r3
 800d802:	f001 f939 	bl	800ea78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d806:	2301      	movs	r3, #1
 800d808:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d80a:	f002 f917 	bl	800fa3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d80e:	f000 fda7 	bl	800e360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d812:	f002 f8e1 	bl	800f9d8 <vPortEnterCritical>
 800d816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d818:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d81c:	b25b      	sxtb	r3, r3
 800d81e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d822:	d103      	bne.n	800d82c <xQueueGenericSend+0x174>
 800d824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d826:	2200      	movs	r2, #0
 800d828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d82e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d832:	b25b      	sxtb	r3, r3
 800d834:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d838:	d103      	bne.n	800d842 <xQueueGenericSend+0x18a>
 800d83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d83c:	2200      	movs	r2, #0
 800d83e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d842:	f002 f8fb 	bl	800fa3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d846:	1d3a      	adds	r2, r7, #4
 800d848:	f107 0314 	add.w	r3, r7, #20
 800d84c:	4611      	mov	r1, r2
 800d84e:	4618      	mov	r0, r3
 800d850:	f001 f928 	bl	800eaa4 <xTaskCheckForTimeOut>
 800d854:	4603      	mov	r3, r0
 800d856:	2b00      	cmp	r3, #0
 800d858:	d124      	bne.n	800d8a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d85a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d85c:	f000 faa6 	bl	800ddac <prvIsQueueFull>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d018      	beq.n	800d898 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d868:	3310      	adds	r3, #16
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	4611      	mov	r1, r2
 800d86e:	4618      	mov	r0, r3
 800d870:	f001 f84c 	bl	800e90c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d874:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d876:	f000 fa31 	bl	800dcdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d87a:	f000 fd7f 	bl	800e37c <xTaskResumeAll>
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	f47f af7c 	bne.w	800d77e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d886:	4b0c      	ldr	r3, [pc, #48]	@ (800d8b8 <xQueueGenericSend+0x200>)
 800d888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d88c:	601a      	str	r2, [r3, #0]
 800d88e:	f3bf 8f4f 	dsb	sy
 800d892:	f3bf 8f6f 	isb	sy
 800d896:	e772      	b.n	800d77e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d89a:	f000 fa1f 	bl	800dcdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d89e:	f000 fd6d 	bl	800e37c <xTaskResumeAll>
 800d8a2:	e76c      	b.n	800d77e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d8a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d8a6:	f000 fa19 	bl	800dcdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8aa:	f000 fd67 	bl	800e37c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d8ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3738      	adds	r7, #56	@ 0x38
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	e000ed04 	.word	0xe000ed04

0800d8bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b090      	sub	sp, #64	@ 0x40
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	60b9      	str	r1, [r7, #8]
 800d8c6:	607a      	str	r2, [r7, #4]
 800d8c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d10b      	bne.n	800d8ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d8d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d8e6:	bf00      	nop
 800d8e8:	bf00      	nop
 800d8ea:	e7fd      	b.n	800d8e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d103      	bne.n	800d8fa <xQueueGenericSendFromISR+0x3e>
 800d8f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8f6:	2b00      	cmp	r3, #0
 800d8f8:	d101      	bne.n	800d8fe <xQueueGenericSendFromISR+0x42>
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	e000      	b.n	800d900 <xQueueGenericSendFromISR+0x44>
 800d8fe:	2300      	movs	r3, #0
 800d900:	2b00      	cmp	r3, #0
 800d902:	d10b      	bne.n	800d91c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d908:	f383 8811 	msr	BASEPRI, r3
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	f3bf 8f4f 	dsb	sy
 800d914:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d916:	bf00      	nop
 800d918:	bf00      	nop
 800d91a:	e7fd      	b.n	800d918 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	2b02      	cmp	r3, #2
 800d920:	d103      	bne.n	800d92a <xQueueGenericSendFromISR+0x6e>
 800d922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d926:	2b01      	cmp	r3, #1
 800d928:	d101      	bne.n	800d92e <xQueueGenericSendFromISR+0x72>
 800d92a:	2301      	movs	r3, #1
 800d92c:	e000      	b.n	800d930 <xQueueGenericSendFromISR+0x74>
 800d92e:	2300      	movs	r3, #0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d10b      	bne.n	800d94c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d938:	f383 8811 	msr	BASEPRI, r3
 800d93c:	f3bf 8f6f 	isb	sy
 800d940:	f3bf 8f4f 	dsb	sy
 800d944:	623b      	str	r3, [r7, #32]
}
 800d946:	bf00      	nop
 800d948:	bf00      	nop
 800d94a:	e7fd      	b.n	800d948 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d94c:	f002 f924 	bl	800fb98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d950:	f3ef 8211 	mrs	r2, BASEPRI
 800d954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	61fa      	str	r2, [r7, #28]
 800d966:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d968:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d96a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d96e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d974:	429a      	cmp	r2, r3
 800d976:	d302      	bcc.n	800d97e <xQueueGenericSendFromISR+0xc2>
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	d12f      	bne.n	800d9de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d980:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d98c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	68b9      	ldr	r1, [r7, #8]
 800d992:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d994:	f000 f912 	bl	800dbbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d998:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d99c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d9a0:	d112      	bne.n	800d9c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d016      	beq.n	800d9d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ac:	3324      	adds	r3, #36	@ 0x24
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f000 fffe 	bl	800e9b0 <xTaskRemoveFromEventList>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00e      	beq.n	800d9d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00b      	beq.n	800d9d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	2201      	movs	r2, #1
 800d9c4:	601a      	str	r2, [r3, #0]
 800d9c6:	e007      	b.n	800d9d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d9c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d9cc:	3301      	adds	r3, #1
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	b25a      	sxtb	r2, r3
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d9dc:	e001      	b.n	800d9e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d9e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d9e6:	697b      	ldr	r3, [r7, #20]
 800d9e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d9ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d9ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	3740      	adds	r7, #64	@ 0x40
 800d9f4:	46bd      	mov	sp, r7
 800d9f6:	bd80      	pop	{r7, pc}

0800d9f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d9f8:	b580      	push	{r7, lr}
 800d9fa:	b08c      	sub	sp, #48	@ 0x30
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800da04:	2300      	movs	r3, #0
 800da06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10b      	bne.n	800da2a <xQueueReceive+0x32>
	__asm volatile
 800da12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da16:	f383 8811 	msr	BASEPRI, r3
 800da1a:	f3bf 8f6f 	isb	sy
 800da1e:	f3bf 8f4f 	dsb	sy
 800da22:	623b      	str	r3, [r7, #32]
}
 800da24:	bf00      	nop
 800da26:	bf00      	nop
 800da28:	e7fd      	b.n	800da26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d103      	bne.n	800da38 <xQueueReceive+0x40>
 800da30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da34:	2b00      	cmp	r3, #0
 800da36:	d101      	bne.n	800da3c <xQueueReceive+0x44>
 800da38:	2301      	movs	r3, #1
 800da3a:	e000      	b.n	800da3e <xQueueReceive+0x46>
 800da3c:	2300      	movs	r3, #0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d10b      	bne.n	800da5a <xQueueReceive+0x62>
	__asm volatile
 800da42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da46:	f383 8811 	msr	BASEPRI, r3
 800da4a:	f3bf 8f6f 	isb	sy
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	61fb      	str	r3, [r7, #28]
}
 800da54:	bf00      	nop
 800da56:	bf00      	nop
 800da58:	e7fd      	b.n	800da56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da5a:	f001 f96f 	bl	800ed3c <xTaskGetSchedulerState>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d102      	bne.n	800da6a <xQueueReceive+0x72>
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d101      	bne.n	800da6e <xQueueReceive+0x76>
 800da6a:	2301      	movs	r3, #1
 800da6c:	e000      	b.n	800da70 <xQueueReceive+0x78>
 800da6e:	2300      	movs	r3, #0
 800da70:	2b00      	cmp	r3, #0
 800da72:	d10b      	bne.n	800da8c <xQueueReceive+0x94>
	__asm volatile
 800da74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da78:	f383 8811 	msr	BASEPRI, r3
 800da7c:	f3bf 8f6f 	isb	sy
 800da80:	f3bf 8f4f 	dsb	sy
 800da84:	61bb      	str	r3, [r7, #24]
}
 800da86:	bf00      	nop
 800da88:	bf00      	nop
 800da8a:	e7fd      	b.n	800da88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da8c:	f001 ffa4 	bl	800f9d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800da90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800da96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01f      	beq.n	800dadc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800da9c:	68b9      	ldr	r1, [r7, #8]
 800da9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800daa0:	f000 f8f6 	bl	800dc90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800daa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa6:	1e5a      	subs	r2, r3, #1
 800daa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daaa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800daac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d00f      	beq.n	800dad4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dab6:	3310      	adds	r3, #16
 800dab8:	4618      	mov	r0, r3
 800daba:	f000 ff79 	bl	800e9b0 <xTaskRemoveFromEventList>
 800dabe:	4603      	mov	r3, r0
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d007      	beq.n	800dad4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dac4:	4b3c      	ldr	r3, [pc, #240]	@ (800dbb8 <xQueueReceive+0x1c0>)
 800dac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daca:	601a      	str	r2, [r3, #0]
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dad4:	f001 ffb2 	bl	800fa3c <vPortExitCritical>
				return pdPASS;
 800dad8:	2301      	movs	r3, #1
 800dada:	e069      	b.n	800dbb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d103      	bne.n	800daea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800dae2:	f001 ffab 	bl	800fa3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dae6:	2300      	movs	r3, #0
 800dae8:	e062      	b.n	800dbb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800daea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daec:	2b00      	cmp	r3, #0
 800daee:	d106      	bne.n	800dafe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800daf0:	f107 0310 	add.w	r3, r7, #16
 800daf4:	4618      	mov	r0, r3
 800daf6:	f000 ffbf 	bl	800ea78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dafa:	2301      	movs	r3, #1
 800dafc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dafe:	f001 ff9d 	bl	800fa3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db02:	f000 fc2d 	bl	800e360 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db06:	f001 ff67 	bl	800f9d8 <vPortEnterCritical>
 800db0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db10:	b25b      	sxtb	r3, r3
 800db12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db16:	d103      	bne.n	800db20 <xQueueReceive+0x128>
 800db18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db26:	b25b      	sxtb	r3, r3
 800db28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db2c:	d103      	bne.n	800db36 <xQueueReceive+0x13e>
 800db2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db30:	2200      	movs	r2, #0
 800db32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db36:	f001 ff81 	bl	800fa3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db3a:	1d3a      	adds	r2, r7, #4
 800db3c:	f107 0310 	add.w	r3, r7, #16
 800db40:	4611      	mov	r1, r2
 800db42:	4618      	mov	r0, r3
 800db44:	f000 ffae 	bl	800eaa4 <xTaskCheckForTimeOut>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d123      	bne.n	800db96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db50:	f000 f916 	bl	800dd80 <prvIsQueueEmpty>
 800db54:	4603      	mov	r3, r0
 800db56:	2b00      	cmp	r3, #0
 800db58:	d017      	beq.n	800db8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db5c:	3324      	adds	r3, #36	@ 0x24
 800db5e:	687a      	ldr	r2, [r7, #4]
 800db60:	4611      	mov	r1, r2
 800db62:	4618      	mov	r0, r3
 800db64:	f000 fed2 	bl	800e90c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db6a:	f000 f8b7 	bl	800dcdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db6e:	f000 fc05 	bl	800e37c <xTaskResumeAll>
 800db72:	4603      	mov	r3, r0
 800db74:	2b00      	cmp	r3, #0
 800db76:	d189      	bne.n	800da8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800db78:	4b0f      	ldr	r3, [pc, #60]	@ (800dbb8 <xQueueReceive+0x1c0>)
 800db7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db7e:	601a      	str	r2, [r3, #0]
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	f3bf 8f6f 	isb	sy
 800db88:	e780      	b.n	800da8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800db8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db8c:	f000 f8a6 	bl	800dcdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800db90:	f000 fbf4 	bl	800e37c <xTaskResumeAll>
 800db94:	e77a      	b.n	800da8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800db96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db98:	f000 f8a0 	bl	800dcdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800db9c:	f000 fbee 	bl	800e37c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dba0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dba2:	f000 f8ed 	bl	800dd80 <prvIsQueueEmpty>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	f43f af6f 	beq.w	800da8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dbae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3730      	adds	r7, #48	@ 0x30
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	e000ed04 	.word	0xe000ed04

0800dbbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d10d      	bne.n	800dbf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d14d      	bne.n	800dc7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	689b      	ldr	r3, [r3, #8]
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f001 f8c6 	bl	800ed78 <xTaskPriorityDisinherit>
 800dbec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	609a      	str	r2, [r3, #8]
 800dbf4:	e043      	b.n	800dc7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d119      	bne.n	800dc30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbfc:	68fb      	ldr	r3, [r7, #12]
 800dbfe:	6858      	ldr	r0, [r3, #4]
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc04:	461a      	mov	r2, r3
 800dc06:	68b9      	ldr	r1, [r7, #8]
 800dc08:	f002 faa0 	bl	801014c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc14:	441a      	add	r2, r3
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	685a      	ldr	r2, [r3, #4]
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	689b      	ldr	r3, [r3, #8]
 800dc22:	429a      	cmp	r2, r3
 800dc24:	d32b      	bcc.n	800dc7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681a      	ldr	r2, [r3, #0]
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	605a      	str	r2, [r3, #4]
 800dc2e:	e026      	b.n	800dc7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	68d8      	ldr	r0, [r3, #12]
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc38:	461a      	mov	r2, r3
 800dc3a:	68b9      	ldr	r1, [r7, #8]
 800dc3c:	f002 fa86 	bl	801014c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	68da      	ldr	r2, [r3, #12]
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc48:	425b      	negs	r3, r3
 800dc4a:	441a      	add	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	68da      	ldr	r2, [r3, #12]
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d207      	bcs.n	800dc6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	689a      	ldr	r2, [r3, #8]
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc64:	425b      	negs	r3, r3
 800dc66:	441a      	add	r2, r3
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2b02      	cmp	r3, #2
 800dc70:	d105      	bne.n	800dc7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dc72:	693b      	ldr	r3, [r7, #16]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d002      	beq.n	800dc7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dc78:	693b      	ldr	r3, [r7, #16]
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	1c5a      	adds	r2, r3, #1
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dc86:	697b      	ldr	r3, [r7, #20]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
 800dc98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d018      	beq.n	800dcd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68da      	ldr	r2, [r3, #12]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcaa:	441a      	add	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	68da      	ldr	r2, [r3, #12]
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d303      	bcc.n	800dcc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681a      	ldr	r2, [r3, #0]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	68d9      	ldr	r1, [r3, #12]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dccc:	461a      	mov	r2, r3
 800dcce:	6838      	ldr	r0, [r7, #0]
 800dcd0:	f002 fa3c 	bl	801014c <memcpy>
	}
}
 800dcd4:	bf00      	nop
 800dcd6:	3708      	adds	r7, #8
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b084      	sub	sp, #16
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dce4:	f001 fe78 	bl	800f9d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dcee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dcf0:	e011      	b.n	800dd16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d012      	beq.n	800dd20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	3324      	adds	r3, #36	@ 0x24
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f000 fe56 	bl	800e9b0 <xTaskRemoveFromEventList>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d001      	beq.n	800dd0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd0a:	f000 ff2f 	bl	800eb6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd0e:	7bfb      	ldrb	r3, [r7, #15]
 800dd10:	3b01      	subs	r3, #1
 800dd12:	b2db      	uxtb	r3, r3
 800dd14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dce9      	bgt.n	800dcf2 <prvUnlockQueue+0x16>
 800dd1e:	e000      	b.n	800dd22 <prvUnlockQueue+0x46>
					break;
 800dd20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	22ff      	movs	r2, #255	@ 0xff
 800dd26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800dd2a:	f001 fe87 	bl	800fa3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dd2e:	f001 fe53 	bl	800f9d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd3a:	e011      	b.n	800dd60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	691b      	ldr	r3, [r3, #16]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d012      	beq.n	800dd6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	3310      	adds	r3, #16
 800dd48:	4618      	mov	r0, r3
 800dd4a:	f000 fe31 	bl	800e9b0 <xTaskRemoveFromEventList>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dd54:	f000 ff0a 	bl	800eb6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dd58:	7bbb      	ldrb	r3, [r7, #14]
 800dd5a:	3b01      	subs	r3, #1
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dd60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	dce9      	bgt.n	800dd3c <prvUnlockQueue+0x60>
 800dd68:	e000      	b.n	800dd6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dd6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	22ff      	movs	r2, #255	@ 0xff
 800dd70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800dd74:	f001 fe62 	bl	800fa3c <vPortExitCritical>
}
 800dd78:	bf00      	nop
 800dd7a:	3710      	adds	r7, #16
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b084      	sub	sp, #16
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dd88:	f001 fe26 	bl	800f9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d102      	bne.n	800dd9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dd94:	2301      	movs	r3, #1
 800dd96:	60fb      	str	r3, [r7, #12]
 800dd98:	e001      	b.n	800dd9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dd9e:	f001 fe4d 	bl	800fa3c <vPortExitCritical>

	return xReturn;
 800dda2:	68fb      	ldr	r3, [r7, #12]
}
 800dda4:	4618      	mov	r0, r3
 800dda6:	3710      	adds	r7, #16
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}

0800ddac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b084      	sub	sp, #16
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ddb4:	f001 fe10 	bl	800f9d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d102      	bne.n	800ddca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ddc4:	2301      	movs	r3, #1
 800ddc6:	60fb      	str	r3, [r7, #12]
 800ddc8:	e001      	b.n	800ddce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ddce:	f001 fe35 	bl	800fa3c <vPortExitCritical>

	return xReturn;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	3710      	adds	r7, #16
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	bd80      	pop	{r7, pc}

0800dddc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dddc:	b480      	push	{r7}
 800ddde:	b085      	sub	sp, #20
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dde6:	2300      	movs	r3, #0
 800dde8:	60fb      	str	r3, [r7, #12]
 800ddea:	e014      	b.n	800de16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ddec:	4a0f      	ldr	r2, [pc, #60]	@ (800de2c <vQueueAddToRegistry+0x50>)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d10b      	bne.n	800de10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ddf8:	490c      	ldr	r1, [pc, #48]	@ (800de2c <vQueueAddToRegistry+0x50>)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	683a      	ldr	r2, [r7, #0]
 800ddfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de02:	4a0a      	ldr	r2, [pc, #40]	@ (800de2c <vQueueAddToRegistry+0x50>)
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	00db      	lsls	r3, r3, #3
 800de08:	4413      	add	r3, r2
 800de0a:	687a      	ldr	r2, [r7, #4]
 800de0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de0e:	e006      	b.n	800de1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	3301      	adds	r3, #1
 800de14:	60fb      	str	r3, [r7, #12]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	2b07      	cmp	r3, #7
 800de1a:	d9e7      	bls.n	800ddec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de1c:	bf00      	nop
 800de1e:	bf00      	nop
 800de20:	3714      	adds	r7, #20
 800de22:	46bd      	mov	sp, r7
 800de24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de28:	4770      	bx	lr
 800de2a:	bf00      	nop
 800de2c:	20001760 	.word	0x20001760

0800de30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800de30:	b580      	push	{r7, lr}
 800de32:	b086      	sub	sp, #24
 800de34:	af00      	add	r7, sp, #0
 800de36:	60f8      	str	r0, [r7, #12]
 800de38:	60b9      	str	r1, [r7, #8]
 800de3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800de40:	f001 fdca 	bl	800f9d8 <vPortEnterCritical>
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800de4a:	b25b      	sxtb	r3, r3
 800de4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de50:	d103      	bne.n	800de5a <vQueueWaitForMessageRestricted+0x2a>
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	2200      	movs	r2, #0
 800de56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800de5a:	697b      	ldr	r3, [r7, #20]
 800de5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800de60:	b25b      	sxtb	r3, r3
 800de62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800de66:	d103      	bne.n	800de70 <vQueueWaitForMessageRestricted+0x40>
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	2200      	movs	r2, #0
 800de6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800de70:	f001 fde4 	bl	800fa3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d106      	bne.n	800de8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800de7c:	697b      	ldr	r3, [r7, #20]
 800de7e:	3324      	adds	r3, #36	@ 0x24
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	68b9      	ldr	r1, [r7, #8]
 800de84:	4618      	mov	r0, r3
 800de86:	f000 fd67 	bl	800e958 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800de8a:	6978      	ldr	r0, [r7, #20]
 800de8c:	f7ff ff26 	bl	800dcdc <prvUnlockQueue>
	}
 800de90:	bf00      	nop
 800de92:	3718      	adds	r7, #24
 800de94:	46bd      	mov	sp, r7
 800de96:	bd80      	pop	{r7, pc}

0800de98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b08e      	sub	sp, #56	@ 0x38
 800de9c:	af04      	add	r7, sp, #16
 800de9e:	60f8      	str	r0, [r7, #12]
 800dea0:	60b9      	str	r1, [r7, #8]
 800dea2:	607a      	str	r2, [r7, #4]
 800dea4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d10b      	bne.n	800dec4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800deac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deb0:	f383 8811 	msr	BASEPRI, r3
 800deb4:	f3bf 8f6f 	isb	sy
 800deb8:	f3bf 8f4f 	dsb	sy
 800debc:	623b      	str	r3, [r7, #32]
}
 800debe:	bf00      	nop
 800dec0:	bf00      	nop
 800dec2:	e7fd      	b.n	800dec0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d10b      	bne.n	800dee2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800deca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	61fb      	str	r3, [r7, #28]
}
 800dedc:	bf00      	nop
 800dede:	bf00      	nop
 800dee0:	e7fd      	b.n	800dede <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dee2:	23a8      	movs	r3, #168	@ 0xa8
 800dee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dee6:	693b      	ldr	r3, [r7, #16]
 800dee8:	2ba8      	cmp	r3, #168	@ 0xa8
 800deea:	d00b      	beq.n	800df04 <xTaskCreateStatic+0x6c>
	__asm volatile
 800deec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800def0:	f383 8811 	msr	BASEPRI, r3
 800def4:	f3bf 8f6f 	isb	sy
 800def8:	f3bf 8f4f 	dsb	sy
 800defc:	61bb      	str	r3, [r7, #24]
}
 800defe:	bf00      	nop
 800df00:	bf00      	nop
 800df02:	e7fd      	b.n	800df00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d01e      	beq.n	800df4a <xTaskCreateStatic+0xb2>
 800df0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d01b      	beq.n	800df4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df1e:	2202      	movs	r2, #2
 800df20:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800df24:	2300      	movs	r3, #0
 800df26:	9303      	str	r3, [sp, #12]
 800df28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df2a:	9302      	str	r3, [sp, #8]
 800df2c:	f107 0314 	add.w	r3, r7, #20
 800df30:	9301      	str	r3, [sp, #4]
 800df32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df34:	9300      	str	r3, [sp, #0]
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	687a      	ldr	r2, [r7, #4]
 800df3a:	68b9      	ldr	r1, [r7, #8]
 800df3c:	68f8      	ldr	r0, [r7, #12]
 800df3e:	f000 f851 	bl	800dfe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800df44:	f000 f8f6 	bl	800e134 <prvAddNewTaskToReadyList>
 800df48:	e001      	b.n	800df4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800df4a:	2300      	movs	r3, #0
 800df4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800df4e:	697b      	ldr	r3, [r7, #20]
	}
 800df50:	4618      	mov	r0, r3
 800df52:	3728      	adds	r7, #40	@ 0x28
 800df54:	46bd      	mov	sp, r7
 800df56:	bd80      	pop	{r7, pc}

0800df58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08c      	sub	sp, #48	@ 0x30
 800df5c:	af04      	add	r7, sp, #16
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	603b      	str	r3, [r7, #0]
 800df64:	4613      	mov	r3, r2
 800df66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800df68:	88fb      	ldrh	r3, [r7, #6]
 800df6a:	009b      	lsls	r3, r3, #2
 800df6c:	4618      	mov	r0, r3
 800df6e:	f001 fe55 	bl	800fc1c <pvPortMalloc>
 800df72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00e      	beq.n	800df98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800df7a:	20a8      	movs	r0, #168	@ 0xa8
 800df7c:	f001 fe4e 	bl	800fc1c <pvPortMalloc>
 800df80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d003      	beq.n	800df90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	631a      	str	r2, [r3, #48]	@ 0x30
 800df8e:	e005      	b.n	800df9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800df90:	6978      	ldr	r0, [r7, #20]
 800df92:	f001 ff11 	bl	800fdb8 <vPortFree>
 800df96:	e001      	b.n	800df9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800df98:	2300      	movs	r3, #0
 800df9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800df9c:	69fb      	ldr	r3, [r7, #28]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d017      	beq.n	800dfd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dfaa:	88fa      	ldrh	r2, [r7, #6]
 800dfac:	2300      	movs	r3, #0
 800dfae:	9303      	str	r3, [sp, #12]
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	9302      	str	r3, [sp, #8]
 800dfb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfb6:	9301      	str	r3, [sp, #4]
 800dfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfba:	9300      	str	r3, [sp, #0]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	68b9      	ldr	r1, [r7, #8]
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f000 f80f 	bl	800dfe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfc6:	69f8      	ldr	r0, [r7, #28]
 800dfc8:	f000 f8b4 	bl	800e134 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dfcc:	2301      	movs	r3, #1
 800dfce:	61bb      	str	r3, [r7, #24]
 800dfd0:	e002      	b.n	800dfd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dfd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dfd8:	69bb      	ldr	r3, [r7, #24]
	}
 800dfda:	4618      	mov	r0, r3
 800dfdc:	3720      	adds	r7, #32
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}
	...

0800dfe4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b088      	sub	sp, #32
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
 800dff0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dff4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	461a      	mov	r2, r3
 800dffc:	21a5      	movs	r1, #165	@ 0xa5
 800dffe:	f002 f81b 	bl	8010038 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e002:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e004:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e00c:	3b01      	subs	r3, #1
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	4413      	add	r3, r2
 800e012:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e014:	69bb      	ldr	r3, [r7, #24]
 800e016:	f023 0307 	bic.w	r3, r3, #7
 800e01a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e01c:	69bb      	ldr	r3, [r7, #24]
 800e01e:	f003 0307 	and.w	r3, r3, #7
 800e022:	2b00      	cmp	r3, #0
 800e024:	d00b      	beq.n	800e03e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e02a:	f383 8811 	msr	BASEPRI, r3
 800e02e:	f3bf 8f6f 	isb	sy
 800e032:	f3bf 8f4f 	dsb	sy
 800e036:	617b      	str	r3, [r7, #20]
}
 800e038:	bf00      	nop
 800e03a:	bf00      	nop
 800e03c:	e7fd      	b.n	800e03a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d01f      	beq.n	800e084 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e044:	2300      	movs	r3, #0
 800e046:	61fb      	str	r3, [r7, #28]
 800e048:	e012      	b.n	800e070 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e04a:	68ba      	ldr	r2, [r7, #8]
 800e04c:	69fb      	ldr	r3, [r7, #28]
 800e04e:	4413      	add	r3, r2
 800e050:	7819      	ldrb	r1, [r3, #0]
 800e052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e054:	69fb      	ldr	r3, [r7, #28]
 800e056:	4413      	add	r3, r2
 800e058:	3334      	adds	r3, #52	@ 0x34
 800e05a:	460a      	mov	r2, r1
 800e05c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	4413      	add	r3, r2
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	2b00      	cmp	r3, #0
 800e068:	d006      	beq.n	800e078 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	3301      	adds	r3, #1
 800e06e:	61fb      	str	r3, [r7, #28]
 800e070:	69fb      	ldr	r3, [r7, #28]
 800e072:	2b0f      	cmp	r3, #15
 800e074:	d9e9      	bls.n	800e04a <prvInitialiseNewTask+0x66>
 800e076:	e000      	b.n	800e07a <prvInitialiseNewTask+0x96>
			{
				break;
 800e078:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e07a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e07c:	2200      	movs	r2, #0
 800e07e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e082:	e003      	b.n	800e08c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e086:	2200      	movs	r2, #0
 800e088:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e08c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08e:	2b37      	cmp	r3, #55	@ 0x37
 800e090:	d901      	bls.n	800e096 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e092:	2337      	movs	r3, #55	@ 0x37
 800e094:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e098:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e09a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e09c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e09e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0a0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0a4:	2200      	movs	r2, #0
 800e0a6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e0a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f7ff f965 	bl	800d37c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0b4:	3318      	adds	r3, #24
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7ff f960 	bl	800d37c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e0c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0c4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e0c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e0d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0dc:	2200      	movs	r2, #0
 800e0de:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e0e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0e4:	3354      	adds	r3, #84	@ 0x54
 800e0e6:	224c      	movs	r2, #76	@ 0x4c
 800e0e8:	2100      	movs	r1, #0
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f001 ffa4 	bl	8010038 <memset>
 800e0f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f2:	4a0d      	ldr	r2, [pc, #52]	@ (800e128 <prvInitialiseNewTask+0x144>)
 800e0f4:	659a      	str	r2, [r3, #88]	@ 0x58
 800e0f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0f8:	4a0c      	ldr	r2, [pc, #48]	@ (800e12c <prvInitialiseNewTask+0x148>)
 800e0fa:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e0fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fe:	4a0c      	ldr	r2, [pc, #48]	@ (800e130 <prvInitialiseNewTask+0x14c>)
 800e100:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e102:	683a      	ldr	r2, [r7, #0]
 800e104:	68f9      	ldr	r1, [r7, #12]
 800e106:	69b8      	ldr	r0, [r7, #24]
 800e108:	f001 fb36 	bl	800f778 <pxPortInitialiseStack>
 800e10c:	4602      	mov	r2, r0
 800e10e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e110:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e114:	2b00      	cmp	r3, #0
 800e116:	d002      	beq.n	800e11e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e11a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e11c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e11e:	bf00      	nop
 800e120:	3720      	adds	r7, #32
 800e122:	46bd      	mov	sp, r7
 800e124:	bd80      	pop	{r7, pc}
 800e126:	bf00      	nop
 800e128:	200059f4 	.word	0x200059f4
 800e12c:	20005a5c 	.word	0x20005a5c
 800e130:	20005ac4 	.word	0x20005ac4

0800e134 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e13c:	f001 fc4c 	bl	800f9d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e140:	4b2d      	ldr	r3, [pc, #180]	@ (800e1f8 <prvAddNewTaskToReadyList+0xc4>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	3301      	adds	r3, #1
 800e146:	4a2c      	ldr	r2, [pc, #176]	@ (800e1f8 <prvAddNewTaskToReadyList+0xc4>)
 800e148:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e14a:	4b2c      	ldr	r3, [pc, #176]	@ (800e1fc <prvAddNewTaskToReadyList+0xc8>)
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d109      	bne.n	800e166 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e152:	4a2a      	ldr	r2, [pc, #168]	@ (800e1fc <prvAddNewTaskToReadyList+0xc8>)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e158:	4b27      	ldr	r3, [pc, #156]	@ (800e1f8 <prvAddNewTaskToReadyList+0xc4>)
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d110      	bne.n	800e182 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e160:	f000 fd28 	bl	800ebb4 <prvInitialiseTaskLists>
 800e164:	e00d      	b.n	800e182 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e166:	4b26      	ldr	r3, [pc, #152]	@ (800e200 <prvAddNewTaskToReadyList+0xcc>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d109      	bne.n	800e182 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e16e:	4b23      	ldr	r3, [pc, #140]	@ (800e1fc <prvAddNewTaskToReadyList+0xc8>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e178:	429a      	cmp	r2, r3
 800e17a:	d802      	bhi.n	800e182 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e17c:	4a1f      	ldr	r2, [pc, #124]	@ (800e1fc <prvAddNewTaskToReadyList+0xc8>)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e182:	4b20      	ldr	r3, [pc, #128]	@ (800e204 <prvAddNewTaskToReadyList+0xd0>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	3301      	adds	r3, #1
 800e188:	4a1e      	ldr	r2, [pc, #120]	@ (800e204 <prvAddNewTaskToReadyList+0xd0>)
 800e18a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e18c:	4b1d      	ldr	r3, [pc, #116]	@ (800e204 <prvAddNewTaskToReadyList+0xd0>)
 800e18e:	681a      	ldr	r2, [r3, #0]
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e198:	4b1b      	ldr	r3, [pc, #108]	@ (800e208 <prvAddNewTaskToReadyList+0xd4>)
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d903      	bls.n	800e1a8 <prvAddNewTaskToReadyList+0x74>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a4:	4a18      	ldr	r2, [pc, #96]	@ (800e208 <prvAddNewTaskToReadyList+0xd4>)
 800e1a6:	6013      	str	r3, [r2, #0]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	4413      	add	r3, r2
 800e1b2:	009b      	lsls	r3, r3, #2
 800e1b4:	4a15      	ldr	r2, [pc, #84]	@ (800e20c <prvAddNewTaskToReadyList+0xd8>)
 800e1b6:	441a      	add	r2, r3
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	3304      	adds	r3, #4
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4610      	mov	r0, r2
 800e1c0:	f7ff f8e9 	bl	800d396 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e1c4:	f001 fc3a 	bl	800fa3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e1c8:	4b0d      	ldr	r3, [pc, #52]	@ (800e200 <prvAddNewTaskToReadyList+0xcc>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d00e      	beq.n	800e1ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e1d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e1fc <prvAddNewTaskToReadyList+0xc8>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1da:	429a      	cmp	r2, r3
 800e1dc:	d207      	bcs.n	800e1ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e1de:	4b0c      	ldr	r3, [pc, #48]	@ (800e210 <prvAddNewTaskToReadyList+0xdc>)
 800e1e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e1e4:	601a      	str	r2, [r3, #0]
 800e1e6:	f3bf 8f4f 	dsb	sy
 800e1ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1ee:	bf00      	nop
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	20001c74 	.word	0x20001c74
 800e1fc:	200017a0 	.word	0x200017a0
 800e200:	20001c80 	.word	0x20001c80
 800e204:	20001c90 	.word	0x20001c90
 800e208:	20001c7c 	.word	0x20001c7c
 800e20c:	200017a4 	.word	0x200017a4
 800e210:	e000ed04 	.word	0xe000ed04

0800e214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e214:	b580      	push	{r7, lr}
 800e216:	b084      	sub	sp, #16
 800e218:	af00      	add	r7, sp, #0
 800e21a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e21c:	2300      	movs	r3, #0
 800e21e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d018      	beq.n	800e258 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e226:	4b14      	ldr	r3, [pc, #80]	@ (800e278 <vTaskDelay+0x64>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00b      	beq.n	800e246 <vTaskDelay+0x32>
	__asm volatile
 800e22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	60bb      	str	r3, [r7, #8]
}
 800e240:	bf00      	nop
 800e242:	bf00      	nop
 800e244:	e7fd      	b.n	800e242 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e246:	f000 f88b 	bl	800e360 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e24a:	2100      	movs	r1, #0
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fee5 	bl	800f01c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e252:	f000 f893 	bl	800e37c <xTaskResumeAll>
 800e256:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d107      	bne.n	800e26e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e25e:	4b07      	ldr	r3, [pc, #28]	@ (800e27c <vTaskDelay+0x68>)
 800e260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e26e:	bf00      	nop
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	20001c9c 	.word	0x20001c9c
 800e27c:	e000ed04 	.word	0xe000ed04

0800e280 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e280:	b580      	push	{r7, lr}
 800e282:	b08a      	sub	sp, #40	@ 0x28
 800e284:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e286:	2300      	movs	r3, #0
 800e288:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e28a:	2300      	movs	r3, #0
 800e28c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e28e:	463a      	mov	r2, r7
 800e290:	1d39      	adds	r1, r7, #4
 800e292:	f107 0308 	add.w	r3, r7, #8
 800e296:	4618      	mov	r0, r3
 800e298:	f7ff f81c 	bl	800d2d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e29c:	6839      	ldr	r1, [r7, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	9202      	str	r2, [sp, #8]
 800e2a4:	9301      	str	r3, [sp, #4]
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	9300      	str	r3, [sp, #0]
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	460a      	mov	r2, r1
 800e2ae:	4924      	ldr	r1, [pc, #144]	@ (800e340 <vTaskStartScheduler+0xc0>)
 800e2b0:	4824      	ldr	r0, [pc, #144]	@ (800e344 <vTaskStartScheduler+0xc4>)
 800e2b2:	f7ff fdf1 	bl	800de98 <xTaskCreateStatic>
 800e2b6:	4603      	mov	r3, r0
 800e2b8:	4a23      	ldr	r2, [pc, #140]	@ (800e348 <vTaskStartScheduler+0xc8>)
 800e2ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e2bc:	4b22      	ldr	r3, [pc, #136]	@ (800e348 <vTaskStartScheduler+0xc8>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d002      	beq.n	800e2ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2c4:	2301      	movs	r3, #1
 800e2c6:	617b      	str	r3, [r7, #20]
 800e2c8:	e001      	b.n	800e2ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d102      	bne.n	800e2da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e2d4:	f000 fef6 	bl	800f0c4 <xTimerCreateTimerTask>
 800e2d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e2da:	697b      	ldr	r3, [r7, #20]
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d11b      	bne.n	800e318 <vTaskStartScheduler+0x98>
	__asm volatile
 800e2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2e4:	f383 8811 	msr	BASEPRI, r3
 800e2e8:	f3bf 8f6f 	isb	sy
 800e2ec:	f3bf 8f4f 	dsb	sy
 800e2f0:	613b      	str	r3, [r7, #16]
}
 800e2f2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e2f4:	4b15      	ldr	r3, [pc, #84]	@ (800e34c <vTaskStartScheduler+0xcc>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	3354      	adds	r3, #84	@ 0x54
 800e2fa:	4a15      	ldr	r2, [pc, #84]	@ (800e350 <vTaskStartScheduler+0xd0>)
 800e2fc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e2fe:	4b15      	ldr	r3, [pc, #84]	@ (800e354 <vTaskStartScheduler+0xd4>)
 800e300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e304:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e306:	4b14      	ldr	r3, [pc, #80]	@ (800e358 <vTaskStartScheduler+0xd8>)
 800e308:	2201      	movs	r2, #1
 800e30a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e30c:	4b13      	ldr	r3, [pc, #76]	@ (800e35c <vTaskStartScheduler+0xdc>)
 800e30e:	2200      	movs	r2, #0
 800e310:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e312:	f001 fabd 	bl	800f890 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e316:	e00f      	b.n	800e338 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e318:	697b      	ldr	r3, [r7, #20]
 800e31a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e31e:	d10b      	bne.n	800e338 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e324:	f383 8811 	msr	BASEPRI, r3
 800e328:	f3bf 8f6f 	isb	sy
 800e32c:	f3bf 8f4f 	dsb	sy
 800e330:	60fb      	str	r3, [r7, #12]
}
 800e332:	bf00      	nop
 800e334:	bf00      	nop
 800e336:	e7fd      	b.n	800e334 <vTaskStartScheduler+0xb4>
}
 800e338:	bf00      	nop
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	08011cb4 	.word	0x08011cb4
 800e344:	0800eb85 	.word	0x0800eb85
 800e348:	20001c98 	.word	0x20001c98
 800e34c:	200017a0 	.word	0x200017a0
 800e350:	20000200 	.word	0x20000200
 800e354:	20001c94 	.word	0x20001c94
 800e358:	20001c80 	.word	0x20001c80
 800e35c:	20001c78 	.word	0x20001c78

0800e360 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e360:	b480      	push	{r7}
 800e362:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e364:	4b04      	ldr	r3, [pc, #16]	@ (800e378 <vTaskSuspendAll+0x18>)
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	3301      	adds	r3, #1
 800e36a:	4a03      	ldr	r2, [pc, #12]	@ (800e378 <vTaskSuspendAll+0x18>)
 800e36c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e36e:	bf00      	nop
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr
 800e378:	20001c9c 	.word	0x20001c9c

0800e37c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e37c:	b580      	push	{r7, lr}
 800e37e:	b084      	sub	sp, #16
 800e380:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e382:	2300      	movs	r3, #0
 800e384:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e386:	2300      	movs	r3, #0
 800e388:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e38a:	4b42      	ldr	r3, [pc, #264]	@ (800e494 <xTaskResumeAll+0x118>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10b      	bne.n	800e3aa <xTaskResumeAll+0x2e>
	__asm volatile
 800e392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e396:	f383 8811 	msr	BASEPRI, r3
 800e39a:	f3bf 8f6f 	isb	sy
 800e39e:	f3bf 8f4f 	dsb	sy
 800e3a2:	603b      	str	r3, [r7, #0]
}
 800e3a4:	bf00      	nop
 800e3a6:	bf00      	nop
 800e3a8:	e7fd      	b.n	800e3a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e3aa:	f001 fb15 	bl	800f9d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3ae:	4b39      	ldr	r3, [pc, #228]	@ (800e494 <xTaskResumeAll+0x118>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	3b01      	subs	r3, #1
 800e3b4:	4a37      	ldr	r2, [pc, #220]	@ (800e494 <xTaskResumeAll+0x118>)
 800e3b6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3b8:	4b36      	ldr	r3, [pc, #216]	@ (800e494 <xTaskResumeAll+0x118>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d162      	bne.n	800e486 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3c0:	4b35      	ldr	r3, [pc, #212]	@ (800e498 <xTaskResumeAll+0x11c>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d05e      	beq.n	800e486 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3c8:	e02f      	b.n	800e42a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ca:	4b34      	ldr	r3, [pc, #208]	@ (800e49c <xTaskResumeAll+0x120>)
 800e3cc:	68db      	ldr	r3, [r3, #12]
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	3318      	adds	r3, #24
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7ff f83a 	bl	800d450 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3304      	adds	r3, #4
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7ff f835 	bl	800d450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3ea:	4b2d      	ldr	r3, [pc, #180]	@ (800e4a0 <xTaskResumeAll+0x124>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d903      	bls.n	800e3fa <xTaskResumeAll+0x7e>
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e3f6:	4a2a      	ldr	r2, [pc, #168]	@ (800e4a0 <xTaskResumeAll+0x124>)
 800e3f8:	6013      	str	r3, [r2, #0]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e3fe:	4613      	mov	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4413      	add	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4a27      	ldr	r2, [pc, #156]	@ (800e4a4 <xTaskResumeAll+0x128>)
 800e408:	441a      	add	r2, r3
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	3304      	adds	r3, #4
 800e40e:	4619      	mov	r1, r3
 800e410:	4610      	mov	r0, r2
 800e412:	f7fe ffc0 	bl	800d396 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e41a:	4b23      	ldr	r3, [pc, #140]	@ (800e4a8 <xTaskResumeAll+0x12c>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e420:	429a      	cmp	r2, r3
 800e422:	d302      	bcc.n	800e42a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e424:	4b21      	ldr	r3, [pc, #132]	@ (800e4ac <xTaskResumeAll+0x130>)
 800e426:	2201      	movs	r2, #1
 800e428:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e42a:	4b1c      	ldr	r3, [pc, #112]	@ (800e49c <xTaskResumeAll+0x120>)
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d1cb      	bne.n	800e3ca <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e438:	f000 fc60 	bl	800ecfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e43c:	4b1c      	ldr	r3, [pc, #112]	@ (800e4b0 <xTaskResumeAll+0x134>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d010      	beq.n	800e46a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e448:	f000 f940 	bl	800e6cc <xTaskIncrementTick>
 800e44c:	4603      	mov	r3, r0
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d002      	beq.n	800e458 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e452:	4b16      	ldr	r3, [pc, #88]	@ (800e4ac <xTaskResumeAll+0x130>)
 800e454:	2201      	movs	r2, #1
 800e456:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	3b01      	subs	r3, #1
 800e45c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1f1      	bne.n	800e448 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e464:	4b12      	ldr	r3, [pc, #72]	@ (800e4b0 <xTaskResumeAll+0x134>)
 800e466:	2200      	movs	r2, #0
 800e468:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e46a:	4b10      	ldr	r3, [pc, #64]	@ (800e4ac <xTaskResumeAll+0x130>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d009      	beq.n	800e486 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e472:	2301      	movs	r3, #1
 800e474:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e476:	4b0f      	ldr	r3, [pc, #60]	@ (800e4b4 <xTaskResumeAll+0x138>)
 800e478:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e47c:	601a      	str	r2, [r3, #0]
 800e47e:	f3bf 8f4f 	dsb	sy
 800e482:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e486:	f001 fad9 	bl	800fa3c <vPortExitCritical>

	return xAlreadyYielded;
 800e48a:	68bb      	ldr	r3, [r7, #8]
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3710      	adds	r7, #16
 800e490:	46bd      	mov	sp, r7
 800e492:	bd80      	pop	{r7, pc}
 800e494:	20001c9c 	.word	0x20001c9c
 800e498:	20001c74 	.word	0x20001c74
 800e49c:	20001c34 	.word	0x20001c34
 800e4a0:	20001c7c 	.word	0x20001c7c
 800e4a4:	200017a4 	.word	0x200017a4
 800e4a8:	200017a0 	.word	0x200017a0
 800e4ac:	20001c88 	.word	0x20001c88
 800e4b0:	20001c84 	.word	0x20001c84
 800e4b4:	e000ed04 	.word	0xe000ed04

0800e4b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e4be:	4b05      	ldr	r3, [pc, #20]	@ (800e4d4 <xTaskGetTickCount+0x1c>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e4c4:	687b      	ldr	r3, [r7, #4]
}
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	370c      	adds	r7, #12
 800e4ca:	46bd      	mov	sp, r7
 800e4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d0:	4770      	bx	lr
 800e4d2:	bf00      	nop
 800e4d4:	20001c78 	.word	0x20001c78

0800e4d8 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d102      	bne.n	800e4ec <pcTaskGetName+0x14>
 800e4e6:	4b0e      	ldr	r3, [pc, #56]	@ (800e520 <pcTaskGetName+0x48>)
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	e000      	b.n	800e4ee <pcTaskGetName+0x16>
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d10b      	bne.n	800e50e <pcTaskGetName+0x36>
	__asm volatile
 800e4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4fa:	f383 8811 	msr	BASEPRI, r3
 800e4fe:	f3bf 8f6f 	isb	sy
 800e502:	f3bf 8f4f 	dsb	sy
 800e506:	60bb      	str	r3, [r7, #8]
}
 800e508:	bf00      	nop
 800e50a:	bf00      	nop
 800e50c:	e7fd      	b.n	800e50a <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	3334      	adds	r3, #52	@ 0x34
}
 800e512:	4618      	mov	r0, r3
 800e514:	3714      	adds	r7, #20
 800e516:	46bd      	mov	sp, r7
 800e518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51c:	4770      	bx	lr
 800e51e:	bf00      	nop
 800e520:	200017a0 	.word	0x200017a0

0800e524 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800e524:	b480      	push	{r7}
 800e526:	b08b      	sub	sp, #44	@ 0x2c
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800e52e:	2300      	movs	r3, #0
 800e530:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d05b      	beq.n	800e5f2 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	61bb      	str	r3, [r7, #24]
 800e53e:	69bb      	ldr	r3, [r7, #24]
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	685a      	ldr	r2, [r3, #4]
 800e544:	69bb      	ldr	r3, [r7, #24]
 800e546:	605a      	str	r2, [r3, #4]
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	69bb      	ldr	r3, [r7, #24]
 800e54e:	3308      	adds	r3, #8
 800e550:	429a      	cmp	r2, r3
 800e552:	d104      	bne.n	800e55e <prvSearchForNameWithinSingleList+0x3a>
 800e554:	69bb      	ldr	r3, [r7, #24]
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	685a      	ldr	r2, [r3, #4]
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	605a      	str	r2, [r3, #4]
 800e55e:	69bb      	ldr	r3, [r7, #24]
 800e560:	685b      	ldr	r3, [r3, #4]
 800e562:	68db      	ldr	r3, [r3, #12]
 800e564:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	613b      	str	r3, [r7, #16]
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	685b      	ldr	r3, [r3, #4]
 800e56e:	685a      	ldr	r2, [r3, #4]
 800e570:	693b      	ldr	r3, [r7, #16]
 800e572:	605a      	str	r2, [r3, #4]
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	685a      	ldr	r2, [r3, #4]
 800e578:	693b      	ldr	r3, [r7, #16]
 800e57a:	3308      	adds	r3, #8
 800e57c:	429a      	cmp	r2, r3
 800e57e:	d104      	bne.n	800e58a <prvSearchForNameWithinSingleList+0x66>
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	685a      	ldr	r2, [r3, #4]
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	605a      	str	r2, [r3, #4]
 800e58a:	693b      	ldr	r3, [r7, #16]
 800e58c:	685b      	ldr	r3, [r3, #4]
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800e592:	2300      	movs	r3, #0
 800e594:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e596:	2300      	movs	r3, #0
 800e598:	623b      	str	r3, [r7, #32]
 800e59a:	e01c      	b.n	800e5d6 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800e59c:	68fa      	ldr	r2, [r7, #12]
 800e59e:	6a3b      	ldr	r3, [r7, #32]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	3334      	adds	r3, #52	@ 0x34
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800e5a8:	683a      	ldr	r2, [r7, #0]
 800e5aa:	6a3b      	ldr	r3, [r7, #32]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	7afa      	ldrb	r2, [r7, #11]
 800e5b2:	429a      	cmp	r2, r3
 800e5b4:	d002      	beq.n	800e5bc <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	61fb      	str	r3, [r7, #28]
 800e5ba:	e006      	b.n	800e5ca <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800e5bc:	7afb      	ldrb	r3, [r7, #11]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d103      	bne.n	800e5ca <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800e5ca:	69fb      	ldr	r3, [r7, #28]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d106      	bne.n	800e5de <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e5d0:	6a3b      	ldr	r3, [r7, #32]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	623b      	str	r3, [r7, #32]
 800e5d6:	6a3b      	ldr	r3, [r7, #32]
 800e5d8:	2b0f      	cmp	r3, #15
 800e5da:	d9df      	bls.n	800e59c <prvSearchForNameWithinSingleList+0x78>
 800e5dc:	e000      	b.n	800e5e0 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800e5de:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800e5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d104      	bne.n	800e5f0 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800e5e6:	68fa      	ldr	r2, [r7, #12]
 800e5e8:	697b      	ldr	r3, [r7, #20]
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d1bb      	bne.n	800e566 <prvSearchForNameWithinSingleList+0x42>
 800e5ee:	e000      	b.n	800e5f2 <prvSearchForNameWithinSingleList+0xce>
					break;
 800e5f0:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800e5f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	372c      	adds	r7, #44	@ 0x2c
 800e5f8:	46bd      	mov	sp, r7
 800e5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fe:	4770      	bx	lr

0800e600 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e600:	b580      	push	{r7, lr}
 800e602:	b086      	sub	sp, #24
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800e608:	2338      	movs	r3, #56	@ 0x38
 800e60a:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800e60c:	6878      	ldr	r0, [r7, #4]
 800e60e:	f7f1 fddf 	bl	80001d0 <strlen>
 800e612:	4603      	mov	r3, r0
 800e614:	2b0f      	cmp	r3, #15
 800e616:	d90b      	bls.n	800e630 <xTaskGetHandle+0x30>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	60fb      	str	r3, [r7, #12]
}
 800e62a:	bf00      	nop
 800e62c:	bf00      	nop
 800e62e:	e7fd      	b.n	800e62c <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800e630:	f7ff fe96 	bl	800e360 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800e634:	697b      	ldr	r3, [r7, #20]
 800e636:	3b01      	subs	r3, #1
 800e638:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800e63a:	697a      	ldr	r2, [r7, #20]
 800e63c:	4613      	mov	r3, r2
 800e63e:	009b      	lsls	r3, r3, #2
 800e640:	4413      	add	r3, r2
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4a1c      	ldr	r2, [pc, #112]	@ (800e6b8 <xTaskGetHandle+0xb8>)
 800e646:	4413      	add	r3, r2
 800e648:	6879      	ldr	r1, [r7, #4]
 800e64a:	4618      	mov	r0, r3
 800e64c:	f7ff ff6a 	bl	800e524 <prvSearchForNameWithinSingleList>
 800e650:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800e652:	693b      	ldr	r3, [r7, #16]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d103      	bne.n	800e660 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d1ea      	bne.n	800e634 <xTaskGetHandle+0x34>
 800e65e:	e000      	b.n	800e662 <xTaskGetHandle+0x62>
					break;
 800e660:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800e662:	693b      	ldr	r3, [r7, #16]
 800e664:	2b00      	cmp	r3, #0
 800e666:	d106      	bne.n	800e676 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800e668:	4b14      	ldr	r3, [pc, #80]	@ (800e6bc <xTaskGetHandle+0xbc>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	6879      	ldr	r1, [r7, #4]
 800e66e:	4618      	mov	r0, r3
 800e670:	f7ff ff58 	bl	800e524 <prvSearchForNameWithinSingleList>
 800e674:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d106      	bne.n	800e68a <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800e67c:	4b10      	ldr	r3, [pc, #64]	@ (800e6c0 <xTaskGetHandle+0xc0>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	6879      	ldr	r1, [r7, #4]
 800e682:	4618      	mov	r0, r3
 800e684:	f7ff ff4e 	bl	800e524 <prvSearchForNameWithinSingleList>
 800e688:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800e68a:	693b      	ldr	r3, [r7, #16]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d104      	bne.n	800e69a <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800e690:	6879      	ldr	r1, [r7, #4]
 800e692:	480c      	ldr	r0, [pc, #48]	@ (800e6c4 <xTaskGetHandle+0xc4>)
 800e694:	f7ff ff46 	bl	800e524 <prvSearchForNameWithinSingleList>
 800e698:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800e69a:	693b      	ldr	r3, [r7, #16]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d104      	bne.n	800e6aa <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800e6a0:	6879      	ldr	r1, [r7, #4]
 800e6a2:	4809      	ldr	r0, [pc, #36]	@ (800e6c8 <xTaskGetHandle+0xc8>)
 800e6a4:	f7ff ff3e 	bl	800e524 <prvSearchForNameWithinSingleList>
 800e6a8:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800e6aa:	f7ff fe67 	bl	800e37c <xTaskResumeAll>

		return pxTCB;
 800e6ae:	693b      	ldr	r3, [r7, #16]
	}
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	3718      	adds	r7, #24
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	bd80      	pop	{r7, pc}
 800e6b8:	200017a4 	.word	0x200017a4
 800e6bc:	20001c2c 	.word	0x20001c2c
 800e6c0:	20001c30 	.word	0x20001c30
 800e6c4:	20001c60 	.word	0x20001c60
 800e6c8:	20001c48 	.word	0x20001c48

0800e6cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b086      	sub	sp, #24
 800e6d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e6d6:	4b4f      	ldr	r3, [pc, #316]	@ (800e814 <xTaskIncrementTick+0x148>)
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	f040 8090 	bne.w	800e800 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e6e0:	4b4d      	ldr	r3, [pc, #308]	@ (800e818 <xTaskIncrementTick+0x14c>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	3301      	adds	r3, #1
 800e6e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e6e8:	4a4b      	ldr	r2, [pc, #300]	@ (800e818 <xTaskIncrementTick+0x14c>)
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d121      	bne.n	800e738 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e6f4:	4b49      	ldr	r3, [pc, #292]	@ (800e81c <xTaskIncrementTick+0x150>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d00b      	beq.n	800e716 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e6fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e702:	f383 8811 	msr	BASEPRI, r3
 800e706:	f3bf 8f6f 	isb	sy
 800e70a:	f3bf 8f4f 	dsb	sy
 800e70e:	603b      	str	r3, [r7, #0]
}
 800e710:	bf00      	nop
 800e712:	bf00      	nop
 800e714:	e7fd      	b.n	800e712 <xTaskIncrementTick+0x46>
 800e716:	4b41      	ldr	r3, [pc, #260]	@ (800e81c <xTaskIncrementTick+0x150>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	60fb      	str	r3, [r7, #12]
 800e71c:	4b40      	ldr	r3, [pc, #256]	@ (800e820 <xTaskIncrementTick+0x154>)
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	4a3e      	ldr	r2, [pc, #248]	@ (800e81c <xTaskIncrementTick+0x150>)
 800e722:	6013      	str	r3, [r2, #0]
 800e724:	4a3e      	ldr	r2, [pc, #248]	@ (800e820 <xTaskIncrementTick+0x154>)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	6013      	str	r3, [r2, #0]
 800e72a:	4b3e      	ldr	r3, [pc, #248]	@ (800e824 <xTaskIncrementTick+0x158>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	3301      	adds	r3, #1
 800e730:	4a3c      	ldr	r2, [pc, #240]	@ (800e824 <xTaskIncrementTick+0x158>)
 800e732:	6013      	str	r3, [r2, #0]
 800e734:	f000 fae2 	bl	800ecfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e738:	4b3b      	ldr	r3, [pc, #236]	@ (800e828 <xTaskIncrementTick+0x15c>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	693a      	ldr	r2, [r7, #16]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d349      	bcc.n	800e7d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e742:	4b36      	ldr	r3, [pc, #216]	@ (800e81c <xTaskIncrementTick+0x150>)
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d104      	bne.n	800e756 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e74c:	4b36      	ldr	r3, [pc, #216]	@ (800e828 <xTaskIncrementTick+0x15c>)
 800e74e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e752:	601a      	str	r2, [r3, #0]
					break;
 800e754:	e03f      	b.n	800e7d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e756:	4b31      	ldr	r3, [pc, #196]	@ (800e81c <xTaskIncrementTick+0x150>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	68db      	ldr	r3, [r3, #12]
 800e75c:	68db      	ldr	r3, [r3, #12]
 800e75e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	685b      	ldr	r3, [r3, #4]
 800e764:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e766:	693a      	ldr	r2, [r7, #16]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d203      	bcs.n	800e776 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e76e:	4a2e      	ldr	r2, [pc, #184]	@ (800e828 <xTaskIncrementTick+0x15c>)
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e774:	e02f      	b.n	800e7d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	3304      	adds	r3, #4
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fe fe68 	bl	800d450 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e784:	2b00      	cmp	r3, #0
 800e786:	d004      	beq.n	800e792 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	3318      	adds	r3, #24
 800e78c:	4618      	mov	r0, r3
 800e78e:	f7fe fe5f 	bl	800d450 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e796:	4b25      	ldr	r3, [pc, #148]	@ (800e82c <xTaskIncrementTick+0x160>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d903      	bls.n	800e7a6 <xTaskIncrementTick+0xda>
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7a2:	4a22      	ldr	r2, [pc, #136]	@ (800e82c <xTaskIncrementTick+0x160>)
 800e7a4:	6013      	str	r3, [r2, #0]
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	4413      	add	r3, r2
 800e7b0:	009b      	lsls	r3, r3, #2
 800e7b2:	4a1f      	ldr	r2, [pc, #124]	@ (800e830 <xTaskIncrementTick+0x164>)
 800e7b4:	441a      	add	r2, r3
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	3304      	adds	r3, #4
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	4610      	mov	r0, r2
 800e7be:	f7fe fdea 	bl	800d396 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7c6:	4b1b      	ldr	r3, [pc, #108]	@ (800e834 <xTaskIncrementTick+0x168>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d3b8      	bcc.n	800e742 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7d4:	e7b5      	b.n	800e742 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e7d6:	4b17      	ldr	r3, [pc, #92]	@ (800e834 <xTaskIncrementTick+0x168>)
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e7dc:	4914      	ldr	r1, [pc, #80]	@ (800e830 <xTaskIncrementTick+0x164>)
 800e7de:	4613      	mov	r3, r2
 800e7e0:	009b      	lsls	r3, r3, #2
 800e7e2:	4413      	add	r3, r2
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	440b      	add	r3, r1
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	2b01      	cmp	r3, #1
 800e7ec:	d901      	bls.n	800e7f2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e7ee:	2301      	movs	r3, #1
 800e7f0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e7f2:	4b11      	ldr	r3, [pc, #68]	@ (800e838 <xTaskIncrementTick+0x16c>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d007      	beq.n	800e80a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	617b      	str	r3, [r7, #20]
 800e7fe:	e004      	b.n	800e80a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e800:	4b0e      	ldr	r3, [pc, #56]	@ (800e83c <xTaskIncrementTick+0x170>)
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	3301      	adds	r3, #1
 800e806:	4a0d      	ldr	r2, [pc, #52]	@ (800e83c <xTaskIncrementTick+0x170>)
 800e808:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e80a:	697b      	ldr	r3, [r7, #20]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3718      	adds	r7, #24
 800e810:	46bd      	mov	sp, r7
 800e812:	bd80      	pop	{r7, pc}
 800e814:	20001c9c 	.word	0x20001c9c
 800e818:	20001c78 	.word	0x20001c78
 800e81c:	20001c2c 	.word	0x20001c2c
 800e820:	20001c30 	.word	0x20001c30
 800e824:	20001c8c 	.word	0x20001c8c
 800e828:	20001c94 	.word	0x20001c94
 800e82c:	20001c7c 	.word	0x20001c7c
 800e830:	200017a4 	.word	0x200017a4
 800e834:	200017a0 	.word	0x200017a0
 800e838:	20001c88 	.word	0x20001c88
 800e83c:	20001c84 	.word	0x20001c84

0800e840 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e840:	b480      	push	{r7}
 800e842:	b085      	sub	sp, #20
 800e844:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e846:	4b2b      	ldr	r3, [pc, #172]	@ (800e8f4 <vTaskSwitchContext+0xb4>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d003      	beq.n	800e856 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e84e:	4b2a      	ldr	r3, [pc, #168]	@ (800e8f8 <vTaskSwitchContext+0xb8>)
 800e850:	2201      	movs	r2, #1
 800e852:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e854:	e047      	b.n	800e8e6 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e856:	4b28      	ldr	r3, [pc, #160]	@ (800e8f8 <vTaskSwitchContext+0xb8>)
 800e858:	2200      	movs	r2, #0
 800e85a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e85c:	4b27      	ldr	r3, [pc, #156]	@ (800e8fc <vTaskSwitchContext+0xbc>)
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	60fb      	str	r3, [r7, #12]
 800e862:	e011      	b.n	800e888 <vTaskSwitchContext+0x48>
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d10b      	bne.n	800e882 <vTaskSwitchContext+0x42>
	__asm volatile
 800e86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e86e:	f383 8811 	msr	BASEPRI, r3
 800e872:	f3bf 8f6f 	isb	sy
 800e876:	f3bf 8f4f 	dsb	sy
 800e87a:	607b      	str	r3, [r7, #4]
}
 800e87c:	bf00      	nop
 800e87e:	bf00      	nop
 800e880:	e7fd      	b.n	800e87e <vTaskSwitchContext+0x3e>
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	3b01      	subs	r3, #1
 800e886:	60fb      	str	r3, [r7, #12]
 800e888:	491d      	ldr	r1, [pc, #116]	@ (800e900 <vTaskSwitchContext+0xc0>)
 800e88a:	68fa      	ldr	r2, [r7, #12]
 800e88c:	4613      	mov	r3, r2
 800e88e:	009b      	lsls	r3, r3, #2
 800e890:	4413      	add	r3, r2
 800e892:	009b      	lsls	r3, r3, #2
 800e894:	440b      	add	r3, r1
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d0e3      	beq.n	800e864 <vTaskSwitchContext+0x24>
 800e89c:	68fa      	ldr	r2, [r7, #12]
 800e89e:	4613      	mov	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	4413      	add	r3, r2
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	4a16      	ldr	r2, [pc, #88]	@ (800e900 <vTaskSwitchContext+0xc0>)
 800e8a8:	4413      	add	r3, r2
 800e8aa:	60bb      	str	r3, [r7, #8]
 800e8ac:	68bb      	ldr	r3, [r7, #8]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	685a      	ldr	r2, [r3, #4]
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	605a      	str	r2, [r3, #4]
 800e8b6:	68bb      	ldr	r3, [r7, #8]
 800e8b8:	685a      	ldr	r2, [r3, #4]
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	3308      	adds	r3, #8
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d104      	bne.n	800e8cc <vTaskSwitchContext+0x8c>
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	685b      	ldr	r3, [r3, #4]
 800e8c6:	685a      	ldr	r2, [r3, #4]
 800e8c8:	68bb      	ldr	r3, [r7, #8]
 800e8ca:	605a      	str	r2, [r3, #4]
 800e8cc:	68bb      	ldr	r3, [r7, #8]
 800e8ce:	685b      	ldr	r3, [r3, #4]
 800e8d0:	68db      	ldr	r3, [r3, #12]
 800e8d2:	4a0c      	ldr	r2, [pc, #48]	@ (800e904 <vTaskSwitchContext+0xc4>)
 800e8d4:	6013      	str	r3, [r2, #0]
 800e8d6:	4a09      	ldr	r2, [pc, #36]	@ (800e8fc <vTaskSwitchContext+0xbc>)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e8dc:	4b09      	ldr	r3, [pc, #36]	@ (800e904 <vTaskSwitchContext+0xc4>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3354      	adds	r3, #84	@ 0x54
 800e8e2:	4a09      	ldr	r2, [pc, #36]	@ (800e908 <vTaskSwitchContext+0xc8>)
 800e8e4:	6013      	str	r3, [r2, #0]
}
 800e8e6:	bf00      	nop
 800e8e8:	3714      	adds	r7, #20
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f0:	4770      	bx	lr
 800e8f2:	bf00      	nop
 800e8f4:	20001c9c 	.word	0x20001c9c
 800e8f8:	20001c88 	.word	0x20001c88
 800e8fc:	20001c7c 	.word	0x20001c7c
 800e900:	200017a4 	.word	0x200017a4
 800e904:	200017a0 	.word	0x200017a0
 800e908:	20000200 	.word	0x20000200

0800e90c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d10b      	bne.n	800e934 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e91c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e920:	f383 8811 	msr	BASEPRI, r3
 800e924:	f3bf 8f6f 	isb	sy
 800e928:	f3bf 8f4f 	dsb	sy
 800e92c:	60fb      	str	r3, [r7, #12]
}
 800e92e:	bf00      	nop
 800e930:	bf00      	nop
 800e932:	e7fd      	b.n	800e930 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e934:	4b07      	ldr	r3, [pc, #28]	@ (800e954 <vTaskPlaceOnEventList+0x48>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	3318      	adds	r3, #24
 800e93a:	4619      	mov	r1, r3
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f7fe fd4e 	bl	800d3de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e942:	2101      	movs	r1, #1
 800e944:	6838      	ldr	r0, [r7, #0]
 800e946:	f000 fb69 	bl	800f01c <prvAddCurrentTaskToDelayedList>
}
 800e94a:	bf00      	nop
 800e94c:	3710      	adds	r7, #16
 800e94e:	46bd      	mov	sp, r7
 800e950:	bd80      	pop	{r7, pc}
 800e952:	bf00      	nop
 800e954:	200017a0 	.word	0x200017a0

0800e958 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b086      	sub	sp, #24
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e964:	68fb      	ldr	r3, [r7, #12]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10b      	bne.n	800e982 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e96a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	617b      	str	r3, [r7, #20]
}
 800e97c:	bf00      	nop
 800e97e:	bf00      	nop
 800e980:	e7fd      	b.n	800e97e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e982:	4b0a      	ldr	r3, [pc, #40]	@ (800e9ac <vTaskPlaceOnEventListRestricted+0x54>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	3318      	adds	r3, #24
 800e988:	4619      	mov	r1, r3
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f7fe fd03 	bl	800d396 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d002      	beq.n	800e99c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e996:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e99a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e99c:	6879      	ldr	r1, [r7, #4]
 800e99e:	68b8      	ldr	r0, [r7, #8]
 800e9a0:	f000 fb3c 	bl	800f01c <prvAddCurrentTaskToDelayedList>
	}
 800e9a4:	bf00      	nop
 800e9a6:	3718      	adds	r7, #24
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}
 800e9ac:	200017a0 	.word	0x200017a0

0800e9b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	68db      	ldr	r3, [r3, #12]
 800e9bc:	68db      	ldr	r3, [r3, #12]
 800e9be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d10b      	bne.n	800e9de <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9ca:	f383 8811 	msr	BASEPRI, r3
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f3bf 8f4f 	dsb	sy
 800e9d6:	60fb      	str	r3, [r7, #12]
}
 800e9d8:	bf00      	nop
 800e9da:	bf00      	nop
 800e9dc:	e7fd      	b.n	800e9da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e9de:	693b      	ldr	r3, [r7, #16]
 800e9e0:	3318      	adds	r3, #24
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f7fe fd34 	bl	800d450 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9e8:	4b1d      	ldr	r3, [pc, #116]	@ (800ea60 <xTaskRemoveFromEventList+0xb0>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d11d      	bne.n	800ea2c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e9f0:	693b      	ldr	r3, [r7, #16]
 800e9f2:	3304      	adds	r3, #4
 800e9f4:	4618      	mov	r0, r3
 800e9f6:	f7fe fd2b 	bl	800d450 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e9fe:	4b19      	ldr	r3, [pc, #100]	@ (800ea64 <xTaskRemoveFromEventList+0xb4>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	429a      	cmp	r2, r3
 800ea04:	d903      	bls.n	800ea0e <xTaskRemoveFromEventList+0x5e>
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea0a:	4a16      	ldr	r2, [pc, #88]	@ (800ea64 <xTaskRemoveFromEventList+0xb4>)
 800ea0c:	6013      	str	r3, [r2, #0]
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea12:	4613      	mov	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4413      	add	r3, r2
 800ea18:	009b      	lsls	r3, r3, #2
 800ea1a:	4a13      	ldr	r2, [pc, #76]	@ (800ea68 <xTaskRemoveFromEventList+0xb8>)
 800ea1c:	441a      	add	r2, r3
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	3304      	adds	r3, #4
 800ea22:	4619      	mov	r1, r3
 800ea24:	4610      	mov	r0, r2
 800ea26:	f7fe fcb6 	bl	800d396 <vListInsertEnd>
 800ea2a:	e005      	b.n	800ea38 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea2c:	693b      	ldr	r3, [r7, #16]
 800ea2e:	3318      	adds	r3, #24
 800ea30:	4619      	mov	r1, r3
 800ea32:	480e      	ldr	r0, [pc, #56]	@ (800ea6c <xTaskRemoveFromEventList+0xbc>)
 800ea34:	f7fe fcaf 	bl	800d396 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea38:	693b      	ldr	r3, [r7, #16]
 800ea3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea3c:	4b0c      	ldr	r3, [pc, #48]	@ (800ea70 <xTaskRemoveFromEventList+0xc0>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea42:	429a      	cmp	r2, r3
 800ea44:	d905      	bls.n	800ea52 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea46:	2301      	movs	r3, #1
 800ea48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea4a:	4b0a      	ldr	r3, [pc, #40]	@ (800ea74 <xTaskRemoveFromEventList+0xc4>)
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	601a      	str	r2, [r3, #0]
 800ea50:	e001      	b.n	800ea56 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ea52:	2300      	movs	r3, #0
 800ea54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea56:	697b      	ldr	r3, [r7, #20]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3718      	adds	r7, #24
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}
 800ea60:	20001c9c 	.word	0x20001c9c
 800ea64:	20001c7c 	.word	0x20001c7c
 800ea68:	200017a4 	.word	0x200017a4
 800ea6c:	20001c34 	.word	0x20001c34
 800ea70:	200017a0 	.word	0x200017a0
 800ea74:	20001c88 	.word	0x20001c88

0800ea78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea78:	b480      	push	{r7}
 800ea7a:	b083      	sub	sp, #12
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea80:	4b06      	ldr	r3, [pc, #24]	@ (800ea9c <vTaskInternalSetTimeOutState+0x24>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea88:	4b05      	ldr	r3, [pc, #20]	@ (800eaa0 <vTaskInternalSetTimeOutState+0x28>)
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	605a      	str	r2, [r3, #4]
}
 800ea90:	bf00      	nop
 800ea92:	370c      	adds	r7, #12
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	20001c8c 	.word	0x20001c8c
 800eaa0:	20001c78 	.word	0x20001c78

0800eaa4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b088      	sub	sp, #32
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d10b      	bne.n	800eacc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800eab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eab8:	f383 8811 	msr	BASEPRI, r3
 800eabc:	f3bf 8f6f 	isb	sy
 800eac0:	f3bf 8f4f 	dsb	sy
 800eac4:	613b      	str	r3, [r7, #16]
}
 800eac6:	bf00      	nop
 800eac8:	bf00      	nop
 800eaca:	e7fd      	b.n	800eac8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d10b      	bne.n	800eaea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ead2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ead6:	f383 8811 	msr	BASEPRI, r3
 800eada:	f3bf 8f6f 	isb	sy
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	60fb      	str	r3, [r7, #12]
}
 800eae4:	bf00      	nop
 800eae6:	bf00      	nop
 800eae8:	e7fd      	b.n	800eae6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800eaea:	f000 ff75 	bl	800f9d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eaee:	4b1d      	ldr	r3, [pc, #116]	@ (800eb64 <xTaskCheckForTimeOut+0xc0>)
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	685b      	ldr	r3, [r3, #4]
 800eaf8:	69ba      	ldr	r2, [r7, #24]
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800eb06:	d102      	bne.n	800eb0e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	61fb      	str	r3, [r7, #28]
 800eb0c:	e023      	b.n	800eb56 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	4b15      	ldr	r3, [pc, #84]	@ (800eb68 <xTaskCheckForTimeOut+0xc4>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d007      	beq.n	800eb2a <xTaskCheckForTimeOut+0x86>
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	69ba      	ldr	r2, [r7, #24]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d302      	bcc.n	800eb2a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb24:	2301      	movs	r3, #1
 800eb26:	61fb      	str	r3, [r7, #28]
 800eb28:	e015      	b.n	800eb56 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	697a      	ldr	r2, [r7, #20]
 800eb30:	429a      	cmp	r2, r3
 800eb32:	d20b      	bcs.n	800eb4c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	1ad2      	subs	r2, r2, r3
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff ff99 	bl	800ea78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb46:	2300      	movs	r3, #0
 800eb48:	61fb      	str	r3, [r7, #28]
 800eb4a:	e004      	b.n	800eb56 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb4c:	683b      	ldr	r3, [r7, #0]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb52:	2301      	movs	r3, #1
 800eb54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb56:	f000 ff71 	bl	800fa3c <vPortExitCritical>

	return xReturn;
 800eb5a:	69fb      	ldr	r3, [r7, #28]
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	3720      	adds	r7, #32
 800eb60:	46bd      	mov	sp, r7
 800eb62:	bd80      	pop	{r7, pc}
 800eb64:	20001c78 	.word	0x20001c78
 800eb68:	20001c8c 	.word	0x20001c8c

0800eb6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb70:	4b03      	ldr	r3, [pc, #12]	@ (800eb80 <vTaskMissedYield+0x14>)
 800eb72:	2201      	movs	r2, #1
 800eb74:	601a      	str	r2, [r3, #0]
}
 800eb76:	bf00      	nop
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr
 800eb80:	20001c88 	.word	0x20001c88

0800eb84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b082      	sub	sp, #8
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb8c:	f000 f852 	bl	800ec34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb90:	4b06      	ldr	r3, [pc, #24]	@ (800ebac <prvIdleTask+0x28>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d9f9      	bls.n	800eb8c <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb98:	4b05      	ldr	r3, [pc, #20]	@ (800ebb0 <prvIdleTask+0x2c>)
 800eb9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb9e:	601a      	str	r2, [r3, #0]
 800eba0:	f3bf 8f4f 	dsb	sy
 800eba4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eba8:	e7f0      	b.n	800eb8c <prvIdleTask+0x8>
 800ebaa:	bf00      	nop
 800ebac:	200017a4 	.word	0x200017a4
 800ebb0:	e000ed04 	.word	0xe000ed04

0800ebb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ebb4:	b580      	push	{r7, lr}
 800ebb6:	b082      	sub	sp, #8
 800ebb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebba:	2300      	movs	r3, #0
 800ebbc:	607b      	str	r3, [r7, #4]
 800ebbe:	e00c      	b.n	800ebda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ebc0:	687a      	ldr	r2, [r7, #4]
 800ebc2:	4613      	mov	r3, r2
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	4413      	add	r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	4a12      	ldr	r2, [pc, #72]	@ (800ec14 <prvInitialiseTaskLists+0x60>)
 800ebcc:	4413      	add	r3, r2
 800ebce:	4618      	mov	r0, r3
 800ebd0:	f7fe fbb4 	bl	800d33c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	607b      	str	r3, [r7, #4]
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	2b37      	cmp	r3, #55	@ 0x37
 800ebde:	d9ef      	bls.n	800ebc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ebe0:	480d      	ldr	r0, [pc, #52]	@ (800ec18 <prvInitialiseTaskLists+0x64>)
 800ebe2:	f7fe fbab 	bl	800d33c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ebe6:	480d      	ldr	r0, [pc, #52]	@ (800ec1c <prvInitialiseTaskLists+0x68>)
 800ebe8:	f7fe fba8 	bl	800d33c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ebec:	480c      	ldr	r0, [pc, #48]	@ (800ec20 <prvInitialiseTaskLists+0x6c>)
 800ebee:	f7fe fba5 	bl	800d33c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ebf2:	480c      	ldr	r0, [pc, #48]	@ (800ec24 <prvInitialiseTaskLists+0x70>)
 800ebf4:	f7fe fba2 	bl	800d33c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ebf8:	480b      	ldr	r0, [pc, #44]	@ (800ec28 <prvInitialiseTaskLists+0x74>)
 800ebfa:	f7fe fb9f 	bl	800d33c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ebfe:	4b0b      	ldr	r3, [pc, #44]	@ (800ec2c <prvInitialiseTaskLists+0x78>)
 800ec00:	4a05      	ldr	r2, [pc, #20]	@ (800ec18 <prvInitialiseTaskLists+0x64>)
 800ec02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ec04:	4b0a      	ldr	r3, [pc, #40]	@ (800ec30 <prvInitialiseTaskLists+0x7c>)
 800ec06:	4a05      	ldr	r2, [pc, #20]	@ (800ec1c <prvInitialiseTaskLists+0x68>)
 800ec08:	601a      	str	r2, [r3, #0]
}
 800ec0a:	bf00      	nop
 800ec0c:	3708      	adds	r7, #8
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	200017a4 	.word	0x200017a4
 800ec18:	20001c04 	.word	0x20001c04
 800ec1c:	20001c18 	.word	0x20001c18
 800ec20:	20001c34 	.word	0x20001c34
 800ec24:	20001c48 	.word	0x20001c48
 800ec28:	20001c60 	.word	0x20001c60
 800ec2c:	20001c2c 	.word	0x20001c2c
 800ec30:	20001c30 	.word	0x20001c30

0800ec34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec3a:	e019      	b.n	800ec70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec3c:	f000 fecc 	bl	800f9d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec40:	4b10      	ldr	r3, [pc, #64]	@ (800ec84 <prvCheckTasksWaitingTermination+0x50>)
 800ec42:	68db      	ldr	r3, [r3, #12]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	3304      	adds	r3, #4
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f7fe fbff 	bl	800d450 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec52:	4b0d      	ldr	r3, [pc, #52]	@ (800ec88 <prvCheckTasksWaitingTermination+0x54>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	3b01      	subs	r3, #1
 800ec58:	4a0b      	ldr	r2, [pc, #44]	@ (800ec88 <prvCheckTasksWaitingTermination+0x54>)
 800ec5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec5c:	4b0b      	ldr	r3, [pc, #44]	@ (800ec8c <prvCheckTasksWaitingTermination+0x58>)
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	3b01      	subs	r3, #1
 800ec62:	4a0a      	ldr	r2, [pc, #40]	@ (800ec8c <prvCheckTasksWaitingTermination+0x58>)
 800ec64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec66:	f000 fee9 	bl	800fa3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec6a:	6878      	ldr	r0, [r7, #4]
 800ec6c:	f000 f810 	bl	800ec90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec70:	4b06      	ldr	r3, [pc, #24]	@ (800ec8c <prvCheckTasksWaitingTermination+0x58>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d1e1      	bne.n	800ec3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec78:	bf00      	nop
 800ec7a:	bf00      	nop
 800ec7c:	3708      	adds	r7, #8
 800ec7e:	46bd      	mov	sp, r7
 800ec80:	bd80      	pop	{r7, pc}
 800ec82:	bf00      	nop
 800ec84:	20001c48 	.word	0x20001c48
 800ec88:	20001c74 	.word	0x20001c74
 800ec8c:	20001c5c 	.word	0x20001c5c

0800ec90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b084      	sub	sp, #16
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	3354      	adds	r3, #84	@ 0x54
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	f001 f9d3 	bl	8010048 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d108      	bne.n	800ecbe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f001 f881 	bl	800fdb8 <vPortFree>
				vPortFree( pxTCB );
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f001 f87e 	bl	800fdb8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ecbc:	e019      	b.n	800ecf2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d103      	bne.n	800ecd0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ecc8:	6878      	ldr	r0, [r7, #4]
 800ecca:	f001 f875 	bl	800fdb8 <vPortFree>
	}
 800ecce:	e010      	b.n	800ecf2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ecd6:	2b02      	cmp	r3, #2
 800ecd8:	d00b      	beq.n	800ecf2 <prvDeleteTCB+0x62>
	__asm volatile
 800ecda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecde:	f383 8811 	msr	BASEPRI, r3
 800ece2:	f3bf 8f6f 	isb	sy
 800ece6:	f3bf 8f4f 	dsb	sy
 800ecea:	60fb      	str	r3, [r7, #12]
}
 800ecec:	bf00      	nop
 800ecee:	bf00      	nop
 800ecf0:	e7fd      	b.n	800ecee <prvDeleteTCB+0x5e>
	}
 800ecf2:	bf00      	nop
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
	...

0800ecfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ecfc:	b480      	push	{r7}
 800ecfe:	b083      	sub	sp, #12
 800ed00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ed02:	4b0c      	ldr	r3, [pc, #48]	@ (800ed34 <prvResetNextTaskUnblockTime+0x38>)
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d104      	bne.n	800ed16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ed0c:	4b0a      	ldr	r3, [pc, #40]	@ (800ed38 <prvResetNextTaskUnblockTime+0x3c>)
 800ed0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ed12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed14:	e008      	b.n	800ed28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed16:	4b07      	ldr	r3, [pc, #28]	@ (800ed34 <prvResetNextTaskUnblockTime+0x38>)
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	68db      	ldr	r3, [r3, #12]
 800ed1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	685b      	ldr	r3, [r3, #4]
 800ed24:	4a04      	ldr	r2, [pc, #16]	@ (800ed38 <prvResetNextTaskUnblockTime+0x3c>)
 800ed26:	6013      	str	r3, [r2, #0]
}
 800ed28:	bf00      	nop
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr
 800ed34:	20001c2c 	.word	0x20001c2c
 800ed38:	20001c94 	.word	0x20001c94

0800ed3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b083      	sub	sp, #12
 800ed40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed42:	4b0b      	ldr	r3, [pc, #44]	@ (800ed70 <xTaskGetSchedulerState+0x34>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d102      	bne.n	800ed50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	607b      	str	r3, [r7, #4]
 800ed4e:	e008      	b.n	800ed62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed50:	4b08      	ldr	r3, [pc, #32]	@ (800ed74 <xTaskGetSchedulerState+0x38>)
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d102      	bne.n	800ed5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed58:	2302      	movs	r3, #2
 800ed5a:	607b      	str	r3, [r7, #4]
 800ed5c:	e001      	b.n	800ed62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed62:	687b      	ldr	r3, [r7, #4]
	}
 800ed64:	4618      	mov	r0, r3
 800ed66:	370c      	adds	r7, #12
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr
 800ed70:	20001c80 	.word	0x20001c80
 800ed74:	20001c9c 	.word	0x20001c9c

0800ed78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b086      	sub	sp, #24
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed84:	2300      	movs	r3, #0
 800ed86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d058      	beq.n	800ee40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed8e:	4b2f      	ldr	r3, [pc, #188]	@ (800ee4c <xTaskPriorityDisinherit+0xd4>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	693a      	ldr	r2, [r7, #16]
 800ed94:	429a      	cmp	r2, r3
 800ed96:	d00b      	beq.n	800edb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	60fb      	str	r3, [r7, #12]
}
 800edaa:	bf00      	nop
 800edac:	bf00      	nop
 800edae:	e7fd      	b.n	800edac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d10b      	bne.n	800edd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800edb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edbc:	f383 8811 	msr	BASEPRI, r3
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	f3bf 8f4f 	dsb	sy
 800edc8:	60bb      	str	r3, [r7, #8]
}
 800edca:	bf00      	nop
 800edcc:	bf00      	nop
 800edce:	e7fd      	b.n	800edcc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edd4:	1e5a      	subs	r2, r3, #1
 800edd6:	693b      	ldr	r3, [r7, #16]
 800edd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800edda:	693b      	ldr	r3, [r7, #16]
 800eddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ede2:	429a      	cmp	r2, r3
 800ede4:	d02c      	beq.n	800ee40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ede6:	693b      	ldr	r3, [r7, #16]
 800ede8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edea:	2b00      	cmp	r3, #0
 800edec:	d128      	bne.n	800ee40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edee:	693b      	ldr	r3, [r7, #16]
 800edf0:	3304      	adds	r3, #4
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7fe fb2c 	bl	800d450 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800edf8:	693b      	ldr	r3, [r7, #16]
 800edfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800edfc:	693b      	ldr	r3, [r7, #16]
 800edfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee00:	693b      	ldr	r3, [r7, #16]
 800ee02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee08:	693b      	ldr	r3, [r7, #16]
 800ee0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee0c:	693b      	ldr	r3, [r7, #16]
 800ee0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee10:	4b0f      	ldr	r3, [pc, #60]	@ (800ee50 <xTaskPriorityDisinherit+0xd8>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d903      	bls.n	800ee20 <xTaskPriorityDisinherit+0xa8>
 800ee18:	693b      	ldr	r3, [r7, #16]
 800ee1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee1c:	4a0c      	ldr	r2, [pc, #48]	@ (800ee50 <xTaskPriorityDisinherit+0xd8>)
 800ee1e:	6013      	str	r3, [r2, #0]
 800ee20:	693b      	ldr	r3, [r7, #16]
 800ee22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee24:	4613      	mov	r3, r2
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	4413      	add	r3, r2
 800ee2a:	009b      	lsls	r3, r3, #2
 800ee2c:	4a09      	ldr	r2, [pc, #36]	@ (800ee54 <xTaskPriorityDisinherit+0xdc>)
 800ee2e:	441a      	add	r2, r3
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	3304      	adds	r3, #4
 800ee34:	4619      	mov	r1, r3
 800ee36:	4610      	mov	r0, r2
 800ee38:	f7fe faad 	bl	800d396 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee3c:	2301      	movs	r3, #1
 800ee3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee40:	697b      	ldr	r3, [r7, #20]
	}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3718      	adds	r7, #24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}
 800ee4a:	bf00      	nop
 800ee4c:	200017a0 	.word	0x200017a0
 800ee50:	20001c7c 	.word	0x20001c7c
 800ee54:	200017a4 	.word	0x200017a4

0800ee58 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b084      	sub	sp, #16
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ee62:	f000 fdb9 	bl	800f9d8 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800ee66:	4b20      	ldr	r3, [pc, #128]	@ (800eee8 <ulTaskNotifyTake+0x90>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d113      	bne.n	800ee9a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ee72:	4b1d      	ldr	r3, [pc, #116]	@ (800eee8 <ulTaskNotifyTake+0x90>)
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	2201      	movs	r2, #1
 800ee78:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d00b      	beq.n	800ee9a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee82:	2101      	movs	r1, #1
 800ee84:	6838      	ldr	r0, [r7, #0]
 800ee86:	f000 f8c9 	bl	800f01c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ee8a:	4b18      	ldr	r3, [pc, #96]	@ (800eeec <ulTaskNotifyTake+0x94>)
 800ee8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	f3bf 8f4f 	dsb	sy
 800ee96:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee9a:	f000 fdcf 	bl	800fa3c <vPortExitCritical>

		taskENTER_CRITICAL();
 800ee9e:	f000 fd9b 	bl	800f9d8 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800eea2:	4b11      	ldr	r3, [pc, #68]	@ (800eee8 <ulTaskNotifyTake+0x90>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eeaa:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d00e      	beq.n	800eed0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d005      	beq.n	800eec4 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800eeb8:	4b0b      	ldr	r3, [pc, #44]	@ (800eee8 <ulTaskNotifyTake+0x90>)
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800eec2:	e005      	b.n	800eed0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800eec4:	4b08      	ldr	r3, [pc, #32]	@ (800eee8 <ulTaskNotifyTake+0x90>)
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	68fa      	ldr	r2, [r7, #12]
 800eeca:	3a01      	subs	r2, #1
 800eecc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eed0:	4b05      	ldr	r3, [pc, #20]	@ (800eee8 <ulTaskNotifyTake+0x90>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	2200      	movs	r2, #0
 800eed6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800eeda:	f000 fdaf 	bl	800fa3c <vPortExitCritical>

		return ulReturn;
 800eede:	68fb      	ldr	r3, [r7, #12]
	}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3710      	adds	r7, #16
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}
 800eee8:	200017a0 	.word	0x200017a0
 800eeec:	e000ed04 	.word	0xe000ed04

0800eef0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b08a      	sub	sp, #40	@ 0x28
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d10b      	bne.n	800ef18 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800ef00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef04:	f383 8811 	msr	BASEPRI, r3
 800ef08:	f3bf 8f6f 	isb	sy
 800ef0c:	f3bf 8f4f 	dsb	sy
 800ef10:	61bb      	str	r3, [r7, #24]
}
 800ef12:	bf00      	nop
 800ef14:	bf00      	nop
 800ef16:	e7fd      	b.n	800ef14 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ef18:	f000 fe3e 	bl	800fb98 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800ef20:	f3ef 8211 	mrs	r2, BASEPRI
 800ef24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef28:	f383 8811 	msr	BASEPRI, r3
 800ef2c:	f3bf 8f6f 	isb	sy
 800ef30:	f3bf 8f4f 	dsb	sy
 800ef34:	617a      	str	r2, [r7, #20]
 800ef36:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ef38:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ef3a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ef3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef3e:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800ef42:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ef44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef46:	2202      	movs	r2, #2
 800ef48:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800ef4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800ef5a:	7ffb      	ldrb	r3, [r7, #31]
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d147      	bne.n	800eff0 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800ef60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00b      	beq.n	800ef80 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800ef68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ef6c:	f383 8811 	msr	BASEPRI, r3
 800ef70:	f3bf 8f6f 	isb	sy
 800ef74:	f3bf 8f4f 	dsb	sy
 800ef78:	60fb      	str	r3, [r7, #12]
}
 800ef7a:	bf00      	nop
 800ef7c:	bf00      	nop
 800ef7e:	e7fd      	b.n	800ef7c <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ef80:	4b20      	ldr	r3, [pc, #128]	@ (800f004 <vTaskNotifyGiveFromISR+0x114>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d11d      	bne.n	800efc4 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef8a:	3304      	adds	r3, #4
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7fe fa5f 	bl	800d450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ef92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ef94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ef96:	4b1c      	ldr	r3, [pc, #112]	@ (800f008 <vTaskNotifyGiveFromISR+0x118>)
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	429a      	cmp	r2, r3
 800ef9c:	d903      	bls.n	800efa6 <vTaskNotifyGiveFromISR+0xb6>
 800ef9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efa2:	4a19      	ldr	r2, [pc, #100]	@ (800f008 <vTaskNotifyGiveFromISR+0x118>)
 800efa4:	6013      	str	r3, [r2, #0]
 800efa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efaa:	4613      	mov	r3, r2
 800efac:	009b      	lsls	r3, r3, #2
 800efae:	4413      	add	r3, r2
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	4a16      	ldr	r2, [pc, #88]	@ (800f00c <vTaskNotifyGiveFromISR+0x11c>)
 800efb4:	441a      	add	r2, r3
 800efb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efb8:	3304      	adds	r3, #4
 800efba:	4619      	mov	r1, r3
 800efbc:	4610      	mov	r0, r2
 800efbe:	f7fe f9ea 	bl	800d396 <vListInsertEnd>
 800efc2:	e005      	b.n	800efd0 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800efc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efc6:	3318      	adds	r3, #24
 800efc8:	4619      	mov	r1, r3
 800efca:	4811      	ldr	r0, [pc, #68]	@ (800f010 <vTaskNotifyGiveFromISR+0x120>)
 800efcc:	f7fe f9e3 	bl	800d396 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800efd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800efd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800efd4:	4b0f      	ldr	r3, [pc, #60]	@ (800f014 <vTaskNotifyGiveFromISR+0x124>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efda:	429a      	cmp	r2, r3
 800efdc:	d908      	bls.n	800eff0 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d002      	beq.n	800efea <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	2201      	movs	r2, #1
 800efe8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800efea:	4b0b      	ldr	r3, [pc, #44]	@ (800f018 <vTaskNotifyGiveFromISR+0x128>)
 800efec:	2201      	movs	r2, #1
 800efee:	601a      	str	r2, [r3, #0]
 800eff0:	6a3b      	ldr	r3, [r7, #32]
 800eff2:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	f383 8811 	msr	BASEPRI, r3
}
 800effa:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800effc:	bf00      	nop
 800effe:	3728      	adds	r7, #40	@ 0x28
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}
 800f004:	20001c9c 	.word	0x20001c9c
 800f008:	20001c7c 	.word	0x20001c7c
 800f00c:	200017a4 	.word	0x200017a4
 800f010:	20001c34 	.word	0x20001c34
 800f014:	200017a0 	.word	0x200017a0
 800f018:	20001c88 	.word	0x20001c88

0800f01c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b084      	sub	sp, #16
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f026:	4b21      	ldr	r3, [pc, #132]	@ (800f0ac <prvAddCurrentTaskToDelayedList+0x90>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f02c:	4b20      	ldr	r3, [pc, #128]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	3304      	adds	r3, #4
 800f032:	4618      	mov	r0, r3
 800f034:	f7fe fa0c 	bl	800d450 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f03e:	d10a      	bne.n	800f056 <prvAddCurrentTaskToDelayedList+0x3a>
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d007      	beq.n	800f056 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f046:	4b1a      	ldr	r3, [pc, #104]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	3304      	adds	r3, #4
 800f04c:	4619      	mov	r1, r3
 800f04e:	4819      	ldr	r0, [pc, #100]	@ (800f0b4 <prvAddCurrentTaskToDelayedList+0x98>)
 800f050:	f7fe f9a1 	bl	800d396 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f054:	e026      	b.n	800f0a4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f056:	68fa      	ldr	r2, [r7, #12]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	4413      	add	r3, r2
 800f05c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f05e:	4b14      	ldr	r3, [pc, #80]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	68ba      	ldr	r2, [r7, #8]
 800f064:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f066:	68ba      	ldr	r2, [r7, #8]
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d209      	bcs.n	800f082 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f06e:	4b12      	ldr	r3, [pc, #72]	@ (800f0b8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	4b0f      	ldr	r3, [pc, #60]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	3304      	adds	r3, #4
 800f078:	4619      	mov	r1, r3
 800f07a:	4610      	mov	r0, r2
 800f07c:	f7fe f9af 	bl	800d3de <vListInsert>
}
 800f080:	e010      	b.n	800f0a4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f082:	4b0e      	ldr	r3, [pc, #56]	@ (800f0bc <prvAddCurrentTaskToDelayedList+0xa0>)
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	4b0a      	ldr	r3, [pc, #40]	@ (800f0b0 <prvAddCurrentTaskToDelayedList+0x94>)
 800f088:	681b      	ldr	r3, [r3, #0]
 800f08a:	3304      	adds	r3, #4
 800f08c:	4619      	mov	r1, r3
 800f08e:	4610      	mov	r0, r2
 800f090:	f7fe f9a5 	bl	800d3de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f094:	4b0a      	ldr	r3, [pc, #40]	@ (800f0c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	68ba      	ldr	r2, [r7, #8]
 800f09a:	429a      	cmp	r2, r3
 800f09c:	d202      	bcs.n	800f0a4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f09e:	4a08      	ldr	r2, [pc, #32]	@ (800f0c0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	6013      	str	r3, [r2, #0]
}
 800f0a4:	bf00      	nop
 800f0a6:	3710      	adds	r7, #16
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd80      	pop	{r7, pc}
 800f0ac:	20001c78 	.word	0x20001c78
 800f0b0:	200017a0 	.word	0x200017a0
 800f0b4:	20001c60 	.word	0x20001c60
 800f0b8:	20001c30 	.word	0x20001c30
 800f0bc:	20001c2c 	.word	0x20001c2c
 800f0c0:	20001c94 	.word	0x20001c94

0800f0c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b08a      	sub	sp, #40	@ 0x28
 800f0c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f0ce:	f000 fb13 	bl	800f6f8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f0d2:	4b1d      	ldr	r3, [pc, #116]	@ (800f148 <xTimerCreateTimerTask+0x84>)
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d021      	beq.n	800f11e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f0e2:	1d3a      	adds	r2, r7, #4
 800f0e4:	f107 0108 	add.w	r1, r7, #8
 800f0e8:	f107 030c 	add.w	r3, r7, #12
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7fe f90b 	bl	800d308 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0f2:	6879      	ldr	r1, [r7, #4]
 800f0f4:	68bb      	ldr	r3, [r7, #8]
 800f0f6:	68fa      	ldr	r2, [r7, #12]
 800f0f8:	9202      	str	r2, [sp, #8]
 800f0fa:	9301      	str	r3, [sp, #4]
 800f0fc:	2302      	movs	r3, #2
 800f0fe:	9300      	str	r3, [sp, #0]
 800f100:	2300      	movs	r3, #0
 800f102:	460a      	mov	r2, r1
 800f104:	4911      	ldr	r1, [pc, #68]	@ (800f14c <xTimerCreateTimerTask+0x88>)
 800f106:	4812      	ldr	r0, [pc, #72]	@ (800f150 <xTimerCreateTimerTask+0x8c>)
 800f108:	f7fe fec6 	bl	800de98 <xTaskCreateStatic>
 800f10c:	4603      	mov	r3, r0
 800f10e:	4a11      	ldr	r2, [pc, #68]	@ (800f154 <xTimerCreateTimerTask+0x90>)
 800f110:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f112:	4b10      	ldr	r3, [pc, #64]	@ (800f154 <xTimerCreateTimerTask+0x90>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d001      	beq.n	800f11e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f11a:	2301      	movs	r3, #1
 800f11c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d10b      	bne.n	800f13c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f128:	f383 8811 	msr	BASEPRI, r3
 800f12c:	f3bf 8f6f 	isb	sy
 800f130:	f3bf 8f4f 	dsb	sy
 800f134:	613b      	str	r3, [r7, #16]
}
 800f136:	bf00      	nop
 800f138:	bf00      	nop
 800f13a:	e7fd      	b.n	800f138 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f13c:	697b      	ldr	r3, [r7, #20]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3718      	adds	r7, #24
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	20001cd0 	.word	0x20001cd0
 800f14c:	08011cbc 	.word	0x08011cbc
 800f150:	0800f291 	.word	0x0800f291
 800f154:	20001cd4 	.word	0x20001cd4

0800f158 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f158:	b580      	push	{r7, lr}
 800f15a:	b08a      	sub	sp, #40	@ 0x28
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	60f8      	str	r0, [r7, #12]
 800f160:	60b9      	str	r1, [r7, #8]
 800f162:	607a      	str	r2, [r7, #4]
 800f164:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f166:	2300      	movs	r3, #0
 800f168:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d10b      	bne.n	800f188 <xTimerGenericCommand+0x30>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	623b      	str	r3, [r7, #32]
}
 800f182:	bf00      	nop
 800f184:	bf00      	nop
 800f186:	e7fd      	b.n	800f184 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f188:	4b19      	ldr	r3, [pc, #100]	@ (800f1f0 <xTimerGenericCommand+0x98>)
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	d02a      	beq.n	800f1e6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	2b05      	cmp	r3, #5
 800f1a0:	dc18      	bgt.n	800f1d4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f1a2:	f7ff fdcb 	bl	800ed3c <xTaskGetSchedulerState>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	d109      	bne.n	800f1c0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f1ac:	4b10      	ldr	r3, [pc, #64]	@ (800f1f0 <xTimerGenericCommand+0x98>)
 800f1ae:	6818      	ldr	r0, [r3, #0]
 800f1b0:	f107 0110 	add.w	r1, r7, #16
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1b8:	f7fe fa7e 	bl	800d6b8 <xQueueGenericSend>
 800f1bc:	6278      	str	r0, [r7, #36]	@ 0x24
 800f1be:	e012      	b.n	800f1e6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1c0:	4b0b      	ldr	r3, [pc, #44]	@ (800f1f0 <xTimerGenericCommand+0x98>)
 800f1c2:	6818      	ldr	r0, [r3, #0]
 800f1c4:	f107 0110 	add.w	r1, r7, #16
 800f1c8:	2300      	movs	r3, #0
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f7fe fa74 	bl	800d6b8 <xQueueGenericSend>
 800f1d0:	6278      	str	r0, [r7, #36]	@ 0x24
 800f1d2:	e008      	b.n	800f1e6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1d4:	4b06      	ldr	r3, [pc, #24]	@ (800f1f0 <xTimerGenericCommand+0x98>)
 800f1d6:	6818      	ldr	r0, [r3, #0]
 800f1d8:	f107 0110 	add.w	r1, r7, #16
 800f1dc:	2300      	movs	r3, #0
 800f1de:	683a      	ldr	r2, [r7, #0]
 800f1e0:	f7fe fb6c 	bl	800d8bc <xQueueGenericSendFromISR>
 800f1e4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3728      	adds	r7, #40	@ 0x28
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	bd80      	pop	{r7, pc}
 800f1f0:	20001cd0 	.word	0x20001cd0

0800f1f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b088      	sub	sp, #32
 800f1f8:	af02      	add	r7, sp, #8
 800f1fa:	6078      	str	r0, [r7, #4]
 800f1fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1fe:	4b23      	ldr	r3, [pc, #140]	@ (800f28c <prvProcessExpiredTimer+0x98>)
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	68db      	ldr	r3, [r3, #12]
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f208:	697b      	ldr	r3, [r7, #20]
 800f20a:	3304      	adds	r3, #4
 800f20c:	4618      	mov	r0, r3
 800f20e:	f7fe f91f 	bl	800d450 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f212:	697b      	ldr	r3, [r7, #20]
 800f214:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f218:	f003 0304 	and.w	r3, r3, #4
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d023      	beq.n	800f268 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	699a      	ldr	r2, [r3, #24]
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	18d1      	adds	r1, r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	683a      	ldr	r2, [r7, #0]
 800f22c:	6978      	ldr	r0, [r7, #20]
 800f22e:	f000 f8d5 	bl	800f3dc <prvInsertTimerInActiveList>
 800f232:	4603      	mov	r3, r0
 800f234:	2b00      	cmp	r3, #0
 800f236:	d020      	beq.n	800f27a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f238:	2300      	movs	r3, #0
 800f23a:	9300      	str	r3, [sp, #0]
 800f23c:	2300      	movs	r3, #0
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	2100      	movs	r1, #0
 800f242:	6978      	ldr	r0, [r7, #20]
 800f244:	f7ff ff88 	bl	800f158 <xTimerGenericCommand>
 800f248:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d114      	bne.n	800f27a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f254:	f383 8811 	msr	BASEPRI, r3
 800f258:	f3bf 8f6f 	isb	sy
 800f25c:	f3bf 8f4f 	dsb	sy
 800f260:	60fb      	str	r3, [r7, #12]
}
 800f262:	bf00      	nop
 800f264:	bf00      	nop
 800f266:	e7fd      	b.n	800f264 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f26e:	f023 0301 	bic.w	r3, r3, #1
 800f272:	b2da      	uxtb	r2, r3
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	6a1b      	ldr	r3, [r3, #32]
 800f27e:	6978      	ldr	r0, [r7, #20]
 800f280:	4798      	blx	r3
}
 800f282:	bf00      	nop
 800f284:	3718      	adds	r7, #24
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}
 800f28a:	bf00      	nop
 800f28c:	20001cc8 	.word	0x20001cc8

0800f290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b084      	sub	sp, #16
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f298:	f107 0308 	add.w	r3, r7, #8
 800f29c:	4618      	mov	r0, r3
 800f29e:	f000 f859 	bl	800f354 <prvGetNextExpireTime>
 800f2a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f2a4:	68bb      	ldr	r3, [r7, #8]
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	68f8      	ldr	r0, [r7, #12]
 800f2aa:	f000 f805 	bl	800f2b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f2ae:	f000 f8d7 	bl	800f460 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f2b2:	bf00      	nop
 800f2b4:	e7f0      	b.n	800f298 <prvTimerTask+0x8>
	...

0800f2b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b084      	sub	sp, #16
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f2c2:	f7ff f84d 	bl	800e360 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2c6:	f107 0308 	add.w	r3, r7, #8
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	f000 f866 	bl	800f39c <prvSampleTimeNow>
 800f2d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d130      	bne.n	800f33a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2d8:	683b      	ldr	r3, [r7, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d10a      	bne.n	800f2f4 <prvProcessTimerOrBlockTask+0x3c>
 800f2de:	687a      	ldr	r2, [r7, #4]
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	429a      	cmp	r2, r3
 800f2e4:	d806      	bhi.n	800f2f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2e6:	f7ff f849 	bl	800e37c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2ea:	68f9      	ldr	r1, [r7, #12]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f7ff ff81 	bl	800f1f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2f2:	e024      	b.n	800f33e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2f4:	683b      	ldr	r3, [r7, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d008      	beq.n	800f30c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2fa:	4b13      	ldr	r3, [pc, #76]	@ (800f348 <prvProcessTimerOrBlockTask+0x90>)
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d101      	bne.n	800f308 <prvProcessTimerOrBlockTask+0x50>
 800f304:	2301      	movs	r3, #1
 800f306:	e000      	b.n	800f30a <prvProcessTimerOrBlockTask+0x52>
 800f308:	2300      	movs	r3, #0
 800f30a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f30c:	4b0f      	ldr	r3, [pc, #60]	@ (800f34c <prvProcessTimerOrBlockTask+0x94>)
 800f30e:	6818      	ldr	r0, [r3, #0]
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	683a      	ldr	r2, [r7, #0]
 800f318:	4619      	mov	r1, r3
 800f31a:	f7fe fd89 	bl	800de30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f31e:	f7ff f82d 	bl	800e37c <xTaskResumeAll>
 800f322:	4603      	mov	r3, r0
 800f324:	2b00      	cmp	r3, #0
 800f326:	d10a      	bne.n	800f33e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f328:	4b09      	ldr	r3, [pc, #36]	@ (800f350 <prvProcessTimerOrBlockTask+0x98>)
 800f32a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f32e:	601a      	str	r2, [r3, #0]
 800f330:	f3bf 8f4f 	dsb	sy
 800f334:	f3bf 8f6f 	isb	sy
}
 800f338:	e001      	b.n	800f33e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f33a:	f7ff f81f 	bl	800e37c <xTaskResumeAll>
}
 800f33e:	bf00      	nop
 800f340:	3710      	adds	r7, #16
 800f342:	46bd      	mov	sp, r7
 800f344:	bd80      	pop	{r7, pc}
 800f346:	bf00      	nop
 800f348:	20001ccc 	.word	0x20001ccc
 800f34c:	20001cd0 	.word	0x20001cd0
 800f350:	e000ed04 	.word	0xe000ed04

0800f354 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f354:	b480      	push	{r7}
 800f356:	b085      	sub	sp, #20
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f35c:	4b0e      	ldr	r3, [pc, #56]	@ (800f398 <prvGetNextExpireTime+0x44>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d101      	bne.n	800f36a <prvGetNextExpireTime+0x16>
 800f366:	2201      	movs	r2, #1
 800f368:	e000      	b.n	800f36c <prvGetNextExpireTime+0x18>
 800f36a:	2200      	movs	r2, #0
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d105      	bne.n	800f384 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f378:	4b07      	ldr	r3, [pc, #28]	@ (800f398 <prvGetNextExpireTime+0x44>)
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	60fb      	str	r3, [r7, #12]
 800f382:	e001      	b.n	800f388 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f384:	2300      	movs	r3, #0
 800f386:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f388:	68fb      	ldr	r3, [r7, #12]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3714      	adds	r7, #20
 800f38e:	46bd      	mov	sp, r7
 800f390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f394:	4770      	bx	lr
 800f396:	bf00      	nop
 800f398:	20001cc8 	.word	0x20001cc8

0800f39c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b084      	sub	sp, #16
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f3a4:	f7ff f888 	bl	800e4b8 <xTaskGetTickCount>
 800f3a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800f3d8 <prvSampleTimeNow+0x3c>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	68fa      	ldr	r2, [r7, #12]
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	d205      	bcs.n	800f3c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f3b4:	f000 f93a 	bl	800f62c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	2201      	movs	r2, #1
 800f3bc:	601a      	str	r2, [r3, #0]
 800f3be:	e002      	b.n	800f3c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f3c6:	4a04      	ldr	r2, [pc, #16]	@ (800f3d8 <prvSampleTimeNow+0x3c>)
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3710      	adds	r7, #16
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	20001cd8 	.word	0x20001cd8

0800f3dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b086      	sub	sp, #24
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	60f8      	str	r0, [r7, #12]
 800f3e4:	60b9      	str	r1, [r7, #8]
 800f3e6:	607a      	str	r2, [r7, #4]
 800f3e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	68ba      	ldr	r2, [r7, #8]
 800f3f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	68fa      	ldr	r2, [r7, #12]
 800f3f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	429a      	cmp	r2, r3
 800f400:	d812      	bhi.n	800f428 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	1ad2      	subs	r2, r2, r3
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	699b      	ldr	r3, [r3, #24]
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d302      	bcc.n	800f416 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f410:	2301      	movs	r3, #1
 800f412:	617b      	str	r3, [r7, #20]
 800f414:	e01b      	b.n	800f44e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f416:	4b10      	ldr	r3, [pc, #64]	@ (800f458 <prvInsertTimerInActiveList+0x7c>)
 800f418:	681a      	ldr	r2, [r3, #0]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	3304      	adds	r3, #4
 800f41e:	4619      	mov	r1, r3
 800f420:	4610      	mov	r0, r2
 800f422:	f7fd ffdc 	bl	800d3de <vListInsert>
 800f426:	e012      	b.n	800f44e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f428:	687a      	ldr	r2, [r7, #4]
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	429a      	cmp	r2, r3
 800f42e:	d206      	bcs.n	800f43e <prvInsertTimerInActiveList+0x62>
 800f430:	68ba      	ldr	r2, [r7, #8]
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	429a      	cmp	r2, r3
 800f436:	d302      	bcc.n	800f43e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f438:	2301      	movs	r3, #1
 800f43a:	617b      	str	r3, [r7, #20]
 800f43c:	e007      	b.n	800f44e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f43e:	4b07      	ldr	r3, [pc, #28]	@ (800f45c <prvInsertTimerInActiveList+0x80>)
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	3304      	adds	r3, #4
 800f446:	4619      	mov	r1, r3
 800f448:	4610      	mov	r0, r2
 800f44a:	f7fd ffc8 	bl	800d3de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f44e:	697b      	ldr	r3, [r7, #20]
}
 800f450:	4618      	mov	r0, r3
 800f452:	3718      	adds	r7, #24
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}
 800f458:	20001ccc 	.word	0x20001ccc
 800f45c:	20001cc8 	.word	0x20001cc8

0800f460 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b08e      	sub	sp, #56	@ 0x38
 800f464:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f466:	e0ce      	b.n	800f606 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	da19      	bge.n	800f4a2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f46e:	1d3b      	adds	r3, r7, #4
 800f470:	3304      	adds	r3, #4
 800f472:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f476:	2b00      	cmp	r3, #0
 800f478:	d10b      	bne.n	800f492 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f47a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f47e:	f383 8811 	msr	BASEPRI, r3
 800f482:	f3bf 8f6f 	isb	sy
 800f486:	f3bf 8f4f 	dsb	sy
 800f48a:	61fb      	str	r3, [r7, #28]
}
 800f48c:	bf00      	nop
 800f48e:	bf00      	nop
 800f490:	e7fd      	b.n	800f48e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f498:	6850      	ldr	r0, [r2, #4]
 800f49a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f49c:	6892      	ldr	r2, [r2, #8]
 800f49e:	4611      	mov	r1, r2
 800f4a0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f2c0 80ae 	blt.w	800f606 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f4ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b0:	695b      	ldr	r3, [r3, #20]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d004      	beq.n	800f4c0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4b8:	3304      	adds	r3, #4
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fd ffc8 	bl	800d450 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4c0:	463b      	mov	r3, r7
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7ff ff6a 	bl	800f39c <prvSampleTimeNow>
 800f4c8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2b09      	cmp	r3, #9
 800f4ce:	f200 8097 	bhi.w	800f600 <prvProcessReceivedCommands+0x1a0>
 800f4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800f4d8 <prvProcessReceivedCommands+0x78>)
 800f4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d8:	0800f501 	.word	0x0800f501
 800f4dc:	0800f501 	.word	0x0800f501
 800f4e0:	0800f501 	.word	0x0800f501
 800f4e4:	0800f577 	.word	0x0800f577
 800f4e8:	0800f58b 	.word	0x0800f58b
 800f4ec:	0800f5d7 	.word	0x0800f5d7
 800f4f0:	0800f501 	.word	0x0800f501
 800f4f4:	0800f501 	.word	0x0800f501
 800f4f8:	0800f577 	.word	0x0800f577
 800f4fc:	0800f58b 	.word	0x0800f58b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f502:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f506:	f043 0301 	orr.w	r3, r3, #1
 800f50a:	b2da      	uxtb	r2, r3
 800f50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f50e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f512:	68ba      	ldr	r2, [r7, #8]
 800f514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f516:	699b      	ldr	r3, [r3, #24]
 800f518:	18d1      	adds	r1, r2, r3
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f51e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f520:	f7ff ff5c 	bl	800f3dc <prvInsertTimerInActiveList>
 800f524:	4603      	mov	r3, r0
 800f526:	2b00      	cmp	r3, #0
 800f528:	d06c      	beq.n	800f604 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f52c:	6a1b      	ldr	r3, [r3, #32]
 800f52e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f530:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f534:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f538:	f003 0304 	and.w	r3, r3, #4
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d061      	beq.n	800f604 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f540:	68ba      	ldr	r2, [r7, #8]
 800f542:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f544:	699b      	ldr	r3, [r3, #24]
 800f546:	441a      	add	r2, r3
 800f548:	2300      	movs	r3, #0
 800f54a:	9300      	str	r3, [sp, #0]
 800f54c:	2300      	movs	r3, #0
 800f54e:	2100      	movs	r1, #0
 800f550:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f552:	f7ff fe01 	bl	800f158 <xTimerGenericCommand>
 800f556:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f558:	6a3b      	ldr	r3, [r7, #32]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d152      	bne.n	800f604 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f55e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f562:	f383 8811 	msr	BASEPRI, r3
 800f566:	f3bf 8f6f 	isb	sy
 800f56a:	f3bf 8f4f 	dsb	sy
 800f56e:	61bb      	str	r3, [r7, #24]
}
 800f570:	bf00      	nop
 800f572:	bf00      	nop
 800f574:	e7fd      	b.n	800f572 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f578:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f57c:	f023 0301 	bic.w	r3, r3, #1
 800f580:	b2da      	uxtb	r2, r3
 800f582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f584:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f588:	e03d      	b.n	800f606 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f58c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f590:	f043 0301 	orr.w	r3, r3, #1
 800f594:	b2da      	uxtb	r2, r3
 800f596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f598:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f59c:	68ba      	ldr	r2, [r7, #8]
 800f59e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5a0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f5a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5a4:	699b      	ldr	r3, [r3, #24]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d10b      	bne.n	800f5c2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f5ae:	f383 8811 	msr	BASEPRI, r3
 800f5b2:	f3bf 8f6f 	isb	sy
 800f5b6:	f3bf 8f4f 	dsb	sy
 800f5ba:	617b      	str	r3, [r7, #20]
}
 800f5bc:	bf00      	nop
 800f5be:	bf00      	nop
 800f5c0:	e7fd      	b.n	800f5be <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f5c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5c4:	699a      	ldr	r2, [r3, #24]
 800f5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5c8:	18d1      	adds	r1, r2, r3
 800f5ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5d0:	f7ff ff04 	bl	800f3dc <prvInsertTimerInActiveList>
					break;
 800f5d4:	e017      	b.n	800f606 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f5d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5dc:	f003 0302 	and.w	r3, r3, #2
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d103      	bne.n	800f5ec <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f5e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f5e6:	f000 fbe7 	bl	800fdb8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5ea:	e00c      	b.n	800f606 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f5f2:	f023 0301 	bic.w	r3, r3, #1
 800f5f6:	b2da      	uxtb	r2, r3
 800f5f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f5fe:	e002      	b.n	800f606 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f600:	bf00      	nop
 800f602:	e000      	b.n	800f606 <prvProcessReceivedCommands+0x1a6>
					break;
 800f604:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f606:	4b08      	ldr	r3, [pc, #32]	@ (800f628 <prvProcessReceivedCommands+0x1c8>)
 800f608:	681b      	ldr	r3, [r3, #0]
 800f60a:	1d39      	adds	r1, r7, #4
 800f60c:	2200      	movs	r2, #0
 800f60e:	4618      	mov	r0, r3
 800f610:	f7fe f9f2 	bl	800d9f8 <xQueueReceive>
 800f614:	4603      	mov	r3, r0
 800f616:	2b00      	cmp	r3, #0
 800f618:	f47f af26 	bne.w	800f468 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f61c:	bf00      	nop
 800f61e:	bf00      	nop
 800f620:	3730      	adds	r7, #48	@ 0x30
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	20001cd0 	.word	0x20001cd0

0800f62c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b088      	sub	sp, #32
 800f630:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f632:	e049      	b.n	800f6c8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f634:	4b2e      	ldr	r3, [pc, #184]	@ (800f6f0 <prvSwitchTimerLists+0xc4>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f63e:	4b2c      	ldr	r3, [pc, #176]	@ (800f6f0 <prvSwitchTimerLists+0xc4>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	68db      	ldr	r3, [r3, #12]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	3304      	adds	r3, #4
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fd feff 	bl	800d450 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	6a1b      	ldr	r3, [r3, #32]
 800f656:	68f8      	ldr	r0, [r7, #12]
 800f658:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f660:	f003 0304 	and.w	r3, r3, #4
 800f664:	2b00      	cmp	r3, #0
 800f666:	d02f      	beq.n	800f6c8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	699b      	ldr	r3, [r3, #24]
 800f66c:	693a      	ldr	r2, [r7, #16]
 800f66e:	4413      	add	r3, r2
 800f670:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f672:	68ba      	ldr	r2, [r7, #8]
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	429a      	cmp	r2, r3
 800f678:	d90e      	bls.n	800f698 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	68ba      	ldr	r2, [r7, #8]
 800f67e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f686:	4b1a      	ldr	r3, [pc, #104]	@ (800f6f0 <prvSwitchTimerLists+0xc4>)
 800f688:	681a      	ldr	r2, [r3, #0]
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	3304      	adds	r3, #4
 800f68e:	4619      	mov	r1, r3
 800f690:	4610      	mov	r0, r2
 800f692:	f7fd fea4 	bl	800d3de <vListInsert>
 800f696:	e017      	b.n	800f6c8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f698:	2300      	movs	r3, #0
 800f69a:	9300      	str	r3, [sp, #0]
 800f69c:	2300      	movs	r3, #0
 800f69e:	693a      	ldr	r2, [r7, #16]
 800f6a0:	2100      	movs	r1, #0
 800f6a2:	68f8      	ldr	r0, [r7, #12]
 800f6a4:	f7ff fd58 	bl	800f158 <xTimerGenericCommand>
 800f6a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d10b      	bne.n	800f6c8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6b4:	f383 8811 	msr	BASEPRI, r3
 800f6b8:	f3bf 8f6f 	isb	sy
 800f6bc:	f3bf 8f4f 	dsb	sy
 800f6c0:	603b      	str	r3, [r7, #0]
}
 800f6c2:	bf00      	nop
 800f6c4:	bf00      	nop
 800f6c6:	e7fd      	b.n	800f6c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6c8:	4b09      	ldr	r3, [pc, #36]	@ (800f6f0 <prvSwitchTimerLists+0xc4>)
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1b0      	bne.n	800f634 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f6d2:	4b07      	ldr	r3, [pc, #28]	@ (800f6f0 <prvSwitchTimerLists+0xc4>)
 800f6d4:	681b      	ldr	r3, [r3, #0]
 800f6d6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f6d8:	4b06      	ldr	r3, [pc, #24]	@ (800f6f4 <prvSwitchTimerLists+0xc8>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	4a04      	ldr	r2, [pc, #16]	@ (800f6f0 <prvSwitchTimerLists+0xc4>)
 800f6de:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f6e0:	4a04      	ldr	r2, [pc, #16]	@ (800f6f4 <prvSwitchTimerLists+0xc8>)
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	6013      	str	r3, [r2, #0]
}
 800f6e6:	bf00      	nop
 800f6e8:	3718      	adds	r7, #24
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd80      	pop	{r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	20001cc8 	.word	0x20001cc8
 800f6f4:	20001ccc 	.word	0x20001ccc

0800f6f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6f8:	b580      	push	{r7, lr}
 800f6fa:	b082      	sub	sp, #8
 800f6fc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6fe:	f000 f96b 	bl	800f9d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f702:	4b15      	ldr	r3, [pc, #84]	@ (800f758 <prvCheckForValidListAndQueue+0x60>)
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d120      	bne.n	800f74c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f70a:	4814      	ldr	r0, [pc, #80]	@ (800f75c <prvCheckForValidListAndQueue+0x64>)
 800f70c:	f7fd fe16 	bl	800d33c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f710:	4813      	ldr	r0, [pc, #76]	@ (800f760 <prvCheckForValidListAndQueue+0x68>)
 800f712:	f7fd fe13 	bl	800d33c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f716:	4b13      	ldr	r3, [pc, #76]	@ (800f764 <prvCheckForValidListAndQueue+0x6c>)
 800f718:	4a10      	ldr	r2, [pc, #64]	@ (800f75c <prvCheckForValidListAndQueue+0x64>)
 800f71a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f71c:	4b12      	ldr	r3, [pc, #72]	@ (800f768 <prvCheckForValidListAndQueue+0x70>)
 800f71e:	4a10      	ldr	r2, [pc, #64]	@ (800f760 <prvCheckForValidListAndQueue+0x68>)
 800f720:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f722:	2300      	movs	r3, #0
 800f724:	9300      	str	r3, [sp, #0]
 800f726:	4b11      	ldr	r3, [pc, #68]	@ (800f76c <prvCheckForValidListAndQueue+0x74>)
 800f728:	4a11      	ldr	r2, [pc, #68]	@ (800f770 <prvCheckForValidListAndQueue+0x78>)
 800f72a:	2110      	movs	r1, #16
 800f72c:	200a      	movs	r0, #10
 800f72e:	f7fd ff23 	bl	800d578 <xQueueGenericCreateStatic>
 800f732:	4603      	mov	r3, r0
 800f734:	4a08      	ldr	r2, [pc, #32]	@ (800f758 <prvCheckForValidListAndQueue+0x60>)
 800f736:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f738:	4b07      	ldr	r3, [pc, #28]	@ (800f758 <prvCheckForValidListAndQueue+0x60>)
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d005      	beq.n	800f74c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f740:	4b05      	ldr	r3, [pc, #20]	@ (800f758 <prvCheckForValidListAndQueue+0x60>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	490b      	ldr	r1, [pc, #44]	@ (800f774 <prvCheckForValidListAndQueue+0x7c>)
 800f746:	4618      	mov	r0, r3
 800f748:	f7fe fb48 	bl	800dddc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f74c:	f000 f976 	bl	800fa3c <vPortExitCritical>
}
 800f750:	bf00      	nop
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	20001cd0 	.word	0x20001cd0
 800f75c:	20001ca0 	.word	0x20001ca0
 800f760:	20001cb4 	.word	0x20001cb4
 800f764:	20001cc8 	.word	0x20001cc8
 800f768:	20001ccc 	.word	0x20001ccc
 800f76c:	20001d7c 	.word	0x20001d7c
 800f770:	20001cdc 	.word	0x20001cdc
 800f774:	08011cc4 	.word	0x08011cc4

0800f778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f778:	b480      	push	{r7}
 800f77a:	b085      	sub	sp, #20
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	3b04      	subs	r3, #4
 800f788:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800f790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	3b04      	subs	r3, #4
 800f796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f798:	68bb      	ldr	r3, [r7, #8]
 800f79a:	f023 0201 	bic.w	r2, r3, #1
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7a2:	68fb      	ldr	r3, [r7, #12]
 800f7a4:	3b04      	subs	r3, #4
 800f7a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f7a8:	4a0c      	ldr	r2, [pc, #48]	@ (800f7dc <pxPortInitialiseStack+0x64>)
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	3b14      	subs	r3, #20
 800f7b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	3b04      	subs	r3, #4
 800f7be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f06f 0202 	mvn.w	r2, #2
 800f7c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	3b20      	subs	r3, #32
 800f7cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3714      	adds	r7, #20
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7da:	4770      	bx	lr
 800f7dc:	0800f7e1 	.word	0x0800f7e1

0800f7e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f7ea:	4b13      	ldr	r3, [pc, #76]	@ (800f838 <prvTaskExitError+0x58>)
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800f7f2:	d00b      	beq.n	800f80c <prvTaskExitError+0x2c>
	__asm volatile
 800f7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7f8:	f383 8811 	msr	BASEPRI, r3
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	f3bf 8f4f 	dsb	sy
 800f804:	60fb      	str	r3, [r7, #12]
}
 800f806:	bf00      	nop
 800f808:	bf00      	nop
 800f80a:	e7fd      	b.n	800f808 <prvTaskExitError+0x28>
	__asm volatile
 800f80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f810:	f383 8811 	msr	BASEPRI, r3
 800f814:	f3bf 8f6f 	isb	sy
 800f818:	f3bf 8f4f 	dsb	sy
 800f81c:	60bb      	str	r3, [r7, #8]
}
 800f81e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f820:	bf00      	nop
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d0fc      	beq.n	800f822 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f828:	bf00      	nop
 800f82a:	bf00      	nop
 800f82c:	3714      	adds	r7, #20
 800f82e:	46bd      	mov	sp, r7
 800f830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f834:	4770      	bx	lr
 800f836:	bf00      	nop
 800f838:	200001fc 	.word	0x200001fc
 800f83c:	00000000 	.word	0x00000000

0800f840 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f840:	4b07      	ldr	r3, [pc, #28]	@ (800f860 <pxCurrentTCBConst2>)
 800f842:	6819      	ldr	r1, [r3, #0]
 800f844:	6808      	ldr	r0, [r1, #0]
 800f846:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f84a:	f380 8809 	msr	PSP, r0
 800f84e:	f3bf 8f6f 	isb	sy
 800f852:	f04f 0000 	mov.w	r0, #0
 800f856:	f380 8811 	msr	BASEPRI, r0
 800f85a:	4770      	bx	lr
 800f85c:	f3af 8000 	nop.w

0800f860 <pxCurrentTCBConst2>:
 800f860:	200017a0 	.word	0x200017a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f864:	bf00      	nop
 800f866:	bf00      	nop

0800f868 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f868:	4808      	ldr	r0, [pc, #32]	@ (800f88c <prvPortStartFirstTask+0x24>)
 800f86a:	6800      	ldr	r0, [r0, #0]
 800f86c:	6800      	ldr	r0, [r0, #0]
 800f86e:	f380 8808 	msr	MSP, r0
 800f872:	f04f 0000 	mov.w	r0, #0
 800f876:	f380 8814 	msr	CONTROL, r0
 800f87a:	b662      	cpsie	i
 800f87c:	b661      	cpsie	f
 800f87e:	f3bf 8f4f 	dsb	sy
 800f882:	f3bf 8f6f 	isb	sy
 800f886:	df00      	svc	0
 800f888:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f88a:	bf00      	nop
 800f88c:	e000ed08 	.word	0xe000ed08

0800f890 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b086      	sub	sp, #24
 800f894:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f896:	4b47      	ldr	r3, [pc, #284]	@ (800f9b4 <xPortStartScheduler+0x124>)
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4a47      	ldr	r2, [pc, #284]	@ (800f9b8 <xPortStartScheduler+0x128>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d10b      	bne.n	800f8b8 <xPortStartScheduler+0x28>
	__asm volatile
 800f8a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8a4:	f383 8811 	msr	BASEPRI, r3
 800f8a8:	f3bf 8f6f 	isb	sy
 800f8ac:	f3bf 8f4f 	dsb	sy
 800f8b0:	613b      	str	r3, [r7, #16]
}
 800f8b2:	bf00      	nop
 800f8b4:	bf00      	nop
 800f8b6:	e7fd      	b.n	800f8b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f8b8:	4b3e      	ldr	r3, [pc, #248]	@ (800f9b4 <xPortStartScheduler+0x124>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4a3f      	ldr	r2, [pc, #252]	@ (800f9bc <xPortStartScheduler+0x12c>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d10b      	bne.n	800f8da <xPortStartScheduler+0x4a>
	__asm volatile
 800f8c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8c6:	f383 8811 	msr	BASEPRI, r3
 800f8ca:	f3bf 8f6f 	isb	sy
 800f8ce:	f3bf 8f4f 	dsb	sy
 800f8d2:	60fb      	str	r3, [r7, #12]
}
 800f8d4:	bf00      	nop
 800f8d6:	bf00      	nop
 800f8d8:	e7fd      	b.n	800f8d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f8da:	4b39      	ldr	r3, [pc, #228]	@ (800f9c0 <xPortStartScheduler+0x130>)
 800f8dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	22ff      	movs	r2, #255	@ 0xff
 800f8ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	781b      	ldrb	r3, [r3, #0]
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f8f4:	78fb      	ldrb	r3, [r7, #3]
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800f8fc:	b2da      	uxtb	r2, r3
 800f8fe:	4b31      	ldr	r3, [pc, #196]	@ (800f9c4 <xPortStartScheduler+0x134>)
 800f900:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f902:	4b31      	ldr	r3, [pc, #196]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f904:	2207      	movs	r2, #7
 800f906:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f908:	e009      	b.n	800f91e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800f90a:	4b2f      	ldr	r3, [pc, #188]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	3b01      	subs	r3, #1
 800f910:	4a2d      	ldr	r2, [pc, #180]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f912:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f914:	78fb      	ldrb	r3, [r7, #3]
 800f916:	b2db      	uxtb	r3, r3
 800f918:	005b      	lsls	r3, r3, #1
 800f91a:	b2db      	uxtb	r3, r3
 800f91c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f91e:	78fb      	ldrb	r3, [r7, #3]
 800f920:	b2db      	uxtb	r3, r3
 800f922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f926:	2b80      	cmp	r3, #128	@ 0x80
 800f928:	d0ef      	beq.n	800f90a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f92a:	4b27      	ldr	r3, [pc, #156]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	f1c3 0307 	rsb	r3, r3, #7
 800f932:	2b04      	cmp	r3, #4
 800f934:	d00b      	beq.n	800f94e <xPortStartScheduler+0xbe>
	__asm volatile
 800f936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f93a:	f383 8811 	msr	BASEPRI, r3
 800f93e:	f3bf 8f6f 	isb	sy
 800f942:	f3bf 8f4f 	dsb	sy
 800f946:	60bb      	str	r3, [r7, #8]
}
 800f948:	bf00      	nop
 800f94a:	bf00      	nop
 800f94c:	e7fd      	b.n	800f94a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f94e:	4b1e      	ldr	r3, [pc, #120]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	021b      	lsls	r3, r3, #8
 800f954:	4a1c      	ldr	r2, [pc, #112]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f958:	4b1b      	ldr	r3, [pc, #108]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800f960:	4a19      	ldr	r2, [pc, #100]	@ (800f9c8 <xPortStartScheduler+0x138>)
 800f962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	b2da      	uxtb	r2, r3
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f96c:	4b17      	ldr	r3, [pc, #92]	@ (800f9cc <xPortStartScheduler+0x13c>)
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4a16      	ldr	r2, [pc, #88]	@ (800f9cc <xPortStartScheduler+0x13c>)
 800f972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800f976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f978:	4b14      	ldr	r3, [pc, #80]	@ (800f9cc <xPortStartScheduler+0x13c>)
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	4a13      	ldr	r2, [pc, #76]	@ (800f9cc <xPortStartScheduler+0x13c>)
 800f97e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800f982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f984:	f000 f8da 	bl	800fb3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f988:	4b11      	ldr	r3, [pc, #68]	@ (800f9d0 <xPortStartScheduler+0x140>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f98e:	f000 f8f9 	bl	800fb84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f992:	4b10      	ldr	r3, [pc, #64]	@ (800f9d4 <xPortStartScheduler+0x144>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4a0f      	ldr	r2, [pc, #60]	@ (800f9d4 <xPortStartScheduler+0x144>)
 800f998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800f99c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f99e:	f7ff ff63 	bl	800f868 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f9a2:	f7fe ff4d 	bl	800e840 <vTaskSwitchContext>
	prvTaskExitError();
 800f9a6:	f7ff ff1b 	bl	800f7e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f9aa:	2300      	movs	r3, #0
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3718      	adds	r7, #24
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	e000ed00 	.word	0xe000ed00
 800f9b8:	410fc271 	.word	0x410fc271
 800f9bc:	410fc270 	.word	0x410fc270
 800f9c0:	e000e400 	.word	0xe000e400
 800f9c4:	20001dcc 	.word	0x20001dcc
 800f9c8:	20001dd0 	.word	0x20001dd0
 800f9cc:	e000ed20 	.word	0xe000ed20
 800f9d0:	200001fc 	.word	0x200001fc
 800f9d4:	e000ef34 	.word	0xe000ef34

0800f9d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f9de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9e2:	f383 8811 	msr	BASEPRI, r3
 800f9e6:	f3bf 8f6f 	isb	sy
 800f9ea:	f3bf 8f4f 	dsb	sy
 800f9ee:	607b      	str	r3, [r7, #4]
}
 800f9f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f9f2:	4b10      	ldr	r3, [pc, #64]	@ (800fa34 <vPortEnterCritical+0x5c>)
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	4a0e      	ldr	r2, [pc, #56]	@ (800fa34 <vPortEnterCritical+0x5c>)
 800f9fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f9fc:	4b0d      	ldr	r3, [pc, #52]	@ (800fa34 <vPortEnterCritical+0x5c>)
 800f9fe:	681b      	ldr	r3, [r3, #0]
 800fa00:	2b01      	cmp	r3, #1
 800fa02:	d110      	bne.n	800fa26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa04:	4b0c      	ldr	r3, [pc, #48]	@ (800fa38 <vPortEnterCritical+0x60>)
 800fa06:	681b      	ldr	r3, [r3, #0]
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d00b      	beq.n	800fa26 <vPortEnterCritical+0x4e>
	__asm volatile
 800fa0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa12:	f383 8811 	msr	BASEPRI, r3
 800fa16:	f3bf 8f6f 	isb	sy
 800fa1a:	f3bf 8f4f 	dsb	sy
 800fa1e:	603b      	str	r3, [r7, #0]
}
 800fa20:	bf00      	nop
 800fa22:	bf00      	nop
 800fa24:	e7fd      	b.n	800fa22 <vPortEnterCritical+0x4a>
	}
}
 800fa26:	bf00      	nop
 800fa28:	370c      	adds	r7, #12
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa30:	4770      	bx	lr
 800fa32:	bf00      	nop
 800fa34:	200001fc 	.word	0x200001fc
 800fa38:	e000ed04 	.word	0xe000ed04

0800fa3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa3c:	b480      	push	{r7}
 800fa3e:	b083      	sub	sp, #12
 800fa40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa42:	4b12      	ldr	r3, [pc, #72]	@ (800fa8c <vPortExitCritical+0x50>)
 800fa44:	681b      	ldr	r3, [r3, #0]
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d10b      	bne.n	800fa62 <vPortExitCritical+0x26>
	__asm volatile
 800fa4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa4e:	f383 8811 	msr	BASEPRI, r3
 800fa52:	f3bf 8f6f 	isb	sy
 800fa56:	f3bf 8f4f 	dsb	sy
 800fa5a:	607b      	str	r3, [r7, #4]
}
 800fa5c:	bf00      	nop
 800fa5e:	bf00      	nop
 800fa60:	e7fd      	b.n	800fa5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fa62:	4b0a      	ldr	r3, [pc, #40]	@ (800fa8c <vPortExitCritical+0x50>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	3b01      	subs	r3, #1
 800fa68:	4a08      	ldr	r2, [pc, #32]	@ (800fa8c <vPortExitCritical+0x50>)
 800fa6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa6c:	4b07      	ldr	r3, [pc, #28]	@ (800fa8c <vPortExitCritical+0x50>)
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d105      	bne.n	800fa80 <vPortExitCritical+0x44>
 800fa74:	2300      	movs	r3, #0
 800fa76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa78:	683b      	ldr	r3, [r7, #0]
 800fa7a:	f383 8811 	msr	BASEPRI, r3
}
 800fa7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa80:	bf00      	nop
 800fa82:	370c      	adds	r7, #12
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	200001fc 	.word	0x200001fc

0800fa90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fa90:	f3ef 8009 	mrs	r0, PSP
 800fa94:	f3bf 8f6f 	isb	sy
 800fa98:	4b15      	ldr	r3, [pc, #84]	@ (800faf0 <pxCurrentTCBConst>)
 800fa9a:	681a      	ldr	r2, [r3, #0]
 800fa9c:	f01e 0f10 	tst.w	lr, #16
 800faa0:	bf08      	it	eq
 800faa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800faa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faaa:	6010      	str	r0, [r2, #0]
 800faac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800fab4:	f380 8811 	msr	BASEPRI, r0
 800fab8:	f3bf 8f4f 	dsb	sy
 800fabc:	f3bf 8f6f 	isb	sy
 800fac0:	f7fe febe 	bl	800e840 <vTaskSwitchContext>
 800fac4:	f04f 0000 	mov.w	r0, #0
 800fac8:	f380 8811 	msr	BASEPRI, r0
 800facc:	bc09      	pop	{r0, r3}
 800face:	6819      	ldr	r1, [r3, #0]
 800fad0:	6808      	ldr	r0, [r1, #0]
 800fad2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad6:	f01e 0f10 	tst.w	lr, #16
 800fada:	bf08      	it	eq
 800fadc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fae0:	f380 8809 	msr	PSP, r0
 800fae4:	f3bf 8f6f 	isb	sy
 800fae8:	4770      	bx	lr
 800faea:	bf00      	nop
 800faec:	f3af 8000 	nop.w

0800faf0 <pxCurrentTCBConst>:
 800faf0:	200017a0 	.word	0x200017a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800faf4:	bf00      	nop
 800faf6:	bf00      	nop

0800faf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
	__asm volatile
 800fafe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb02:	f383 8811 	msr	BASEPRI, r3
 800fb06:	f3bf 8f6f 	isb	sy
 800fb0a:	f3bf 8f4f 	dsb	sy
 800fb0e:	607b      	str	r3, [r7, #4]
}
 800fb10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb12:	f7fe fddb 	bl	800e6cc <xTaskIncrementTick>
 800fb16:	4603      	mov	r3, r0
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d003      	beq.n	800fb24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb1c:	4b06      	ldr	r3, [pc, #24]	@ (800fb38 <xPortSysTickHandler+0x40>)
 800fb1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fb22:	601a      	str	r2, [r3, #0]
 800fb24:	2300      	movs	r3, #0
 800fb26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb28:	683b      	ldr	r3, [r7, #0]
 800fb2a:	f383 8811 	msr	BASEPRI, r3
}
 800fb2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb30:	bf00      	nop
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	e000ed04 	.word	0xe000ed04

0800fb3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb40:	4b0b      	ldr	r3, [pc, #44]	@ (800fb70 <vPortSetupTimerInterrupt+0x34>)
 800fb42:	2200      	movs	r2, #0
 800fb44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb46:	4b0b      	ldr	r3, [pc, #44]	@ (800fb74 <vPortSetupTimerInterrupt+0x38>)
 800fb48:	2200      	movs	r2, #0
 800fb4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb78 <vPortSetupTimerInterrupt+0x3c>)
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	4a0a      	ldr	r2, [pc, #40]	@ (800fb7c <vPortSetupTimerInterrupt+0x40>)
 800fb52:	fba2 2303 	umull	r2, r3, r2, r3
 800fb56:	099b      	lsrs	r3, r3, #6
 800fb58:	4a09      	ldr	r2, [pc, #36]	@ (800fb80 <vPortSetupTimerInterrupt+0x44>)
 800fb5a:	3b01      	subs	r3, #1
 800fb5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb5e:	4b04      	ldr	r3, [pc, #16]	@ (800fb70 <vPortSetupTimerInterrupt+0x34>)
 800fb60:	2207      	movs	r2, #7
 800fb62:	601a      	str	r2, [r3, #0]
}
 800fb64:	bf00      	nop
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr
 800fb6e:	bf00      	nop
 800fb70:	e000e010 	.word	0xe000e010
 800fb74:	e000e018 	.word	0xe000e018
 800fb78:	200001f0 	.word	0x200001f0
 800fb7c:	10624dd3 	.word	0x10624dd3
 800fb80:	e000e014 	.word	0xe000e014

0800fb84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fb84:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800fb94 <vPortEnableVFP+0x10>
 800fb88:	6801      	ldr	r1, [r0, #0]
 800fb8a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800fb8e:	6001      	str	r1, [r0, #0]
 800fb90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fb92:	bf00      	nop
 800fb94:	e000ed88 	.word	0xe000ed88

0800fb98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fb98:	b480      	push	{r7}
 800fb9a:	b085      	sub	sp, #20
 800fb9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fb9e:	f3ef 8305 	mrs	r3, IPSR
 800fba2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	2b0f      	cmp	r3, #15
 800fba8:	d915      	bls.n	800fbd6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fbaa:	4a18      	ldr	r2, [pc, #96]	@ (800fc0c <vPortValidateInterruptPriority+0x74>)
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	4413      	add	r3, r2
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fbb4:	4b16      	ldr	r3, [pc, #88]	@ (800fc10 <vPortValidateInterruptPriority+0x78>)
 800fbb6:	781b      	ldrb	r3, [r3, #0]
 800fbb8:	7afa      	ldrb	r2, [r7, #11]
 800fbba:	429a      	cmp	r2, r3
 800fbbc:	d20b      	bcs.n	800fbd6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800fbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbc2:	f383 8811 	msr	BASEPRI, r3
 800fbc6:	f3bf 8f6f 	isb	sy
 800fbca:	f3bf 8f4f 	dsb	sy
 800fbce:	607b      	str	r3, [r7, #4]
}
 800fbd0:	bf00      	nop
 800fbd2:	bf00      	nop
 800fbd4:	e7fd      	b.n	800fbd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fbd6:	4b0f      	ldr	r3, [pc, #60]	@ (800fc14 <vPortValidateInterruptPriority+0x7c>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800fbde:	4b0e      	ldr	r3, [pc, #56]	@ (800fc18 <vPortValidateInterruptPriority+0x80>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	429a      	cmp	r2, r3
 800fbe4:	d90b      	bls.n	800fbfe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800fbe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fbea:	f383 8811 	msr	BASEPRI, r3
 800fbee:	f3bf 8f6f 	isb	sy
 800fbf2:	f3bf 8f4f 	dsb	sy
 800fbf6:	603b      	str	r3, [r7, #0]
}
 800fbf8:	bf00      	nop
 800fbfa:	bf00      	nop
 800fbfc:	e7fd      	b.n	800fbfa <vPortValidateInterruptPriority+0x62>
	}
 800fbfe:	bf00      	nop
 800fc00:	3714      	adds	r7, #20
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	e000e3f0 	.word	0xe000e3f0
 800fc10:	20001dcc 	.word	0x20001dcc
 800fc14:	e000ed0c 	.word	0xe000ed0c
 800fc18:	20001dd0 	.word	0x20001dd0

0800fc1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc1c:	b580      	push	{r7, lr}
 800fc1e:	b08a      	sub	sp, #40	@ 0x28
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc24:	2300      	movs	r3, #0
 800fc26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc28:	f7fe fb9a 	bl	800e360 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc2c:	4b5c      	ldr	r3, [pc, #368]	@ (800fda0 <pvPortMalloc+0x184>)
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d101      	bne.n	800fc38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc34:	f000 f924 	bl	800fe80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc38:	4b5a      	ldr	r3, [pc, #360]	@ (800fda4 <pvPortMalloc+0x188>)
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	4013      	ands	r3, r2
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	f040 8095 	bne.w	800fd70 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d01e      	beq.n	800fc8a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800fc4c:	2208      	movs	r2, #8
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	4413      	add	r3, r2
 800fc52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f003 0307 	and.w	r3, r3, #7
 800fc5a:	2b00      	cmp	r3, #0
 800fc5c:	d015      	beq.n	800fc8a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f023 0307 	bic.w	r3, r3, #7
 800fc64:	3308      	adds	r3, #8
 800fc66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f003 0307 	and.w	r3, r3, #7
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00b      	beq.n	800fc8a <pvPortMalloc+0x6e>
	__asm volatile
 800fc72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc76:	f383 8811 	msr	BASEPRI, r3
 800fc7a:	f3bf 8f6f 	isb	sy
 800fc7e:	f3bf 8f4f 	dsb	sy
 800fc82:	617b      	str	r3, [r7, #20]
}
 800fc84:	bf00      	nop
 800fc86:	bf00      	nop
 800fc88:	e7fd      	b.n	800fc86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d06f      	beq.n	800fd70 <pvPortMalloc+0x154>
 800fc90:	4b45      	ldr	r3, [pc, #276]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	687a      	ldr	r2, [r7, #4]
 800fc96:	429a      	cmp	r2, r3
 800fc98:	d86a      	bhi.n	800fd70 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fc9a:	4b44      	ldr	r3, [pc, #272]	@ (800fdac <pvPortMalloc+0x190>)
 800fc9c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fc9e:	4b43      	ldr	r3, [pc, #268]	@ (800fdac <pvPortMalloc+0x190>)
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fca4:	e004      	b.n	800fcb0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800fca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fca8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	687a      	ldr	r2, [r7, #4]
 800fcb6:	429a      	cmp	r2, r3
 800fcb8:	d903      	bls.n	800fcc2 <pvPortMalloc+0xa6>
 800fcba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d1f1      	bne.n	800fca6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fcc2:	4b37      	ldr	r3, [pc, #220]	@ (800fda0 <pvPortMalloc+0x184>)
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcc8:	429a      	cmp	r2, r3
 800fcca:	d051      	beq.n	800fd70 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fccc:	6a3b      	ldr	r3, [r7, #32]
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	2208      	movs	r2, #8
 800fcd2:	4413      	add	r3, r2
 800fcd4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fcd8:	681a      	ldr	r2, [r3, #0]
 800fcda:	6a3b      	ldr	r3, [r7, #32]
 800fcdc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fce0:	685a      	ldr	r2, [r3, #4]
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	1ad2      	subs	r2, r2, r3
 800fce6:	2308      	movs	r3, #8
 800fce8:	005b      	lsls	r3, r3, #1
 800fcea:	429a      	cmp	r2, r3
 800fcec:	d920      	bls.n	800fd30 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fcee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4413      	add	r3, r2
 800fcf4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fcf6:	69bb      	ldr	r3, [r7, #24]
 800fcf8:	f003 0307 	and.w	r3, r3, #7
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d00b      	beq.n	800fd18 <pvPortMalloc+0xfc>
	__asm volatile
 800fd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd04:	f383 8811 	msr	BASEPRI, r3
 800fd08:	f3bf 8f6f 	isb	sy
 800fd0c:	f3bf 8f4f 	dsb	sy
 800fd10:	613b      	str	r3, [r7, #16]
}
 800fd12:	bf00      	nop
 800fd14:	bf00      	nop
 800fd16:	e7fd      	b.n	800fd14 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd1a:	685a      	ldr	r2, [r3, #4]
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	1ad2      	subs	r2, r2, r3
 800fd20:	69bb      	ldr	r3, [r7, #24]
 800fd22:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd2a:	69b8      	ldr	r0, [r7, #24]
 800fd2c:	f000 f90a 	bl	800ff44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd30:	4b1d      	ldr	r3, [pc, #116]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fd32:	681a      	ldr	r2, [r3, #0]
 800fd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd36:	685b      	ldr	r3, [r3, #4]
 800fd38:	1ad3      	subs	r3, r2, r3
 800fd3a:	4a1b      	ldr	r2, [pc, #108]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fd3c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd3e:	4b1a      	ldr	r3, [pc, #104]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	4b1b      	ldr	r3, [pc, #108]	@ (800fdb0 <pvPortMalloc+0x194>)
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	429a      	cmp	r2, r3
 800fd48:	d203      	bcs.n	800fd52 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd4a:	4b17      	ldr	r3, [pc, #92]	@ (800fda8 <pvPortMalloc+0x18c>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	4a18      	ldr	r2, [pc, #96]	@ (800fdb0 <pvPortMalloc+0x194>)
 800fd50:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd54:	685a      	ldr	r2, [r3, #4]
 800fd56:	4b13      	ldr	r3, [pc, #76]	@ (800fda4 <pvPortMalloc+0x188>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	431a      	orrs	r2, r3
 800fd5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd5e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd62:	2200      	movs	r2, #0
 800fd64:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fd66:	4b13      	ldr	r3, [pc, #76]	@ (800fdb4 <pvPortMalloc+0x198>)
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	4a11      	ldr	r2, [pc, #68]	@ (800fdb4 <pvPortMalloc+0x198>)
 800fd6e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd70:	f7fe fb04 	bl	800e37c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd74:	69fb      	ldr	r3, [r7, #28]
 800fd76:	f003 0307 	and.w	r3, r3, #7
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00b      	beq.n	800fd96 <pvPortMalloc+0x17a>
	__asm volatile
 800fd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd82:	f383 8811 	msr	BASEPRI, r3
 800fd86:	f3bf 8f6f 	isb	sy
 800fd8a:	f3bf 8f4f 	dsb	sy
 800fd8e:	60fb      	str	r3, [r7, #12]
}
 800fd90:	bf00      	nop
 800fd92:	bf00      	nop
 800fd94:	e7fd      	b.n	800fd92 <pvPortMalloc+0x176>
	return pvReturn;
 800fd96:	69fb      	ldr	r3, [r7, #28]
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3728      	adds	r7, #40	@ 0x28
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	200059dc 	.word	0x200059dc
 800fda4:	200059f0 	.word	0x200059f0
 800fda8:	200059e0 	.word	0x200059e0
 800fdac:	200059d4 	.word	0x200059d4
 800fdb0:	200059e4 	.word	0x200059e4
 800fdb4:	200059e8 	.word	0x200059e8

0800fdb8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	b086      	sub	sp, #24
 800fdbc:	af00      	add	r7, sp, #0
 800fdbe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d04f      	beq.n	800fe6a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fdca:	2308      	movs	r3, #8
 800fdcc:	425b      	negs	r3, r3
 800fdce:	697a      	ldr	r2, [r7, #20]
 800fdd0:	4413      	add	r3, r2
 800fdd2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fdd8:	693b      	ldr	r3, [r7, #16]
 800fdda:	685a      	ldr	r2, [r3, #4]
 800fddc:	4b25      	ldr	r3, [pc, #148]	@ (800fe74 <vPortFree+0xbc>)
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	4013      	ands	r3, r2
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d10b      	bne.n	800fdfe <vPortFree+0x46>
	__asm volatile
 800fde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdea:	f383 8811 	msr	BASEPRI, r3
 800fdee:	f3bf 8f6f 	isb	sy
 800fdf2:	f3bf 8f4f 	dsb	sy
 800fdf6:	60fb      	str	r3, [r7, #12]
}
 800fdf8:	bf00      	nop
 800fdfa:	bf00      	nop
 800fdfc:	e7fd      	b.n	800fdfa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00b      	beq.n	800fe1e <vPortFree+0x66>
	__asm volatile
 800fe06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe0a:	f383 8811 	msr	BASEPRI, r3
 800fe0e:	f3bf 8f6f 	isb	sy
 800fe12:	f3bf 8f4f 	dsb	sy
 800fe16:	60bb      	str	r3, [r7, #8]
}
 800fe18:	bf00      	nop
 800fe1a:	bf00      	nop
 800fe1c:	e7fd      	b.n	800fe1a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	685a      	ldr	r2, [r3, #4]
 800fe22:	4b14      	ldr	r3, [pc, #80]	@ (800fe74 <vPortFree+0xbc>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	4013      	ands	r3, r2
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d01e      	beq.n	800fe6a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d11a      	bne.n	800fe6a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	685a      	ldr	r2, [r3, #4]
 800fe38:	4b0e      	ldr	r3, [pc, #56]	@ (800fe74 <vPortFree+0xbc>)
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	43db      	mvns	r3, r3
 800fe3e:	401a      	ands	r2, r3
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe44:	f7fe fa8c 	bl	800e360 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	685a      	ldr	r2, [r3, #4]
 800fe4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fe78 <vPortFree+0xc0>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	4413      	add	r3, r2
 800fe52:	4a09      	ldr	r2, [pc, #36]	@ (800fe78 <vPortFree+0xc0>)
 800fe54:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe56:	6938      	ldr	r0, [r7, #16]
 800fe58:	f000 f874 	bl	800ff44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fe5c:	4b07      	ldr	r3, [pc, #28]	@ (800fe7c <vPortFree+0xc4>)
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	3301      	adds	r3, #1
 800fe62:	4a06      	ldr	r2, [pc, #24]	@ (800fe7c <vPortFree+0xc4>)
 800fe64:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fe66:	f7fe fa89 	bl	800e37c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe6a:	bf00      	nop
 800fe6c:	3718      	adds	r7, #24
 800fe6e:	46bd      	mov	sp, r7
 800fe70:	bd80      	pop	{r7, pc}
 800fe72:	bf00      	nop
 800fe74:	200059f0 	.word	0x200059f0
 800fe78:	200059e0 	.word	0x200059e0
 800fe7c:	200059ec 	.word	0x200059ec

0800fe80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe80:	b480      	push	{r7}
 800fe82:	b085      	sub	sp, #20
 800fe84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe86:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800fe8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fe8c:	4b27      	ldr	r3, [pc, #156]	@ (800ff2c <prvHeapInit+0xac>)
 800fe8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	f003 0307 	and.w	r3, r3, #7
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00c      	beq.n	800feb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	3307      	adds	r3, #7
 800fe9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	f023 0307 	bic.w	r3, r3, #7
 800fea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800fea8:	68ba      	ldr	r2, [r7, #8]
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	1ad3      	subs	r3, r2, r3
 800feae:	4a1f      	ldr	r2, [pc, #124]	@ (800ff2c <prvHeapInit+0xac>)
 800feb0:	4413      	add	r3, r2
 800feb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800feb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ff30 <prvHeapInit+0xb0>)
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800febe:	4b1c      	ldr	r3, [pc, #112]	@ (800ff30 <prvHeapInit+0xb0>)
 800fec0:	2200      	movs	r2, #0
 800fec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	68ba      	ldr	r2, [r7, #8]
 800fec8:	4413      	add	r3, r2
 800feca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fecc:	2208      	movs	r2, #8
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	1a9b      	subs	r3, r3, r2
 800fed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	f023 0307 	bic.w	r3, r3, #7
 800feda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	4a15      	ldr	r2, [pc, #84]	@ (800ff34 <prvHeapInit+0xb4>)
 800fee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fee2:	4b14      	ldr	r3, [pc, #80]	@ (800ff34 <prvHeapInit+0xb4>)
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	2200      	movs	r2, #0
 800fee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800feea:	4b12      	ldr	r3, [pc, #72]	@ (800ff34 <prvHeapInit+0xb4>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2200      	movs	r2, #0
 800fef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	68fa      	ldr	r2, [r7, #12]
 800fefa:	1ad2      	subs	r2, r2, r3
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff00:	4b0c      	ldr	r3, [pc, #48]	@ (800ff34 <prvHeapInit+0xb4>)
 800ff02:	681a      	ldr	r2, [r3, #0]
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	4a0a      	ldr	r2, [pc, #40]	@ (800ff38 <prvHeapInit+0xb8>)
 800ff0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	685b      	ldr	r3, [r3, #4]
 800ff14:	4a09      	ldr	r2, [pc, #36]	@ (800ff3c <prvHeapInit+0xbc>)
 800ff16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff18:	4b09      	ldr	r3, [pc, #36]	@ (800ff40 <prvHeapInit+0xc0>)
 800ff1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ff1e:	601a      	str	r2, [r3, #0]
}
 800ff20:	bf00      	nop
 800ff22:	3714      	adds	r7, #20
 800ff24:	46bd      	mov	sp, r7
 800ff26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2a:	4770      	bx	lr
 800ff2c:	20001dd4 	.word	0x20001dd4
 800ff30:	200059d4 	.word	0x200059d4
 800ff34:	200059dc 	.word	0x200059dc
 800ff38:	200059e4 	.word	0x200059e4
 800ff3c:	200059e0 	.word	0x200059e0
 800ff40:	200059f0 	.word	0x200059f0

0800ff44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff44:	b480      	push	{r7}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff4c:	4b28      	ldr	r3, [pc, #160]	@ (800fff0 <prvInsertBlockIntoFreeList+0xac>)
 800ff4e:	60fb      	str	r3, [r7, #12]
 800ff50:	e002      	b.n	800ff58 <prvInsertBlockIntoFreeList+0x14>
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	60fb      	str	r3, [r7, #12]
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	687a      	ldr	r2, [r7, #4]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d8f7      	bhi.n	800ff52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	685b      	ldr	r3, [r3, #4]
 800ff6a:	68ba      	ldr	r2, [r7, #8]
 800ff6c:	4413      	add	r3, r2
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d108      	bne.n	800ff86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	685a      	ldr	r2, [r3, #4]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	441a      	add	r2, r3
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	685b      	ldr	r3, [r3, #4]
 800ff8e:	68ba      	ldr	r2, [r7, #8]
 800ff90:	441a      	add	r2, r3
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d118      	bne.n	800ffcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	681a      	ldr	r2, [r3, #0]
 800ff9e:	4b15      	ldr	r3, [pc, #84]	@ (800fff4 <prvInsertBlockIntoFreeList+0xb0>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d00d      	beq.n	800ffc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	685a      	ldr	r2, [r3, #4]
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	685b      	ldr	r3, [r3, #4]
 800ffb0:	441a      	add	r2, r3
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	601a      	str	r2, [r3, #0]
 800ffc0:	e008      	b.n	800ffd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ffc2:	4b0c      	ldr	r3, [pc, #48]	@ (800fff4 <prvInsertBlockIntoFreeList+0xb0>)
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	601a      	str	r2, [r3, #0]
 800ffca:	e003      	b.n	800ffd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	d002      	beq.n	800ffe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ffe2:	bf00      	nop
 800ffe4:	3714      	adds	r7, #20
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	200059d4 	.word	0x200059d4
 800fff4:	200059dc 	.word	0x200059dc

0800fff8 <_vsiprintf_r>:
 800fff8:	b500      	push	{lr}
 800fffa:	b09b      	sub	sp, #108	@ 0x6c
 800fffc:	9100      	str	r1, [sp, #0]
 800fffe:	9104      	str	r1, [sp, #16]
 8010000:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010004:	9105      	str	r1, [sp, #20]
 8010006:	9102      	str	r1, [sp, #8]
 8010008:	4905      	ldr	r1, [pc, #20]	@ (8010020 <_vsiprintf_r+0x28>)
 801000a:	9103      	str	r1, [sp, #12]
 801000c:	4669      	mov	r1, sp
 801000e:	f000 f951 	bl	80102b4 <_svfiprintf_r>
 8010012:	9b00      	ldr	r3, [sp, #0]
 8010014:	2200      	movs	r2, #0
 8010016:	701a      	strb	r2, [r3, #0]
 8010018:	b01b      	add	sp, #108	@ 0x6c
 801001a:	f85d fb04 	ldr.w	pc, [sp], #4
 801001e:	bf00      	nop
 8010020:	ffff0208 	.word	0xffff0208

08010024 <vsiprintf>:
 8010024:	4613      	mov	r3, r2
 8010026:	460a      	mov	r2, r1
 8010028:	4601      	mov	r1, r0
 801002a:	4802      	ldr	r0, [pc, #8]	@ (8010034 <vsiprintf+0x10>)
 801002c:	6800      	ldr	r0, [r0, #0]
 801002e:	f7ff bfe3 	b.w	800fff8 <_vsiprintf_r>
 8010032:	bf00      	nop
 8010034:	20000200 	.word	0x20000200

08010038 <memset>:
 8010038:	4402      	add	r2, r0
 801003a:	4603      	mov	r3, r0
 801003c:	4293      	cmp	r3, r2
 801003e:	d100      	bne.n	8010042 <memset+0xa>
 8010040:	4770      	bx	lr
 8010042:	f803 1b01 	strb.w	r1, [r3], #1
 8010046:	e7f9      	b.n	801003c <memset+0x4>

08010048 <_reclaim_reent>:
 8010048:	4b29      	ldr	r3, [pc, #164]	@ (80100f0 <_reclaim_reent+0xa8>)
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	4283      	cmp	r3, r0
 801004e:	b570      	push	{r4, r5, r6, lr}
 8010050:	4604      	mov	r4, r0
 8010052:	d04b      	beq.n	80100ec <_reclaim_reent+0xa4>
 8010054:	69c3      	ldr	r3, [r0, #28]
 8010056:	b1ab      	cbz	r3, 8010084 <_reclaim_reent+0x3c>
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	b16b      	cbz	r3, 8010078 <_reclaim_reent+0x30>
 801005c:	2500      	movs	r5, #0
 801005e:	69e3      	ldr	r3, [r4, #28]
 8010060:	68db      	ldr	r3, [r3, #12]
 8010062:	5959      	ldr	r1, [r3, r5]
 8010064:	2900      	cmp	r1, #0
 8010066:	d13b      	bne.n	80100e0 <_reclaim_reent+0x98>
 8010068:	3504      	adds	r5, #4
 801006a:	2d80      	cmp	r5, #128	@ 0x80
 801006c:	d1f7      	bne.n	801005e <_reclaim_reent+0x16>
 801006e:	69e3      	ldr	r3, [r4, #28]
 8010070:	4620      	mov	r0, r4
 8010072:	68d9      	ldr	r1, [r3, #12]
 8010074:	f000 f878 	bl	8010168 <_free_r>
 8010078:	69e3      	ldr	r3, [r4, #28]
 801007a:	6819      	ldr	r1, [r3, #0]
 801007c:	b111      	cbz	r1, 8010084 <_reclaim_reent+0x3c>
 801007e:	4620      	mov	r0, r4
 8010080:	f000 f872 	bl	8010168 <_free_r>
 8010084:	6961      	ldr	r1, [r4, #20]
 8010086:	b111      	cbz	r1, 801008e <_reclaim_reent+0x46>
 8010088:	4620      	mov	r0, r4
 801008a:	f000 f86d 	bl	8010168 <_free_r>
 801008e:	69e1      	ldr	r1, [r4, #28]
 8010090:	b111      	cbz	r1, 8010098 <_reclaim_reent+0x50>
 8010092:	4620      	mov	r0, r4
 8010094:	f000 f868 	bl	8010168 <_free_r>
 8010098:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801009a:	b111      	cbz	r1, 80100a2 <_reclaim_reent+0x5a>
 801009c:	4620      	mov	r0, r4
 801009e:	f000 f863 	bl	8010168 <_free_r>
 80100a2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80100a4:	b111      	cbz	r1, 80100ac <_reclaim_reent+0x64>
 80100a6:	4620      	mov	r0, r4
 80100a8:	f000 f85e 	bl	8010168 <_free_r>
 80100ac:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80100ae:	b111      	cbz	r1, 80100b6 <_reclaim_reent+0x6e>
 80100b0:	4620      	mov	r0, r4
 80100b2:	f000 f859 	bl	8010168 <_free_r>
 80100b6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80100b8:	b111      	cbz	r1, 80100c0 <_reclaim_reent+0x78>
 80100ba:	4620      	mov	r0, r4
 80100bc:	f000 f854 	bl	8010168 <_free_r>
 80100c0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80100c2:	b111      	cbz	r1, 80100ca <_reclaim_reent+0x82>
 80100c4:	4620      	mov	r0, r4
 80100c6:	f000 f84f 	bl	8010168 <_free_r>
 80100ca:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80100cc:	b111      	cbz	r1, 80100d4 <_reclaim_reent+0x8c>
 80100ce:	4620      	mov	r0, r4
 80100d0:	f000 f84a 	bl	8010168 <_free_r>
 80100d4:	6a23      	ldr	r3, [r4, #32]
 80100d6:	b14b      	cbz	r3, 80100ec <_reclaim_reent+0xa4>
 80100d8:	4620      	mov	r0, r4
 80100da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80100de:	4718      	bx	r3
 80100e0:	680e      	ldr	r6, [r1, #0]
 80100e2:	4620      	mov	r0, r4
 80100e4:	f000 f840 	bl	8010168 <_free_r>
 80100e8:	4631      	mov	r1, r6
 80100ea:	e7bb      	b.n	8010064 <_reclaim_reent+0x1c>
 80100ec:	bd70      	pop	{r4, r5, r6, pc}
 80100ee:	bf00      	nop
 80100f0:	20000200 	.word	0x20000200

080100f4 <__errno>:
 80100f4:	4b01      	ldr	r3, [pc, #4]	@ (80100fc <__errno+0x8>)
 80100f6:	6818      	ldr	r0, [r3, #0]
 80100f8:	4770      	bx	lr
 80100fa:	bf00      	nop
 80100fc:	20000200 	.word	0x20000200

08010100 <__libc_init_array>:
 8010100:	b570      	push	{r4, r5, r6, lr}
 8010102:	4d0d      	ldr	r5, [pc, #52]	@ (8010138 <__libc_init_array+0x38>)
 8010104:	4c0d      	ldr	r4, [pc, #52]	@ (801013c <__libc_init_array+0x3c>)
 8010106:	1b64      	subs	r4, r4, r5
 8010108:	10a4      	asrs	r4, r4, #2
 801010a:	2600      	movs	r6, #0
 801010c:	42a6      	cmp	r6, r4
 801010e:	d109      	bne.n	8010124 <__libc_init_array+0x24>
 8010110:	4d0b      	ldr	r5, [pc, #44]	@ (8010140 <__libc_init_array+0x40>)
 8010112:	4c0c      	ldr	r4, [pc, #48]	@ (8010144 <__libc_init_array+0x44>)
 8010114:	f001 fcec 	bl	8011af0 <_init>
 8010118:	1b64      	subs	r4, r4, r5
 801011a:	10a4      	asrs	r4, r4, #2
 801011c:	2600      	movs	r6, #0
 801011e:	42a6      	cmp	r6, r4
 8010120:	d105      	bne.n	801012e <__libc_init_array+0x2e>
 8010122:	bd70      	pop	{r4, r5, r6, pc}
 8010124:	f855 3b04 	ldr.w	r3, [r5], #4
 8010128:	4798      	blx	r3
 801012a:	3601      	adds	r6, #1
 801012c:	e7ee      	b.n	801010c <__libc_init_array+0xc>
 801012e:	f855 3b04 	ldr.w	r3, [r5], #4
 8010132:	4798      	blx	r3
 8010134:	3601      	adds	r6, #1
 8010136:	e7f2      	b.n	801011e <__libc_init_array+0x1e>
 8010138:	08011fb0 	.word	0x08011fb0
 801013c:	08011fb0 	.word	0x08011fb0
 8010140:	08011fb0 	.word	0x08011fb0
 8010144:	08011fb4 	.word	0x08011fb4

08010148 <__retarget_lock_acquire_recursive>:
 8010148:	4770      	bx	lr

0801014a <__retarget_lock_release_recursive>:
 801014a:	4770      	bx	lr

0801014c <memcpy>:
 801014c:	440a      	add	r2, r1
 801014e:	4291      	cmp	r1, r2
 8010150:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010154:	d100      	bne.n	8010158 <memcpy+0xc>
 8010156:	4770      	bx	lr
 8010158:	b510      	push	{r4, lr}
 801015a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801015e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010162:	4291      	cmp	r1, r2
 8010164:	d1f9      	bne.n	801015a <memcpy+0xe>
 8010166:	bd10      	pop	{r4, pc}

08010168 <_free_r>:
 8010168:	b538      	push	{r3, r4, r5, lr}
 801016a:	4605      	mov	r5, r0
 801016c:	2900      	cmp	r1, #0
 801016e:	d041      	beq.n	80101f4 <_free_r+0x8c>
 8010170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010174:	1f0c      	subs	r4, r1, #4
 8010176:	2b00      	cmp	r3, #0
 8010178:	bfb8      	it	lt
 801017a:	18e4      	addlt	r4, r4, r3
 801017c:	f000 fbc6 	bl	801090c <__malloc_lock>
 8010180:	4a1d      	ldr	r2, [pc, #116]	@ (80101f8 <_free_r+0x90>)
 8010182:	6813      	ldr	r3, [r2, #0]
 8010184:	b933      	cbnz	r3, 8010194 <_free_r+0x2c>
 8010186:	6063      	str	r3, [r4, #4]
 8010188:	6014      	str	r4, [r2, #0]
 801018a:	4628      	mov	r0, r5
 801018c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010190:	f000 bbc2 	b.w	8010918 <__malloc_unlock>
 8010194:	42a3      	cmp	r3, r4
 8010196:	d908      	bls.n	80101aa <_free_r+0x42>
 8010198:	6820      	ldr	r0, [r4, #0]
 801019a:	1821      	adds	r1, r4, r0
 801019c:	428b      	cmp	r3, r1
 801019e:	bf01      	itttt	eq
 80101a0:	6819      	ldreq	r1, [r3, #0]
 80101a2:	685b      	ldreq	r3, [r3, #4]
 80101a4:	1809      	addeq	r1, r1, r0
 80101a6:	6021      	streq	r1, [r4, #0]
 80101a8:	e7ed      	b.n	8010186 <_free_r+0x1e>
 80101aa:	461a      	mov	r2, r3
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	b10b      	cbz	r3, 80101b4 <_free_r+0x4c>
 80101b0:	42a3      	cmp	r3, r4
 80101b2:	d9fa      	bls.n	80101aa <_free_r+0x42>
 80101b4:	6811      	ldr	r1, [r2, #0]
 80101b6:	1850      	adds	r0, r2, r1
 80101b8:	42a0      	cmp	r0, r4
 80101ba:	d10b      	bne.n	80101d4 <_free_r+0x6c>
 80101bc:	6820      	ldr	r0, [r4, #0]
 80101be:	4401      	add	r1, r0
 80101c0:	1850      	adds	r0, r2, r1
 80101c2:	4283      	cmp	r3, r0
 80101c4:	6011      	str	r1, [r2, #0]
 80101c6:	d1e0      	bne.n	801018a <_free_r+0x22>
 80101c8:	6818      	ldr	r0, [r3, #0]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	6053      	str	r3, [r2, #4]
 80101ce:	4408      	add	r0, r1
 80101d0:	6010      	str	r0, [r2, #0]
 80101d2:	e7da      	b.n	801018a <_free_r+0x22>
 80101d4:	d902      	bls.n	80101dc <_free_r+0x74>
 80101d6:	230c      	movs	r3, #12
 80101d8:	602b      	str	r3, [r5, #0]
 80101da:	e7d6      	b.n	801018a <_free_r+0x22>
 80101dc:	6820      	ldr	r0, [r4, #0]
 80101de:	1821      	adds	r1, r4, r0
 80101e0:	428b      	cmp	r3, r1
 80101e2:	bf04      	itt	eq
 80101e4:	6819      	ldreq	r1, [r3, #0]
 80101e6:	685b      	ldreq	r3, [r3, #4]
 80101e8:	6063      	str	r3, [r4, #4]
 80101ea:	bf04      	itt	eq
 80101ec:	1809      	addeq	r1, r1, r0
 80101ee:	6021      	streq	r1, [r4, #0]
 80101f0:	6054      	str	r4, [r2, #4]
 80101f2:	e7ca      	b.n	801018a <_free_r+0x22>
 80101f4:	bd38      	pop	{r3, r4, r5, pc}
 80101f6:	bf00      	nop
 80101f8:	20005b38 	.word	0x20005b38

080101fc <__ssputs_r>:
 80101fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010200:	688e      	ldr	r6, [r1, #8]
 8010202:	461f      	mov	r7, r3
 8010204:	42be      	cmp	r6, r7
 8010206:	680b      	ldr	r3, [r1, #0]
 8010208:	4682      	mov	sl, r0
 801020a:	460c      	mov	r4, r1
 801020c:	4690      	mov	r8, r2
 801020e:	d82d      	bhi.n	801026c <__ssputs_r+0x70>
 8010210:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010214:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010218:	d026      	beq.n	8010268 <__ssputs_r+0x6c>
 801021a:	6965      	ldr	r5, [r4, #20]
 801021c:	6909      	ldr	r1, [r1, #16]
 801021e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010222:	eba3 0901 	sub.w	r9, r3, r1
 8010226:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801022a:	1c7b      	adds	r3, r7, #1
 801022c:	444b      	add	r3, r9
 801022e:	106d      	asrs	r5, r5, #1
 8010230:	429d      	cmp	r5, r3
 8010232:	bf38      	it	cc
 8010234:	461d      	movcc	r5, r3
 8010236:	0553      	lsls	r3, r2, #21
 8010238:	d527      	bpl.n	801028a <__ssputs_r+0x8e>
 801023a:	4629      	mov	r1, r5
 801023c:	f000 f958 	bl	80104f0 <_malloc_r>
 8010240:	4606      	mov	r6, r0
 8010242:	b360      	cbz	r0, 801029e <__ssputs_r+0xa2>
 8010244:	6921      	ldr	r1, [r4, #16]
 8010246:	464a      	mov	r2, r9
 8010248:	f7ff ff80 	bl	801014c <memcpy>
 801024c:	89a3      	ldrh	r3, [r4, #12]
 801024e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010252:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010256:	81a3      	strh	r3, [r4, #12]
 8010258:	6126      	str	r6, [r4, #16]
 801025a:	6165      	str	r5, [r4, #20]
 801025c:	444e      	add	r6, r9
 801025e:	eba5 0509 	sub.w	r5, r5, r9
 8010262:	6026      	str	r6, [r4, #0]
 8010264:	60a5      	str	r5, [r4, #8]
 8010266:	463e      	mov	r6, r7
 8010268:	42be      	cmp	r6, r7
 801026a:	d900      	bls.n	801026e <__ssputs_r+0x72>
 801026c:	463e      	mov	r6, r7
 801026e:	6820      	ldr	r0, [r4, #0]
 8010270:	4632      	mov	r2, r6
 8010272:	4641      	mov	r1, r8
 8010274:	f000 fb84 	bl	8010980 <memmove>
 8010278:	68a3      	ldr	r3, [r4, #8]
 801027a:	1b9b      	subs	r3, r3, r6
 801027c:	60a3      	str	r3, [r4, #8]
 801027e:	6823      	ldr	r3, [r4, #0]
 8010280:	4433      	add	r3, r6
 8010282:	6023      	str	r3, [r4, #0]
 8010284:	2000      	movs	r0, #0
 8010286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801028a:	462a      	mov	r2, r5
 801028c:	f000 fb4a 	bl	8010924 <_realloc_r>
 8010290:	4606      	mov	r6, r0
 8010292:	2800      	cmp	r0, #0
 8010294:	d1e0      	bne.n	8010258 <__ssputs_r+0x5c>
 8010296:	6921      	ldr	r1, [r4, #16]
 8010298:	4650      	mov	r0, sl
 801029a:	f7ff ff65 	bl	8010168 <_free_r>
 801029e:	230c      	movs	r3, #12
 80102a0:	f8ca 3000 	str.w	r3, [sl]
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80102aa:	81a3      	strh	r3, [r4, #12]
 80102ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80102b0:	e7e9      	b.n	8010286 <__ssputs_r+0x8a>
	...

080102b4 <_svfiprintf_r>:
 80102b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80102b8:	4698      	mov	r8, r3
 80102ba:	898b      	ldrh	r3, [r1, #12]
 80102bc:	061b      	lsls	r3, r3, #24
 80102be:	b09d      	sub	sp, #116	@ 0x74
 80102c0:	4607      	mov	r7, r0
 80102c2:	460d      	mov	r5, r1
 80102c4:	4614      	mov	r4, r2
 80102c6:	d510      	bpl.n	80102ea <_svfiprintf_r+0x36>
 80102c8:	690b      	ldr	r3, [r1, #16]
 80102ca:	b973      	cbnz	r3, 80102ea <_svfiprintf_r+0x36>
 80102cc:	2140      	movs	r1, #64	@ 0x40
 80102ce:	f000 f90f 	bl	80104f0 <_malloc_r>
 80102d2:	6028      	str	r0, [r5, #0]
 80102d4:	6128      	str	r0, [r5, #16]
 80102d6:	b930      	cbnz	r0, 80102e6 <_svfiprintf_r+0x32>
 80102d8:	230c      	movs	r3, #12
 80102da:	603b      	str	r3, [r7, #0]
 80102dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80102e0:	b01d      	add	sp, #116	@ 0x74
 80102e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e6:	2340      	movs	r3, #64	@ 0x40
 80102e8:	616b      	str	r3, [r5, #20]
 80102ea:	2300      	movs	r3, #0
 80102ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ee:	2320      	movs	r3, #32
 80102f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80102f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80102f8:	2330      	movs	r3, #48	@ 0x30
 80102fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010498 <_svfiprintf_r+0x1e4>
 80102fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010302:	f04f 0901 	mov.w	r9, #1
 8010306:	4623      	mov	r3, r4
 8010308:	469a      	mov	sl, r3
 801030a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801030e:	b10a      	cbz	r2, 8010314 <_svfiprintf_r+0x60>
 8010310:	2a25      	cmp	r2, #37	@ 0x25
 8010312:	d1f9      	bne.n	8010308 <_svfiprintf_r+0x54>
 8010314:	ebba 0b04 	subs.w	fp, sl, r4
 8010318:	d00b      	beq.n	8010332 <_svfiprintf_r+0x7e>
 801031a:	465b      	mov	r3, fp
 801031c:	4622      	mov	r2, r4
 801031e:	4629      	mov	r1, r5
 8010320:	4638      	mov	r0, r7
 8010322:	f7ff ff6b 	bl	80101fc <__ssputs_r>
 8010326:	3001      	adds	r0, #1
 8010328:	f000 80a7 	beq.w	801047a <_svfiprintf_r+0x1c6>
 801032c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801032e:	445a      	add	r2, fp
 8010330:	9209      	str	r2, [sp, #36]	@ 0x24
 8010332:	f89a 3000 	ldrb.w	r3, [sl]
 8010336:	2b00      	cmp	r3, #0
 8010338:	f000 809f 	beq.w	801047a <_svfiprintf_r+0x1c6>
 801033c:	2300      	movs	r3, #0
 801033e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010342:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010346:	f10a 0a01 	add.w	sl, sl, #1
 801034a:	9304      	str	r3, [sp, #16]
 801034c:	9307      	str	r3, [sp, #28]
 801034e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010352:	931a      	str	r3, [sp, #104]	@ 0x68
 8010354:	4654      	mov	r4, sl
 8010356:	2205      	movs	r2, #5
 8010358:	f814 1b01 	ldrb.w	r1, [r4], #1
 801035c:	484e      	ldr	r0, [pc, #312]	@ (8010498 <_svfiprintf_r+0x1e4>)
 801035e:	f7ef ff3f 	bl	80001e0 <memchr>
 8010362:	9a04      	ldr	r2, [sp, #16]
 8010364:	b9d8      	cbnz	r0, 801039e <_svfiprintf_r+0xea>
 8010366:	06d0      	lsls	r0, r2, #27
 8010368:	bf44      	itt	mi
 801036a:	2320      	movmi	r3, #32
 801036c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010370:	0711      	lsls	r1, r2, #28
 8010372:	bf44      	itt	mi
 8010374:	232b      	movmi	r3, #43	@ 0x2b
 8010376:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801037a:	f89a 3000 	ldrb.w	r3, [sl]
 801037e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010380:	d015      	beq.n	80103ae <_svfiprintf_r+0xfa>
 8010382:	9a07      	ldr	r2, [sp, #28]
 8010384:	4654      	mov	r4, sl
 8010386:	2000      	movs	r0, #0
 8010388:	f04f 0c0a 	mov.w	ip, #10
 801038c:	4621      	mov	r1, r4
 801038e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010392:	3b30      	subs	r3, #48	@ 0x30
 8010394:	2b09      	cmp	r3, #9
 8010396:	d94b      	bls.n	8010430 <_svfiprintf_r+0x17c>
 8010398:	b1b0      	cbz	r0, 80103c8 <_svfiprintf_r+0x114>
 801039a:	9207      	str	r2, [sp, #28]
 801039c:	e014      	b.n	80103c8 <_svfiprintf_r+0x114>
 801039e:	eba0 0308 	sub.w	r3, r0, r8
 80103a2:	fa09 f303 	lsl.w	r3, r9, r3
 80103a6:	4313      	orrs	r3, r2
 80103a8:	9304      	str	r3, [sp, #16]
 80103aa:	46a2      	mov	sl, r4
 80103ac:	e7d2      	b.n	8010354 <_svfiprintf_r+0xa0>
 80103ae:	9b03      	ldr	r3, [sp, #12]
 80103b0:	1d19      	adds	r1, r3, #4
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	9103      	str	r1, [sp, #12]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	bfbb      	ittet	lt
 80103ba:	425b      	neglt	r3, r3
 80103bc:	f042 0202 	orrlt.w	r2, r2, #2
 80103c0:	9307      	strge	r3, [sp, #28]
 80103c2:	9307      	strlt	r3, [sp, #28]
 80103c4:	bfb8      	it	lt
 80103c6:	9204      	strlt	r2, [sp, #16]
 80103c8:	7823      	ldrb	r3, [r4, #0]
 80103ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80103cc:	d10a      	bne.n	80103e4 <_svfiprintf_r+0x130>
 80103ce:	7863      	ldrb	r3, [r4, #1]
 80103d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80103d2:	d132      	bne.n	801043a <_svfiprintf_r+0x186>
 80103d4:	9b03      	ldr	r3, [sp, #12]
 80103d6:	1d1a      	adds	r2, r3, #4
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	9203      	str	r2, [sp, #12]
 80103dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80103e0:	3402      	adds	r4, #2
 80103e2:	9305      	str	r3, [sp, #20]
 80103e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80104a8 <_svfiprintf_r+0x1f4>
 80103e8:	7821      	ldrb	r1, [r4, #0]
 80103ea:	2203      	movs	r2, #3
 80103ec:	4650      	mov	r0, sl
 80103ee:	f7ef fef7 	bl	80001e0 <memchr>
 80103f2:	b138      	cbz	r0, 8010404 <_svfiprintf_r+0x150>
 80103f4:	9b04      	ldr	r3, [sp, #16]
 80103f6:	eba0 000a 	sub.w	r0, r0, sl
 80103fa:	2240      	movs	r2, #64	@ 0x40
 80103fc:	4082      	lsls	r2, r0
 80103fe:	4313      	orrs	r3, r2
 8010400:	3401      	adds	r4, #1
 8010402:	9304      	str	r3, [sp, #16]
 8010404:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010408:	4824      	ldr	r0, [pc, #144]	@ (801049c <_svfiprintf_r+0x1e8>)
 801040a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801040e:	2206      	movs	r2, #6
 8010410:	f7ef fee6 	bl	80001e0 <memchr>
 8010414:	2800      	cmp	r0, #0
 8010416:	d036      	beq.n	8010486 <_svfiprintf_r+0x1d2>
 8010418:	4b21      	ldr	r3, [pc, #132]	@ (80104a0 <_svfiprintf_r+0x1ec>)
 801041a:	bb1b      	cbnz	r3, 8010464 <_svfiprintf_r+0x1b0>
 801041c:	9b03      	ldr	r3, [sp, #12]
 801041e:	3307      	adds	r3, #7
 8010420:	f023 0307 	bic.w	r3, r3, #7
 8010424:	3308      	adds	r3, #8
 8010426:	9303      	str	r3, [sp, #12]
 8010428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801042a:	4433      	add	r3, r6
 801042c:	9309      	str	r3, [sp, #36]	@ 0x24
 801042e:	e76a      	b.n	8010306 <_svfiprintf_r+0x52>
 8010430:	fb0c 3202 	mla	r2, ip, r2, r3
 8010434:	460c      	mov	r4, r1
 8010436:	2001      	movs	r0, #1
 8010438:	e7a8      	b.n	801038c <_svfiprintf_r+0xd8>
 801043a:	2300      	movs	r3, #0
 801043c:	3401      	adds	r4, #1
 801043e:	9305      	str	r3, [sp, #20]
 8010440:	4619      	mov	r1, r3
 8010442:	f04f 0c0a 	mov.w	ip, #10
 8010446:	4620      	mov	r0, r4
 8010448:	f810 2b01 	ldrb.w	r2, [r0], #1
 801044c:	3a30      	subs	r2, #48	@ 0x30
 801044e:	2a09      	cmp	r2, #9
 8010450:	d903      	bls.n	801045a <_svfiprintf_r+0x1a6>
 8010452:	2b00      	cmp	r3, #0
 8010454:	d0c6      	beq.n	80103e4 <_svfiprintf_r+0x130>
 8010456:	9105      	str	r1, [sp, #20]
 8010458:	e7c4      	b.n	80103e4 <_svfiprintf_r+0x130>
 801045a:	fb0c 2101 	mla	r1, ip, r1, r2
 801045e:	4604      	mov	r4, r0
 8010460:	2301      	movs	r3, #1
 8010462:	e7f0      	b.n	8010446 <_svfiprintf_r+0x192>
 8010464:	ab03      	add	r3, sp, #12
 8010466:	9300      	str	r3, [sp, #0]
 8010468:	462a      	mov	r2, r5
 801046a:	4b0e      	ldr	r3, [pc, #56]	@ (80104a4 <_svfiprintf_r+0x1f0>)
 801046c:	a904      	add	r1, sp, #16
 801046e:	4638      	mov	r0, r7
 8010470:	f3af 8000 	nop.w
 8010474:	1c42      	adds	r2, r0, #1
 8010476:	4606      	mov	r6, r0
 8010478:	d1d6      	bne.n	8010428 <_svfiprintf_r+0x174>
 801047a:	89ab      	ldrh	r3, [r5, #12]
 801047c:	065b      	lsls	r3, r3, #25
 801047e:	f53f af2d 	bmi.w	80102dc <_svfiprintf_r+0x28>
 8010482:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010484:	e72c      	b.n	80102e0 <_svfiprintf_r+0x2c>
 8010486:	ab03      	add	r3, sp, #12
 8010488:	9300      	str	r3, [sp, #0]
 801048a:	462a      	mov	r2, r5
 801048c:	4b05      	ldr	r3, [pc, #20]	@ (80104a4 <_svfiprintf_r+0x1f0>)
 801048e:	a904      	add	r1, sp, #16
 8010490:	4638      	mov	r0, r7
 8010492:	f000 f91b 	bl	80106cc <_printf_i>
 8010496:	e7ed      	b.n	8010474 <_svfiprintf_r+0x1c0>
 8010498:	08011d98 	.word	0x08011d98
 801049c:	08011da2 	.word	0x08011da2
 80104a0:	00000000 	.word	0x00000000
 80104a4:	080101fd 	.word	0x080101fd
 80104a8:	08011d9e 	.word	0x08011d9e

080104ac <sbrk_aligned>:
 80104ac:	b570      	push	{r4, r5, r6, lr}
 80104ae:	4e0f      	ldr	r6, [pc, #60]	@ (80104ec <sbrk_aligned+0x40>)
 80104b0:	460c      	mov	r4, r1
 80104b2:	6831      	ldr	r1, [r6, #0]
 80104b4:	4605      	mov	r5, r0
 80104b6:	b911      	cbnz	r1, 80104be <sbrk_aligned+0x12>
 80104b8:	f000 fa7c 	bl	80109b4 <_sbrk_r>
 80104bc:	6030      	str	r0, [r6, #0]
 80104be:	4621      	mov	r1, r4
 80104c0:	4628      	mov	r0, r5
 80104c2:	f000 fa77 	bl	80109b4 <_sbrk_r>
 80104c6:	1c43      	adds	r3, r0, #1
 80104c8:	d103      	bne.n	80104d2 <sbrk_aligned+0x26>
 80104ca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80104ce:	4620      	mov	r0, r4
 80104d0:	bd70      	pop	{r4, r5, r6, pc}
 80104d2:	1cc4      	adds	r4, r0, #3
 80104d4:	f024 0403 	bic.w	r4, r4, #3
 80104d8:	42a0      	cmp	r0, r4
 80104da:	d0f8      	beq.n	80104ce <sbrk_aligned+0x22>
 80104dc:	1a21      	subs	r1, r4, r0
 80104de:	4628      	mov	r0, r5
 80104e0:	f000 fa68 	bl	80109b4 <_sbrk_r>
 80104e4:	3001      	adds	r0, #1
 80104e6:	d1f2      	bne.n	80104ce <sbrk_aligned+0x22>
 80104e8:	e7ef      	b.n	80104ca <sbrk_aligned+0x1e>
 80104ea:	bf00      	nop
 80104ec:	20005b34 	.word	0x20005b34

080104f0 <_malloc_r>:
 80104f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104f4:	1ccd      	adds	r5, r1, #3
 80104f6:	f025 0503 	bic.w	r5, r5, #3
 80104fa:	3508      	adds	r5, #8
 80104fc:	2d0c      	cmp	r5, #12
 80104fe:	bf38      	it	cc
 8010500:	250c      	movcc	r5, #12
 8010502:	2d00      	cmp	r5, #0
 8010504:	4606      	mov	r6, r0
 8010506:	db01      	blt.n	801050c <_malloc_r+0x1c>
 8010508:	42a9      	cmp	r1, r5
 801050a:	d904      	bls.n	8010516 <_malloc_r+0x26>
 801050c:	230c      	movs	r3, #12
 801050e:	6033      	str	r3, [r6, #0]
 8010510:	2000      	movs	r0, #0
 8010512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010516:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80105ec <_malloc_r+0xfc>
 801051a:	f000 f9f7 	bl	801090c <__malloc_lock>
 801051e:	f8d8 3000 	ldr.w	r3, [r8]
 8010522:	461c      	mov	r4, r3
 8010524:	bb44      	cbnz	r4, 8010578 <_malloc_r+0x88>
 8010526:	4629      	mov	r1, r5
 8010528:	4630      	mov	r0, r6
 801052a:	f7ff ffbf 	bl	80104ac <sbrk_aligned>
 801052e:	1c43      	adds	r3, r0, #1
 8010530:	4604      	mov	r4, r0
 8010532:	d158      	bne.n	80105e6 <_malloc_r+0xf6>
 8010534:	f8d8 4000 	ldr.w	r4, [r8]
 8010538:	4627      	mov	r7, r4
 801053a:	2f00      	cmp	r7, #0
 801053c:	d143      	bne.n	80105c6 <_malloc_r+0xd6>
 801053e:	2c00      	cmp	r4, #0
 8010540:	d04b      	beq.n	80105da <_malloc_r+0xea>
 8010542:	6823      	ldr	r3, [r4, #0]
 8010544:	4639      	mov	r1, r7
 8010546:	4630      	mov	r0, r6
 8010548:	eb04 0903 	add.w	r9, r4, r3
 801054c:	f000 fa32 	bl	80109b4 <_sbrk_r>
 8010550:	4581      	cmp	r9, r0
 8010552:	d142      	bne.n	80105da <_malloc_r+0xea>
 8010554:	6821      	ldr	r1, [r4, #0]
 8010556:	1a6d      	subs	r5, r5, r1
 8010558:	4629      	mov	r1, r5
 801055a:	4630      	mov	r0, r6
 801055c:	f7ff ffa6 	bl	80104ac <sbrk_aligned>
 8010560:	3001      	adds	r0, #1
 8010562:	d03a      	beq.n	80105da <_malloc_r+0xea>
 8010564:	6823      	ldr	r3, [r4, #0]
 8010566:	442b      	add	r3, r5
 8010568:	6023      	str	r3, [r4, #0]
 801056a:	f8d8 3000 	ldr.w	r3, [r8]
 801056e:	685a      	ldr	r2, [r3, #4]
 8010570:	bb62      	cbnz	r2, 80105cc <_malloc_r+0xdc>
 8010572:	f8c8 7000 	str.w	r7, [r8]
 8010576:	e00f      	b.n	8010598 <_malloc_r+0xa8>
 8010578:	6822      	ldr	r2, [r4, #0]
 801057a:	1b52      	subs	r2, r2, r5
 801057c:	d420      	bmi.n	80105c0 <_malloc_r+0xd0>
 801057e:	2a0b      	cmp	r2, #11
 8010580:	d917      	bls.n	80105b2 <_malloc_r+0xc2>
 8010582:	1961      	adds	r1, r4, r5
 8010584:	42a3      	cmp	r3, r4
 8010586:	6025      	str	r5, [r4, #0]
 8010588:	bf18      	it	ne
 801058a:	6059      	strne	r1, [r3, #4]
 801058c:	6863      	ldr	r3, [r4, #4]
 801058e:	bf08      	it	eq
 8010590:	f8c8 1000 	streq.w	r1, [r8]
 8010594:	5162      	str	r2, [r4, r5]
 8010596:	604b      	str	r3, [r1, #4]
 8010598:	4630      	mov	r0, r6
 801059a:	f000 f9bd 	bl	8010918 <__malloc_unlock>
 801059e:	f104 000b 	add.w	r0, r4, #11
 80105a2:	1d23      	adds	r3, r4, #4
 80105a4:	f020 0007 	bic.w	r0, r0, #7
 80105a8:	1ac2      	subs	r2, r0, r3
 80105aa:	bf1c      	itt	ne
 80105ac:	1a1b      	subne	r3, r3, r0
 80105ae:	50a3      	strne	r3, [r4, r2]
 80105b0:	e7af      	b.n	8010512 <_malloc_r+0x22>
 80105b2:	6862      	ldr	r2, [r4, #4]
 80105b4:	42a3      	cmp	r3, r4
 80105b6:	bf0c      	ite	eq
 80105b8:	f8c8 2000 	streq.w	r2, [r8]
 80105bc:	605a      	strne	r2, [r3, #4]
 80105be:	e7eb      	b.n	8010598 <_malloc_r+0xa8>
 80105c0:	4623      	mov	r3, r4
 80105c2:	6864      	ldr	r4, [r4, #4]
 80105c4:	e7ae      	b.n	8010524 <_malloc_r+0x34>
 80105c6:	463c      	mov	r4, r7
 80105c8:	687f      	ldr	r7, [r7, #4]
 80105ca:	e7b6      	b.n	801053a <_malloc_r+0x4a>
 80105cc:	461a      	mov	r2, r3
 80105ce:	685b      	ldr	r3, [r3, #4]
 80105d0:	42a3      	cmp	r3, r4
 80105d2:	d1fb      	bne.n	80105cc <_malloc_r+0xdc>
 80105d4:	2300      	movs	r3, #0
 80105d6:	6053      	str	r3, [r2, #4]
 80105d8:	e7de      	b.n	8010598 <_malloc_r+0xa8>
 80105da:	230c      	movs	r3, #12
 80105dc:	6033      	str	r3, [r6, #0]
 80105de:	4630      	mov	r0, r6
 80105e0:	f000 f99a 	bl	8010918 <__malloc_unlock>
 80105e4:	e794      	b.n	8010510 <_malloc_r+0x20>
 80105e6:	6005      	str	r5, [r0, #0]
 80105e8:	e7d6      	b.n	8010598 <_malloc_r+0xa8>
 80105ea:	bf00      	nop
 80105ec:	20005b38 	.word	0x20005b38

080105f0 <_printf_common>:
 80105f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105f4:	4616      	mov	r6, r2
 80105f6:	4698      	mov	r8, r3
 80105f8:	688a      	ldr	r2, [r1, #8]
 80105fa:	690b      	ldr	r3, [r1, #16]
 80105fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010600:	4293      	cmp	r3, r2
 8010602:	bfb8      	it	lt
 8010604:	4613      	movlt	r3, r2
 8010606:	6033      	str	r3, [r6, #0]
 8010608:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801060c:	4607      	mov	r7, r0
 801060e:	460c      	mov	r4, r1
 8010610:	b10a      	cbz	r2, 8010616 <_printf_common+0x26>
 8010612:	3301      	adds	r3, #1
 8010614:	6033      	str	r3, [r6, #0]
 8010616:	6823      	ldr	r3, [r4, #0]
 8010618:	0699      	lsls	r1, r3, #26
 801061a:	bf42      	ittt	mi
 801061c:	6833      	ldrmi	r3, [r6, #0]
 801061e:	3302      	addmi	r3, #2
 8010620:	6033      	strmi	r3, [r6, #0]
 8010622:	6825      	ldr	r5, [r4, #0]
 8010624:	f015 0506 	ands.w	r5, r5, #6
 8010628:	d106      	bne.n	8010638 <_printf_common+0x48>
 801062a:	f104 0a19 	add.w	sl, r4, #25
 801062e:	68e3      	ldr	r3, [r4, #12]
 8010630:	6832      	ldr	r2, [r6, #0]
 8010632:	1a9b      	subs	r3, r3, r2
 8010634:	42ab      	cmp	r3, r5
 8010636:	dc26      	bgt.n	8010686 <_printf_common+0x96>
 8010638:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801063c:	6822      	ldr	r2, [r4, #0]
 801063e:	3b00      	subs	r3, #0
 8010640:	bf18      	it	ne
 8010642:	2301      	movne	r3, #1
 8010644:	0692      	lsls	r2, r2, #26
 8010646:	d42b      	bmi.n	80106a0 <_printf_common+0xb0>
 8010648:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801064c:	4641      	mov	r1, r8
 801064e:	4638      	mov	r0, r7
 8010650:	47c8      	blx	r9
 8010652:	3001      	adds	r0, #1
 8010654:	d01e      	beq.n	8010694 <_printf_common+0xa4>
 8010656:	6823      	ldr	r3, [r4, #0]
 8010658:	6922      	ldr	r2, [r4, #16]
 801065a:	f003 0306 	and.w	r3, r3, #6
 801065e:	2b04      	cmp	r3, #4
 8010660:	bf02      	ittt	eq
 8010662:	68e5      	ldreq	r5, [r4, #12]
 8010664:	6833      	ldreq	r3, [r6, #0]
 8010666:	1aed      	subeq	r5, r5, r3
 8010668:	68a3      	ldr	r3, [r4, #8]
 801066a:	bf0c      	ite	eq
 801066c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010670:	2500      	movne	r5, #0
 8010672:	4293      	cmp	r3, r2
 8010674:	bfc4      	itt	gt
 8010676:	1a9b      	subgt	r3, r3, r2
 8010678:	18ed      	addgt	r5, r5, r3
 801067a:	2600      	movs	r6, #0
 801067c:	341a      	adds	r4, #26
 801067e:	42b5      	cmp	r5, r6
 8010680:	d11a      	bne.n	80106b8 <_printf_common+0xc8>
 8010682:	2000      	movs	r0, #0
 8010684:	e008      	b.n	8010698 <_printf_common+0xa8>
 8010686:	2301      	movs	r3, #1
 8010688:	4652      	mov	r2, sl
 801068a:	4641      	mov	r1, r8
 801068c:	4638      	mov	r0, r7
 801068e:	47c8      	blx	r9
 8010690:	3001      	adds	r0, #1
 8010692:	d103      	bne.n	801069c <_printf_common+0xac>
 8010694:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801069c:	3501      	adds	r5, #1
 801069e:	e7c6      	b.n	801062e <_printf_common+0x3e>
 80106a0:	18e1      	adds	r1, r4, r3
 80106a2:	1c5a      	adds	r2, r3, #1
 80106a4:	2030      	movs	r0, #48	@ 0x30
 80106a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80106aa:	4422      	add	r2, r4
 80106ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80106b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80106b4:	3302      	adds	r3, #2
 80106b6:	e7c7      	b.n	8010648 <_printf_common+0x58>
 80106b8:	2301      	movs	r3, #1
 80106ba:	4622      	mov	r2, r4
 80106bc:	4641      	mov	r1, r8
 80106be:	4638      	mov	r0, r7
 80106c0:	47c8      	blx	r9
 80106c2:	3001      	adds	r0, #1
 80106c4:	d0e6      	beq.n	8010694 <_printf_common+0xa4>
 80106c6:	3601      	adds	r6, #1
 80106c8:	e7d9      	b.n	801067e <_printf_common+0x8e>
	...

080106cc <_printf_i>:
 80106cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80106d0:	7e0f      	ldrb	r7, [r1, #24]
 80106d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80106d4:	2f78      	cmp	r7, #120	@ 0x78
 80106d6:	4691      	mov	r9, r2
 80106d8:	4680      	mov	r8, r0
 80106da:	460c      	mov	r4, r1
 80106dc:	469a      	mov	sl, r3
 80106de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80106e2:	d807      	bhi.n	80106f4 <_printf_i+0x28>
 80106e4:	2f62      	cmp	r7, #98	@ 0x62
 80106e6:	d80a      	bhi.n	80106fe <_printf_i+0x32>
 80106e8:	2f00      	cmp	r7, #0
 80106ea:	f000 80d2 	beq.w	8010892 <_printf_i+0x1c6>
 80106ee:	2f58      	cmp	r7, #88	@ 0x58
 80106f0:	f000 80b9 	beq.w	8010866 <_printf_i+0x19a>
 80106f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80106f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80106fc:	e03a      	b.n	8010774 <_printf_i+0xa8>
 80106fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8010702:	2b15      	cmp	r3, #21
 8010704:	d8f6      	bhi.n	80106f4 <_printf_i+0x28>
 8010706:	a101      	add	r1, pc, #4	@ (adr r1, 801070c <_printf_i+0x40>)
 8010708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801070c:	08010765 	.word	0x08010765
 8010710:	08010779 	.word	0x08010779
 8010714:	080106f5 	.word	0x080106f5
 8010718:	080106f5 	.word	0x080106f5
 801071c:	080106f5 	.word	0x080106f5
 8010720:	080106f5 	.word	0x080106f5
 8010724:	08010779 	.word	0x08010779
 8010728:	080106f5 	.word	0x080106f5
 801072c:	080106f5 	.word	0x080106f5
 8010730:	080106f5 	.word	0x080106f5
 8010734:	080106f5 	.word	0x080106f5
 8010738:	08010879 	.word	0x08010879
 801073c:	080107a3 	.word	0x080107a3
 8010740:	08010833 	.word	0x08010833
 8010744:	080106f5 	.word	0x080106f5
 8010748:	080106f5 	.word	0x080106f5
 801074c:	0801089b 	.word	0x0801089b
 8010750:	080106f5 	.word	0x080106f5
 8010754:	080107a3 	.word	0x080107a3
 8010758:	080106f5 	.word	0x080106f5
 801075c:	080106f5 	.word	0x080106f5
 8010760:	0801083b 	.word	0x0801083b
 8010764:	6833      	ldr	r3, [r6, #0]
 8010766:	1d1a      	adds	r2, r3, #4
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	6032      	str	r2, [r6, #0]
 801076c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010770:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010774:	2301      	movs	r3, #1
 8010776:	e09d      	b.n	80108b4 <_printf_i+0x1e8>
 8010778:	6833      	ldr	r3, [r6, #0]
 801077a:	6820      	ldr	r0, [r4, #0]
 801077c:	1d19      	adds	r1, r3, #4
 801077e:	6031      	str	r1, [r6, #0]
 8010780:	0606      	lsls	r6, r0, #24
 8010782:	d501      	bpl.n	8010788 <_printf_i+0xbc>
 8010784:	681d      	ldr	r5, [r3, #0]
 8010786:	e003      	b.n	8010790 <_printf_i+0xc4>
 8010788:	0645      	lsls	r5, r0, #25
 801078a:	d5fb      	bpl.n	8010784 <_printf_i+0xb8>
 801078c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010790:	2d00      	cmp	r5, #0
 8010792:	da03      	bge.n	801079c <_printf_i+0xd0>
 8010794:	232d      	movs	r3, #45	@ 0x2d
 8010796:	426d      	negs	r5, r5
 8010798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801079c:	4859      	ldr	r0, [pc, #356]	@ (8010904 <_printf_i+0x238>)
 801079e:	230a      	movs	r3, #10
 80107a0:	e011      	b.n	80107c6 <_printf_i+0xfa>
 80107a2:	6821      	ldr	r1, [r4, #0]
 80107a4:	6833      	ldr	r3, [r6, #0]
 80107a6:	0608      	lsls	r0, r1, #24
 80107a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80107ac:	d402      	bmi.n	80107b4 <_printf_i+0xe8>
 80107ae:	0649      	lsls	r1, r1, #25
 80107b0:	bf48      	it	mi
 80107b2:	b2ad      	uxthmi	r5, r5
 80107b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80107b6:	4853      	ldr	r0, [pc, #332]	@ (8010904 <_printf_i+0x238>)
 80107b8:	6033      	str	r3, [r6, #0]
 80107ba:	bf14      	ite	ne
 80107bc:	230a      	movne	r3, #10
 80107be:	2308      	moveq	r3, #8
 80107c0:	2100      	movs	r1, #0
 80107c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80107c6:	6866      	ldr	r6, [r4, #4]
 80107c8:	60a6      	str	r6, [r4, #8]
 80107ca:	2e00      	cmp	r6, #0
 80107cc:	bfa2      	ittt	ge
 80107ce:	6821      	ldrge	r1, [r4, #0]
 80107d0:	f021 0104 	bicge.w	r1, r1, #4
 80107d4:	6021      	strge	r1, [r4, #0]
 80107d6:	b90d      	cbnz	r5, 80107dc <_printf_i+0x110>
 80107d8:	2e00      	cmp	r6, #0
 80107da:	d04b      	beq.n	8010874 <_printf_i+0x1a8>
 80107dc:	4616      	mov	r6, r2
 80107de:	fbb5 f1f3 	udiv	r1, r5, r3
 80107e2:	fb03 5711 	mls	r7, r3, r1, r5
 80107e6:	5dc7      	ldrb	r7, [r0, r7]
 80107e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80107ec:	462f      	mov	r7, r5
 80107ee:	42bb      	cmp	r3, r7
 80107f0:	460d      	mov	r5, r1
 80107f2:	d9f4      	bls.n	80107de <_printf_i+0x112>
 80107f4:	2b08      	cmp	r3, #8
 80107f6:	d10b      	bne.n	8010810 <_printf_i+0x144>
 80107f8:	6823      	ldr	r3, [r4, #0]
 80107fa:	07df      	lsls	r7, r3, #31
 80107fc:	d508      	bpl.n	8010810 <_printf_i+0x144>
 80107fe:	6923      	ldr	r3, [r4, #16]
 8010800:	6861      	ldr	r1, [r4, #4]
 8010802:	4299      	cmp	r1, r3
 8010804:	bfde      	ittt	le
 8010806:	2330      	movle	r3, #48	@ 0x30
 8010808:	f806 3c01 	strble.w	r3, [r6, #-1]
 801080c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8010810:	1b92      	subs	r2, r2, r6
 8010812:	6122      	str	r2, [r4, #16]
 8010814:	f8cd a000 	str.w	sl, [sp]
 8010818:	464b      	mov	r3, r9
 801081a:	aa03      	add	r2, sp, #12
 801081c:	4621      	mov	r1, r4
 801081e:	4640      	mov	r0, r8
 8010820:	f7ff fee6 	bl	80105f0 <_printf_common>
 8010824:	3001      	adds	r0, #1
 8010826:	d14a      	bne.n	80108be <_printf_i+0x1f2>
 8010828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801082c:	b004      	add	sp, #16
 801082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010832:	6823      	ldr	r3, [r4, #0]
 8010834:	f043 0320 	orr.w	r3, r3, #32
 8010838:	6023      	str	r3, [r4, #0]
 801083a:	4833      	ldr	r0, [pc, #204]	@ (8010908 <_printf_i+0x23c>)
 801083c:	2778      	movs	r7, #120	@ 0x78
 801083e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010842:	6823      	ldr	r3, [r4, #0]
 8010844:	6831      	ldr	r1, [r6, #0]
 8010846:	061f      	lsls	r7, r3, #24
 8010848:	f851 5b04 	ldr.w	r5, [r1], #4
 801084c:	d402      	bmi.n	8010854 <_printf_i+0x188>
 801084e:	065f      	lsls	r7, r3, #25
 8010850:	bf48      	it	mi
 8010852:	b2ad      	uxthmi	r5, r5
 8010854:	6031      	str	r1, [r6, #0]
 8010856:	07d9      	lsls	r1, r3, #31
 8010858:	bf44      	itt	mi
 801085a:	f043 0320 	orrmi.w	r3, r3, #32
 801085e:	6023      	strmi	r3, [r4, #0]
 8010860:	b11d      	cbz	r5, 801086a <_printf_i+0x19e>
 8010862:	2310      	movs	r3, #16
 8010864:	e7ac      	b.n	80107c0 <_printf_i+0xf4>
 8010866:	4827      	ldr	r0, [pc, #156]	@ (8010904 <_printf_i+0x238>)
 8010868:	e7e9      	b.n	801083e <_printf_i+0x172>
 801086a:	6823      	ldr	r3, [r4, #0]
 801086c:	f023 0320 	bic.w	r3, r3, #32
 8010870:	6023      	str	r3, [r4, #0]
 8010872:	e7f6      	b.n	8010862 <_printf_i+0x196>
 8010874:	4616      	mov	r6, r2
 8010876:	e7bd      	b.n	80107f4 <_printf_i+0x128>
 8010878:	6833      	ldr	r3, [r6, #0]
 801087a:	6825      	ldr	r5, [r4, #0]
 801087c:	6961      	ldr	r1, [r4, #20]
 801087e:	1d18      	adds	r0, r3, #4
 8010880:	6030      	str	r0, [r6, #0]
 8010882:	062e      	lsls	r6, r5, #24
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	d501      	bpl.n	801088c <_printf_i+0x1c0>
 8010888:	6019      	str	r1, [r3, #0]
 801088a:	e002      	b.n	8010892 <_printf_i+0x1c6>
 801088c:	0668      	lsls	r0, r5, #25
 801088e:	d5fb      	bpl.n	8010888 <_printf_i+0x1bc>
 8010890:	8019      	strh	r1, [r3, #0]
 8010892:	2300      	movs	r3, #0
 8010894:	6123      	str	r3, [r4, #16]
 8010896:	4616      	mov	r6, r2
 8010898:	e7bc      	b.n	8010814 <_printf_i+0x148>
 801089a:	6833      	ldr	r3, [r6, #0]
 801089c:	1d1a      	adds	r2, r3, #4
 801089e:	6032      	str	r2, [r6, #0]
 80108a0:	681e      	ldr	r6, [r3, #0]
 80108a2:	6862      	ldr	r2, [r4, #4]
 80108a4:	2100      	movs	r1, #0
 80108a6:	4630      	mov	r0, r6
 80108a8:	f7ef fc9a 	bl	80001e0 <memchr>
 80108ac:	b108      	cbz	r0, 80108b2 <_printf_i+0x1e6>
 80108ae:	1b80      	subs	r0, r0, r6
 80108b0:	6060      	str	r0, [r4, #4]
 80108b2:	6863      	ldr	r3, [r4, #4]
 80108b4:	6123      	str	r3, [r4, #16]
 80108b6:	2300      	movs	r3, #0
 80108b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80108bc:	e7aa      	b.n	8010814 <_printf_i+0x148>
 80108be:	6923      	ldr	r3, [r4, #16]
 80108c0:	4632      	mov	r2, r6
 80108c2:	4649      	mov	r1, r9
 80108c4:	4640      	mov	r0, r8
 80108c6:	47d0      	blx	sl
 80108c8:	3001      	adds	r0, #1
 80108ca:	d0ad      	beq.n	8010828 <_printf_i+0x15c>
 80108cc:	6823      	ldr	r3, [r4, #0]
 80108ce:	079b      	lsls	r3, r3, #30
 80108d0:	d413      	bmi.n	80108fa <_printf_i+0x22e>
 80108d2:	68e0      	ldr	r0, [r4, #12]
 80108d4:	9b03      	ldr	r3, [sp, #12]
 80108d6:	4298      	cmp	r0, r3
 80108d8:	bfb8      	it	lt
 80108da:	4618      	movlt	r0, r3
 80108dc:	e7a6      	b.n	801082c <_printf_i+0x160>
 80108de:	2301      	movs	r3, #1
 80108e0:	4632      	mov	r2, r6
 80108e2:	4649      	mov	r1, r9
 80108e4:	4640      	mov	r0, r8
 80108e6:	47d0      	blx	sl
 80108e8:	3001      	adds	r0, #1
 80108ea:	d09d      	beq.n	8010828 <_printf_i+0x15c>
 80108ec:	3501      	adds	r5, #1
 80108ee:	68e3      	ldr	r3, [r4, #12]
 80108f0:	9903      	ldr	r1, [sp, #12]
 80108f2:	1a5b      	subs	r3, r3, r1
 80108f4:	42ab      	cmp	r3, r5
 80108f6:	dcf2      	bgt.n	80108de <_printf_i+0x212>
 80108f8:	e7eb      	b.n	80108d2 <_printf_i+0x206>
 80108fa:	2500      	movs	r5, #0
 80108fc:	f104 0619 	add.w	r6, r4, #25
 8010900:	e7f5      	b.n	80108ee <_printf_i+0x222>
 8010902:	bf00      	nop
 8010904:	08011da9 	.word	0x08011da9
 8010908:	08011dba 	.word	0x08011dba

0801090c <__malloc_lock>:
 801090c:	4801      	ldr	r0, [pc, #4]	@ (8010914 <__malloc_lock+0x8>)
 801090e:	f7ff bc1b 	b.w	8010148 <__retarget_lock_acquire_recursive>
 8010912:	bf00      	nop
 8010914:	20005b30 	.word	0x20005b30

08010918 <__malloc_unlock>:
 8010918:	4801      	ldr	r0, [pc, #4]	@ (8010920 <__malloc_unlock+0x8>)
 801091a:	f7ff bc16 	b.w	801014a <__retarget_lock_release_recursive>
 801091e:	bf00      	nop
 8010920:	20005b30 	.word	0x20005b30

08010924 <_realloc_r>:
 8010924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010928:	4680      	mov	r8, r0
 801092a:	4615      	mov	r5, r2
 801092c:	460c      	mov	r4, r1
 801092e:	b921      	cbnz	r1, 801093a <_realloc_r+0x16>
 8010930:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010934:	4611      	mov	r1, r2
 8010936:	f7ff bddb 	b.w	80104f0 <_malloc_r>
 801093a:	b92a      	cbnz	r2, 8010948 <_realloc_r+0x24>
 801093c:	f7ff fc14 	bl	8010168 <_free_r>
 8010940:	2400      	movs	r4, #0
 8010942:	4620      	mov	r0, r4
 8010944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010948:	f000 f844 	bl	80109d4 <_malloc_usable_size_r>
 801094c:	4285      	cmp	r5, r0
 801094e:	4606      	mov	r6, r0
 8010950:	d802      	bhi.n	8010958 <_realloc_r+0x34>
 8010952:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8010956:	d8f4      	bhi.n	8010942 <_realloc_r+0x1e>
 8010958:	4629      	mov	r1, r5
 801095a:	4640      	mov	r0, r8
 801095c:	f7ff fdc8 	bl	80104f0 <_malloc_r>
 8010960:	4607      	mov	r7, r0
 8010962:	2800      	cmp	r0, #0
 8010964:	d0ec      	beq.n	8010940 <_realloc_r+0x1c>
 8010966:	42b5      	cmp	r5, r6
 8010968:	462a      	mov	r2, r5
 801096a:	4621      	mov	r1, r4
 801096c:	bf28      	it	cs
 801096e:	4632      	movcs	r2, r6
 8010970:	f7ff fbec 	bl	801014c <memcpy>
 8010974:	4621      	mov	r1, r4
 8010976:	4640      	mov	r0, r8
 8010978:	f7ff fbf6 	bl	8010168 <_free_r>
 801097c:	463c      	mov	r4, r7
 801097e:	e7e0      	b.n	8010942 <_realloc_r+0x1e>

08010980 <memmove>:
 8010980:	4288      	cmp	r0, r1
 8010982:	b510      	push	{r4, lr}
 8010984:	eb01 0402 	add.w	r4, r1, r2
 8010988:	d902      	bls.n	8010990 <memmove+0x10>
 801098a:	4284      	cmp	r4, r0
 801098c:	4623      	mov	r3, r4
 801098e:	d807      	bhi.n	80109a0 <memmove+0x20>
 8010990:	1e43      	subs	r3, r0, #1
 8010992:	42a1      	cmp	r1, r4
 8010994:	d008      	beq.n	80109a8 <memmove+0x28>
 8010996:	f811 2b01 	ldrb.w	r2, [r1], #1
 801099a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801099e:	e7f8      	b.n	8010992 <memmove+0x12>
 80109a0:	4402      	add	r2, r0
 80109a2:	4601      	mov	r1, r0
 80109a4:	428a      	cmp	r2, r1
 80109a6:	d100      	bne.n	80109aa <memmove+0x2a>
 80109a8:	bd10      	pop	{r4, pc}
 80109aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109b2:	e7f7      	b.n	80109a4 <memmove+0x24>

080109b4 <_sbrk_r>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	4d06      	ldr	r5, [pc, #24]	@ (80109d0 <_sbrk_r+0x1c>)
 80109b8:	2300      	movs	r3, #0
 80109ba:	4604      	mov	r4, r0
 80109bc:	4608      	mov	r0, r1
 80109be:	602b      	str	r3, [r5, #0]
 80109c0:	f7f6 fb8e 	bl	80070e0 <_sbrk>
 80109c4:	1c43      	adds	r3, r0, #1
 80109c6:	d102      	bne.n	80109ce <_sbrk_r+0x1a>
 80109c8:	682b      	ldr	r3, [r5, #0]
 80109ca:	b103      	cbz	r3, 80109ce <_sbrk_r+0x1a>
 80109cc:	6023      	str	r3, [r4, #0]
 80109ce:	bd38      	pop	{r3, r4, r5, pc}
 80109d0:	20005b2c 	.word	0x20005b2c

080109d4 <_malloc_usable_size_r>:
 80109d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80109d8:	1f18      	subs	r0, r3, #4
 80109da:	2b00      	cmp	r3, #0
 80109dc:	bfbc      	itt	lt
 80109de:	580b      	ldrlt	r3, [r1, r0]
 80109e0:	18c0      	addlt	r0, r0, r3
 80109e2:	4770      	bx	lr
 80109e4:	0000      	movs	r0, r0
	...

080109e8 <cos>:
 80109e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109ea:	ec53 2b10 	vmov	r2, r3, d0
 80109ee:	4826      	ldr	r0, [pc, #152]	@ (8010a88 <cos+0xa0>)
 80109f0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80109f4:	4281      	cmp	r1, r0
 80109f6:	d806      	bhi.n	8010a06 <cos+0x1e>
 80109f8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010a80 <cos+0x98>
 80109fc:	b005      	add	sp, #20
 80109fe:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a02:	f000 bded 	b.w	80115e0 <__kernel_cos>
 8010a06:	4821      	ldr	r0, [pc, #132]	@ (8010a8c <cos+0xa4>)
 8010a08:	4281      	cmp	r1, r0
 8010a0a:	d908      	bls.n	8010a1e <cos+0x36>
 8010a0c:	4610      	mov	r0, r2
 8010a0e:	4619      	mov	r1, r3
 8010a10:	f7ef fc3a 	bl	8000288 <__aeabi_dsub>
 8010a14:	ec41 0b10 	vmov	d0, r0, r1
 8010a18:	b005      	add	sp, #20
 8010a1a:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a1e:	4668      	mov	r0, sp
 8010a20:	f000 f88a 	bl	8010b38 <__ieee754_rem_pio2>
 8010a24:	f000 0003 	and.w	r0, r0, #3
 8010a28:	2801      	cmp	r0, #1
 8010a2a:	d00b      	beq.n	8010a44 <cos+0x5c>
 8010a2c:	2802      	cmp	r0, #2
 8010a2e:	d015      	beq.n	8010a5c <cos+0x74>
 8010a30:	b9d8      	cbnz	r0, 8010a6a <cos+0x82>
 8010a32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a36:	ed9d 0b00 	vldr	d0, [sp]
 8010a3a:	f000 fdd1 	bl	80115e0 <__kernel_cos>
 8010a3e:	ec51 0b10 	vmov	r0, r1, d0
 8010a42:	e7e7      	b.n	8010a14 <cos+0x2c>
 8010a44:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a48:	ed9d 0b00 	vldr	d0, [sp]
 8010a4c:	f000 fe90 	bl	8011770 <__kernel_sin>
 8010a50:	ec53 2b10 	vmov	r2, r3, d0
 8010a54:	4610      	mov	r0, r2
 8010a56:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010a5a:	e7db      	b.n	8010a14 <cos+0x2c>
 8010a5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a60:	ed9d 0b00 	vldr	d0, [sp]
 8010a64:	f000 fdbc 	bl	80115e0 <__kernel_cos>
 8010a68:	e7f2      	b.n	8010a50 <cos+0x68>
 8010a6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a6e:	ed9d 0b00 	vldr	d0, [sp]
 8010a72:	2001      	movs	r0, #1
 8010a74:	f000 fe7c 	bl	8011770 <__kernel_sin>
 8010a78:	e7e1      	b.n	8010a3e <cos+0x56>
 8010a7a:	bf00      	nop
 8010a7c:	f3af 8000 	nop.w
	...
 8010a88:	3fe921fb 	.word	0x3fe921fb
 8010a8c:	7fefffff 	.word	0x7fefffff

08010a90 <sin>:
 8010a90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a92:	ec53 2b10 	vmov	r2, r3, d0
 8010a96:	4826      	ldr	r0, [pc, #152]	@ (8010b30 <sin+0xa0>)
 8010a98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010a9c:	4281      	cmp	r1, r0
 8010a9e:	d807      	bhi.n	8010ab0 <sin+0x20>
 8010aa0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8010b28 <sin+0x98>
 8010aa4:	2000      	movs	r0, #0
 8010aa6:	b005      	add	sp, #20
 8010aa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8010aac:	f000 be60 	b.w	8011770 <__kernel_sin>
 8010ab0:	4820      	ldr	r0, [pc, #128]	@ (8010b34 <sin+0xa4>)
 8010ab2:	4281      	cmp	r1, r0
 8010ab4:	d908      	bls.n	8010ac8 <sin+0x38>
 8010ab6:	4610      	mov	r0, r2
 8010ab8:	4619      	mov	r1, r3
 8010aba:	f7ef fbe5 	bl	8000288 <__aeabi_dsub>
 8010abe:	ec41 0b10 	vmov	d0, r0, r1
 8010ac2:	b005      	add	sp, #20
 8010ac4:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ac8:	4668      	mov	r0, sp
 8010aca:	f000 f835 	bl	8010b38 <__ieee754_rem_pio2>
 8010ace:	f000 0003 	and.w	r0, r0, #3
 8010ad2:	2801      	cmp	r0, #1
 8010ad4:	d00c      	beq.n	8010af0 <sin+0x60>
 8010ad6:	2802      	cmp	r0, #2
 8010ad8:	d011      	beq.n	8010afe <sin+0x6e>
 8010ada:	b9e8      	cbnz	r0, 8010b18 <sin+0x88>
 8010adc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ae0:	ed9d 0b00 	vldr	d0, [sp]
 8010ae4:	2001      	movs	r0, #1
 8010ae6:	f000 fe43 	bl	8011770 <__kernel_sin>
 8010aea:	ec51 0b10 	vmov	r0, r1, d0
 8010aee:	e7e6      	b.n	8010abe <sin+0x2e>
 8010af0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010af4:	ed9d 0b00 	vldr	d0, [sp]
 8010af8:	f000 fd72 	bl	80115e0 <__kernel_cos>
 8010afc:	e7f5      	b.n	8010aea <sin+0x5a>
 8010afe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b02:	ed9d 0b00 	vldr	d0, [sp]
 8010b06:	2001      	movs	r0, #1
 8010b08:	f000 fe32 	bl	8011770 <__kernel_sin>
 8010b0c:	ec53 2b10 	vmov	r2, r3, d0
 8010b10:	4610      	mov	r0, r2
 8010b12:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8010b16:	e7d2      	b.n	8010abe <sin+0x2e>
 8010b18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010b1c:	ed9d 0b00 	vldr	d0, [sp]
 8010b20:	f000 fd5e 	bl	80115e0 <__kernel_cos>
 8010b24:	e7f2      	b.n	8010b0c <sin+0x7c>
 8010b26:	bf00      	nop
	...
 8010b30:	3fe921fb 	.word	0x3fe921fb
 8010b34:	7fefffff 	.word	0x7fefffff

08010b38 <__ieee754_rem_pio2>:
 8010b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b3c:	ec57 6b10 	vmov	r6, r7, d0
 8010b40:	4bc5      	ldr	r3, [pc, #788]	@ (8010e58 <__ieee754_rem_pio2+0x320>)
 8010b42:	b08d      	sub	sp, #52	@ 0x34
 8010b44:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8010b48:	4598      	cmp	r8, r3
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	9704      	str	r7, [sp, #16]
 8010b4e:	d807      	bhi.n	8010b60 <__ieee754_rem_pio2+0x28>
 8010b50:	2200      	movs	r2, #0
 8010b52:	2300      	movs	r3, #0
 8010b54:	ed80 0b00 	vstr	d0, [r0]
 8010b58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010b5c:	2500      	movs	r5, #0
 8010b5e:	e028      	b.n	8010bb2 <__ieee754_rem_pio2+0x7a>
 8010b60:	4bbe      	ldr	r3, [pc, #760]	@ (8010e5c <__ieee754_rem_pio2+0x324>)
 8010b62:	4598      	cmp	r8, r3
 8010b64:	d878      	bhi.n	8010c58 <__ieee754_rem_pio2+0x120>
 8010b66:	9b04      	ldr	r3, [sp, #16]
 8010b68:	4dbd      	ldr	r5, [pc, #756]	@ (8010e60 <__ieee754_rem_pio2+0x328>)
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	4630      	mov	r0, r6
 8010b6e:	a3ac      	add	r3, pc, #688	@ (adr r3, 8010e20 <__ieee754_rem_pio2+0x2e8>)
 8010b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b74:	4639      	mov	r1, r7
 8010b76:	dd38      	ble.n	8010bea <__ieee754_rem_pio2+0xb2>
 8010b78:	f7ef fb86 	bl	8000288 <__aeabi_dsub>
 8010b7c:	45a8      	cmp	r8, r5
 8010b7e:	4606      	mov	r6, r0
 8010b80:	460f      	mov	r7, r1
 8010b82:	d01a      	beq.n	8010bba <__ieee754_rem_pio2+0x82>
 8010b84:	a3a8      	add	r3, pc, #672	@ (adr r3, 8010e28 <__ieee754_rem_pio2+0x2f0>)
 8010b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b8a:	f7ef fb7d 	bl	8000288 <__aeabi_dsub>
 8010b8e:	4602      	mov	r2, r0
 8010b90:	460b      	mov	r3, r1
 8010b92:	4680      	mov	r8, r0
 8010b94:	4689      	mov	r9, r1
 8010b96:	4630      	mov	r0, r6
 8010b98:	4639      	mov	r1, r7
 8010b9a:	f7ef fb75 	bl	8000288 <__aeabi_dsub>
 8010b9e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8010e28 <__ieee754_rem_pio2+0x2f0>)
 8010ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba4:	f7ef fb70 	bl	8000288 <__aeabi_dsub>
 8010ba8:	e9c4 8900 	strd	r8, r9, [r4]
 8010bac:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010bb0:	2501      	movs	r5, #1
 8010bb2:	4628      	mov	r0, r5
 8010bb4:	b00d      	add	sp, #52	@ 0x34
 8010bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bba:	a39d      	add	r3, pc, #628	@ (adr r3, 8010e30 <__ieee754_rem_pio2+0x2f8>)
 8010bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bc0:	f7ef fb62 	bl	8000288 <__aeabi_dsub>
 8010bc4:	a39c      	add	r3, pc, #624	@ (adr r3, 8010e38 <__ieee754_rem_pio2+0x300>)
 8010bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bca:	4606      	mov	r6, r0
 8010bcc:	460f      	mov	r7, r1
 8010bce:	f7ef fb5b 	bl	8000288 <__aeabi_dsub>
 8010bd2:	4602      	mov	r2, r0
 8010bd4:	460b      	mov	r3, r1
 8010bd6:	4680      	mov	r8, r0
 8010bd8:	4689      	mov	r9, r1
 8010bda:	4630      	mov	r0, r6
 8010bdc:	4639      	mov	r1, r7
 8010bde:	f7ef fb53 	bl	8000288 <__aeabi_dsub>
 8010be2:	a395      	add	r3, pc, #596	@ (adr r3, 8010e38 <__ieee754_rem_pio2+0x300>)
 8010be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be8:	e7dc      	b.n	8010ba4 <__ieee754_rem_pio2+0x6c>
 8010bea:	f7ef fb4f 	bl	800028c <__adddf3>
 8010bee:	45a8      	cmp	r8, r5
 8010bf0:	4606      	mov	r6, r0
 8010bf2:	460f      	mov	r7, r1
 8010bf4:	d018      	beq.n	8010c28 <__ieee754_rem_pio2+0xf0>
 8010bf6:	a38c      	add	r3, pc, #560	@ (adr r3, 8010e28 <__ieee754_rem_pio2+0x2f0>)
 8010bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010bfc:	f7ef fb46 	bl	800028c <__adddf3>
 8010c00:	4602      	mov	r2, r0
 8010c02:	460b      	mov	r3, r1
 8010c04:	4680      	mov	r8, r0
 8010c06:	4689      	mov	r9, r1
 8010c08:	4630      	mov	r0, r6
 8010c0a:	4639      	mov	r1, r7
 8010c0c:	f7ef fb3c 	bl	8000288 <__aeabi_dsub>
 8010c10:	a385      	add	r3, pc, #532	@ (adr r3, 8010e28 <__ieee754_rem_pio2+0x2f0>)
 8010c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c16:	f7ef fb39 	bl	800028c <__adddf3>
 8010c1a:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010c1e:	e9c4 8900 	strd	r8, r9, [r4]
 8010c22:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010c26:	e7c4      	b.n	8010bb2 <__ieee754_rem_pio2+0x7a>
 8010c28:	a381      	add	r3, pc, #516	@ (adr r3, 8010e30 <__ieee754_rem_pio2+0x2f8>)
 8010c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c2e:	f7ef fb2d 	bl	800028c <__adddf3>
 8010c32:	a381      	add	r3, pc, #516	@ (adr r3, 8010e38 <__ieee754_rem_pio2+0x300>)
 8010c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c38:	4606      	mov	r6, r0
 8010c3a:	460f      	mov	r7, r1
 8010c3c:	f7ef fb26 	bl	800028c <__adddf3>
 8010c40:	4602      	mov	r2, r0
 8010c42:	460b      	mov	r3, r1
 8010c44:	4680      	mov	r8, r0
 8010c46:	4689      	mov	r9, r1
 8010c48:	4630      	mov	r0, r6
 8010c4a:	4639      	mov	r1, r7
 8010c4c:	f7ef fb1c 	bl	8000288 <__aeabi_dsub>
 8010c50:	a379      	add	r3, pc, #484	@ (adr r3, 8010e38 <__ieee754_rem_pio2+0x300>)
 8010c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c56:	e7de      	b.n	8010c16 <__ieee754_rem_pio2+0xde>
 8010c58:	4b82      	ldr	r3, [pc, #520]	@ (8010e64 <__ieee754_rem_pio2+0x32c>)
 8010c5a:	4598      	cmp	r8, r3
 8010c5c:	f200 80d1 	bhi.w	8010e02 <__ieee754_rem_pio2+0x2ca>
 8010c60:	f000 fe40 	bl	80118e4 <fabs>
 8010c64:	ec57 6b10 	vmov	r6, r7, d0
 8010c68:	a375      	add	r3, pc, #468	@ (adr r3, 8010e40 <__ieee754_rem_pio2+0x308>)
 8010c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c6e:	4630      	mov	r0, r6
 8010c70:	4639      	mov	r1, r7
 8010c72:	f7ef fcc1 	bl	80005f8 <__aeabi_dmul>
 8010c76:	4b7c      	ldr	r3, [pc, #496]	@ (8010e68 <__ieee754_rem_pio2+0x330>)
 8010c78:	2200      	movs	r2, #0
 8010c7a:	f7ef fb07 	bl	800028c <__adddf3>
 8010c7e:	f7ef ff55 	bl	8000b2c <__aeabi_d2iz>
 8010c82:	4605      	mov	r5, r0
 8010c84:	f7ef fc4e 	bl	8000524 <__aeabi_i2d>
 8010c88:	4602      	mov	r2, r0
 8010c8a:	460b      	mov	r3, r1
 8010c8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010c90:	a363      	add	r3, pc, #396	@ (adr r3, 8010e20 <__ieee754_rem_pio2+0x2e8>)
 8010c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c96:	f7ef fcaf 	bl	80005f8 <__aeabi_dmul>
 8010c9a:	4602      	mov	r2, r0
 8010c9c:	460b      	mov	r3, r1
 8010c9e:	4630      	mov	r0, r6
 8010ca0:	4639      	mov	r1, r7
 8010ca2:	f7ef faf1 	bl	8000288 <__aeabi_dsub>
 8010ca6:	a360      	add	r3, pc, #384	@ (adr r3, 8010e28 <__ieee754_rem_pio2+0x2f0>)
 8010ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cac:	4682      	mov	sl, r0
 8010cae:	468b      	mov	fp, r1
 8010cb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010cb4:	f7ef fca0 	bl	80005f8 <__aeabi_dmul>
 8010cb8:	2d1f      	cmp	r5, #31
 8010cba:	4606      	mov	r6, r0
 8010cbc:	460f      	mov	r7, r1
 8010cbe:	dc0c      	bgt.n	8010cda <__ieee754_rem_pio2+0x1a2>
 8010cc0:	4b6a      	ldr	r3, [pc, #424]	@ (8010e6c <__ieee754_rem_pio2+0x334>)
 8010cc2:	1e6a      	subs	r2, r5, #1
 8010cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cc8:	4543      	cmp	r3, r8
 8010cca:	d006      	beq.n	8010cda <__ieee754_rem_pio2+0x1a2>
 8010ccc:	4632      	mov	r2, r6
 8010cce:	463b      	mov	r3, r7
 8010cd0:	4650      	mov	r0, sl
 8010cd2:	4659      	mov	r1, fp
 8010cd4:	f7ef fad8 	bl	8000288 <__aeabi_dsub>
 8010cd8:	e00e      	b.n	8010cf8 <__ieee754_rem_pio2+0x1c0>
 8010cda:	463b      	mov	r3, r7
 8010cdc:	4632      	mov	r2, r6
 8010cde:	4650      	mov	r0, sl
 8010ce0:	4659      	mov	r1, fp
 8010ce2:	f7ef fad1 	bl	8000288 <__aeabi_dsub>
 8010ce6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010cea:	9305      	str	r3, [sp, #20]
 8010cec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010cf0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8010cf4:	2b10      	cmp	r3, #16
 8010cf6:	dc02      	bgt.n	8010cfe <__ieee754_rem_pio2+0x1c6>
 8010cf8:	e9c4 0100 	strd	r0, r1, [r4]
 8010cfc:	e039      	b.n	8010d72 <__ieee754_rem_pio2+0x23a>
 8010cfe:	a34c      	add	r3, pc, #304	@ (adr r3, 8010e30 <__ieee754_rem_pio2+0x2f8>)
 8010d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d08:	f7ef fc76 	bl	80005f8 <__aeabi_dmul>
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	460f      	mov	r7, r1
 8010d10:	4602      	mov	r2, r0
 8010d12:	460b      	mov	r3, r1
 8010d14:	4650      	mov	r0, sl
 8010d16:	4659      	mov	r1, fp
 8010d18:	f7ef fab6 	bl	8000288 <__aeabi_dsub>
 8010d1c:	4602      	mov	r2, r0
 8010d1e:	460b      	mov	r3, r1
 8010d20:	4680      	mov	r8, r0
 8010d22:	4689      	mov	r9, r1
 8010d24:	4650      	mov	r0, sl
 8010d26:	4659      	mov	r1, fp
 8010d28:	f7ef faae 	bl	8000288 <__aeabi_dsub>
 8010d2c:	4632      	mov	r2, r6
 8010d2e:	463b      	mov	r3, r7
 8010d30:	f7ef faaa 	bl	8000288 <__aeabi_dsub>
 8010d34:	a340      	add	r3, pc, #256	@ (adr r3, 8010e38 <__ieee754_rem_pio2+0x300>)
 8010d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d3a:	4606      	mov	r6, r0
 8010d3c:	460f      	mov	r7, r1
 8010d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010d42:	f7ef fc59 	bl	80005f8 <__aeabi_dmul>
 8010d46:	4632      	mov	r2, r6
 8010d48:	463b      	mov	r3, r7
 8010d4a:	f7ef fa9d 	bl	8000288 <__aeabi_dsub>
 8010d4e:	4602      	mov	r2, r0
 8010d50:	460b      	mov	r3, r1
 8010d52:	4606      	mov	r6, r0
 8010d54:	460f      	mov	r7, r1
 8010d56:	4640      	mov	r0, r8
 8010d58:	4649      	mov	r1, r9
 8010d5a:	f7ef fa95 	bl	8000288 <__aeabi_dsub>
 8010d5e:	9a05      	ldr	r2, [sp, #20]
 8010d60:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010d64:	1ad3      	subs	r3, r2, r3
 8010d66:	2b31      	cmp	r3, #49	@ 0x31
 8010d68:	dc20      	bgt.n	8010dac <__ieee754_rem_pio2+0x274>
 8010d6a:	e9c4 0100 	strd	r0, r1, [r4]
 8010d6e:	46c2      	mov	sl, r8
 8010d70:	46cb      	mov	fp, r9
 8010d72:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010d76:	4650      	mov	r0, sl
 8010d78:	4642      	mov	r2, r8
 8010d7a:	464b      	mov	r3, r9
 8010d7c:	4659      	mov	r1, fp
 8010d7e:	f7ef fa83 	bl	8000288 <__aeabi_dsub>
 8010d82:	463b      	mov	r3, r7
 8010d84:	4632      	mov	r2, r6
 8010d86:	f7ef fa7f 	bl	8000288 <__aeabi_dsub>
 8010d8a:	9b04      	ldr	r3, [sp, #16]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010d92:	f6bf af0e 	bge.w	8010bb2 <__ieee754_rem_pio2+0x7a>
 8010d96:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8010d9a:	6063      	str	r3, [r4, #4]
 8010d9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010da0:	f8c4 8000 	str.w	r8, [r4]
 8010da4:	60a0      	str	r0, [r4, #8]
 8010da6:	60e3      	str	r3, [r4, #12]
 8010da8:	426d      	negs	r5, r5
 8010daa:	e702      	b.n	8010bb2 <__ieee754_rem_pio2+0x7a>
 8010dac:	a326      	add	r3, pc, #152	@ (adr r3, 8010e48 <__ieee754_rem_pio2+0x310>)
 8010dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010db2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010db6:	f7ef fc1f 	bl	80005f8 <__aeabi_dmul>
 8010dba:	4606      	mov	r6, r0
 8010dbc:	460f      	mov	r7, r1
 8010dbe:	4602      	mov	r2, r0
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	4640      	mov	r0, r8
 8010dc4:	4649      	mov	r1, r9
 8010dc6:	f7ef fa5f 	bl	8000288 <__aeabi_dsub>
 8010dca:	4602      	mov	r2, r0
 8010dcc:	460b      	mov	r3, r1
 8010dce:	4682      	mov	sl, r0
 8010dd0:	468b      	mov	fp, r1
 8010dd2:	4640      	mov	r0, r8
 8010dd4:	4649      	mov	r1, r9
 8010dd6:	f7ef fa57 	bl	8000288 <__aeabi_dsub>
 8010dda:	4632      	mov	r2, r6
 8010ddc:	463b      	mov	r3, r7
 8010dde:	f7ef fa53 	bl	8000288 <__aeabi_dsub>
 8010de2:	a31b      	add	r3, pc, #108	@ (adr r3, 8010e50 <__ieee754_rem_pio2+0x318>)
 8010de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010de8:	4606      	mov	r6, r0
 8010dea:	460f      	mov	r7, r1
 8010dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010df0:	f7ef fc02 	bl	80005f8 <__aeabi_dmul>
 8010df4:	4632      	mov	r2, r6
 8010df6:	463b      	mov	r3, r7
 8010df8:	f7ef fa46 	bl	8000288 <__aeabi_dsub>
 8010dfc:	4606      	mov	r6, r0
 8010dfe:	460f      	mov	r7, r1
 8010e00:	e764      	b.n	8010ccc <__ieee754_rem_pio2+0x194>
 8010e02:	4b1b      	ldr	r3, [pc, #108]	@ (8010e70 <__ieee754_rem_pio2+0x338>)
 8010e04:	4598      	cmp	r8, r3
 8010e06:	d935      	bls.n	8010e74 <__ieee754_rem_pio2+0x33c>
 8010e08:	4632      	mov	r2, r6
 8010e0a:	463b      	mov	r3, r7
 8010e0c:	4630      	mov	r0, r6
 8010e0e:	4639      	mov	r1, r7
 8010e10:	f7ef fa3a 	bl	8000288 <__aeabi_dsub>
 8010e14:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010e18:	e9c4 0100 	strd	r0, r1, [r4]
 8010e1c:	e69e      	b.n	8010b5c <__ieee754_rem_pio2+0x24>
 8010e1e:	bf00      	nop
 8010e20:	54400000 	.word	0x54400000
 8010e24:	3ff921fb 	.word	0x3ff921fb
 8010e28:	1a626331 	.word	0x1a626331
 8010e2c:	3dd0b461 	.word	0x3dd0b461
 8010e30:	1a600000 	.word	0x1a600000
 8010e34:	3dd0b461 	.word	0x3dd0b461
 8010e38:	2e037073 	.word	0x2e037073
 8010e3c:	3ba3198a 	.word	0x3ba3198a
 8010e40:	6dc9c883 	.word	0x6dc9c883
 8010e44:	3fe45f30 	.word	0x3fe45f30
 8010e48:	2e000000 	.word	0x2e000000
 8010e4c:	3ba3198a 	.word	0x3ba3198a
 8010e50:	252049c1 	.word	0x252049c1
 8010e54:	397b839a 	.word	0x397b839a
 8010e58:	3fe921fb 	.word	0x3fe921fb
 8010e5c:	4002d97b 	.word	0x4002d97b
 8010e60:	3ff921fb 	.word	0x3ff921fb
 8010e64:	413921fb 	.word	0x413921fb
 8010e68:	3fe00000 	.word	0x3fe00000
 8010e6c:	08011dcc 	.word	0x08011dcc
 8010e70:	7fefffff 	.word	0x7fefffff
 8010e74:	ea4f 5528 	mov.w	r5, r8, asr #20
 8010e78:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8010e7c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8010e80:	4630      	mov	r0, r6
 8010e82:	460f      	mov	r7, r1
 8010e84:	f7ef fe52 	bl	8000b2c <__aeabi_d2iz>
 8010e88:	f7ef fb4c 	bl	8000524 <__aeabi_i2d>
 8010e8c:	4602      	mov	r2, r0
 8010e8e:	460b      	mov	r3, r1
 8010e90:	4630      	mov	r0, r6
 8010e92:	4639      	mov	r1, r7
 8010e94:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010e98:	f7ef f9f6 	bl	8000288 <__aeabi_dsub>
 8010e9c:	4b22      	ldr	r3, [pc, #136]	@ (8010f28 <__ieee754_rem_pio2+0x3f0>)
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	f7ef fbaa 	bl	80005f8 <__aeabi_dmul>
 8010ea4:	460f      	mov	r7, r1
 8010ea6:	4606      	mov	r6, r0
 8010ea8:	f7ef fe40 	bl	8000b2c <__aeabi_d2iz>
 8010eac:	f7ef fb3a 	bl	8000524 <__aeabi_i2d>
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	4630      	mov	r0, r6
 8010eb6:	4639      	mov	r1, r7
 8010eb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010ebc:	f7ef f9e4 	bl	8000288 <__aeabi_dsub>
 8010ec0:	4b19      	ldr	r3, [pc, #100]	@ (8010f28 <__ieee754_rem_pio2+0x3f0>)
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f7ef fb98 	bl	80005f8 <__aeabi_dmul>
 8010ec8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8010ecc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8010ed0:	f04f 0803 	mov.w	r8, #3
 8010ed4:	2600      	movs	r6, #0
 8010ed6:	2700      	movs	r7, #0
 8010ed8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8010edc:	4632      	mov	r2, r6
 8010ede:	463b      	mov	r3, r7
 8010ee0:	46c2      	mov	sl, r8
 8010ee2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8010ee6:	f7ef fdef 	bl	8000ac8 <__aeabi_dcmpeq>
 8010eea:	2800      	cmp	r0, #0
 8010eec:	d1f4      	bne.n	8010ed8 <__ieee754_rem_pio2+0x3a0>
 8010eee:	4b0f      	ldr	r3, [pc, #60]	@ (8010f2c <__ieee754_rem_pio2+0x3f4>)
 8010ef0:	9301      	str	r3, [sp, #4]
 8010ef2:	2302      	movs	r3, #2
 8010ef4:	9300      	str	r3, [sp, #0]
 8010ef6:	462a      	mov	r2, r5
 8010ef8:	4653      	mov	r3, sl
 8010efa:	4621      	mov	r1, r4
 8010efc:	a806      	add	r0, sp, #24
 8010efe:	f000 f817 	bl	8010f30 <__kernel_rem_pio2>
 8010f02:	9b04      	ldr	r3, [sp, #16]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	4605      	mov	r5, r0
 8010f08:	f6bf ae53 	bge.w	8010bb2 <__ieee754_rem_pio2+0x7a>
 8010f0c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8010f10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010f14:	e9c4 2300 	strd	r2, r3, [r4]
 8010f18:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8010f1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8010f20:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8010f24:	e740      	b.n	8010da8 <__ieee754_rem_pio2+0x270>
 8010f26:	bf00      	nop
 8010f28:	41700000 	.word	0x41700000
 8010f2c:	08011e4c 	.word	0x08011e4c

08010f30 <__kernel_rem_pio2>:
 8010f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f34:	ed2d 8b02 	vpush	{d8}
 8010f38:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8010f3c:	f112 0f14 	cmn.w	r2, #20
 8010f40:	9306      	str	r3, [sp, #24]
 8010f42:	9104      	str	r1, [sp, #16]
 8010f44:	4bbe      	ldr	r3, [pc, #760]	@ (8011240 <__kernel_rem_pio2+0x310>)
 8010f46:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8010f48:	9008      	str	r0, [sp, #32]
 8010f4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010f4e:	9300      	str	r3, [sp, #0]
 8010f50:	9b06      	ldr	r3, [sp, #24]
 8010f52:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8010f56:	bfa8      	it	ge
 8010f58:	1ed4      	subge	r4, r2, #3
 8010f5a:	9305      	str	r3, [sp, #20]
 8010f5c:	bfb2      	itee	lt
 8010f5e:	2400      	movlt	r4, #0
 8010f60:	2318      	movge	r3, #24
 8010f62:	fb94 f4f3 	sdivge	r4, r4, r3
 8010f66:	f06f 0317 	mvn.w	r3, #23
 8010f6a:	fb04 3303 	mla	r3, r4, r3, r3
 8010f6e:	eb03 0b02 	add.w	fp, r3, r2
 8010f72:	9b00      	ldr	r3, [sp, #0]
 8010f74:	9a05      	ldr	r2, [sp, #20]
 8010f76:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 8011230 <__kernel_rem_pio2+0x300>
 8010f7a:	eb03 0802 	add.w	r8, r3, r2
 8010f7e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8010f80:	1aa7      	subs	r7, r4, r2
 8010f82:	ae20      	add	r6, sp, #128	@ 0x80
 8010f84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8010f88:	2500      	movs	r5, #0
 8010f8a:	4545      	cmp	r5, r8
 8010f8c:	dd13      	ble.n	8010fb6 <__kernel_rem_pio2+0x86>
 8010f8e:	9b06      	ldr	r3, [sp, #24]
 8010f90:	aa20      	add	r2, sp, #128	@ 0x80
 8010f92:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010f96:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8010f9a:	f04f 0800 	mov.w	r8, #0
 8010f9e:	9b00      	ldr	r3, [sp, #0]
 8010fa0:	4598      	cmp	r8, r3
 8010fa2:	dc31      	bgt.n	8011008 <__kernel_rem_pio2+0xd8>
 8010fa4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 8011230 <__kernel_rem_pio2+0x300>
 8010fa8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010fac:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010fb0:	462f      	mov	r7, r5
 8010fb2:	2600      	movs	r6, #0
 8010fb4:	e01b      	b.n	8010fee <__kernel_rem_pio2+0xbe>
 8010fb6:	42ef      	cmn	r7, r5
 8010fb8:	d407      	bmi.n	8010fca <__kernel_rem_pio2+0x9a>
 8010fba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010fbe:	f7ef fab1 	bl	8000524 <__aeabi_i2d>
 8010fc2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010fc6:	3501      	adds	r5, #1
 8010fc8:	e7df      	b.n	8010f8a <__kernel_rem_pio2+0x5a>
 8010fca:	ec51 0b18 	vmov	r0, r1, d8
 8010fce:	e7f8      	b.n	8010fc2 <__kernel_rem_pio2+0x92>
 8010fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010fd4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010fd8:	f7ef fb0e 	bl	80005f8 <__aeabi_dmul>
 8010fdc:	4602      	mov	r2, r0
 8010fde:	460b      	mov	r3, r1
 8010fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010fe4:	f7ef f952 	bl	800028c <__adddf3>
 8010fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fec:	3601      	adds	r6, #1
 8010fee:	9b05      	ldr	r3, [sp, #20]
 8010ff0:	429e      	cmp	r6, r3
 8010ff2:	f1a7 0708 	sub.w	r7, r7, #8
 8010ff6:	ddeb      	ble.n	8010fd0 <__kernel_rem_pio2+0xa0>
 8010ff8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010ffc:	f108 0801 	add.w	r8, r8, #1
 8011000:	ecaa 7b02 	vstmia	sl!, {d7}
 8011004:	3508      	adds	r5, #8
 8011006:	e7ca      	b.n	8010f9e <__kernel_rem_pio2+0x6e>
 8011008:	9b00      	ldr	r3, [sp, #0]
 801100a:	f8dd 8000 	ldr.w	r8, [sp]
 801100e:	aa0c      	add	r2, sp, #48	@ 0x30
 8011010:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011014:	930a      	str	r3, [sp, #40]	@ 0x28
 8011016:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8011018:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801101c:	9309      	str	r3, [sp, #36]	@ 0x24
 801101e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8011022:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011024:	ab98      	add	r3, sp, #608	@ 0x260
 8011026:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801102a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 801102e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011032:	ac0c      	add	r4, sp, #48	@ 0x30
 8011034:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011036:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 801103a:	46a1      	mov	r9, r4
 801103c:	46c2      	mov	sl, r8
 801103e:	f1ba 0f00 	cmp.w	sl, #0
 8011042:	f1a5 0508 	sub.w	r5, r5, #8
 8011046:	dc77      	bgt.n	8011138 <__kernel_rem_pio2+0x208>
 8011048:	4658      	mov	r0, fp
 801104a:	ed9d 0b02 	vldr	d0, [sp, #8]
 801104e:	f000 fc53 	bl	80118f8 <scalbn>
 8011052:	ec57 6b10 	vmov	r6, r7, d0
 8011056:	2200      	movs	r2, #0
 8011058:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 801105c:	4630      	mov	r0, r6
 801105e:	4639      	mov	r1, r7
 8011060:	f7ef faca 	bl	80005f8 <__aeabi_dmul>
 8011064:	ec41 0b10 	vmov	d0, r0, r1
 8011068:	f000 fcc6 	bl	80119f8 <floor>
 801106c:	4b75      	ldr	r3, [pc, #468]	@ (8011244 <__kernel_rem_pio2+0x314>)
 801106e:	ec51 0b10 	vmov	r0, r1, d0
 8011072:	2200      	movs	r2, #0
 8011074:	f7ef fac0 	bl	80005f8 <__aeabi_dmul>
 8011078:	4602      	mov	r2, r0
 801107a:	460b      	mov	r3, r1
 801107c:	4630      	mov	r0, r6
 801107e:	4639      	mov	r1, r7
 8011080:	f7ef f902 	bl	8000288 <__aeabi_dsub>
 8011084:	460f      	mov	r7, r1
 8011086:	4606      	mov	r6, r0
 8011088:	f7ef fd50 	bl	8000b2c <__aeabi_d2iz>
 801108c:	9002      	str	r0, [sp, #8]
 801108e:	f7ef fa49 	bl	8000524 <__aeabi_i2d>
 8011092:	4602      	mov	r2, r0
 8011094:	460b      	mov	r3, r1
 8011096:	4630      	mov	r0, r6
 8011098:	4639      	mov	r1, r7
 801109a:	f7ef f8f5 	bl	8000288 <__aeabi_dsub>
 801109e:	f1bb 0f00 	cmp.w	fp, #0
 80110a2:	4606      	mov	r6, r0
 80110a4:	460f      	mov	r7, r1
 80110a6:	dd6c      	ble.n	8011182 <__kernel_rem_pio2+0x252>
 80110a8:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 80110ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80110ae:	9d02      	ldr	r5, [sp, #8]
 80110b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80110b4:	f1cb 0018 	rsb	r0, fp, #24
 80110b8:	fa43 f200 	asr.w	r2, r3, r0
 80110bc:	4415      	add	r5, r2
 80110be:	4082      	lsls	r2, r0
 80110c0:	1a9b      	subs	r3, r3, r2
 80110c2:	aa0c      	add	r2, sp, #48	@ 0x30
 80110c4:	9502      	str	r5, [sp, #8]
 80110c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80110ca:	f1cb 0217 	rsb	r2, fp, #23
 80110ce:	fa43 f902 	asr.w	r9, r3, r2
 80110d2:	f1b9 0f00 	cmp.w	r9, #0
 80110d6:	dd64      	ble.n	80111a2 <__kernel_rem_pio2+0x272>
 80110d8:	9b02      	ldr	r3, [sp, #8]
 80110da:	2200      	movs	r2, #0
 80110dc:	3301      	adds	r3, #1
 80110de:	9302      	str	r3, [sp, #8]
 80110e0:	4615      	mov	r5, r2
 80110e2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80110e6:	4590      	cmp	r8, r2
 80110e8:	f300 80b8 	bgt.w	801125c <__kernel_rem_pio2+0x32c>
 80110ec:	f1bb 0f00 	cmp.w	fp, #0
 80110f0:	dd07      	ble.n	8011102 <__kernel_rem_pio2+0x1d2>
 80110f2:	f1bb 0f01 	cmp.w	fp, #1
 80110f6:	f000 80bf 	beq.w	8011278 <__kernel_rem_pio2+0x348>
 80110fa:	f1bb 0f02 	cmp.w	fp, #2
 80110fe:	f000 80c6 	beq.w	801128e <__kernel_rem_pio2+0x35e>
 8011102:	f1b9 0f02 	cmp.w	r9, #2
 8011106:	d14c      	bne.n	80111a2 <__kernel_rem_pio2+0x272>
 8011108:	4632      	mov	r2, r6
 801110a:	463b      	mov	r3, r7
 801110c:	494e      	ldr	r1, [pc, #312]	@ (8011248 <__kernel_rem_pio2+0x318>)
 801110e:	2000      	movs	r0, #0
 8011110:	f7ef f8ba 	bl	8000288 <__aeabi_dsub>
 8011114:	4606      	mov	r6, r0
 8011116:	460f      	mov	r7, r1
 8011118:	2d00      	cmp	r5, #0
 801111a:	d042      	beq.n	80111a2 <__kernel_rem_pio2+0x272>
 801111c:	4658      	mov	r0, fp
 801111e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 8011238 <__kernel_rem_pio2+0x308>
 8011122:	f000 fbe9 	bl	80118f8 <scalbn>
 8011126:	4630      	mov	r0, r6
 8011128:	4639      	mov	r1, r7
 801112a:	ec53 2b10 	vmov	r2, r3, d0
 801112e:	f7ef f8ab 	bl	8000288 <__aeabi_dsub>
 8011132:	4606      	mov	r6, r0
 8011134:	460f      	mov	r7, r1
 8011136:	e034      	b.n	80111a2 <__kernel_rem_pio2+0x272>
 8011138:	4b44      	ldr	r3, [pc, #272]	@ (801124c <__kernel_rem_pio2+0x31c>)
 801113a:	2200      	movs	r2, #0
 801113c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011140:	f7ef fa5a 	bl	80005f8 <__aeabi_dmul>
 8011144:	f7ef fcf2 	bl	8000b2c <__aeabi_d2iz>
 8011148:	f7ef f9ec 	bl	8000524 <__aeabi_i2d>
 801114c:	4b40      	ldr	r3, [pc, #256]	@ (8011250 <__kernel_rem_pio2+0x320>)
 801114e:	2200      	movs	r2, #0
 8011150:	4606      	mov	r6, r0
 8011152:	460f      	mov	r7, r1
 8011154:	f7ef fa50 	bl	80005f8 <__aeabi_dmul>
 8011158:	4602      	mov	r2, r0
 801115a:	460b      	mov	r3, r1
 801115c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011160:	f7ef f892 	bl	8000288 <__aeabi_dsub>
 8011164:	f7ef fce2 	bl	8000b2c <__aeabi_d2iz>
 8011168:	e9d5 2300 	ldrd	r2, r3, [r5]
 801116c:	f849 0b04 	str.w	r0, [r9], #4
 8011170:	4639      	mov	r1, r7
 8011172:	4630      	mov	r0, r6
 8011174:	f7ef f88a 	bl	800028c <__adddf3>
 8011178:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 801117c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011180:	e75d      	b.n	801103e <__kernel_rem_pio2+0x10e>
 8011182:	d107      	bne.n	8011194 <__kernel_rem_pio2+0x264>
 8011184:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8011188:	aa0c      	add	r2, sp, #48	@ 0x30
 801118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801118e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8011192:	e79e      	b.n	80110d2 <__kernel_rem_pio2+0x1a2>
 8011194:	4b2f      	ldr	r3, [pc, #188]	@ (8011254 <__kernel_rem_pio2+0x324>)
 8011196:	2200      	movs	r2, #0
 8011198:	f7ef fcb4 	bl	8000b04 <__aeabi_dcmpge>
 801119c:	2800      	cmp	r0, #0
 801119e:	d143      	bne.n	8011228 <__kernel_rem_pio2+0x2f8>
 80111a0:	4681      	mov	r9, r0
 80111a2:	2200      	movs	r2, #0
 80111a4:	2300      	movs	r3, #0
 80111a6:	4630      	mov	r0, r6
 80111a8:	4639      	mov	r1, r7
 80111aa:	f7ef fc8d 	bl	8000ac8 <__aeabi_dcmpeq>
 80111ae:	2800      	cmp	r0, #0
 80111b0:	f000 80bf 	beq.w	8011332 <__kernel_rem_pio2+0x402>
 80111b4:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 80111b8:	2200      	movs	r2, #0
 80111ba:	9900      	ldr	r1, [sp, #0]
 80111bc:	428b      	cmp	r3, r1
 80111be:	da6e      	bge.n	801129e <__kernel_rem_pio2+0x36e>
 80111c0:	2a00      	cmp	r2, #0
 80111c2:	f000 8089 	beq.w	80112d8 <__kernel_rem_pio2+0x3a8>
 80111c6:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80111ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80111cc:	f1ab 0b18 	sub.w	fp, fp, #24
 80111d0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d0f6      	beq.n	80111c6 <__kernel_rem_pio2+0x296>
 80111d8:	4658      	mov	r0, fp
 80111da:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8011238 <__kernel_rem_pio2+0x308>
 80111de:	f000 fb8b 	bl	80118f8 <scalbn>
 80111e2:	f108 0301 	add.w	r3, r8, #1
 80111e6:	00da      	lsls	r2, r3, #3
 80111e8:	9205      	str	r2, [sp, #20]
 80111ea:	ec55 4b10 	vmov	r4, r5, d0
 80111ee:	aa70      	add	r2, sp, #448	@ 0x1c0
 80111f0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 801124c <__kernel_rem_pio2+0x31c>
 80111f4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 80111f8:	4646      	mov	r6, r8
 80111fa:	f04f 0a00 	mov.w	sl, #0
 80111fe:	2e00      	cmp	r6, #0
 8011200:	f280 80cf 	bge.w	80113a2 <__kernel_rem_pio2+0x472>
 8011204:	4644      	mov	r4, r8
 8011206:	2c00      	cmp	r4, #0
 8011208:	f2c0 80fd 	blt.w	8011406 <__kernel_rem_pio2+0x4d6>
 801120c:	4b12      	ldr	r3, [pc, #72]	@ (8011258 <__kernel_rem_pio2+0x328>)
 801120e:	461f      	mov	r7, r3
 8011210:	ab70      	add	r3, sp, #448	@ 0x1c0
 8011212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011216:	9306      	str	r3, [sp, #24]
 8011218:	f04f 0a00 	mov.w	sl, #0
 801121c:	f04f 0b00 	mov.w	fp, #0
 8011220:	2600      	movs	r6, #0
 8011222:	eba8 0504 	sub.w	r5, r8, r4
 8011226:	e0e2      	b.n	80113ee <__kernel_rem_pio2+0x4be>
 8011228:	f04f 0902 	mov.w	r9, #2
 801122c:	e754      	b.n	80110d8 <__kernel_rem_pio2+0x1a8>
 801122e:	bf00      	nop
	...
 801123c:	3ff00000 	.word	0x3ff00000
 8011240:	08011f98 	.word	0x08011f98
 8011244:	40200000 	.word	0x40200000
 8011248:	3ff00000 	.word	0x3ff00000
 801124c:	3e700000 	.word	0x3e700000
 8011250:	41700000 	.word	0x41700000
 8011254:	3fe00000 	.word	0x3fe00000
 8011258:	08011f58 	.word	0x08011f58
 801125c:	f854 3b04 	ldr.w	r3, [r4], #4
 8011260:	b945      	cbnz	r5, 8011274 <__kernel_rem_pio2+0x344>
 8011262:	b123      	cbz	r3, 801126e <__kernel_rem_pio2+0x33e>
 8011264:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8011268:	f844 3c04 	str.w	r3, [r4, #-4]
 801126c:	2301      	movs	r3, #1
 801126e:	3201      	adds	r2, #1
 8011270:	461d      	mov	r5, r3
 8011272:	e738      	b.n	80110e6 <__kernel_rem_pio2+0x1b6>
 8011274:	1acb      	subs	r3, r1, r3
 8011276:	e7f7      	b.n	8011268 <__kernel_rem_pio2+0x338>
 8011278:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 801127c:	ab0c      	add	r3, sp, #48	@ 0x30
 801127e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011282:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011286:	a90c      	add	r1, sp, #48	@ 0x30
 8011288:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801128c:	e739      	b.n	8011102 <__kernel_rem_pio2+0x1d2>
 801128e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8011292:	ab0c      	add	r3, sp, #48	@ 0x30
 8011294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011298:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801129c:	e7f3      	b.n	8011286 <__kernel_rem_pio2+0x356>
 801129e:	a90c      	add	r1, sp, #48	@ 0x30
 80112a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80112a4:	3b01      	subs	r3, #1
 80112a6:	430a      	orrs	r2, r1
 80112a8:	e787      	b.n	80111ba <__kernel_rem_pio2+0x28a>
 80112aa:	3401      	adds	r4, #1
 80112ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80112b0:	2a00      	cmp	r2, #0
 80112b2:	d0fa      	beq.n	80112aa <__kernel_rem_pio2+0x37a>
 80112b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80112b6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80112ba:	eb0d 0503 	add.w	r5, sp, r3
 80112be:	9b06      	ldr	r3, [sp, #24]
 80112c0:	aa20      	add	r2, sp, #128	@ 0x80
 80112c2:	4443      	add	r3, r8
 80112c4:	f108 0701 	add.w	r7, r8, #1
 80112c8:	3d98      	subs	r5, #152	@ 0x98
 80112ca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 80112ce:	4444      	add	r4, r8
 80112d0:	42bc      	cmp	r4, r7
 80112d2:	da04      	bge.n	80112de <__kernel_rem_pio2+0x3ae>
 80112d4:	46a0      	mov	r8, r4
 80112d6:	e6a2      	b.n	801101e <__kernel_rem_pio2+0xee>
 80112d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112da:	2401      	movs	r4, #1
 80112dc:	e7e6      	b.n	80112ac <__kernel_rem_pio2+0x37c>
 80112de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112e0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80112e4:	f7ef f91e 	bl	8000524 <__aeabi_i2d>
 80112e8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 80115b0 <__kernel_rem_pio2+0x680>
 80112ec:	e8e6 0102 	strd	r0, r1, [r6], #8
 80112f0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80112f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80112f8:	46b2      	mov	sl, r6
 80112fa:	f04f 0800 	mov.w	r8, #0
 80112fe:	9b05      	ldr	r3, [sp, #20]
 8011300:	4598      	cmp	r8, r3
 8011302:	dd05      	ble.n	8011310 <__kernel_rem_pio2+0x3e0>
 8011304:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011308:	3701      	adds	r7, #1
 801130a:	eca5 7b02 	vstmia	r5!, {d7}
 801130e:	e7df      	b.n	80112d0 <__kernel_rem_pio2+0x3a0>
 8011310:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8011314:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011318:	f7ef f96e 	bl	80005f8 <__aeabi_dmul>
 801131c:	4602      	mov	r2, r0
 801131e:	460b      	mov	r3, r1
 8011320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011324:	f7ee ffb2 	bl	800028c <__adddf3>
 8011328:	f108 0801 	add.w	r8, r8, #1
 801132c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011330:	e7e5      	b.n	80112fe <__kernel_rem_pio2+0x3ce>
 8011332:	f1cb 0000 	rsb	r0, fp, #0
 8011336:	ec47 6b10 	vmov	d0, r6, r7
 801133a:	f000 fadd 	bl	80118f8 <scalbn>
 801133e:	ec55 4b10 	vmov	r4, r5, d0
 8011342:	4b9d      	ldr	r3, [pc, #628]	@ (80115b8 <__kernel_rem_pio2+0x688>)
 8011344:	2200      	movs	r2, #0
 8011346:	4620      	mov	r0, r4
 8011348:	4629      	mov	r1, r5
 801134a:	f7ef fbdb 	bl	8000b04 <__aeabi_dcmpge>
 801134e:	b300      	cbz	r0, 8011392 <__kernel_rem_pio2+0x462>
 8011350:	4b9a      	ldr	r3, [pc, #616]	@ (80115bc <__kernel_rem_pio2+0x68c>)
 8011352:	2200      	movs	r2, #0
 8011354:	4620      	mov	r0, r4
 8011356:	4629      	mov	r1, r5
 8011358:	f7ef f94e 	bl	80005f8 <__aeabi_dmul>
 801135c:	f7ef fbe6 	bl	8000b2c <__aeabi_d2iz>
 8011360:	4606      	mov	r6, r0
 8011362:	f7ef f8df 	bl	8000524 <__aeabi_i2d>
 8011366:	4b94      	ldr	r3, [pc, #592]	@ (80115b8 <__kernel_rem_pio2+0x688>)
 8011368:	2200      	movs	r2, #0
 801136a:	f7ef f945 	bl	80005f8 <__aeabi_dmul>
 801136e:	460b      	mov	r3, r1
 8011370:	4602      	mov	r2, r0
 8011372:	4629      	mov	r1, r5
 8011374:	4620      	mov	r0, r4
 8011376:	f7ee ff87 	bl	8000288 <__aeabi_dsub>
 801137a:	f7ef fbd7 	bl	8000b2c <__aeabi_d2iz>
 801137e:	ab0c      	add	r3, sp, #48	@ 0x30
 8011380:	f10b 0b18 	add.w	fp, fp, #24
 8011384:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8011388:	f108 0801 	add.w	r8, r8, #1
 801138c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8011390:	e722      	b.n	80111d8 <__kernel_rem_pio2+0x2a8>
 8011392:	4620      	mov	r0, r4
 8011394:	4629      	mov	r1, r5
 8011396:	f7ef fbc9 	bl	8000b2c <__aeabi_d2iz>
 801139a:	ab0c      	add	r3, sp, #48	@ 0x30
 801139c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80113a0:	e71a      	b.n	80111d8 <__kernel_rem_pio2+0x2a8>
 80113a2:	ab0c      	add	r3, sp, #48	@ 0x30
 80113a4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80113a8:	f7ef f8bc 	bl	8000524 <__aeabi_i2d>
 80113ac:	4622      	mov	r2, r4
 80113ae:	462b      	mov	r3, r5
 80113b0:	f7ef f922 	bl	80005f8 <__aeabi_dmul>
 80113b4:	4652      	mov	r2, sl
 80113b6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 80113ba:	465b      	mov	r3, fp
 80113bc:	4620      	mov	r0, r4
 80113be:	4629      	mov	r1, r5
 80113c0:	f7ef f91a 	bl	80005f8 <__aeabi_dmul>
 80113c4:	3e01      	subs	r6, #1
 80113c6:	4604      	mov	r4, r0
 80113c8:	460d      	mov	r5, r1
 80113ca:	e718      	b.n	80111fe <__kernel_rem_pio2+0x2ce>
 80113cc:	9906      	ldr	r1, [sp, #24]
 80113ce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 80113d2:	9106      	str	r1, [sp, #24]
 80113d4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 80113d8:	f7ef f90e 	bl	80005f8 <__aeabi_dmul>
 80113dc:	4602      	mov	r2, r0
 80113de:	460b      	mov	r3, r1
 80113e0:	4650      	mov	r0, sl
 80113e2:	4659      	mov	r1, fp
 80113e4:	f7ee ff52 	bl	800028c <__adddf3>
 80113e8:	3601      	adds	r6, #1
 80113ea:	4682      	mov	sl, r0
 80113ec:	468b      	mov	fp, r1
 80113ee:	9b00      	ldr	r3, [sp, #0]
 80113f0:	429e      	cmp	r6, r3
 80113f2:	dc01      	bgt.n	80113f8 <__kernel_rem_pio2+0x4c8>
 80113f4:	42b5      	cmp	r5, r6
 80113f6:	dae9      	bge.n	80113cc <__kernel_rem_pio2+0x49c>
 80113f8:	ab48      	add	r3, sp, #288	@ 0x120
 80113fa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80113fe:	e9c5 ab00 	strd	sl, fp, [r5]
 8011402:	3c01      	subs	r4, #1
 8011404:	e6ff      	b.n	8011206 <__kernel_rem_pio2+0x2d6>
 8011406:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011408:	2b02      	cmp	r3, #2
 801140a:	dc0b      	bgt.n	8011424 <__kernel_rem_pio2+0x4f4>
 801140c:	2b00      	cmp	r3, #0
 801140e:	dc39      	bgt.n	8011484 <__kernel_rem_pio2+0x554>
 8011410:	d05d      	beq.n	80114ce <__kernel_rem_pio2+0x59e>
 8011412:	9b02      	ldr	r3, [sp, #8]
 8011414:	f003 0007 	and.w	r0, r3, #7
 8011418:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 801141c:	ecbd 8b02 	vpop	{d8}
 8011420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011424:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8011426:	2b03      	cmp	r3, #3
 8011428:	d1f3      	bne.n	8011412 <__kernel_rem_pio2+0x4e2>
 801142a:	9b05      	ldr	r3, [sp, #20]
 801142c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011430:	eb0d 0403 	add.w	r4, sp, r3
 8011434:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 8011438:	4625      	mov	r5, r4
 801143a:	46c2      	mov	sl, r8
 801143c:	f1ba 0f00 	cmp.w	sl, #0
 8011440:	f1a5 0508 	sub.w	r5, r5, #8
 8011444:	dc6b      	bgt.n	801151e <__kernel_rem_pio2+0x5ee>
 8011446:	4645      	mov	r5, r8
 8011448:	2d01      	cmp	r5, #1
 801144a:	f1a4 0408 	sub.w	r4, r4, #8
 801144e:	f300 8087 	bgt.w	8011560 <__kernel_rem_pio2+0x630>
 8011452:	9c05      	ldr	r4, [sp, #20]
 8011454:	ab48      	add	r3, sp, #288	@ 0x120
 8011456:	441c      	add	r4, r3
 8011458:	2000      	movs	r0, #0
 801145a:	2100      	movs	r1, #0
 801145c:	f1b8 0f01 	cmp.w	r8, #1
 8011460:	f300 809c 	bgt.w	801159c <__kernel_rem_pio2+0x66c>
 8011464:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8011468:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 801146c:	f1b9 0f00 	cmp.w	r9, #0
 8011470:	f040 80a6 	bne.w	80115c0 <__kernel_rem_pio2+0x690>
 8011474:	9b04      	ldr	r3, [sp, #16]
 8011476:	e9c3 7800 	strd	r7, r8, [r3]
 801147a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 801147e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011482:	e7c6      	b.n	8011412 <__kernel_rem_pio2+0x4e2>
 8011484:	9d05      	ldr	r5, [sp, #20]
 8011486:	ab48      	add	r3, sp, #288	@ 0x120
 8011488:	441d      	add	r5, r3
 801148a:	4644      	mov	r4, r8
 801148c:	2000      	movs	r0, #0
 801148e:	2100      	movs	r1, #0
 8011490:	2c00      	cmp	r4, #0
 8011492:	da35      	bge.n	8011500 <__kernel_rem_pio2+0x5d0>
 8011494:	f1b9 0f00 	cmp.w	r9, #0
 8011498:	d038      	beq.n	801150c <__kernel_rem_pio2+0x5dc>
 801149a:	4602      	mov	r2, r0
 801149c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80114a0:	9c04      	ldr	r4, [sp, #16]
 80114a2:	e9c4 2300 	strd	r2, r3, [r4]
 80114a6:	4602      	mov	r2, r0
 80114a8:	460b      	mov	r3, r1
 80114aa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80114ae:	f7ee feeb 	bl	8000288 <__aeabi_dsub>
 80114b2:	ad4a      	add	r5, sp, #296	@ 0x128
 80114b4:	2401      	movs	r4, #1
 80114b6:	45a0      	cmp	r8, r4
 80114b8:	da2b      	bge.n	8011512 <__kernel_rem_pio2+0x5e2>
 80114ba:	f1b9 0f00 	cmp.w	r9, #0
 80114be:	d002      	beq.n	80114c6 <__kernel_rem_pio2+0x596>
 80114c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80114c4:	4619      	mov	r1, r3
 80114c6:	9b04      	ldr	r3, [sp, #16]
 80114c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80114cc:	e7a1      	b.n	8011412 <__kernel_rem_pio2+0x4e2>
 80114ce:	9c05      	ldr	r4, [sp, #20]
 80114d0:	ab48      	add	r3, sp, #288	@ 0x120
 80114d2:	441c      	add	r4, r3
 80114d4:	2000      	movs	r0, #0
 80114d6:	2100      	movs	r1, #0
 80114d8:	f1b8 0f00 	cmp.w	r8, #0
 80114dc:	da09      	bge.n	80114f2 <__kernel_rem_pio2+0x5c2>
 80114de:	f1b9 0f00 	cmp.w	r9, #0
 80114e2:	d002      	beq.n	80114ea <__kernel_rem_pio2+0x5ba>
 80114e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80114e8:	4619      	mov	r1, r3
 80114ea:	9b04      	ldr	r3, [sp, #16]
 80114ec:	e9c3 0100 	strd	r0, r1, [r3]
 80114f0:	e78f      	b.n	8011412 <__kernel_rem_pio2+0x4e2>
 80114f2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80114f6:	f7ee fec9 	bl	800028c <__adddf3>
 80114fa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80114fe:	e7eb      	b.n	80114d8 <__kernel_rem_pio2+0x5a8>
 8011500:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8011504:	f7ee fec2 	bl	800028c <__adddf3>
 8011508:	3c01      	subs	r4, #1
 801150a:	e7c1      	b.n	8011490 <__kernel_rem_pio2+0x560>
 801150c:	4602      	mov	r2, r0
 801150e:	460b      	mov	r3, r1
 8011510:	e7c6      	b.n	80114a0 <__kernel_rem_pio2+0x570>
 8011512:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8011516:	f7ee feb9 	bl	800028c <__adddf3>
 801151a:	3401      	adds	r4, #1
 801151c:	e7cb      	b.n	80114b6 <__kernel_rem_pio2+0x586>
 801151e:	ed95 7b00 	vldr	d7, [r5]
 8011522:	ed8d 7b00 	vstr	d7, [sp]
 8011526:	ed95 7b02 	vldr	d7, [r5, #8]
 801152a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801152e:	ec53 2b17 	vmov	r2, r3, d7
 8011532:	ed8d 7b06 	vstr	d7, [sp, #24]
 8011536:	f7ee fea9 	bl	800028c <__adddf3>
 801153a:	4602      	mov	r2, r0
 801153c:	460b      	mov	r3, r1
 801153e:	4606      	mov	r6, r0
 8011540:	460f      	mov	r7, r1
 8011542:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011546:	f7ee fe9f 	bl	8000288 <__aeabi_dsub>
 801154a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801154e:	f7ee fe9d 	bl	800028c <__adddf3>
 8011552:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011556:	e9c5 0102 	strd	r0, r1, [r5, #8]
 801155a:	e9c5 6700 	strd	r6, r7, [r5]
 801155e:	e76d      	b.n	801143c <__kernel_rem_pio2+0x50c>
 8011560:	ed94 7b00 	vldr	d7, [r4]
 8011564:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8011568:	ec51 0b17 	vmov	r0, r1, d7
 801156c:	4652      	mov	r2, sl
 801156e:	465b      	mov	r3, fp
 8011570:	ed8d 7b00 	vstr	d7, [sp]
 8011574:	f7ee fe8a 	bl	800028c <__adddf3>
 8011578:	4602      	mov	r2, r0
 801157a:	460b      	mov	r3, r1
 801157c:	4606      	mov	r6, r0
 801157e:	460f      	mov	r7, r1
 8011580:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011584:	f7ee fe80 	bl	8000288 <__aeabi_dsub>
 8011588:	4652      	mov	r2, sl
 801158a:	465b      	mov	r3, fp
 801158c:	f7ee fe7e 	bl	800028c <__adddf3>
 8011590:	3d01      	subs	r5, #1
 8011592:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011596:	e9c4 6700 	strd	r6, r7, [r4]
 801159a:	e755      	b.n	8011448 <__kernel_rem_pio2+0x518>
 801159c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80115a0:	f7ee fe74 	bl	800028c <__adddf3>
 80115a4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80115a8:	e758      	b.n	801145c <__kernel_rem_pio2+0x52c>
 80115aa:	bf00      	nop
 80115ac:	f3af 8000 	nop.w
	...
 80115b8:	41700000 	.word	0x41700000
 80115bc:	3e700000 	.word	0x3e700000
 80115c0:	9b04      	ldr	r3, [sp, #16]
 80115c2:	9a04      	ldr	r2, [sp, #16]
 80115c4:	601f      	str	r7, [r3, #0]
 80115c6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80115ca:	605c      	str	r4, [r3, #4]
 80115cc:	609d      	str	r5, [r3, #8]
 80115ce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80115d2:	60d3      	str	r3, [r2, #12]
 80115d4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80115d8:	6110      	str	r0, [r2, #16]
 80115da:	6153      	str	r3, [r2, #20]
 80115dc:	e719      	b.n	8011412 <__kernel_rem_pio2+0x4e2>
 80115de:	bf00      	nop

080115e0 <__kernel_cos>:
 80115e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115e4:	ec57 6b10 	vmov	r6, r7, d0
 80115e8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80115ec:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80115f0:	ed8d 1b00 	vstr	d1, [sp]
 80115f4:	d206      	bcs.n	8011604 <__kernel_cos+0x24>
 80115f6:	4630      	mov	r0, r6
 80115f8:	4639      	mov	r1, r7
 80115fa:	f7ef fa97 	bl	8000b2c <__aeabi_d2iz>
 80115fe:	2800      	cmp	r0, #0
 8011600:	f000 8088 	beq.w	8011714 <__kernel_cos+0x134>
 8011604:	4632      	mov	r2, r6
 8011606:	463b      	mov	r3, r7
 8011608:	4630      	mov	r0, r6
 801160a:	4639      	mov	r1, r7
 801160c:	f7ee fff4 	bl	80005f8 <__aeabi_dmul>
 8011610:	4b51      	ldr	r3, [pc, #324]	@ (8011758 <__kernel_cos+0x178>)
 8011612:	2200      	movs	r2, #0
 8011614:	4604      	mov	r4, r0
 8011616:	460d      	mov	r5, r1
 8011618:	f7ee ffee 	bl	80005f8 <__aeabi_dmul>
 801161c:	a340      	add	r3, pc, #256	@ (adr r3, 8011720 <__kernel_cos+0x140>)
 801161e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011622:	4682      	mov	sl, r0
 8011624:	468b      	mov	fp, r1
 8011626:	4620      	mov	r0, r4
 8011628:	4629      	mov	r1, r5
 801162a:	f7ee ffe5 	bl	80005f8 <__aeabi_dmul>
 801162e:	a33e      	add	r3, pc, #248	@ (adr r3, 8011728 <__kernel_cos+0x148>)
 8011630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011634:	f7ee fe2a 	bl	800028c <__adddf3>
 8011638:	4622      	mov	r2, r4
 801163a:	462b      	mov	r3, r5
 801163c:	f7ee ffdc 	bl	80005f8 <__aeabi_dmul>
 8011640:	a33b      	add	r3, pc, #236	@ (adr r3, 8011730 <__kernel_cos+0x150>)
 8011642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011646:	f7ee fe1f 	bl	8000288 <__aeabi_dsub>
 801164a:	4622      	mov	r2, r4
 801164c:	462b      	mov	r3, r5
 801164e:	f7ee ffd3 	bl	80005f8 <__aeabi_dmul>
 8011652:	a339      	add	r3, pc, #228	@ (adr r3, 8011738 <__kernel_cos+0x158>)
 8011654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011658:	f7ee fe18 	bl	800028c <__adddf3>
 801165c:	4622      	mov	r2, r4
 801165e:	462b      	mov	r3, r5
 8011660:	f7ee ffca 	bl	80005f8 <__aeabi_dmul>
 8011664:	a336      	add	r3, pc, #216	@ (adr r3, 8011740 <__kernel_cos+0x160>)
 8011666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166a:	f7ee fe0d 	bl	8000288 <__aeabi_dsub>
 801166e:	4622      	mov	r2, r4
 8011670:	462b      	mov	r3, r5
 8011672:	f7ee ffc1 	bl	80005f8 <__aeabi_dmul>
 8011676:	a334      	add	r3, pc, #208	@ (adr r3, 8011748 <__kernel_cos+0x168>)
 8011678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167c:	f7ee fe06 	bl	800028c <__adddf3>
 8011680:	4622      	mov	r2, r4
 8011682:	462b      	mov	r3, r5
 8011684:	f7ee ffb8 	bl	80005f8 <__aeabi_dmul>
 8011688:	4622      	mov	r2, r4
 801168a:	462b      	mov	r3, r5
 801168c:	f7ee ffb4 	bl	80005f8 <__aeabi_dmul>
 8011690:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011694:	4604      	mov	r4, r0
 8011696:	460d      	mov	r5, r1
 8011698:	4630      	mov	r0, r6
 801169a:	4639      	mov	r1, r7
 801169c:	f7ee ffac 	bl	80005f8 <__aeabi_dmul>
 80116a0:	460b      	mov	r3, r1
 80116a2:	4602      	mov	r2, r0
 80116a4:	4629      	mov	r1, r5
 80116a6:	4620      	mov	r0, r4
 80116a8:	f7ee fdee 	bl	8000288 <__aeabi_dsub>
 80116ac:	4b2b      	ldr	r3, [pc, #172]	@ (801175c <__kernel_cos+0x17c>)
 80116ae:	4598      	cmp	r8, r3
 80116b0:	4606      	mov	r6, r0
 80116b2:	460f      	mov	r7, r1
 80116b4:	d810      	bhi.n	80116d8 <__kernel_cos+0xf8>
 80116b6:	4602      	mov	r2, r0
 80116b8:	460b      	mov	r3, r1
 80116ba:	4650      	mov	r0, sl
 80116bc:	4659      	mov	r1, fp
 80116be:	f7ee fde3 	bl	8000288 <__aeabi_dsub>
 80116c2:	460b      	mov	r3, r1
 80116c4:	4926      	ldr	r1, [pc, #152]	@ (8011760 <__kernel_cos+0x180>)
 80116c6:	4602      	mov	r2, r0
 80116c8:	2000      	movs	r0, #0
 80116ca:	f7ee fddd 	bl	8000288 <__aeabi_dsub>
 80116ce:	ec41 0b10 	vmov	d0, r0, r1
 80116d2:	b003      	add	sp, #12
 80116d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116d8:	4b22      	ldr	r3, [pc, #136]	@ (8011764 <__kernel_cos+0x184>)
 80116da:	4921      	ldr	r1, [pc, #132]	@ (8011760 <__kernel_cos+0x180>)
 80116dc:	4598      	cmp	r8, r3
 80116de:	bf8c      	ite	hi
 80116e0:	4d21      	ldrhi	r5, [pc, #132]	@ (8011768 <__kernel_cos+0x188>)
 80116e2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80116e6:	2400      	movs	r4, #0
 80116e8:	4622      	mov	r2, r4
 80116ea:	462b      	mov	r3, r5
 80116ec:	2000      	movs	r0, #0
 80116ee:	f7ee fdcb 	bl	8000288 <__aeabi_dsub>
 80116f2:	4622      	mov	r2, r4
 80116f4:	4680      	mov	r8, r0
 80116f6:	4689      	mov	r9, r1
 80116f8:	462b      	mov	r3, r5
 80116fa:	4650      	mov	r0, sl
 80116fc:	4659      	mov	r1, fp
 80116fe:	f7ee fdc3 	bl	8000288 <__aeabi_dsub>
 8011702:	4632      	mov	r2, r6
 8011704:	463b      	mov	r3, r7
 8011706:	f7ee fdbf 	bl	8000288 <__aeabi_dsub>
 801170a:	4602      	mov	r2, r0
 801170c:	460b      	mov	r3, r1
 801170e:	4640      	mov	r0, r8
 8011710:	4649      	mov	r1, r9
 8011712:	e7da      	b.n	80116ca <__kernel_cos+0xea>
 8011714:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8011750 <__kernel_cos+0x170>
 8011718:	e7db      	b.n	80116d2 <__kernel_cos+0xf2>
 801171a:	bf00      	nop
 801171c:	f3af 8000 	nop.w
 8011720:	be8838d4 	.word	0xbe8838d4
 8011724:	bda8fae9 	.word	0xbda8fae9
 8011728:	bdb4b1c4 	.word	0xbdb4b1c4
 801172c:	3e21ee9e 	.word	0x3e21ee9e
 8011730:	809c52ad 	.word	0x809c52ad
 8011734:	3e927e4f 	.word	0x3e927e4f
 8011738:	19cb1590 	.word	0x19cb1590
 801173c:	3efa01a0 	.word	0x3efa01a0
 8011740:	16c15177 	.word	0x16c15177
 8011744:	3f56c16c 	.word	0x3f56c16c
 8011748:	5555554c 	.word	0x5555554c
 801174c:	3fa55555 	.word	0x3fa55555
 8011750:	00000000 	.word	0x00000000
 8011754:	3ff00000 	.word	0x3ff00000
 8011758:	3fe00000 	.word	0x3fe00000
 801175c:	3fd33332 	.word	0x3fd33332
 8011760:	3ff00000 	.word	0x3ff00000
 8011764:	3fe90000 	.word	0x3fe90000
 8011768:	3fd20000 	.word	0x3fd20000
 801176c:	00000000 	.word	0x00000000

08011770 <__kernel_sin>:
 8011770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011774:	ec55 4b10 	vmov	r4, r5, d0
 8011778:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801177c:	b085      	sub	sp, #20
 801177e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8011782:	ed8d 1b02 	vstr	d1, [sp, #8]
 8011786:	4680      	mov	r8, r0
 8011788:	d205      	bcs.n	8011796 <__kernel_sin+0x26>
 801178a:	4620      	mov	r0, r4
 801178c:	4629      	mov	r1, r5
 801178e:	f7ef f9cd 	bl	8000b2c <__aeabi_d2iz>
 8011792:	2800      	cmp	r0, #0
 8011794:	d052      	beq.n	801183c <__kernel_sin+0xcc>
 8011796:	4622      	mov	r2, r4
 8011798:	462b      	mov	r3, r5
 801179a:	4620      	mov	r0, r4
 801179c:	4629      	mov	r1, r5
 801179e:	f7ee ff2b 	bl	80005f8 <__aeabi_dmul>
 80117a2:	4682      	mov	sl, r0
 80117a4:	468b      	mov	fp, r1
 80117a6:	4602      	mov	r2, r0
 80117a8:	460b      	mov	r3, r1
 80117aa:	4620      	mov	r0, r4
 80117ac:	4629      	mov	r1, r5
 80117ae:	f7ee ff23 	bl	80005f8 <__aeabi_dmul>
 80117b2:	a342      	add	r3, pc, #264	@ (adr r3, 80118bc <__kernel_sin+0x14c>)
 80117b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b8:	e9cd 0100 	strd	r0, r1, [sp]
 80117bc:	4650      	mov	r0, sl
 80117be:	4659      	mov	r1, fp
 80117c0:	f7ee ff1a 	bl	80005f8 <__aeabi_dmul>
 80117c4:	a33f      	add	r3, pc, #252	@ (adr r3, 80118c4 <__kernel_sin+0x154>)
 80117c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ca:	f7ee fd5d 	bl	8000288 <__aeabi_dsub>
 80117ce:	4652      	mov	r2, sl
 80117d0:	465b      	mov	r3, fp
 80117d2:	f7ee ff11 	bl	80005f8 <__aeabi_dmul>
 80117d6:	a33d      	add	r3, pc, #244	@ (adr r3, 80118cc <__kernel_sin+0x15c>)
 80117d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117dc:	f7ee fd56 	bl	800028c <__adddf3>
 80117e0:	4652      	mov	r2, sl
 80117e2:	465b      	mov	r3, fp
 80117e4:	f7ee ff08 	bl	80005f8 <__aeabi_dmul>
 80117e8:	a33a      	add	r3, pc, #232	@ (adr r3, 80118d4 <__kernel_sin+0x164>)
 80117ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ee:	f7ee fd4b 	bl	8000288 <__aeabi_dsub>
 80117f2:	4652      	mov	r2, sl
 80117f4:	465b      	mov	r3, fp
 80117f6:	f7ee feff 	bl	80005f8 <__aeabi_dmul>
 80117fa:	a338      	add	r3, pc, #224	@ (adr r3, 80118dc <__kernel_sin+0x16c>)
 80117fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011800:	f7ee fd44 	bl	800028c <__adddf3>
 8011804:	4606      	mov	r6, r0
 8011806:	460f      	mov	r7, r1
 8011808:	f1b8 0f00 	cmp.w	r8, #0
 801180c:	d11b      	bne.n	8011846 <__kernel_sin+0xd6>
 801180e:	4602      	mov	r2, r0
 8011810:	460b      	mov	r3, r1
 8011812:	4650      	mov	r0, sl
 8011814:	4659      	mov	r1, fp
 8011816:	f7ee feef 	bl	80005f8 <__aeabi_dmul>
 801181a:	a325      	add	r3, pc, #148	@ (adr r3, 80118b0 <__kernel_sin+0x140>)
 801181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011820:	f7ee fd32 	bl	8000288 <__aeabi_dsub>
 8011824:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011828:	f7ee fee6 	bl	80005f8 <__aeabi_dmul>
 801182c:	4602      	mov	r2, r0
 801182e:	460b      	mov	r3, r1
 8011830:	4620      	mov	r0, r4
 8011832:	4629      	mov	r1, r5
 8011834:	f7ee fd2a 	bl	800028c <__adddf3>
 8011838:	4604      	mov	r4, r0
 801183a:	460d      	mov	r5, r1
 801183c:	ec45 4b10 	vmov	d0, r4, r5
 8011840:	b005      	add	sp, #20
 8011842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801184a:	4b1b      	ldr	r3, [pc, #108]	@ (80118b8 <__kernel_sin+0x148>)
 801184c:	2200      	movs	r2, #0
 801184e:	f7ee fed3 	bl	80005f8 <__aeabi_dmul>
 8011852:	4632      	mov	r2, r6
 8011854:	4680      	mov	r8, r0
 8011856:	4689      	mov	r9, r1
 8011858:	463b      	mov	r3, r7
 801185a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801185e:	f7ee fecb 	bl	80005f8 <__aeabi_dmul>
 8011862:	4602      	mov	r2, r0
 8011864:	460b      	mov	r3, r1
 8011866:	4640      	mov	r0, r8
 8011868:	4649      	mov	r1, r9
 801186a:	f7ee fd0d 	bl	8000288 <__aeabi_dsub>
 801186e:	4652      	mov	r2, sl
 8011870:	465b      	mov	r3, fp
 8011872:	f7ee fec1 	bl	80005f8 <__aeabi_dmul>
 8011876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801187a:	f7ee fd05 	bl	8000288 <__aeabi_dsub>
 801187e:	a30c      	add	r3, pc, #48	@ (adr r3, 80118b0 <__kernel_sin+0x140>)
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	4606      	mov	r6, r0
 8011886:	460f      	mov	r7, r1
 8011888:	e9dd 0100 	ldrd	r0, r1, [sp]
 801188c:	f7ee feb4 	bl	80005f8 <__aeabi_dmul>
 8011890:	4602      	mov	r2, r0
 8011892:	460b      	mov	r3, r1
 8011894:	4630      	mov	r0, r6
 8011896:	4639      	mov	r1, r7
 8011898:	f7ee fcf8 	bl	800028c <__adddf3>
 801189c:	4602      	mov	r2, r0
 801189e:	460b      	mov	r3, r1
 80118a0:	4620      	mov	r0, r4
 80118a2:	4629      	mov	r1, r5
 80118a4:	f7ee fcf0 	bl	8000288 <__aeabi_dsub>
 80118a8:	e7c6      	b.n	8011838 <__kernel_sin+0xc8>
 80118aa:	bf00      	nop
 80118ac:	f3af 8000 	nop.w
 80118b0:	55555549 	.word	0x55555549
 80118b4:	3fc55555 	.word	0x3fc55555
 80118b8:	3fe00000 	.word	0x3fe00000
 80118bc:	5acfd57c 	.word	0x5acfd57c
 80118c0:	3de5d93a 	.word	0x3de5d93a
 80118c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80118c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80118cc:	57b1fe7d 	.word	0x57b1fe7d
 80118d0:	3ec71de3 	.word	0x3ec71de3
 80118d4:	19c161d5 	.word	0x19c161d5
 80118d8:	3f2a01a0 	.word	0x3f2a01a0
 80118dc:	1110f8a6 	.word	0x1110f8a6
 80118e0:	3f811111 	.word	0x3f811111

080118e4 <fabs>:
 80118e4:	ec51 0b10 	vmov	r0, r1, d0
 80118e8:	4602      	mov	r2, r0
 80118ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80118ee:	ec43 2b10 	vmov	d0, r2, r3
 80118f2:	4770      	bx	lr
 80118f4:	0000      	movs	r0, r0
	...

080118f8 <scalbn>:
 80118f8:	b570      	push	{r4, r5, r6, lr}
 80118fa:	ec55 4b10 	vmov	r4, r5, d0
 80118fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011902:	4606      	mov	r6, r0
 8011904:	462b      	mov	r3, r5
 8011906:	b991      	cbnz	r1, 801192e <scalbn+0x36>
 8011908:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 801190c:	4323      	orrs	r3, r4
 801190e:	d03d      	beq.n	801198c <scalbn+0x94>
 8011910:	4b35      	ldr	r3, [pc, #212]	@ (80119e8 <scalbn+0xf0>)
 8011912:	4620      	mov	r0, r4
 8011914:	4629      	mov	r1, r5
 8011916:	2200      	movs	r2, #0
 8011918:	f7ee fe6e 	bl	80005f8 <__aeabi_dmul>
 801191c:	4b33      	ldr	r3, [pc, #204]	@ (80119ec <scalbn+0xf4>)
 801191e:	429e      	cmp	r6, r3
 8011920:	4604      	mov	r4, r0
 8011922:	460d      	mov	r5, r1
 8011924:	da0f      	bge.n	8011946 <scalbn+0x4e>
 8011926:	a328      	add	r3, pc, #160	@ (adr r3, 80119c8 <scalbn+0xd0>)
 8011928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801192c:	e01e      	b.n	801196c <scalbn+0x74>
 801192e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8011932:	4291      	cmp	r1, r2
 8011934:	d10b      	bne.n	801194e <scalbn+0x56>
 8011936:	4622      	mov	r2, r4
 8011938:	4620      	mov	r0, r4
 801193a:	4629      	mov	r1, r5
 801193c:	f7ee fca6 	bl	800028c <__adddf3>
 8011940:	4604      	mov	r4, r0
 8011942:	460d      	mov	r5, r1
 8011944:	e022      	b.n	801198c <scalbn+0x94>
 8011946:	460b      	mov	r3, r1
 8011948:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801194c:	3936      	subs	r1, #54	@ 0x36
 801194e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8011952:	4296      	cmp	r6, r2
 8011954:	dd0d      	ble.n	8011972 <scalbn+0x7a>
 8011956:	2d00      	cmp	r5, #0
 8011958:	a11d      	add	r1, pc, #116	@ (adr r1, 80119d0 <scalbn+0xd8>)
 801195a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801195e:	da02      	bge.n	8011966 <scalbn+0x6e>
 8011960:	a11d      	add	r1, pc, #116	@ (adr r1, 80119d8 <scalbn+0xe0>)
 8011962:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011966:	a31a      	add	r3, pc, #104	@ (adr r3, 80119d0 <scalbn+0xd8>)
 8011968:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196c:	f7ee fe44 	bl	80005f8 <__aeabi_dmul>
 8011970:	e7e6      	b.n	8011940 <scalbn+0x48>
 8011972:	1872      	adds	r2, r6, r1
 8011974:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8011978:	428a      	cmp	r2, r1
 801197a:	dcec      	bgt.n	8011956 <scalbn+0x5e>
 801197c:	2a00      	cmp	r2, #0
 801197e:	dd08      	ble.n	8011992 <scalbn+0x9a>
 8011980:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011984:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8011988:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801198c:	ec45 4b10 	vmov	d0, r4, r5
 8011990:	bd70      	pop	{r4, r5, r6, pc}
 8011992:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8011996:	da08      	bge.n	80119aa <scalbn+0xb2>
 8011998:	2d00      	cmp	r5, #0
 801199a:	a10b      	add	r1, pc, #44	@ (adr r1, 80119c8 <scalbn+0xd0>)
 801199c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119a0:	dac1      	bge.n	8011926 <scalbn+0x2e>
 80119a2:	a10f      	add	r1, pc, #60	@ (adr r1, 80119e0 <scalbn+0xe8>)
 80119a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80119a8:	e7bd      	b.n	8011926 <scalbn+0x2e>
 80119aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80119ae:	3236      	adds	r2, #54	@ 0x36
 80119b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80119b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80119b8:	4620      	mov	r0, r4
 80119ba:	4b0d      	ldr	r3, [pc, #52]	@ (80119f0 <scalbn+0xf8>)
 80119bc:	4629      	mov	r1, r5
 80119be:	2200      	movs	r2, #0
 80119c0:	e7d4      	b.n	801196c <scalbn+0x74>
 80119c2:	bf00      	nop
 80119c4:	f3af 8000 	nop.w
 80119c8:	c2f8f359 	.word	0xc2f8f359
 80119cc:	01a56e1f 	.word	0x01a56e1f
 80119d0:	8800759c 	.word	0x8800759c
 80119d4:	7e37e43c 	.word	0x7e37e43c
 80119d8:	8800759c 	.word	0x8800759c
 80119dc:	fe37e43c 	.word	0xfe37e43c
 80119e0:	c2f8f359 	.word	0xc2f8f359
 80119e4:	81a56e1f 	.word	0x81a56e1f
 80119e8:	43500000 	.word	0x43500000
 80119ec:	ffff3cb0 	.word	0xffff3cb0
 80119f0:	3c900000 	.word	0x3c900000
 80119f4:	00000000 	.word	0x00000000

080119f8 <floor>:
 80119f8:	ec51 0b10 	vmov	r0, r1, d0
 80119fc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a04:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8011a08:	2e13      	cmp	r6, #19
 8011a0a:	460c      	mov	r4, r1
 8011a0c:	4605      	mov	r5, r0
 8011a0e:	4680      	mov	r8, r0
 8011a10:	dc34      	bgt.n	8011a7c <floor+0x84>
 8011a12:	2e00      	cmp	r6, #0
 8011a14:	da17      	bge.n	8011a46 <floor+0x4e>
 8011a16:	a332      	add	r3, pc, #200	@ (adr r3, 8011ae0 <floor+0xe8>)
 8011a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1c:	f7ee fc36 	bl	800028c <__adddf3>
 8011a20:	2200      	movs	r2, #0
 8011a22:	2300      	movs	r3, #0
 8011a24:	f7ef f878 	bl	8000b18 <__aeabi_dcmpgt>
 8011a28:	b150      	cbz	r0, 8011a40 <floor+0x48>
 8011a2a:	2c00      	cmp	r4, #0
 8011a2c:	da55      	bge.n	8011ada <floor+0xe2>
 8011a2e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8011a32:	432c      	orrs	r4, r5
 8011a34:	2500      	movs	r5, #0
 8011a36:	42ac      	cmp	r4, r5
 8011a38:	4c2b      	ldr	r4, [pc, #172]	@ (8011ae8 <floor+0xf0>)
 8011a3a:	bf08      	it	eq
 8011a3c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8011a40:	4621      	mov	r1, r4
 8011a42:	4628      	mov	r0, r5
 8011a44:	e023      	b.n	8011a8e <floor+0x96>
 8011a46:	4f29      	ldr	r7, [pc, #164]	@ (8011aec <floor+0xf4>)
 8011a48:	4137      	asrs	r7, r6
 8011a4a:	ea01 0307 	and.w	r3, r1, r7
 8011a4e:	4303      	orrs	r3, r0
 8011a50:	d01d      	beq.n	8011a8e <floor+0x96>
 8011a52:	a323      	add	r3, pc, #140	@ (adr r3, 8011ae0 <floor+0xe8>)
 8011a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a58:	f7ee fc18 	bl	800028c <__adddf3>
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	2300      	movs	r3, #0
 8011a60:	f7ef f85a 	bl	8000b18 <__aeabi_dcmpgt>
 8011a64:	2800      	cmp	r0, #0
 8011a66:	d0eb      	beq.n	8011a40 <floor+0x48>
 8011a68:	2c00      	cmp	r4, #0
 8011a6a:	bfbe      	ittt	lt
 8011a6c:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8011a70:	4133      	asrlt	r3, r6
 8011a72:	18e4      	addlt	r4, r4, r3
 8011a74:	ea24 0407 	bic.w	r4, r4, r7
 8011a78:	2500      	movs	r5, #0
 8011a7a:	e7e1      	b.n	8011a40 <floor+0x48>
 8011a7c:	2e33      	cmp	r6, #51	@ 0x33
 8011a7e:	dd0a      	ble.n	8011a96 <floor+0x9e>
 8011a80:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8011a84:	d103      	bne.n	8011a8e <floor+0x96>
 8011a86:	4602      	mov	r2, r0
 8011a88:	460b      	mov	r3, r1
 8011a8a:	f7ee fbff 	bl	800028c <__adddf3>
 8011a8e:	ec41 0b10 	vmov	d0, r0, r1
 8011a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a96:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8011a9a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011a9e:	40df      	lsrs	r7, r3
 8011aa0:	4207      	tst	r7, r0
 8011aa2:	d0f4      	beq.n	8011a8e <floor+0x96>
 8011aa4:	a30e      	add	r3, pc, #56	@ (adr r3, 8011ae0 <floor+0xe8>)
 8011aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aaa:	f7ee fbef 	bl	800028c <__adddf3>
 8011aae:	2200      	movs	r2, #0
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	f7ef f831 	bl	8000b18 <__aeabi_dcmpgt>
 8011ab6:	2800      	cmp	r0, #0
 8011ab8:	d0c2      	beq.n	8011a40 <floor+0x48>
 8011aba:	2c00      	cmp	r4, #0
 8011abc:	da0a      	bge.n	8011ad4 <floor+0xdc>
 8011abe:	2e14      	cmp	r6, #20
 8011ac0:	d101      	bne.n	8011ac6 <floor+0xce>
 8011ac2:	3401      	adds	r4, #1
 8011ac4:	e006      	b.n	8011ad4 <floor+0xdc>
 8011ac6:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8011aca:	2301      	movs	r3, #1
 8011acc:	40b3      	lsls	r3, r6
 8011ace:	441d      	add	r5, r3
 8011ad0:	4545      	cmp	r5, r8
 8011ad2:	d3f6      	bcc.n	8011ac2 <floor+0xca>
 8011ad4:	ea25 0507 	bic.w	r5, r5, r7
 8011ad8:	e7b2      	b.n	8011a40 <floor+0x48>
 8011ada:	2500      	movs	r5, #0
 8011adc:	462c      	mov	r4, r5
 8011ade:	e7af      	b.n	8011a40 <floor+0x48>
 8011ae0:	8800759c 	.word	0x8800759c
 8011ae4:	7e37e43c 	.word	0x7e37e43c
 8011ae8:	bff00000 	.word	0xbff00000
 8011aec:	000fffff 	.word	0x000fffff

08011af0 <_init>:
 8011af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011af2:	bf00      	nop
 8011af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011af6:	bc08      	pop	{r3}
 8011af8:	469e      	mov	lr, r3
 8011afa:	4770      	bx	lr

08011afc <_fini>:
 8011afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011afe:	bf00      	nop
 8011b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011b02:	bc08      	pop	{r3}
 8011b04:	469e      	mov	lr, r3
 8011b06:	4770      	bx	lr
