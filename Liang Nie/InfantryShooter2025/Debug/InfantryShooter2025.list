
InfantryShooter2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d518  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  0800d6a8  0800d6a8  0000e6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d810  0800d810  0000f07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d810  0800d810  0000e810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d818  0800d818  0000f07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d818  0800d818  0000e818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d81c  0800d81c  0000e81c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800d820  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f07c  2**0
                  CONTENTS
 10 .bss          00005734  2000007c  2000007c  0000f07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200057b0  200057b0  0000f07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025aaa  00000000  00000000  0000f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000054d3  00000000  00000000  00034b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ec0  00000000  00000000  0003a030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000180d  00000000  00000000  0003bef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026227  00000000  00000000  0003d6fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025629  00000000  00000000  00063924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1083  00000000  00000000  00088f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00169fd0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000085e4  00000000  00000000  0016a014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  001725f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d690 	.word	0x0800d690

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800d690 	.word	0x0800d690

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 80005b0:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <BMI088_ACCEL_NS_L+0x18>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <BMI088_ACCEL_NS_L+0x1c>)
 80005b6:	8811      	ldrh	r1, [r2, #0]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 fc54 	bl	8005e68 <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000000 	.word	0x20000000
 80005c8:	20000004 	.word	0x20000004

080005cc <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 80005d0:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <BMI088_ACCEL_NS_H+0x18>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a04      	ldr	r2, [pc, #16]	@ (80005e8 <BMI088_ACCEL_NS_H+0x1c>)
 80005d6:	8811      	ldrh	r1, [r2, #0]
 80005d8:	2201      	movs	r2, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fc44 	bl	8005e68 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000004 	.word	0x20000004

080005ec <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 80005f0:	4b04      	ldr	r3, [pc, #16]	@ (8000604 <BMI088_GYRO_NS_L+0x18>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <BMI088_GYRO_NS_L+0x1c>)
 80005f6:	8811      	ldrh	r1, [r2, #0]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f005 fc34 	bl	8005e68 <HAL_GPIO_WritePin>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000008 	.word	0x20000008
 8000608:	2000000c 	.word	0x2000000c

0800060c <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000610:	4b04      	ldr	r3, [pc, #16]	@ (8000624 <BMI088_GYRO_NS_H+0x18>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <BMI088_GYRO_NS_H+0x1c>)
 8000616:	8811      	ldrh	r1, [r2, #0]
 8000618:	2201      	movs	r2, #1
 800061a:	4618      	mov	r0, r3
 800061c:	f005 fc24 	bl	8005e68 <HAL_GPIO_WritePin>
}
 8000620:	bf00      	nop
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000008 	.word	0x20000008
 8000628:	2000000c 	.word	0x2000000c

0800062c <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af02      	add	r7, sp, #8
 8000632:	4603      	mov	r3, r0
 8000634:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000636:	f107 020f 	add.w	r2, r7, #15
 800063a:	1df9      	adds	r1, r7, #7
 800063c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <BMI088_read_write_byte+0x28>)
 8000646:	f006 ff37 	bl	80074b8 <HAL_SPI_TransmitReceive>
    return rx_data;
 800064a:	7bfb      	ldrb	r3, [r7, #15]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000774 	.word	0x20000774

08000658 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 800065c:	4a05      	ldr	r2, [pc, #20]	@ (8000674 <IMU_get_temp+0x1c>)
 800065e:	4906      	ldr	r1, [pc, #24]	@ (8000678 <IMU_get_temp+0x20>)
 8000660:	4806      	ldr	r0, [pc, #24]	@ (800067c <IMU_get_temp+0x24>)
 8000662:	f000 f80d 	bl	8000680 <BMI088_read>
	return temp;
 8000666:	4b03      	ldr	r3, [pc, #12]	@ (8000674 <IMU_get_temp+0x1c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	ee07 3a90 	vmov	s15, r3
}
 800066e:	eeb0 0a67 	vmov.f32	s0, s15
 8000672:	bd80      	pop	{r7, pc}
 8000674:	200000b0 	.word	0x200000b0
 8000678:	200000a4 	.word	0x200000a4
 800067c:	20000098 	.word	0x20000098

08000680 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
 8000686:	60f8      	str	r0, [r7, #12]
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8000696:	f7ff ff89 	bl	80005ac <BMI088_ACCEL_NS_L>
 800069a:	2092      	movs	r0, #146	@ 0x92
 800069c:	f7ff ffc6 	bl	800062c <BMI088_read_write_byte>
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2206      	movs	r2, #6
 80006a6:	4619      	mov	r1, r3
 80006a8:	2012      	movs	r0, #18
 80006aa:	f000 f8d3 	bl	8000854 <BMI088_read_muli_reg>
 80006ae:	f7ff ff8d 	bl	80005cc <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 80006b2:	7d7b      	ldrb	r3, [r7, #21]
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	021b      	lsls	r3, r3, #8
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	7d3b      	ldrb	r3, [r7, #20]
 80006bc:	b21b      	sxth	r3, r3
 80006be:	4313      	orrs	r3, r2
 80006c0:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80006c2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006c6:	ee07 3a90 	vmov	s15, r3
 80006ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ce:	4b5f      	ldr	r3, [pc, #380]	@ (800084c <BMI088_read+0x1cc>)
 80006d0:	edd3 7a00 	vldr	s15, [r3]
 80006d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80006de:	7dfb      	ldrb	r3, [r7, #23]
 80006e0:	b21b      	sxth	r3, r3
 80006e2:	021b      	lsls	r3, r3, #8
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	7dbb      	ldrb	r3, [r7, #22]
 80006e8:	b21b      	sxth	r3, r3
 80006ea:	4313      	orrs	r3, r2
 80006ec:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80006ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80006f2:	ee07 3a90 	vmov	s15, r3
 80006f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006fa:	4b54      	ldr	r3, [pc, #336]	@ (800084c <BMI088_read+0x1cc>)
 80006fc:	edd3 7a00 	vldr	s15, [r3]
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3304      	adds	r3, #4
 8000704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000708:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 800070c:	7e7b      	ldrb	r3, [r7, #25]
 800070e:	b21b      	sxth	r3, r3
 8000710:	021b      	lsls	r3, r3, #8
 8000712:	b21a      	sxth	r2, r3
 8000714:	7e3b      	ldrb	r3, [r7, #24]
 8000716:	b21b      	sxth	r3, r3
 8000718:	4313      	orrs	r3, r2
 800071a:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 800071c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000720:	ee07 3a90 	vmov	s15, r3
 8000724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000728:	4b48      	ldr	r3, [pc, #288]	@ (800084c <BMI088_read+0x1cc>)
 800072a:	edd3 7a00 	vldr	s15, [r3]
 800072e:	68bb      	ldr	r3, [r7, #8]
 8000730:	3308      	adds	r3, #8
 8000732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000736:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 800073a:	f7ff ff57 	bl	80005ec <BMI088_GYRO_NS_L>
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	2208      	movs	r2, #8
 8000744:	4619      	mov	r1, r3
 8000746:	2000      	movs	r0, #0
 8000748:	f000 f884 	bl	8000854 <BMI088_read_muli_reg>
 800074c:	f7ff ff5e 	bl	800060c <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000750:	7d3b      	ldrb	r3, [r7, #20]
 8000752:	2b0f      	cmp	r3, #15
 8000754:	d143      	bne.n	80007de <BMI088_read+0x15e>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000756:	7dfb      	ldrb	r3, [r7, #23]
 8000758:	b21b      	sxth	r3, r3
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b21a      	sxth	r2, r3
 800075e:	7dbb      	ldrb	r3, [r7, #22]
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000766:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800076a:	ee07 3a90 	vmov	s15, r3
 800076e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000772:	4b37      	ldr	r3, [pc, #220]	@ (8000850 <BMI088_read+0x1d0>)
 8000774:	edd3 7a00 	vldr	s15, [r3]
 8000778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000782:	7e7b      	ldrb	r3, [r7, #25]
 8000784:	b21b      	sxth	r3, r3
 8000786:	021b      	lsls	r3, r3, #8
 8000788:	b21a      	sxth	r2, r3
 800078a:	7e3b      	ldrb	r3, [r7, #24]
 800078c:	b21b      	sxth	r3, r3
 800078e:	4313      	orrs	r3, r2
 8000790:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000792:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000796:	ee07 3a90 	vmov	s15, r3
 800079a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800079e:	4b2c      	ldr	r3, [pc, #176]	@ (8000850 <BMI088_read+0x1d0>)
 80007a0:	edd3 7a00 	vldr	s15, [r3]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	3304      	adds	r3, #4
 80007a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007ac:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 80007b0:	7efb      	ldrb	r3, [r7, #27]
 80007b2:	b21b      	sxth	r3, r3
 80007b4:	021b      	lsls	r3, r3, #8
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	7ebb      	ldrb	r3, [r7, #26]
 80007ba:	b21b      	sxth	r3, r3
 80007bc:	4313      	orrs	r3, r2
 80007be:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80007c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80007c4:	ee07 3a90 	vmov	s15, r3
 80007c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007cc:	4b20      	ldr	r3, [pc, #128]	@ (8000850 <BMI088_read+0x1d0>)
 80007ce:	edd3 7a00 	vldr	s15, [r3]
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	3308      	adds	r3, #8
 80007d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007da:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 80007de:	f7ff fee5 	bl	80005ac <BMI088_ACCEL_NS_L>
 80007e2:	20a2      	movs	r0, #162	@ 0xa2
 80007e4:	f7ff ff22 	bl	800062c <BMI088_read_write_byte>
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2202      	movs	r2, #2
 80007ee:	4619      	mov	r1, r3
 80007f0:	2022      	movs	r0, #34	@ 0x22
 80007f2:	f000 f82f 	bl	8000854 <BMI088_read_muli_reg>
 80007f6:	f7ff fee9 	bl	80005cc <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 80007fa:	7d3b      	ldrb	r3, [r7, #20]
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	00db      	lsls	r3, r3, #3
 8000800:	b21a      	sxth	r2, r3
 8000802:	7d7b      	ldrb	r3, [r7, #21]
 8000804:	095b      	lsrs	r3, r3, #5
 8000806:	b2db      	uxtb	r3, r3
 8000808:	b21b      	sxth	r3, r3
 800080a:	4313      	orrs	r3, r2
 800080c:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 800080e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000812:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000816:	db04      	blt.n	8000822 <BMI088_read+0x1a2>
    {
        bmi088_raw_temp -= 2048;
 8000818:	8bfb      	ldrh	r3, [r7, #30]
 800081a:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800081e:	b29b      	uxth	r3, r3
 8000820:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8000822:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000826:	ee07 3a90 	vmov	s15, r3
 800082a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800082e:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8000832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000836:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 800083a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	edc3 7a00 	vstr	s15, [r3]
}
 8000844:	bf00      	nop
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000010 	.word	0x20000010
 8000850:	20000014 	.word	0x20000014

08000854 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	6039      	str	r1, [r7, #0]
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	4613      	mov	r3, r2
 8000862:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4618      	mov	r0, r3
 800086e:	f7ff fedd 	bl	800062c <BMI088_read_write_byte>

    while (len != 0)
 8000872:	e00c      	b.n	800088e <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8000874:	2055      	movs	r0, #85	@ 0x55
 8000876:	f7ff fed9 	bl	800062c <BMI088_read_write_byte>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	701a      	strb	r2, [r3, #0]
        buf++;
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	3301      	adds	r3, #1
 8000886:	603b      	str	r3, [r7, #0]
        len--;
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	3b01      	subs	r3, #1
 800088c:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800088e:	79bb      	ldrb	r3, [r7, #6]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1ef      	bne.n	8000874 <BMI088_read_muli_reg+0x20>
    }
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	@ 0x30
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 80008a8:	f107 0308 	add.w	r3, r7, #8
 80008ac:	f107 0210 	add.w	r2, r7, #16
 80008b0:	2100      	movs	r1, #0
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f004 f8c1 	bl	8004a3a <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 80008b8:	693b      	ldr	r3, [r7, #16]
 80008ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80008be:	d813      	bhi.n	80008e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 80008c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008c4:	f240 80a2 	bls.w	8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 80008c8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 80008cc:	2b03      	cmp	r3, #3
 80008ce:	f200 809d 	bhi.w	8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
 80008d2:	a201      	add	r2, pc, #4	@ (adr r2, 80008d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	080009e9 	.word	0x080009e9
 80008dc:	080009fb 	.word	0x080009fb
 80008e0:	08000a0d 	.word	0x08000a0d
 80008e4:	08000a0d 	.word	0x08000a0d
 80008e8:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80008ec:	2b0a      	cmp	r3, #10
 80008ee:	f200 808d 	bhi.w	8000a0c <HAL_CAN_RxFifo0MsgPendingCallback+0x16c>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	3b01      	subs	r3, #1
 80008f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	4a47      	ldr	r2, [pc, #284]	@ (8000a1c <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d134      	bne.n	800096e <HAL_CAN_RxFifo0MsgPendingCallback+0xce>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 8000904:	7a3b      	ldrb	r3, [r7, #8]
 8000906:	b21b      	sxth	r3, r3
 8000908:	021b      	lsls	r3, r3, #8
 800090a:	b21a      	sxth	r2, r3
 800090c:	7a7b      	ldrb	r3, [r7, #9]
 800090e:	b21b      	sxth	r3, r3
 8000910:	4313      	orrs	r3, r2
 8000912:	b21a      	sxth	r2, r3
 8000914:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000918:	b291      	uxth	r1, r2
 800091a:	4a41      	ldr	r2, [pc, #260]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800091c:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8000920:	7abb      	ldrb	r3, [r7, #10]
 8000922:	b21b      	sxth	r3, r3
 8000924:	021b      	lsls	r3, r3, #8
 8000926:	b219      	sxth	r1, r3
 8000928:	7afb      	ldrb	r3, [r7, #11]
 800092a:	b21a      	sxth	r2, r3
 800092c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000930:	430a      	orrs	r2, r1
 8000932:	b211      	sxth	r1, r2
 8000934:	4a3a      	ldr	r2, [pc, #232]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	4413      	add	r3, r2
 800093a:	460a      	mov	r2, r1
 800093c:	805a      	strh	r2, [r3, #2]
 800093e:	7b3b      	ldrb	r3, [r7, #12]
 8000940:	b21b      	sxth	r3, r3
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b219      	sxth	r1, r3
 8000946:	7b7b      	ldrb	r3, [r7, #13]
 8000948:	b21a      	sxth	r2, r3
 800094a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800094e:	430a      	orrs	r2, r1
 8000950:	b211      	sxth	r1, r2
 8000952:	4a33      	ldr	r2, [pc, #204]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000954:	00db      	lsls	r3, r3, #3
 8000956:	4413      	add	r3, r2
 8000958:	460a      	mov	r2, r1
 800095a:	809a      	strh	r2, [r3, #4]
 800095c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000960:	7bb9      	ldrb	r1, [r7, #14]
 8000962:	4a2f      	ldr	r2, [pc, #188]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 8000964:	00db      	lsls	r3, r3, #3
 8000966:	4413      	add	r3, r2
 8000968:	460a      	mov	r2, r1
 800096a:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 800096c:	e050      	b.n	8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>
            } else if (hcan == &hcan2) {
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a2c      	ldr	r2, [pc, #176]	@ (8000a24 <HAL_CAN_RxFifo0MsgPendingCallback+0x184>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d14c      	bne.n	8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8000976:	7a3b      	ldrb	r3, [r7, #8]
 8000978:	b21b      	sxth	r3, r3
 800097a:	021b      	lsls	r3, r3, #8
 800097c:	b21a      	sxth	r2, r3
 800097e:	7a7b      	ldrb	r3, [r7, #9]
 8000980:	b21b      	sxth	r3, r3
 8000982:	4313      	orrs	r3, r2
 8000984:	b21a      	sxth	r2, r3
 8000986:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800098a:	b291      	uxth	r1, r2
 800098c:	4a24      	ldr	r2, [pc, #144]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 800098e:	330b      	adds	r3, #11
 8000990:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8000994:	7abb      	ldrb	r3, [r7, #10]
 8000996:	b21b      	sxth	r3, r3
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b219      	sxth	r1, r3
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	b21a      	sxth	r2, r3
 80009a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009a4:	430a      	orrs	r2, r1
 80009a6:	b211      	sxth	r1, r2
 80009a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80009aa:	330b      	adds	r3, #11
 80009ac:	00db      	lsls	r3, r3, #3
 80009ae:	4413      	add	r3, r2
 80009b0:	460a      	mov	r2, r1
 80009b2:	805a      	strh	r2, [r3, #2]
 80009b4:	7b3b      	ldrb	r3, [r7, #12]
 80009b6:	b21b      	sxth	r3, r3
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	b219      	sxth	r1, r3
 80009bc:	7b7b      	ldrb	r3, [r7, #13]
 80009be:	b21a      	sxth	r2, r3
 80009c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009c4:	430a      	orrs	r2, r1
 80009c6:	b211      	sxth	r1, r2
 80009c8:	4a15      	ldr	r2, [pc, #84]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80009ca:	330b      	adds	r3, #11
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	4413      	add	r3, r2
 80009d0:	460a      	mov	r2, r1
 80009d2:	809a      	strh	r2, [r3, #4]
 80009d4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80009d8:	7bb9      	ldrb	r1, [r7, #14]
 80009da:	4a11      	ldr	r2, [pc, #68]	@ (8000a20 <HAL_CAN_RxFifo0MsgPendingCallback+0x180>)
 80009dc:	330b      	adds	r3, #11
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	4413      	add	r3, r2
 80009e2:	460a      	mov	r2, r1
 80009e4:	719a      	strb	r2, [r3, #6]
            break;
 80009e6:	e013      	b.n	8000a10 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 80009e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80009ea:	461a      	mov	r2, r3
 80009ec:	f107 0308 	add.w	r3, r7, #8
 80009f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80009f4:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 80009f8:	e00b      	b.n	8000a12 <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 80009fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000a28 <HAL_CAN_RxFifo0MsgPendingCallback+0x188>)
 80009fc:	3308      	adds	r3, #8
 80009fe:	f107 0208 	add.w	r2, r7, #8
 8000a02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a06:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8000a0a:	e002      	b.n	8000a12 <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 8000a0c:	bf00      	nop
 8000a0e:	e000      	b.n	8000a12 <HAL_CAN_RxFifo0MsgPendingCallback+0x172>
            break;
 8000a10:	bf00      	nop
        }
    }
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200006d0 	.word	0x200006d0
 8000a20:	2000012c 	.word	0x2000012c
 8000a24:	200006f8 	.word	0x200006f8
 8000a28:	2000053c 	.word	0x2000053c

08000a2c <otherSignals>:
/*
uint64_t allRCShove() {
	return 0;
}
*/
uint64_t otherSignals(uint16_t data1, int8_t switch1, int8_t switch2) {
 8000a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a30:	b090      	sub	sp, #64	@ 0x40
 8000a32:	af00      	add	r7, sp, #0
 8000a34:	4603      	mov	r3, r0
 8000a36:	81fb      	strh	r3, [r7, #14]
 8000a38:	460b      	mov	r3, r1
 8000a3a:	737b      	strb	r3, [r7, #13]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	733b      	strb	r3, [r7, #12]
	uint64_t temp2[4] = {0, 0, 0, 0};
 8000a40:	f107 0310 	add.w	r3, r7, #16
 8000a44:	2220      	movs	r2, #32
 8000a46:	2100      	movs	r1, #0
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f00c f945 	bl	800ccd8 <memset>
	temp2[0] = (uint64_t)data1 << 48;
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	2200      	movs	r2, #0
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	f04f 0200 	mov.w	r2, #0
 8000a5a:	f04f 0300 	mov.w	r3, #0
 8000a5e:	6839      	ldr	r1, [r7, #0]
 8000a60:	040b      	lsls	r3, r1, #16
 8000a62:	2200      	movs	r2, #0
 8000a64:	e9c7 2304 	strd	r2, r3, [r7, #16]
	temp2[1] = (uint64_t)switch1 << 32;
 8000a68:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000a6c:	17da      	asrs	r2, r3, #31
 8000a6e:	469a      	mov	sl, r3
 8000a70:	4693      	mov	fp, r2
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	4653      	mov	r3, sl
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
	temp2[2] = (uint64_t)switch2 << 16;
 8000a82:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000a86:	17da      	asrs	r2, r3, #31
 8000a88:	461c      	mov	r4, r3
 8000a8a:	4615      	mov	r5, r2
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	042b      	lsls	r3, r5, #16
 8000a96:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8000a9a:	0422      	lsls	r2, r4, #16
 8000a9c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	temp2[3] = 0;
 8000aa0:	f04f 0200 	mov.w	r2, #0
 8000aa4:	f04f 0300 	mov.w	r3, #0
 8000aa8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	uint64_t final = 0;;
 8000aac:	f04f 0200 	mov.w	r2, #0
 8000ab0:	f04f 0300 	mov.w	r3, #0
 8000ab4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
	for (int8_t i = 0; i < 4; i++) {
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000abe:	e018      	b.n	8000af2 <otherSignals+0xc6>
		final = final + temp2[i];
 8000ac0:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	3338      	adds	r3, #56	@ 0x38
 8000ac8:	f107 0208 	add.w	r2, r7, #8
 8000acc:	4413      	add	r3, r2
 8000ace:	3b30      	subs	r3, #48	@ 0x30
 8000ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ad4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000ad8:	eb10 0802 	adds.w	r8, r0, r2
 8000adc:	eb41 0903 	adc.w	r9, r1, r3
 8000ae0:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	for (int8_t i = 0; i < 4; i++) {
 8000ae4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	3301      	adds	r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8000af2:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8000af6:	2b03      	cmp	r3, #3
 8000af8:	dde2      	ble.n	8000ac0 <otherSignals+0x94>
	}
	return final;
 8000afa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
}
 8000afe:	4610      	mov	r0, r2
 8000b00:	4619      	mov	r1, r3
 8000b02:	3740      	adds	r7, #64	@ 0x40
 8000b04:	46bd      	mov	sp, r7
 8000b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000b0a <fourBitShift>:

uint64_t fourBitShift(uint16_t data1, uint16_t data2, uint16_t data3, uint16_t data4) {
 8000b0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b0e:	b095      	sub	sp, #84	@ 0x54
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4616      	mov	r6, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4603      	mov	r3, r0
 8000b18:	83fb      	strh	r3, [r7, #30]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	83bb      	strh	r3, [r7, #28]
 8000b1e:	4633      	mov	r3, r6
 8000b20:	837b      	strh	r3, [r7, #26]
 8000b22:	4613      	mov	r3, r2
 8000b24:	833b      	strh	r3, [r7, #24]
	uint64_t temp1[4] = {0, 0, 0, 0};
 8000b26:	f107 0020 	add.w	r0, r7, #32
 8000b2a:	2320      	movs	r3, #32
 8000b2c:	461a      	mov	r2, r3
 8000b2e:	2100      	movs	r1, #0
 8000b30:	f00c f8d2 	bl	800ccd8 <memset>
	temp1[0] = (uint64_t)data1 << 48;
 8000b34:	8bfb      	ldrh	r3, [r7, #30]
 8000b36:	2200      	movs	r2, #0
 8000b38:	613b      	str	r3, [r7, #16]
 8000b3a:	617a      	str	r2, [r7, #20]
 8000b3c:	f04f 0200 	mov.w	r2, #0
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	6939      	ldr	r1, [r7, #16]
 8000b46:	040b      	lsls	r3, r1, #16
 8000b48:	2200      	movs	r2, #0
 8000b4a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	temp1[1] = (uint64_t)data2 << 32;
 8000b4e:	8bbb      	ldrh	r3, [r7, #28]
 8000b50:	2200      	movs	r2, #0
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	60fa      	str	r2, [r7, #12]
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	f04f 0300 	mov.w	r3, #0
 8000b5e:	68b9      	ldr	r1, [r7, #8]
 8000b60:	000b      	movs	r3, r1
 8000b62:	2200      	movs	r2, #0
 8000b64:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	temp1[2] = (uint64_t)data3 << 16;
 8000b68:	8b7b      	ldrh	r3, [r7, #26]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	461c      	mov	r4, r3
 8000b6e:	4615      	mov	r5, r2
 8000b70:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8000b74:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 8000b78:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	@ 0x30
	temp1[3] = (uint64_t)data4;
 8000b7c:	8b3b      	ldrh	r3, [r7, #24]
 8000b7e:	2200      	movs	r2, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000b88:	e9c7 340e 	strd	r3, r4, [r7, #56]	@ 0x38
	uint64_t final = 0;;
 8000b8c:	f04f 0200 	mov.w	r2, #0
 8000b90:	f04f 0300 	mov.w	r3, #0
 8000b94:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	for (int8_t i = 0; i < 4; i++) {
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000b9e:	e018      	b.n	8000bd2 <fourBitShift+0xc8>
		final = final + temp1[i];
 8000ba0:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	3338      	adds	r3, #56	@ 0x38
 8000ba8:	f107 0218 	add.w	r2, r7, #24
 8000bac:	4413      	add	r3, r2
 8000bae:	3b30      	subs	r3, #48	@ 0x30
 8000bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8000bb8:	eb10 0802 	adds.w	r8, r0, r2
 8000bbc:	eb41 0903 	adc.w	r9, r1, r3
 8000bc0:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
	for (int8_t i = 0; i < 4; i++) {
 8000bc4:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	3301      	adds	r3, #1
 8000bcc:	b2db      	uxtb	r3, r3
 8000bce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000bd2:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	dde2      	ble.n	8000ba0 <fourBitShift+0x96>
	}
	return final;
 8000bda:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
}
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	3754      	adds	r7, #84	@ 0x54
 8000be4:	46bd      	mov	sp, r7
 8000be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000bec <CAN_transmit>:

// sends a single uint64_t int, can use fourBitShift to send 4 uint16_t integers"
void CAN_transmit(CAN_Bus bus, CAN_ID headerID, uint64_t data) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	e9c7 2300 	strd	r2, r3, [r7]
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	73fb      	strb	r3, [r7, #15]
 8000bfa:	460b      	mov	r3, r1
 8000bfc:	81bb      	strh	r3, [r7, #12]
    uint32_t send_mail_box;
    B2bTransmitHeader.StdId = headerID;
 8000bfe:	89bb      	ldrh	r3, [r7, #12]
 8000c00:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <CAN_transmit+0x50>)
 8000c02:	6013      	str	r3, [r2, #0]
    B2bTransmitHeader.IDE = CAN_ID_STD;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	@ (8000c3c <CAN_transmit+0x50>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
    B2bTransmitHeader.RTR = CAN_RTR_DATA;
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c3c <CAN_transmit+0x50>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
    B2bTransmitHeader.DLC = 0x08;
 8000c10:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <CAN_transmit+0x50>)
 8000c12:	2208      	movs	r2, #8
 8000c14:	611a      	str	r2, [r3, #16]
    memcpy(&b2b_can_send_data[0], &data, 8);
 8000c16:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c1a:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <CAN_transmit+0x54>)
 8000c1c:	4602      	mov	r2, r0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	460a      	mov	r2, r1
 8000c22:	605a      	str	r2, [r3, #4]
    HAL_CAN_AddTxMessage(&CAN_1, &B2bTransmitHeader, b2b_can_send_data, &send_mail_box);
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4a05      	ldr	r2, [pc, #20]	@ (8000c40 <CAN_transmit+0x54>)
 8000c2a:	4904      	ldr	r1, [pc, #16]	@ (8000c3c <CAN_transmit+0x50>)
 8000c2c:	4805      	ldr	r0, [pc, #20]	@ (8000c44 <CAN_transmit+0x58>)
 8000c2e:	f003 fe29 	bl	8004884 <HAL_CAN_AddTxMessage>
}
 8000c32:	bf00      	nop
 8000c34:	3718      	adds	r7, #24
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000b4 	.word	0x200000b4
 8000c40:	200000cc 	.word	0x200000cc
 8000c44:	200006d0 	.word	0x200006d0

08000c48 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4608      	mov	r0, r1
 8000c52:	4611      	mov	r1, r2
 8000c54:	461a      	mov	r2, r3
 8000c56:	4623      	mov	r3, r4
 8000c58:	71fb      	strb	r3, [r7, #7]
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	80bb      	strh	r3, [r7, #4]
 8000c5e:	460b      	mov	r3, r1
 8000c60:	807b      	strh	r3, [r7, #2]
 8000c62:	4613      	mov	r3, r2
 8000c64:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8000c66:	88bb      	ldrh	r3, [r7, #4]
 8000c68:	4a27      	ldr	r2, [pc, #156]	@ (8000d08 <CAN_DriveMotor+0xc0>)
 8000c6a:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 8000c6c:	4b26      	ldr	r3, [pc, #152]	@ (8000d08 <CAN_DriveMotor+0xc0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8000c72:	4b25      	ldr	r3, [pc, #148]	@ (8000d08 <CAN_DriveMotor+0xc0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8000c78:	4b23      	ldr	r3, [pc, #140]	@ (8000d08 <CAN_DriveMotor+0xc0>)
 8000c7a:	2208      	movs	r2, #8
 8000c7c:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 8000c7e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c82:	121b      	asrs	r3, r3, #8
 8000c84:	b21b      	sxth	r3, r3
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b20      	ldr	r3, [pc, #128]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000c8a:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b1e      	ldr	r3, [pc, #120]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000c92:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8000c94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c98:	121b      	asrs	r3, r3, #8
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000ca0:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8000ca2:	883b      	ldrh	r3, [r7, #0]
 8000ca4:	b2da      	uxtb	r2, r3
 8000ca6:	4b19      	ldr	r3, [pc, #100]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000ca8:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 8000caa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000cae:	121b      	asrs	r3, r3, #8
 8000cb0:	b21b      	sxth	r3, r3
 8000cb2:	b2da      	uxtb	r2, r3
 8000cb4:	4b15      	ldr	r3, [pc, #84]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000cb6:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8000cb8:	8c3b      	ldrh	r3, [r7, #32]
 8000cba:	b2da      	uxtb	r2, r3
 8000cbc:	4b13      	ldr	r3, [pc, #76]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000cbe:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 8000cc0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000cc4:	121b      	asrs	r3, r3, #8
 8000cc6:	b21b      	sxth	r3, r3
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000ccc:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 8000cce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000cd0:	b2da      	uxtb	r2, r3
 8000cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000cd4:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d107      	bne.n	8000cec <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000ce2:	4909      	ldr	r1, [pc, #36]	@ (8000d08 <CAN_DriveMotor+0xc0>)
 8000ce4:	480a      	ldr	r0, [pc, #40]	@ (8000d10 <CAN_DriveMotor+0xc8>)
 8000ce6:	f003 fdcd 	bl	8004884 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 8000cea:	e009      	b.n	8000d00 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d106      	bne.n	8000d00 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4a05      	ldr	r2, [pc, #20]	@ (8000d0c <CAN_DriveMotor+0xc4>)
 8000cf8:	4903      	ldr	r1, [pc, #12]	@ (8000d08 <CAN_DriveMotor+0xc0>)
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <CAN_DriveMotor+0xcc>)
 8000cfc:	f003 fdc2 	bl	8004884 <HAL_CAN_AddTxMessage>
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}
 8000d08:	200000dc 	.word	0x200000dc
 8000d0c:	200000f4 	.word	0x200000f4
 8000d10:	200006d0 	.word	0x200006d0
 8000d14:	200006f8 	.word	0x200006f8

08000d18 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8000d18:	b5b0      	push	{r4, r5, r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af02      	add	r7, sp, #8
 8000d1e:	4604      	mov	r4, r0
 8000d20:	4608      	mov	r0, r1
 8000d22:	4611      	mov	r1, r2
 8000d24:	461a      	mov	r2, r3
 8000d26:	4623      	mov	r3, r4
 8000d28:	71fb      	strb	r3, [r7, #7]
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	71bb      	strb	r3, [r7, #6]
 8000d2e:	460b      	mov	r3, r1
 8000d30:	717b      	strb	r3, [r7, #5]
 8000d32:	4613      	mov	r3, r2
 8000d34:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	f000 8142 	beq.w	8000fc2 <CAN_setMotorCtrlVal+0x2aa>
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	f300 81e1 	bgt.w	8001106 <CAN_setMotorCtrlVal+0x3ee>
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	dc02      	bgt.n	8000d4e <CAN_setMotorCtrlVal+0x36>
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	dc04      	bgt.n	8000d56 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 8000d4c:	e1db      	b.n	8001106 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	f000 8097 	beq.w	8000e82 <CAN_setMotorCtrlVal+0x16a>
}
 8000d54:	e1d7      	b.n	8001106 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000d56:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d5a:	2b04      	cmp	r3, #4
 8000d5c:	dc02      	bgt.n	8000d64 <CAN_setMotorCtrlVal+0x4c>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	dc05      	bgt.n	8000d6e <CAN_setMotorCtrlVal+0x56>
					break;
 8000d62:	e08c      	b.n	8000e7e <CAN_setMotorCtrlVal+0x166>
 8000d64:	3b05      	subs	r3, #5
			switch(motorID) {
 8000d66:	2b03      	cmp	r3, #3
 8000d68:	f200 8089 	bhi.w	8000e7e <CAN_setMotorCtrlVal+0x166>
 8000d6c:	e042      	b.n	8000df4 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	1e5a      	subs	r2, r3, #1
 8000d72:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000d76:	1e59      	subs	r1, r3, #1
 8000d78:	48bd      	ldr	r0, [pc, #756]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000d7a:	4613      	mov	r3, r2
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	4413      	add	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	440b      	add	r3, r1
 8000d84:	887a      	ldrh	r2, [r7, #2]
 8000d86:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	1e5a      	subs	r2, r3, #1
 8000d8e:	49b8      	ldr	r1, [pc, #736]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000d90:	4613      	mov	r3, r2
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	4413      	add	r3, r2
 8000d96:	00db      	lsls	r3, r3, #3
 8000d98:	440b      	add	r3, r1
 8000d9a:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	49b3      	ldr	r1, [pc, #716]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000da4:	4613      	mov	r3, r2
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	4413      	add	r3, r2
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	440b      	add	r3, r1
 8000dae:	3302      	adds	r3, #2
 8000db0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	49ad      	ldr	r1, [pc, #692]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	1e5a      	subs	r2, r3, #1
 8000dce:	48a8      	ldr	r0, [pc, #672]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	00db      	lsls	r3, r3, #3
 8000dd8:	4403      	add	r3, r0
 8000dda:	3306      	adds	r3, #6
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	79f8      	ldrb	r0, [r7, #7]
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	9100      	str	r1, [sp, #0]
 8000de6:	462b      	mov	r3, r5
 8000de8:	4622      	mov	r2, r4
 8000dea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dee:	f7ff ff2b 	bl	8000c48 <CAN_DriveMotor>
					break;
 8000df2:	e045      	b.n	8000e80 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	1e5a      	subs	r2, r3, #1
 8000df8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000dfc:	1f59      	subs	r1, r3, #5
 8000dfe:	489c      	ldr	r0, [pc, #624]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000e00:	4613      	mov	r3, r2
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	4413      	add	r3, r2
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	440b      	add	r3, r1
 8000e0a:	3304      	adds	r3, #4
 8000e0c:	887a      	ldrh	r2, [r7, #2]
 8000e0e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	4996      	ldr	r1, [pc, #600]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000e18:	4613      	mov	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	00db      	lsls	r3, r3, #3
 8000e20:	440b      	add	r3, r1
 8000e22:	3308      	adds	r3, #8
 8000e24:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	1e5a      	subs	r2, r3, #1
 8000e2c:	4990      	ldr	r1, [pc, #576]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	440b      	add	r3, r1
 8000e38:	330a      	adds	r3, #10
 8000e3a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	1e5a      	subs	r2, r3, #1
 8000e42:	498b      	ldr	r1, [pc, #556]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	00db      	lsls	r3, r3, #3
 8000e4c:	440b      	add	r3, r1
 8000e4e:	330c      	adds	r3, #12
 8000e50:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	1e5a      	subs	r2, r3, #1
 8000e58:	4885      	ldr	r0, [pc, #532]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000e5a:	4613      	mov	r3, r2
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4413      	add	r3, r2
 8000e60:	00db      	lsls	r3, r3, #3
 8000e62:	4403      	add	r3, r0
 8000e64:	330e      	adds	r3, #14
 8000e66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e6a:	79f8      	ldrb	r0, [r7, #7]
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	9100      	str	r1, [sp, #0]
 8000e70:	462b      	mov	r3, r5
 8000e72:	4622      	mov	r2, r4
 8000e74:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000e78:	f7ff fee6 	bl	8000c48 <CAN_DriveMotor>
					break;
 8000e7c:	e000      	b.n	8000e80 <CAN_setMotorCtrlVal+0x168>
					break;
 8000e7e:	bf00      	nop
			break;
 8000e80:	e141      	b.n	8001106 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000e82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e86:	2b08      	cmp	r3, #8
 8000e88:	f000 8097 	beq.w	8000fba <CAN_setMotorCtrlVal+0x2a2>
 8000e8c:	2b08      	cmp	r3, #8
 8000e8e:	f300 8096 	bgt.w	8000fbe <CAN_setMotorCtrlVal+0x2a6>
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	dc02      	bgt.n	8000e9c <CAN_setMotorCtrlVal+0x184>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	dc05      	bgt.n	8000ea6 <CAN_setMotorCtrlVal+0x18e>
					break;
 8000e9a:	e090      	b.n	8000fbe <CAN_setMotorCtrlVal+0x2a6>
 8000e9c:	3b05      	subs	r3, #5
			switch(motorID) {
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	f200 808d 	bhi.w	8000fbe <CAN_setMotorCtrlVal+0x2a6>
 8000ea4:	e044      	b.n	8000f30 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	1e5a      	subs	r2, r3, #1
 8000eaa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000eae:	1e59      	subs	r1, r3, #1
 8000eb0:	486f      	ldr	r0, [pc, #444]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000eb2:	4613      	mov	r3, r2
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	4413      	add	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	440b      	add	r3, r1
 8000ebc:	3304      	adds	r3, #4
 8000ebe:	887a      	ldrh	r2, [r7, #2]
 8000ec0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	1e5a      	subs	r2, r3, #1
 8000ec8:	4969      	ldr	r1, [pc, #420]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000eca:	4613      	mov	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	4413      	add	r3, r2
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	440b      	add	r3, r1
 8000ed4:	3308      	adds	r3, #8
 8000ed6:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	1e5a      	subs	r2, r3, #1
 8000ede:	4964      	ldr	r1, [pc, #400]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	4413      	add	r3, r2
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	440b      	add	r3, r1
 8000eea:	330a      	adds	r3, #10
 8000eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	1e5a      	subs	r2, r3, #1
 8000ef4:	495e      	ldr	r1, [pc, #376]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	4413      	add	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	440b      	add	r3, r1
 8000f00:	330c      	adds	r3, #12
 8000f02:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	4859      	ldr	r0, [pc, #356]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	4413      	add	r3, r2
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4403      	add	r3, r0
 8000f16:	330e      	adds	r3, #14
 8000f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1c:	79f8      	ldrb	r0, [r7, #7]
 8000f1e:	9301      	str	r3, [sp, #4]
 8000f20:	9100      	str	r1, [sp, #0]
 8000f22:	462b      	mov	r3, r5
 8000f24:	4622      	mov	r2, r4
 8000f26:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8000f2a:	f7ff fe8d 	bl	8000c48 <CAN_DriveMotor>
					break;
 8000f2e:	e047      	b.n	8000fc0 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	1e5a      	subs	r2, r3, #1
 8000f34:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f38:	1f59      	subs	r1, r3, #5
 8000f3a:	484d      	ldr	r0, [pc, #308]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	440b      	add	r3, r1
 8000f46:	3308      	adds	r3, #8
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	1e5a      	subs	r2, r3, #1
 8000f52:	4947      	ldr	r1, [pc, #284]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	00db      	lsls	r3, r3, #3
 8000f5c:	440b      	add	r3, r1
 8000f5e:	3310      	adds	r3, #16
 8000f60:	f9b3 4000 	ldrsh.w	r4, [r3]
 8000f64:	79fb      	ldrb	r3, [r7, #7]
 8000f66:	1e5a      	subs	r2, r3, #1
 8000f68:	4941      	ldr	r1, [pc, #260]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	440b      	add	r3, r1
 8000f74:	3312      	adds	r3, #18
 8000f76:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	1e5a      	subs	r2, r3, #1
 8000f7e:	493c      	ldr	r1, [pc, #240]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000f80:	4613      	mov	r3, r2
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	4413      	add	r3, r2
 8000f86:	00db      	lsls	r3, r3, #3
 8000f88:	440b      	add	r3, r1
 8000f8a:	3314      	adds	r3, #20
 8000f8c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	1e5a      	subs	r2, r3, #1
 8000f94:	4836      	ldr	r0, [pc, #216]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000f96:	4613      	mov	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	4413      	add	r3, r2
 8000f9c:	00db      	lsls	r3, r3, #3
 8000f9e:	4403      	add	r3, r0
 8000fa0:	3316      	adds	r3, #22
 8000fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa6:	79f8      	ldrb	r0, [r7, #7]
 8000fa8:	9301      	str	r3, [sp, #4]
 8000faa:	9100      	str	r1, [sp, #0]
 8000fac:	462b      	mov	r3, r5
 8000fae:	4622      	mov	r2, r4
 8000fb0:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8000fb4:	f7ff fe48 	bl	8000c48 <CAN_DriveMotor>
					break;
 8000fb8:	e002      	b.n	8000fc0 <CAN_setMotorCtrlVal+0x2a8>
					break;
 8000fba:	bf00      	nop
 8000fbc:	e0a3      	b.n	8001106 <CAN_setMotorCtrlVal+0x3ee>
					break;
 8000fbe:	bf00      	nop
			break;
 8000fc0:	e0a1      	b.n	8001106 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8000fc2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	f000 8099 	beq.w	80010fe <CAN_setMotorCtrlVal+0x3e6>
 8000fcc:	2b08      	cmp	r3, #8
 8000fce:	f300 8098 	bgt.w	8001102 <CAN_setMotorCtrlVal+0x3ea>
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	dc02      	bgt.n	8000fdc <CAN_setMotorCtrlVal+0x2c4>
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	dc05      	bgt.n	8000fe6 <CAN_setMotorCtrlVal+0x2ce>
					break;
 8000fda:	e092      	b.n	8001102 <CAN_setMotorCtrlVal+0x3ea>
 8000fdc:	3b05      	subs	r3, #5
			switch(motorID) {
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	f200 808f 	bhi.w	8001102 <CAN_setMotorCtrlVal+0x3ea>
 8000fe4:	e046      	b.n	8001074 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	1e5a      	subs	r2, r3, #1
 8000fea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000fee:	1e59      	subs	r1, r3, #1
 8000ff0:	481f      	ldr	r0, [pc, #124]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	887a      	ldrh	r2, [r7, #2]
 8001000:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	1e5a      	subs	r2, r3, #1
 8001008:	4919      	ldr	r1, [pc, #100]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 800100a:	4613      	mov	r3, r2
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	4413      	add	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	440b      	add	r3, r1
 8001014:	3308      	adds	r3, #8
 8001016:	f9b3 4000 	ldrsh.w	r4, [r3]
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	1e5a      	subs	r2, r3, #1
 800101e:	4914      	ldr	r1, [pc, #80]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	440b      	add	r3, r1
 800102a:	330a      	adds	r3, #10
 800102c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	1e5a      	subs	r2, r3, #1
 8001034:	490e      	ldr	r1, [pc, #56]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 8001036:	4613      	mov	r3, r2
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	4413      	add	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	440b      	add	r3, r1
 8001040:	330c      	adds	r3, #12
 8001042:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	1e5a      	subs	r2, r3, #1
 800104a:	4809      	ldr	r0, [pc, #36]	@ (8001070 <CAN_setMotorCtrlVal+0x358>)
 800104c:	4613      	mov	r3, r2
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4413      	add	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4403      	add	r3, r0
 8001056:	330e      	adds	r3, #14
 8001058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800105c:	79f8      	ldrb	r0, [r7, #7]
 800105e:	9301      	str	r3, [sp, #4]
 8001060:	9100      	str	r1, [sp, #0]
 8001062:	462b      	mov	r3, r5
 8001064:	4622      	mov	r2, r4
 8001066:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800106a:	f7ff fded 	bl	8000c48 <CAN_DriveMotor>
					break;
 800106e:	e049      	b.n	8001104 <CAN_setMotorCtrlVal+0x3ec>
 8001070:	200000fc 	.word	0x200000fc
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	1e5a      	subs	r2, r3, #1
 8001078:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800107c:	1f59      	subs	r1, r3, #5
 800107e:	4824      	ldr	r0, [pc, #144]	@ (8001110 <CAN_setMotorCtrlVal+0x3f8>)
 8001080:	4613      	mov	r3, r2
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	4413      	add	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	3308      	adds	r3, #8
 800108c:	887a      	ldrh	r2, [r7, #2]
 800108e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	1e5a      	subs	r2, r3, #1
 8001096:	491e      	ldr	r1, [pc, #120]	@ (8001110 <CAN_setMotorCtrlVal+0x3f8>)
 8001098:	4613      	mov	r3, r2
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	3310      	adds	r3, #16
 80010a4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	1e5a      	subs	r2, r3, #1
 80010ac:	4918      	ldr	r1, [pc, #96]	@ (8001110 <CAN_setMotorCtrlVal+0x3f8>)
 80010ae:	4613      	mov	r3, r2
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	440b      	add	r3, r1
 80010b8:	3312      	adds	r3, #18
 80010ba:	f9b3 5000 	ldrsh.w	r5, [r3]
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	1e5a      	subs	r2, r3, #1
 80010c2:	4913      	ldr	r1, [pc, #76]	@ (8001110 <CAN_setMotorCtrlVal+0x3f8>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	440b      	add	r3, r1
 80010ce:	3314      	adds	r3, #20
 80010d0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	1e5a      	subs	r2, r3, #1
 80010d8:	480d      	ldr	r0, [pc, #52]	@ (8001110 <CAN_setMotorCtrlVal+0x3f8>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	4403      	add	r3, r0
 80010e4:	3316      	adds	r3, #22
 80010e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ea:	79f8      	ldrb	r0, [r7, #7]
 80010ec:	9301      	str	r3, [sp, #4]
 80010ee:	9100      	str	r1, [sp, #0]
 80010f0:	462b      	mov	r3, r5
 80010f2:	4622      	mov	r2, r4
 80010f4:	f240 21fe 	movw	r1, #766	@ 0x2fe
 80010f8:	f7ff fda6 	bl	8000c48 <CAN_DriveMotor>
					break;
 80010fc:	e002      	b.n	8001104 <CAN_setMotorCtrlVal+0x3ec>
					break;
 80010fe:	bf00      	nop
 8001100:	e000      	b.n	8001104 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8001102:	bf00      	nop
			break;
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bdb0      	pop	{r4, r5, r7, pc}
 800110e:	bf00      	nop
 8001110:	200000fc 	.word	0x200000fc

08001114 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001114:	b590      	push	{r4, r7, lr}
 8001116:	b08b      	sub	sp, #44	@ 0x2c
 8001118:	af00      	add	r7, sp, #0
 800111a:	4604      	mov	r4, r0
 800111c:	4608      	mov	r0, r1
 800111e:	4611      	mov	r1, r2
 8001120:	461a      	mov	r2, r3
 8001122:	eef0 6a40 	vmov.f32	s13, s0
 8001126:	eeb0 7a60 	vmov.f32	s14, s1
 800112a:	eef0 7a41 	vmov.f32	s15, s2
 800112e:	4623      	mov	r3, r4
 8001130:	75fb      	strb	r3, [r7, #23]
 8001132:	4603      	mov	r3, r0
 8001134:	75bb      	strb	r3, [r7, #22]
 8001136:	460b      	mov	r3, r1
 8001138:	757b      	strb	r3, [r7, #21]
 800113a:	4613      	mov	r3, r2
 800113c:	827b      	strh	r3, [r7, #18]
 800113e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001142:	ed87 7a02 	vstr	s14, [r7, #8]
 8001146:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	3b01      	subs	r3, #1
 8001152:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8001154:	7dbb      	ldrb	r3, [r7, #22]
 8001156:	2b02      	cmp	r3, #2
 8001158:	dc02      	bgt.n	8001160 <calcRPM_PID+0x4c>
 800115a:	2b00      	cmp	r3, #0
 800115c:	dc04      	bgt.n	8001168 <calcRPM_PID+0x54>
 800115e:	e00d      	b.n	800117c <calcRPM_PID+0x68>
 8001160:	3b03      	subs	r3, #3
 8001162:	2b01      	cmp	r3, #1
 8001164:	d80a      	bhi.n	800117c <calcRPM_PID+0x68>
 8001166:	e004      	b.n	8001172 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001168:	7d7b      	ldrb	r3, [r7, #21]
 800116a:	3b01      	subs	r3, #1
 800116c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001170:	e009      	b.n	8001186 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001172:	7d7b      	ldrb	r3, [r7, #21]
 8001174:	3303      	adds	r3, #3
 8001176:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800117a:	e004      	b.n	8001186 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 800117c:	7d7b      	ldrb	r3, [r7, #21]
 800117e:	3b01      	subs	r3, #1
 8001180:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001184:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8001186:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800118a:	7ffa      	ldrb	r2, [r7, #31]
 800118c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001190:	4c70      	ldr	r4, [pc, #448]	@ (8001354 <calcRPM_PID+0x240>)
 8001192:	4613      	mov	r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	4413      	add	r3, r2
 800119c:	4403      	add	r3, r0
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4423      	add	r3, r4
 80011a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80011a6:	7ffa      	ldrb	r2, [r7, #31]
 80011a8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80011ac:	1ac9      	subs	r1, r1, r3
 80011ae:	4c6a      	ldr	r4, [pc, #424]	@ (8001358 <calcRPM_PID+0x244>)
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	4413      	add	r3, r2
 80011ba:	4403      	add	r3, r0
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	4423      	add	r3, r4
 80011c0:	3304      	adds	r3, #4
 80011c2:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80011c4:	7ffa      	ldrb	r2, [r7, #31]
 80011c6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80011ca:	4863      	ldr	r0, [pc, #396]	@ (8001358 <calcRPM_PID+0x244>)
 80011cc:	4613      	mov	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	4413      	add	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	4403      	add	r3, r0
 80011dc:	3308      	adds	r3, #8
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	7ffa      	ldrb	r2, [r7, #31]
 80011e2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80011e6:	4c5c      	ldr	r4, [pc, #368]	@ (8001358 <calcRPM_PID+0x244>)
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	4413      	add	r3, r2
 80011f2:	4403      	add	r3, r0
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	4423      	add	r3, r4
 80011f8:	3304      	adds	r3, #4
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	7ffa      	ldrb	r2, [r7, #31]
 80011fe:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001202:	4419      	add	r1, r3
 8001204:	4c54      	ldr	r4, [pc, #336]	@ (8001358 <calcRPM_PID+0x244>)
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	005b      	lsls	r3, r3, #1
 800120e:	4413      	add	r3, r2
 8001210:	4403      	add	r3, r0
 8001212:	011b      	lsls	r3, r3, #4
 8001214:	4423      	add	r3, r4
 8001216:	3308      	adds	r3, #8
 8001218:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 800121a:	7ffa      	ldrb	r2, [r7, #31]
 800121c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001220:	484d      	ldr	r0, [pc, #308]	@ (8001358 <calcRPM_PID+0x244>)
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	4413      	add	r3, r2
 800122c:	440b      	add	r3, r1
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	4403      	add	r3, r0
 8001232:	6819      	ldr	r1, [r3, #0]
 8001234:	7ffa      	ldrb	r2, [r7, #31]
 8001236:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800123a:	4c46      	ldr	r4, [pc, #280]	@ (8001354 <calcRPM_PID+0x240>)
 800123c:	4613      	mov	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4413      	add	r3, r2
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	4403      	add	r3, r0
 8001248:	00db      	lsls	r3, r3, #3
 800124a:	4423      	add	r3, r4
 800124c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001250:	7ffa      	ldrb	r2, [r7, #31]
 8001252:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001256:	1ac9      	subs	r1, r1, r3
 8001258:	4c3f      	ldr	r4, [pc, #252]	@ (8001358 <calcRPM_PID+0x244>)
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	4403      	add	r3, r0
 8001266:	011b      	lsls	r3, r3, #4
 8001268:	4423      	add	r3, r4
 800126a:	330c      	adds	r3, #12
 800126c:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 800126e:	7ffa      	ldrb	r2, [r7, #31]
 8001270:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001274:	4837      	ldr	r0, [pc, #220]	@ (8001354 <calcRPM_PID+0x240>)
 8001276:	4613      	mov	r3, r2
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	4413      	add	r3, r2
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	4413      	add	r3, r2
 8001280:	440b      	add	r3, r1
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	4403      	add	r3, r0
 8001286:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800128a:	7ffa      	ldrb	r2, [r7, #31]
 800128c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001290:	461c      	mov	r4, r3
 8001292:	4831      	ldr	r0, [pc, #196]	@ (8001358 <calcRPM_PID+0x244>)
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	4413      	add	r3, r2
 800129e:	440b      	add	r3, r1
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	4403      	add	r3, r0
 80012a4:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80012a6:	ed97 7a01 	vldr	s14, [r7, #4]
 80012aa:	7ffa      	ldrb	r2, [r7, #31]
 80012ac:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80012b0:	4829      	ldr	r0, [pc, #164]	@ (8001358 <calcRPM_PID+0x244>)
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4413      	add	r3, r2
 80012bc:	440b      	add	r3, r1
 80012be:	011b      	lsls	r3, r3, #4
 80012c0:	4403      	add	r3, r0
 80012c2:	3304      	adds	r3, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	ee07 3a90 	vmov	s15, r3
 80012ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d2:	edd7 6a02 	vldr	s13, [r7, #8]
 80012d6:	7ffa      	ldrb	r2, [r7, #31]
 80012d8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80012dc:	481e      	ldr	r0, [pc, #120]	@ (8001358 <calcRPM_PID+0x244>)
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	4413      	add	r3, r2
 80012e8:	440b      	add	r3, r1
 80012ea:	011b      	lsls	r3, r3, #4
 80012ec:	4403      	add	r3, r0
 80012ee:	3308      	adds	r3, #8
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	ee07 3a90 	vmov	s15, r3
 80012f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001302:	edd7 6a03 	vldr	s13, [r7, #12]
 8001306:	7ffa      	ldrb	r2, [r7, #31]
 8001308:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800130c:	4812      	ldr	r0, [pc, #72]	@ (8001358 <calcRPM_PID+0x244>)
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	4413      	add	r3, r2
 8001318:	440b      	add	r3, r1
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4403      	add	r3, r0
 800131e:	330c      	adds	r3, #12
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	ee07 3a90 	vmov	s15, r3
 8001326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800132e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001336:	ee17 3a90 	vmov	r3, s15
 800133a:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 800133c:	7dbb      	ldrb	r3, [r7, #22]
 800133e:	6a39      	ldr	r1, [r7, #32]
 8001340:	4618      	mov	r0, r3
 8001342:	f000 f997 	bl	8001674 <applyCtrlLimit>
 8001346:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001348:	6a3b      	ldr	r3, [r7, #32]
}
 800134a:	4618      	mov	r0, r3
 800134c:	372c      	adds	r7, #44	@ 0x2c
 800134e:	46bd      	mov	sp, r7
 8001350:	bd90      	pop	{r4, r7, pc}
 8001352:	bf00      	nop
 8001354:	2000012c 	.word	0x2000012c
 8001358:	200001dc 	.word	0x200001dc

0800135c <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b08b      	sub	sp, #44	@ 0x2c
 8001360:	af00      	add	r7, sp, #0
 8001362:	4604      	mov	r4, r0
 8001364:	4608      	mov	r0, r1
 8001366:	4611      	mov	r1, r2
 8001368:	461a      	mov	r2, r3
 800136a:	eef0 6a40 	vmov.f32	s13, s0
 800136e:	eeb0 7a60 	vmov.f32	s14, s1
 8001372:	eef0 7a41 	vmov.f32	s15, s2
 8001376:	4623      	mov	r3, r4
 8001378:	75fb      	strb	r3, [r7, #23]
 800137a:	4603      	mov	r3, r0
 800137c:	75bb      	strb	r3, [r7, #22]
 800137e:	460b      	mov	r3, r1
 8001380:	757b      	strb	r3, [r7, #21]
 8001382:	4613      	mov	r3, r2
 8001384:	827b      	strh	r3, [r7, #18]
 8001386:	edc7 6a01 	vstr	s13, [r7, #4]
 800138a:	ed87 7a02 	vstr	s14, [r7, #8]
 800138e:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	3b01      	subs	r3, #1
 800139a:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 80013a4:	7dbb      	ldrb	r3, [r7, #22]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	dc02      	bgt.n	80013b0 <calcPosition_PID+0x54>
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dc04      	bgt.n	80013b8 <calcPosition_PID+0x5c>
 80013ae:	e00d      	b.n	80013cc <calcPosition_PID+0x70>
 80013b0:	3b03      	subs	r3, #3
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d80a      	bhi.n	80013cc <calcPosition_PID+0x70>
 80013b6:	e004      	b.n	80013c2 <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 80013b8:	7d7b      	ldrb	r3, [r7, #21]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80013c0:	e009      	b.n	80013d6 <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80013c2:	7d7b      	ldrb	r3, [r7, #21]
 80013c4:	3303      	adds	r3, #3
 80013c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80013ca:	e004      	b.n	80013d6 <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 80013cc:	7d7b      	ldrb	r3, [r7, #21]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80013d4:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 80013d6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80013da:	7ffa      	ldrb	r2, [r7, #31]
 80013dc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80013e0:	4ca2      	ldr	r4, [pc, #648]	@ (800166c <calcPosition_PID+0x310>)
 80013e2:	4613      	mov	r3, r2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	4413      	add	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	4403      	add	r3, r0
 80013ee:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80013f2:	1acb      	subs	r3, r1, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db10      	blt.n	800141a <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 80013f8:	8a79      	ldrh	r1, [r7, #18]
 80013fa:	7ffa      	ldrb	r2, [r7, #31]
 80013fc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001400:	4c9a      	ldr	r4, [pc, #616]	@ (800166c <calcPosition_PID+0x310>)
 8001402:	4613      	mov	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4413      	add	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	4403      	add	r3, r0
 800140e:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001412:	1acb      	subs	r3, r1, r3
 8001414:	b29b      	uxth	r3, r3
 8001416:	83bb      	strh	r3, [r7, #28]
 8001418:	e012      	b.n	8001440 <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 800141a:	8a79      	ldrh	r1, [r7, #18]
 800141c:	7ffa      	ldrb	r2, [r7, #31]
 800141e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001422:	4c92      	ldr	r4, [pc, #584]	@ (800166c <calcPosition_PID+0x310>)
 8001424:	4613      	mov	r3, r2
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4413      	add	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	4413      	add	r3, r2
 800142e:	4403      	add	r3, r0
 8001430:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001434:	1acb      	subs	r3, r1, r3
 8001436:	b29b      	uxth	r3, r3
 8001438:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800143c:	b29b      	uxth	r3, r3
 800143e:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 8001440:	7ffa      	ldrb	r2, [r7, #31]
 8001442:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001446:	4889      	ldr	r0, [pc, #548]	@ (800166c <calcPosition_PID+0x310>)
 8001448:	4613      	mov	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	4413      	add	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	440b      	add	r3, r1
 8001454:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001458:	461a      	mov	r2, r3
 800145a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b00      	cmp	r3, #0
 8001462:	db10      	blt.n	8001486 <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 8001464:	7ffa      	ldrb	r2, [r7, #31]
 8001466:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800146a:	4880      	ldr	r0, [pc, #512]	@ (800166c <calcPosition_PID+0x310>)
 800146c:	4613      	mov	r3, r2
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	440b      	add	r3, r1
 8001478:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 800147c:	8a7b      	ldrh	r3, [r7, #18]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	b29b      	uxth	r3, r3
 8001482:	837b      	strh	r3, [r7, #26]
 8001484:	e012      	b.n	80014ac <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 8001486:	7ffa      	ldrb	r2, [r7, #31]
 8001488:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800148c:	4877      	ldr	r0, [pc, #476]	@ (800166c <calcPosition_PID+0x310>)
 800148e:	4613      	mov	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	440b      	add	r3, r1
 800149a:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 800149e:	8a7b      	ldrh	r3, [r7, #18]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 80014a8:	b29b      	uxth	r3, r3
 80014aa:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 80014ac:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80014b0:	7ffa      	ldrb	r2, [r7, #31]
 80014b2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80014b6:	4c6d      	ldr	r4, [pc, #436]	@ (800166c <calcPosition_PID+0x310>)
 80014b8:	4613      	mov	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	4413      	add	r3, r2
 80014c2:	4403      	add	r3, r0
 80014c4:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80014c8:	7ffa      	ldrb	r2, [r7, #31]
 80014ca:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80014ce:	1ac9      	subs	r1, r1, r3
 80014d0:	4c67      	ldr	r4, [pc, #412]	@ (8001670 <calcPosition_PID+0x314>)
 80014d2:	4613      	mov	r3, r2
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	4403      	add	r3, r0
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4423      	add	r3, r4
 80014e2:	3304      	adds	r3, #4
 80014e4:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80014e6:	7ffa      	ldrb	r2, [r7, #31]
 80014e8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80014ec:	4860      	ldr	r0, [pc, #384]	@ (8001670 <calcPosition_PID+0x314>)
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	011b      	lsls	r3, r3, #4
 80014fc:	4403      	add	r3, r0
 80014fe:	3308      	adds	r3, #8
 8001500:	6819      	ldr	r1, [r3, #0]
 8001502:	7ffa      	ldrb	r2, [r7, #31]
 8001504:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001508:	4c59      	ldr	r4, [pc, #356]	@ (8001670 <calcPosition_PID+0x314>)
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	4403      	add	r3, r0
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4423      	add	r3, r4
 800151a:	3304      	adds	r3, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	7ffa      	ldrb	r2, [r7, #31]
 8001520:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001524:	4419      	add	r1, r3
 8001526:	4c52      	ldr	r4, [pc, #328]	@ (8001670 <calcPosition_PID+0x314>)
 8001528:	4613      	mov	r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4413      	add	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	4403      	add	r3, r0
 8001534:	011b      	lsls	r3, r3, #4
 8001536:	4423      	add	r3, r4
 8001538:	3308      	adds	r3, #8
 800153a:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 800153c:	7ffa      	ldrb	r2, [r7, #31]
 800153e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001542:	484b      	ldr	r0, [pc, #300]	@ (8001670 <calcPosition_PID+0x314>)
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	440b      	add	r3, r1
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	4403      	add	r3, r0
 8001554:	6819      	ldr	r1, [r3, #0]
 8001556:	7ffa      	ldrb	r2, [r7, #31]
 8001558:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800155c:	4c43      	ldr	r4, [pc, #268]	@ (800166c <calcPosition_PID+0x310>)
 800155e:	4613      	mov	r3, r2
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4413      	add	r3, r2
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	4413      	add	r3, r2
 8001568:	4403      	add	r3, r0
 800156a:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 800156e:	7ffa      	ldrb	r2, [r7, #31]
 8001570:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001574:	1ac9      	subs	r1, r1, r3
 8001576:	4c3e      	ldr	r4, [pc, #248]	@ (8001670 <calcPosition_PID+0x314>)
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	005b      	lsls	r3, r3, #1
 8001580:	4413      	add	r3, r2
 8001582:	4403      	add	r3, r0
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	4423      	add	r3, r4
 8001588:	330c      	adds	r3, #12
 800158a:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 800158c:	7ffa      	ldrb	r2, [r7, #31]
 800158e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001592:	4836      	ldr	r0, [pc, #216]	@ (800166c <calcPosition_PID+0x310>)
 8001594:	4613      	mov	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	4413      	add	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	440b      	add	r3, r1
 80015a0:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 80015a4:	7ffa      	ldrb	r2, [r7, #31]
 80015a6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80015aa:	461c      	mov	r4, r3
 80015ac:	4830      	ldr	r0, [pc, #192]	@ (8001670 <calcPosition_PID+0x314>)
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	4413      	add	r3, r2
 80015b8:	440b      	add	r3, r1
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	4403      	add	r3, r0
 80015be:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 80015c0:	ed97 7a01 	vldr	s14, [r7, #4]
 80015c4:	7ffa      	ldrb	r2, [r7, #31]
 80015c6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80015ca:	4829      	ldr	r0, [pc, #164]	@ (8001670 <calcPosition_PID+0x314>)
 80015cc:	4613      	mov	r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	440b      	add	r3, r1
 80015d8:	011b      	lsls	r3, r3, #4
 80015da:	4403      	add	r3, r0
 80015dc:	3304      	adds	r3, #4
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	ee07 3a90 	vmov	s15, r3
 80015e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ec:	edd7 6a02 	vldr	s13, [r7, #8]
 80015f0:	7ffa      	ldrb	r2, [r7, #31]
 80015f2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80015f6:	481e      	ldr	r0, [pc, #120]	@ (8001670 <calcPosition_PID+0x314>)
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	4413      	add	r3, r2
 8001602:	440b      	add	r3, r1
 8001604:	011b      	lsls	r3, r3, #4
 8001606:	4403      	add	r3, r0
 8001608:	3308      	adds	r3, #8
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	ee07 3a90 	vmov	s15, r3
 8001610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001614:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800161c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001620:	7ffa      	ldrb	r2, [r7, #31]
 8001622:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001626:	4812      	ldr	r0, [pc, #72]	@ (8001670 <calcPosition_PID+0x314>)
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	4413      	add	r3, r2
 8001632:	440b      	add	r3, r1
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	4403      	add	r3, r0
 8001638:	330c      	adds	r3, #12
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	ee07 3a90 	vmov	s15, r3
 8001640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001644:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800164c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001650:	ee17 3a90 	vmov	r3, s15
 8001654:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001656:	7dbb      	ldrb	r3, [r7, #22]
 8001658:	6a39      	ldr	r1, [r7, #32]
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f80a 	bl	8001674 <applyCtrlLimit>
 8001660:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 8001662:	6a3b      	ldr	r3, [r7, #32]
}
 8001664:	4618      	mov	r0, r3
 8001666:	372c      	adds	r7, #44	@ 0x2c
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	2000012c 	.word	0x2000012c
 8001670:	200001dc 	.word	0x200001dc

08001674 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	4603      	mov	r3, r0
 800167c:	6039      	str	r1, [r7, #0]
 800167e:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8001680:	79fb      	ldrb	r3, [r7, #7]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d009      	beq.n	800169a <applyCtrlLimit+0x26>
 8001686:	2b04      	cmp	r3, #4
 8001688:	dc29      	bgt.n	80016de <applyCtrlLimit+0x6a>
 800168a:	2b02      	cmp	r3, #2
 800168c:	dc02      	bgt.n	8001694 <applyCtrlLimit+0x20>
 800168e:	2b00      	cmp	r3, #0
 8001690:	dc03      	bgt.n	800169a <applyCtrlLimit+0x26>
 8001692:	e024      	b.n	80016de <applyCtrlLimit+0x6a>
 8001694:	2b03      	cmp	r3, #3
 8001696:	d00f      	beq.n	80016b8 <applyCtrlLimit+0x44>
 8001698:	e021      	b.n	80016de <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80016a0:	dd03      	ble.n	80016aa <applyCtrlLimit+0x36>
				val = 16384;
 80016a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80016a6:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 80016a8:	e016      	b.n	80016d8 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 80016b0:	da12      	bge.n	80016d8 <applyCtrlLimit+0x64>
				val = -16384;
 80016b2:	4b0e      	ldr	r3, [pc, #56]	@ (80016ec <applyCtrlLimit+0x78>)
 80016b4:	603b      	str	r3, [r7, #0]
			break;
 80016b6:	e00f      	b.n	80016d8 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80016be:	4293      	cmp	r3, r2
 80016c0:	dd03      	ble.n	80016ca <applyCtrlLimit+0x56>
				val = 25000;
 80016c2:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 80016c6:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 80016c8:	e008      	b.n	80016dc <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	4a08      	ldr	r2, [pc, #32]	@ (80016f0 <applyCtrlLimit+0x7c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	da04      	bge.n	80016dc <applyCtrlLimit+0x68>
				val = -25000;
 80016d2:	4b07      	ldr	r3, [pc, #28]	@ (80016f0 <applyCtrlLimit+0x7c>)
 80016d4:	603b      	str	r3, [r7, #0]
			break;
 80016d6:	e001      	b.n	80016dc <applyCtrlLimit+0x68>
			break;
 80016d8:	bf00      	nop
 80016da:	e000      	b.n	80016de <applyCtrlLimit+0x6a>
			break;
 80016dc:	bf00      	nop
		}
	}
	return val;
 80016de:	683b      	ldr	r3, [r7, #0]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	ffffc000 	.word	0xffffc000
 80016f0:	ffff9e58 	.word	0xffff9e58

080016f4 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80016f4:	b590      	push	{r4, r7, lr}
 80016f6:	b087      	sub	sp, #28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	461a      	mov	r2, r3
 8001702:	eef0 6a40 	vmov.f32	s13, s0
 8001706:	eeb0 7a60 	vmov.f32	s14, s1
 800170a:	eef0 7a41 	vmov.f32	s15, s2
 800170e:	4623      	mov	r3, r4
 8001710:	75fb      	strb	r3, [r7, #23]
 8001712:	4603      	mov	r3, r0
 8001714:	75bb      	strb	r3, [r7, #22]
 8001716:	460b      	mov	r3, r1
 8001718:	757b      	strb	r3, [r7, #21]
 800171a:	4613      	mov	r3, r2
 800171c:	827b      	strh	r3, [r7, #18]
 800171e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001722:	ed87 7a02 	vstr	s14, [r7, #8]
 8001726:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 800172a:	edd7 6a01 	vldr	s13, [r7, #4]
 800172e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001732:	edd7 7a03 	vldr	s15, [r7, #12]
 8001736:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800173a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800173e:	7db9      	ldrb	r1, [r7, #22]
 8001740:	7df8      	ldrb	r0, [r7, #23]
 8001742:	eeb0 0a66 	vmov.f32	s0, s13
 8001746:	eef0 0a47 	vmov.f32	s1, s14
 800174a:	eeb0 1a67 	vmov.f32	s2, s15
 800174e:	f7ff fce1 	bl	8001114 <calcRPM_PID>
 8001752:	4603      	mov	r3, r0
 8001754:	b21b      	sxth	r3, r3
 8001756:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800175a:	7db9      	ldrb	r1, [r7, #22]
 800175c:	7df8      	ldrb	r0, [r7, #23]
 800175e:	f7ff fadb 	bl	8000d18 <CAN_setMotorCtrlVal>
}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd90      	pop	{r4, r7, pc}

0800176a <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 800176a:	b590      	push	{r4, r7, lr}
 800176c:	b087      	sub	sp, #28
 800176e:	af00      	add	r7, sp, #0
 8001770:	4604      	mov	r4, r0
 8001772:	4608      	mov	r0, r1
 8001774:	4611      	mov	r1, r2
 8001776:	461a      	mov	r2, r3
 8001778:	eef0 6a40 	vmov.f32	s13, s0
 800177c:	eeb0 7a60 	vmov.f32	s14, s1
 8001780:	eef0 7a41 	vmov.f32	s15, s2
 8001784:	4623      	mov	r3, r4
 8001786:	75fb      	strb	r3, [r7, #23]
 8001788:	4603      	mov	r3, r0
 800178a:	75bb      	strb	r3, [r7, #22]
 800178c:	460b      	mov	r3, r1
 800178e:	757b      	strb	r3, [r7, #21]
 8001790:	4613      	mov	r3, r2
 8001792:	827b      	strh	r3, [r7, #18]
 8001794:	edc7 6a01 	vstr	s13, [r7, #4]
 8001798:	ed87 7a02 	vstr	s14, [r7, #8]
 800179c:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 80017a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80017a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80017a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017b0:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80017b4:	7db9      	ldrb	r1, [r7, #22]
 80017b6:	7df8      	ldrb	r0, [r7, #23]
 80017b8:	eeb0 0a66 	vmov.f32	s0, s13
 80017bc:	eef0 0a47 	vmov.f32	s1, s14
 80017c0:	eeb0 1a67 	vmov.f32	s2, s15
 80017c4:	f7ff fdca 	bl	800135c <calcPosition_PID>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b21b      	sxth	r3, r3
 80017cc:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80017d0:	7db9      	ldrb	r1, [r7, #22]
 80017d2:	7df8      	ldrb	r0, [r7, #23]
 80017d4:	f7ff faa0 	bl	8000d18 <CAN_setMotorCtrlVal>
}
 80017d8:	bf00      	nop
 80017da:	371c      	adds	r7, #28
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd90      	pop	{r4, r7, pc}

080017e0 <getRotorPosition>:

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	460b      	mov	r3, r1
 80017ec:	71bb      	strb	r3, [r7, #6]
 80017ee:	4613      	mov	r3, r2
 80017f0:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	dc02      	bgt.n	80017fe <getRotorPosition+0x1e>
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	dc04      	bgt.n	8001806 <getRotorPosition+0x26>
 80017fc:	e034      	b.n	8001868 <getRotorPosition+0x88>
 80017fe:	3b03      	subs	r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d831      	bhi.n	8001868 <getRotorPosition+0x88>
 8001804:	e016      	b.n	8001834 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8001806:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800180a:	2b00      	cmp	r3, #0
 800180c:	dd29      	ble.n	8001862 <getRotorPosition+0x82>
 800180e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001812:	2b08      	cmp	r3, #8
 8001814:	dc25      	bgt.n	8001862 <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	1e5a      	subs	r2, r3, #1
 800181a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800181e:	1e59      	subs	r1, r3, #1
 8001820:	4815      	ldr	r0, [pc, #84]	@ (8001878 <getRotorPosition+0x98>)
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	440b      	add	r3, r1
 800182e:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001832:	e01b      	b.n	800186c <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8001834:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001838:	2b00      	cmp	r3, #0
 800183a:	dd14      	ble.n	8001866 <getRotorPosition+0x86>
 800183c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001840:	2b07      	cmp	r3, #7
 8001842:	dc10      	bgt.n	8001866 <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	1e5a      	subs	r2, r3, #1
 8001848:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800184c:	1cd9      	adds	r1, r3, #3
 800184e:	480a      	ldr	r0, [pc, #40]	@ (8001878 <getRotorPosition+0x98>)
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	440b      	add	r3, r1
 800185c:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001860:	e004      	b.n	800186c <getRotorPosition+0x8c>
			break;
 8001862:	bf00      	nop
 8001864:	e000      	b.n	8001868 <getRotorPosition+0x88>
			}
			break;
 8001866:	bf00      	nop
		}
	}
	return -1;
 8001868:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800186c:	4618      	mov	r0, r3
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	2000012c 	.word	0x2000012c

0800187c <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001884:	4905      	ldr	r1, [pc, #20]	@ (800189c <usart_Init+0x20>)
 8001886:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <usart_Init+0x24>)
 8001888:	f007 f8f6 	bl	8008a78 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 800188c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001890:	4904      	ldr	r1, [pc, #16]	@ (80018a4 <usart_Init+0x28>)
 8001892:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <usart_Init+0x2c>)
 8001894:	f007 f8f0 	bl	8008a78 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	2000033c 	.word	0x2000033c
 80018a0:	20000934 	.word	0x20000934
 80018a4:	2000043c 	.word	0x2000043c
 80018a8:	200009bc 	.word	0x200009bc

080018ac <usart_printf>:

void usart_printf(const char *fmt,...) {
 80018ac:	b40f      	push	{r0, r1, r2, r3}
 80018ae:	b580      	push	{r7, lr}
 80018b0:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80018b2:	f107 030c 	add.w	r3, r7, #12
 80018b6:	4a0c      	ldr	r2, [pc, #48]	@ (80018e8 <usart_printf+0x3c>)
 80018b8:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 80018ba:	4b0b      	ldr	r3, [pc, #44]	@ (80018e8 <usart_printf+0x3c>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	480a      	ldr	r0, [pc, #40]	@ (80018ec <usart_printf+0x40>)
 80018c2:	f00b f9ff 	bl	800ccc4 <vsiprintf>
 80018c6:	4603      	mov	r3, r0
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	4b09      	ldr	r3, [pc, #36]	@ (80018f0 <usart_printf+0x44>)
 80018cc:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 80018ce:	4b08      	ldr	r3, [pc, #32]	@ (80018f0 <usart_printf+0x44>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	4905      	ldr	r1, [pc, #20]	@ (80018ec <usart_printf+0x40>)
 80018d6:	4807      	ldr	r0, [pc, #28]	@ (80018f4 <usart_printf+0x48>)
 80018d8:	f007 f850 	bl	800897c <HAL_UART_Transmit_DMA>
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80018e4:	b004      	add	sp, #16
 80018e6:	4770      	bx	lr
 80018e8:	20000568 	.word	0x20000568
 80018ec:	2000056c 	.word	0x2000056c
 80018f0:	2000066c 	.word	0x2000066c
 80018f4:	20000934 	.word	0x20000934

080018f8 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001916:	2301      	movs	r3, #1
 8001918:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 800191e:	2301      	movs	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 800193a:	463b      	mov	r3, r7
 800193c:	4619      	mov	r1, r3
 800193e:	480f      	ldr	r0, [pc, #60]	@ (800197c <can_filter_init+0x6c>)
 8001940:	f002 fe7c 	bl	800463c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001944:	480d      	ldr	r0, [pc, #52]	@ (800197c <can_filter_init+0x6c>)
 8001946:	f002 ff59 	bl	80047fc <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800194a:	2102      	movs	r1, #2
 800194c:	480b      	ldr	r0, [pc, #44]	@ (800197c <can_filter_init+0x6c>)
 800194e:	f003 f986 	bl	8004c5e <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8001952:	230e      	movs	r3, #14
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8001956:	230e      	movs	r3, #14
 8001958:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 800195a:	463b      	mov	r3, r7
 800195c:	4619      	mov	r1, r3
 800195e:	4808      	ldr	r0, [pc, #32]	@ (8001980 <can_filter_init+0x70>)
 8001960:	f002 fe6c 	bl	800463c <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001964:	4806      	ldr	r0, [pc, #24]	@ (8001980 <can_filter_init+0x70>)
 8001966:	f002 ff49 	bl	80047fc <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800196a:	2102      	movs	r1, #2
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <can_filter_init+0x70>)
 800196e:	f003 f976 	bl	8004c5e <HAL_CAN_ActivateNotification>
}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	@ 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200006d0 	.word	0x200006d0
 8001980:	200006f8 	.word	0x200006f8

08001984 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 800198e:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <imu_pwm_set+0x1c>)
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8001994:	bf00      	nop
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	40014400 	.word	0x40014400

080019a4 <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	4613      	mov	r3, r2
 80019b0:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 80019b2:	4b27      	ldr	r3, [pc, #156]	@ (8001a50 <RC_init+0xac>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	695a      	ldr	r2, [r3, #20]
 80019b8:	4b25      	ldr	r3, [pc, #148]	@ (8001a50 <RC_init+0xac>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019c0:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 80019c2:	4b23      	ldr	r3, [pc, #140]	@ (8001a50 <RC_init+0xac>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68da      	ldr	r2, [r3, #12]
 80019c8:	4b21      	ldr	r3, [pc, #132]	@ (8001a50 <RC_init+0xac>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0210 	orr.w	r2, r2, #16
 80019d0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 80019d2:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <RC_init+0xb0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a54 <RC_init+0xb0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80019e2:	e007      	b.n	80019f4 <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80019e4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a54 <RC_init+0xb0>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001a54 <RC_init+0xb0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 80019f4:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <RC_init+0xb0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0301 	and.w	r3, r3, #1
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f0      	bne.n	80019e4 <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8001a02:	4b14      	ldr	r3, [pc, #80]	@ (8001a54 <RC_init+0xb0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a14      	ldr	r2, [pc, #80]	@ (8001a58 <RC_init+0xb4>)
 8001a08:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8001a0a:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <RC_init+0xb0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8001a12:	4b10      	ldr	r3, [pc, #64]	@ (8001a54 <RC_init+0xb0>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <RC_init+0xb0>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	88fa      	ldrh	r2, [r7, #6]
 8001a20:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001a22:	4b0c      	ldr	r3, [pc, #48]	@ (8001a54 <RC_init+0xb0>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4b0a      	ldr	r3, [pc, #40]	@ (8001a54 <RC_init+0xb0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001a30:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8001a32:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <RC_init+0xb0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <RC_init+0xb0>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0201 	orr.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]
}
 8001a42:	bf00      	nop
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	20000978 	.word	0x20000978
 8001a54:	20000ac0 	.word	0x20000ac0
 8001a58:	40004804 	.word	0x40004804

08001a5c <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8001a64:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a68:	f008 fa64 	bl	8009f34 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8001a6c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001b10 <imu_temp_control_task+0xb4>
 8001a70:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001b14 <imu_temp_control_task+0xb8>
 8001a74:	4a28      	ldr	r2, [pc, #160]	@ (8001b18 <imu_temp_control_task+0xbc>)
 8001a76:	2100      	movs	r1, #0
 8001a78:	4828      	ldr	r0, [pc, #160]	@ (8001b1c <imu_temp_control_task+0xc0>)
 8001a7a:	f001 f85b 	bl	8002b34 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a7e:	4b28      	ldr	r3, [pc, #160]	@ (8001b20 <imu_temp_control_task+0xc4>)
 8001a80:	2210      	movs	r2, #16
 8001a82:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a84:	4826      	ldr	r0, [pc, #152]	@ (8001b20 <imu_temp_control_task+0xc4>)
 8001a86:	f005 fc8e 	bl	80073a6 <HAL_SPI_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8001a90:	f001 f84a 	bl	8002b28 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8001a94:	2000      	movs	r0, #0
 8001a96:	f009 fb6b 	bl	800b170 <pcTaskGetName>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f009 fbfb 	bl	800b298 <xTaskGetHandle>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8001b24 <imu_temp_control_task+0xc8>)
 8001aa6:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <imu_temp_control_task+0xcc>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8001aae:	bf00      	nop
 8001ab0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f00a f81b 	bl	800baf0 <ulTaskNotifyTake>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d1f7      	bne.n	8001ab0 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8001ac0:	f7fe fdca 	bl	8000658 <IMU_get_temp>
 8001ac4:	eef0 7a40 	vmov.f32	s15, s0
 8001ac8:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001b2c <imu_temp_control_task+0xd0>
 8001acc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ad0:	4812      	ldr	r0, [pc, #72]	@ (8001b1c <imu_temp_control_task+0xc0>)
 8001ad2:	f001 f886 	bl	8002be2 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8001ad6:	4b11      	ldr	r3, [pc, #68]	@ (8001b1c <imu_temp_control_task+0xc0>)
 8001ad8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001adc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae4:	d503      	bpl.n	8001aee <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b1c <imu_temp_control_task+0xc0>)
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	@ (8001b1c <imu_temp_control_task+0xc0>)
 8001af0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001af4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001af8:	ee17 3a90 	vmov	r3, s15
 8001afc:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8001afe:	89fb      	ldrh	r3, [r7, #14]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff ff3f 	bl	8001984 <imu_pwm_set>
        osDelay(5);
 8001b06:	2005      	movs	r0, #5
 8001b08:	f008 fa14 	bl	8009f34 <osDelay>
    {
 8001b0c:	e7cf      	b.n	8001aae <imu_temp_control_task+0x52>
 8001b0e:	bf00      	nop
 8001b10:	45898000 	.word	0x45898000
 8001b14:	458ca000 	.word	0x458ca000
 8001b18:	0800d720 	.word	0x0800d720
 8001b1c:	20000678 	.word	0x20000678
 8001b20:	20000774 	.word	0x20000774
 8001b24:	20000670 	.word	0x20000670
 8001b28:	20000674 	.word	0x20000674
 8001b2c:	42200000 	.word	0x42200000

08001b30 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8001b3a:	4b12      	ldr	r3, [pc, #72]	@ (8001b84 <HAL_GPIO_EXTI_Callback+0x54>)
 8001b3c:	881b      	ldrh	r3, [r3, #0]
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d11b      	bne.n	8001b7c <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8001b44:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_GPIO_EXTI_Callback+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d016      	beq.n	8001b7c <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b4e:	f009 ff41 	bl	800b9d4 <xTaskGetSchedulerState>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d011      	beq.n	8001b7c <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <HAL_GPIO_EXTI_Callback+0x5c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	490c      	ldr	r1, [pc, #48]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f00a f812 	bl	800bb88 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <HAL_GPIO_EXTI_Callback+0x60>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <HAL_GPIO_EXTI_Callback+0x4c>
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <HAL_GPIO_EXTI_Callback+0x64>)
 8001b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	f3bf 8f4f 	dsb	sy
 8001b78:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	2000000e 	.word	0x2000000e
 8001b88:	20000674 	.word	0x20000674
 8001b8c:	20000670 	.word	0x20000670
 8001b90:	200006c0 	.word	0x200006c0
 8001b94:	e000ed04 	.word	0xe000ed04

08001b98 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8001ba4:	f107 0308 	add.w	r3, r7, #8
 8001ba8:	2206      	movs	r2, #6
 8001baa:	4619      	mov	r1, r3
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 f847 	bl	8001c40 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 8001bb2:	7a7b      	ldrb	r3, [r7, #9]
 8001bb4:	b21b      	sxth	r3, r3
 8001bb6:	021b      	lsls	r3, r3, #8
 8001bb8:	b21a      	sxth	r2, r3
 8001bba:	7a3b      	ldrb	r3, [r7, #8]
 8001bbc:	b21b      	sxth	r3, r3
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8001bc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bce:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001c3c <ist8310_read_mag+0xa4>
 8001bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8001bdc:	7afb      	ldrb	r3, [r7, #11]
 8001bde:	b21b      	sxth	r3, r3
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	7abb      	ldrb	r3, [r7, #10]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	4313      	orrs	r3, r2
 8001bea:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8001bec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001bf0:	ee07 3a90 	vmov	s15, r3
 8001bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	3304      	adds	r3, #4
 8001bfc:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001c3c <ist8310_read_mag+0xa4>
 8001c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c04:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8001c08:	7b7b      	ldrb	r3, [r7, #13]
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	b21a      	sxth	r2, r3
 8001c10:	7b3b      	ldrb	r3, [r7, #12]
 8001c12:	b21b      	sxth	r3, r3
 8001c14:	4313      	orrs	r3, r2
 8001c16:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 8001c18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3308      	adds	r3, #8
 8001c28:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8001c3c <ist8310_read_mag+0xa4>
 8001c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c30:	edc3 7a00 	vstr	s15, [r3]
}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	3e99999a 	.word	0x3e99999a

08001c40 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	4603      	mov	r3, r0
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	71fb      	strb	r3, [r7, #7]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	79bb      	ldrb	r3, [r7, #6]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	210a      	movs	r1, #10
 8001c5a:	9102      	str	r1, [sp, #8]
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2301      	movs	r3, #1
 8001c64:	211c      	movs	r1, #28
 8001c66:	4803      	ldr	r0, [pc, #12]	@ (8001c74 <ist8310_IIC_read_muli_reg+0x34>)
 8001c68:	f004 fa74 	bl	8006154 <HAL_I2C_Mem_Read>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000720 	.word	0x20000720

08001c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c7c:	f002 fb70 	bl	8004360 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c80:	f000 f868 	bl	8001d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c84:	f000 fcea 	bl	800265c <MX_GPIO_Init>
  MX_DMA_Init();
 8001c88:	f000 fc9a 	bl	80025c0 <MX_DMA_Init>
  MX_CAN1_Init();
 8001c8c:	f000 f8ce 	bl	8001e2c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001c90:	f000 f902 	bl	8001e98 <MX_CAN2_Init>
  MX_SPI1_Init();
 8001c94:	f000 f964 	bl	8001f60 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001c98:	f000 fa40 	bl	800211c <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001c9c:	f000 fc10 	bl	80024c0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001ca0:	f000 fc64 	bl	800256c <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8001ca4:	f000 f992 	bl	8001fcc <MX_TIM1_Init>
  MX_TIM8_Init();
 8001ca8:	f000 fb20 	bl	80022ec <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8001cac:	f000 fc32 	bl	8002514 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8001cb0:	f000 fbb8 	bl	8002424 <MX_TIM10_Init>
  MX_I2C3_Init();
 8001cb4:	f000 f926 	bl	8001f04 <MX_I2C3_Init>
  MX_TIM5_Init();
 8001cb8:	f000 faa8 	bl	800220c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 8001cbc:	f7ff fe28 	bl	8001910 <can_filter_init>
  remote_control_init();
 8001cc0:	f001 fa18 	bl	80030f4 <remote_control_init>
  usart_Init();
 8001cc4:	f7ff fdda 	bl	800187c <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 8001cc8:	f001 fa22 	bl	8003110 <get_remote_control_point>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a14      	ldr	r2, [pc, #80]	@ (8001d20 <main+0xa8>)
 8001cd0:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001cd2:	f008 f853 	bl	8009d7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8001cd6:	4a13      	ldr	r2, [pc, #76]	@ (8001d24 <main+0xac>)
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4813      	ldr	r0, [pc, #76]	@ (8001d28 <main+0xb0>)
 8001cdc:	f008 f898 	bl	8009e10 <osThreadNew>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	4a12      	ldr	r2, [pc, #72]	@ (8001d2c <main+0xb4>)
 8001ce4:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8001ce6:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <main+0xb8>)
 8001ce8:	2100      	movs	r1, #0
 8001cea:	4812      	ldr	r0, [pc, #72]	@ (8001d34 <main+0xbc>)
 8001cec:	f008 f890 	bl	8009e10 <osThreadNew>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a11      	ldr	r2, [pc, #68]	@ (8001d38 <main+0xc0>)
 8001cf4:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8001cf6:	4a11      	ldr	r2, [pc, #68]	@ (8001d3c <main+0xc4>)
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4811      	ldr	r0, [pc, #68]	@ (8001d40 <main+0xc8>)
 8001cfc:	f008 f888 	bl	8009e10 <osThreadNew>
 8001d00:	4603      	mov	r3, r0
 8001d02:	4a10      	ldr	r2, [pc, #64]	@ (8001d44 <main+0xcc>)
 8001d04:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8001d06:	4a10      	ldr	r2, [pc, #64]	@ (8001d48 <main+0xd0>)
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4810      	ldr	r0, [pc, #64]	@ (8001d4c <main+0xd4>)
 8001d0c:	f008 f880 	bl	8009e10 <osThreadNew>
 8001d10:	4603      	mov	r3, r0
 8001d12:	4a0f      	ldr	r2, [pc, #60]	@ (8001d50 <main+0xd8>)
 8001d14:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001d16:	f008 f855 	bl	8009dc4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d1a:	bf00      	nop
 8001d1c:	e7fd      	b.n	8001d1a <main+0xa2>
 8001d1e:	bf00      	nop
 8001d20:	20000bf0 	.word	0x20000bf0
 8001d24:	0800d72c 	.word	0x0800d72c
 8001d28:	08002869 	.word	0x08002869
 8001d2c:	20000be0 	.word	0x20000be0
 8001d30:	0800d750 	.word	0x0800d750
 8001d34:	08002879 	.word	0x08002879
 8001d38:	20000be4 	.word	0x20000be4
 8001d3c:	0800d774 	.word	0x0800d774
 8001d40:	08001a5d 	.word	0x08001a5d
 8001d44:	20000be8 	.word	0x20000be8
 8001d48:	0800d798 	.word	0x0800d798
 8001d4c:	08002b19 	.word	0x08002b19
 8001d50:	20000bec 	.word	0x20000bec

08001d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b094      	sub	sp, #80	@ 0x50
 8001d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	2230      	movs	r2, #48	@ 0x30
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f00a ffb8 	bl	800ccd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <SystemClock_Config+0xd0>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	4a28      	ldr	r2, [pc, #160]	@ (8001e24 <SystemClock_Config+0xd0>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d88:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <SystemClock_Config+0xd0>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	4b23      	ldr	r3, [pc, #140]	@ (8001e28 <SystemClock_Config+0xd4>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a22      	ldr	r2, [pc, #136]	@ (8001e28 <SystemClock_Config+0xd4>)
 8001d9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b20      	ldr	r3, [pc, #128]	@ (8001e28 <SystemClock_Config+0xd4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001db4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dbe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001dc4:	2306      	movs	r3, #6
 8001dc6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dc8:	23a8      	movs	r3, #168	@ 0xa8
 8001dca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd4:	f107 0320 	add.w	r3, r7, #32
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f004 fe65 	bl	8006aa8 <HAL_RCC_OscConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001de4:	f000 fea0 	bl	8002b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de8:	230f      	movs	r3, #15
 8001dea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dec:	2302      	movs	r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001df4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001dfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e00:	f107 030c 	add.w	r3, r7, #12
 8001e04:	2105      	movs	r1, #5
 8001e06:	4618      	mov	r0, r3
 8001e08:	f005 f8c6 	bl	8006f98 <HAL_RCC_ClockConfig>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e12:	f000 fe89 	bl	8002b28 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001e16:	f005 f9a5 	bl	8007164 <HAL_RCC_EnableCSS>
}
 8001e1a:	bf00      	nop
 8001e1c:	3750      	adds	r7, #80	@ 0x50
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40007000 	.word	0x40007000

08001e2c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e30:	4b17      	ldr	r3, [pc, #92]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e32:	4a18      	ldr	r2, [pc, #96]	@ (8001e94 <MX_CAN1_Init+0x68>)
 8001e34:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8001e36:	4b16      	ldr	r3, [pc, #88]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e38:	2203      	movs	r2, #3
 8001e3a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e42:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001e48:	4b11      	ldr	r3, [pc, #68]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e4a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8001e4e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e52:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e56:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e58:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e70:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e7c:	4804      	ldr	r0, [pc, #16]	@ (8001e90 <MX_CAN1_Init+0x64>)
 8001e7e:	f002 fae1 	bl	8004444 <HAL_CAN_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001e88:	f000 fe4e 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200006d0 	.word	0x200006d0
 8001e94:	40006400 	.word	0x40006400

08001e98 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8001e9c:	4b17      	ldr	r3, [pc, #92]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001e9e:	4a18      	ldr	r2, [pc, #96]	@ (8001f00 <MX_CAN2_Init+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8001ea2:	4b16      	ldr	r3, [pc, #88]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001eae:	4b13      	ldr	r3, [pc, #76]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001eb4:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001eb6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8001eba:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001ebe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001ec2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001ec4:	4b0d      	ldr	r3, [pc, #52]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001eca:	4b0c      	ldr	r3, [pc, #48]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001ed6:	4b09      	ldr	r3, [pc, #36]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001edc:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001ee2:	4b06      	ldr	r3, [pc, #24]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001ee8:	4804      	ldr	r0, [pc, #16]	@ (8001efc <MX_CAN2_Init+0x64>)
 8001eea:	f002 faab 	bl	8004444 <HAL_CAN_Init>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8001ef4:	f000 fe18 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001ef8:	bf00      	nop
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	200006f8 	.word	0x200006f8
 8001f00:	40006800 	.word	0x40006800

08001f04 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f0a:	4a13      	ldr	r2, [pc, #76]	@ (8001f58 <MX_I2C3_Init+0x54>)
 8001f0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001f0e:	4b11      	ldr	r3, [pc, #68]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f10:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <MX_I2C3_Init+0x58>)
 8001f12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f28:	4b0a      	ldr	r3, [pc, #40]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f2e:	4b09      	ldr	r3, [pc, #36]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f3a:	4b06      	ldr	r3, [pc, #24]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f40:	4804      	ldr	r0, [pc, #16]	@ (8001f54 <MX_I2C3_Init+0x50>)
 8001f42:	f003 ffc3 	bl	8005ecc <HAL_I2C_Init>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f4c:	f000 fdec 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000720 	.word	0x20000720
 8001f58:	40005c00 	.word	0x40005c00
 8001f5c:	00061a80 	.word	0x00061a80

08001f60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f64:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001f66:	4a18      	ldr	r2, [pc, #96]	@ (8001fc8 <MX_SPI1_Init+0x68>)
 8001f68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001f6c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f72:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f78:	4b12      	ldr	r3, [pc, #72]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001f7e:	4b11      	ldr	r3, [pc, #68]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001f80:	2202      	movs	r2, #2
 8001f82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001f84:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001f86:	2201      	movs	r2, #1
 8001f88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001f8c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001f92:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001f94:	2238      	movs	r2, #56	@ 0x38
 8001f96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f98:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fa4:	4b07      	ldr	r3, [pc, #28]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001faa:	4b06      	ldr	r3, [pc, #24]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001fac:	220a      	movs	r2, #10
 8001fae:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001fb0:	4804      	ldr	r0, [pc, #16]	@ (8001fc4 <MX_SPI1_Init+0x64>)
 8001fb2:	f005 f9f8 	bl	80073a6 <HAL_SPI_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001fbc:	f000 fdb4 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000774 	.word	0x20000774
 8001fc8:	40013000 	.word	0x40013000

08001fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b092      	sub	sp, #72	@ 0x48
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fdc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	615a      	str	r2, [r3, #20]
 8001fee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00a fe6e 	bl	800ccd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ffc:	4b45      	ldr	r3, [pc, #276]	@ (8002114 <MX_TIM1_Init+0x148>)
 8001ffe:	4a46      	ldr	r2, [pc, #280]	@ (8002118 <MX_TIM1_Init+0x14c>)
 8002000:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8002002:	4b44      	ldr	r3, [pc, #272]	@ (8002114 <MX_TIM1_Init+0x148>)
 8002004:	f240 124f 	movw	r2, #335	@ 0x14f
 8002008:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800200a:	4b42      	ldr	r3, [pc, #264]	@ (8002114 <MX_TIM1_Init+0x148>)
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002010:	4b40      	ldr	r3, [pc, #256]	@ (8002114 <MX_TIM1_Init+0x148>)
 8002012:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002016:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002018:	4b3e      	ldr	r3, [pc, #248]	@ (8002114 <MX_TIM1_Init+0x148>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800201e:	4b3d      	ldr	r3, [pc, #244]	@ (8002114 <MX_TIM1_Init+0x148>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002024:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <MX_TIM1_Init+0x148>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800202a:	483a      	ldr	r0, [pc, #232]	@ (8002114 <MX_TIM1_Init+0x148>)
 800202c:	f005 fd68 	bl	8007b00 <HAL_TIM_PWM_Init>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8002036:	f000 fd77 	bl	8002b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800203a:	2300      	movs	r3, #0
 800203c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203e:	2300      	movs	r3, #0
 8002040:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002042:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002046:	4619      	mov	r1, r3
 8002048:	4832      	ldr	r0, [pc, #200]	@ (8002114 <MX_TIM1_Init+0x148>)
 800204a:	f006 fb7b 	bl	8008744 <HAL_TIMEx_MasterConfigSynchronization>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8002054:	f000 fd68 	bl	8002b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002058:	2360      	movs	r3, #96	@ 0x60
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002064:	2300      	movs	r3, #0
 8002066:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002068:	2300      	movs	r3, #0
 800206a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800206c:	2300      	movs	r3, #0
 800206e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002070:	2300      	movs	r3, #0
 8002072:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002074:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002078:	2200      	movs	r2, #0
 800207a:	4619      	mov	r1, r3
 800207c:	4825      	ldr	r0, [pc, #148]	@ (8002114 <MX_TIM1_Init+0x148>)
 800207e:	f005 fec7 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002088:	f000 fd4e 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800208c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002090:	2204      	movs	r2, #4
 8002092:	4619      	mov	r1, r3
 8002094:	481f      	ldr	r0, [pc, #124]	@ (8002114 <MX_TIM1_Init+0x148>)
 8002096:	f005 febb 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80020a0:	f000 fd42 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80020a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a8:	2208      	movs	r2, #8
 80020aa:	4619      	mov	r1, r3
 80020ac:	4819      	ldr	r0, [pc, #100]	@ (8002114 <MX_TIM1_Init+0x148>)
 80020ae:	f005 feaf 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80020b8:	f000 fd36 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c0:	220c      	movs	r2, #12
 80020c2:	4619      	mov	r1, r3
 80020c4:	4813      	ldr	r0, [pc, #76]	@ (8002114 <MX_TIM1_Init+0x148>)
 80020c6:	f005 fea3 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80020d0:	f000 fd2a 	bl	8002b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020ee:	2300      	movs	r3, #0
 80020f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020f2:	1d3b      	adds	r3, r7, #4
 80020f4:	4619      	mov	r1, r3
 80020f6:	4807      	ldr	r0, [pc, #28]	@ (8002114 <MX_TIM1_Init+0x148>)
 80020f8:	f006 fba0 	bl	800883c <HAL_TIMEx_ConfigBreakDeadTime>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8002102:	f000 fd11 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002106:	4803      	ldr	r0, [pc, #12]	@ (8002114 <MX_TIM1_Init+0x148>)
 8002108:	f001 fd30 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 800210c:	bf00      	nop
 800210e:	3748      	adds	r7, #72	@ 0x48
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200007cc 	.word	0x200007cc
 8002118:	40010000 	.word	0x40010000

0800211c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08e      	sub	sp, #56	@ 0x38
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002122:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002130:	f107 0320 	add.w	r3, r7, #32
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	615a      	str	r2, [r3, #20]
 800214a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800214c:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <MX_TIM4_Init+0xe8>)
 800214e:	4a2e      	ldr	r2, [pc, #184]	@ (8002208 <MX_TIM4_Init+0xec>)
 8002150:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8002152:	4b2c      	ldr	r3, [pc, #176]	@ (8002204 <MX_TIM4_Init+0xe8>)
 8002154:	2253      	movs	r2, #83	@ 0x53
 8002156:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002158:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <MX_TIM4_Init+0xe8>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 800215e:	4b29      	ldr	r3, [pc, #164]	@ (8002204 <MX_TIM4_Init+0xe8>)
 8002160:	f245 2207 	movw	r2, #20999	@ 0x5207
 8002164:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002166:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <MX_TIM4_Init+0xe8>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800216c:	4b25      	ldr	r3, [pc, #148]	@ (8002204 <MX_TIM4_Init+0xe8>)
 800216e:	2280      	movs	r2, #128	@ 0x80
 8002170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002172:	4824      	ldr	r0, [pc, #144]	@ (8002204 <MX_TIM4_Init+0xe8>)
 8002174:	f005 fc0c 	bl	8007990 <HAL_TIM_Base_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800217e:	f000 fcd3 	bl	8002b28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002182:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002186:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002188:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800218c:	4619      	mov	r1, r3
 800218e:	481d      	ldr	r0, [pc, #116]	@ (8002204 <MX_TIM4_Init+0xe8>)
 8002190:	f005 ff00 	bl	8007f94 <HAL_TIM_ConfigClockSource>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800219a:	f000 fcc5 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800219e:	4819      	ldr	r0, [pc, #100]	@ (8002204 <MX_TIM4_Init+0xe8>)
 80021a0:	f005 fcae 	bl	8007b00 <HAL_TIM_PWM_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80021aa:	f000 fcbd 	bl	8002b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021b6:	f107 0320 	add.w	r3, r7, #32
 80021ba:	4619      	mov	r1, r3
 80021bc:	4811      	ldr	r0, [pc, #68]	@ (8002204 <MX_TIM4_Init+0xe8>)
 80021be:	f006 fac1 	bl	8008744 <HAL_TIMEx_MasterConfigSynchronization>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80021c8:	f000 fcae 	bl	8002b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021cc:	2360      	movs	r3, #96	@ 0x60
 80021ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 80021d0:	f642 1303 	movw	r3, #10499	@ 0x2903
 80021d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021de:	1d3b      	adds	r3, r7, #4
 80021e0:	2208      	movs	r2, #8
 80021e2:	4619      	mov	r1, r3
 80021e4:	4807      	ldr	r0, [pc, #28]	@ (8002204 <MX_TIM4_Init+0xe8>)
 80021e6:	f005 fe13 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80021f0:	f000 fc9a 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021f4:	4803      	ldr	r0, [pc, #12]	@ (8002204 <MX_TIM4_Init+0xe8>)
 80021f6:	f001 fcb9 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 80021fa:	bf00      	nop
 80021fc:	3738      	adds	r7, #56	@ 0x38
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000814 	.word	0x20000814
 8002208:	40000800 	.word	0x40000800

0800220c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	@ 0x28
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002212:	f107 0320 	add.w	r3, r7, #32
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
 800221a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	2200      	movs	r2, #0
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	605a      	str	r2, [r3, #4]
 8002224:	609a      	str	r2, [r3, #8]
 8002226:	60da      	str	r2, [r3, #12]
 8002228:	611a      	str	r2, [r3, #16]
 800222a:	615a      	str	r2, [r3, #20]
 800222c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800222e:	4b2d      	ldr	r3, [pc, #180]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 8002230:	4a2d      	ldr	r2, [pc, #180]	@ (80022e8 <MX_TIM5_Init+0xdc>)
 8002232:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8002234:	4b2b      	ldr	r3, [pc, #172]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 8002236:	2253      	movs	r2, #83	@ 0x53
 8002238:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223a:	4b2a      	ldr	r3, [pc, #168]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 800223c:	2200      	movs	r2, #0
 800223e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8002240:	4b28      	ldr	r3, [pc, #160]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 8002242:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8002246:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002248:	4b26      	ldr	r3, [pc, #152]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800224e:	4b25      	ldr	r3, [pc, #148]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002254:	4823      	ldr	r0, [pc, #140]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 8002256:	f005 fc53 	bl	8007b00 <HAL_TIM_PWM_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002260:	f000 fc62 	bl	8002b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	4619      	mov	r1, r3
 8002272:	481c      	ldr	r0, [pc, #112]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 8002274:	f006 fa66 	bl	8008744 <HAL_TIMEx_MasterConfigSynchronization>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800227e:	f000 fc53 	bl	8002b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002282:	2360      	movs	r3, #96	@ 0x60
 8002284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4812      	ldr	r0, [pc, #72]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 800229a:	f005 fdb9 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80022a4:	f000 fc40 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	2204      	movs	r2, #4
 80022ac:	4619      	mov	r1, r3
 80022ae:	480d      	ldr	r0, [pc, #52]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 80022b0:	f005 fdae 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80022ba:	f000 fc35 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2208      	movs	r2, #8
 80022c2:	4619      	mov	r1, r3
 80022c4:	4807      	ldr	r0, [pc, #28]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 80022c6:	f005 fda3 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80022d0:	f000 fc2a 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80022d4:	4803      	ldr	r0, [pc, #12]	@ (80022e4 <MX_TIM5_Init+0xd8>)
 80022d6:	f001 fc49 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 80022da:	bf00      	nop
 80022dc:	3728      	adds	r7, #40	@ 0x28
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000085c 	.word	0x2000085c
 80022e8:	40000c00 	.word	0x40000c00

080022ec <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b092      	sub	sp, #72	@ 0x48
 80022f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
 800230a:	611a      	str	r2, [r3, #16]
 800230c:	615a      	str	r2, [r3, #20]
 800230e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002310:	1d3b      	adds	r3, r7, #4
 8002312:	2220      	movs	r2, #32
 8002314:	2100      	movs	r1, #0
 8002316:	4618      	mov	r0, r3
 8002318:	f00a fcde 	bl	800ccd8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800231c:	4b3f      	ldr	r3, [pc, #252]	@ (800241c <MX_TIM8_Init+0x130>)
 800231e:	4a40      	ldr	r2, [pc, #256]	@ (8002420 <MX_TIM8_Init+0x134>)
 8002320:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 335;
 8002322:	4b3e      	ldr	r3, [pc, #248]	@ (800241c <MX_TIM8_Init+0x130>)
 8002324:	f240 124f 	movw	r2, #335	@ 0x14f
 8002328:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800232a:	4b3c      	ldr	r3, [pc, #240]	@ (800241c <MX_TIM8_Init+0x130>)
 800232c:	2200      	movs	r2, #0
 800232e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002330:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <MX_TIM8_Init+0x130>)
 8002332:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002336:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002338:	4b38      	ldr	r3, [pc, #224]	@ (800241c <MX_TIM8_Init+0x130>)
 800233a:	2200      	movs	r2, #0
 800233c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800233e:	4b37      	ldr	r3, [pc, #220]	@ (800241c <MX_TIM8_Init+0x130>)
 8002340:	2200      	movs	r2, #0
 8002342:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002344:	4b35      	ldr	r3, [pc, #212]	@ (800241c <MX_TIM8_Init+0x130>)
 8002346:	2280      	movs	r2, #128	@ 0x80
 8002348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800234a:	4834      	ldr	r0, [pc, #208]	@ (800241c <MX_TIM8_Init+0x130>)
 800234c:	f005 fbd8 	bl	8007b00 <HAL_TIM_PWM_Init>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8002356:	f000 fbe7 	bl	8002b28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002362:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002366:	4619      	mov	r1, r3
 8002368:	482c      	ldr	r0, [pc, #176]	@ (800241c <MX_TIM8_Init+0x130>)
 800236a:	f006 f9eb 	bl	8008744 <HAL_TIMEx_MasterConfigSynchronization>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8002374:	f000 fbd8 	bl	8002b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002378:	2360      	movs	r3, #96	@ 0x60
 800237a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002380:	2300      	movs	r3, #0
 8002382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002384:	2300      	movs	r3, #0
 8002386:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002388:	2300      	movs	r3, #0
 800238a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002394:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002398:	2200      	movs	r2, #0
 800239a:	4619      	mov	r1, r3
 800239c:	481f      	ldr	r0, [pc, #124]	@ (800241c <MX_TIM8_Init+0x130>)
 800239e:	f005 fd37 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80023a8:	f000 fbbe 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023b0:	2204      	movs	r2, #4
 80023b2:	4619      	mov	r1, r3
 80023b4:	4819      	ldr	r0, [pc, #100]	@ (800241c <MX_TIM8_Init+0x130>)
 80023b6:	f005 fd2b 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 80023c0:	f000 fbb2 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023c8:	2208      	movs	r2, #8
 80023ca:	4619      	mov	r1, r3
 80023cc:	4813      	ldr	r0, [pc, #76]	@ (800241c <MX_TIM8_Init+0x130>)
 80023ce:	f005 fd1f 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 80023d8:	f000 fba6 	bl	8002b28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80023dc:	2300      	movs	r3, #0
 80023de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80023e4:	2300      	movs	r3, #0
 80023e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f6:	2300      	movs	r3, #0
 80023f8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80023fa:	1d3b      	adds	r3, r7, #4
 80023fc:	4619      	mov	r1, r3
 80023fe:	4807      	ldr	r0, [pc, #28]	@ (800241c <MX_TIM8_Init+0x130>)
 8002400:	f006 fa1c 	bl	800883c <HAL_TIMEx_ConfigBreakDeadTime>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 800240a:	f000 fb8d 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800240e:	4803      	ldr	r0, [pc, #12]	@ (800241c <MX_TIM8_Init+0x130>)
 8002410:	f001 fbac 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 8002414:	bf00      	nop
 8002416:	3748      	adds	r7, #72	@ 0x48
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	200008a4 	.word	0x200008a4
 8002420:	40010400 	.word	0x40010400

08002424 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b088      	sub	sp, #32
 8002428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	2200      	movs	r2, #0
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	605a      	str	r2, [r3, #4]
 8002432:	609a      	str	r2, [r3, #8]
 8002434:	60da      	str	r2, [r3, #12]
 8002436:	611a      	str	r2, [r3, #16]
 8002438:	615a      	str	r2, [r3, #20]
 800243a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800243c:	4b1e      	ldr	r3, [pc, #120]	@ (80024b8 <MX_TIM10_Init+0x94>)
 800243e:	4a1f      	ldr	r2, [pc, #124]	@ (80024bc <MX_TIM10_Init+0x98>)
 8002440:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002442:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <MX_TIM10_Init+0x94>)
 8002444:	2200      	movs	r2, #0
 8002446:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002448:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <MX_TIM10_Init+0x94>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 800244e:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <MX_TIM10_Init+0x94>)
 8002450:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002454:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002456:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <MX_TIM10_Init+0x94>)
 8002458:	2200      	movs	r2, #0
 800245a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800245c:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <MX_TIM10_Init+0x94>)
 800245e:	2200      	movs	r2, #0
 8002460:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002462:	4815      	ldr	r0, [pc, #84]	@ (80024b8 <MX_TIM10_Init+0x94>)
 8002464:	f005 fa94 	bl	8007990 <HAL_TIM_Base_Init>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800246e:	f000 fb5b 	bl	8002b28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002472:	4811      	ldr	r0, [pc, #68]	@ (80024b8 <MX_TIM10_Init+0x94>)
 8002474:	f005 fb44 	bl	8007b00 <HAL_TIM_PWM_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800247e:	f000 fb53 	bl	8002b28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002482:	2360      	movs	r3, #96	@ 0x60
 8002484:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002486:	2300      	movs	r3, #0
 8002488:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800248e:	2300      	movs	r3, #0
 8002490:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002492:	1d3b      	adds	r3, r7, #4
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	4807      	ldr	r0, [pc, #28]	@ (80024b8 <MX_TIM10_Init+0x94>)
 800249a:	f005 fcb9 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80024a4:	f000 fb40 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80024a8:	4803      	ldr	r0, [pc, #12]	@ (80024b8 <MX_TIM10_Init+0x94>)
 80024aa:	f001 fb5f 	bl	8003b6c <HAL_TIM_MspPostInit>

}
 80024ae:	bf00      	nop
 80024b0:	3720      	adds	r7, #32
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200008ec 	.word	0x200008ec
 80024bc:	40014400 	.word	0x40014400

080024c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <MX_USART1_UART_Init+0x50>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b09      	ldr	r3, [pc, #36]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024f8:	f006 f9f2 	bl	80088e0 <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002502:	f000 fb11 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000934 	.word	0x20000934
 8002510:	40011000 	.word	0x40011000

08002514 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <MX_USART3_UART_Init+0x4c>)
 800251a:	4a12      	ldr	r2, [pc, #72]	@ (8002564 <MX_USART3_UART_Init+0x50>)
 800251c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <MX_USART3_UART_Init+0x4c>)
 8002520:	4a11      	ldr	r2, [pc, #68]	@ (8002568 <MX_USART3_UART_Init+0x54>)
 8002522:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002524:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <MX_USART3_UART_Init+0x4c>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <MX_USART3_UART_Init+0x4c>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <MX_USART3_UART_Init+0x4c>)
 8002532:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002536:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002538:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <MX_USART3_UART_Init+0x4c>)
 800253a:	220c      	movs	r2, #12
 800253c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253e:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <MX_USART3_UART_Init+0x4c>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <MX_USART3_UART_Init+0x4c>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800254a:	4805      	ldr	r0, [pc, #20]	@ (8002560 <MX_USART3_UART_Init+0x4c>)
 800254c:	f006 f9c8 	bl	80088e0 <HAL_UART_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002556:	f000 fae7 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	20000978 	.word	0x20000978
 8002564:	40004800 	.word	0x40004800
 8002568:	000186a0 	.word	0x000186a0

0800256c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <MX_USART6_UART_Init+0x4c>)
 8002572:	4a12      	ldr	r2, [pc, #72]	@ (80025bc <MX_USART6_UART_Init+0x50>)
 8002574:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <MX_USART6_UART_Init+0x4c>)
 8002578:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800257c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <MX_USART6_UART_Init+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <MX_USART6_UART_Init+0x4c>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800258a:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <MX_USART6_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002590:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <MX_USART6_UART_Init+0x4c>)
 8002592:	220c      	movs	r2, #12
 8002594:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <MX_USART6_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <MX_USART6_UART_Init+0x4c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <MX_USART6_UART_Init+0x4c>)
 80025a4:	f006 f99c 	bl	80088e0 <HAL_UART_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80025ae:	f000 fabb 	bl	8002b28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	200009bc 	.word	0x200009bc
 80025bc:	40011400 	.word	0x40011400

080025c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	607b      	str	r3, [r7, #4]
 80025ca:	4b23      	ldr	r3, [pc, #140]	@ (8002658 <MX_DMA_Init+0x98>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	4a22      	ldr	r2, [pc, #136]	@ (8002658 <MX_DMA_Init+0x98>)
 80025d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d6:	4b20      	ldr	r3, [pc, #128]	@ (8002658 <MX_DMA_Init+0x98>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025de:	607b      	str	r3, [r7, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	603b      	str	r3, [r7, #0]
 80025e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002658 <MX_DMA_Init+0x98>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <MX_DMA_Init+0x98>)
 80025ec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80025f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f2:	4b19      	ldr	r3, [pc, #100]	@ (8002658 <MX_DMA_Init+0x98>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025fa:	603b      	str	r3, [r7, #0]
 80025fc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2105      	movs	r1, #5
 8002602:	200c      	movs	r0, #12
 8002604:	f002 fe5b 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002608:	200c      	movs	r0, #12
 800260a:	f002 fe74 	bl	80052f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2105      	movs	r1, #5
 8002612:	2039      	movs	r0, #57	@ 0x39
 8002614:	f002 fe53 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002618:	2039      	movs	r0, #57	@ 0x39
 800261a:	f002 fe6c 	bl	80052f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	2105      	movs	r1, #5
 8002622:	203a      	movs	r0, #58	@ 0x3a
 8002624:	f002 fe4b 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002628:	203a      	movs	r0, #58	@ 0x3a
 800262a:	f002 fe64 	bl	80052f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	2105      	movs	r1, #5
 8002632:	2045      	movs	r0, #69	@ 0x45
 8002634:	f002 fe43 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002638:	2045      	movs	r0, #69	@ 0x45
 800263a:	f002 fe5c 	bl	80052f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800263e:	2200      	movs	r2, #0
 8002640:	2105      	movs	r1, #5
 8002642:	2046      	movs	r0, #70	@ 0x46
 8002644:	f002 fe3b 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002648:	2046      	movs	r0, #70	@ 0x46
 800264a:	f002 fe54 	bl	80052f6 <HAL_NVIC_EnableIRQ>

}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800

0800265c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08e      	sub	sp, #56	@ 0x38
 8002660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002662:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	623b      	str	r3, [r7, #32]
 8002676:	4b77      	ldr	r3, [pc, #476]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a76      	ldr	r2, [pc, #472]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 800267c:	f043 0302 	orr.w	r3, r3, #2
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b74      	ldr	r3, [pc, #464]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	623b      	str	r3, [r7, #32]
 800268c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	4b70      	ldr	r3, [pc, #448]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a6f      	ldr	r2, [pc, #444]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b6d      	ldr	r3, [pc, #436]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	4b69      	ldr	r3, [pc, #420]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a68      	ldr	r2, [pc, #416]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026b4:	f043 0301 	orr.w	r3, r3, #1
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b66      	ldr	r3, [pc, #408]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	61bb      	str	r3, [r7, #24]
 80026c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	617b      	str	r3, [r7, #20]
 80026ca:	4b62      	ldr	r3, [pc, #392]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a61      	ldr	r2, [pc, #388]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	4a5a      	ldr	r2, [pc, #360]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f2:	4b58      	ldr	r3, [pc, #352]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	4b54      	ldr	r3, [pc, #336]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	4a53      	ldr	r2, [pc, #332]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270c:	6313      	str	r3, [r2, #48]	@ 0x30
 800270e:	4b51      	ldr	r3, [pc, #324]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	4b4d      	ldr	r3, [pc, #308]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4a4c      	ldr	r2, [pc, #304]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4b4a      	ldr	r3, [pc, #296]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002732:	60bb      	str	r3, [r7, #8]
 8002734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	4b46      	ldr	r3, [pc, #280]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 800273c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273e:	4a45      	ldr	r2, [pc, #276]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002740:	f043 0320 	orr.w	r3, r3, #32
 8002744:	6313      	str	r3, [r2, #48]	@ 0x30
 8002746:	4b43      	ldr	r3, [pc, #268]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274a:	f003 0320 	and.w	r3, r3, #32
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4b3f      	ldr	r3, [pc, #252]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a3e      	ldr	r2, [pc, #248]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 800275c:	f043 0310 	orr.w	r3, r3, #16
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b3c      	ldr	r3, [pc, #240]	@ (8002854 <MX_GPIO_Init+0x1f8>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0310 	and.w	r3, r3, #16
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800276e:	2200      	movs	r2, #0
 8002770:	2140      	movs	r1, #64	@ 0x40
 8002772:	4839      	ldr	r0, [pc, #228]	@ (8002858 <MX_GPIO_Init+0x1fc>)
 8002774:	f003 fb78 	bl	8005e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002778:	2200      	movs	r2, #0
 800277a:	2110      	movs	r1, #16
 800277c:	4837      	ldr	r0, [pc, #220]	@ (800285c <MX_GPIO_Init+0x200>)
 800277e:	f003 fb73 	bl	8005e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	2101      	movs	r1, #1
 8002786:	4836      	ldr	r0, [pc, #216]	@ (8002860 <MX_GPIO_Init+0x204>)
 8002788:	f003 fb6e 	bl	8005e68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800278c:	2340      	movs	r3, #64	@ 0x40
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002790:	2301      	movs	r3, #1
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002794:	2300      	movs	r3, #0
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002798:	2300      	movs	r3, #0
 800279a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800279c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a0:	4619      	mov	r1, r3
 80027a2:	482d      	ldr	r0, [pc, #180]	@ (8002858 <MX_GPIO_Init+0x1fc>)
 80027a4:	f003 f9c4 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027a8:	2308      	movs	r3, #8
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80027b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ba:	4619      	mov	r1, r3
 80027bc:	4826      	ldr	r0, [pc, #152]	@ (8002858 <MX_GPIO_Init+0x1fc>)
 80027be:	f003 f9b7 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80027c2:	2301      	movs	r3, #1
 80027c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027c6:	2300      	movs	r3, #0
 80027c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027d2:	4619      	mov	r1, r3
 80027d4:	4821      	ldr	r0, [pc, #132]	@ (800285c <MX_GPIO_Init+0x200>)
 80027d6:	f003 f9ab 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80027da:	2310      	movs	r3, #16
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027de:	2301      	movs	r3, #1
 80027e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027e6:	2300      	movs	r3, #0
 80027e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ee:	4619      	mov	r1, r3
 80027f0:	481a      	ldr	r0, [pc, #104]	@ (800285c <MX_GPIO_Init+0x200>)
 80027f2:	f003 f99d 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80027f6:	2330      	movs	r3, #48	@ 0x30
 80027f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80027fa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80027fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002808:	4619      	mov	r1, r3
 800280a:	4816      	ldr	r0, [pc, #88]	@ (8002864 <MX_GPIO_Init+0x208>)
 800280c:	f003 f990 	bl	8005b30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002810:	2301      	movs	r3, #1
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002814:	2301      	movs	r3, #1
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002818:	2300      	movs	r3, #0
 800281a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281c:	2300      	movs	r3, #0
 800281e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002820:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002824:	4619      	mov	r1, r3
 8002826:	480e      	ldr	r0, [pc, #56]	@ (8002860 <MX_GPIO_Init+0x204>)
 8002828:	f003 f982 	bl	8005b30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800282c:	2200      	movs	r2, #0
 800282e:	2105      	movs	r1, #5
 8002830:	2009      	movs	r0, #9
 8002832:	f002 fd44 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002836:	2009      	movs	r0, #9
 8002838:	f002 fd5d 	bl	80052f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800283c:	2200      	movs	r2, #0
 800283e:	2105      	movs	r1, #5
 8002840:	200a      	movs	r0, #10
 8002842:	f002 fd3c 	bl	80052be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002846:	200a      	movs	r0, #10
 8002848:	f002 fd55 	bl	80052f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800284c:	bf00      	nop
 800284e:	3738      	adds	r7, #56	@ 0x38
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	40021800 	.word	0x40021800
 800285c:	40020000 	.word	0x40020000
 8002860:	40020400 	.word	0x40020400
 8002864:	40020800 	.word	0x40020800

08002868 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	for(;;) {
		osDelay(5);
 8002870:	2005      	movs	r0, #5
 8002872:	f007 fb5f 	bl	8009f34 <osDelay>
 8002876:	e7fb      	b.n	8002870 <TaskMain+0x8>

08002878 <TaskChassis>:
* @brief Function implementing the chassisTask thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument) {
 8002878:	b5b0      	push	{r4, r5, r7, lr}
 800287a:	b098      	sub	sp, #96	@ 0x60
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN TaskChassis */
	PWMInit(&htim1, &htim4, &htim5, &htim8);
 8002880:	4b99      	ldr	r3, [pc, #612]	@ (8002ae8 <TaskChassis+0x270>)
 8002882:	4a9a      	ldr	r2, [pc, #616]	@ (8002aec <TaskChassis+0x274>)
 8002884:	499a      	ldr	r1, [pc, #616]	@ (8002af0 <TaskChassis+0x278>)
 8002886:	489b      	ldr	r0, [pc, #620]	@ (8002af4 <TaskChassis+0x27c>)
 8002888:	f000 faf4 	bl	8002e74 <PWMInit>

	PID_preset_t YPVoltageRPM = {10.0, 0.0, 0.0};
 800288c:	4b9a      	ldr	r3, [pc, #616]	@ (8002af8 <TaskChassis+0x280>)
 800288e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	647b      	str	r3, [r7, #68]	@ 0x44
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	64bb      	str	r3, [r7, #72]	@ 0x48
	// 12, 0, 10
	PID_preset_t testBoi = {1.0, 0.0, 0.5};
 800289c:	4a97      	ldr	r2, [pc, #604]	@ (8002afc <TaskChassis+0x284>)
 800289e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80028a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t testBoi2 = {100.0, 0.0, 10};
 80028a8:	4a95      	ldr	r2, [pc, #596]	@ (8002b00 <TaskChassis+0x288>)
 80028aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80028ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80028b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	PID_preset_t yawPresetVoltageRPM = {12.0, 0.0, 0.0};
 80028b4:	4b93      	ldr	r3, [pc, #588]	@ (8002b04 <TaskChassis+0x28c>)
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	623b      	str	r3, [r7, #32]
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	627b      	str	r3, [r7, #36]	@ 0x24
	PID_preset_t pitchBoi = {40.0, 0.0, 120.0};
 80028c4:	4a90      	ldr	r2, [pc, #576]	@ (8002b08 <TaskChassis+0x290>)
 80028c6:	f107 0310 	add.w	r3, r7, #16
 80028ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80028cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	int8_t prevTog = 1;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	int8_t tog = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d



	// int8_t FondlerOn = 0;
	int8_t initialCounter = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	int8_t jammed = 0;
 80028e2:	2300      	movs	r3, #0
 80028e4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	int16_t reverseCounter = 30;
 80028e8:	231e      	movs	r3, #30
 80028ea:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58

	int16_t upAdd = 0;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	int16_t currentAim = 6150+upAdd;
 80028f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80028f8:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
 80028fc:	3306      	adds	r3, #6
 80028fe:	b29b      	uxth	r3, r3
 8002900:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    	uint16_t currentPos = ((1.4*(getRCchannel(1)))+6150);
    	setMotorPosition(Bus1, GM6020, 7, currentPos, pitchBoi);
    	*/


    	int16_t currentPos = getRCchannel(1);
 8002904:	2001      	movs	r0, #1
 8002906:	f000 fdc3 	bl	8003490 <getRCchannel>
 800290a:	4603      	mov	r3, r0
 800290c:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    		setMotorPosition(Bus2, GM6020, 7, currentAim, pitchBoi);
    	}
		*/

    	// 0.75
		uint16_t togoVal = currentPos*0.757575f + 7000;
 8002910:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8002914:	ee07 3a90 	vmov	s15, r3
 8002918:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800291c:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8002b0c <TaskChassis+0x294>
 8002920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002924:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8002b10 <TaskChassis+0x298>
 8002928:	ee77 7a87 	vadd.f32	s15, s15, s14
 800292c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002930:	ee17 3a90 	vmov	r3, s15
 8002934:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
		setMotorPosition(Bus2, GM6020, 7, togoVal, pitchBoi);
 8002938:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 800293c:	edd7 6a04 	vldr	s13, [r7, #16]
 8002940:	ed97 7a05 	vldr	s14, [r7, #20]
 8002944:	edd7 7a06 	vldr	s15, [r7, #24]
 8002948:	eeb0 0a66 	vmov.f32	s0, s13
 800294c:	eef0 0a47 	vmov.f32	s1, s14
 8002950:	eeb0 1a67 	vmov.f32	s2, s15
 8002954:	2207      	movs	r2, #7
 8002956:	2103      	movs	r1, #3
 8002958:	2002      	movs	r0, #2
 800295a:	f7fe ff06 	bl	800176a <setMotorPosition>
    	usart_printf("%d %d\r\n", getRotorPosition(Bus1, GM6020, 1), togoVal);
 800295e:	2201      	movs	r2, #1
 8002960:	2103      	movs	r1, #3
 8002962:	2001      	movs	r0, #1
 8002964:	f7fe ff3c 	bl	80017e0 <getRotorPosition>
 8002968:	4603      	mov	r3, r0
 800296a:	4619      	mov	r1, r3
 800296c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8002970:	461a      	mov	r2, r3
 8002972:	4868      	ldr	r0, [pc, #416]	@ (8002b14 <TaskChassis+0x29c>)
 8002974:	f7fe ff9a 	bl	80018ac <usart_printf>


    	osDelay(2);
 8002978:	2002      	movs	r0, #2
 800297a:	f007 fadb 	bl	8009f34 <osDelay>

        uint16_t speed = 9000;
 800297e:	f242 3328 	movw	r3, #9000	@ 0x2328
 8002982:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

        uint16_t RCVal[4] = {0, 0, 0, 0};
 8002986:	f107 0308 	add.w	r3, r7, #8
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
        for (int8_t j = 0; j < 4; j++) {
 8002990:	2300      	movs	r3, #0
 8002992:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002996:	e017      	b.n	80029c8 <TaskChassis+0x150>
        	RCVal[j] = (uint16_t)(getRCchannel(j)+660);
 8002998:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 800299c:	4618      	mov	r0, r3
 800299e:	f000 fd77 	bl	8003490 <getRCchannel>
 80029a2:	4603      	mov	r3, r0
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 80029aa:	f502 7225 	add.w	r2, r2, #660	@ 0x294
 80029ae:	b292      	uxth	r2, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	3360      	adds	r3, #96	@ 0x60
 80029b4:	443b      	add	r3, r7
 80029b6:	f823 2c58 	strh.w	r2, [r3, #-88]
        for (int8_t j = 0; j < 4; j++) {
 80029ba:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80029c8:	f997 305f 	ldrsb.w	r3, [r7, #95]	@ 0x5f
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	dde3      	ble.n	8002998 <TaskChassis+0x120>
        }
        CAN_transmit(Bus1, 0x104, fourBitShift(RCVal[0], RCVal[1], RCVal[2], RCVal[3]));
 80029d0:	8938      	ldrh	r0, [r7, #8]
 80029d2:	8979      	ldrh	r1, [r7, #10]
 80029d4:	89ba      	ldrh	r2, [r7, #12]
 80029d6:	89fb      	ldrh	r3, [r7, #14]
 80029d8:	f7fe f897 	bl	8000b0a <fourBitShift>
 80029dc:	4602      	mov	r2, r0
 80029de:	460b      	mov	r3, r1
 80029e0:	f44f 7182 	mov.w	r1, #260	@ 0x104
 80029e4:	2001      	movs	r0, #1
 80029e6:	f7fe f901 	bl	8000bec <CAN_transmit>
        //CAN_transmit(Bus1, 0x105, 0x1122334455667788);
        CAN_transmit(Bus1, 0x105, otherSignals((uint16_t)(getRCchannel(4)+660), getRCswitch(0), getRCswitch(1)));
 80029ea:	2004      	movs	r0, #4
 80029ec:	f000 fd50 	bl	8003490 <getRCchannel>
 80029f0:	4603      	mov	r3, r0
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80029f8:	b29c      	uxth	r4, r3
 80029fa:	2000      	movs	r0, #0
 80029fc:	f000 fd5c 	bl	80034b8 <getRCswitch>
 8002a00:	4603      	mov	r3, r0
 8002a02:	461d      	mov	r5, r3
 8002a04:	2001      	movs	r0, #1
 8002a06:	f000 fd57 	bl	80034b8 <getRCswitch>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4629      	mov	r1, r5
 8002a10:	4620      	mov	r0, r4
 8002a12:	f7fe f80b 	bl	8000a2c <otherSignals>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	f240 1105 	movw	r1, #261	@ 0x105
 8002a1e:	2001      	movs	r0, #1
 8002a20:	f7fe f8e4 	bl	8000bec <CAN_transmit>
        osDelay(2);
 8002a24:	2002      	movs	r0, #2
 8002a26:	f007 fa85 	bl	8009f34 <osDelay>
        //CAN_transmit(Bus1, 0x306, otherSignals((uint16_t)(getRCchannel(4)+660), getRCswitch(0), getRCswitch(1)));
        // otherSignals((uint16_t)(getRCchannel(4)+660), getRCswitch(0), getRCswitch(1))
// getRCchannel(0), getRCchannel(1), getRCchannel(2), getRCchannel(3)
        if (getRCswitch(1) >= 2) {
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	f000 fd44 	bl	80034b8 <getRCswitch>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	dd29      	ble.n	8002a8a <TaskChassis+0x212>
            setMotorRPM(Bus2, M3508, 1, -1*speed, yawPresetVoltageRPM);
 8002a36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8002a3a:	425b      	negs	r3, r3
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	b21b      	sxth	r3, r3
 8002a40:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a44:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a48:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a4c:	eeb0 0a66 	vmov.f32	s0, s13
 8002a50:	eef0 0a47 	vmov.f32	s1, s14
 8002a54:	eeb0 1a67 	vmov.f32	s2, s15
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f7fe fe49 	bl	80016f4 <setMotorRPM>
            setMotorRPM(Bus2, M3508, 2, speed, yawPresetVoltageRPM);
 8002a62:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8002a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a6a:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a6e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a72:	eeb0 0a66 	vmov.f32	s0, s13
 8002a76:	eef0 0a47 	vmov.f32	s1, s14
 8002a7a:	eeb0 1a67 	vmov.f32	s2, s15
 8002a7e:	2202      	movs	r2, #2
 8002a80:	2101      	movs	r1, #1
 8002a82:	2002      	movs	r0, #2
 8002a84:	f7fe fe36 	bl	80016f4 <setMotorRPM>
 8002a88:	e023      	b.n	8002ad2 <TaskChassis+0x25a>
        } else {
        	setMotorRPM(Bus2, M3508, 1, 0, yawPresetVoltageRPM);
 8002a8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a8e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002a92:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a96:	eeb0 0a66 	vmov.f32	s0, s13
 8002a9a:	eef0 0a47 	vmov.f32	s1, s14
 8002a9e:	eeb0 1a67 	vmov.f32	s2, s15
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	2002      	movs	r0, #2
 8002aaa:	f7fe fe23 	bl	80016f4 <setMotorRPM>
        	setMotorRPM(Bus2, M3508, 2, 0,yawPresetVoltageRPM);
 8002aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ab2:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ab6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002aba:	eeb0 0a66 	vmov.f32	s0, s13
 8002abe:	eef0 0a47 	vmov.f32	s1, s14
 8002ac2:	eeb0 1a67 	vmov.f32	s2, s15
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	2202      	movs	r2, #2
 8002aca:	2101      	movs	r1, #1
 8002acc:	2002      	movs	r0, #2
 8002ace:	f7fe fe11 	bl	80016f4 <setMotorRPM>
    		// setMotorRPM(Bus1, M2006, 5, -5000, testBoi2);

    		//usart_printf("REVERSE\r\n");
    	}
		*/
    	osDelay(2);
 8002ad2:	2002      	movs	r0, #2
 8002ad4:	f007 fa2e 	bl	8009f34 <osDelay>


		PWMTimerStarter();
 8002ad8:	f000 fa00 	bl	8002edc <PWMTimerStarter>
		RCkeysRefresh();
 8002adc:	f000 fd00 	bl	80034e0 <RCkeysRefresh>
        osDelay(2);
 8002ae0:	2002      	movs	r0, #2
 8002ae2:	f007 fa27 	bl	8009f34 <osDelay>
    for(;;) {
 8002ae6:	e70d      	b.n	8002904 <TaskChassis+0x8c>
 8002ae8:	200008a4 	.word	0x200008a4
 8002aec:	2000085c 	.word	0x2000085c
 8002af0:	20000814 	.word	0x20000814
 8002af4:	200007cc 	.word	0x200007cc
 8002af8:	41200000 	.word	0x41200000
 8002afc:	0800d6e4 	.word	0x0800d6e4
 8002b00:	0800d6f0 	.word	0x0800d6f0
 8002b04:	41400000 	.word	0x41400000
 8002b08:	0800d6fc 	.word	0x0800d6fc
 8002b0c:	3f41f06f 	.word	0x3f41f06f
 8002b10:	45dac000 	.word	0x45dac000
 8002b14:	0800d6dc 	.word	0x0800d6dc

08002b18 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 8002b20:	2005      	movs	r0, #5
 8002b22:	f007 fa07 	bl	8009f34 <osDelay>
 8002b26:	e7fb      	b.n	8002b20 <TaskTurret+0x8>

08002b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b2c:	b672      	cpsid	i
}
 8002b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b30:	bf00      	nop
 8002b32:	e7fd      	b.n	8002b30 <Error_Handler+0x8>

08002b34 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6178      	str	r0, [r7, #20]
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	60fa      	str	r2, [r7, #12]
 8002b40:	ed87 0a02 	vstr	s0, [r7, #8]
 8002b44:	edc7 0a01 	vstr	s1, [r7, #4]
 8002b48:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d042      	beq.n	8002bd6 <PID_init+0xa2>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d03f      	beq.n	8002bd6 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	7cfa      	ldrb	r2, [r7, #19]
 8002b5a:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	3304      	adds	r3, #4
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	3308      	adds	r3, #8
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	6a1a      	ldr	r2, [r3, #32]
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	641a      	str	r2, [r3, #64]	@ 0x40
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002bd4:	e000      	b.n	8002bd8 <PID_init+0xa4>
        return;
 8002bd6:	bf00      	nop
}
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	ed87 0a02 	vstr	s0, [r7, #8]
 8002bee:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d102      	bne.n	8002bfe <PID_calc+0x1c>
    {
        return 0.0f;
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e130      	b.n	8002e60 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	68ba      	ldr	r2, [r7, #8]
 8002c18:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8002c1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f040 8095 	bne.w	8002d60 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002c88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	ed93 7a03 	vldr	s14, [r3, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cbc:	dd04      	ble.n	8002cc8 <PID_calc+0xe6>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	695a      	ldr	r2, [r3, #20]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cc6:	e014      	b.n	8002cf2 <PID_calc+0x110>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002cd4:	eef1 7a67 	vneg.f32	s15, s15
 8002cd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce0:	d507      	bpl.n	8002cf2 <PID_calc+0x110>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002ce8:	eef1 7a67 	vneg.f32	s15, s15
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002cfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	ed93 7a08 	vldr	s14, [r3, #32]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d26:	dd04      	ble.n	8002d32 <PID_calc+0x150>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	691a      	ldr	r2, [r3, #16]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	621a      	str	r2, [r3, #32]
 8002d30:	e094      	b.n	8002e5c <PID_calc+0x27a>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	ed93 7a08 	vldr	s14, [r3, #32]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d3e:	eef1 7a67 	vneg.f32	s15, s15
 8002d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4a:	f140 8087 	bpl.w	8002e5c <PID_calc+0x27a>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	edd3 7a04 	vldr	s15, [r3, #16]
 8002d54:	eef1 7a67 	vneg.f32	s15, s15
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	edc3 7a08 	vstr	s15, [r3, #32]
 8002d5e:	e07d      	b.n	8002e5c <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d179      	bne.n	8002e5c <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002d7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002dba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002dbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8002dc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	ed93 7a03 	vldr	s14, [r3, #12]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	ed93 7a08 	vldr	s14, [r3, #32]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002dfa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002e04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e26:	dd04      	ble.n	8002e32 <PID_calc+0x250>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	691a      	ldr	r2, [r3, #16]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	621a      	str	r2, [r3, #32]
 8002e30:	e014      	b.n	8002e5c <PID_calc+0x27a>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	ed93 7a08 	vldr	s14, [r3, #32]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e3e:	eef1 7a67 	vneg.f32	s15, s15
 8002e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4a:	d507      	bpl.n	8002e5c <PID_calc+0x27a>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e52:	eef1 7a67 	vneg.f32	s15, s15
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
}
 8002e60:	ee07 3a90 	vmov	s15, r3
 8002e64:	eeb0 0a67 	vmov.f32	s0, s15
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8002e82:	4a12      	ldr	r2, [pc, #72]	@ (8002ecc <PWMInit+0x58>)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8002e88:	4a11      	ldr	r2, [pc, #68]	@ (8002ed0 <PWMInit+0x5c>)
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8002e8e:	4a11      	ldr	r2, [pc, #68]	@ (8002ed4 <PWMInit+0x60>)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8002e94:	4a10      	ldr	r2, [pc, #64]	@ (8002ed8 <PWMInit+0x64>)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 8002e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <PWMInit+0x58>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f004 fdc6 	bl	8007a30 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8002ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed0 <PWMInit+0x5c>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f004 fdc1 	bl	8007a30 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8002eae:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <PWMInit+0x60>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f004 fdbc 	bl	8007a30 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8002eb8:	4b07      	ldr	r3, [pc, #28]	@ (8002ed8 <PWMInit+0x64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f004 fdb7 	bl	8007a30 <HAL_TIM_Base_Start>
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	20000bf4 	.word	0x20000bf4
 8002ed0:	20000bf8 	.word	0x20000bf8
 8002ed4:	20000bfc 	.word	0x20000bfc
 8002ed8:	20000c00 	.word	0x20000c00

08002edc <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	e0f1      	b.n	80030cc <PWMTimerStarter+0x1f0>
		switch (i) {
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b0a      	cmp	r3, #10
 8002eec:	f200 80eb 	bhi.w	80030c6 <PWMTimerStarter+0x1ea>
 8002ef0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ef8 <PWMTimerStarter+0x1c>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f25 	.word	0x08002f25
 8002efc:	08002f4b 	.word	0x08002f4b
 8002f00:	08002f71 	.word	0x08002f71
 8002f04:	08002f97 	.word	0x08002f97
 8002f08:	08002fbd 	.word	0x08002fbd
 8002f0c:	08002fe3 	.word	0x08002fe3
 8002f10:	08003009 	.word	0x08003009
 8002f14:	0800302f 	.word	0x0800302f
 8002f18:	08003055 	.word	0x08003055
 8002f1c:	0800307b 	.word	0x0800307b
 8002f20:	080030a1 	.word	0x080030a1
		case 0:
			if (whichPWMisOn[0] == 1) {
 8002f24:	4b6e      	ldr	r3, [pc, #440]	@ (80030e0 <PWMTimerStarter+0x204>)
 8002f26:	f993 3000 	ldrsb.w	r3, [r3]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d106      	bne.n	8002f3c <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8002f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80030e4 <PWMTimerStarter+0x208>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2100      	movs	r1, #0
 8002f34:	4618      	mov	r0, r3
 8002f36:	f004 fe33 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8002f3a:	e0c4      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8002f3c:	4b69      	ldr	r3, [pc, #420]	@ (80030e4 <PWMTimerStarter+0x208>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2100      	movs	r1, #0
 8002f42:	4618      	mov	r0, r3
 8002f44:	f004 fef4 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 8002f48:	e0bd      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8002f4a:	4b65      	ldr	r3, [pc, #404]	@ (80030e0 <PWMTimerStarter+0x204>)
 8002f4c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d106      	bne.n	8002f62 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8002f54:	4b63      	ldr	r3, [pc, #396]	@ (80030e4 <PWMTimerStarter+0x208>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2104      	movs	r1, #4
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f004 fe20 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8002f60:	e0b1      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8002f62:	4b60      	ldr	r3, [pc, #384]	@ (80030e4 <PWMTimerStarter+0x208>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2104      	movs	r1, #4
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f004 fee1 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 8002f6e:	e0aa      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8002f70:	4b5b      	ldr	r3, [pc, #364]	@ (80030e0 <PWMTimerStarter+0x204>)
 8002f72:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d106      	bne.n	8002f88 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8002f7a:	4b5a      	ldr	r3, [pc, #360]	@ (80030e4 <PWMTimerStarter+0x208>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2108      	movs	r1, #8
 8002f80:	4618      	mov	r0, r3
 8002f82:	f004 fe0d 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8002f86:	e09e      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8002f88:	4b56      	ldr	r3, [pc, #344]	@ (80030e4 <PWMTimerStarter+0x208>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2108      	movs	r1, #8
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f004 fece 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 8002f94:	e097      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8002f96:	4b52      	ldr	r3, [pc, #328]	@ (80030e0 <PWMTimerStarter+0x204>)
 8002f98:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d106      	bne.n	8002fae <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8002fa0:	4b50      	ldr	r3, [pc, #320]	@ (80030e4 <PWMTimerStarter+0x208>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	210c      	movs	r1, #12
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f004 fdfa 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8002fac:	e08b      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8002fae:	4b4d      	ldr	r3, [pc, #308]	@ (80030e4 <PWMTimerStarter+0x208>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	210c      	movs	r1, #12
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f004 febb 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 8002fba:	e084      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8002fbc:	4b48      	ldr	r3, [pc, #288]	@ (80030e0 <PWMTimerStarter+0x204>)
 8002fbe:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d106      	bne.n	8002fd4 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8002fc6:	4b48      	ldr	r3, [pc, #288]	@ (80030e8 <PWMTimerStarter+0x20c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2100      	movs	r1, #0
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f004 fde7 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8002fd2:	e078      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8002fd4:	4b44      	ldr	r3, [pc, #272]	@ (80030e8 <PWMTimerStarter+0x20c>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f004 fea8 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 8002fe0:	e071      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80030e0 <PWMTimerStarter+0x204>)
 8002fe4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d106      	bne.n	8002ffa <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8002fec:	4b3e      	ldr	r3, [pc, #248]	@ (80030e8 <PWMTimerStarter+0x20c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f004 fdd4 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8002ff8:	e065      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <PWMTimerStarter+0x20c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2104      	movs	r1, #4
 8003000:	4618      	mov	r0, r3
 8003002:	f004 fe95 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 8003006:	e05e      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8003008:	4b35      	ldr	r3, [pc, #212]	@ (80030e0 <PWMTimerStarter+0x204>)
 800300a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d106      	bne.n	8003020 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8003012:	4b35      	ldr	r3, [pc, #212]	@ (80030e8 <PWMTimerStarter+0x20c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2108      	movs	r1, #8
 8003018:	4618      	mov	r0, r3
 800301a:	f004 fdc1 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 800301e:	e052      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8003020:	4b31      	ldr	r3, [pc, #196]	@ (80030e8 <PWMTimerStarter+0x20c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2108      	movs	r1, #8
 8003026:	4618      	mov	r0, r3
 8003028:	f004 fe82 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 800302c:	e04b      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 800302e:	4b2c      	ldr	r3, [pc, #176]	@ (80030e0 <PWMTimerStarter+0x204>)
 8003030:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8003038:	4b2c      	ldr	r3, [pc, #176]	@ (80030ec <PWMTimerStarter+0x210>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f004 fdae 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8003044:	e03f      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8003046:	4b29      	ldr	r3, [pc, #164]	@ (80030ec <PWMTimerStarter+0x210>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f004 fe6f 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 8003052:	e038      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8003054:	4b22      	ldr	r3, [pc, #136]	@ (80030e0 <PWMTimerStarter+0x204>)
 8003056:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d106      	bne.n	800306c <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 800305e:	4b23      	ldr	r3, [pc, #140]	@ (80030ec <PWMTimerStarter+0x210>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2104      	movs	r1, #4
 8003064:	4618      	mov	r0, r3
 8003066:	f004 fd9b 	bl	8007ba0 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 800306a:	e02c      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 800306c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ec <PWMTimerStarter+0x210>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2104      	movs	r1, #4
 8003072:	4618      	mov	r0, r3
 8003074:	f004 fe5c 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 8003078:	e025      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 800307a:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <PWMTimerStarter+0x204>)
 800307c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d106      	bne.n	8003092 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <PWMTimerStarter+0x210>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2108      	movs	r1, #8
 800308a:	4618      	mov	r0, r3
 800308c:	f004 fd88 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8003090:	e019      	b.n	80030c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8003092:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <PWMTimerStarter+0x210>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2108      	movs	r1, #8
 8003098:	4618      	mov	r0, r3
 800309a:	f004 fe49 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 800309e:	e012      	b.n	80030c6 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 80030a0:	4b0f      	ldr	r3, [pc, #60]	@ (80030e0 <PWMTimerStarter+0x204>)
 80030a2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d106      	bne.n	80030b8 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 80030aa:	4b11      	ldr	r3, [pc, #68]	@ (80030f0 <PWMTimerStarter+0x214>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2108      	movs	r1, #8
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 fd75 	bl	8007ba0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 80030b6:	e005      	b.n	80030c4 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 80030b8:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <PWMTimerStarter+0x214>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2108      	movs	r1, #8
 80030be:	4618      	mov	r0, r3
 80030c0:	f004 fe36 	bl	8007d30 <HAL_TIM_PWM_Stop>
			break;
 80030c4:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	3301      	adds	r3, #1
 80030ca:	607b      	str	r3, [r7, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2b0a      	cmp	r3, #10
 80030d0:	f77f af0a 	ble.w	8002ee8 <PWMTimerStarter+0xc>
		}
	}
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000c04 	.word	0x20000c04
 80030e4:	20000bf4 	.word	0x20000bf4
 80030e8:	20000c00 	.word	0x20000c00
 80030ec:	20000bfc 	.word	0x20000bfc
 80030f0:	20000bf8 	.word	0x20000bf8

080030f4 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 80030f8:	2224      	movs	r2, #36	@ 0x24
 80030fa:	4903      	ldr	r1, [pc, #12]	@ (8003108 <remote_control_init+0x14>)
 80030fc:	4803      	ldr	r0, [pc, #12]	@ (800310c <remote_control_init+0x18>)
 80030fe:	f7fe fc51 	bl	80019a4 <RC_init>
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	20000c4c 	.word	0x20000c4c
 800310c:	20000c28 	.word	0x20000c28

08003110 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8003114:	4b02      	ldr	r3, [pc, #8]	@ (8003120 <get_remote_control_point+0x10>)
}
 8003116:	4618      	mov	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	20000c10 	.word	0x20000c10

08003124 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 800312a:	4b44      	ldr	r3, [pc, #272]	@ (800323c <USART3_IRQHandler+0x118>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003138:	2300      	movs	r3, #0
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	4b3f      	ldr	r3, [pc, #252]	@ (800323c <USART3_IRQHandler+0x118>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	4b3d      	ldr	r3, [pc, #244]	@ (800323c <USART3_IRQHandler+0x118>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	607b      	str	r3, [r7, #4]
 800314c:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 800314e:	e070      	b.n	8003232 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003150:	4b3b      	ldr	r3, [pc, #236]	@ (8003240 <USART3_IRQHandler+0x11c>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b00      	cmp	r3, #0
 800315a:	d06a      	beq.n	8003232 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 800315c:	2300      	movs	r3, #0
 800315e:	603b      	str	r3, [r7, #0]
 8003160:	4b36      	ldr	r3, [pc, #216]	@ (800323c <USART3_IRQHandler+0x118>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	4b34      	ldr	r3, [pc, #208]	@ (800323c <USART3_IRQHandler+0x118>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003172:	4b34      	ldr	r3, [pc, #208]	@ (8003244 <USART3_IRQHandler+0x120>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d12d      	bne.n	80031dc <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003180:	4b30      	ldr	r3, [pc, #192]	@ (8003244 <USART3_IRQHandler+0x120>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b2f      	ldr	r3, [pc, #188]	@ (8003244 <USART3_IRQHandler+0x120>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0201 	bic.w	r2, r2, #1
 800318e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003190:	4b2c      	ldr	r3, [pc, #176]	@ (8003244 <USART3_IRQHandler+0x120>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	b29b      	uxth	r3, r3
 8003198:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800319c:	b29a      	uxth	r2, r3
 800319e:	4b2a      	ldr	r3, [pc, #168]	@ (8003248 <USART3_IRQHandler+0x124>)
 80031a0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80031a2:	4b28      	ldr	r3, [pc, #160]	@ (8003244 <USART3_IRQHandler+0x120>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2224      	movs	r2, #36	@ 0x24
 80031a8:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 80031aa:	4b26      	ldr	r3, [pc, #152]	@ (8003244 <USART3_IRQHandler+0x120>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	4b24      	ldr	r3, [pc, #144]	@ (8003244 <USART3_IRQHandler+0x120>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80031b8:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80031ba:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <USART3_IRQHandler+0x120>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <USART3_IRQHandler+0x120>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0201 	orr.w	r2, r2, #1
 80031c8:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 80031ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003248 <USART3_IRQHandler+0x124>)
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	2b12      	cmp	r3, #18
 80031d0:	d12f      	bne.n	8003232 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 80031d2:	491e      	ldr	r1, [pc, #120]	@ (800324c <USART3_IRQHandler+0x128>)
 80031d4:	481e      	ldr	r0, [pc, #120]	@ (8003250 <USART3_IRQHandler+0x12c>)
 80031d6:	f000 f841 	bl	800325c <sbus_to_rc>
}
 80031da:	e02a      	b.n	8003232 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80031dc:	4b19      	ldr	r3, [pc, #100]	@ (8003244 <USART3_IRQHandler+0x120>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	4b18      	ldr	r3, [pc, #96]	@ (8003244 <USART3_IRQHandler+0x120>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 0201 	bic.w	r2, r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80031ec:	4b15      	ldr	r3, [pc, #84]	@ (8003244 <USART3_IRQHandler+0x120>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80031f8:	b29a      	uxth	r2, r3
 80031fa:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <USART3_IRQHandler+0x124>)
 80031fc:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80031fe:	4b11      	ldr	r3, [pc, #68]	@ (8003244 <USART3_IRQHandler+0x120>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2224      	movs	r2, #36	@ 0x24
 8003204:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8003206:	4b13      	ldr	r3, [pc, #76]	@ (8003254 <USART3_IRQHandler+0x130>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a12      	ldr	r2, [pc, #72]	@ (8003254 <USART3_IRQHandler+0x130>)
 800320c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003210:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003212:	4b0c      	ldr	r3, [pc, #48]	@ (8003244 <USART3_IRQHandler+0x120>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <USART3_IRQHandler+0x120>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f042 0201 	orr.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <USART3_IRQHandler+0x124>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	2b12      	cmp	r3, #18
 8003228:	d103      	bne.n	8003232 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 800322a:	4908      	ldr	r1, [pc, #32]	@ (800324c <USART3_IRQHandler+0x128>)
 800322c:	480a      	ldr	r0, [pc, #40]	@ (8003258 <USART3_IRQHandler+0x134>)
 800322e:	f000 f815 	bl	800325c <sbus_to_rc>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000978 	.word	0x20000978
 8003240:	40004800 	.word	0x40004800
 8003244:	20000ac0 	.word	0x20000ac0
 8003248:	20000c70 	.word	0x20000c70
 800324c:	20000c10 	.word	0x20000c10
 8003250:	20000c28 	.word	0x20000c28
 8003254:	40026028 	.word	0x40026028
 8003258:	20000c4c 	.word	0x20000c4c

0800325c <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 810b 	beq.w	8003484 <sbus_to_rc+0x228>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 8107 	beq.w	8003484 <sbus_to_rc+0x228>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	b21a      	sxth	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3301      	adds	r3, #1
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	b21b      	sxth	r3, r3
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	b21b      	sxth	r3, r3
 800328c:	4313      	orrs	r3, r2
 800328e:	b21b      	sxth	r3, r3
 8003290:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003294:	b21a      	sxth	r2, r3
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3301      	adds	r3, #1
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	08db      	lsrs	r3, r3, #3
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	b21a      	sxth	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3302      	adds	r3, #2
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	b21b      	sxth	r3, r3
 80032b2:	015b      	lsls	r3, r3, #5
 80032b4:	b21b      	sxth	r3, r3
 80032b6:	4313      	orrs	r3, r2
 80032b8:	b21b      	sxth	r3, r3
 80032ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032be:	b21a      	sxth	r2, r3
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3302      	adds	r3, #2
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	b21a      	sxth	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3303      	adds	r3, #3
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	b21b      	sxth	r3, r3
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	b21b      	sxth	r3, r3
 80032e0:	4313      	orrs	r3, r2
 80032e2:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3304      	adds	r3, #4
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	b2db      	uxtb	r3, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80032ec:	b21b      	sxth	r3, r3
 80032ee:	029b      	lsls	r3, r3, #10
 80032f0:	b21b      	sxth	r3, r3
 80032f2:	4313      	orrs	r3, r2
 80032f4:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80032f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80032fa:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3304      	adds	r3, #4
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	b2db      	uxtb	r3, r3
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	b2db      	uxtb	r3, r3
 800330c:	b21a      	sxth	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	3305      	adds	r3, #5
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	b21b      	sxth	r3, r3
 8003318:	01db      	lsls	r3, r3, #7
 800331a:	b21b      	sxth	r3, r3
 800331c:	4313      	orrs	r3, r2
 800331e:	b21b      	sxth	r3, r3
 8003320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003324:	b21a      	sxth	r2, r3
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3305      	adds	r3, #5
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	b2db      	uxtb	r3, r3
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	b2db      	uxtb	r3, r3
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	b2da      	uxtb	r2, r3
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3305      	adds	r3, #5
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	091b      	lsrs	r3, r3, #4
 800334a:	b2db      	uxtb	r3, r3
 800334c:	109b      	asrs	r3, r3, #2
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f003 0303 	and.w	r3, r3, #3
 8003354:	b2da      	uxtb	r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	3306      	adds	r3, #6
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	b21a      	sxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	3307      	adds	r3, #7
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	b21b      	sxth	r3, r3
 800336e:	021b      	lsls	r3, r3, #8
 8003370:	b21b      	sxth	r3, r3
 8003372:	4313      	orrs	r3, r2
 8003374:	b21a      	sxth	r2, r3
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3308      	adds	r3, #8
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	b2db      	uxtb	r3, r3
 8003382:	b21a      	sxth	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3309      	adds	r3, #9
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	b21b      	sxth	r3, r3
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	b21b      	sxth	r3, r3
 8003392:	4313      	orrs	r3, r2
 8003394:	b21a      	sxth	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	330a      	adds	r3, #10
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	b21a      	sxth	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	330b      	adds	r3, #11
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	b21b      	sxth	r3, r3
 80033ae:	021b      	lsls	r3, r3, #8
 80033b0:	b21b      	sxth	r3, r3
 80033b2:	4313      	orrs	r3, r2
 80033b4:	b21a      	sxth	r2, r3
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	330c      	adds	r3, #12
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	330d      	adds	r3, #13
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	330e      	adds	r3, #14
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	b21a      	sxth	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	330f      	adds	r3, #15
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	b21b      	sxth	r3, r3
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	b21b      	sxth	r3, r3
 80033ea:	4313      	orrs	r3, r2
 80033ec:	b21b      	sxth	r3, r3
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3310      	adds	r3, #16
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	b21a      	sxth	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3311      	adds	r3, #17
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	b21b      	sxth	r3, r3
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	b21b      	sxth	r3, r3
 800340c:	4313      	orrs	r3, r2
 800340e:	b21a      	sxth	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	f9b3 3000 	ldrsh.w	r3, [r3]
 800341a:	b21b      	sxth	r3, r3
 800341c:	b29b      	uxth	r3, r3
 800341e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003422:	b29b      	uxth	r3, r3
 8003424:	b21a      	sxth	r2, r3
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003430:	b21b      	sxth	r3, r3
 8003432:	b29b      	uxth	r3, r3
 8003434:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003438:	b29b      	uxth	r3, r3
 800343a:	b21a      	sxth	r2, r3
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003446:	b21b      	sxth	r3, r3
 8003448:	b29b      	uxth	r3, r3
 800344a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800344e:	b29b      	uxth	r3, r3
 8003450:	b21a      	sxth	r2, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800345c:	b21b      	sxth	r3, r3
 800345e:	b29b      	uxth	r3, r3
 8003460:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003464:	b29b      	uxth	r3, r3
 8003466:	b21a      	sxth	r2, r3
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003472:	b21b      	sxth	r3, r3
 8003474:	b29b      	uxth	r3, r3
 8003476:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800347a:	b29b      	uxth	r3, r3
 800347c:	b21a      	sxth	r2, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	811a      	strh	r2, [r3, #8]
 8003482:	e000      	b.n	8003486 <sbus_to_rc+0x22a>
        return;
 8003484:	bf00      	nop
}
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 800349a:	4b06      	ldr	r3, [pc, #24]	@ (80034b4 <getRCchannel+0x24>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80034a2:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80034a6:	b21b      	sxth	r3, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	20000018 	.word	0x20000018

080034b8 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 80034c2:	4b06      	ldr	r3, [pc, #24]	@ (80034dc <getRCswitch+0x24>)
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ca:	4413      	add	r3, r2
 80034cc:	7a9b      	ldrb	r3, [r3, #10]
 80034ce:	b25b      	sxtb	r3, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20000018 	.word	0x20000018

080034e0 <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 80034e6:	4b85      	ldr	r3, [pc, #532]	@ (80036fc <RCkeysRefresh+0x21c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	7d1a      	ldrb	r2, [r3, #20]
 80034ec:	7d5b      	ldrb	r3, [r3, #21]
 80034ee:	021b      	lsls	r3, r3, #8
 80034f0:	4313      	orrs	r3, r2
 80034f2:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 80034f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	da07      	bge.n	800350c <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 80034fc:	4b80      	ldr	r3, [pc, #512]	@ (8003700 <RCkeysRefresh+0x220>)
 80034fe:	2201      	movs	r2, #1
 8003500:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 8003502:	88fb      	ldrh	r3, [r7, #6]
 8003504:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8003508:	80fb      	strh	r3, [r7, #6]
 800350a:	e002      	b.n	8003512 <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 800350c:	4b7c      	ldr	r3, [pc, #496]	@ (8003700 <RCkeysRefresh+0x220>)
 800350e:	2200      	movs	r2, #0
 8003510:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003518:	d307      	bcc.n	800352a <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 800351a:	4b79      	ldr	r3, [pc, #484]	@ (8003700 <RCkeysRefresh+0x220>)
 800351c:	2201      	movs	r2, #1
 800351e:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 8003520:	88fb      	ldrh	r3, [r7, #6]
 8003522:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8003526:	80fb      	strh	r3, [r7, #6]
 8003528:	e002      	b.n	8003530 <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 800352a:	4b75      	ldr	r3, [pc, #468]	@ (8003700 <RCkeysRefresh+0x220>)
 800352c:	2200      	movs	r2, #0
 800352e:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003536:	d307      	bcc.n	8003548 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 8003538:	4b71      	ldr	r3, [pc, #452]	@ (8003700 <RCkeysRefresh+0x220>)
 800353a:	2201      	movs	r2, #1
 800353c:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8003544:	80fb      	strh	r3, [r7, #6]
 8003546:	e002      	b.n	800354e <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 8003548:	4b6d      	ldr	r3, [pc, #436]	@ (8003700 <RCkeysRefresh+0x220>)
 800354a:	2200      	movs	r2, #0
 800354c:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003554:	d307      	bcc.n	8003566 <RCkeysRefresh+0x86>
		pc_control.x = 1;
 8003556:	4b6a      	ldr	r3, [pc, #424]	@ (8003700 <RCkeysRefresh+0x220>)
 8003558:	2201      	movs	r2, #1
 800355a:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 8003562:	80fb      	strh	r3, [r7, #6]
 8003564:	e002      	b.n	800356c <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 8003566:	4b66      	ldr	r3, [pc, #408]	@ (8003700 <RCkeysRefresh+0x220>)
 8003568:	2200      	movs	r2, #0
 800356a:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 800356c:	88fb      	ldrh	r3, [r7, #6]
 800356e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003572:	d307      	bcc.n	8003584 <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 8003574:	4b62      	ldr	r3, [pc, #392]	@ (8003700 <RCkeysRefresh+0x220>)
 8003576:	2201      	movs	r2, #1
 8003578:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 800357a:	88fb      	ldrh	r3, [r7, #6]
 800357c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8003580:	80fb      	strh	r3, [r7, #6]
 8003582:	e002      	b.n	800358a <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 8003584:	4b5e      	ldr	r3, [pc, #376]	@ (8003700 <RCkeysRefresh+0x220>)
 8003586:	2200      	movs	r2, #0
 8003588:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003590:	d307      	bcc.n	80035a2 <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 8003592:	4b5b      	ldr	r3, [pc, #364]	@ (8003700 <RCkeysRefresh+0x220>)
 8003594:	2201      	movs	r2, #1
 8003596:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800359e:	80fb      	strh	r3, [r7, #6]
 80035a0:	e002      	b.n	80035a8 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 80035a2:	4b57      	ldr	r3, [pc, #348]	@ (8003700 <RCkeysRefresh+0x220>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 80035a8:	88fb      	ldrh	r3, [r7, #6]
 80035aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ae:	d307      	bcc.n	80035c0 <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 80035b0:	4b53      	ldr	r3, [pc, #332]	@ (8003700 <RCkeysRefresh+0x220>)
 80035b2:	2201      	movs	r2, #1
 80035b4:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80035bc:	80fb      	strh	r3, [r7, #6]
 80035be:	e002      	b.n	80035c6 <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 80035c0:	4b4f      	ldr	r3, [pc, #316]	@ (8003700 <RCkeysRefresh+0x220>)
 80035c2:	2200      	movs	r2, #0
 80035c4:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 80035c6:	88fb      	ldrh	r3, [r7, #6]
 80035c8:	2bff      	cmp	r3, #255	@ 0xff
 80035ca:	d907      	bls.n	80035dc <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 80035cc:	4b4c      	ldr	r3, [pc, #304]	@ (8003700 <RCkeysRefresh+0x220>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80035d8:	80fb      	strh	r3, [r7, #6]
 80035da:	e002      	b.n	80035e2 <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 80035dc:	4b48      	ldr	r3, [pc, #288]	@ (8003700 <RCkeysRefresh+0x220>)
 80035de:	2200      	movs	r2, #0
 80035e0:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 80035e2:	88fb      	ldrh	r3, [r7, #6]
 80035e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80035e6:	d906      	bls.n	80035f6 <RCkeysRefresh+0x116>
		pc_control.e = 1;
 80035e8:	4b45      	ldr	r3, [pc, #276]	@ (8003700 <RCkeysRefresh+0x220>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	3b80      	subs	r3, #128	@ 0x80
 80035f2:	80fb      	strh	r3, [r7, #6]
 80035f4:	e002      	b.n	80035fc <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 80035f6:	4b42      	ldr	r3, [pc, #264]	@ (8003700 <RCkeysRefresh+0x220>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 80035fc:	88fb      	ldrh	r3, [r7, #6]
 80035fe:	2b3f      	cmp	r3, #63	@ 0x3f
 8003600:	d906      	bls.n	8003610 <RCkeysRefresh+0x130>
		pc_control.q = 1;
 8003602:	4b3f      	ldr	r3, [pc, #252]	@ (8003700 <RCkeysRefresh+0x220>)
 8003604:	2201      	movs	r2, #1
 8003606:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	3b40      	subs	r3, #64	@ 0x40
 800360c:	80fb      	strh	r3, [r7, #6]
 800360e:	e002      	b.n	8003616 <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 8003610:	4b3b      	ldr	r3, [pc, #236]	@ (8003700 <RCkeysRefresh+0x220>)
 8003612:	2200      	movs	r2, #0
 8003614:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 8003616:	88fb      	ldrh	r3, [r7, #6]
 8003618:	2b1f      	cmp	r3, #31
 800361a:	d906      	bls.n	800362a <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 800361c:	4b38      	ldr	r3, [pc, #224]	@ (8003700 <RCkeysRefresh+0x220>)
 800361e:	2201      	movs	r2, #1
 8003620:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	3b20      	subs	r3, #32
 8003626:	80fb      	strh	r3, [r7, #6]
 8003628:	e002      	b.n	8003630 <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 800362a:	4b35      	ldr	r3, [pc, #212]	@ (8003700 <RCkeysRefresh+0x220>)
 800362c:	2200      	movs	r2, #0
 800362e:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	2b0f      	cmp	r3, #15
 8003634:	d906      	bls.n	8003644 <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 8003636:	4b32      	ldr	r3, [pc, #200]	@ (8003700 <RCkeysRefresh+0x220>)
 8003638:	2201      	movs	r2, #1
 800363a:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 800363c:	88fb      	ldrh	r3, [r7, #6]
 800363e:	3b10      	subs	r3, #16
 8003640:	80fb      	strh	r3, [r7, #6]
 8003642:	e002      	b.n	800364a <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 8003644:	4b2e      	ldr	r3, [pc, #184]	@ (8003700 <RCkeysRefresh+0x220>)
 8003646:	2200      	movs	r2, #0
 8003648:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 800364a:	88fb      	ldrh	r3, [r7, #6]
 800364c:	2b07      	cmp	r3, #7
 800364e:	d906      	bls.n	800365e <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 8003650:	4b2b      	ldr	r3, [pc, #172]	@ (8003700 <RCkeysRefresh+0x220>)
 8003652:	2201      	movs	r2, #1
 8003654:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	3b08      	subs	r3, #8
 800365a:	80fb      	strh	r3, [r7, #6]
 800365c:	e002      	b.n	8003664 <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 800365e:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <RCkeysRefresh+0x220>)
 8003660:	2200      	movs	r2, #0
 8003662:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 8003664:	88fb      	ldrh	r3, [r7, #6]
 8003666:	2b03      	cmp	r3, #3
 8003668:	d906      	bls.n	8003678 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 800366a:	4b25      	ldr	r3, [pc, #148]	@ (8003700 <RCkeysRefresh+0x220>)
 800366c:	2201      	movs	r2, #1
 800366e:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	3b04      	subs	r3, #4
 8003674:	80fb      	strh	r3, [r7, #6]
 8003676:	e002      	b.n	800367e <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 8003678:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <RCkeysRefresh+0x220>)
 800367a:	2200      	movs	r2, #0
 800367c:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d906      	bls.n	8003692 <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 8003684:	4b1e      	ldr	r3, [pc, #120]	@ (8003700 <RCkeysRefresh+0x220>)
 8003686:	2201      	movs	r2, #1
 8003688:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 800368a:	88fb      	ldrh	r3, [r7, #6]
 800368c:	3b02      	subs	r3, #2
 800368e:	80fb      	strh	r3, [r7, #6]
 8003690:	e002      	b.n	8003698 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <RCkeysRefresh+0x220>)
 8003694:	2200      	movs	r2, #0
 8003696:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8003698:	88fb      	ldrh	r3, [r7, #6]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 800369e:	4b18      	ldr	r3, [pc, #96]	@ (8003700 <RCkeysRefresh+0x220>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	731a      	strb	r2, [r3, #12]
 80036a4:	e002      	b.n	80036ac <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 80036a6:	4b16      	ldr	r3, [pc, #88]	@ (8003700 <RCkeysRefresh+0x220>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 80036ac:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <RCkeysRefresh+0x21c>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80036b4:	b21a      	sxth	r2, r3
 80036b6:	4b12      	ldr	r3, [pc, #72]	@ (8003700 <RCkeysRefresh+0x220>)
 80036b8:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 80036ba:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <RCkeysRefresh+0x21c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80036c2:	b21a      	sxth	r2, r3
 80036c4:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <RCkeysRefresh+0x220>)
 80036c6:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 80036c8:	4b0c      	ldr	r3, [pc, #48]	@ (80036fc <RCkeysRefresh+0x21c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80036d0:	b21a      	sxth	r2, r3
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <RCkeysRefresh+0x220>)
 80036d4:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 80036d6:	4b09      	ldr	r3, [pc, #36]	@ (80036fc <RCkeysRefresh+0x21c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	7c9b      	ldrb	r3, [r3, #18]
 80036dc:	b25a      	sxtb	r2, r3
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <RCkeysRefresh+0x220>)
 80036e0:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <RCkeysRefresh+0x21c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	7cdb      	ldrb	r3, [r3, #19]
 80036e8:	b25a      	sxtb	r2, r3
 80036ea:	4b05      	ldr	r3, [pc, #20]	@ (8003700 <RCkeysRefresh+0x220>)
 80036ec:	71da      	strb	r2, [r3, #7]
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000018 	.word	0x20000018
 8003700:	2000054c 	.word	0x2000054c

08003704 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	4b12      	ldr	r3, [pc, #72]	@ (8003758 <HAL_MspInit+0x54>)
 8003710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003712:	4a11      	ldr	r2, [pc, #68]	@ (8003758 <HAL_MspInit+0x54>)
 8003714:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003718:	6453      	str	r3, [r2, #68]	@ 0x44
 800371a:	4b0f      	ldr	r3, [pc, #60]	@ (8003758 <HAL_MspInit+0x54>)
 800371c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	603b      	str	r3, [r7, #0]
 800372a:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <HAL_MspInit+0x54>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	4a0a      	ldr	r2, [pc, #40]	@ (8003758 <HAL_MspInit+0x54>)
 8003730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003734:	6413      	str	r3, [r2, #64]	@ 0x40
 8003736:	4b08      	ldr	r3, [pc, #32]	@ (8003758 <HAL_MspInit+0x54>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003742:	2200      	movs	r2, #0
 8003744:	210f      	movs	r1, #15
 8003746:	f06f 0001 	mvn.w	r0, #1
 800374a:	f001 fdb8 	bl	80052be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800374e:	bf00      	nop
 8003750:	3708      	adds	r7, #8
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023800 	.word	0x40023800

0800375c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b08c      	sub	sp, #48	@ 0x30
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003764:	f107 031c 	add.w	r3, r7, #28
 8003768:	2200      	movs	r2, #0
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a4a      	ldr	r2, [pc, #296]	@ (80038a4 <HAL_CAN_MspInit+0x148>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d13d      	bne.n	80037fa <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800377e:	4b4a      	ldr	r3, [pc, #296]	@ (80038a8 <HAL_CAN_MspInit+0x14c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	3301      	adds	r3, #1
 8003784:	4a48      	ldr	r2, [pc, #288]	@ (80038a8 <HAL_CAN_MspInit+0x14c>)
 8003786:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003788:	4b47      	ldr	r3, [pc, #284]	@ (80038a8 <HAL_CAN_MspInit+0x14c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10d      	bne.n	80037ac <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003790:	2300      	movs	r3, #0
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	4b45      	ldr	r3, [pc, #276]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	4a44      	ldr	r2, [pc, #272]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 800379a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800379e:	6413      	str	r3, [r2, #64]	@ 0x40
 80037a0:	4b42      	ldr	r3, [pc, #264]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 80037a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a8:	61bb      	str	r3, [r7, #24]
 80037aa:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ac:	2300      	movs	r3, #0
 80037ae:	617b      	str	r3, [r7, #20]
 80037b0:	4b3e      	ldr	r3, [pc, #248]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	4a3d      	ldr	r2, [pc, #244]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 80037b6:	f043 0308 	orr.w	r3, r3, #8
 80037ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80037bc:	4b3b      	ldr	r3, [pc, #236]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c0:	f003 0308 	and.w	r3, r3, #8
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80037c8:	2303      	movs	r3, #3
 80037ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037cc:	2302      	movs	r3, #2
 80037ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d4:	2303      	movs	r3, #3
 80037d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80037d8:	2309      	movs	r3, #9
 80037da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037dc:	f107 031c 	add.w	r3, r7, #28
 80037e0:	4619      	mov	r1, r3
 80037e2:	4833      	ldr	r0, [pc, #204]	@ (80038b0 <HAL_CAN_MspInit+0x154>)
 80037e4:	f002 f9a4 	bl	8005b30 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80037e8:	2200      	movs	r2, #0
 80037ea:	2105      	movs	r1, #5
 80037ec:	2014      	movs	r0, #20
 80037ee:	f001 fd66 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80037f2:	2014      	movs	r0, #20
 80037f4:	f001 fd7f 	bl	80052f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80037f8:	e04f      	b.n	800389a <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2d      	ldr	r2, [pc, #180]	@ (80038b4 <HAL_CAN_MspInit+0x158>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d14a      	bne.n	800389a <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003804:	2300      	movs	r3, #0
 8003806:	613b      	str	r3, [r7, #16]
 8003808:	4b28      	ldr	r3, [pc, #160]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 800380a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380c:	4a27      	ldr	r2, [pc, #156]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 800380e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003812:	6413      	str	r3, [r2, #64]	@ 0x40
 8003814:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 8003816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003820:	4b21      	ldr	r3, [pc, #132]	@ (80038a8 <HAL_CAN_MspInit+0x14c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3301      	adds	r3, #1
 8003826:	4a20      	ldr	r2, [pc, #128]	@ (80038a8 <HAL_CAN_MspInit+0x14c>)
 8003828:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800382a:	4b1f      	ldr	r3, [pc, #124]	@ (80038a8 <HAL_CAN_MspInit+0x14c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2b01      	cmp	r3, #1
 8003830:	d10d      	bne.n	800384e <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	4b1d      	ldr	r3, [pc, #116]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	4a1c      	ldr	r2, [pc, #112]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 800383c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003840:	6413      	str	r3, [r2, #64]	@ 0x40
 8003842:	4b1a      	ldr	r3, [pc, #104]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800384a:	60fb      	str	r3, [r7, #12]
 800384c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b16      	ldr	r3, [pc, #88]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003856:	4a15      	ldr	r2, [pc, #84]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 8003858:	f043 0302 	orr.w	r3, r3, #2
 800385c:	6313      	str	r3, [r2, #48]	@ 0x30
 800385e:	4b13      	ldr	r3, [pc, #76]	@ (80038ac <HAL_CAN_MspInit+0x150>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800386a:	2360      	movs	r3, #96	@ 0x60
 800386c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800386e:	2302      	movs	r3, #2
 8003870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003876:	2303      	movs	r3, #3
 8003878:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800387a:	2309      	movs	r3, #9
 800387c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387e:	f107 031c 	add.w	r3, r7, #28
 8003882:	4619      	mov	r1, r3
 8003884:	480c      	ldr	r0, [pc, #48]	@ (80038b8 <HAL_CAN_MspInit+0x15c>)
 8003886:	f002 f953 	bl	8005b30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800388a:	2200      	movs	r2, #0
 800388c:	2105      	movs	r1, #5
 800388e:	2040      	movs	r0, #64	@ 0x40
 8003890:	f001 fd15 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003894:	2040      	movs	r0, #64	@ 0x40
 8003896:	f001 fd2e 	bl	80052f6 <HAL_NVIC_EnableIRQ>
}
 800389a:	bf00      	nop
 800389c:	3730      	adds	r7, #48	@ 0x30
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40006400 	.word	0x40006400
 80038a8:	20000c74 	.word	0x20000c74
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40020c00 	.word	0x40020c00
 80038b4:	40006800 	.word	0x40006800
 80038b8:	40020400 	.word	0x40020400

080038bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	@ 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c4:	f107 0314 	add.w	r3, r7, #20
 80038c8:	2200      	movs	r2, #0
 80038ca:	601a      	str	r2, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
 80038ce:	609a      	str	r2, [r3, #8]
 80038d0:	60da      	str	r2, [r3, #12]
 80038d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a29      	ldr	r2, [pc, #164]	@ (8003980 <HAL_I2C_MspInit+0xc4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d14b      	bne.n	8003976 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	4b28      	ldr	r3, [pc, #160]	@ (8003984 <HAL_I2C_MspInit+0xc8>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	4a27      	ldr	r2, [pc, #156]	@ (8003984 <HAL_I2C_MspInit+0xc8>)
 80038e8:	f043 0304 	orr.w	r3, r3, #4
 80038ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ee:	4b25      	ldr	r3, [pc, #148]	@ (8003984 <HAL_I2C_MspInit+0xc8>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	f003 0304 	and.w	r3, r3, #4
 80038f6:	613b      	str	r3, [r7, #16]
 80038f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	4b21      	ldr	r3, [pc, #132]	@ (8003984 <HAL_I2C_MspInit+0xc8>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003902:	4a20      	ldr	r2, [pc, #128]	@ (8003984 <HAL_I2C_MspInit+0xc8>)
 8003904:	f043 0301 	orr.w	r3, r3, #1
 8003908:	6313      	str	r3, [r2, #48]	@ 0x30
 800390a:	4b1e      	ldr	r3, [pc, #120]	@ (8003984 <HAL_I2C_MspInit+0xc8>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	60fb      	str	r3, [r7, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003916:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800391a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800391c:	2312      	movs	r3, #18
 800391e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003924:	2303      	movs	r3, #3
 8003926:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003928:	2304      	movs	r3, #4
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800392c:	f107 0314 	add.w	r3, r7, #20
 8003930:	4619      	mov	r1, r3
 8003932:	4815      	ldr	r0, [pc, #84]	@ (8003988 <HAL_I2C_MspInit+0xcc>)
 8003934:	f002 f8fc 	bl	8005b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800393c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800393e:	2312      	movs	r3, #18
 8003940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003946:	2303      	movs	r3, #3
 8003948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800394a:	2304      	movs	r3, #4
 800394c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	f107 0314 	add.w	r3, r7, #20
 8003952:	4619      	mov	r1, r3
 8003954:	480d      	ldr	r0, [pc, #52]	@ (800398c <HAL_I2C_MspInit+0xd0>)
 8003956:	f002 f8eb 	bl	8005b30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <HAL_I2C_MspInit+0xc8>)
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	4a08      	ldr	r2, [pc, #32]	@ (8003984 <HAL_I2C_MspInit+0xc8>)
 8003964:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003968:	6413      	str	r3, [r2, #64]	@ 0x40
 800396a:	4b06      	ldr	r3, [pc, #24]	@ (8003984 <HAL_I2C_MspInit+0xc8>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003976:	bf00      	nop
 8003978:	3728      	adds	r7, #40	@ 0x28
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	40005c00 	.word	0x40005c00
 8003984:	40023800 	.word	0x40023800
 8003988:	40020800 	.word	0x40020800
 800398c:	40020000 	.word	0x40020000

08003990 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08a      	sub	sp, #40	@ 0x28
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003998:	f107 0314 	add.w	r3, r7, #20
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
 80039a0:	605a      	str	r2, [r3, #4]
 80039a2:	609a      	str	r2, [r3, #8]
 80039a4:	60da      	str	r2, [r3, #12]
 80039a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a28      	ldr	r2, [pc, #160]	@ (8003a50 <HAL_SPI_MspInit+0xc0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d149      	bne.n	8003a46 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	4b27      	ldr	r3, [pc, #156]	@ (8003a54 <HAL_SPI_MspInit+0xc4>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ba:	4a26      	ldr	r2, [pc, #152]	@ (8003a54 <HAL_SPI_MspInit+0xc4>)
 80039bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80039c2:	4b24      	ldr	r3, [pc, #144]	@ (8003a54 <HAL_SPI_MspInit+0xc4>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039ca:	613b      	str	r3, [r7, #16]
 80039cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4b20      	ldr	r3, [pc, #128]	@ (8003a54 <HAL_SPI_MspInit+0xc4>)
 80039d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d6:	4a1f      	ldr	r2, [pc, #124]	@ (8003a54 <HAL_SPI_MspInit+0xc4>)
 80039d8:	f043 0302 	orr.w	r3, r3, #2
 80039dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80039de:	4b1d      	ldr	r3, [pc, #116]	@ (8003a54 <HAL_SPI_MspInit+0xc4>)
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	60bb      	str	r3, [r7, #8]
 80039ee:	4b19      	ldr	r3, [pc, #100]	@ (8003a54 <HAL_SPI_MspInit+0xc4>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f2:	4a18      	ldr	r2, [pc, #96]	@ (8003a54 <HAL_SPI_MspInit+0xc4>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80039fa:	4b16      	ldr	r3, [pc, #88]	@ (8003a54 <HAL_SPI_MspInit+0xc4>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003a06:	2318      	movs	r3, #24
 8003a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a12:	2303      	movs	r3, #3
 8003a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a16:	2305      	movs	r3, #5
 8003a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a1a:	f107 0314 	add.w	r3, r7, #20
 8003a1e:	4619      	mov	r1, r3
 8003a20:	480d      	ldr	r0, [pc, #52]	@ (8003a58 <HAL_SPI_MspInit+0xc8>)
 8003a22:	f002 f885 	bl	8005b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003a26:	2380      	movs	r3, #128	@ 0x80
 8003a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a32:	2303      	movs	r3, #3
 8003a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003a36:	2305      	movs	r3, #5
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3a:	f107 0314 	add.w	r3, r7, #20
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4806      	ldr	r0, [pc, #24]	@ (8003a5c <HAL_SPI_MspInit+0xcc>)
 8003a42:	f002 f875 	bl	8005b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003a46:	bf00      	nop
 8003a48:	3728      	adds	r7, #40	@ 0x28
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	40013000 	.word	0x40013000
 8003a54:	40023800 	.word	0x40023800
 8003a58:	40020400 	.word	0x40020400
 8003a5c:	40020000 	.word	0x40020000

08003a60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aec <HAL_TIM_PWM_MspInit+0x8c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d10e      	bne.n	8003a90 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	4b1e      	ldr	r3, [pc, #120]	@ (8003af0 <HAL_TIM_PWM_MspInit+0x90>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8003af0 <HAL_TIM_PWM_MspInit+0x90>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a82:	4b1b      	ldr	r3, [pc, #108]	@ (8003af0 <HAL_TIM_PWM_MspInit+0x90>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
 8003a8c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003a8e:	e026      	b.n	8003ade <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a17      	ldr	r2, [pc, #92]	@ (8003af4 <HAL_TIM_PWM_MspInit+0x94>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	4b14      	ldr	r3, [pc, #80]	@ (8003af0 <HAL_TIM_PWM_MspInit+0x90>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	4a13      	ldr	r2, [pc, #76]	@ (8003af0 <HAL_TIM_PWM_MspInit+0x90>)
 8003aa4:	f043 0308 	orr.w	r3, r3, #8
 8003aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aaa:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_TIM_PWM_MspInit+0x90>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	613b      	str	r3, [r7, #16]
 8003ab4:	693b      	ldr	r3, [r7, #16]
}
 8003ab6:	e012      	b.n	8003ade <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0e      	ldr	r2, [pc, #56]	@ (8003af8 <HAL_TIM_PWM_MspInit+0x98>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d10d      	bne.n	8003ade <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8003af0 <HAL_TIM_PWM_MspInit+0x90>)
 8003ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aca:	4a09      	ldr	r2, [pc, #36]	@ (8003af0 <HAL_TIM_PWM_MspInit+0x90>)
 8003acc:	f043 0302 	orr.w	r3, r3, #2
 8003ad0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ad2:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <HAL_TIM_PWM_MspInit+0x90>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	68fb      	ldr	r3, [r7, #12]
}
 8003ade:	bf00      	nop
 8003ae0:	371c      	adds	r7, #28
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	40010000 	.word	0x40010000
 8003af0:	40023800 	.word	0x40023800
 8003af4:	40000c00 	.word	0x40000c00
 8003af8:	40010400 	.word	0x40010400

08003afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a15      	ldr	r2, [pc, #84]	@ (8003b60 <HAL_TIM_Base_MspInit+0x64>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d10e      	bne.n	8003b2c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b0e:	2300      	movs	r3, #0
 8003b10:	60fb      	str	r3, [r7, #12]
 8003b12:	4b14      	ldr	r3, [pc, #80]	@ (8003b64 <HAL_TIM_Base_MspInit+0x68>)
 8003b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b16:	4a13      	ldr	r2, [pc, #76]	@ (8003b64 <HAL_TIM_Base_MspInit+0x68>)
 8003b18:	f043 0304 	orr.w	r3, r3, #4
 8003b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b1e:	4b11      	ldr	r3, [pc, #68]	@ (8003b64 <HAL_TIM_Base_MspInit+0x68>)
 8003b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003b2a:	e012      	b.n	8003b52 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0d      	ldr	r2, [pc, #52]	@ (8003b68 <HAL_TIM_Base_MspInit+0x6c>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d10d      	bne.n	8003b52 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b64 <HAL_TIM_Base_MspInit+0x68>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <HAL_TIM_Base_MspInit+0x68>)
 8003b40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b46:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <HAL_TIM_Base_MspInit+0x68>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b4e:	60bb      	str	r3, [r7, #8]
 8003b50:	68bb      	ldr	r3, [r7, #8]
}
 8003b52:	bf00      	nop
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40014400 	.word	0x40014400

08003b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08e      	sub	sp, #56	@ 0x38
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a6a      	ldr	r2, [pc, #424]	@ (8003d34 <HAL_TIM_MspPostInit+0x1c8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d11f      	bne.n	8003bce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b8e:	2300      	movs	r3, #0
 8003b90:	623b      	str	r3, [r7, #32]
 8003b92:	4b69      	ldr	r3, [pc, #420]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b96:	4a68      	ldr	r2, [pc, #416]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003b98:	f043 0310 	orr.w	r3, r3, #16
 8003b9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b9e:	4b66      	ldr	r3, [pc, #408]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba2:	f003 0310 	and.w	r3, r3, #16
 8003ba6:	623b      	str	r3, [r7, #32]
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8003baa:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	485d      	ldr	r0, [pc, #372]	@ (8003d3c <HAL_TIM_MspPostInit+0x1d0>)
 8003bc8:	f001 ffb2 	bl	8005b30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003bcc:	e0ae      	b.n	8003d2c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8003d40 <HAL_TIM_MspPostInit+0x1d4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d11f      	bne.n	8003c18 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61fb      	str	r3, [r7, #28]
 8003bdc:	4b56      	ldr	r3, [pc, #344]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be0:	4a55      	ldr	r2, [pc, #340]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003be2:	f043 0308 	orr.w	r3, r3, #8
 8003be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003be8:	4b53      	ldr	r3, [pc, #332]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bec:	f003 0308 	and.w	r3, r3, #8
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003bf4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c02:	2300      	movs	r3, #0
 8003c04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003c06:	2302      	movs	r3, #2
 8003c08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c0e:	4619      	mov	r1, r3
 8003c10:	484c      	ldr	r0, [pc, #304]	@ (8003d44 <HAL_TIM_MspPostInit+0x1d8>)
 8003c12:	f001 ff8d 	bl	8005b30 <HAL_GPIO_Init>
}
 8003c16:	e089      	b.n	8003d2c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a4a      	ldr	r2, [pc, #296]	@ (8003d48 <HAL_TIM_MspPostInit+0x1dc>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d11f      	bne.n	8003c62 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	61bb      	str	r3, [r7, #24]
 8003c26:	4b44      	ldr	r3, [pc, #272]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2a:	4a43      	ldr	r2, [pc, #268]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c32:	4b41      	ldr	r3, [pc, #260]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8003c3e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003c50:	2302      	movs	r3, #2
 8003c52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c58:	4619      	mov	r1, r3
 8003c5a:	483c      	ldr	r0, [pc, #240]	@ (8003d4c <HAL_TIM_MspPostInit+0x1e0>)
 8003c5c:	f001 ff68 	bl	8005b30 <HAL_GPIO_Init>
}
 8003c60:	e064      	b.n	8003d2c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a3a      	ldr	r2, [pc, #232]	@ (8003d50 <HAL_TIM_MspPostInit+0x1e4>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d13c      	bne.n	8003ce6 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	4b31      	ldr	r3, [pc, #196]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c74:	4a30      	ldr	r2, [pc, #192]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003c76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c84:	617b      	str	r3, [r7, #20]
 8003c86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
 8003c8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c90:	4a29      	ldr	r2, [pc, #164]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003c92:	f043 0304 	orr.w	r3, r3, #4
 8003c96:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c98:	4b27      	ldr	r3, [pc, #156]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003ca4:	23c0      	movs	r3, #192	@ 0xc0
 8003ca6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cac:	2300      	movs	r3, #0
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4825      	ldr	r0, [pc, #148]	@ (8003d54 <HAL_TIM_MspPostInit+0x1e8>)
 8003cc0:	f001 ff36 	bl	8005b30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003cc4:	2340      	movs	r3, #64	@ 0x40
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc8:	2302      	movs	r3, #2
 8003cca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cdc:	4619      	mov	r1, r3
 8003cde:	481e      	ldr	r0, [pc, #120]	@ (8003d58 <HAL_TIM_MspPostInit+0x1ec>)
 8003ce0:	f001 ff26 	bl	8005b30 <HAL_GPIO_Init>
}
 8003ce4:	e022      	b.n	8003d2c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a1c      	ldr	r2, [pc, #112]	@ (8003d5c <HAL_TIM_MspPostInit+0x1f0>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d11d      	bne.n	8003d2c <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	60fb      	str	r3, [r7, #12]
 8003cf4:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf8:	4a0f      	ldr	r2, [pc, #60]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003cfa:	f043 0320 	orr.w	r3, r3, #32
 8003cfe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d00:	4b0d      	ldr	r3, [pc, #52]	@ (8003d38 <HAL_TIM_MspPostInit+0x1cc>)
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	f003 0320 	and.w	r3, r3, #32
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d0c:	2340      	movs	r3, #64	@ 0x40
 8003d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d10:	2302      	movs	r3, #2
 8003d12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d14:	2301      	movs	r3, #1
 8003d16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d24:	4619      	mov	r1, r3
 8003d26:	480e      	ldr	r0, [pc, #56]	@ (8003d60 <HAL_TIM_MspPostInit+0x1f4>)
 8003d28:	f001 ff02 	bl	8005b30 <HAL_GPIO_Init>
}
 8003d2c:	bf00      	nop
 8003d2e:	3738      	adds	r7, #56	@ 0x38
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	40000800 	.word	0x40000800
 8003d44:	40020c00 	.word	0x40020c00
 8003d48:	40000c00 	.word	0x40000c00
 8003d4c:	40021c00 	.word	0x40021c00
 8003d50:	40010400 	.word	0x40010400
 8003d54:	40022000 	.word	0x40022000
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	40014400 	.word	0x40014400
 8003d60:	40021400 	.word	0x40021400

08003d64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08e      	sub	sp, #56	@ 0x38
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	609a      	str	r2, [r3, #8]
 8003d78:	60da      	str	r2, [r3, #12]
 8003d7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a90      	ldr	r2, [pc, #576]	@ (8003fc4 <HAL_UART_MspInit+0x260>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	f040 80b2 	bne.w	8003eec <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d88:	2300      	movs	r3, #0
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	4b8e      	ldr	r3, [pc, #568]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d90:	4a8d      	ldr	r2, [pc, #564]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003d92:	f043 0310 	orr.w	r3, r3, #16
 8003d96:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d98:	4b8b      	ldr	r3, [pc, #556]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003d9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	623b      	str	r3, [r7, #32]
 8003da2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da4:	2300      	movs	r3, #0
 8003da6:	61fb      	str	r3, [r7, #28]
 8003da8:	4b87      	ldr	r3, [pc, #540]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	4a86      	ldr	r2, [pc, #536]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003dae:	f043 0302 	orr.w	r3, r3, #2
 8003db2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003db4:	4b84      	ldr	r3, [pc, #528]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	4b80      	ldr	r3, [pc, #512]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc8:	4a7f      	ldr	r2, [pc, #508]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003dca:	f043 0301 	orr.w	r3, r3, #1
 8003dce:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dd0:	4b7d      	ldr	r3, [pc, #500]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	61bb      	str	r3, [r7, #24]
 8003dda:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003ddc:	2380      	movs	r3, #128	@ 0x80
 8003dde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de0:	2302      	movs	r3, #2
 8003de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de4:	2300      	movs	r3, #0
 8003de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003de8:	2303      	movs	r3, #3
 8003dea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003dec:	2307      	movs	r3, #7
 8003dee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003df4:	4619      	mov	r1, r3
 8003df6:	4875      	ldr	r0, [pc, #468]	@ (8003fcc <HAL_UART_MspInit+0x268>)
 8003df8:	f001 fe9a 	bl	8005b30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003dfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e02:	2302      	movs	r3, #2
 8003e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e0e:	2307      	movs	r3, #7
 8003e10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e16:	4619      	mov	r1, r3
 8003e18:	486d      	ldr	r0, [pc, #436]	@ (8003fd0 <HAL_UART_MspInit+0x26c>)
 8003e1a:	f001 fe89 	bl	8005b30 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003e1e:	4b6d      	ldr	r3, [pc, #436]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e20:	4a6d      	ldr	r2, [pc, #436]	@ (8003fd8 <HAL_UART_MspInit+0x274>)
 8003e22:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003e24:	4b6b      	ldr	r3, [pc, #428]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e26:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003e2a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e2c:	4b69      	ldr	r3, [pc, #420]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e2e:	2240      	movs	r2, #64	@ 0x40
 8003e30:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e32:	4b68      	ldr	r3, [pc, #416]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e38:	4b66      	ldr	r3, [pc, #408]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e3a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e40:	4b64      	ldr	r3, [pc, #400]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e46:	4b63      	ldr	r3, [pc, #396]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e4c:	4b61      	ldr	r3, [pc, #388]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003e52:	4b60      	ldr	r3, [pc, #384]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e54:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003e58:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003e5a:	4b5e      	ldr	r3, [pc, #376]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e60:	485c      	ldr	r0, [pc, #368]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e62:	f001 fa63 	bl	800532c <HAL_DMA_Init>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8003e6c:	f7fe fe5c 	bl	8002b28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a58      	ldr	r2, [pc, #352]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e74:	635a      	str	r2, [r3, #52]	@ 0x34
 8003e76:	4a57      	ldr	r2, [pc, #348]	@ (8003fd4 <HAL_UART_MspInit+0x270>)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003e7c:	4b57      	ldr	r3, [pc, #348]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003e7e:	4a58      	ldr	r2, [pc, #352]	@ (8003fe0 <HAL_UART_MspInit+0x27c>)
 8003e80:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003e82:	4b56      	ldr	r3, [pc, #344]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003e84:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003e88:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e8a:	4b54      	ldr	r3, [pc, #336]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e90:	4b52      	ldr	r3, [pc, #328]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e96:	4b51      	ldr	r3, [pc, #324]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003e98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003e9c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e9e:	4b4f      	ldr	r3, [pc, #316]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003ea4:	4b4d      	ldr	r3, [pc, #308]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003eaa:	4b4c      	ldr	r3, [pc, #304]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003eb2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003eb6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eb8:	4b48      	ldr	r3, [pc, #288]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003ebe:	4847      	ldr	r0, [pc, #284]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003ec0:	f001 fa34 	bl	800532c <HAL_DMA_Init>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8003eca:	f7fe fe2d 	bl	8002b28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a42      	ldr	r2, [pc, #264]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003ed2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ed4:	4a41      	ldr	r2, [pc, #260]	@ (8003fdc <HAL_UART_MspInit+0x278>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003eda:	2200      	movs	r2, #0
 8003edc:	2105      	movs	r1, #5
 8003ede:	2025      	movs	r0, #37	@ 0x25
 8003ee0:	f001 f9ed 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003ee4:	2025      	movs	r0, #37	@ 0x25
 8003ee6:	f001 fa06 	bl	80052f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003eea:	e11c      	b.n	8004126 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe4 <HAL_UART_MspInit+0x280>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d17e      	bne.n	8003ff4 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	4b33      	ldr	r3, [pc, #204]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efe:	4a32      	ldr	r2, [pc, #200]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f06:	4b30      	ldr	r3, [pc, #192]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f0e:	617b      	str	r3, [r7, #20]
 8003f10:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f12:	2300      	movs	r3, #0
 8003f14:	613b      	str	r3, [r7, #16]
 8003f16:	4b2c      	ldr	r3, [pc, #176]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f22:	4b29      	ldr	r3, [pc, #164]	@ (8003fc8 <HAL_UART_MspInit+0x264>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	f003 0304 	and.w	r3, r3, #4
 8003f2a:	613b      	str	r3, [r7, #16]
 8003f2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8003f2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f34:	2302      	movs	r3, #2
 8003f36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003f40:	2307      	movs	r3, #7
 8003f42:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4827      	ldr	r0, [pc, #156]	@ (8003fe8 <HAL_UART_MspInit+0x284>)
 8003f4c:	f001 fdf0 	bl	8005b30 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003f50:	4b26      	ldr	r3, [pc, #152]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f52:	4a27      	ldr	r2, [pc, #156]	@ (8003ff0 <HAL_UART_MspInit+0x28c>)
 8003f54:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003f56:	4b25      	ldr	r3, [pc, #148]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f58:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003f5c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f5e:	4b23      	ldr	r3, [pc, #140]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f64:	4b21      	ldr	r3, [pc, #132]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f6a:	4b20      	ldr	r3, [pc, #128]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f70:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f72:	4b1e      	ldr	r3, [pc, #120]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f78:	4b1c      	ldr	r3, [pc, #112]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f84:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f86:	4b19      	ldr	r3, [pc, #100]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f88:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003f8c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f8e:	4b17      	ldr	r3, [pc, #92]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003f94:	4815      	ldr	r0, [pc, #84]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003f96:	f001 f9c9 	bl	800532c <HAL_DMA_Init>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_UART_MspInit+0x240>
      Error_Handler();
 8003fa0:	f7fe fdc2 	bl	8002b28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a11      	ldr	r2, [pc, #68]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003fa8:	639a      	str	r2, [r3, #56]	@ 0x38
 8003faa:	4a10      	ldr	r2, [pc, #64]	@ (8003fec <HAL_UART_MspInit+0x288>)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	2105      	movs	r1, #5
 8003fb4:	2027      	movs	r0, #39	@ 0x27
 8003fb6:	f001 f982 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003fba:	2027      	movs	r0, #39	@ 0x27
 8003fbc:	f001 f99b 	bl	80052f6 <HAL_NVIC_EnableIRQ>
}
 8003fc0:	e0b1      	b.n	8004126 <HAL_UART_MspInit+0x3c2>
 8003fc2:	bf00      	nop
 8003fc4:	40011000 	.word	0x40011000
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40020400 	.word	0x40020400
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	20000a00 	.word	0x20000a00
 8003fd8:	400264b8 	.word	0x400264b8
 8003fdc:	20000a60 	.word	0x20000a60
 8003fe0:	40026440 	.word	0x40026440
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	40020800 	.word	0x40020800
 8003fec:	20000ac0 	.word	0x20000ac0
 8003ff0:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a4d      	ldr	r2, [pc, #308]	@ (8004130 <HAL_UART_MspInit+0x3cc>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	f040 8093 	bne.w	8004126 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	4b4b      	ldr	r3, [pc, #300]	@ (8004134 <HAL_UART_MspInit+0x3d0>)
 8004006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004008:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <HAL_UART_MspInit+0x3d0>)
 800400a:	f043 0320 	orr.w	r3, r3, #32
 800400e:	6453      	str	r3, [r2, #68]	@ 0x44
 8004010:	4b48      	ldr	r3, [pc, #288]	@ (8004134 <HAL_UART_MspInit+0x3d0>)
 8004012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800401c:	2300      	movs	r3, #0
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	4b44      	ldr	r3, [pc, #272]	@ (8004134 <HAL_UART_MspInit+0x3d0>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	4a43      	ldr	r2, [pc, #268]	@ (8004134 <HAL_UART_MspInit+0x3d0>)
 8004026:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800402a:	6313      	str	r3, [r2, #48]	@ 0x30
 800402c:	4b41      	ldr	r3, [pc, #260]	@ (8004134 <HAL_UART_MspInit+0x3d0>)
 800402e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004030:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004034:	60bb      	str	r3, [r7, #8]
 8004036:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004038:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403e:	2302      	movs	r3, #2
 8004040:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004042:	2300      	movs	r3, #0
 8004044:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004046:	2303      	movs	r3, #3
 8004048:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800404a:	2308      	movs	r3, #8
 800404c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800404e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004052:	4619      	mov	r1, r3
 8004054:	4838      	ldr	r0, [pc, #224]	@ (8004138 <HAL_UART_MspInit+0x3d4>)
 8004056:	f001 fd6b 	bl	8005b30 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800405a:	4b38      	ldr	r3, [pc, #224]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 800405c:	4a38      	ldr	r2, [pc, #224]	@ (8004140 <HAL_UART_MspInit+0x3dc>)
 800405e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004060:	4b36      	ldr	r3, [pc, #216]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 8004062:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004066:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004068:	4b34      	ldr	r3, [pc, #208]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 800406a:	2200      	movs	r2, #0
 800406c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800406e:	4b33      	ldr	r3, [pc, #204]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 8004070:	2200      	movs	r2, #0
 8004072:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004074:	4b31      	ldr	r3, [pc, #196]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 8004076:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800407a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800407c:	4b2f      	ldr	r3, [pc, #188]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 800407e:	2200      	movs	r2, #0
 8004080:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004082:	4b2e      	ldr	r3, [pc, #184]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 8004084:	2200      	movs	r2, #0
 8004086:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004088:	4b2c      	ldr	r3, [pc, #176]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 800408a:	2200      	movs	r2, #0
 800408c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800408e:	4b2b      	ldr	r3, [pc, #172]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 8004090:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004094:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004096:	4b29      	ldr	r3, [pc, #164]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 8004098:	2200      	movs	r2, #0
 800409a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 800409c:	4827      	ldr	r0, [pc, #156]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 800409e:	f001 f945 	bl	800532c <HAL_DMA_Init>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d001      	beq.n	80040ac <HAL_UART_MspInit+0x348>
      Error_Handler();
 80040a8:	f7fe fd3e 	bl	8002b28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a23      	ldr	r2, [pc, #140]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 80040b0:	639a      	str	r2, [r3, #56]	@ 0x38
 80040b2:	4a22      	ldr	r2, [pc, #136]	@ (800413c <HAL_UART_MspInit+0x3d8>)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80040b8:	4b22      	ldr	r3, [pc, #136]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040ba:	4a23      	ldr	r2, [pc, #140]	@ (8004148 <HAL_UART_MspInit+0x3e4>)
 80040bc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80040be:	4b21      	ldr	r3, [pc, #132]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040c0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80040c4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040c8:	2240      	movs	r2, #64	@ 0x40
 80040ca:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040ce:	2200      	movs	r2, #0
 80040d0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80040d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040d8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040da:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040dc:	2200      	movs	r2, #0
 80040de:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040e0:	4b18      	ldr	r3, [pc, #96]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80040e6:	4b17      	ldr	r3, [pc, #92]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80040ec:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80040f2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040f4:	4b13      	ldr	r3, [pc, #76]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040f6:	2200      	movs	r2, #0
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80040fa:	4812      	ldr	r0, [pc, #72]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 80040fc:	f001 f916 	bl	800532c <HAL_DMA_Init>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8004106:	f7fe fd0f 	bl	8002b28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a0d      	ldr	r2, [pc, #52]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 800410e:	635a      	str	r2, [r3, #52]	@ 0x34
 8004110:	4a0c      	ldr	r2, [pc, #48]	@ (8004144 <HAL_UART_MspInit+0x3e0>)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004116:	2200      	movs	r2, #0
 8004118:	2105      	movs	r1, #5
 800411a:	2047      	movs	r0, #71	@ 0x47
 800411c:	f001 f8cf 	bl	80052be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004120:	2047      	movs	r0, #71	@ 0x47
 8004122:	f001 f8e8 	bl	80052f6 <HAL_NVIC_EnableIRQ>
}
 8004126:	bf00      	nop
 8004128:	3738      	adds	r7, #56	@ 0x38
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40011400 	.word	0x40011400
 8004134:	40023800 	.word	0x40023800
 8004138:	40021800 	.word	0x40021800
 800413c:	20000b20 	.word	0x20000b20
 8004140:	40026428 	.word	0x40026428
 8004144:	20000b80 	.word	0x20000b80
 8004148:	400264a0 	.word	0x400264a0

0800414c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004150:	f003 f90e 	bl	8007370 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004154:	bf00      	nop
 8004156:	e7fd      	b.n	8004154 <NMI_Handler+0x8>

08004158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004158:	b480      	push	{r7}
 800415a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800415c:	bf00      	nop
 800415e:	e7fd      	b.n	800415c <HardFault_Handler+0x4>

08004160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004160:	b480      	push	{r7}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004164:	bf00      	nop
 8004166:	e7fd      	b.n	8004164 <MemManage_Handler+0x4>

08004168 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004168:	b480      	push	{r7}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800416c:	bf00      	nop
 800416e:	e7fd      	b.n	800416c <BusFault_Handler+0x4>

08004170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004174:	bf00      	nop
 8004176:	e7fd      	b.n	8004174 <UsageFault_Handler+0x4>

08004178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800417c:	bf00      	nop
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800418a:	f000 f93b 	bl	8004404 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800418e:	f007 fc21 	bl	800b9d4 <xTaskGetSchedulerState>
 8004192:	4603      	mov	r3, r0
 8004194:	2b01      	cmp	r3, #1
 8004196:	d001      	beq.n	800419c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004198:	f008 fafe 	bl	800c798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800419c:	bf00      	nop
 800419e:	bd80      	pop	{r7, pc}

080041a0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80041a4:	2008      	movs	r0, #8
 80041a6:	f001 fe79 	bl	8005e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 80041aa:	4802      	ldr	r0, [pc, #8]	@ (80041b4 <EXTI3_IRQHandler+0x14>)
 80041ac:	f7fd fcf4 	bl	8001b98 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 80041b0:	bf00      	nop
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	200006c4 	.word	0x200006c4

080041b8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80041bc:	2010      	movs	r0, #16
 80041be:	f001 fe6d 	bl	8005e9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80041c2:	bf00      	nop
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80041cc:	4802      	ldr	r0, [pc, #8]	@ (80041d8 <DMA1_Stream1_IRQHandler+0x10>)
 80041ce:	f001 fa45 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	20000ac0 	.word	0x20000ac0

080041dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80041e0:	4802      	ldr	r0, [pc, #8]	@ (80041ec <CAN1_RX0_IRQHandler+0x10>)
 80041e2:	f000 fd62 	bl	8004caa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	200006d0 	.word	0x200006d0

080041f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80041f4:	4802      	ldr	r0, [pc, #8]	@ (8004200 <USART1_IRQHandler+0x10>)
 80041f6:	f004 fca5 	bl	8008b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80041fa:	bf00      	nop
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000934 	.word	0x20000934

08004204 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8004208:	4802      	ldr	r0, [pc, #8]	@ (8004214 <DMA2_Stream1_IRQHandler+0x10>)
 800420a:	f001 fa27 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800420e:	bf00      	nop
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000b20 	.word	0x20000b20

08004218 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800421c:	4802      	ldr	r0, [pc, #8]	@ (8004228 <DMA2_Stream2_IRQHandler+0x10>)
 800421e:	f001 fa1d 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004222:	bf00      	nop
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20000a60 	.word	0x20000a60

0800422c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004230:	4802      	ldr	r0, [pc, #8]	@ (800423c <CAN2_RX0_IRQHandler+0x10>)
 8004232:	f000 fd3a 	bl	8004caa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004236:	bf00      	nop
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200006f8 	.word	0x200006f8

08004240 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004244:	4802      	ldr	r0, [pc, #8]	@ (8004250 <DMA2_Stream6_IRQHandler+0x10>)
 8004246:	f001 fa09 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800424a:	bf00      	nop
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000b80 	.word	0x20000b80

08004254 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004258:	4802      	ldr	r0, [pc, #8]	@ (8004264 <DMA2_Stream7_IRQHandler+0x10>)
 800425a:	f001 f9ff 	bl	800565c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800425e:	bf00      	nop
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000a00 	.word	0x20000a00

08004268 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800426c:	4802      	ldr	r0, [pc, #8]	@ (8004278 <USART6_IRQHandler+0x10>)
 800426e:	f004 fc69 	bl	8008b44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004272:	bf00      	nop
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	200009bc 	.word	0x200009bc

0800427c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004284:	4a14      	ldr	r2, [pc, #80]	@ (80042d8 <_sbrk+0x5c>)
 8004286:	4b15      	ldr	r3, [pc, #84]	@ (80042dc <_sbrk+0x60>)
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004290:	4b13      	ldr	r3, [pc, #76]	@ (80042e0 <_sbrk+0x64>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004298:	4b11      	ldr	r3, [pc, #68]	@ (80042e0 <_sbrk+0x64>)
 800429a:	4a12      	ldr	r2, [pc, #72]	@ (80042e4 <_sbrk+0x68>)
 800429c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800429e:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <_sbrk+0x64>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	4413      	add	r3, r2
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d207      	bcs.n	80042bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042ac:	f008 fd1c 	bl	800cce8 <__errno>
 80042b0:	4603      	mov	r3, r0
 80042b2:	220c      	movs	r2, #12
 80042b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80042ba:	e009      	b.n	80042d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042bc:	4b08      	ldr	r3, [pc, #32]	@ (80042e0 <_sbrk+0x64>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042c2:	4b07      	ldr	r3, [pc, #28]	@ (80042e0 <_sbrk+0x64>)
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	4a05      	ldr	r2, [pc, #20]	@ (80042e0 <_sbrk+0x64>)
 80042cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042ce:	68fb      	ldr	r3, [r7, #12]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	20020000 	.word	0x20020000
 80042dc:	00000400 	.word	0x00000400
 80042e0:	20000c78 	.word	0x20000c78
 80042e4:	200057b0 	.word	0x200057b0

080042e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <SystemInit+0x20>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f2:	4a05      	ldr	r2, [pc, #20]	@ (8004308 <SystemInit+0x20>)
 80042f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800430c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004310:	480d      	ldr	r0, [pc, #52]	@ (8004348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004312:	490e      	ldr	r1, [pc, #56]	@ (800434c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004314:	4a0e      	ldr	r2, [pc, #56]	@ (8004350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004318:	e002      	b.n	8004320 <LoopCopyDataInit>

0800431a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800431a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800431c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800431e:	3304      	adds	r3, #4

08004320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004324:	d3f9      	bcc.n	800431a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004326:	4a0b      	ldr	r2, [pc, #44]	@ (8004354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004328:	4c0b      	ldr	r4, [pc, #44]	@ (8004358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800432a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800432c:	e001      	b.n	8004332 <LoopFillZerobss>

0800432e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800432e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004330:	3204      	adds	r2, #4

08004332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004334:	d3fb      	bcc.n	800432e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004336:	f7ff ffd7 	bl	80042e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800433a:	f008 fcdb 	bl	800ccf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800433e:	f7fd fc9b 	bl	8001c78 <main>
  bx  lr    
 8004342:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800434c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004350:	0800d820 	.word	0x0800d820
  ldr r2, =_sbss
 8004354:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8004358:	200057b0 	.word	0x200057b0

0800435c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800435c:	e7fe      	b.n	800435c <ADC_IRQHandler>
	...

08004360 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004364:	4b0e      	ldr	r3, [pc, #56]	@ (80043a0 <HAL_Init+0x40>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0d      	ldr	r2, [pc, #52]	@ (80043a0 <HAL_Init+0x40>)
 800436a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800436e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004370:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <HAL_Init+0x40>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a0a      	ldr	r2, [pc, #40]	@ (80043a0 <HAL_Init+0x40>)
 8004376:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800437a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437c:	4b08      	ldr	r3, [pc, #32]	@ (80043a0 <HAL_Init+0x40>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a07      	ldr	r2, [pc, #28]	@ (80043a0 <HAL_Init+0x40>)
 8004382:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004386:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004388:	2003      	movs	r0, #3
 800438a:	f000 ff8d 	bl	80052a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800438e:	200f      	movs	r0, #15
 8004390:	f000 f808 	bl	80043a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004394:	f7ff f9b6 	bl	8003704 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004398:	2300      	movs	r3, #0
}
 800439a:	4618      	mov	r0, r3
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	40023c00 	.word	0x40023c00

080043a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80043ac:	4b12      	ldr	r3, [pc, #72]	@ (80043f8 <HAL_InitTick+0x54>)
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <HAL_InitTick+0x58>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80043ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80043be:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 ffa5 	bl	8005312 <HAL_SYSTICK_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e00e      	b.n	80043f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b0f      	cmp	r3, #15
 80043d6:	d80a      	bhi.n	80043ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d8:	2200      	movs	r2, #0
 80043da:	6879      	ldr	r1, [r7, #4]
 80043dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043e0:	f000 ff6d 	bl	80052be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e4:	4a06      	ldr	r2, [pc, #24]	@ (8004400 <HAL_InitTick+0x5c>)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	e000      	b.n	80043f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	2000001c 	.word	0x2000001c
 80043fc:	20000024 	.word	0x20000024
 8004400:	20000020 	.word	0x20000020

08004404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004408:	4b06      	ldr	r3, [pc, #24]	@ (8004424 <HAL_IncTick+0x20>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	461a      	mov	r2, r3
 800440e:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <HAL_IncTick+0x24>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4413      	add	r3, r2
 8004414:	4a04      	ldr	r2, [pc, #16]	@ (8004428 <HAL_IncTick+0x24>)
 8004416:	6013      	str	r3, [r2, #0]
}
 8004418:	bf00      	nop
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
 8004422:	bf00      	nop
 8004424:	20000024 	.word	0x20000024
 8004428:	20000c7c 	.word	0x20000c7c

0800442c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800442c:	b480      	push	{r7}
 800442e:	af00      	add	r7, sp, #0
  return uwTick;
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <HAL_GetTick+0x14>)
 8004432:	681b      	ldr	r3, [r3, #0]
}
 8004434:	4618      	mov	r0, r3
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	20000c7c 	.word	0x20000c7c

08004444 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0ed      	b.n	8004632 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d102      	bne.n	8004468 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f7ff f97a 	bl	800375c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004478:	f7ff ffd8 	bl	800442c <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800447e:	e012      	b.n	80044a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004480:	f7ff ffd4 	bl	800442c <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b0a      	cmp	r3, #10
 800448c:	d90b      	bls.n	80044a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004492:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2205      	movs	r2, #5
 800449e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0c5      	b.n	8004632 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0e5      	beq.n	8004480 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f022 0202 	bic.w	r2, r2, #2
 80044c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044c4:	f7ff ffb2 	bl	800442c <HAL_GetTick>
 80044c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044ca:	e012      	b.n	80044f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044cc:	f7ff ffae 	bl	800442c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b0a      	cmp	r3, #10
 80044d8:	d90b      	bls.n	80044f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2205      	movs	r2, #5
 80044ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e09f      	b.n	8004632 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	7e1b      	ldrb	r3, [r3, #24]
 8004504:	2b01      	cmp	r3, #1
 8004506:	d108      	bne.n	800451a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	e007      	b.n	800452a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004528:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	7e5b      	ldrb	r3, [r3, #25]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d108      	bne.n	8004544 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004540:	601a      	str	r2, [r3, #0]
 8004542:	e007      	b.n	8004554 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004552:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	7e9b      	ldrb	r3, [r3, #26]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d108      	bne.n	800456e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0220 	orr.w	r2, r2, #32
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	e007      	b.n	800457e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 0220 	bic.w	r2, r2, #32
 800457c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	7edb      	ldrb	r3, [r3, #27]
 8004582:	2b01      	cmp	r3, #1
 8004584:	d108      	bne.n	8004598 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0210 	bic.w	r2, r2, #16
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e007      	b.n	80045a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0210 	orr.w	r2, r2, #16
 80045a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	7f1b      	ldrb	r3, [r3, #28]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d108      	bne.n	80045c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	601a      	str	r2, [r3, #0]
 80045c0:	e007      	b.n	80045d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0208 	bic.w	r2, r2, #8
 80045d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	7f5b      	ldrb	r3, [r3, #29]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d108      	bne.n	80045ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f042 0204 	orr.w	r2, r2, #4
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e007      	b.n	80045fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0204 	bic.w	r2, r2, #4
 80045fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	695b      	ldr	r3, [r3, #20]
 8004610:	ea42 0103 	orr.w	r1, r2, r3
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	1e5a      	subs	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	430a      	orrs	r2, r1
 8004620:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004630:	2300      	movs	r3, #0
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004652:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004654:	7cfb      	ldrb	r3, [r7, #19]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d003      	beq.n	8004662 <HAL_CAN_ConfigFilter+0x26>
 800465a:	7cfb      	ldrb	r3, [r7, #19]
 800465c:	2b02      	cmp	r3, #2
 800465e:	f040 80be 	bne.w	80047de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004662:	4b65      	ldr	r3, [pc, #404]	@ (80047f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8004664:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800466c:	f043 0201 	orr.w	r2, r3, #1
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800467c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	021b      	lsls	r3, r3, #8
 8004692:	431a      	orrs	r2, r3
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 031f 	and.w	r3, r3, #31
 80046a2:	2201      	movs	r2, #1
 80046a4:	fa02 f303 	lsl.w	r3, r2, r3
 80046a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	401a      	ands	r2, r3
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d123      	bne.n	800470c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	43db      	mvns	r3, r3
 80046ce:	401a      	ands	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80046e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	3248      	adds	r2, #72	@ 0x48
 80046ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004700:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004702:	6979      	ldr	r1, [r7, #20]
 8004704:	3348      	adds	r3, #72	@ 0x48
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	440b      	add	r3, r1
 800470a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	69db      	ldr	r3, [r3, #28]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d122      	bne.n	800475a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	431a      	orrs	r2, r3
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004734:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	3248      	adds	r2, #72	@ 0x48
 800473a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800474e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004750:	6979      	ldr	r1, [r7, #20]
 8004752:	3348      	adds	r3, #72	@ 0x48
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	440b      	add	r3, r1
 8004758:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	43db      	mvns	r3, r3
 800476c:	401a      	ands	r2, r3
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004774:	e007      	b.n	8004786 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	431a      	orrs	r2, r3
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	43db      	mvns	r3, r3
 8004798:	401a      	ands	r2, r3
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80047a0:	e007      	b.n	80047b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	431a      	orrs	r2, r3
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	6a1b      	ldr	r3, [r3, #32]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d107      	bne.n	80047ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	431a      	orrs	r2, r3
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80047d0:	f023 0201 	bic.w	r2, r3, #1
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80047da:	2300      	movs	r3, #0
 80047dc:	e006      	b.n	80047ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
  }
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	371c      	adds	r7, #28
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr
 80047f8:	40006400 	.word	0x40006400

080047fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d12e      	bne.n	800486e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004828:	f7ff fe00 	bl	800442c <HAL_GetTick>
 800482c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800482e:	e012      	b.n	8004856 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004830:	f7ff fdfc 	bl	800442c <HAL_GetTick>
 8004834:	4602      	mov	r2, r0
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	1ad3      	subs	r3, r2, r3
 800483a:	2b0a      	cmp	r3, #10
 800483c:	d90b      	bls.n	8004856 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2205      	movs	r2, #5
 800484e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e012      	b.n	800487c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e5      	bne.n	8004830 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	e006      	b.n	800487c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004872:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
  }
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004884:	b480      	push	{r7}
 8004886:	b089      	sub	sp, #36	@ 0x24
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004898:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80048a2:	7ffb      	ldrb	r3, [r7, #31]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d003      	beq.n	80048b0 <HAL_CAN_AddTxMessage+0x2c>
 80048a8:	7ffb      	ldrb	r3, [r7, #31]
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	f040 80b8 	bne.w	8004a20 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f000 80a0 	beq.w	8004a10 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	0e1b      	lsrs	r3, r3, #24
 80048d4:	f003 0303 	and.w	r3, r3, #3
 80048d8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d907      	bls.n	80048f0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e09e      	b.n	8004a2e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80048f0:	2201      	movs	r2, #1
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	409a      	lsls	r2, r3
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	6809      	ldr	r1, [r1, #0]
 8004910:	431a      	orrs	r2, r3
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	3318      	adds	r3, #24
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	440b      	add	r3, r1
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e00f      	b.n	800493e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004928:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800492e:	68f9      	ldr	r1, [r7, #12]
 8004930:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004932:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	3318      	adds	r3, #24
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	440b      	add	r3, r1
 800493c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6819      	ldr	r1, [r3, #0]
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	691a      	ldr	r2, [r3, #16]
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	3318      	adds	r3, #24
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	440b      	add	r3, r1
 800494e:	3304      	adds	r3, #4
 8004950:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	7d1b      	ldrb	r3, [r3, #20]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d111      	bne.n	800497e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	3318      	adds	r3, #24
 8004962:	011b      	lsls	r3, r3, #4
 8004964:	4413      	add	r3, r2
 8004966:	3304      	adds	r3, #4
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	6811      	ldr	r1, [r2, #0]
 800496e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	3318      	adds	r3, #24
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	440b      	add	r3, r1
 800497a:	3304      	adds	r3, #4
 800497c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	3307      	adds	r3, #7
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	061a      	lsls	r2, r3, #24
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	3306      	adds	r3, #6
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	041b      	lsls	r3, r3, #16
 800498e:	431a      	orrs	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3305      	adds	r3, #5
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	021b      	lsls	r3, r3, #8
 8004998:	4313      	orrs	r3, r2
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	3204      	adds	r2, #4
 800499e:	7812      	ldrb	r2, [r2, #0]
 80049a0:	4610      	mov	r0, r2
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6811      	ldr	r1, [r2, #0]
 80049a6:	ea43 0200 	orr.w	r2, r3, r0
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	440b      	add	r3, r1
 80049b0:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80049b4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3303      	adds	r3, #3
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	061a      	lsls	r2, r3, #24
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	3302      	adds	r3, #2
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	041b      	lsls	r3, r3, #16
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3301      	adds	r3, #1
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	4313      	orrs	r3, r2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	7812      	ldrb	r2, [r2, #0]
 80049d6:	4610      	mov	r0, r2
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	6811      	ldr	r1, [r2, #0]
 80049dc:	ea43 0200 	orr.w	r2, r3, r0
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	011b      	lsls	r3, r3, #4
 80049e4:	440b      	add	r3, r1
 80049e6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80049ea:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	3318      	adds	r3, #24
 80049f4:	011b      	lsls	r3, r3, #4
 80049f6:	4413      	add	r3, r2
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68fa      	ldr	r2, [r7, #12]
 80049fc:	6811      	ldr	r1, [r2, #0]
 80049fe:	f043 0201 	orr.w	r2, r3, #1
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	3318      	adds	r3, #24
 8004a06:	011b      	lsls	r3, r3, #4
 8004a08:	440b      	add	r3, r1
 8004a0a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e00e      	b.n	8004a2e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e006      	b.n	8004a2e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a24:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
  }
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3724      	adds	r7, #36	@ 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	b087      	sub	sp, #28
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
 8004a46:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a4e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d003      	beq.n	8004a5e <HAL_CAN_GetRxMessage+0x24>
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	f040 80f3 	bne.w	8004c44 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10e      	bne.n	8004a82 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d116      	bne.n	8004aa0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e0e7      	b.n	8004c52 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e0d8      	b.n	8004c52 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	331b      	adds	r3, #27
 8004aa8:	011b      	lsls	r3, r3, #4
 8004aaa:	4413      	add	r3, r2
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0204 	and.w	r2, r3, #4
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10c      	bne.n	8004ad8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	331b      	adds	r3, #27
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	4413      	add	r3, r2
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	0d5b      	lsrs	r3, r3, #21
 8004ace:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e00b      	b.n	8004af0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	331b      	adds	r3, #27
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	4413      	add	r3, r2
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	08db      	lsrs	r3, r3, #3
 8004ae8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	331b      	adds	r3, #27
 8004af8:	011b      	lsls	r3, r3, #4
 8004afa:	4413      	add	r3, r2
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0202 	and.w	r2, r3, #2
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	331b      	adds	r3, #27
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	4413      	add	r3, r2
 8004b12:	3304      	adds	r3, #4
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 020f 	and.w	r2, r3, #15
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	331b      	adds	r3, #27
 8004b26:	011b      	lsls	r3, r3, #4
 8004b28:	4413      	add	r3, r2
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	0a1b      	lsrs	r3, r3, #8
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	331b      	adds	r3, #27
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	4413      	add	r3, r2
 8004b42:	3304      	adds	r3, #4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	0c1b      	lsrs	r3, r3, #16
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	b2da      	uxtb	r2, r3
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	011b      	lsls	r3, r3, #4
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	0a1a      	lsrs	r2, r3, #8
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	3301      	adds	r3, #1
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	011b      	lsls	r3, r3, #4
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	0c1a      	lsrs	r2, r3, #16
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	3302      	adds	r3, #2
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	4413      	add	r3, r2
 8004ba2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	0e1a      	lsrs	r2, r3, #24
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	3303      	adds	r3, #3
 8004bae:	b2d2      	uxtb	r2, r2
 8004bb0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	0a1a      	lsrs	r2, r3, #8
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	3305      	adds	r3, #5
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	011b      	lsls	r3, r3, #4
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0c1a      	lsrs	r2, r3, #16
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	3306      	adds	r3, #6
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	4413      	add	r3, r2
 8004c08:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	0e1a      	lsrs	r2, r3, #24
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	3307      	adds	r3, #7
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d108      	bne.n	8004c30 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68da      	ldr	r2, [r3, #12]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f042 0220 	orr.w	r2, r2, #32
 8004c2c:	60da      	str	r2, [r3, #12]
 8004c2e:	e007      	b.n	8004c40 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0220 	orr.w	r2, r2, #32
 8004c3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004c40:	2300      	movs	r3, #0
 8004c42:	e006      	b.n	8004c52 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
  }
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c6e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d002      	beq.n	8004c7c <HAL_CAN_ActivateNotification+0x1e>
 8004c76:	7bfb      	ldrb	r3, [r7, #15]
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d109      	bne.n	8004c90 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6959      	ldr	r1, [r3, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e006      	b.n	8004c9e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
  }
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b08a      	sub	sp, #40	@ 0x28
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695b      	ldr	r3, [r3, #20]
 8004cbc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f003 0301 	and.w	r3, r3, #1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d07c      	beq.n	8004dea <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	f003 0301 	and.w	r3, r3, #1
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d023      	beq.n	8004d42 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f003 0302 	and.w	r3, r3, #2
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f983 	bl	8005018 <HAL_CAN_TxMailbox0CompleteCallback>
 8004d12:	e016      	b.n	8004d42 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d004      	beq.n	8004d28 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d26:	e00c      	b.n	8004d42 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	f003 0308 	and.w	r3, r3, #8
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d004      	beq.n	8004d3c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d3a:	e002      	b.n	8004d42 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f989 	bl	8005054 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d024      	beq.n	8004d96 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d54:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d003      	beq.n	8004d68 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f963 	bl	800502c <HAL_CAN_TxMailbox1CompleteCallback>
 8004d66:	e016      	b.n	8004d96 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d004      	beq.n	8004d7c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d7a:	e00c      	b.n	8004d96 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d004      	beq.n	8004d90 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8004d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d8e:	e002      	b.n	8004d96 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f969 	bl	8005068 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d024      	beq.n	8004dea <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004da8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f943 	bl	8005040 <HAL_CAN_TxMailbox2CompleteCallback>
 8004dba:	e016      	b.n	8004dea <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dce:	e00c      	b.n	8004dea <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d004      	beq.n	8004de4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004de2:	e002      	b.n	8004dea <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 f949 	bl	800507c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	f003 0308 	and.w	r3, r3, #8
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d00c      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f003 0310 	and.w	r3, r3, #16
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d007      	beq.n	8004e0e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e04:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2210      	movs	r2, #16
 8004e0c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	f003 0304 	and.w	r3, r3, #4
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d006      	beq.n	8004e30 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2208      	movs	r2, #8
 8004e28:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f930 	bl	8005090 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d009      	beq.n	8004e4e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7fb fd29 	bl	80008a0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00c      	beq.n	8004e72 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d007      	beq.n	8004e72 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2210      	movs	r2, #16
 8004e70:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d006      	beq.n	8004e94 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f912 	bl	80050b8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f8f9 	bl	80050a4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00b      	beq.n	8004ed4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0310 	and.w	r3, r3, #16
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d006      	beq.n	8004ed4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2210      	movs	r2, #16
 8004ecc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 f8fc 	bl	80050cc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004ed4:	6a3b      	ldr	r3, [r7, #32]
 8004ed6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00b      	beq.n	8004ef6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	f003 0308 	and.w	r3, r3, #8
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d006      	beq.n	8004ef6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2208      	movs	r2, #8
 8004eee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 f8f5 	bl	80050e0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d07b      	beq.n	8004ff8 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	f003 0304 	and.w	r3, r3, #4
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d072      	beq.n	8004ff0 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f0a:	6a3b      	ldr	r3, [r7, #32]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d003      	beq.n	8004f26 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	f043 0301 	orr.w	r3, r3, #1
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d008      	beq.n	8004f42 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	f043 0302 	orr.w	r3, r3, #2
 8004f40:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f58:	f043 0304 	orr.w	r3, r3, #4
 8004f5c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d043      	beq.n	8004ff0 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d03e      	beq.n	8004ff0 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f78:	2b60      	cmp	r3, #96	@ 0x60
 8004f7a:	d02b      	beq.n	8004fd4 <HAL_CAN_IRQHandler+0x32a>
 8004f7c:	2b60      	cmp	r3, #96	@ 0x60
 8004f7e:	d82e      	bhi.n	8004fde <HAL_CAN_IRQHandler+0x334>
 8004f80:	2b50      	cmp	r3, #80	@ 0x50
 8004f82:	d022      	beq.n	8004fca <HAL_CAN_IRQHandler+0x320>
 8004f84:	2b50      	cmp	r3, #80	@ 0x50
 8004f86:	d82a      	bhi.n	8004fde <HAL_CAN_IRQHandler+0x334>
 8004f88:	2b40      	cmp	r3, #64	@ 0x40
 8004f8a:	d019      	beq.n	8004fc0 <HAL_CAN_IRQHandler+0x316>
 8004f8c:	2b40      	cmp	r3, #64	@ 0x40
 8004f8e:	d826      	bhi.n	8004fde <HAL_CAN_IRQHandler+0x334>
 8004f90:	2b30      	cmp	r3, #48	@ 0x30
 8004f92:	d010      	beq.n	8004fb6 <HAL_CAN_IRQHandler+0x30c>
 8004f94:	2b30      	cmp	r3, #48	@ 0x30
 8004f96:	d822      	bhi.n	8004fde <HAL_CAN_IRQHandler+0x334>
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d002      	beq.n	8004fa2 <HAL_CAN_IRQHandler+0x2f8>
 8004f9c:	2b20      	cmp	r3, #32
 8004f9e:	d005      	beq.n	8004fac <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004fa0:	e01d      	b.n	8004fde <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa4:	f043 0308 	orr.w	r3, r3, #8
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004faa:	e019      	b.n	8004fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fae:	f043 0310 	orr.w	r3, r3, #16
 8004fb2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004fb4:	e014      	b.n	8004fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb8:	f043 0320 	orr.w	r3, r3, #32
 8004fbc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004fbe:	e00f      	b.n	8004fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fc6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004fc8:	e00a      	b.n	8004fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004fd2:	e005      	b.n	8004fe0 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fda:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8004fdc:	e000      	b.n	8004fe0 <HAL_CAN_IRQHandler+0x336>
            break;
 8004fde:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	699a      	ldr	r2, [r3, #24]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004fee:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	2204      	movs	r2, #4
 8004ff6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d008      	beq.n	8005010 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005004:	431a      	orrs	r2, r3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f872 	bl	80050f4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005010:	bf00      	nop
 8005012:	3728      	adds	r7, #40	@ 0x28
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005084:	bf00      	nop
 8005086:	370c      	adds	r7, #12
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005090:	b480      	push	{r7}
 8005092:	b083      	sub	sp, #12
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005098:	bf00      	nop
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005118:	4b0c      	ldr	r3, [pc, #48]	@ (800514c <__NVIC_SetPriorityGrouping+0x44>)
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005124:	4013      	ands	r3, r2
 8005126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005130:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800513a:	4a04      	ldr	r2, [pc, #16]	@ (800514c <__NVIC_SetPriorityGrouping+0x44>)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	60d3      	str	r3, [r2, #12]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr
 800514c:	e000ed00 	.word	0xe000ed00

08005150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005154:	4b04      	ldr	r3, [pc, #16]	@ (8005168 <__NVIC_GetPriorityGrouping+0x18>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	0a1b      	lsrs	r3, r3, #8
 800515a:	f003 0307 	and.w	r3, r3, #7
}
 800515e:	4618      	mov	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	2b00      	cmp	r3, #0
 800517c:	db0b      	blt.n	8005196 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800517e:	79fb      	ldrb	r3, [r7, #7]
 8005180:	f003 021f 	and.w	r2, r3, #31
 8005184:	4907      	ldr	r1, [pc, #28]	@ (80051a4 <__NVIC_EnableIRQ+0x38>)
 8005186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	2001      	movs	r0, #1
 800518e:	fa00 f202 	lsl.w	r2, r0, r2
 8005192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	e000e100 	.word	0xe000e100

080051a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	6039      	str	r1, [r7, #0]
 80051b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	db0a      	blt.n	80051d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	490c      	ldr	r1, [pc, #48]	@ (80051f4 <__NVIC_SetPriority+0x4c>)
 80051c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c6:	0112      	lsls	r2, r2, #4
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	440b      	add	r3, r1
 80051cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051d0:	e00a      	b.n	80051e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	b2da      	uxtb	r2, r3
 80051d6:	4908      	ldr	r1, [pc, #32]	@ (80051f8 <__NVIC_SetPriority+0x50>)
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	3b04      	subs	r3, #4
 80051e0:	0112      	lsls	r2, r2, #4
 80051e2:	b2d2      	uxtb	r2, r2
 80051e4:	440b      	add	r3, r1
 80051e6:	761a      	strb	r2, [r3, #24]
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr
 80051f4:	e000e100 	.word	0xe000e100
 80051f8:	e000ed00 	.word	0xe000ed00

080051fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	@ 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0307 	and.w	r3, r3, #7
 800520e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	f1c3 0307 	rsb	r3, r3, #7
 8005216:	2b04      	cmp	r3, #4
 8005218:	bf28      	it	cs
 800521a:	2304      	movcs	r3, #4
 800521c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	3304      	adds	r3, #4
 8005222:	2b06      	cmp	r3, #6
 8005224:	d902      	bls.n	800522c <NVIC_EncodePriority+0x30>
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	3b03      	subs	r3, #3
 800522a:	e000      	b.n	800522e <NVIC_EncodePriority+0x32>
 800522c:	2300      	movs	r3, #0
 800522e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005230:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	43da      	mvns	r2, r3
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	401a      	ands	r2, r3
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005244:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	fa01 f303 	lsl.w	r3, r1, r3
 800524e:	43d9      	mvns	r1, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005254:	4313      	orrs	r3, r2
         );
}
 8005256:	4618      	mov	r0, r3
 8005258:	3724      	adds	r7, #36	@ 0x24
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3b01      	subs	r3, #1
 8005270:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005274:	d301      	bcc.n	800527a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005276:	2301      	movs	r3, #1
 8005278:	e00f      	b.n	800529a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800527a:	4a0a      	ldr	r2, [pc, #40]	@ (80052a4 <SysTick_Config+0x40>)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3b01      	subs	r3, #1
 8005280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005282:	210f      	movs	r1, #15
 8005284:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005288:	f7ff ff8e 	bl	80051a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800528c:	4b05      	ldr	r3, [pc, #20]	@ (80052a4 <SysTick_Config+0x40>)
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005292:	4b04      	ldr	r3, [pc, #16]	@ (80052a4 <SysTick_Config+0x40>)
 8005294:	2207      	movs	r2, #7
 8005296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	e000e010 	.word	0xe000e010

080052a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff ff29 	bl	8005108 <__NVIC_SetPriorityGrouping>
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052be:	b580      	push	{r7, lr}
 80052c0:	b086      	sub	sp, #24
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	4603      	mov	r3, r0
 80052c6:	60b9      	str	r1, [r7, #8]
 80052c8:	607a      	str	r2, [r7, #4]
 80052ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052d0:	f7ff ff3e 	bl	8005150 <__NVIC_GetPriorityGrouping>
 80052d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	68b9      	ldr	r1, [r7, #8]
 80052da:	6978      	ldr	r0, [r7, #20]
 80052dc:	f7ff ff8e 	bl	80051fc <NVIC_EncodePriority>
 80052e0:	4602      	mov	r2, r0
 80052e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff ff5d 	bl	80051a8 <__NVIC_SetPriority>
}
 80052ee:	bf00      	nop
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	4603      	mov	r3, r0
 80052fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005304:	4618      	mov	r0, r3
 8005306:	f7ff ff31 	bl	800516c <__NVIC_EnableIRQ>
}
 800530a:	bf00      	nop
 800530c:	3708      	adds	r7, #8
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b082      	sub	sp, #8
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7ff ffa2 	bl	8005264 <SysTick_Config>
 8005320:	4603      	mov	r3, r0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
	...

0800532c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005334:	2300      	movs	r3, #0
 8005336:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005338:	f7ff f878 	bl	800442c <HAL_GetTick>
 800533c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e099      	b.n	800547c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005368:	e00f      	b.n	800538a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800536a:	f7ff f85f 	bl	800442c <HAL_GetTick>
 800536e:	4602      	mov	r2, r0
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	2b05      	cmp	r3, #5
 8005376:	d908      	bls.n	800538a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2220      	movs	r2, #32
 800537c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2203      	movs	r2, #3
 8005382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e078      	b.n	800547c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e8      	bne.n	800536a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4b38      	ldr	r3, [pc, #224]	@ (8005484 <HAL_DMA_Init+0x158>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80053c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80053ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80053d6:	697a      	ldr	r2, [r7, #20]
 80053d8:	4313      	orrs	r3, r2
 80053da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d107      	bne.n	80053f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ec:	4313      	orrs	r3, r2
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	695b      	ldr	r3, [r3, #20]
 8005402:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f023 0307 	bic.w	r3, r3, #7
 800540a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	4313      	orrs	r3, r2
 8005414:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	2b04      	cmp	r3, #4
 800541c:	d117      	bne.n	800544e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00e      	beq.n	800544e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fb01 	bl	8005a38 <DMA_CheckFifoParam>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2240      	movs	r2, #64	@ 0x40
 8005440:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800544a:	2301      	movs	r3, #1
 800544c:	e016      	b.n	800547c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	697a      	ldr	r2, [r7, #20]
 8005454:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f000 fab8 	bl	80059cc <DMA_CalcBaseAndBitshift>
 800545c:	4603      	mov	r3, r0
 800545e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005464:	223f      	movs	r2, #63	@ 0x3f
 8005466:	409a      	lsls	r2, r3
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3718      	adds	r7, #24
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}
 8005484:	f010803f 	.word	0xf010803f

08005488 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005496:	2300      	movs	r3, #0
 8005498:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800549e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_DMA_Start_IT+0x26>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e040      	b.n	8005530 <HAL_DMA_Start_IT+0xa8>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d12f      	bne.n	8005522 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2200      	movs	r2, #0
 80054ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	68f8      	ldr	r0, [r7, #12]
 80054d8:	f000 fa4a 	bl	8005970 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e0:	223f      	movs	r2, #63	@ 0x3f
 80054e2:	409a      	lsls	r2, r3
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f042 0216 	orr.w	r2, r2, #22
 80054f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d007      	beq.n	8005510 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0208 	orr.w	r2, r2, #8
 800550e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	681a      	ldr	r2, [r3, #0]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f042 0201 	orr.w	r2, r2, #1
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e005      	b.n	800552e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800552a:	2302      	movs	r3, #2
 800552c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800552e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005544:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005546:	f7fe ff71 	bl	800442c <HAL_GetTick>
 800554a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d008      	beq.n	800556a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2280      	movs	r2, #128	@ 0x80
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e052      	b.n	8005610 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0216 	bic.w	r2, r2, #22
 8005578:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695a      	ldr	r2, [r3, #20]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005588:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d103      	bne.n	800559a <HAL_DMA_Abort+0x62>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 0208 	bic.w	r2, r2, #8
 80055a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f022 0201 	bic.w	r2, r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055ba:	e013      	b.n	80055e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055bc:	f7fe ff36 	bl	800442c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d90c      	bls.n	80055e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2220      	movs	r2, #32
 80055ce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2203      	movs	r2, #3
 80055d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e015      	b.n	8005610 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e4      	bne.n	80055bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055f6:	223f      	movs	r2, #63	@ 0x3f
 80055f8:	409a      	lsls	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d004      	beq.n	8005636 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2280      	movs	r2, #128	@ 0x80
 8005630:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e00c      	b.n	8005650 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2205      	movs	r2, #5
 800563a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f022 0201 	bic.w	r2, r2, #1
 800564c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	370c      	adds	r7, #12
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005668:	4b8e      	ldr	r3, [pc, #568]	@ (80058a4 <HAL_DMA_IRQHandler+0x248>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a8e      	ldr	r2, [pc, #568]	@ (80058a8 <HAL_DMA_IRQHandler+0x24c>)
 800566e:	fba2 2303 	umull	r2, r3, r2, r3
 8005672:	0a9b      	lsrs	r3, r3, #10
 8005674:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005686:	2208      	movs	r2, #8
 8005688:	409a      	lsls	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4013      	ands	r3, r2
 800568e:	2b00      	cmp	r3, #0
 8005690:	d01a      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0304 	and.w	r3, r3, #4
 800569c:	2b00      	cmp	r3, #0
 800569e:	d013      	beq.n	80056c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 0204 	bic.w	r2, r2, #4
 80056ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056b4:	2208      	movs	r2, #8
 80056b6:	409a      	lsls	r2, r3
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c0:	f043 0201 	orr.w	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	2201      	movs	r2, #1
 80056ce:	409a      	lsls	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4013      	ands	r3, r2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d012      	beq.n	80056fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00b      	beq.n	80056fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056ea:	2201      	movs	r2, #1
 80056ec:	409a      	lsls	r2, r3
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f6:	f043 0202 	orr.w	r2, r3, #2
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005702:	2204      	movs	r2, #4
 8005704:	409a      	lsls	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4013      	ands	r3, r2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d012      	beq.n	8005734 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00b      	beq.n	8005734 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005720:	2204      	movs	r2, #4
 8005722:	409a      	lsls	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800572c:	f043 0204 	orr.w	r2, r3, #4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005738:	2210      	movs	r2, #16
 800573a:	409a      	lsls	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4013      	ands	r3, r2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d043      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0308 	and.w	r3, r3, #8
 800574e:	2b00      	cmp	r3, #0
 8005750:	d03c      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005756:	2210      	movs	r2, #16
 8005758:	409a      	lsls	r2, r3
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d018      	beq.n	800579e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d108      	bne.n	800578c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	2b00      	cmp	r3, #0
 8005780:	d024      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	4798      	blx	r3
 800578a:	e01f      	b.n	80057cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005790:	2b00      	cmp	r3, #0
 8005792:	d01b      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	4798      	blx	r3
 800579c:	e016      	b.n	80057cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d107      	bne.n	80057bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f022 0208 	bic.w	r2, r2, #8
 80057ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057d0:	2220      	movs	r2, #32
 80057d2:	409a      	lsls	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	4013      	ands	r3, r2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 808f 	beq.w	80058fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0310 	and.w	r3, r3, #16
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 8087 	beq.w	80058fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057f2:	2220      	movs	r2, #32
 80057f4:	409a      	lsls	r2, r3
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b05      	cmp	r3, #5
 8005804:	d136      	bne.n	8005874 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0216 	bic.w	r2, r2, #22
 8005814:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695a      	ldr	r2, [r3, #20]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005824:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582a:	2b00      	cmp	r3, #0
 800582c:	d103      	bne.n	8005836 <HAL_DMA_IRQHandler+0x1da>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 0208 	bic.w	r2, r2, #8
 8005844:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800584a:	223f      	movs	r2, #63	@ 0x3f
 800584c:	409a      	lsls	r2, r3
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2201      	movs	r2, #1
 8005856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005866:	2b00      	cmp	r3, #0
 8005868:	d07e      	beq.n	8005968 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	4798      	blx	r3
        }
        return;
 8005872:	e079      	b.n	8005968 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01d      	beq.n	80058be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d10d      	bne.n	80058ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005894:	2b00      	cmp	r3, #0
 8005896:	d031      	beq.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
 80058a0:	e02c      	b.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
 80058a2:	bf00      	nop
 80058a4:	2000001c 	.word	0x2000001c
 80058a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d023      	beq.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	4798      	blx	r3
 80058bc:	e01e      	b.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10f      	bne.n	80058ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f022 0210 	bic.w	r2, r2, #16
 80058da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d003      	beq.n	80058fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005900:	2b00      	cmp	r3, #0
 8005902:	d032      	beq.n	800596a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d022      	beq.n	8005956 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2205      	movs	r2, #5
 8005914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f022 0201 	bic.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	3301      	adds	r3, #1
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	429a      	cmp	r2, r3
 8005932:	d307      	bcc.n	8005944 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0301 	and.w	r3, r3, #1
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1f2      	bne.n	8005928 <HAL_DMA_IRQHandler+0x2cc>
 8005942:	e000      	b.n	8005946 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005944:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2201      	movs	r2, #1
 800594a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d005      	beq.n	800596a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	4798      	blx	r3
 8005966:	e000      	b.n	800596a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005968:	bf00      	nop
    }
  }
}
 800596a:	3718      	adds	r7, #24
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	681a      	ldr	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800598c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	2b40      	cmp	r3, #64	@ 0x40
 800599c:	d108      	bne.n	80059b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80059ae:	e007      	b.n	80059c0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68ba      	ldr	r2, [r7, #8]
 80059b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	60da      	str	r2, [r3, #12]
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	3b10      	subs	r3, #16
 80059dc:	4a14      	ldr	r2, [pc, #80]	@ (8005a30 <DMA_CalcBaseAndBitshift+0x64>)
 80059de:	fba2 2303 	umull	r2, r3, r2, r3
 80059e2:	091b      	lsrs	r3, r3, #4
 80059e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80059e6:	4a13      	ldr	r2, [pc, #76]	@ (8005a34 <DMA_CalcBaseAndBitshift+0x68>)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2b03      	cmp	r3, #3
 80059f8:	d909      	bls.n	8005a0e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	1d1a      	adds	r2, r3, #4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a0c:	e007      	b.n	8005a1e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	aaaaaaab 	.word	0xaaaaaaab
 8005a34:	0800d7d4 	.word	0x0800d7d4

08005a38 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d11f      	bne.n	8005a92 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d856      	bhi.n	8005b06 <DMA_CheckFifoParam+0xce>
 8005a58:	a201      	add	r2, pc, #4	@ (adr r2, 8005a60 <DMA_CheckFifoParam+0x28>)
 8005a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5e:	bf00      	nop
 8005a60:	08005a71 	.word	0x08005a71
 8005a64:	08005a83 	.word	0x08005a83
 8005a68:	08005a71 	.word	0x08005a71
 8005a6c:	08005b07 	.word	0x08005b07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d046      	beq.n	8005b0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a80:	e043      	b.n	8005b0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a86:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005a8a:	d140      	bne.n	8005b0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a90:	e03d      	b.n	8005b0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a9a:	d121      	bne.n	8005ae0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b03      	cmp	r3, #3
 8005aa0:	d837      	bhi.n	8005b12 <DMA_CheckFifoParam+0xda>
 8005aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005aa8 <DMA_CheckFifoParam+0x70>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005abf 	.word	0x08005abf
 8005ab0:	08005ab9 	.word	0x08005ab9
 8005ab4:	08005ad1 	.word	0x08005ad1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	73fb      	strb	r3, [r7, #15]
      break;
 8005abc:	e030      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d025      	beq.n	8005b16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ace:	e022      	b.n	8005b16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ad4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005ad8:	d11f      	bne.n	8005b1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005ade:	e01c      	b.n	8005b1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d903      	bls.n	8005aee <DMA_CheckFifoParam+0xb6>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b03      	cmp	r3, #3
 8005aea:	d003      	beq.n	8005af4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005aec:	e018      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
      break;
 8005af2:	e015      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005af8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00e      	beq.n	8005b1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	73fb      	strb	r3, [r7, #15]
      break;
 8005b04:	e00b      	b.n	8005b1e <DMA_CheckFifoParam+0xe6>
      break;
 8005b06:	bf00      	nop
 8005b08:	e00a      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0a:	bf00      	nop
 8005b0c:	e008      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b0e:	bf00      	nop
 8005b10:	e006      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b12:	bf00      	nop
 8005b14:	e004      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b16:	bf00      	nop
 8005b18:	e002      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;   
 8005b1a:	bf00      	nop
 8005b1c:	e000      	b.n	8005b20 <DMA_CheckFifoParam+0xe8>
      break;
 8005b1e:	bf00      	nop
    }
  } 
  
  return status; 
 8005b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop

08005b30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b089      	sub	sp, #36	@ 0x24
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005b42:	2300      	movs	r3, #0
 8005b44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005b46:	2300      	movs	r3, #0
 8005b48:	61fb      	str	r3, [r7, #28]
 8005b4a:	e16b      	b.n	8005e24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	69fb      	ldr	r3, [r7, #28]
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	697a      	ldr	r2, [r7, #20]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b60:	693a      	ldr	r2, [r7, #16]
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	f040 815a 	bne.w	8005e1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	f003 0303 	and.w	r3, r3, #3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d005      	beq.n	8005b82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d130      	bne.n	8005be4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	005b      	lsls	r3, r3, #1
 8005b8c:	2203      	movs	r2, #3
 8005b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b92:	43db      	mvns	r3, r3
 8005b94:	69ba      	ldr	r2, [r7, #24]
 8005b96:	4013      	ands	r3, r2
 8005b98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69ba      	ldr	r2, [r7, #24]
 8005bb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bb8:	2201      	movs	r2, #1
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	69ba      	ldr	r2, [r7, #24]
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	f003 0201 	and.w	r2, r3, #1
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	69ba      	ldr	r2, [r7, #24]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69ba      	ldr	r2, [r7, #24]
 8005be2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d017      	beq.n	8005c20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	2203      	movs	r2, #3
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	43db      	mvns	r3, r3
 8005c02:	69ba      	ldr	r2, [r7, #24]
 8005c04:	4013      	ands	r3, r2
 8005c06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	fa02 f303 	lsl.w	r3, r2, r3
 8005c14:	69ba      	ldr	r2, [r7, #24]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	69ba      	ldr	r2, [r7, #24]
 8005c1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f003 0303 	and.w	r3, r3, #3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d123      	bne.n	8005c74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	08da      	lsrs	r2, r3, #3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	3208      	adds	r2, #8
 8005c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	220f      	movs	r2, #15
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	691a      	ldr	r2, [r3, #16]
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c60:	69ba      	ldr	r2, [r7, #24]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	08da      	lsrs	r2, r3, #3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3208      	adds	r2, #8
 8005c6e:	69b9      	ldr	r1, [r7, #24]
 8005c70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	2203      	movs	r2, #3
 8005c80:	fa02 f303 	lsl.w	r3, r2, r3
 8005c84:	43db      	mvns	r3, r3
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f003 0203 	and.w	r2, r3, #3
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	005b      	lsls	r3, r3, #1
 8005c98:	fa02 f303 	lsl.w	r3, r2, r3
 8005c9c:	69ba      	ldr	r2, [r7, #24]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f000 80b4 	beq.w	8005e1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	60fb      	str	r3, [r7, #12]
 8005cba:	4b60      	ldr	r3, [pc, #384]	@ (8005e3c <HAL_GPIO_Init+0x30c>)
 8005cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cbe:	4a5f      	ldr	r2, [pc, #380]	@ (8005e3c <HAL_GPIO_Init+0x30c>)
 8005cc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005cc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005cc6:	4b5d      	ldr	r3, [pc, #372]	@ (8005e3c <HAL_GPIO_Init+0x30c>)
 8005cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cd2:	4a5b      	ldr	r2, [pc, #364]	@ (8005e40 <HAL_GPIO_Init+0x310>)
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	089b      	lsrs	r3, r3, #2
 8005cd8:	3302      	adds	r3, #2
 8005cda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0303 	and.w	r3, r3, #3
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	220f      	movs	r2, #15
 8005cea:	fa02 f303 	lsl.w	r3, r2, r3
 8005cee:	43db      	mvns	r3, r3
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a52      	ldr	r2, [pc, #328]	@ (8005e44 <HAL_GPIO_Init+0x314>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02b      	beq.n	8005d56 <HAL_GPIO_Init+0x226>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a51      	ldr	r2, [pc, #324]	@ (8005e48 <HAL_GPIO_Init+0x318>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d025      	beq.n	8005d52 <HAL_GPIO_Init+0x222>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a50      	ldr	r2, [pc, #320]	@ (8005e4c <HAL_GPIO_Init+0x31c>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d01f      	beq.n	8005d4e <HAL_GPIO_Init+0x21e>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a4f      	ldr	r2, [pc, #316]	@ (8005e50 <HAL_GPIO_Init+0x320>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d019      	beq.n	8005d4a <HAL_GPIO_Init+0x21a>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a4e      	ldr	r2, [pc, #312]	@ (8005e54 <HAL_GPIO_Init+0x324>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d013      	beq.n	8005d46 <HAL_GPIO_Init+0x216>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a4d      	ldr	r2, [pc, #308]	@ (8005e58 <HAL_GPIO_Init+0x328>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00d      	beq.n	8005d42 <HAL_GPIO_Init+0x212>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a4c      	ldr	r2, [pc, #304]	@ (8005e5c <HAL_GPIO_Init+0x32c>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d007      	beq.n	8005d3e <HAL_GPIO_Init+0x20e>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	4a4b      	ldr	r2, [pc, #300]	@ (8005e60 <HAL_GPIO_Init+0x330>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d101      	bne.n	8005d3a <HAL_GPIO_Init+0x20a>
 8005d36:	2307      	movs	r3, #7
 8005d38:	e00e      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d3a:	2308      	movs	r3, #8
 8005d3c:	e00c      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d3e:	2306      	movs	r3, #6
 8005d40:	e00a      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d42:	2305      	movs	r3, #5
 8005d44:	e008      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d46:	2304      	movs	r3, #4
 8005d48:	e006      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e004      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e002      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d52:	2301      	movs	r3, #1
 8005d54:	e000      	b.n	8005d58 <HAL_GPIO_Init+0x228>
 8005d56:	2300      	movs	r3, #0
 8005d58:	69fa      	ldr	r2, [r7, #28]
 8005d5a:	f002 0203 	and.w	r2, r2, #3
 8005d5e:	0092      	lsls	r2, r2, #2
 8005d60:	4093      	lsls	r3, r2
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d68:	4935      	ldr	r1, [pc, #212]	@ (8005e40 <HAL_GPIO_Init+0x310>)
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	089b      	lsrs	r3, r3, #2
 8005d6e:	3302      	adds	r3, #2
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005d76:	4b3b      	ldr	r3, [pc, #236]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	43db      	mvns	r3, r3
 8005d80:	69ba      	ldr	r2, [r7, #24]
 8005d82:	4013      	ands	r3, r2
 8005d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d003      	beq.n	8005d9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005d92:	69ba      	ldr	r2, [r7, #24]
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005d9a:	4a32      	ldr	r2, [pc, #200]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005da0:	4b30      	ldr	r3, [pc, #192]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	43db      	mvns	r3, r3
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	4013      	ands	r3, r2
 8005dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005dc4:	4a27      	ldr	r2, [pc, #156]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005dca:	4b26      	ldr	r3, [pc, #152]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	69ba      	ldr	r2, [r7, #24]
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d003      	beq.n	8005dee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005dee:	4a1d      	ldr	r2, [pc, #116]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005df4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d003      	beq.n	8005e18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005e10:	69ba      	ldr	r2, [r7, #24]
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e18:	4a12      	ldr	r2, [pc, #72]	@ (8005e64 <HAL_GPIO_Init+0x334>)
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	3301      	adds	r3, #1
 8005e22:	61fb      	str	r3, [r7, #28]
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	2b0f      	cmp	r3, #15
 8005e28:	f67f ae90 	bls.w	8005b4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	3724      	adds	r7, #36	@ 0x24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e38:	4770      	bx	lr
 8005e3a:	bf00      	nop
 8005e3c:	40023800 	.word	0x40023800
 8005e40:	40013800 	.word	0x40013800
 8005e44:	40020000 	.word	0x40020000
 8005e48:	40020400 	.word	0x40020400
 8005e4c:	40020800 	.word	0x40020800
 8005e50:	40020c00 	.word	0x40020c00
 8005e54:	40021000 	.word	0x40021000
 8005e58:	40021400 	.word	0x40021400
 8005e5c:	40021800 	.word	0x40021800
 8005e60:	40021c00 	.word	0x40021c00
 8005e64:	40013c00 	.word	0x40013c00

08005e68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
 8005e74:	4613      	mov	r3, r2
 8005e76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e78:	787b      	ldrb	r3, [r7, #1]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e7e:	887a      	ldrh	r2, [r7, #2]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005e84:	e003      	b.n	8005e8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e86:	887b      	ldrh	r3, [r7, #2]
 8005e88:	041a      	lsls	r2, r3, #16
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	619a      	str	r2, [r3, #24]
}
 8005e8e:	bf00      	nop
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ea6:	4b08      	ldr	r3, [pc, #32]	@ (8005ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ea8:	695a      	ldr	r2, [r3, #20]
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d006      	beq.n	8005ec0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eb2:	4a05      	ldr	r2, [pc, #20]	@ (8005ec8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005eb4:	88fb      	ldrh	r3, [r7, #6]
 8005eb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fb fe38 	bl	8001b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40013c00 	.word	0x40013c00

08005ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b084      	sub	sp, #16
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e12b      	b.n	8006136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d106      	bne.n	8005ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7fd fce2 	bl	80038bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2224      	movs	r2, #36	@ 0x24
 8005efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681a      	ldr	r2, [r3, #0]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005f30:	f001 f9f6 	bl	8007320 <HAL_RCC_GetPCLK1Freq>
 8005f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	4a81      	ldr	r2, [pc, #516]	@ (8006140 <HAL_I2C_Init+0x274>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d807      	bhi.n	8005f50 <HAL_I2C_Init+0x84>
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4a80      	ldr	r2, [pc, #512]	@ (8006144 <HAL_I2C_Init+0x278>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	bf94      	ite	ls
 8005f48:	2301      	movls	r3, #1
 8005f4a:	2300      	movhi	r3, #0
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	e006      	b.n	8005f5e <HAL_I2C_Init+0x92>
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	4a7d      	ldr	r2, [pc, #500]	@ (8006148 <HAL_I2C_Init+0x27c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	bf94      	ite	ls
 8005f58:	2301      	movls	r3, #1
 8005f5a:	2300      	movhi	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d001      	beq.n	8005f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e0e7      	b.n	8006136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	4a78      	ldr	r2, [pc, #480]	@ (800614c <HAL_I2C_Init+0x280>)
 8005f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6e:	0c9b      	lsrs	r3, r3, #18
 8005f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68ba      	ldr	r2, [r7, #8]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	6a1b      	ldr	r3, [r3, #32]
 8005f8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	4a6a      	ldr	r2, [pc, #424]	@ (8006140 <HAL_I2C_Init+0x274>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d802      	bhi.n	8005fa0 <HAL_I2C_Init+0xd4>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	e009      	b.n	8005fb4 <HAL_I2C_Init+0xe8>
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	4a69      	ldr	r2, [pc, #420]	@ (8006150 <HAL_I2C_Init+0x284>)
 8005fac:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb0:	099b      	lsrs	r3, r3, #6
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	6812      	ldr	r2, [r2, #0]
 8005fb8:	430b      	orrs	r3, r1
 8005fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	69db      	ldr	r3, [r3, #28]
 8005fc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005fc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	495c      	ldr	r1, [pc, #368]	@ (8006140 <HAL_I2C_Init+0x274>)
 8005fd0:	428b      	cmp	r3, r1
 8005fd2:	d819      	bhi.n	8006008 <HAL_I2C_Init+0x13c>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	1e59      	subs	r1, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8005fe2:	1c59      	adds	r1, r3, #1
 8005fe4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005fe8:	400b      	ands	r3, r1
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00a      	beq.n	8006004 <HAL_I2C_Init+0x138>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1e59      	subs	r1, r3, #1
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006002:	e051      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006004:	2304      	movs	r3, #4
 8006006:	e04f      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d111      	bne.n	8006034 <HAL_I2C_Init+0x168>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	1e58      	subs	r0, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6859      	ldr	r1, [r3, #4]
 8006018:	460b      	mov	r3, r1
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	440b      	add	r3, r1
 800601e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006022:	3301      	adds	r3, #1
 8006024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006028:	2b00      	cmp	r3, #0
 800602a:	bf0c      	ite	eq
 800602c:	2301      	moveq	r3, #1
 800602e:	2300      	movne	r3, #0
 8006030:	b2db      	uxtb	r3, r3
 8006032:	e012      	b.n	800605a <HAL_I2C_Init+0x18e>
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	1e58      	subs	r0, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6859      	ldr	r1, [r3, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	0099      	lsls	r1, r3, #2
 8006044:	440b      	add	r3, r1
 8006046:	fbb0 f3f3 	udiv	r3, r0, r3
 800604a:	3301      	adds	r3, #1
 800604c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006050:	2b00      	cmp	r3, #0
 8006052:	bf0c      	ite	eq
 8006054:	2301      	moveq	r3, #1
 8006056:	2300      	movne	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_I2C_Init+0x196>
 800605e:	2301      	movs	r3, #1
 8006060:	e022      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10e      	bne.n	8006088 <HAL_I2C_Init+0x1bc>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	1e58      	subs	r0, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6859      	ldr	r1, [r3, #4]
 8006072:	460b      	mov	r3, r1
 8006074:	005b      	lsls	r3, r3, #1
 8006076:	440b      	add	r3, r1
 8006078:	fbb0 f3f3 	udiv	r3, r0, r3
 800607c:	3301      	adds	r3, #1
 800607e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006086:	e00f      	b.n	80060a8 <HAL_I2C_Init+0x1dc>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	1e58      	subs	r0, r3, #1
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6859      	ldr	r1, [r3, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	440b      	add	r3, r1
 8006096:	0099      	lsls	r1, r3, #2
 8006098:	440b      	add	r3, r1
 800609a:	fbb0 f3f3 	udiv	r3, r0, r3
 800609e:	3301      	adds	r3, #1
 80060a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	6809      	ldr	r1, [r1, #0]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69da      	ldr	r2, [r3, #28]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80060d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6911      	ldr	r1, [r2, #16]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	68d2      	ldr	r2, [r2, #12]
 80060e2:	4311      	orrs	r1, r2
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	430b      	orrs	r3, r1
 80060ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695a      	ldr	r2, [r3, #20]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	431a      	orrs	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f042 0201 	orr.w	r2, r2, #1
 8006116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2200      	movs	r2, #0
 800611c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2220      	movs	r2, #32
 8006122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	000186a0 	.word	0x000186a0
 8006144:	001e847f 	.word	0x001e847f
 8006148:	003d08ff 	.word	0x003d08ff
 800614c:	431bde83 	.word	0x431bde83
 8006150:	10624dd3 	.word	0x10624dd3

08006154 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b08c      	sub	sp, #48	@ 0x30
 8006158:	af02      	add	r7, sp, #8
 800615a:	60f8      	str	r0, [r7, #12]
 800615c:	4608      	mov	r0, r1
 800615e:	4611      	mov	r1, r2
 8006160:	461a      	mov	r2, r3
 8006162:	4603      	mov	r3, r0
 8006164:	817b      	strh	r3, [r7, #10]
 8006166:	460b      	mov	r3, r1
 8006168:	813b      	strh	r3, [r7, #8]
 800616a:	4613      	mov	r3, r2
 800616c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800616e:	f7fe f95d 	bl	800442c <HAL_GetTick>
 8006172:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b20      	cmp	r3, #32
 800617e:	f040 8208 	bne.w	8006592 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	2319      	movs	r3, #25
 8006188:	2201      	movs	r2, #1
 800618a:	497b      	ldr	r1, [pc, #492]	@ (8006378 <HAL_I2C_Mem_Read+0x224>)
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 faef 	bl	8006770 <I2C_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006198:	2302      	movs	r3, #2
 800619a:	e1fb      	b.n	8006594 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	d101      	bne.n	80061aa <HAL_I2C_Mem_Read+0x56>
 80061a6:	2302      	movs	r3, #2
 80061a8:	e1f4      	b.n	8006594 <HAL_I2C_Mem_Read+0x440>
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d007      	beq.n	80061d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f042 0201 	orr.w	r2, r2, #1
 80061ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2222      	movs	r2, #34	@ 0x22
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2240      	movs	r2, #64	@ 0x40
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061fa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006200:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006206:	b29a      	uxth	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a5b      	ldr	r2, [pc, #364]	@ (800637c <HAL_I2C_Mem_Read+0x228>)
 8006210:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006212:	88f8      	ldrh	r0, [r7, #6]
 8006214:	893a      	ldrh	r2, [r7, #8]
 8006216:	8979      	ldrh	r1, [r7, #10]
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	9301      	str	r3, [sp, #4]
 800621c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800621e:	9300      	str	r3, [sp, #0]
 8006220:	4603      	mov	r3, r0
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f9bc 	bl	80065a0 <I2C_RequestMemoryRead>
 8006228:	4603      	mov	r3, r0
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e1b0      	b.n	8006594 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006236:	2b00      	cmp	r3, #0
 8006238:	d113      	bne.n	8006262 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800623a:	2300      	movs	r3, #0
 800623c:	623b      	str	r3, [r7, #32]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	695b      	ldr	r3, [r3, #20]
 8006244:	623b      	str	r3, [r7, #32]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	623b      	str	r3, [r7, #32]
 800624e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800625e:	601a      	str	r2, [r3, #0]
 8006260:	e184      	b.n	800656c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006266:	2b01      	cmp	r3, #1
 8006268:	d11b      	bne.n	80062a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006278:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	61fb      	str	r3, [r7, #28]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	699b      	ldr	r3, [r3, #24]
 800628c:	61fb      	str	r3, [r7, #28]
 800628e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	e164      	b.n	800656c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d11b      	bne.n	80062e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062ca:	2300      	movs	r3, #0
 80062cc:	61bb      	str	r3, [r7, #24]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	695b      	ldr	r3, [r3, #20]
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	61bb      	str	r3, [r7, #24]
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	e144      	b.n	800656c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	699b      	ldr	r3, [r3, #24]
 80062f4:	617b      	str	r3, [r7, #20]
 80062f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80062f8:	e138      	b.n	800656c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062fe:	2b03      	cmp	r3, #3
 8006300:	f200 80f1 	bhi.w	80064e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006308:	2b01      	cmp	r3, #1
 800630a:	d123      	bne.n	8006354 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800630c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800630e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 fb44 	bl	800699e <I2C_WaitOnRXNEFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e139      	b.n	8006594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	691a      	ldr	r2, [r3, #16]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800633c:	3b01      	subs	r3, #1
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006352:	e10b      	b.n	800656c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006358:	2b02      	cmp	r3, #2
 800635a:	d14e      	bne.n	80063fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006362:	2200      	movs	r2, #0
 8006364:	4906      	ldr	r1, [pc, #24]	@ (8006380 <HAL_I2C_Mem_Read+0x22c>)
 8006366:	68f8      	ldr	r0, [r7, #12]
 8006368:	f000 fa02 	bl	8006770 <I2C_WaitOnFlagUntilTimeout>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d008      	beq.n	8006384 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e10e      	b.n	8006594 <HAL_I2C_Mem_Read+0x440>
 8006376:	bf00      	nop
 8006378:	00100002 	.word	0x00100002
 800637c:	ffff0000 	.word	0xffff0000
 8006380:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006392:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b0:	3b01      	subs	r3, #1
 80063b2:	b29a      	uxth	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063bc:	b29b      	uxth	r3, r3
 80063be:	3b01      	subs	r3, #1
 80063c0:	b29a      	uxth	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	691a      	ldr	r2, [r3, #16]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d0:	b2d2      	uxtb	r2, r2
 80063d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063e2:	3b01      	subs	r3, #1
 80063e4:	b29a      	uxth	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	3b01      	subs	r3, #1
 80063f2:	b29a      	uxth	r2, r3
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063f8:	e0b8      	b.n	800656c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006400:	2200      	movs	r2, #0
 8006402:	4966      	ldr	r1, [pc, #408]	@ (800659c <HAL_I2C_Mem_Read+0x448>)
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 f9b3 	bl	8006770 <I2C_WaitOnFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006410:	2301      	movs	r3, #1
 8006412:	e0bf      	b.n	8006594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006422:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691a      	ldr	r2, [r3, #16]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800642e:	b2d2      	uxtb	r2, r2
 8006430:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644c:	b29b      	uxth	r3, r3
 800644e:	3b01      	subs	r3, #1
 8006450:	b29a      	uxth	r2, r3
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645c:	2200      	movs	r2, #0
 800645e:	494f      	ldr	r1, [pc, #316]	@ (800659c <HAL_I2C_Mem_Read+0x448>)
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f000 f985 	bl	8006770 <I2C_WaitOnFlagUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e091      	b.n	8006594 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800647e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	691a      	ldr	r2, [r3, #16]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648a:	b2d2      	uxtb	r2, r2
 800648c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006492:	1c5a      	adds	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	3b01      	subs	r3, #1
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	691a      	ldr	r2, [r3, #16]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	b2d2      	uxtb	r2, r2
 80064be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	1c5a      	adds	r2, r3, #1
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064ce:	3b01      	subs	r3, #1
 80064d0:	b29a      	uxth	r2, r3
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064da:	b29b      	uxth	r3, r3
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80064e4:	e042      	b.n	800656c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80064e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f000 fa57 	bl	800699e <I2C_WaitOnRXNEFlagUntilTimeout>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d001      	beq.n	80064fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e04c      	b.n	8006594 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691a      	ldr	r2, [r3, #16]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006504:	b2d2      	uxtb	r2, r2
 8006506:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006516:	3b01      	subs	r3, #1
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006522:	b29b      	uxth	r3, r3
 8006524:	3b01      	subs	r3, #1
 8006526:	b29a      	uxth	r2, r3
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b04      	cmp	r3, #4
 8006538:	d118      	bne.n	800656c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006544:	b2d2      	uxtb	r2, r2
 8006546:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006556:	3b01      	subs	r3, #1
 8006558:	b29a      	uxth	r2, r3
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006562:	b29b      	uxth	r3, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	b29a      	uxth	r2, r3
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006570:	2b00      	cmp	r3, #0
 8006572:	f47f aec2 	bne.w	80062fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e000      	b.n	8006594 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006592:	2302      	movs	r3, #2
  }
}
 8006594:	4618      	mov	r0, r3
 8006596:	3728      	adds	r7, #40	@ 0x28
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	00010004 	.word	0x00010004

080065a0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b088      	sub	sp, #32
 80065a4:	af02      	add	r7, sp, #8
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	4608      	mov	r0, r1
 80065aa:	4611      	mov	r1, r2
 80065ac:	461a      	mov	r2, r3
 80065ae:	4603      	mov	r3, r0
 80065b0:	817b      	strh	r3, [r7, #10]
 80065b2:	460b      	mov	r3, r1
 80065b4:	813b      	strh	r3, [r7, #8]
 80065b6:	4613      	mov	r3, r2
 80065b8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065c8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	9300      	str	r3, [sp, #0]
 80065de:	6a3b      	ldr	r3, [r7, #32]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f8c2 	bl	8006770 <I2C_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006600:	d103      	bne.n	800660a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006608:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e0aa      	b.n	8006764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800660e:	897b      	ldrh	r3, [r7, #10]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800661c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800661e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006620:	6a3a      	ldr	r2, [r7, #32]
 8006622:	4952      	ldr	r1, [pc, #328]	@ (800676c <I2C_RequestMemoryRead+0x1cc>)
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 f8fa 	bl	800681e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e097      	b.n	8006764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006634:	2300      	movs	r3, #0
 8006636:	617b      	str	r3, [r7, #20]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695b      	ldr	r3, [r3, #20]
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	617b      	str	r3, [r7, #20]
 8006648:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800664a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800664c:	6a39      	ldr	r1, [r7, #32]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f964 	bl	800691c <I2C_WaitOnTXEFlagUntilTimeout>
 8006654:	4603      	mov	r3, r0
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00d      	beq.n	8006676 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800665e:	2b04      	cmp	r3, #4
 8006660:	d107      	bne.n	8006672 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006670:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e076      	b.n	8006764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006676:	88fb      	ldrh	r3, [r7, #6]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d105      	bne.n	8006688 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800667c:	893b      	ldrh	r3, [r7, #8]
 800667e:	b2da      	uxtb	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	611a      	str	r2, [r3, #16]
 8006686:	e021      	b.n	80066cc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006688:	893b      	ldrh	r3, [r7, #8]
 800668a:	0a1b      	lsrs	r3, r3, #8
 800668c:	b29b      	uxth	r3, r3
 800668e:	b2da      	uxtb	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006698:	6a39      	ldr	r1, [r7, #32]
 800669a:	68f8      	ldr	r0, [r7, #12]
 800669c:	f000 f93e 	bl	800691c <I2C_WaitOnTXEFlagUntilTimeout>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00d      	beq.n	80066c2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	2b04      	cmp	r3, #4
 80066ac:	d107      	bne.n	80066be <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681a      	ldr	r2, [r3, #0]
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066bc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	e050      	b.n	8006764 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066c2:	893b      	ldrh	r3, [r7, #8]
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ce:	6a39      	ldr	r1, [r7, #32]
 80066d0:	68f8      	ldr	r0, [r7, #12]
 80066d2:	f000 f923 	bl	800691c <I2C_WaitOnTXEFlagUntilTimeout>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00d      	beq.n	80066f8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e0:	2b04      	cmp	r3, #4
 80066e2:	d107      	bne.n	80066f4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066f2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e035      	b.n	8006764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006706:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	6a3b      	ldr	r3, [r7, #32]
 800670e:	2200      	movs	r2, #0
 8006710:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006714:	68f8      	ldr	r0, [r7, #12]
 8006716:	f000 f82b 	bl	8006770 <I2C_WaitOnFlagUntilTimeout>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00d      	beq.n	800673c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800672a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800672e:	d103      	bne.n	8006738 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006736:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006738:	2303      	movs	r3, #3
 800673a:	e013      	b.n	8006764 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800673c:	897b      	ldrh	r3, [r7, #10]
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f043 0301 	orr.w	r3, r3, #1
 8006744:	b2da      	uxtb	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	6a3a      	ldr	r2, [r7, #32]
 8006750:	4906      	ldr	r1, [pc, #24]	@ (800676c <I2C_RequestMemoryRead+0x1cc>)
 8006752:	68f8      	ldr	r0, [r7, #12]
 8006754:	f000 f863 	bl	800681e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e000      	b.n	8006764 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	00010002 	.word	0x00010002

08006770 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006780:	e025      	b.n	80067ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006788:	d021      	beq.n	80067ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800678a:	f7fd fe4f 	bl	800442c <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	683a      	ldr	r2, [r7, #0]
 8006796:	429a      	cmp	r2, r3
 8006798:	d302      	bcc.n	80067a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d116      	bne.n	80067ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ba:	f043 0220 	orr.w	r2, r3, #32
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e023      	b.n	8006816 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	0c1b      	lsrs	r3, r3, #16
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10d      	bne.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	43da      	mvns	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	4013      	ands	r3, r2
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	bf0c      	ite	eq
 80067ea:	2301      	moveq	r3, #1
 80067ec:	2300      	movne	r3, #0
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	461a      	mov	r2, r3
 80067f2:	e00c      	b.n	800680e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	43da      	mvns	r2, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4013      	ands	r3, r2
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	bf0c      	ite	eq
 8006806:	2301      	moveq	r3, #1
 8006808:	2300      	movne	r3, #0
 800680a:	b2db      	uxtb	r3, r3
 800680c:	461a      	mov	r2, r3
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	429a      	cmp	r2, r3
 8006812:	d0b6      	beq.n	8006782 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b084      	sub	sp, #16
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	607a      	str	r2, [r7, #4]
 800682a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800682c:	e051      	b.n	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006838:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800683c:	d123      	bne.n	8006886 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800684c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006856:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	2220      	movs	r2, #32
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006872:	f043 0204 	orr.w	r2, r3, #4
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e046      	b.n	8006914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800688c:	d021      	beq.n	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800688e:	f7fd fdcd 	bl	800442c <HAL_GetTick>
 8006892:	4602      	mov	r2, r0
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	429a      	cmp	r2, r3
 800689c:	d302      	bcc.n	80068a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d116      	bne.n	80068d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2220      	movs	r2, #32
 80068ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068be:	f043 0220 	orr.w	r2, r3, #32
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e020      	b.n	8006914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	0c1b      	lsrs	r3, r3, #16
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d10c      	bne.n	80068f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	43da      	mvns	r2, r3
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4013      	ands	r3, r2
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	bf14      	ite	ne
 80068ee:	2301      	movne	r3, #1
 80068f0:	2300      	moveq	r3, #0
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	e00b      	b.n	800690e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	699b      	ldr	r3, [r3, #24]
 80068fc:	43da      	mvns	r2, r3
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	4013      	ands	r3, r2
 8006902:	b29b      	uxth	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	bf14      	ite	ne
 8006908:	2301      	movne	r3, #1
 800690a:	2300      	moveq	r3, #0
 800690c:	b2db      	uxtb	r3, r3
 800690e:	2b00      	cmp	r3, #0
 8006910:	d18d      	bne.n	800682e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006928:	e02d      	b.n	8006986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f000 f88d 	bl	8006a4a <I2C_IsAcknowledgeFailed>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d001      	beq.n	800693a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e02d      	b.n	8006996 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006940:	d021      	beq.n	8006986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006942:	f7fd fd73 	bl	800442c <HAL_GetTick>
 8006946:	4602      	mov	r2, r0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	d302      	bcc.n	8006958 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d116      	bne.n	8006986 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006972:	f043 0220 	orr.w	r2, r3, #32
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2200      	movs	r2, #0
 800697e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e007      	b.n	8006996 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	695b      	ldr	r3, [r3, #20]
 800698c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006990:	2b80      	cmp	r3, #128	@ 0x80
 8006992:	d1ca      	bne.n	800692a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b084      	sub	sp, #16
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80069aa:	e042      	b.n	8006a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	f003 0310 	and.w	r3, r3, #16
 80069b6:	2b10      	cmp	r3, #16
 80069b8:	d119      	bne.n	80069ee <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f06f 0210 	mvn.w	r2, #16
 80069c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2200      	movs	r2, #0
 80069c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e029      	b.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ee:	f7fd fd1d 	bl	800442c <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	68ba      	ldr	r2, [r7, #8]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d302      	bcc.n	8006a04 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d116      	bne.n	8006a32 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1e:	f043 0220 	orr.w	r2, r3, #32
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e007      	b.n	8006a42 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695b      	ldr	r3, [r3, #20]
 8006a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3c:	2b40      	cmp	r3, #64	@ 0x40
 8006a3e:	d1b5      	bne.n	80069ac <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	695b      	ldr	r3, [r3, #20]
 8006a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a60:	d11b      	bne.n	8006a9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006a6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a86:	f043 0204 	orr.w	r2, r3, #4
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006a96:	2301      	movs	r3, #1
 8006a98:	e000      	b.n	8006a9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b086      	sub	sp, #24
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	e267      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0301 	and.w	r3, r3, #1
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d075      	beq.n	8006bb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ac6:	4b88      	ldr	r3, [pc, #544]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d00c      	beq.n	8006aec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ad2:	4b85      	ldr	r3, [pc, #532]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	689b      	ldr	r3, [r3, #8]
 8006ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ada:	2b08      	cmp	r3, #8
 8006adc:	d112      	bne.n	8006b04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ade:	4b82      	ldr	r3, [pc, #520]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ae6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006aea:	d10b      	bne.n	8006b04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aec:	4b7e      	ldr	r3, [pc, #504]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d05b      	beq.n	8006bb0 <HAL_RCC_OscConfig+0x108>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d157      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e242      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b0c:	d106      	bne.n	8006b1c <HAL_RCC_OscConfig+0x74>
 8006b0e:	4b76      	ldr	r3, [pc, #472]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a75      	ldr	r2, [pc, #468]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b18:	6013      	str	r3, [r2, #0]
 8006b1a:	e01d      	b.n	8006b58 <HAL_RCC_OscConfig+0xb0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b24:	d10c      	bne.n	8006b40 <HAL_RCC_OscConfig+0x98>
 8006b26:	4b70      	ldr	r3, [pc, #448]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a6f      	ldr	r2, [pc, #444]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b30:	6013      	str	r3, [r2, #0]
 8006b32:	4b6d      	ldr	r3, [pc, #436]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a6c      	ldr	r2, [pc, #432]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b3c:	6013      	str	r3, [r2, #0]
 8006b3e:	e00b      	b.n	8006b58 <HAL_RCC_OscConfig+0xb0>
 8006b40:	4b69      	ldr	r3, [pc, #420]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a68      	ldr	r2, [pc, #416]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b46:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	4b66      	ldr	r3, [pc, #408]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a65      	ldr	r2, [pc, #404]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b52:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d013      	beq.n	8006b88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b60:	f7fd fc64 	bl	800442c <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b68:	f7fd fc60 	bl	800442c <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b64      	cmp	r3, #100	@ 0x64
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e207      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b7a:	4b5b      	ldr	r3, [pc, #364]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d0f0      	beq.n	8006b68 <HAL_RCC_OscConfig+0xc0>
 8006b86:	e014      	b.n	8006bb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b88:	f7fd fc50 	bl	800442c <HAL_GetTick>
 8006b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b8e:	e008      	b.n	8006ba2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b90:	f7fd fc4c 	bl	800442c <HAL_GetTick>
 8006b94:	4602      	mov	r2, r0
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	1ad3      	subs	r3, r2, r3
 8006b9a:	2b64      	cmp	r3, #100	@ 0x64
 8006b9c:	d901      	bls.n	8006ba2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e1f3      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006ba2:	4b51      	ldr	r3, [pc, #324]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1f0      	bne.n	8006b90 <HAL_RCC_OscConfig+0xe8>
 8006bae:	e000      	b.n	8006bb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d063      	beq.n	8006c86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00b      	beq.n	8006be2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bca:	4b47      	ldr	r3, [pc, #284]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d11c      	bne.n	8006c10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bd6:	4b44      	ldr	r3, [pc, #272]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d116      	bne.n	8006c10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006be2:	4b41      	ldr	r3, [pc, #260]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d005      	beq.n	8006bfa <HAL_RCC_OscConfig+0x152>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d001      	beq.n	8006bfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e1c7      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfa:	4b3b      	ldr	r3, [pc, #236]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	00db      	lsls	r3, r3, #3
 8006c08:	4937      	ldr	r1, [pc, #220]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c0e:	e03a      	b.n	8006c86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d020      	beq.n	8006c5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c18:	4b34      	ldr	r3, [pc, #208]	@ (8006cec <HAL_RCC_OscConfig+0x244>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1e:	f7fd fc05 	bl	800442c <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c26:	f7fd fc01 	bl	800442c <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e1a8      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c38:	4b2b      	ldr	r3, [pc, #172]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c44:	4b28      	ldr	r3, [pc, #160]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	00db      	lsls	r3, r3, #3
 8006c52:	4925      	ldr	r1, [pc, #148]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	600b      	str	r3, [r1, #0]
 8006c58:	e015      	b.n	8006c86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c5a:	4b24      	ldr	r3, [pc, #144]	@ (8006cec <HAL_RCC_OscConfig+0x244>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c60:	f7fd fbe4 	bl	800442c <HAL_GetTick>
 8006c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c66:	e008      	b.n	8006c7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c68:	f7fd fbe0 	bl	800442c <HAL_GetTick>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	1ad3      	subs	r3, r2, r3
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d901      	bls.n	8006c7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e187      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1f0      	bne.n	8006c68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0308 	and.w	r3, r3, #8
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d036      	beq.n	8006d00 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	695b      	ldr	r3, [r3, #20]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d016      	beq.n	8006cc8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c9a:	4b15      	ldr	r3, [pc, #84]	@ (8006cf0 <HAL_RCC_OscConfig+0x248>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca0:	f7fd fbc4 	bl	800442c <HAL_GetTick>
 8006ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca6:	e008      	b.n	8006cba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ca8:	f7fd fbc0 	bl	800442c <HAL_GetTick>
 8006cac:	4602      	mov	r2, r0
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	1ad3      	subs	r3, r2, r3
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e167      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <HAL_RCC_OscConfig+0x240>)
 8006cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d0f0      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x200>
 8006cc6:	e01b      	b.n	8006d00 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cc8:	4b09      	ldr	r3, [pc, #36]	@ (8006cf0 <HAL_RCC_OscConfig+0x248>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006cce:	f7fd fbad 	bl	800442c <HAL_GetTick>
 8006cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cd4:	e00e      	b.n	8006cf4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006cd6:	f7fd fba9 	bl	800442c <HAL_GetTick>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d907      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ce4:	2303      	movs	r3, #3
 8006ce6:	e150      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	42470000 	.word	0x42470000
 8006cf0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cf4:	4b88      	ldr	r3, [pc, #544]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006cf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1ea      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0304 	and.w	r3, r3, #4
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f000 8097 	beq.w	8006e3c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d12:	4b81      	ldr	r3, [pc, #516]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10f      	bne.n	8006d3e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	4b7d      	ldr	r3, [pc, #500]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d26:	4a7c      	ldr	r2, [pc, #496]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d3e:	4b77      	ldr	r3, [pc, #476]	@ (8006f1c <HAL_RCC_OscConfig+0x474>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d118      	bne.n	8006d7c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d4a:	4b74      	ldr	r3, [pc, #464]	@ (8006f1c <HAL_RCC_OscConfig+0x474>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a73      	ldr	r2, [pc, #460]	@ (8006f1c <HAL_RCC_OscConfig+0x474>)
 8006d50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d56:	f7fd fb69 	bl	800442c <HAL_GetTick>
 8006d5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d5c:	e008      	b.n	8006d70 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d5e:	f7fd fb65 	bl	800442c <HAL_GetTick>
 8006d62:	4602      	mov	r2, r0
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d901      	bls.n	8006d70 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e10c      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d70:	4b6a      	ldr	r3, [pc, #424]	@ (8006f1c <HAL_RCC_OscConfig+0x474>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0f0      	beq.n	8006d5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	689b      	ldr	r3, [r3, #8]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d106      	bne.n	8006d92 <HAL_RCC_OscConfig+0x2ea>
 8006d84:	4b64      	ldr	r3, [pc, #400]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d88:	4a63      	ldr	r2, [pc, #396]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d90:	e01c      	b.n	8006dcc <HAL_RCC_OscConfig+0x324>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	d10c      	bne.n	8006db4 <HAL_RCC_OscConfig+0x30c>
 8006d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d9e:	4a5e      	ldr	r2, [pc, #376]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006da0:	f043 0304 	orr.w	r3, r3, #4
 8006da4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006da6:	4b5c      	ldr	r3, [pc, #368]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006daa:	4a5b      	ldr	r2, [pc, #364]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006dac:	f043 0301 	orr.w	r3, r3, #1
 8006db0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006db2:	e00b      	b.n	8006dcc <HAL_RCC_OscConfig+0x324>
 8006db4:	4b58      	ldr	r3, [pc, #352]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db8:	4a57      	ldr	r2, [pc, #348]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006dba:	f023 0301 	bic.w	r3, r3, #1
 8006dbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dc0:	4b55      	ldr	r3, [pc, #340]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dc4:	4a54      	ldr	r2, [pc, #336]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006dc6:	f023 0304 	bic.w	r3, r3, #4
 8006dca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d015      	beq.n	8006e00 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd4:	f7fd fb2a 	bl	800442c <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dda:	e00a      	b.n	8006df2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ddc:	f7fd fb26 	bl	800442c <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e0cb      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df2:	4b49      	ldr	r3, [pc, #292]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0ee      	beq.n	8006ddc <HAL_RCC_OscConfig+0x334>
 8006dfe:	e014      	b.n	8006e2a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e00:	f7fd fb14 	bl	800442c <HAL_GetTick>
 8006e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e06:	e00a      	b.n	8006e1e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006e08:	f7fd fb10 	bl	800442c <HAL_GetTick>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	1ad3      	subs	r3, r2, r3
 8006e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d901      	bls.n	8006e1e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e0b5      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1ee      	bne.n	8006e08 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d105      	bne.n	8006e3c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e30:	4b39      	ldr	r3, [pc, #228]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e34:	4a38      	ldr	r2, [pc, #224]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e3a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	f000 80a1 	beq.w	8006f88 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e46:	4b34      	ldr	r3, [pc, #208]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	f003 030c 	and.w	r3, r3, #12
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d05c      	beq.n	8006f0c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d141      	bne.n	8006ede <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e5a:	4b31      	ldr	r3, [pc, #196]	@ (8006f20 <HAL_RCC_OscConfig+0x478>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e60:	f7fd fae4 	bl	800442c <HAL_GetTick>
 8006e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e66:	e008      	b.n	8006e7a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e68:	f7fd fae0 	bl	800442c <HAL_GetTick>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	1ad3      	subs	r3, r2, r3
 8006e72:	2b02      	cmp	r3, #2
 8006e74:	d901      	bls.n	8006e7a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e76:	2303      	movs	r3, #3
 8006e78:	e087      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7a:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f0      	bne.n	8006e68 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	69da      	ldr	r2, [r3, #28]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a1b      	ldr	r3, [r3, #32]
 8006e8e:	431a      	orrs	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e94:	019b      	lsls	r3, r3, #6
 8006e96:	431a      	orrs	r2, r3
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9c:	085b      	lsrs	r3, r3, #1
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	041b      	lsls	r3, r3, #16
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea8:	061b      	lsls	r3, r3, #24
 8006eaa:	491b      	ldr	r1, [pc, #108]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006eac:	4313      	orrs	r3, r2
 8006eae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8006f20 <HAL_RCC_OscConfig+0x478>)
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006eb6:	f7fd fab9 	bl	800442c <HAL_GetTick>
 8006eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ebc:	e008      	b.n	8006ed0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ebe:	f7fd fab5 	bl	800442c <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e05c      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ed0:	4b11      	ldr	r3, [pc, #68]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d0f0      	beq.n	8006ebe <HAL_RCC_OscConfig+0x416>
 8006edc:	e054      	b.n	8006f88 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ede:	4b10      	ldr	r3, [pc, #64]	@ (8006f20 <HAL_RCC_OscConfig+0x478>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee4:	f7fd faa2 	bl	800442c <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006eec:	f7fd fa9e 	bl	800442c <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e045      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efe:	4b06      	ldr	r3, [pc, #24]	@ (8006f18 <HAL_RCC_OscConfig+0x470>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <HAL_RCC_OscConfig+0x444>
 8006f0a:	e03d      	b.n	8006f88 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d107      	bne.n	8006f24 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f14:	2301      	movs	r3, #1
 8006f16:	e038      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
 8006f18:	40023800 	.word	0x40023800
 8006f1c:	40007000 	.word	0x40007000
 8006f20:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f24:	4b1b      	ldr	r3, [pc, #108]	@ (8006f94 <HAL_RCC_OscConfig+0x4ec>)
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	2b01      	cmp	r3, #1
 8006f30:	d028      	beq.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d121      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d11a      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f54:	4013      	ands	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f5a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d111      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6a:	085b      	lsrs	r3, r3, #1
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d107      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f7e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d001      	beq.n	8006f88 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f84:	2301      	movs	r3, #1
 8006f86:	e000      	b.n	8006f8a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3718      	adds	r7, #24
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	40023800 	.word	0x40023800

08006f98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d101      	bne.n	8006fac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0cc      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006fac:	4b68      	ldr	r3, [pc, #416]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0307 	and.w	r3, r3, #7
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d90c      	bls.n	8006fd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fba:	4b65      	ldr	r3, [pc, #404]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 8006fbc:	683a      	ldr	r2, [r7, #0]
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fc2:	4b63      	ldr	r3, [pc, #396]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f003 0307 	and.w	r3, r3, #7
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	429a      	cmp	r2, r3
 8006fce:	d001      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e0b8      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d020      	beq.n	8007022 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 0304 	and.w	r3, r3, #4
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fec:	4b59      	ldr	r3, [pc, #356]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	4a58      	ldr	r2, [pc, #352]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8006ff2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006ff6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007004:	4b53      	ldr	r3, [pc, #332]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	4a52      	ldr	r2, [pc, #328]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800700a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800700e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007010:	4b50      	ldr	r3, [pc, #320]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	494d      	ldr	r1, [pc, #308]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0301 	and.w	r3, r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	d044      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d107      	bne.n	8007046 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007036:	4b47      	ldr	r3, [pc, #284]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d119      	bne.n	8007076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e07f      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	2b02      	cmp	r3, #2
 800704c:	d003      	beq.n	8007056 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007052:	2b03      	cmp	r3, #3
 8007054:	d107      	bne.n	8007066 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007056:	4b3f      	ldr	r3, [pc, #252]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d109      	bne.n	8007076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e06f      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007066:	4b3b      	ldr	r3, [pc, #236]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e067      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007076:	4b37      	ldr	r3, [pc, #220]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f023 0203 	bic.w	r2, r3, #3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	4934      	ldr	r1, [pc, #208]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007084:	4313      	orrs	r3, r2
 8007086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007088:	f7fd f9d0 	bl	800442c <HAL_GetTick>
 800708c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800708e:	e00a      	b.n	80070a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007090:	f7fd f9cc 	bl	800442c <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800709e:	4293      	cmp	r3, r2
 80070a0:	d901      	bls.n	80070a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80070a2:	2303      	movs	r3, #3
 80070a4:	e04f      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070a6:	4b2b      	ldr	r3, [pc, #172]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f003 020c 	and.w	r2, r3, #12
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d1eb      	bne.n	8007090 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80070b8:	4b25      	ldr	r3, [pc, #148]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d20c      	bcs.n	80070e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070c6:	4b22      	ldr	r3, [pc, #136]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 80070c8:	683a      	ldr	r2, [r7, #0]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ce:	4b20      	ldr	r3, [pc, #128]	@ (8007150 <HAL_RCC_ClockConfig+0x1b8>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d001      	beq.n	80070e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e032      	b.n	8007146 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d008      	beq.n	80070fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070ec:	4b19      	ldr	r3, [pc, #100]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	4916      	ldr	r1, [pc, #88]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f003 0308 	and.w	r3, r3, #8
 8007106:	2b00      	cmp	r3, #0
 8007108:	d009      	beq.n	800711e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800710a:	4b12      	ldr	r3, [pc, #72]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	00db      	lsls	r3, r3, #3
 8007118:	490e      	ldr	r1, [pc, #56]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 800711a:	4313      	orrs	r3, r2
 800711c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800711e:	f000 f82d 	bl	800717c <HAL_RCC_GetSysClockFreq>
 8007122:	4602      	mov	r2, r0
 8007124:	4b0b      	ldr	r3, [pc, #44]	@ (8007154 <HAL_RCC_ClockConfig+0x1bc>)
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	091b      	lsrs	r3, r3, #4
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	490a      	ldr	r1, [pc, #40]	@ (8007158 <HAL_RCC_ClockConfig+0x1c0>)
 8007130:	5ccb      	ldrb	r3, [r1, r3]
 8007132:	fa22 f303 	lsr.w	r3, r2, r3
 8007136:	4a09      	ldr	r2, [pc, #36]	@ (800715c <HAL_RCC_ClockConfig+0x1c4>)
 8007138:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800713a:	4b09      	ldr	r3, [pc, #36]	@ (8007160 <HAL_RCC_ClockConfig+0x1c8>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f7fd f930 	bl	80043a4 <HAL_InitTick>

  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40023c00 	.word	0x40023c00
 8007154:	40023800 	.word	0x40023800
 8007158:	0800d7bc 	.word	0x0800d7bc
 800715c:	2000001c 	.word	0x2000001c
 8007160:	20000020 	.word	0x20000020

08007164 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007164:	b480      	push	{r7}
 8007166:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007168:	4b03      	ldr	r3, [pc, #12]	@ (8007178 <HAL_RCC_EnableCSS+0x14>)
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]
}
 800716e:	bf00      	nop
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	4247004c 	.word	0x4247004c

0800717c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800717c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007180:	b090      	sub	sp, #64	@ 0x40
 8007182:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007184:	2300      	movs	r3, #0
 8007186:	637b      	str	r3, [r7, #52]	@ 0x34
 8007188:	2300      	movs	r3, #0
 800718a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800718c:	2300      	movs	r3, #0
 800718e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007190:	2300      	movs	r3, #0
 8007192:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007194:	4b59      	ldr	r3, [pc, #356]	@ (80072fc <HAL_RCC_GetSysClockFreq+0x180>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 030c 	and.w	r3, r3, #12
 800719c:	2b08      	cmp	r3, #8
 800719e:	d00d      	beq.n	80071bc <HAL_RCC_GetSysClockFreq+0x40>
 80071a0:	2b08      	cmp	r3, #8
 80071a2:	f200 80a1 	bhi.w	80072e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_RCC_GetSysClockFreq+0x34>
 80071aa:	2b04      	cmp	r3, #4
 80071ac:	d003      	beq.n	80071b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80071ae:	e09b      	b.n	80072e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071b0:	4b53      	ldr	r3, [pc, #332]	@ (8007300 <HAL_RCC_GetSysClockFreq+0x184>)
 80071b2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80071b4:	e09b      	b.n	80072ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071b6:	4b53      	ldr	r3, [pc, #332]	@ (8007304 <HAL_RCC_GetSysClockFreq+0x188>)
 80071b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80071ba:	e098      	b.n	80072ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071bc:	4b4f      	ldr	r3, [pc, #316]	@ (80072fc <HAL_RCC_GetSysClockFreq+0x180>)
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80071c6:	4b4d      	ldr	r3, [pc, #308]	@ (80072fc <HAL_RCC_GetSysClockFreq+0x180>)
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d028      	beq.n	8007224 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071d2:	4b4a      	ldr	r3, [pc, #296]	@ (80072fc <HAL_RCC_GetSysClockFreq+0x180>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	099b      	lsrs	r3, r3, #6
 80071d8:	2200      	movs	r2, #0
 80071da:	623b      	str	r3, [r7, #32]
 80071dc:	627a      	str	r2, [r7, #36]	@ 0x24
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071e4:	2100      	movs	r1, #0
 80071e6:	4b47      	ldr	r3, [pc, #284]	@ (8007304 <HAL_RCC_GetSysClockFreq+0x188>)
 80071e8:	fb03 f201 	mul.w	r2, r3, r1
 80071ec:	2300      	movs	r3, #0
 80071ee:	fb00 f303 	mul.w	r3, r0, r3
 80071f2:	4413      	add	r3, r2
 80071f4:	4a43      	ldr	r2, [pc, #268]	@ (8007304 <HAL_RCC_GetSysClockFreq+0x188>)
 80071f6:	fba0 1202 	umull	r1, r2, r0, r2
 80071fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071fc:	460a      	mov	r2, r1
 80071fe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007202:	4413      	add	r3, r2
 8007204:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007208:	2200      	movs	r2, #0
 800720a:	61bb      	str	r3, [r7, #24]
 800720c:	61fa      	str	r2, [r7, #28]
 800720e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007212:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007216:	f7f9 f833 	bl	8000280 <__aeabi_uldivmod>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4613      	mov	r3, r2
 8007220:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007222:	e053      	b.n	80072cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007224:	4b35      	ldr	r3, [pc, #212]	@ (80072fc <HAL_RCC_GetSysClockFreq+0x180>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	099b      	lsrs	r3, r3, #6
 800722a:	2200      	movs	r2, #0
 800722c:	613b      	str	r3, [r7, #16]
 800722e:	617a      	str	r2, [r7, #20]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007236:	f04f 0b00 	mov.w	fp, #0
 800723a:	4652      	mov	r2, sl
 800723c:	465b      	mov	r3, fp
 800723e:	f04f 0000 	mov.w	r0, #0
 8007242:	f04f 0100 	mov.w	r1, #0
 8007246:	0159      	lsls	r1, r3, #5
 8007248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800724c:	0150      	lsls	r0, r2, #5
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	ebb2 080a 	subs.w	r8, r2, sl
 8007256:	eb63 090b 	sbc.w	r9, r3, fp
 800725a:	f04f 0200 	mov.w	r2, #0
 800725e:	f04f 0300 	mov.w	r3, #0
 8007262:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007266:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800726a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800726e:	ebb2 0408 	subs.w	r4, r2, r8
 8007272:	eb63 0509 	sbc.w	r5, r3, r9
 8007276:	f04f 0200 	mov.w	r2, #0
 800727a:	f04f 0300 	mov.w	r3, #0
 800727e:	00eb      	lsls	r3, r5, #3
 8007280:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007284:	00e2      	lsls	r2, r4, #3
 8007286:	4614      	mov	r4, r2
 8007288:	461d      	mov	r5, r3
 800728a:	eb14 030a 	adds.w	r3, r4, sl
 800728e:	603b      	str	r3, [r7, #0]
 8007290:	eb45 030b 	adc.w	r3, r5, fp
 8007294:	607b      	str	r3, [r7, #4]
 8007296:	f04f 0200 	mov.w	r2, #0
 800729a:	f04f 0300 	mov.w	r3, #0
 800729e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072a2:	4629      	mov	r1, r5
 80072a4:	028b      	lsls	r3, r1, #10
 80072a6:	4621      	mov	r1, r4
 80072a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072ac:	4621      	mov	r1, r4
 80072ae:	028a      	lsls	r2, r1, #10
 80072b0:	4610      	mov	r0, r2
 80072b2:	4619      	mov	r1, r3
 80072b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072b6:	2200      	movs	r2, #0
 80072b8:	60bb      	str	r3, [r7, #8]
 80072ba:	60fa      	str	r2, [r7, #12]
 80072bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072c0:	f7f8 ffde 	bl	8000280 <__aeabi_uldivmod>
 80072c4:	4602      	mov	r2, r0
 80072c6:	460b      	mov	r3, r1
 80072c8:	4613      	mov	r3, r2
 80072ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80072cc:	4b0b      	ldr	r3, [pc, #44]	@ (80072fc <HAL_RCC_GetSysClockFreq+0x180>)
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	0c1b      	lsrs	r3, r3, #16
 80072d2:	f003 0303 	and.w	r3, r3, #3
 80072d6:	3301      	adds	r3, #1
 80072d8:	005b      	lsls	r3, r3, #1
 80072da:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80072dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80072de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072e6:	e002      	b.n	80072ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072e8:	4b05      	ldr	r3, [pc, #20]	@ (8007300 <HAL_RCC_GetSysClockFreq+0x184>)
 80072ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3740      	adds	r7, #64	@ 0x40
 80072f4:	46bd      	mov	sp, r7
 80072f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072fa:	bf00      	nop
 80072fc:	40023800 	.word	0x40023800
 8007300:	00f42400 	.word	0x00f42400
 8007304:	00b71b00 	.word	0x00b71b00

08007308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800730c:	4b03      	ldr	r3, [pc, #12]	@ (800731c <HAL_RCC_GetHCLKFreq+0x14>)
 800730e:	681b      	ldr	r3, [r3, #0]
}
 8007310:	4618      	mov	r0, r3
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	2000001c 	.word	0x2000001c

08007320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007324:	f7ff fff0 	bl	8007308 <HAL_RCC_GetHCLKFreq>
 8007328:	4602      	mov	r2, r0
 800732a:	4b05      	ldr	r3, [pc, #20]	@ (8007340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	0a9b      	lsrs	r3, r3, #10
 8007330:	f003 0307 	and.w	r3, r3, #7
 8007334:	4903      	ldr	r1, [pc, #12]	@ (8007344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007336:	5ccb      	ldrb	r3, [r1, r3]
 8007338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800733c:	4618      	mov	r0, r3
 800733e:	bd80      	pop	{r7, pc}
 8007340:	40023800 	.word	0x40023800
 8007344:	0800d7cc 	.word	0x0800d7cc

08007348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800734c:	f7ff ffdc 	bl	8007308 <HAL_RCC_GetHCLKFreq>
 8007350:	4602      	mov	r2, r0
 8007352:	4b05      	ldr	r3, [pc, #20]	@ (8007368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	0b5b      	lsrs	r3, r3, #13
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	4903      	ldr	r1, [pc, #12]	@ (800736c <HAL_RCC_GetPCLK2Freq+0x24>)
 800735e:	5ccb      	ldrb	r3, [r1, r3]
 8007360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007364:	4618      	mov	r0, r3
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40023800 	.word	0x40023800
 800736c:	0800d7cc 	.word	0x0800d7cc

08007370 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007374:	4b06      	ldr	r3, [pc, #24]	@ (8007390 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800737c:	2b80      	cmp	r3, #128	@ 0x80
 800737e:	d104      	bne.n	800738a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007380:	f000 f80a 	bl	8007398 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007384:	4b03      	ldr	r3, [pc, #12]	@ (8007394 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007386:	2280      	movs	r2, #128	@ 0x80
 8007388:	701a      	strb	r2, [r3, #0]
  }
}
 800738a:	bf00      	nop
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	40023800 	.word	0x40023800
 8007394:	4002380e 	.word	0x4002380e

08007398 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007398:	b480      	push	{r7}
 800739a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b082      	sub	sp, #8
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d101      	bne.n	80073b8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e07b      	b.n	80074b0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d108      	bne.n	80073d2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80073c8:	d009      	beq.n	80073de <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	61da      	str	r2, [r3, #28]
 80073d0:	e005      	b.n	80073de <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7fc fac9 	bl	8003990 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2202      	movs	r2, #2
 8007402:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007414:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	689b      	ldr	r3, [r3, #8]
 8007422:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007426:	431a      	orrs	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68db      	ldr	r3, [r3, #12]
 800742c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007430:	431a      	orrs	r2, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f003 0302 	and.w	r3, r3, #2
 800743a:	431a      	orrs	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	f003 0301 	and.w	r3, r3, #1
 8007444:	431a      	orrs	r2, r3
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800744e:	431a      	orrs	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	69db      	ldr	r3, [r3, #28]
 8007454:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007458:	431a      	orrs	r2, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a1b      	ldr	r3, [r3, #32]
 800745e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007462:	ea42 0103 	orr.w	r1, r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	0c1b      	lsrs	r3, r3, #16
 800747c:	f003 0104 	and.w	r1, r3, #4
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007484:	f003 0210 	and.w	r2, r3, #16
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	430a      	orrs	r2, r1
 800748e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	69da      	ldr	r2, [r3, #28]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800749e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b08c      	sub	sp, #48	@ 0x30
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
 80074c4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074c6:	2301      	movs	r3, #1
 80074c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d101      	bne.n	80074de <HAL_SPI_TransmitReceive+0x26>
 80074da:	2302      	movs	r3, #2
 80074dc:	e18a      	b.n	80077f4 <HAL_SPI_TransmitReceive+0x33c>
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074e6:	f7fc ffa1 	bl	800442c <HAL_GetTick>
 80074ea:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80074fc:	887b      	ldrh	r3, [r7, #2]
 80074fe:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007500:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007504:	2b01      	cmp	r3, #1
 8007506:	d00f      	beq.n	8007528 <HAL_SPI_TransmitReceive+0x70>
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800750e:	d107      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d103      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x68>
 8007518:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800751c:	2b04      	cmp	r3, #4
 800751e:	d003      	beq.n	8007528 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007520:	2302      	movs	r3, #2
 8007522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007526:	e15b      	b.n	80077e0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d005      	beq.n	800753a <HAL_SPI_TransmitReceive+0x82>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <HAL_SPI_TransmitReceive+0x82>
 8007534:	887b      	ldrh	r3, [r7, #2]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d103      	bne.n	8007542 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8007540:	e14e      	b.n	80077e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b04      	cmp	r3, #4
 800754c:	d003      	beq.n	8007556 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2205      	movs	r2, #5
 8007552:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	887a      	ldrh	r2, [r7, #2]
 8007566:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	887a      	ldrh	r2, [r7, #2]
 800756c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	887a      	ldrh	r2, [r7, #2]
 8007578:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	887a      	ldrh	r2, [r7, #2]
 800757e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2200      	movs	r2, #0
 800758a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007596:	2b40      	cmp	r3, #64	@ 0x40
 8007598:	d007      	beq.n	80075aa <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	681a      	ldr	r2, [r3, #0]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075a8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	68db      	ldr	r3, [r3, #12]
 80075ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075b2:	d178      	bne.n	80076a6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <HAL_SPI_TransmitReceive+0x10a>
 80075bc:	8b7b      	ldrh	r3, [r7, #26]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d166      	bne.n	8007690 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c6:	881a      	ldrh	r2, [r3, #0]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d2:	1c9a      	adds	r2, r3, #2
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075dc:	b29b      	uxth	r3, r3
 80075de:	3b01      	subs	r3, #1
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075e6:	e053      	b.n	8007690 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d11b      	bne.n	800762e <HAL_SPI_TransmitReceive+0x176>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d016      	beq.n	800762e <HAL_SPI_TransmitReceive+0x176>
 8007600:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007602:	2b01      	cmp	r3, #1
 8007604:	d113      	bne.n	800762e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800760a:	881a      	ldrh	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007616:	1c9a      	adds	r2, r3, #2
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007620:	b29b      	uxth	r3, r3
 8007622:	3b01      	subs	r3, #1
 8007624:	b29a      	uxth	r2, r3
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800762a:	2300      	movs	r3, #0
 800762c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	2b01      	cmp	r3, #1
 800763a:	d119      	bne.n	8007670 <HAL_SPI_TransmitReceive+0x1b8>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d014      	beq.n	8007670 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	b292      	uxth	r2, r2
 8007652:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007658:	1c9a      	adds	r2, r3, #2
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007662:	b29b      	uxth	r3, r3
 8007664:	3b01      	subs	r3, #1
 8007666:	b29a      	uxth	r2, r3
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800766c:	2301      	movs	r3, #1
 800766e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007670:	f7fc fedc 	bl	800442c <HAL_GetTick>
 8007674:	4602      	mov	r2, r0
 8007676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007678:	1ad3      	subs	r3, r2, r3
 800767a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800767c:	429a      	cmp	r2, r3
 800767e:	d807      	bhi.n	8007690 <HAL_SPI_TransmitReceive+0x1d8>
 8007680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007682:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007686:	d003      	beq.n	8007690 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800768e:	e0a7      	b.n	80077e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007694:	b29b      	uxth	r3, r3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1a6      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x130>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800769e:	b29b      	uxth	r3, r3
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d1a1      	bne.n	80075e8 <HAL_SPI_TransmitReceive+0x130>
 80076a4:	e07c      	b.n	80077a0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d002      	beq.n	80076b4 <HAL_SPI_TransmitReceive+0x1fc>
 80076ae:	8b7b      	ldrh	r3, [r7, #26]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d16b      	bne.n	800778c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	330c      	adds	r3, #12
 80076be:	7812      	ldrb	r2, [r2, #0]
 80076c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076da:	e057      	b.n	800778c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	f003 0302 	and.w	r3, r3, #2
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d11c      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x26c>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d017      	beq.n	8007724 <HAL_SPI_TransmitReceive+0x26c>
 80076f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d114      	bne.n	8007724 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	330c      	adds	r3, #12
 8007704:	7812      	ldrb	r2, [r2, #0]
 8007706:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b01      	cmp	r3, #1
 8007730:	d119      	bne.n	8007766 <HAL_SPI_TransmitReceive+0x2ae>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007736:	b29b      	uxth	r3, r3
 8007738:	2b00      	cmp	r3, #0
 800773a:	d014      	beq.n	8007766 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	b2d2      	uxtb	r2, r2
 8007748:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800774e:	1c5a      	adds	r2, r3, #1
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007758:	b29b      	uxth	r3, r3
 800775a:	3b01      	subs	r3, #1
 800775c:	b29a      	uxth	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007762:	2301      	movs	r3, #1
 8007764:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007766:	f7fc fe61 	bl	800442c <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007772:	429a      	cmp	r2, r3
 8007774:	d803      	bhi.n	800777e <HAL_SPI_TransmitReceive+0x2c6>
 8007776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007778:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800777c:	d102      	bne.n	8007784 <HAL_SPI_TransmitReceive+0x2cc>
 800777e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007780:	2b00      	cmp	r3, #0
 8007782:	d103      	bne.n	800778c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800778a:	e029      	b.n	80077e0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1a2      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x224>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d19d      	bne.n	80076dc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80077a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 f8b1 	bl	800790c <SPI_EndRxTxTransaction>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d006      	beq.n	80077be <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80077b0:	2301      	movs	r3, #1
 80077b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2220      	movs	r2, #32
 80077ba:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80077bc:	e010      	b.n	80077e0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077c6:	2300      	movs	r3, #0
 80077c8:	617b      	str	r3, [r7, #20]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	617b      	str	r3, [r7, #20]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	617b      	str	r3, [r7, #20]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	e000      	b.n	80077e0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80077de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80077f0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3730      	adds	r7, #48	@ 0x30
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b088      	sub	sp, #32
 8007800:	af00      	add	r7, sp, #0
 8007802:	60f8      	str	r0, [r7, #12]
 8007804:	60b9      	str	r1, [r7, #8]
 8007806:	603b      	str	r3, [r7, #0]
 8007808:	4613      	mov	r3, r2
 800780a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800780c:	f7fc fe0e 	bl	800442c <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007814:	1a9b      	subs	r3, r3, r2
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	4413      	add	r3, r2
 800781a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800781c:	f7fc fe06 	bl	800442c <HAL_GetTick>
 8007820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007822:	4b39      	ldr	r3, [pc, #228]	@ (8007908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	015b      	lsls	r3, r3, #5
 8007828:	0d1b      	lsrs	r3, r3, #20
 800782a:	69fa      	ldr	r2, [r7, #28]
 800782c:	fb02 f303 	mul.w	r3, r2, r3
 8007830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007832:	e054      	b.n	80078de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800783a:	d050      	beq.n	80078de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800783c:	f7fc fdf6 	bl	800442c <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	69fa      	ldr	r2, [r7, #28]
 8007848:	429a      	cmp	r2, r3
 800784a:	d902      	bls.n	8007852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800784c:	69fb      	ldr	r3, [r7, #28]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d13d      	bne.n	80078ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800786a:	d111      	bne.n	8007890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007874:	d004      	beq.n	8007880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800787e:	d107      	bne.n	8007890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800788e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007894:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007898:	d10f      	bne.n	80078ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80078a8:	601a      	str	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	681a      	ldr	r2, [r3, #0]
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80078b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2201      	movs	r2, #1
 80078be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e017      	b.n	80078fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	3b01      	subs	r3, #1
 80078dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	4013      	ands	r3, r2
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	bf0c      	ite	eq
 80078ee:	2301      	moveq	r3, #1
 80078f0:	2300      	movne	r3, #0
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d19b      	bne.n	8007834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3720      	adds	r7, #32
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	2000001c 	.word	0x2000001c

0800790c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b088      	sub	sp, #32
 8007910:	af02      	add	r7, sp, #8
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007918:	4b1b      	ldr	r3, [pc, #108]	@ (8007988 <SPI_EndRxTxTransaction+0x7c>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a1b      	ldr	r2, [pc, #108]	@ (800798c <SPI_EndRxTxTransaction+0x80>)
 800791e:	fba2 2303 	umull	r2, r3, r2, r3
 8007922:	0d5b      	lsrs	r3, r3, #21
 8007924:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007928:	fb02 f303 	mul.w	r3, r2, r3
 800792c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007936:	d112      	bne.n	800795e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2200      	movs	r2, #0
 8007940:	2180      	movs	r1, #128	@ 0x80
 8007942:	68f8      	ldr	r0, [r7, #12]
 8007944:	f7ff ff5a 	bl	80077fc <SPI_WaitFlagStateUntilTimeout>
 8007948:	4603      	mov	r3, r0
 800794a:	2b00      	cmp	r3, #0
 800794c:	d016      	beq.n	800797c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007952:	f043 0220 	orr.w	r2, r3, #32
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e00f      	b.n	800797e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d00a      	beq.n	800797a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	3b01      	subs	r3, #1
 8007968:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007974:	2b80      	cmp	r3, #128	@ 0x80
 8007976:	d0f2      	beq.n	800795e <SPI_EndRxTxTransaction+0x52>
 8007978:	e000      	b.n	800797c <SPI_EndRxTxTransaction+0x70>
        break;
 800797a:	bf00      	nop
  }

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	2000001c 	.word	0x2000001c
 800798c:	165e9f81 	.word	0x165e9f81

08007990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e041      	b.n	8007a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d106      	bne.n	80079bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fc f8a0 	bl	8003afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2202      	movs	r2, #2
 80079c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3304      	adds	r3, #4
 80079cc:	4619      	mov	r1, r3
 80079ce:	4610      	mov	r0, r2
 80079d0:	f000 fba8 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
	...

08007a30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d001      	beq.n	8007a48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	e046      	b.n	8007ad6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a23      	ldr	r2, [pc, #140]	@ (8007ae4 <HAL_TIM_Base_Start+0xb4>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d022      	beq.n	8007aa0 <HAL_TIM_Base_Start+0x70>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a62:	d01d      	beq.n	8007aa0 <HAL_TIM_Base_Start+0x70>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1f      	ldr	r2, [pc, #124]	@ (8007ae8 <HAL_TIM_Base_Start+0xb8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d018      	beq.n	8007aa0 <HAL_TIM_Base_Start+0x70>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a1e      	ldr	r2, [pc, #120]	@ (8007aec <HAL_TIM_Base_Start+0xbc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d013      	beq.n	8007aa0 <HAL_TIM_Base_Start+0x70>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a1c      	ldr	r2, [pc, #112]	@ (8007af0 <HAL_TIM_Base_Start+0xc0>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d00e      	beq.n	8007aa0 <HAL_TIM_Base_Start+0x70>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a1b      	ldr	r2, [pc, #108]	@ (8007af4 <HAL_TIM_Base_Start+0xc4>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d009      	beq.n	8007aa0 <HAL_TIM_Base_Start+0x70>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a19      	ldr	r2, [pc, #100]	@ (8007af8 <HAL_TIM_Base_Start+0xc8>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d004      	beq.n	8007aa0 <HAL_TIM_Base_Start+0x70>
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a18      	ldr	r2, [pc, #96]	@ (8007afc <HAL_TIM_Base_Start+0xcc>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d111      	bne.n	8007ac4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b06      	cmp	r3, #6
 8007ab0:	d010      	beq.n	8007ad4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f042 0201 	orr.w	r2, r2, #1
 8007ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ac2:	e007      	b.n	8007ad4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f042 0201 	orr.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3714      	adds	r7, #20
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
 8007ae2:	bf00      	nop
 8007ae4:	40010000 	.word	0x40010000
 8007ae8:	40000400 	.word	0x40000400
 8007aec:	40000800 	.word	0x40000800
 8007af0:	40000c00 	.word	0x40000c00
 8007af4:	40010400 	.word	0x40010400
 8007af8:	40014000 	.word	0x40014000
 8007afc:	40001800 	.word	0x40001800

08007b00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e041      	b.n	8007b96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b18:	b2db      	uxtb	r3, r3
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d106      	bne.n	8007b2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007b26:	6878      	ldr	r0, [r7, #4]
 8007b28:	f7fb ff9a 	bl	8003a60 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2202      	movs	r2, #2
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4610      	mov	r0, r2
 8007b40:	f000 faf0 	bl	8008124 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d109      	bne.n	8007bc4 <HAL_TIM_PWM_Start+0x24>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	bf14      	ite	ne
 8007bbc:	2301      	movne	r3, #1
 8007bbe:	2300      	moveq	r3, #0
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	e022      	b.n	8007c0a <HAL_TIM_PWM_Start+0x6a>
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	2b04      	cmp	r3, #4
 8007bc8:	d109      	bne.n	8007bde <HAL_TIM_PWM_Start+0x3e>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	bf14      	ite	ne
 8007bd6:	2301      	movne	r3, #1
 8007bd8:	2300      	moveq	r3, #0
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	e015      	b.n	8007c0a <HAL_TIM_PWM_Start+0x6a>
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	2b08      	cmp	r3, #8
 8007be2:	d109      	bne.n	8007bf8 <HAL_TIM_PWM_Start+0x58>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	bf14      	ite	ne
 8007bf0:	2301      	movne	r3, #1
 8007bf2:	2300      	moveq	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	e008      	b.n	8007c0a <HAL_TIM_PWM_Start+0x6a>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	bf14      	ite	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	2300      	moveq	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e07c      	b.n	8007d0c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d104      	bne.n	8007c22 <HAL_TIM_PWM_Start+0x82>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c20:	e013      	b.n	8007c4a <HAL_TIM_PWM_Start+0xaa>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b04      	cmp	r3, #4
 8007c26:	d104      	bne.n	8007c32 <HAL_TIM_PWM_Start+0x92>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c30:	e00b      	b.n	8007c4a <HAL_TIM_PWM_Start+0xaa>
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	2b08      	cmp	r3, #8
 8007c36:	d104      	bne.n	8007c42 <HAL_TIM_PWM_Start+0xa2>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2202      	movs	r2, #2
 8007c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c40:	e003      	b.n	8007c4a <HAL_TIM_PWM_Start+0xaa>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2202      	movs	r2, #2
 8007c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	6839      	ldr	r1, [r7, #0]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f000 fd50 	bl	80086f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8007d14 <HAL_TIM_PWM_Start+0x174>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d004      	beq.n	8007c6c <HAL_TIM_PWM_Start+0xcc>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	4a2c      	ldr	r2, [pc, #176]	@ (8007d18 <HAL_TIM_PWM_Start+0x178>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d101      	bne.n	8007c70 <HAL_TIM_PWM_Start+0xd0>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e000      	b.n	8007c72 <HAL_TIM_PWM_Start+0xd2>
 8007c70:	2300      	movs	r3, #0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d007      	beq.n	8007c86 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007c84:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a22      	ldr	r2, [pc, #136]	@ (8007d14 <HAL_TIM_PWM_Start+0x174>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d022      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x136>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007c98:	d01d      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x136>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8007d1c <HAL_TIM_PWM_Start+0x17c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d018      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x136>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8007d20 <HAL_TIM_PWM_Start+0x180>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d013      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x136>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a1c      	ldr	r2, [pc, #112]	@ (8007d24 <HAL_TIM_PWM_Start+0x184>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d00e      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x136>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a16      	ldr	r2, [pc, #88]	@ (8007d18 <HAL_TIM_PWM_Start+0x178>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d009      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x136>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a18      	ldr	r2, [pc, #96]	@ (8007d28 <HAL_TIM_PWM_Start+0x188>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d004      	beq.n	8007cd6 <HAL_TIM_PWM_Start+0x136>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a16      	ldr	r2, [pc, #88]	@ (8007d2c <HAL_TIM_PWM_Start+0x18c>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d111      	bne.n	8007cfa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f003 0307 	and.w	r3, r3, #7
 8007ce0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2b06      	cmp	r3, #6
 8007ce6:	d010      	beq.n	8007d0a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f042 0201 	orr.w	r2, r2, #1
 8007cf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf8:	e007      	b.n	8007d0a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f042 0201 	orr.w	r2, r2, #1
 8007d08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	40010000 	.word	0x40010000
 8007d18:	40010400 	.word	0x40010400
 8007d1c:	40000400 	.word	0x40000400
 8007d20:	40000800 	.word	0x40000800
 8007d24:	40000c00 	.word	0x40000c00
 8007d28:	40014000 	.word	0x40014000
 8007d2c:	40001800 	.word	0x40001800

08007d30 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 fcd8 	bl	80086f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a2e      	ldr	r2, [pc, #184]	@ (8007e08 <HAL_TIM_PWM_Stop+0xd8>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d004      	beq.n	8007d5c <HAL_TIM_PWM_Stop+0x2c>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a2d      	ldr	r2, [pc, #180]	@ (8007e0c <HAL_TIM_PWM_Stop+0xdc>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d101      	bne.n	8007d60 <HAL_TIM_PWM_Stop+0x30>
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e000      	b.n	8007d62 <HAL_TIM_PWM_Stop+0x32>
 8007d60:	2300      	movs	r3, #0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d017      	beq.n	8007d96 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	6a1a      	ldr	r2, [r3, #32]
 8007d6c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007d70:	4013      	ands	r3, r2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10f      	bne.n	8007d96 <HAL_TIM_PWM_Stop+0x66>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6a1a      	ldr	r2, [r3, #32]
 8007d7c:	f240 4344 	movw	r3, #1092	@ 0x444
 8007d80:	4013      	ands	r3, r2
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d107      	bne.n	8007d96 <HAL_TIM_PWM_Stop+0x66>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007d94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	6a1a      	ldr	r2, [r3, #32]
 8007d9c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007da0:	4013      	ands	r3, r2
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10f      	bne.n	8007dc6 <HAL_TIM_PWM_Stop+0x96>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a1a      	ldr	r2, [r3, #32]
 8007dac:	f240 4344 	movw	r3, #1092	@ 0x444
 8007db0:	4013      	ands	r3, r2
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d107      	bne.n	8007dc6 <HAL_TIM_PWM_Stop+0x96>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0201 	bic.w	r2, r2, #1
 8007dc4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d104      	bne.n	8007dd6 <HAL_TIM_PWM_Stop+0xa6>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dd4:	e013      	b.n	8007dfe <HAL_TIM_PWM_Stop+0xce>
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d104      	bne.n	8007de6 <HAL_TIM_PWM_Stop+0xb6>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007de4:	e00b      	b.n	8007dfe <HAL_TIM_PWM_Stop+0xce>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d104      	bne.n	8007df6 <HAL_TIM_PWM_Stop+0xc6>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007df4:	e003      	b.n	8007dfe <HAL_TIM_PWM_Stop+0xce>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2201      	movs	r2, #1
 8007dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	40010000 	.word	0x40010000
 8007e0c:	40010400 	.word	0x40010400

08007e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e0ae      	b.n	8007f8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b0c      	cmp	r3, #12
 8007e3a:	f200 809f 	bhi.w	8007f7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e79 	.word	0x08007e79
 8007e48:	08007f7d 	.word	0x08007f7d
 8007e4c:	08007f7d 	.word	0x08007f7d
 8007e50:	08007f7d 	.word	0x08007f7d
 8007e54:	08007eb9 	.word	0x08007eb9
 8007e58:	08007f7d 	.word	0x08007f7d
 8007e5c:	08007f7d 	.word	0x08007f7d
 8007e60:	08007f7d 	.word	0x08007f7d
 8007e64:	08007efb 	.word	0x08007efb
 8007e68:	08007f7d 	.word	0x08007f7d
 8007e6c:	08007f7d 	.word	0x08007f7d
 8007e70:	08007f7d 	.word	0x08007f7d
 8007e74:	08007f3b 	.word	0x08007f3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68b9      	ldr	r1, [r7, #8]
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f000 f9f0 	bl	8008264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0208 	orr.w	r2, r2, #8
 8007e92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699a      	ldr	r2, [r3, #24]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0204 	bic.w	r2, r2, #4
 8007ea2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	6999      	ldr	r1, [r3, #24]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	619a      	str	r2, [r3, #24]
      break;
 8007eb6:	e064      	b.n	8007f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	68b9      	ldr	r1, [r7, #8]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 fa40 	bl	8008344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699a      	ldr	r2, [r3, #24]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	699a      	ldr	r2, [r3, #24]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6999      	ldr	r1, [r3, #24]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	021a      	lsls	r2, r3, #8
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	430a      	orrs	r2, r1
 8007ef6:	619a      	str	r2, [r3, #24]
      break;
 8007ef8:	e043      	b.n	8007f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68b9      	ldr	r1, [r7, #8]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 fa95 	bl	8008430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0208 	orr.w	r2, r2, #8
 8007f14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69da      	ldr	r2, [r3, #28]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0204 	bic.w	r2, r2, #4
 8007f24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69d9      	ldr	r1, [r3, #28]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	691a      	ldr	r2, [r3, #16]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	430a      	orrs	r2, r1
 8007f36:	61da      	str	r2, [r3, #28]
      break;
 8007f38:	e023      	b.n	8007f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68b9      	ldr	r1, [r7, #8]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fae9 	bl	8008518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69da      	ldr	r2, [r3, #28]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69da      	ldr	r2, [r3, #28]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69d9      	ldr	r1, [r3, #28]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	021a      	lsls	r2, r3, #8
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	430a      	orrs	r2, r1
 8007f78:	61da      	str	r2, [r3, #28]
      break;
 8007f7a:	e002      	b.n	8007f82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3718      	adds	r7, #24
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d101      	bne.n	8007fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8007fac:	2302      	movs	r3, #2
 8007fae:	e0b4      	b.n	800811a <HAL_TIM_ConfigClockSource+0x186>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2202      	movs	r2, #2
 8007fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68ba      	ldr	r2, [r7, #8]
 8007fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fe8:	d03e      	beq.n	8008068 <HAL_TIM_ConfigClockSource+0xd4>
 8007fea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fee:	f200 8087 	bhi.w	8008100 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ff6:	f000 8086 	beq.w	8008106 <HAL_TIM_ConfigClockSource+0x172>
 8007ffa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ffe:	d87f      	bhi.n	8008100 <HAL_TIM_ConfigClockSource+0x16c>
 8008000:	2b70      	cmp	r3, #112	@ 0x70
 8008002:	d01a      	beq.n	800803a <HAL_TIM_ConfigClockSource+0xa6>
 8008004:	2b70      	cmp	r3, #112	@ 0x70
 8008006:	d87b      	bhi.n	8008100 <HAL_TIM_ConfigClockSource+0x16c>
 8008008:	2b60      	cmp	r3, #96	@ 0x60
 800800a:	d050      	beq.n	80080ae <HAL_TIM_ConfigClockSource+0x11a>
 800800c:	2b60      	cmp	r3, #96	@ 0x60
 800800e:	d877      	bhi.n	8008100 <HAL_TIM_ConfigClockSource+0x16c>
 8008010:	2b50      	cmp	r3, #80	@ 0x50
 8008012:	d03c      	beq.n	800808e <HAL_TIM_ConfigClockSource+0xfa>
 8008014:	2b50      	cmp	r3, #80	@ 0x50
 8008016:	d873      	bhi.n	8008100 <HAL_TIM_ConfigClockSource+0x16c>
 8008018:	2b40      	cmp	r3, #64	@ 0x40
 800801a:	d058      	beq.n	80080ce <HAL_TIM_ConfigClockSource+0x13a>
 800801c:	2b40      	cmp	r3, #64	@ 0x40
 800801e:	d86f      	bhi.n	8008100 <HAL_TIM_ConfigClockSource+0x16c>
 8008020:	2b30      	cmp	r3, #48	@ 0x30
 8008022:	d064      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0x15a>
 8008024:	2b30      	cmp	r3, #48	@ 0x30
 8008026:	d86b      	bhi.n	8008100 <HAL_TIM_ConfigClockSource+0x16c>
 8008028:	2b20      	cmp	r3, #32
 800802a:	d060      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0x15a>
 800802c:	2b20      	cmp	r3, #32
 800802e:	d867      	bhi.n	8008100 <HAL_TIM_ConfigClockSource+0x16c>
 8008030:	2b00      	cmp	r3, #0
 8008032:	d05c      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0x15a>
 8008034:	2b10      	cmp	r3, #16
 8008036:	d05a      	beq.n	80080ee <HAL_TIM_ConfigClockSource+0x15a>
 8008038:	e062      	b.n	8008100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	6899      	ldr	r1, [r3, #8]
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	f000 fb35 	bl	80086b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800805c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68ba      	ldr	r2, [r7, #8]
 8008064:	609a      	str	r2, [r3, #8]
      break;
 8008066:	e04f      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	6899      	ldr	r1, [r3, #8]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f000 fb1e 	bl	80086b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689a      	ldr	r2, [r3, #8]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800808a:	609a      	str	r2, [r3, #8]
      break;
 800808c:	e03c      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6818      	ldr	r0, [r3, #0]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	6859      	ldr	r1, [r3, #4]
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	461a      	mov	r2, r3
 800809c:	f000 fa92 	bl	80085c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2150      	movs	r1, #80	@ 0x50
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 faeb 	bl	8008682 <TIM_ITRx_SetConfig>
      break;
 80080ac:	e02c      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6818      	ldr	r0, [r3, #0]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	6859      	ldr	r1, [r3, #4]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	461a      	mov	r2, r3
 80080bc:	f000 fab1 	bl	8008622 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2160      	movs	r1, #96	@ 0x60
 80080c6:	4618      	mov	r0, r3
 80080c8:	f000 fadb 	bl	8008682 <TIM_ITRx_SetConfig>
      break;
 80080cc:	e01c      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6818      	ldr	r0, [r3, #0]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	6859      	ldr	r1, [r3, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	461a      	mov	r2, r3
 80080dc:	f000 fa72 	bl	80085c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2140      	movs	r1, #64	@ 0x40
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 facb 	bl	8008682 <TIM_ITRx_SetConfig>
      break;
 80080ec:	e00c      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4619      	mov	r1, r3
 80080f8:	4610      	mov	r0, r2
 80080fa:	f000 fac2 	bl	8008682 <TIM_ITRx_SetConfig>
      break;
 80080fe:	e003      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	73fb      	strb	r3, [r7, #15]
      break;
 8008104:	e000      	b.n	8008108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008118:	7bfb      	ldrb	r3, [r7, #15]
}
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}
	...

08008124 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	4a40      	ldr	r2, [pc, #256]	@ (8008238 <TIM_Base_SetConfig+0x114>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d013      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008142:	d00f      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a3d      	ldr	r2, [pc, #244]	@ (800823c <TIM_Base_SetConfig+0x118>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d00b      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a3c      	ldr	r2, [pc, #240]	@ (8008240 <TIM_Base_SetConfig+0x11c>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d007      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a3b      	ldr	r2, [pc, #236]	@ (8008244 <TIM_Base_SetConfig+0x120>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_Base_SetConfig+0x40>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a3a      	ldr	r2, [pc, #232]	@ (8008248 <TIM_Base_SetConfig+0x124>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d108      	bne.n	8008176 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800816a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	4313      	orrs	r3, r2
 8008174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4a2f      	ldr	r2, [pc, #188]	@ (8008238 <TIM_Base_SetConfig+0x114>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d02b      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008184:	d027      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a2c      	ldr	r2, [pc, #176]	@ (800823c <TIM_Base_SetConfig+0x118>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d023      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a2b      	ldr	r2, [pc, #172]	@ (8008240 <TIM_Base_SetConfig+0x11c>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d01f      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	4a2a      	ldr	r2, [pc, #168]	@ (8008244 <TIM_Base_SetConfig+0x120>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d01b      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4a29      	ldr	r2, [pc, #164]	@ (8008248 <TIM_Base_SetConfig+0x124>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d017      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	4a28      	ldr	r2, [pc, #160]	@ (800824c <TIM_Base_SetConfig+0x128>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d013      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	4a27      	ldr	r2, [pc, #156]	@ (8008250 <TIM_Base_SetConfig+0x12c>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d00f      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	4a26      	ldr	r2, [pc, #152]	@ (8008254 <TIM_Base_SetConfig+0x130>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d00b      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a25      	ldr	r2, [pc, #148]	@ (8008258 <TIM_Base_SetConfig+0x134>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d007      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a24      	ldr	r2, [pc, #144]	@ (800825c <TIM_Base_SetConfig+0x138>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d003      	beq.n	80081d6 <TIM_Base_SetConfig+0xb2>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4a23      	ldr	r2, [pc, #140]	@ (8008260 <TIM_Base_SetConfig+0x13c>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d108      	bne.n	80081e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	68fa      	ldr	r2, [r7, #12]
 80081e4:	4313      	orrs	r3, r2
 80081e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	695b      	ldr	r3, [r3, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	681a      	ldr	r2, [r3, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a0a      	ldr	r2, [pc, #40]	@ (8008238 <TIM_Base_SetConfig+0x114>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d003      	beq.n	800821c <TIM_Base_SetConfig+0xf8>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a0c      	ldr	r2, [pc, #48]	@ (8008248 <TIM_Base_SetConfig+0x124>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d103      	bne.n	8008224 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	691a      	ldr	r2, [r3, #16]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	615a      	str	r2, [r3, #20]
}
 800822a:	bf00      	nop
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	40010000 	.word	0x40010000
 800823c:	40000400 	.word	0x40000400
 8008240:	40000800 	.word	0x40000800
 8008244:	40000c00 	.word	0x40000c00
 8008248:	40010400 	.word	0x40010400
 800824c:	40014000 	.word	0x40014000
 8008250:	40014400 	.word	0x40014400
 8008254:	40014800 	.word	0x40014800
 8008258:	40001800 	.word	0x40001800
 800825c:	40001c00 	.word	0x40001c00
 8008260:	40002000 	.word	0x40002000

08008264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f023 0201 	bic.w	r2, r3, #1
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f023 0302 	bic.w	r3, r3, #2
 80082ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	4a20      	ldr	r2, [pc, #128]	@ (800833c <TIM_OC1_SetConfig+0xd8>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d003      	beq.n	80082c8 <TIM_OC1_SetConfig+0x64>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008340 <TIM_OC1_SetConfig+0xdc>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d10c      	bne.n	80082e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f023 0308 	bic.w	r3, r3, #8
 80082ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f023 0304 	bic.w	r3, r3, #4
 80082e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a15      	ldr	r2, [pc, #84]	@ (800833c <TIM_OC1_SetConfig+0xd8>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d003      	beq.n	80082f2 <TIM_OC1_SetConfig+0x8e>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	4a14      	ldr	r2, [pc, #80]	@ (8008340 <TIM_OC1_SetConfig+0xdc>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d111      	bne.n	8008316 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	695b      	ldr	r3, [r3, #20]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	4313      	orrs	r3, r2
 800830a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	4313      	orrs	r3, r2
 8008314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	685a      	ldr	r2, [r3, #4]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	697a      	ldr	r2, [r7, #20]
 800832e:	621a      	str	r2, [r3, #32]
}
 8008330:	bf00      	nop
 8008332:	371c      	adds	r7, #28
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40010000 	.word	0x40010000
 8008340:	40010400 	.word	0x40010400

08008344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f023 0210 	bic.w	r2, r3, #16
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800837a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f023 0320 	bic.w	r3, r3, #32
 800838e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	011b      	lsls	r3, r3, #4
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a22      	ldr	r2, [pc, #136]	@ (8008428 <TIM_OC2_SetConfig+0xe4>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d003      	beq.n	80083ac <TIM_OC2_SetConfig+0x68>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a21      	ldr	r2, [pc, #132]	@ (800842c <TIM_OC2_SetConfig+0xe8>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d10d      	bne.n	80083c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	011b      	lsls	r3, r3, #4
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	4313      	orrs	r3, r2
 80083be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a17      	ldr	r2, [pc, #92]	@ (8008428 <TIM_OC2_SetConfig+0xe4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d003      	beq.n	80083d8 <TIM_OC2_SetConfig+0x94>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a16      	ldr	r2, [pc, #88]	@ (800842c <TIM_OC2_SetConfig+0xe8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d113      	bne.n	8008400 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	693a      	ldr	r2, [r7, #16]
 80083f0:	4313      	orrs	r3, r2
 80083f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	699b      	ldr	r3, [r3, #24]
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	693a      	ldr	r2, [r7, #16]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	693a      	ldr	r2, [r7, #16]
 8008404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	68fa      	ldr	r2, [r7, #12]
 800840a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	685a      	ldr	r2, [r3, #4]
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	621a      	str	r2, [r3, #32]
}
 800841a:	bf00      	nop
 800841c:	371c      	adds	r7, #28
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr
 8008426:	bf00      	nop
 8008428:	40010000 	.word	0x40010000
 800842c:	40010400 	.word	0x40010400

08008430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008430:	b480      	push	{r7}
 8008432:	b087      	sub	sp, #28
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a1b      	ldr	r3, [r3, #32]
 800843e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a1b      	ldr	r3, [r3, #32]
 800844a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800845e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 0303 	bic.w	r3, r3, #3
 8008466:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	68fa      	ldr	r2, [r7, #12]
 800846e:	4313      	orrs	r3, r2
 8008470:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008478:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	689b      	ldr	r3, [r3, #8]
 800847e:	021b      	lsls	r3, r3, #8
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	4313      	orrs	r3, r2
 8008484:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	4a21      	ldr	r2, [pc, #132]	@ (8008510 <TIM_OC3_SetConfig+0xe0>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d003      	beq.n	8008496 <TIM_OC3_SetConfig+0x66>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4a20      	ldr	r2, [pc, #128]	@ (8008514 <TIM_OC3_SetConfig+0xe4>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d10d      	bne.n	80084b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800849c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	021b      	lsls	r3, r3, #8
 80084a4:	697a      	ldr	r2, [r7, #20]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a16      	ldr	r2, [pc, #88]	@ (8008510 <TIM_OC3_SetConfig+0xe0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d003      	beq.n	80084c2 <TIM_OC3_SetConfig+0x92>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a15      	ldr	r2, [pc, #84]	@ (8008514 <TIM_OC3_SetConfig+0xe4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d113      	bne.n	80084ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	011b      	lsls	r3, r3, #4
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	4313      	orrs	r3, r2
 80084dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	699b      	ldr	r3, [r3, #24]
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	693a      	ldr	r2, [r7, #16]
 80084e6:	4313      	orrs	r3, r2
 80084e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	693a      	ldr	r2, [r7, #16]
 80084ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	621a      	str	r2, [r3, #32]
}
 8008504:	bf00      	nop
 8008506:	371c      	adds	r7, #28
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr
 8008510:	40010000 	.word	0x40010000
 8008514:	40010400 	.word	0x40010400

08008518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800854e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	031b      	lsls	r3, r3, #12
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a12      	ldr	r2, [pc, #72]	@ (80085bc <TIM_OC4_SetConfig+0xa4>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d003      	beq.n	8008580 <TIM_OC4_SetConfig+0x68>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a11      	ldr	r2, [pc, #68]	@ (80085c0 <TIM_OC4_SetConfig+0xa8>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d109      	bne.n	8008594 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008586:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	695b      	ldr	r3, [r3, #20]
 800858c:	019b      	lsls	r3, r3, #6
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	4313      	orrs	r3, r2
 8008592:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	693a      	ldr	r2, [r7, #16]
 80085ac:	621a      	str	r2, [r3, #32]
}
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr
 80085ba:	bf00      	nop
 80085bc:	40010000 	.word	0x40010000
 80085c0:	40010400 	.word	0x40010400

080085c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	6a1b      	ldr	r3, [r3, #32]
 80085d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	f023 0201 	bic.w	r2, r3, #1
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	f023 030a 	bic.w	r3, r3, #10
 8008600:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	4313      	orrs	r3, r2
 8008608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	621a      	str	r2, [r3, #32]
}
 8008616:	bf00      	nop
 8008618:	371c      	adds	r7, #28
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008622:	b480      	push	{r7}
 8008624:	b087      	sub	sp, #28
 8008626:	af00      	add	r7, sp, #0
 8008628:	60f8      	str	r0, [r7, #12]
 800862a:	60b9      	str	r1, [r7, #8]
 800862c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	f023 0210 	bic.w	r2, r3, #16
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	6a1b      	ldr	r3, [r3, #32]
 8008644:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800864c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	031b      	lsls	r3, r3, #12
 8008652:	697a      	ldr	r2, [r7, #20]
 8008654:	4313      	orrs	r3, r2
 8008656:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800865e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	011b      	lsls	r3, r3, #4
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	4313      	orrs	r3, r2
 8008668:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	697a      	ldr	r2, [r7, #20]
 800866e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008682:	b480      	push	{r7}
 8008684:	b085      	sub	sp, #20
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800869a:	683a      	ldr	r2, [r7, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4313      	orrs	r3, r2
 80086a0:	f043 0307 	orr.w	r3, r3, #7
 80086a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	609a      	str	r2, [r3, #8]
}
 80086ac:	bf00      	nop
 80086ae:	3714      	adds	r7, #20
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b087      	sub	sp, #28
 80086bc:	af00      	add	r7, sp, #0
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	607a      	str	r2, [r7, #4]
 80086c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086cc:	697b      	ldr	r3, [r7, #20]
 80086ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	021a      	lsls	r2, r3, #8
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	431a      	orrs	r2, r3
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	4313      	orrs	r3, r2
 80086e0:	697a      	ldr	r2, [r7, #20]
 80086e2:	4313      	orrs	r3, r2
 80086e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	609a      	str	r2, [r3, #8]
}
 80086ec:	bf00      	nop
 80086ee:	371c      	adds	r7, #28
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b087      	sub	sp, #28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f003 031f 	and.w	r3, r3, #31
 800870a:	2201      	movs	r2, #1
 800870c:	fa02 f303 	lsl.w	r3, r2, r3
 8008710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1a      	ldr	r2, [r3, #32]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	43db      	mvns	r3, r3
 800871a:	401a      	ands	r2, r3
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	6a1a      	ldr	r2, [r3, #32]
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f003 031f 	and.w	r3, r3, #31
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	fa01 f303 	lsl.w	r3, r1, r3
 8008730:	431a      	orrs	r2, r3
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	621a      	str	r2, [r3, #32]
}
 8008736:	bf00      	nop
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
	...

08008744 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008754:	2b01      	cmp	r3, #1
 8008756:	d101      	bne.n	800875c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008758:	2302      	movs	r3, #2
 800875a:	e05a      	b.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008782:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	4313      	orrs	r3, r2
 800878c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	68fa      	ldr	r2, [r7, #12]
 8008794:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a21      	ldr	r2, [pc, #132]	@ (8008820 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d022      	beq.n	80087e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a8:	d01d      	beq.n	80087e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a1d      	ldr	r2, [pc, #116]	@ (8008824 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d018      	beq.n	80087e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008828 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d013      	beq.n	80087e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a1a      	ldr	r2, [pc, #104]	@ (800882c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d00e      	beq.n	80087e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a18      	ldr	r2, [pc, #96]	@ (8008830 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d009      	beq.n	80087e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a17      	ldr	r2, [pc, #92]	@ (8008834 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d004      	beq.n	80087e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a15      	ldr	r2, [pc, #84]	@ (8008838 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d10c      	bne.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80087ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	68ba      	ldr	r2, [r7, #8]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68ba      	ldr	r2, [r7, #8]
 80087fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008810:	2300      	movs	r3, #0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3714      	adds	r7, #20
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
 800881e:	bf00      	nop
 8008820:	40010000 	.word	0x40010000
 8008824:	40000400 	.word	0x40000400
 8008828:	40000800 	.word	0x40000800
 800882c:	40000c00 	.word	0x40000c00
 8008830:	40010400 	.word	0x40010400
 8008834:	40014000 	.word	0x40014000
 8008838:	40001800 	.word	0x40001800

0800883c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800883c:	b480      	push	{r7}
 800883e:	b085      	sub	sp, #20
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008854:	2302      	movs	r3, #2
 8008856:	e03d      	b.n	80088d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	4313      	orrs	r3, r2
 800886c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	4313      	orrs	r3, r2
 800887a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4313      	orrs	r3, r2
 8008896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	691b      	ldr	r3, [r3, #16]
 80088a2:	4313      	orrs	r3, r2
 80088a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088d2:	2300      	movs	r3, #0
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d101      	bne.n	80088f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e03f      	b.n	8008972 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d106      	bne.n	800890c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f7fb fa2c 	bl	8003d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2224      	movs	r2, #36	@ 0x24
 8008910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68da      	ldr	r2, [r3, #12]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008922:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 ff81 	bl	800982c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	691a      	ldr	r2, [r3, #16]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008938:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	695a      	ldr	r2, [r3, #20]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008948:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68da      	ldr	r2, [r3, #12]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008958:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2220      	movs	r2, #32
 8008964:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2220      	movs	r2, #32
 800896c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008970:	2300      	movs	r3, #0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
	...

0800897c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b08c      	sub	sp, #48	@ 0x30
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b20      	cmp	r3, #32
 8008994:	d165      	bne.n	8008a62 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d002      	beq.n	80089a2 <HAL_UART_Transmit_DMA+0x26>
 800899c:	88fb      	ldrh	r3, [r7, #6]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e05e      	b.n	8008a64 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_UART_Transmit_DMA+0x38>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e057      	b.n	8008a64 <HAL_UART_Transmit_DMA+0xe8>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2201      	movs	r2, #1
 80089b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	88fa      	ldrh	r2, [r7, #6]
 80089c6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	88fa      	ldrh	r2, [r7, #6]
 80089cc:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2200      	movs	r2, #0
 80089d2:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2221      	movs	r2, #33	@ 0x21
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e0:	4a22      	ldr	r2, [pc, #136]	@ (8008a6c <HAL_UART_Transmit_DMA+0xf0>)
 80089e2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089e8:	4a21      	ldr	r2, [pc, #132]	@ (8008a70 <HAL_UART_Transmit_DMA+0xf4>)
 80089ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f0:	4a20      	ldr	r2, [pc, #128]	@ (8008a74 <HAL_UART_Transmit_DMA+0xf8>)
 80089f2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089f8:	2200      	movs	r2, #0
 80089fa:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80089fc:	f107 0308 	add.w	r3, r7, #8
 8008a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8008a06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a08:	6819      	ldr	r1, [r3, #0]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	461a      	mov	r2, r3
 8008a12:	88fb      	ldrh	r3, [r7, #6]
 8008a14:	f7fc fd38 	bl	8005488 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a20:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	3314      	adds	r3, #20
 8008a30:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	e853 3f00 	ldrex	r3, [r3]
 8008a38:	617b      	str	r3, [r7, #20]
   return(result);
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	3314      	adds	r3, #20
 8008a48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a4a:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a4c:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a4e:	6a39      	ldr	r1, [r7, #32]
 8008a50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a52:	e841 2300 	strex	r3, r2, [r1]
 8008a56:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1e5      	bne.n	8008a2a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	e000      	b.n	8008a64 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008a62:	2302      	movs	r3, #2
  }
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3730      	adds	r7, #48	@ 0x30
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	080090c5 	.word	0x080090c5
 8008a70:	0800915f 	.word	0x0800915f
 8008a74:	080092d7 	.word	0x080092d7

08008a78 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b08c      	sub	sp, #48	@ 0x30
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	60f8      	str	r0, [r7, #12]
 8008a80:	60b9      	str	r1, [r7, #8]
 8008a82:	4613      	mov	r3, r2
 8008a84:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	2b20      	cmp	r3, #32
 8008a90:	d152      	bne.n	8008b38 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008a98:	88fb      	ldrh	r3, [r7, #6]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d101      	bne.n	8008aa2 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e04b      	b.n	8008b3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d101      	bne.n	8008ab0 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008aac:	2302      	movs	r3, #2
 8008aae:	e044      	b.n	8008b3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2201      	movs	r2, #1
 8008ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2201      	movs	r2, #1
 8008abc:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008abe:	88fb      	ldrh	r3, [r7, #6]
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	68b9      	ldr	r1, [r7, #8]
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 fc51 	bl	800936c <UART_Start_Receive_DMA>
 8008aca:	4603      	mov	r3, r0
 8008acc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d12c      	bne.n	8008b32 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d125      	bne.n	8008b2c <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	613b      	str	r3, [r7, #16]
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	613b      	str	r3, [r7, #16]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	613b      	str	r3, [r7, #16]
 8008af4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	330c      	adds	r3, #12
 8008afc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	e853 3f00 	ldrex	r3, [r3]
 8008b04:	617b      	str	r3, [r7, #20]
   return(result);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	f043 0310 	orr.w	r3, r3, #16
 8008b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	330c      	adds	r3, #12
 8008b14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008b16:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1a:	6a39      	ldr	r1, [r7, #32]
 8008b1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e5      	bne.n	8008af6 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008b2a:	e002      	b.n	8008b32 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008b32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008b36:	e000      	b.n	8008b3a <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008b38:	2302      	movs	r3, #2
  }
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3730      	adds	r7, #48	@ 0x30
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b0ba      	sub	sp, #232	@ 0xe8
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008b70:	2300      	movs	r3, #0
 8008b72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b7a:	f003 030f 	and.w	r3, r3, #15
 8008b7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008b82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d10f      	bne.n	8008baa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d009      	beq.n	8008baa <HAL_UART_IRQHandler+0x66>
 8008b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fd87 	bl	80096b6 <UART_Receive_IT>
      return;
 8008ba8:	e256      	b.n	8009058 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 80de 	beq.w	8008d70 <HAL_UART_IRQHandler+0x22c>
 8008bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bb8:	f003 0301 	and.w	r3, r3, #1
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d106      	bne.n	8008bce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	f000 80d1 	beq.w	8008d70 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d00b      	beq.n	8008bf2 <HAL_UART_IRQHandler+0xae>
 8008bda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d005      	beq.n	8008bf2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bea:	f043 0201 	orr.w	r2, r3, #1
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bf6:	f003 0304 	and.w	r3, r3, #4
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d00b      	beq.n	8008c16 <HAL_UART_IRQHandler+0xd2>
 8008bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c02:	f003 0301 	and.w	r3, r3, #1
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d005      	beq.n	8008c16 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0e:	f043 0202 	orr.w	r2, r3, #2
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <HAL_UART_IRQHandler+0xf6>
 8008c22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d005      	beq.n	8008c3a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c32:	f043 0204 	orr.w	r2, r3, #4
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c3e:	f003 0308 	and.w	r3, r3, #8
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d011      	beq.n	8008c6a <HAL_UART_IRQHandler+0x126>
 8008c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c4a:	f003 0320 	and.w	r3, r3, #32
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d105      	bne.n	8008c5e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d005      	beq.n	8008c6a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c62:	f043 0208 	orr.w	r2, r3, #8
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	f000 81ed 	beq.w	800904e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c78:	f003 0320 	and.w	r3, r3, #32
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d008      	beq.n	8008c92 <HAL_UART_IRQHandler+0x14e>
 8008c80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c84:	f003 0320 	and.w	r3, r3, #32
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d002      	beq.n	8008c92 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fd12 	bl	80096b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	695b      	ldr	r3, [r3, #20]
 8008c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c9c:	2b40      	cmp	r3, #64	@ 0x40
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2301      	moveq	r3, #1
 8008ca2:	2300      	movne	r3, #0
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cae:	f003 0308 	and.w	r3, r3, #8
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d103      	bne.n	8008cbe <HAL_UART_IRQHandler+0x17a>
 8008cb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d04f      	beq.n	8008d5e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fc1a 	bl	80094f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695b      	ldr	r3, [r3, #20]
 8008cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cce:	2b40      	cmp	r3, #64	@ 0x40
 8008cd0:	d141      	bne.n	8008d56 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	3314      	adds	r3, #20
 8008cd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ce0:	e853 3f00 	ldrex	r3, [r3]
 8008ce4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008ce8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008cec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	3314      	adds	r3, #20
 8008cfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008cfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008d02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008d0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008d0e:	e841 2300 	strex	r3, r2, [r1]
 8008d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008d16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d1d9      	bne.n	8008cd2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d013      	beq.n	8008d4e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d2a:	4a7d      	ldr	r2, [pc, #500]	@ (8008f20 <HAL_UART_IRQHandler+0x3dc>)
 8008d2c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d32:	4618      	mov	r0, r3
 8008d34:	f7fc fc70 	bl	8005618 <HAL_DMA_Abort_IT>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d016      	beq.n	8008d6c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008d48:	4610      	mov	r0, r2
 8008d4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d4c:	e00e      	b.n	8008d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f9ae 	bl	80090b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d54:	e00a      	b.n	8008d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f9aa 	bl	80090b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d5c:	e006      	b.n	8008d6c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f9a6 	bl	80090b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2200      	movs	r2, #0
 8008d68:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008d6a:	e170      	b.n	800904e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d6c:	bf00      	nop
    return;
 8008d6e:	e16e      	b.n	800904e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	f040 814a 	bne.w	800900e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d7e:	f003 0310 	and.w	r3, r3, #16
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	f000 8143 	beq.w	800900e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d8c:	f003 0310 	and.w	r3, r3, #16
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	f000 813c 	beq.w	800900e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008d96:	2300      	movs	r3, #0
 8008d98:	60bb      	str	r3, [r7, #8]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	60bb      	str	r3, [r7, #8]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	60bb      	str	r3, [r7, #8]
 8008daa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008db6:	2b40      	cmp	r3, #64	@ 0x40
 8008db8:	f040 80b4 	bne.w	8008f24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008dc8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	f000 8140 	beq.w	8009052 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	f080 8139 	bcs.w	8009052 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008de6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008df2:	f000 8088 	beq.w	8008f06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	330c      	adds	r3, #12
 8008dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008e04:	e853 3f00 	ldrex	r3, [r3]
 8008e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008e0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e14:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	330c      	adds	r3, #12
 8008e1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008e22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008e26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008e32:	e841 2300 	strex	r3, r2, [r1]
 8008e36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d1d9      	bne.n	8008df6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	3314      	adds	r3, #20
 8008e48:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008e4c:	e853 3f00 	ldrex	r3, [r3]
 8008e50:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008e52:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008e54:	f023 0301 	bic.w	r3, r3, #1
 8008e58:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3314      	adds	r3, #20
 8008e62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008e66:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008e6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008e6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008e78:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e1      	bne.n	8008e42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3314      	adds	r3, #20
 8008e84:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008e8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008e90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	3314      	adds	r3, #20
 8008e9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ea2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ea4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ea8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008eb0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e3      	bne.n	8008e7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2220      	movs	r2, #32
 8008eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	330c      	adds	r3, #12
 8008eca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ecc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ece:	e853 3f00 	ldrex	r3, [r3]
 8008ed2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ed4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ed6:	f023 0310 	bic.w	r3, r3, #16
 8008eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	330c      	adds	r3, #12
 8008ee4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008ee8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008eea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008eee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008ef0:	e841 2300 	strex	r3, r2, [r1]
 8008ef4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008ef6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1e3      	bne.n	8008ec4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7fc fb19 	bl	8005538 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	4619      	mov	r1, r3
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7f8 fcee 	bl	80018f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f1c:	e099      	b.n	8009052 <HAL_UART_IRQHandler+0x50e>
 8008f1e:	bf00      	nop
 8008f20:	080095bf 	.word	0x080095bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f000 808b 	beq.w	8009056 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	f000 8086 	beq.w	8009056 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	330c      	adds	r3, #12
 8008f50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f54:	e853 3f00 	ldrex	r3, [r3]
 8008f58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008f60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	330c      	adds	r3, #12
 8008f6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008f6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008f70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008f74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008f76:	e841 2300 	strex	r3, r2, [r1]
 8008f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d1e3      	bne.n	8008f4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	3314      	adds	r3, #20
 8008f88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	623b      	str	r3, [r7, #32]
   return(result);
 8008f92:	6a3b      	ldr	r3, [r7, #32]
 8008f94:	f023 0301 	bic.w	r3, r3, #1
 8008f98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	3314      	adds	r3, #20
 8008fa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008fa6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e3      	bne.n	8008f82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2220      	movs	r2, #32
 8008fbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	330c      	adds	r3, #12
 8008fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	e853 3f00 	ldrex	r3, [r3]
 8008fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f023 0310 	bic.w	r3, r3, #16
 8008fde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	330c      	adds	r3, #12
 8008fe8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008fec:	61fa      	str	r2, [r7, #28]
 8008fee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	69b9      	ldr	r1, [r7, #24]
 8008ff2:	69fa      	ldr	r2, [r7, #28]
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e3      	bne.n	8008fc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7f8 fc76 	bl	80018f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800900c:	e023      	b.n	8009056 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800900e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009016:	2b00      	cmp	r3, #0
 8009018:	d009      	beq.n	800902e <HAL_UART_IRQHandler+0x4ea>
 800901a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800901e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009022:	2b00      	cmp	r3, #0
 8009024:	d003      	beq.n	800902e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f000 fadd 	bl	80095e6 <UART_Transmit_IT>
    return;
 800902c:	e014      	b.n	8009058 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800902e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00e      	beq.n	8009058 <HAL_UART_IRQHandler+0x514>
 800903a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800903e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009042:	2b00      	cmp	r3, #0
 8009044:	d008      	beq.n	8009058 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fb1d 	bl	8009686 <UART_EndTransmit_IT>
    return;
 800904c:	e004      	b.n	8009058 <HAL_UART_IRQHandler+0x514>
    return;
 800904e:	bf00      	nop
 8009050:	e002      	b.n	8009058 <HAL_UART_IRQHandler+0x514>
      return;
 8009052:	bf00      	nop
 8009054:	e000      	b.n	8009058 <HAL_UART_IRQHandler+0x514>
      return;
 8009056:	bf00      	nop
  }
}
 8009058:	37e8      	adds	r7, #232	@ 0xe8
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop

08009060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009060:	b480      	push	{r7}
 8009062:	b083      	sub	sp, #12
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009068:	bf00      	nop
 800906a:	370c      	adds	r7, #12
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800907c:	bf00      	nop
 800907e:	370c      	adds	r7, #12
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr

08009088 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80090a4:	bf00      	nop
 80090a6:	370c      	adds	r7, #12
 80090a8:	46bd      	mov	sp, r7
 80090aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ae:	4770      	bx	lr

080090b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b090      	sub	sp, #64	@ 0x40
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d137      	bne.n	8009150 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80090e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e2:	2200      	movs	r2, #0
 80090e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	3314      	adds	r3, #20
 80090ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090f0:	e853 3f00 	ldrex	r3, [r3]
 80090f4:	623b      	str	r3, [r7, #32]
   return(result);
 80090f6:	6a3b      	ldr	r3, [r7, #32]
 80090f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3314      	adds	r3, #20
 8009104:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009106:	633a      	str	r2, [r7, #48]	@ 0x30
 8009108:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800910c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800910e:	e841 2300 	strex	r3, r2, [r1]
 8009112:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009116:	2b00      	cmp	r3, #0
 8009118:	d1e5      	bne.n	80090e6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800911a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	330c      	adds	r3, #12
 8009120:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	e853 3f00 	ldrex	r3, [r3]
 8009128:	60fb      	str	r3, [r7, #12]
   return(result);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009130:	637b      	str	r3, [r7, #52]	@ 0x34
 8009132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	330c      	adds	r3, #12
 8009138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800913a:	61fa      	str	r2, [r7, #28]
 800913c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800913e:	69b9      	ldr	r1, [r7, #24]
 8009140:	69fa      	ldr	r2, [r7, #28]
 8009142:	e841 2300 	strex	r3, r2, [r1]
 8009146:	617b      	str	r3, [r7, #20]
   return(result);
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1e5      	bne.n	800911a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800914e:	e002      	b.n	8009156 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009150:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009152:	f7ff ff85 	bl	8009060 <HAL_UART_TxCpltCallback>
}
 8009156:	bf00      	nop
 8009158:	3740      	adds	r7, #64	@ 0x40
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800916a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7ff ff81 	bl	8009074 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009172:	bf00      	nop
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}

0800917a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800917a:	b580      	push	{r7, lr}
 800917c:	b09c      	sub	sp, #112	@ 0x70
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009186:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009192:	2b00      	cmp	r3, #0
 8009194:	d172      	bne.n	800927c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009196:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009198:	2200      	movs	r2, #0
 800919a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800919c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	330c      	adds	r3, #12
 80091a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091a6:	e853 3f00 	ldrex	r3, [r3]
 80091aa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091b2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	330c      	adds	r3, #12
 80091ba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80091bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80091be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091c4:	e841 2300 	strex	r3, r2, [r1]
 80091c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1e5      	bne.n	800919c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3314      	adds	r3, #20
 80091d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091da:	e853 3f00 	ldrex	r3, [r3]
 80091de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e2:	f023 0301 	bic.w	r3, r3, #1
 80091e6:	667b      	str	r3, [r7, #100]	@ 0x64
 80091e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3314      	adds	r3, #20
 80091ee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091f0:	647a      	str	r2, [r7, #68]	@ 0x44
 80091f2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091f8:	e841 2300 	strex	r3, r2, [r1]
 80091fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1e5      	bne.n	80091d0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	3314      	adds	r3, #20
 800920a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	623b      	str	r3, [r7, #32]
   return(result);
 8009214:	6a3b      	ldr	r3, [r7, #32]
 8009216:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800921a:	663b      	str	r3, [r7, #96]	@ 0x60
 800921c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3314      	adds	r3, #20
 8009222:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009224:	633a      	str	r2, [r7, #48]	@ 0x30
 8009226:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800922a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800922c:	e841 2300 	strex	r3, r2, [r1]
 8009230:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e5      	bne.n	8009204 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009238:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800923a:	2220      	movs	r2, #32
 800923c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009244:	2b01      	cmp	r3, #1
 8009246:	d119      	bne.n	800927c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	330c      	adds	r3, #12
 800924e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	e853 3f00 	ldrex	r3, [r3]
 8009256:	60fb      	str	r3, [r7, #12]
   return(result);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f023 0310 	bic.w	r3, r3, #16
 800925e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009260:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	330c      	adds	r3, #12
 8009266:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009268:	61fa      	str	r2, [r7, #28]
 800926a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926c:	69b9      	ldr	r1, [r7, #24]
 800926e:	69fa      	ldr	r2, [r7, #28]
 8009270:	e841 2300 	strex	r3, r2, [r1]
 8009274:	617b      	str	r3, [r7, #20]
   return(result);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d1e5      	bne.n	8009248 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800927c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800927e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009280:	2b01      	cmp	r3, #1
 8009282:	d106      	bne.n	8009292 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009284:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009286:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009288:	4619      	mov	r1, r3
 800928a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800928c:	f7f8 fb34 	bl	80018f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009290:	e002      	b.n	8009298 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009292:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009294:	f7ff fef8 	bl	8009088 <HAL_UART_RxCpltCallback>
}
 8009298:	bf00      	nop
 800929a:	3770      	adds	r7, #112	@ 0x70
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ac:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b2:	2b01      	cmp	r3, #1
 80092b4:	d108      	bne.n	80092c8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80092ba:	085b      	lsrs	r3, r3, #1
 80092bc:	b29b      	uxth	r3, r3
 80092be:	4619      	mov	r1, r3
 80092c0:	68f8      	ldr	r0, [r7, #12]
 80092c2:	f7f8 fb19 	bl	80018f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092c6:	e002      	b.n	80092ce <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80092c8:	68f8      	ldr	r0, [r7, #12]
 80092ca:	f7ff fee7 	bl	800909c <HAL_UART_RxHalfCpltCallback>
}
 80092ce:	bf00      	nop
 80092d0:	3710      	adds	r7, #16
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80092de:	2300      	movs	r3, #0
 80092e0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092f2:	2b80      	cmp	r3, #128	@ 0x80
 80092f4:	bf0c      	ite	eq
 80092f6:	2301      	moveq	r3, #1
 80092f8:	2300      	movne	r3, #0
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b21      	cmp	r3, #33	@ 0x21
 8009308:	d108      	bne.n	800931c <UART_DMAError+0x46>
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	2200      	movs	r2, #0
 8009314:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009316:	68b8      	ldr	r0, [r7, #8]
 8009318:	f000 f8c6 	bl	80094a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009326:	2b40      	cmp	r3, #64	@ 0x40
 8009328:	bf0c      	ite	eq
 800932a:	2301      	moveq	r3, #1
 800932c:	2300      	movne	r3, #0
 800932e:	b2db      	uxtb	r3, r3
 8009330:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009338:	b2db      	uxtb	r3, r3
 800933a:	2b22      	cmp	r3, #34	@ 0x22
 800933c:	d108      	bne.n	8009350 <UART_DMAError+0x7a>
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	2200      	movs	r2, #0
 8009348:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800934a:	68b8      	ldr	r0, [r7, #8]
 800934c:	f000 f8d4 	bl	80094f8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009354:	f043 0210 	orr.w	r2, r3, #16
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800935c:	68b8      	ldr	r0, [r7, #8]
 800935e:	f7ff fea7 	bl	80090b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009362:	bf00      	nop
 8009364:	3710      	adds	r7, #16
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
	...

0800936c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b098      	sub	sp, #96	@ 0x60
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	4613      	mov	r3, r2
 8009378:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	88fa      	ldrh	r2, [r7, #6]
 8009384:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2222      	movs	r2, #34	@ 0x22
 8009390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009398:	4a40      	ldr	r2, [pc, #256]	@ (800949c <UART_Start_Receive_DMA+0x130>)
 800939a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a0:	4a3f      	ldr	r2, [pc, #252]	@ (80094a0 <UART_Start_Receive_DMA+0x134>)
 80093a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a8:	4a3e      	ldr	r2, [pc, #248]	@ (80094a4 <UART_Start_Receive_DMA+0x138>)
 80093aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b0:	2200      	movs	r2, #0
 80093b2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80093b4:	f107 0308 	add.w	r3, r7, #8
 80093b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3304      	adds	r3, #4
 80093c4:	4619      	mov	r1, r3
 80093c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	88fb      	ldrh	r3, [r7, #6]
 80093cc:	f7fc f85c 	bl	8005488 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80093d0:	2300      	movs	r3, #0
 80093d2:	613b      	str	r3, [r7, #16]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	613b      	str	r3, [r7, #16]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	691b      	ldr	r3, [r3, #16]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d019      	beq.n	800942a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	330c      	adds	r3, #12
 80093fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009408:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800940c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	330c      	adds	r3, #12
 8009414:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009416:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009418:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800941c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009424:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e5      	bne.n	80093f6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3314      	adds	r3, #20
 8009430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800943a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800943c:	f043 0301 	orr.w	r3, r3, #1
 8009440:	657b      	str	r3, [r7, #84]	@ 0x54
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3314      	adds	r3, #20
 8009448:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800944a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800944c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009450:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009452:	e841 2300 	strex	r3, r2, [r1]
 8009456:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e5      	bne.n	800942a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	3314      	adds	r3, #20
 8009464:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009466:	69bb      	ldr	r3, [r7, #24]
 8009468:	e853 3f00 	ldrex	r3, [r3]
 800946c:	617b      	str	r3, [r7, #20]
   return(result);
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009474:	653b      	str	r3, [r7, #80]	@ 0x50
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3314      	adds	r3, #20
 800947c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800947e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009482:	6a39      	ldr	r1, [r7, #32]
 8009484:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009486:	e841 2300 	strex	r3, r2, [r1]
 800948a:	61fb      	str	r3, [r7, #28]
   return(result);
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1e5      	bne.n	800945e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3760      	adds	r7, #96	@ 0x60
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}
 800949c:	0800917b 	.word	0x0800917b
 80094a0:	080092a1 	.word	0x080092a1
 80094a4:	080092d7 	.word	0x080092d7

080094a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b089      	sub	sp, #36	@ 0x24
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	330c      	adds	r3, #12
 80094b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	e853 3f00 	ldrex	r3, [r3]
 80094be:	60bb      	str	r3, [r7, #8]
   return(result);
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80094c6:	61fb      	str	r3, [r7, #28]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	330c      	adds	r3, #12
 80094ce:	69fa      	ldr	r2, [r7, #28]
 80094d0:	61ba      	str	r2, [r7, #24]
 80094d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d4:	6979      	ldr	r1, [r7, #20]
 80094d6:	69ba      	ldr	r2, [r7, #24]
 80094d8:	e841 2300 	strex	r3, r2, [r1]
 80094dc:	613b      	str	r3, [r7, #16]
   return(result);
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1e5      	bne.n	80094b0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80094ec:	bf00      	nop
 80094ee:	3724      	adds	r7, #36	@ 0x24
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b095      	sub	sp, #84	@ 0x54
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	330c      	adds	r3, #12
 8009506:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800950a:	e853 3f00 	ldrex	r3, [r3]
 800950e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009512:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009516:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	330c      	adds	r3, #12
 800951e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009520:	643a      	str	r2, [r7, #64]	@ 0x40
 8009522:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009524:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009526:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009528:	e841 2300 	strex	r3, r2, [r1]
 800952c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800952e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009530:	2b00      	cmp	r3, #0
 8009532:	d1e5      	bne.n	8009500 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	3314      	adds	r3, #20
 800953a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	61fb      	str	r3, [r7, #28]
   return(result);
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	f023 0301 	bic.w	r3, r3, #1
 800954a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	3314      	adds	r3, #20
 8009552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009554:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009556:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800955a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800955c:	e841 2300 	strex	r3, r2, [r1]
 8009560:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009564:	2b00      	cmp	r3, #0
 8009566:	d1e5      	bne.n	8009534 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800956c:	2b01      	cmp	r3, #1
 800956e:	d119      	bne.n	80095a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	330c      	adds	r3, #12
 8009576:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	e853 3f00 	ldrex	r3, [r3]
 800957e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	f023 0310 	bic.w	r3, r3, #16
 8009586:	647b      	str	r3, [r7, #68]	@ 0x44
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	330c      	adds	r3, #12
 800958e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009590:	61ba      	str	r2, [r7, #24]
 8009592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009594:	6979      	ldr	r1, [r7, #20]
 8009596:	69ba      	ldr	r2, [r7, #24]
 8009598:	e841 2300 	strex	r3, r2, [r1]
 800959c:	613b      	str	r3, [r7, #16]
   return(result);
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d1e5      	bne.n	8009570 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	2220      	movs	r2, #32
 80095a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80095b2:	bf00      	nop
 80095b4:	3754      	adds	r7, #84	@ 0x54
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr

080095be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095be:	b580      	push	{r7, lr}
 80095c0:	b084      	sub	sp, #16
 80095c2:	af00      	add	r7, sp, #0
 80095c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80095d8:	68f8      	ldr	r0, [r7, #12]
 80095da:	f7ff fd69 	bl	80090b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80095de:	bf00      	nop
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b085      	sub	sp, #20
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b21      	cmp	r3, #33	@ 0x21
 80095f8:	d13e      	bne.n	8009678 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	689b      	ldr	r3, [r3, #8]
 80095fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009602:	d114      	bne.n	800962e <UART_Transmit_IT+0x48>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d110      	bne.n	800962e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6a1b      	ldr	r3, [r3, #32]
 8009610:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	461a      	mov	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009620:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1b      	ldr	r3, [r3, #32]
 8009626:	1c9a      	adds	r2, r3, #2
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	621a      	str	r2, [r3, #32]
 800962c:	e008      	b.n	8009640 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	6a1b      	ldr	r3, [r3, #32]
 8009632:	1c59      	adds	r1, r3, #1
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	6211      	str	r1, [r2, #32]
 8009638:	781a      	ldrb	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009644:	b29b      	uxth	r3, r3
 8009646:	3b01      	subs	r3, #1
 8009648:	b29b      	uxth	r3, r3
 800964a:	687a      	ldr	r2, [r7, #4]
 800964c:	4619      	mov	r1, r3
 800964e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10f      	bne.n	8009674 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68da      	ldr	r2, [r3, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009662:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	68da      	ldr	r2, [r3, #12]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009672:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009674:	2300      	movs	r3, #0
 8009676:	e000      	b.n	800967a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009678:	2302      	movs	r3, #2
  }
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68da      	ldr	r2, [r3, #12]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800969c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2220      	movs	r2, #32
 80096a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f7ff fcda 	bl	8009060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3708      	adds	r7, #8
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b08c      	sub	sp, #48	@ 0x30
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b22      	cmp	r3, #34	@ 0x22
 80096c8:	f040 80ab 	bne.w	8009822 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096d4:	d117      	bne.n	8009706 <UART_Receive_IT+0x50>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	691b      	ldr	r3, [r3, #16]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d113      	bne.n	8009706 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80096de:	2300      	movs	r3, #0
 80096e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096fe:	1c9a      	adds	r2, r3, #2
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	629a      	str	r2, [r3, #40]	@ 0x28
 8009704:	e026      	b.n	8009754 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800970a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800970c:	2300      	movs	r3, #0
 800970e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009718:	d007      	beq.n	800972a <UART_Receive_IT+0x74>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10a      	bne.n	8009738 <UART_Receive_IT+0x82>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	691b      	ldr	r3, [r3, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d106      	bne.n	8009738 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	b2da      	uxtb	r2, r3
 8009732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009734:	701a      	strb	r2, [r3, #0]
 8009736:	e008      	b.n	800974a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	b2db      	uxtb	r3, r3
 8009740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009744:	b2da      	uxtb	r2, r3
 8009746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009748:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800974e:	1c5a      	adds	r2, r3, #1
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009758:	b29b      	uxth	r3, r3
 800975a:	3b01      	subs	r3, #1
 800975c:	b29b      	uxth	r3, r3
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	4619      	mov	r1, r3
 8009762:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009764:	2b00      	cmp	r3, #0
 8009766:	d15a      	bne.n	800981e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	68da      	ldr	r2, [r3, #12]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0220 	bic.w	r2, r2, #32
 8009776:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009786:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	695a      	ldr	r2, [r3, #20]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0201 	bic.w	r2, r2, #1
 8009796:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097a4:	2b01      	cmp	r3, #1
 80097a6:	d135      	bne.n	8009814 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	330c      	adds	r3, #12
 80097b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	613b      	str	r3, [r7, #16]
   return(result);
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	f023 0310 	bic.w	r3, r3, #16
 80097c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	330c      	adds	r3, #12
 80097cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80097ce:	623a      	str	r2, [r7, #32]
 80097d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	69f9      	ldr	r1, [r7, #28]
 80097d4:	6a3a      	ldr	r2, [r7, #32]
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	61bb      	str	r3, [r7, #24]
   return(result);
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e5      	bne.n	80097ae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b10      	cmp	r3, #16
 80097ee:	d10a      	bne.n	8009806 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097f0:	2300      	movs	r3, #0
 80097f2:	60fb      	str	r3, [r7, #12]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	60fb      	str	r3, [r7, #12]
 8009804:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800980a:	4619      	mov	r1, r3
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f7f8 f873 	bl	80018f8 <HAL_UARTEx_RxEventCallback>
 8009812:	e002      	b.n	800981a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff fc37 	bl	8009088 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800981a:	2300      	movs	r3, #0
 800981c:	e002      	b.n	8009824 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	e000      	b.n	8009824 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009822:	2302      	movs	r3, #2
  }
}
 8009824:	4618      	mov	r0, r3
 8009826:	3730      	adds	r7, #48	@ 0x30
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800982c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009830:	b0c0      	sub	sp, #256	@ 0x100
 8009832:	af00      	add	r7, sp, #0
 8009834:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009848:	68d9      	ldr	r1, [r3, #12]
 800984a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	ea40 0301 	orr.w	r3, r0, r1
 8009854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	431a      	orrs	r2, r3
 8009864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009868:	695b      	ldr	r3, [r3, #20]
 800986a:	431a      	orrs	r2, r3
 800986c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009870:	69db      	ldr	r3, [r3, #28]
 8009872:	4313      	orrs	r3, r2
 8009874:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009884:	f021 010c 	bic.w	r1, r1, #12
 8009888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009892:	430b      	orrs	r3, r1
 8009894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	695b      	ldr	r3, [r3, #20]
 800989e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80098a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098a6:	6999      	ldr	r1, [r3, #24]
 80098a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	ea40 0301 	orr.w	r3, r0, r1
 80098b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b8f      	ldr	r3, [pc, #572]	@ (8009af8 <UART_SetConfig+0x2cc>)
 80098bc:	429a      	cmp	r2, r3
 80098be:	d005      	beq.n	80098cc <UART_SetConfig+0xa0>
 80098c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	4b8d      	ldr	r3, [pc, #564]	@ (8009afc <UART_SetConfig+0x2d0>)
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d104      	bne.n	80098d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098cc:	f7fd fd3c 	bl	8007348 <HAL_RCC_GetPCLK2Freq>
 80098d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80098d4:	e003      	b.n	80098de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098d6:	f7fd fd23 	bl	8007320 <HAL_RCC_GetPCLK1Freq>
 80098da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098e8:	f040 810c 	bne.w	8009b04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80098ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80098f0:	2200      	movs	r2, #0
 80098f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80098f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80098fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80098fe:	4622      	mov	r2, r4
 8009900:	462b      	mov	r3, r5
 8009902:	1891      	adds	r1, r2, r2
 8009904:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009906:	415b      	adcs	r3, r3
 8009908:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800990a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800990e:	4621      	mov	r1, r4
 8009910:	eb12 0801 	adds.w	r8, r2, r1
 8009914:	4629      	mov	r1, r5
 8009916:	eb43 0901 	adc.w	r9, r3, r1
 800991a:	f04f 0200 	mov.w	r2, #0
 800991e:	f04f 0300 	mov.w	r3, #0
 8009922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800992a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800992e:	4690      	mov	r8, r2
 8009930:	4699      	mov	r9, r3
 8009932:	4623      	mov	r3, r4
 8009934:	eb18 0303 	adds.w	r3, r8, r3
 8009938:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800993c:	462b      	mov	r3, r5
 800993e:	eb49 0303 	adc.w	r3, r9, r3
 8009942:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009952:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800995a:	460b      	mov	r3, r1
 800995c:	18db      	adds	r3, r3, r3
 800995e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009960:	4613      	mov	r3, r2
 8009962:	eb42 0303 	adc.w	r3, r2, r3
 8009966:	657b      	str	r3, [r7, #84]	@ 0x54
 8009968:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800996c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009970:	f7f6 fc86 	bl	8000280 <__aeabi_uldivmod>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4b61      	ldr	r3, [pc, #388]	@ (8009b00 <UART_SetConfig+0x2d4>)
 800997a:	fba3 2302 	umull	r2, r3, r3, r2
 800997e:	095b      	lsrs	r3, r3, #5
 8009980:	011c      	lsls	r4, r3, #4
 8009982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009986:	2200      	movs	r2, #0
 8009988:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800998c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009990:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009994:	4642      	mov	r2, r8
 8009996:	464b      	mov	r3, r9
 8009998:	1891      	adds	r1, r2, r2
 800999a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800999c:	415b      	adcs	r3, r3
 800999e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80099a4:	4641      	mov	r1, r8
 80099a6:	eb12 0a01 	adds.w	sl, r2, r1
 80099aa:	4649      	mov	r1, r9
 80099ac:	eb43 0b01 	adc.w	fp, r3, r1
 80099b0:	f04f 0200 	mov.w	r2, #0
 80099b4:	f04f 0300 	mov.w	r3, #0
 80099b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80099bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80099c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099c4:	4692      	mov	sl, r2
 80099c6:	469b      	mov	fp, r3
 80099c8:	4643      	mov	r3, r8
 80099ca:	eb1a 0303 	adds.w	r3, sl, r3
 80099ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80099d2:	464b      	mov	r3, r9
 80099d4:	eb4b 0303 	adc.w	r3, fp, r3
 80099d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80099dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80099ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80099f0:	460b      	mov	r3, r1
 80099f2:	18db      	adds	r3, r3, r3
 80099f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80099f6:	4613      	mov	r3, r2
 80099f8:	eb42 0303 	adc.w	r3, r2, r3
 80099fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80099fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009a02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009a06:	f7f6 fc3b 	bl	8000280 <__aeabi_uldivmod>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	4611      	mov	r1, r2
 8009a10:	4b3b      	ldr	r3, [pc, #236]	@ (8009b00 <UART_SetConfig+0x2d4>)
 8009a12:	fba3 2301 	umull	r2, r3, r3, r1
 8009a16:	095b      	lsrs	r3, r3, #5
 8009a18:	2264      	movs	r2, #100	@ 0x64
 8009a1a:	fb02 f303 	mul.w	r3, r2, r3
 8009a1e:	1acb      	subs	r3, r1, r3
 8009a20:	00db      	lsls	r3, r3, #3
 8009a22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009a26:	4b36      	ldr	r3, [pc, #216]	@ (8009b00 <UART_SetConfig+0x2d4>)
 8009a28:	fba3 2302 	umull	r2, r3, r3, r2
 8009a2c:	095b      	lsrs	r3, r3, #5
 8009a2e:	005b      	lsls	r3, r3, #1
 8009a30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009a34:	441c      	add	r4, r3
 8009a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009a40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009a44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009a48:	4642      	mov	r2, r8
 8009a4a:	464b      	mov	r3, r9
 8009a4c:	1891      	adds	r1, r2, r2
 8009a4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009a50:	415b      	adcs	r3, r3
 8009a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009a58:	4641      	mov	r1, r8
 8009a5a:	1851      	adds	r1, r2, r1
 8009a5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8009a5e:	4649      	mov	r1, r9
 8009a60:	414b      	adcs	r3, r1
 8009a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a64:	f04f 0200 	mov.w	r2, #0
 8009a68:	f04f 0300 	mov.w	r3, #0
 8009a6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009a70:	4659      	mov	r1, fp
 8009a72:	00cb      	lsls	r3, r1, #3
 8009a74:	4651      	mov	r1, sl
 8009a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009a7a:	4651      	mov	r1, sl
 8009a7c:	00ca      	lsls	r2, r1, #3
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4619      	mov	r1, r3
 8009a82:	4603      	mov	r3, r0
 8009a84:	4642      	mov	r2, r8
 8009a86:	189b      	adds	r3, r3, r2
 8009a88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a8c:	464b      	mov	r3, r9
 8009a8e:	460a      	mov	r2, r1
 8009a90:	eb42 0303 	adc.w	r3, r2, r3
 8009a94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009aac:	460b      	mov	r3, r1
 8009aae:	18db      	adds	r3, r3, r3
 8009ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	eb42 0303 	adc.w	r3, r2, r3
 8009ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009abe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009ac2:	f7f6 fbdd 	bl	8000280 <__aeabi_uldivmod>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4b0d      	ldr	r3, [pc, #52]	@ (8009b00 <UART_SetConfig+0x2d4>)
 8009acc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ad0:	095b      	lsrs	r3, r3, #5
 8009ad2:	2164      	movs	r1, #100	@ 0x64
 8009ad4:	fb01 f303 	mul.w	r3, r1, r3
 8009ad8:	1ad3      	subs	r3, r2, r3
 8009ada:	00db      	lsls	r3, r3, #3
 8009adc:	3332      	adds	r3, #50	@ 0x32
 8009ade:	4a08      	ldr	r2, [pc, #32]	@ (8009b00 <UART_SetConfig+0x2d4>)
 8009ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ae4:	095b      	lsrs	r3, r3, #5
 8009ae6:	f003 0207 	and.w	r2, r3, #7
 8009aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4422      	add	r2, r4
 8009af2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009af4:	e106      	b.n	8009d04 <UART_SetConfig+0x4d8>
 8009af6:	bf00      	nop
 8009af8:	40011000 	.word	0x40011000
 8009afc:	40011400 	.word	0x40011400
 8009b00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b0e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009b12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009b16:	4642      	mov	r2, r8
 8009b18:	464b      	mov	r3, r9
 8009b1a:	1891      	adds	r1, r2, r2
 8009b1c:	6239      	str	r1, [r7, #32]
 8009b1e:	415b      	adcs	r3, r3
 8009b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b26:	4641      	mov	r1, r8
 8009b28:	1854      	adds	r4, r2, r1
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	eb43 0501 	adc.w	r5, r3, r1
 8009b30:	f04f 0200 	mov.w	r2, #0
 8009b34:	f04f 0300 	mov.w	r3, #0
 8009b38:	00eb      	lsls	r3, r5, #3
 8009b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b3e:	00e2      	lsls	r2, r4, #3
 8009b40:	4614      	mov	r4, r2
 8009b42:	461d      	mov	r5, r3
 8009b44:	4643      	mov	r3, r8
 8009b46:	18e3      	adds	r3, r4, r3
 8009b48:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009b4c:	464b      	mov	r3, r9
 8009b4e:	eb45 0303 	adc.w	r3, r5, r3
 8009b52:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009b62:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009b66:	f04f 0200 	mov.w	r2, #0
 8009b6a:	f04f 0300 	mov.w	r3, #0
 8009b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009b72:	4629      	mov	r1, r5
 8009b74:	008b      	lsls	r3, r1, #2
 8009b76:	4621      	mov	r1, r4
 8009b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b7c:	4621      	mov	r1, r4
 8009b7e:	008a      	lsls	r2, r1, #2
 8009b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009b84:	f7f6 fb7c 	bl	8000280 <__aeabi_uldivmod>
 8009b88:	4602      	mov	r2, r0
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	4b60      	ldr	r3, [pc, #384]	@ (8009d10 <UART_SetConfig+0x4e4>)
 8009b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8009b92:	095b      	lsrs	r3, r3, #5
 8009b94:	011c      	lsls	r4, r3, #4
 8009b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ba0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ba8:	4642      	mov	r2, r8
 8009baa:	464b      	mov	r3, r9
 8009bac:	1891      	adds	r1, r2, r2
 8009bae:	61b9      	str	r1, [r7, #24]
 8009bb0:	415b      	adcs	r3, r3
 8009bb2:	61fb      	str	r3, [r7, #28]
 8009bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009bb8:	4641      	mov	r1, r8
 8009bba:	1851      	adds	r1, r2, r1
 8009bbc:	6139      	str	r1, [r7, #16]
 8009bbe:	4649      	mov	r1, r9
 8009bc0:	414b      	adcs	r3, r1
 8009bc2:	617b      	str	r3, [r7, #20]
 8009bc4:	f04f 0200 	mov.w	r2, #0
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009bd0:	4659      	mov	r1, fp
 8009bd2:	00cb      	lsls	r3, r1, #3
 8009bd4:	4651      	mov	r1, sl
 8009bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bda:	4651      	mov	r1, sl
 8009bdc:	00ca      	lsls	r2, r1, #3
 8009bde:	4610      	mov	r0, r2
 8009be0:	4619      	mov	r1, r3
 8009be2:	4603      	mov	r3, r0
 8009be4:	4642      	mov	r2, r8
 8009be6:	189b      	adds	r3, r3, r2
 8009be8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009bec:	464b      	mov	r3, r9
 8009bee:	460a      	mov	r2, r1
 8009bf0:	eb42 0303 	adc.w	r3, r2, r3
 8009bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009c04:	f04f 0200 	mov.w	r2, #0
 8009c08:	f04f 0300 	mov.w	r3, #0
 8009c0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009c10:	4649      	mov	r1, r9
 8009c12:	008b      	lsls	r3, r1, #2
 8009c14:	4641      	mov	r1, r8
 8009c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c1a:	4641      	mov	r1, r8
 8009c1c:	008a      	lsls	r2, r1, #2
 8009c1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009c22:	f7f6 fb2d 	bl	8000280 <__aeabi_uldivmod>
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	4611      	mov	r1, r2
 8009c2c:	4b38      	ldr	r3, [pc, #224]	@ (8009d10 <UART_SetConfig+0x4e4>)
 8009c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8009c32:	095b      	lsrs	r3, r3, #5
 8009c34:	2264      	movs	r2, #100	@ 0x64
 8009c36:	fb02 f303 	mul.w	r3, r2, r3
 8009c3a:	1acb      	subs	r3, r1, r3
 8009c3c:	011b      	lsls	r3, r3, #4
 8009c3e:	3332      	adds	r3, #50	@ 0x32
 8009c40:	4a33      	ldr	r2, [pc, #204]	@ (8009d10 <UART_SetConfig+0x4e4>)
 8009c42:	fba2 2303 	umull	r2, r3, r2, r3
 8009c46:	095b      	lsrs	r3, r3, #5
 8009c48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009c4c:	441c      	add	r4, r3
 8009c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c52:	2200      	movs	r2, #0
 8009c54:	673b      	str	r3, [r7, #112]	@ 0x70
 8009c56:	677a      	str	r2, [r7, #116]	@ 0x74
 8009c58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009c5c:	4642      	mov	r2, r8
 8009c5e:	464b      	mov	r3, r9
 8009c60:	1891      	adds	r1, r2, r2
 8009c62:	60b9      	str	r1, [r7, #8]
 8009c64:	415b      	adcs	r3, r3
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c6c:	4641      	mov	r1, r8
 8009c6e:	1851      	adds	r1, r2, r1
 8009c70:	6039      	str	r1, [r7, #0]
 8009c72:	4649      	mov	r1, r9
 8009c74:	414b      	adcs	r3, r1
 8009c76:	607b      	str	r3, [r7, #4]
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	f04f 0300 	mov.w	r3, #0
 8009c80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009c84:	4659      	mov	r1, fp
 8009c86:	00cb      	lsls	r3, r1, #3
 8009c88:	4651      	mov	r1, sl
 8009c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c8e:	4651      	mov	r1, sl
 8009c90:	00ca      	lsls	r2, r1, #3
 8009c92:	4610      	mov	r0, r2
 8009c94:	4619      	mov	r1, r3
 8009c96:	4603      	mov	r3, r0
 8009c98:	4642      	mov	r2, r8
 8009c9a:	189b      	adds	r3, r3, r2
 8009c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c9e:	464b      	mov	r3, r9
 8009ca0:	460a      	mov	r2, r1
 8009ca2:	eb42 0303 	adc.w	r3, r2, r3
 8009ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cb2:	667a      	str	r2, [r7, #100]	@ 0x64
 8009cb4:	f04f 0200 	mov.w	r2, #0
 8009cb8:	f04f 0300 	mov.w	r3, #0
 8009cbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009cc0:	4649      	mov	r1, r9
 8009cc2:	008b      	lsls	r3, r1, #2
 8009cc4:	4641      	mov	r1, r8
 8009cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cca:	4641      	mov	r1, r8
 8009ccc:	008a      	lsls	r2, r1, #2
 8009cce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009cd2:	f7f6 fad5 	bl	8000280 <__aeabi_uldivmod>
 8009cd6:	4602      	mov	r2, r0
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4b0d      	ldr	r3, [pc, #52]	@ (8009d10 <UART_SetConfig+0x4e4>)
 8009cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8009ce0:	095b      	lsrs	r3, r3, #5
 8009ce2:	2164      	movs	r1, #100	@ 0x64
 8009ce4:	fb01 f303 	mul.w	r3, r1, r3
 8009ce8:	1ad3      	subs	r3, r2, r3
 8009cea:	011b      	lsls	r3, r3, #4
 8009cec:	3332      	adds	r3, #50	@ 0x32
 8009cee:	4a08      	ldr	r2, [pc, #32]	@ (8009d10 <UART_SetConfig+0x4e4>)
 8009cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cf4:	095b      	lsrs	r3, r3, #5
 8009cf6:	f003 020f 	and.w	r2, r3, #15
 8009cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4422      	add	r2, r4
 8009d02:	609a      	str	r2, [r3, #8]
}
 8009d04:	bf00      	nop
 8009d06:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d10:	51eb851f 	.word	0x51eb851f

08009d14 <__NVIC_SetPriority>:
{
 8009d14:	b480      	push	{r7}
 8009d16:	b083      	sub	sp, #12
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	6039      	str	r1, [r7, #0]
 8009d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	db0a      	blt.n	8009d3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	490c      	ldr	r1, [pc, #48]	@ (8009d60 <__NVIC_SetPriority+0x4c>)
 8009d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d32:	0112      	lsls	r2, r2, #4
 8009d34:	b2d2      	uxtb	r2, r2
 8009d36:	440b      	add	r3, r1
 8009d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009d3c:	e00a      	b.n	8009d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	b2da      	uxtb	r2, r3
 8009d42:	4908      	ldr	r1, [pc, #32]	@ (8009d64 <__NVIC_SetPriority+0x50>)
 8009d44:	79fb      	ldrb	r3, [r7, #7]
 8009d46:	f003 030f 	and.w	r3, r3, #15
 8009d4a:	3b04      	subs	r3, #4
 8009d4c:	0112      	lsls	r2, r2, #4
 8009d4e:	b2d2      	uxtb	r2, r2
 8009d50:	440b      	add	r3, r1
 8009d52:	761a      	strb	r2, [r3, #24]
}
 8009d54:	bf00      	nop
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr
 8009d60:	e000e100 	.word	0xe000e100
 8009d64:	e000ed00 	.word	0xe000ed00

08009d68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009d6c:	2100      	movs	r1, #0
 8009d6e:	f06f 0004 	mvn.w	r0, #4
 8009d72:	f7ff ffcf 	bl	8009d14 <__NVIC_SetPriority>
#endif
}
 8009d76:	bf00      	nop
 8009d78:	bd80      	pop	{r7, pc}
	...

08009d7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009d82:	f3ef 8305 	mrs	r3, IPSR
 8009d86:	603b      	str	r3, [r7, #0]
  return(result);
 8009d88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d003      	beq.n	8009d96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009d8e:	f06f 0305 	mvn.w	r3, #5
 8009d92:	607b      	str	r3, [r7, #4]
 8009d94:	e00c      	b.n	8009db0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009d96:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc0 <osKernelInitialize+0x44>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d105      	bne.n	8009daa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009d9e:	4b08      	ldr	r3, [pc, #32]	@ (8009dc0 <osKernelInitialize+0x44>)
 8009da0:	2201      	movs	r2, #1
 8009da2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	607b      	str	r3, [r7, #4]
 8009da8:	e002      	b.n	8009db0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009daa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009db0:	687b      	ldr	r3, [r7, #4]
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	370c      	adds	r7, #12
 8009db6:	46bd      	mov	sp, r7
 8009db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbc:	4770      	bx	lr
 8009dbe:	bf00      	nop
 8009dc0:	20000c80 	.word	0x20000c80

08009dc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b082      	sub	sp, #8
 8009dc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009dca:	f3ef 8305 	mrs	r3, IPSR
 8009dce:	603b      	str	r3, [r7, #0]
  return(result);
 8009dd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d003      	beq.n	8009dde <osKernelStart+0x1a>
    stat = osErrorISR;
 8009dd6:	f06f 0305 	mvn.w	r3, #5
 8009dda:	607b      	str	r3, [r7, #4]
 8009ddc:	e010      	b.n	8009e00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009dde:	4b0b      	ldr	r3, [pc, #44]	@ (8009e0c <osKernelStart+0x48>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d109      	bne.n	8009dfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009de6:	f7ff ffbf 	bl	8009d68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009dea:	4b08      	ldr	r3, [pc, #32]	@ (8009e0c <osKernelStart+0x48>)
 8009dec:	2202      	movs	r2, #2
 8009dee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009df0:	f001 f892 	bl	800af18 <vTaskStartScheduler>
      stat = osOK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	607b      	str	r3, [r7, #4]
 8009df8:	e002      	b.n	8009e00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009dfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e00:	687b      	ldr	r3, [r7, #4]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3708      	adds	r7, #8
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20000c80 	.word	0x20000c80

08009e10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b08e      	sub	sp, #56	@ 0x38
 8009e14:	af04      	add	r7, sp, #16
 8009e16:	60f8      	str	r0, [r7, #12]
 8009e18:	60b9      	str	r1, [r7, #8]
 8009e1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e20:	f3ef 8305 	mrs	r3, IPSR
 8009e24:	617b      	str	r3, [r7, #20]
  return(result);
 8009e26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d17e      	bne.n	8009f2a <osThreadNew+0x11a>
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d07b      	beq.n	8009f2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009e32:	2380      	movs	r3, #128	@ 0x80
 8009e34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009e36:	2318      	movs	r3, #24
 8009e38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009e3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d045      	beq.n	8009ed6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d002      	beq.n	8009e58 <osThreadNew+0x48>
        name = attr->name;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	699b      	ldr	r3, [r3, #24]
 8009e64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d008      	beq.n	8009e7e <osThreadNew+0x6e>
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	2b38      	cmp	r3, #56	@ 0x38
 8009e70:	d805      	bhi.n	8009e7e <osThreadNew+0x6e>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d001      	beq.n	8009e82 <osThreadNew+0x72>
        return (NULL);
 8009e7e:	2300      	movs	r3, #0
 8009e80:	e054      	b.n	8009f2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	089b      	lsrs	r3, r3, #2
 8009e90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00e      	beq.n	8009eb8 <osThreadNew+0xa8>
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	2ba7      	cmp	r3, #167	@ 0xa7
 8009ea0:	d90a      	bls.n	8009eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d006      	beq.n	8009eb8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d002      	beq.n	8009eb8 <osThreadNew+0xa8>
        mem = 1;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	61bb      	str	r3, [r7, #24]
 8009eb6:	e010      	b.n	8009eda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d10c      	bne.n	8009eda <osThreadNew+0xca>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	68db      	ldr	r3, [r3, #12]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d108      	bne.n	8009eda <osThreadNew+0xca>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d104      	bne.n	8009eda <osThreadNew+0xca>
          mem = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	61bb      	str	r3, [r7, #24]
 8009ed4:	e001      	b.n	8009eda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d110      	bne.n	8009f02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ee8:	9202      	str	r2, [sp, #8]
 8009eea:	9301      	str	r3, [sp, #4]
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	9300      	str	r3, [sp, #0]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	6a3a      	ldr	r2, [r7, #32]
 8009ef4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 fe1a 	bl	800ab30 <xTaskCreateStatic>
 8009efc:	4603      	mov	r3, r0
 8009efe:	613b      	str	r3, [r7, #16]
 8009f00:	e013      	b.n	8009f2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d110      	bne.n	8009f2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009f08:	6a3b      	ldr	r3, [r7, #32]
 8009f0a:	b29a      	uxth	r2, r3
 8009f0c:	f107 0310 	add.w	r3, r7, #16
 8009f10:	9301      	str	r3, [sp, #4]
 8009f12:	69fb      	ldr	r3, [r7, #28]
 8009f14:	9300      	str	r3, [sp, #0]
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009f1a:	68f8      	ldr	r0, [r7, #12]
 8009f1c:	f000 fe68 	bl	800abf0 <xTaskCreate>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b01      	cmp	r3, #1
 8009f24:	d001      	beq.n	8009f2a <osThreadNew+0x11a>
            hTask = NULL;
 8009f26:	2300      	movs	r3, #0
 8009f28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009f2a:	693b      	ldr	r3, [r7, #16]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3728      	adds	r7, #40	@ 0x28
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f3c:	f3ef 8305 	mrs	r3, IPSR
 8009f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8009f42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d003      	beq.n	8009f50 <osDelay+0x1c>
    stat = osErrorISR;
 8009f48:	f06f 0305 	mvn.w	r3, #5
 8009f4c:	60fb      	str	r3, [r7, #12]
 8009f4e:	e007      	b.n	8009f60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d002      	beq.n	8009f60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f000 ffa6 	bl	800aeac <vTaskDelay>
    }
  }

  return (stat);
 8009f60:	68fb      	ldr	r3, [r7, #12]
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
	...

08009f6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009f6c:	b480      	push	{r7}
 8009f6e:	b085      	sub	sp, #20
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4a07      	ldr	r2, [pc, #28]	@ (8009f98 <vApplicationGetIdleTaskMemory+0x2c>)
 8009f7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	4a06      	ldr	r2, [pc, #24]	@ (8009f9c <vApplicationGetIdleTaskMemory+0x30>)
 8009f82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	2280      	movs	r2, #128	@ 0x80
 8009f88:	601a      	str	r2, [r3, #0]
}
 8009f8a:	bf00      	nop
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	20000c84 	.word	0x20000c84
 8009f9c:	20000d2c 	.word	0x20000d2c

08009fa0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	60f8      	str	r0, [r7, #12]
 8009fa8:	60b9      	str	r1, [r7, #8]
 8009faa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4a07      	ldr	r2, [pc, #28]	@ (8009fcc <vApplicationGetTimerTaskMemory+0x2c>)
 8009fb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	4a06      	ldr	r2, [pc, #24]	@ (8009fd0 <vApplicationGetTimerTaskMemory+0x30>)
 8009fb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009fbe:	601a      	str	r2, [r3, #0]
}
 8009fc0:	bf00      	nop
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	20000f2c 	.word	0x20000f2c
 8009fd0:	20000fd4 	.word	0x20000fd4

08009fd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f103 0208 	add.w	r2, r3, #8
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009fec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f103 0208 	add.w	r2, r3, #8
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f103 0208 	add.w	r2, r3, #8
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a008:	bf00      	nop
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a022:	bf00      	nop
 800a024:	370c      	adds	r7, #12
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a02e:	b480      	push	{r7}
 800a030:	b085      	sub	sp, #20
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	689a      	ldr	r2, [r3, #8]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	683a      	ldr	r2, [r7, #0]
 800a052:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	683a      	ldr	r2, [r7, #0]
 800a058:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	1c5a      	adds	r2, r3, #1
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	601a      	str	r2, [r3, #0]
}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr

0800a076 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a076:	b480      	push	{r7}
 800a078:	b085      	sub	sp, #20
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a08c:	d103      	bne.n	800a096 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	60fb      	str	r3, [r7, #12]
 800a094:	e00c      	b.n	800a0b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	3308      	adds	r3, #8
 800a09a:	60fb      	str	r3, [r7, #12]
 800a09c:	e002      	b.n	800a0a4 <vListInsert+0x2e>
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	60fb      	str	r3, [r7, #12]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	429a      	cmp	r2, r3
 800a0ae:	d2f6      	bcs.n	800a09e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	685a      	ldr	r2, [r3, #4]
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685b      	ldr	r3, [r3, #4]
 800a0bc:	683a      	ldr	r2, [r7, #0]
 800a0be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	68fa      	ldr	r2, [r7, #12]
 800a0c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	1c5a      	adds	r2, r3, #1
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	601a      	str	r2, [r3, #0]
}
 800a0dc:	bf00      	nop
 800a0de:	3714      	adds	r7, #20
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b085      	sub	sp, #20
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	691b      	ldr	r3, [r3, #16]
 800a0f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	6892      	ldr	r2, [r2, #8]
 800a0fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6852      	ldr	r2, [r2, #4]
 800a108:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	429a      	cmp	r2, r3
 800a112:	d103      	bne.n	800a11c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	1e5a      	subs	r2, r3, #1
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	681b      	ldr	r3, [r3, #0]
}
 800a130:	4618      	mov	r0, r3
 800a132:	3714      	adds	r7, #20
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d10b      	bne.n	800a168 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a168:	f002 fa86 	bl	800c678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a174:	68f9      	ldr	r1, [r7, #12]
 800a176:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a178:	fb01 f303 	mul.w	r3, r1, r3
 800a17c:	441a      	add	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a198:	3b01      	subs	r3, #1
 800a19a:	68f9      	ldr	r1, [r7, #12]
 800a19c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a19e:	fb01 f303 	mul.w	r3, r1, r3
 800a1a2:	441a      	add	r2, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	22ff      	movs	r2, #255	@ 0xff
 800a1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	22ff      	movs	r2, #255	@ 0xff
 800a1b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d114      	bne.n	800a1e8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	691b      	ldr	r3, [r3, #16]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d01a      	beq.n	800a1fc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3310      	adds	r3, #16
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	f001 fa3c 	bl	800b648 <xTaskRemoveFromEventList>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d012      	beq.n	800a1fc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a1d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a20c <xQueueGenericReset+0xd0>)
 800a1d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	f3bf 8f4f 	dsb	sy
 800a1e2:	f3bf 8f6f 	isb	sy
 800a1e6:	e009      	b.n	800a1fc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	3310      	adds	r3, #16
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f7ff fef1 	bl	8009fd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3324      	adds	r3, #36	@ 0x24
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff feec 	bl	8009fd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a1fc:	f002 fa6e 	bl	800c6dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a200:	2301      	movs	r3, #1
}
 800a202:	4618      	mov	r0, r3
 800a204:	3710      	adds	r7, #16
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	e000ed04 	.word	0xe000ed04

0800a210 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a210:	b580      	push	{r7, lr}
 800a212:	b08e      	sub	sp, #56	@ 0x38
 800a214:	af02      	add	r7, sp, #8
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d10b      	bne.n	800a23c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a236:	bf00      	nop
 800a238:	bf00      	nop
 800a23a:	e7fd      	b.n	800a238 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10b      	bne.n	800a25a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a246:	f383 8811 	msr	BASEPRI, r3
 800a24a:	f3bf 8f6f 	isb	sy
 800a24e:	f3bf 8f4f 	dsb	sy
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a254:	bf00      	nop
 800a256:	bf00      	nop
 800a258:	e7fd      	b.n	800a256 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d002      	beq.n	800a266 <xQueueGenericCreateStatic+0x56>
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d001      	beq.n	800a26a <xQueueGenericCreateStatic+0x5a>
 800a266:	2301      	movs	r3, #1
 800a268:	e000      	b.n	800a26c <xQueueGenericCreateStatic+0x5c>
 800a26a:	2300      	movs	r3, #0
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10b      	bne.n	800a288 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a274:	f383 8811 	msr	BASEPRI, r3
 800a278:	f3bf 8f6f 	isb	sy
 800a27c:	f3bf 8f4f 	dsb	sy
 800a280:	623b      	str	r3, [r7, #32]
}
 800a282:	bf00      	nop
 800a284:	bf00      	nop
 800a286:	e7fd      	b.n	800a284 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d102      	bne.n	800a294 <xQueueGenericCreateStatic+0x84>
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d101      	bne.n	800a298 <xQueueGenericCreateStatic+0x88>
 800a294:	2301      	movs	r3, #1
 800a296:	e000      	b.n	800a29a <xQueueGenericCreateStatic+0x8a>
 800a298:	2300      	movs	r3, #0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10b      	bne.n	800a2b6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	61fb      	str	r3, [r7, #28]
}
 800a2b0:	bf00      	nop
 800a2b2:	bf00      	nop
 800a2b4:	e7fd      	b.n	800a2b2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a2b6:	2350      	movs	r3, #80	@ 0x50
 800a2b8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	2b50      	cmp	r3, #80	@ 0x50
 800a2be:	d00b      	beq.n	800a2d8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a2c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c4:	f383 8811 	msr	BASEPRI, r3
 800a2c8:	f3bf 8f6f 	isb	sy
 800a2cc:	f3bf 8f4f 	dsb	sy
 800a2d0:	61bb      	str	r3, [r7, #24]
}
 800a2d2:	bf00      	nop
 800a2d4:	bf00      	nop
 800a2d6:	e7fd      	b.n	800a2d4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a2d8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a2de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d00d      	beq.n	800a300 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a2ec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	4613      	mov	r3, r2
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	68b9      	ldr	r1, [r7, #8]
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	f000 f805 	bl	800a30a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a302:	4618      	mov	r0, r3
 800a304:	3730      	adds	r7, #48	@ 0x30
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}

0800a30a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b084      	sub	sp, #16
 800a30e:	af00      	add	r7, sp, #0
 800a310:	60f8      	str	r0, [r7, #12]
 800a312:	60b9      	str	r1, [r7, #8]
 800a314:	607a      	str	r2, [r7, #4]
 800a316:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d103      	bne.n	800a326 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	69ba      	ldr	r2, [r7, #24]
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	e002      	b.n	800a32c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a326:	69bb      	ldr	r3, [r7, #24]
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	68fa      	ldr	r2, [r7, #12]
 800a330:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a338:	2101      	movs	r1, #1
 800a33a:	69b8      	ldr	r0, [r7, #24]
 800a33c:	f7ff fefe 	bl	800a13c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	78fa      	ldrb	r2, [r7, #3]
 800a344:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a348:	bf00      	nop
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b08e      	sub	sp, #56	@ 0x38
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
 800a35c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a35e:	2300      	movs	r3, #0
 800a360:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10b      	bne.n	800a384 <xQueueGenericSend+0x34>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a37e:	bf00      	nop
 800a380:	bf00      	nop
 800a382:	e7fd      	b.n	800a380 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d103      	bne.n	800a392 <xQueueGenericSend+0x42>
 800a38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a38c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d101      	bne.n	800a396 <xQueueGenericSend+0x46>
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <xQueueGenericSend+0x48>
 800a396:	2300      	movs	r3, #0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10b      	bne.n	800a3b4 <xQueueGenericSend+0x64>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a3ae:	bf00      	nop
 800a3b0:	bf00      	nop
 800a3b2:	e7fd      	b.n	800a3b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	2b02      	cmp	r3, #2
 800a3b8:	d103      	bne.n	800a3c2 <xQueueGenericSend+0x72>
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d101      	bne.n	800a3c6 <xQueueGenericSend+0x76>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e000      	b.n	800a3c8 <xQueueGenericSend+0x78>
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d10b      	bne.n	800a3e4 <xQueueGenericSend+0x94>
	__asm volatile
 800a3cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3d0:	f383 8811 	msr	BASEPRI, r3
 800a3d4:	f3bf 8f6f 	isb	sy
 800a3d8:	f3bf 8f4f 	dsb	sy
 800a3dc:	623b      	str	r3, [r7, #32]
}
 800a3de:	bf00      	nop
 800a3e0:	bf00      	nop
 800a3e2:	e7fd      	b.n	800a3e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a3e4:	f001 faf6 	bl	800b9d4 <xTaskGetSchedulerState>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d102      	bne.n	800a3f4 <xQueueGenericSend+0xa4>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d101      	bne.n	800a3f8 <xQueueGenericSend+0xa8>
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	e000      	b.n	800a3fa <xQueueGenericSend+0xaa>
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d10b      	bne.n	800a416 <xQueueGenericSend+0xc6>
	__asm volatile
 800a3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a402:	f383 8811 	msr	BASEPRI, r3
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	f3bf 8f4f 	dsb	sy
 800a40e:	61fb      	str	r3, [r7, #28]
}
 800a410:	bf00      	nop
 800a412:	bf00      	nop
 800a414:	e7fd      	b.n	800a412 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a416:	f002 f92f 	bl	800c678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a41e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a422:	429a      	cmp	r2, r3
 800a424:	d302      	bcc.n	800a42c <xQueueGenericSend+0xdc>
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	2b02      	cmp	r3, #2
 800a42a:	d129      	bne.n	800a480 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a42c:	683a      	ldr	r2, [r7, #0]
 800a42e:	68b9      	ldr	r1, [r7, #8]
 800a430:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a432:	f000 fa0f 	bl	800a854 <prvCopyDataToQueue>
 800a436:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d010      	beq.n	800a462 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a442:	3324      	adds	r3, #36	@ 0x24
 800a444:	4618      	mov	r0, r3
 800a446:	f001 f8ff 	bl	800b648 <xTaskRemoveFromEventList>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d013      	beq.n	800a478 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a450:	4b3f      	ldr	r3, [pc, #252]	@ (800a550 <xQueueGenericSend+0x200>)
 800a452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a456:	601a      	str	r2, [r3, #0]
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	f3bf 8f6f 	isb	sy
 800a460:	e00a      	b.n	800a478 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a464:	2b00      	cmp	r3, #0
 800a466:	d007      	beq.n	800a478 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a468:	4b39      	ldr	r3, [pc, #228]	@ (800a550 <xQueueGenericSend+0x200>)
 800a46a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a46e:	601a      	str	r2, [r3, #0]
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a478:	f002 f930 	bl	800c6dc <vPortExitCritical>
				return pdPASS;
 800a47c:	2301      	movs	r3, #1
 800a47e:	e063      	b.n	800a548 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d103      	bne.n	800a48e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a486:	f002 f929 	bl	800c6dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a48a:	2300      	movs	r3, #0
 800a48c:	e05c      	b.n	800a548 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a48e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a490:	2b00      	cmp	r3, #0
 800a492:	d106      	bne.n	800a4a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a494:	f107 0314 	add.w	r3, r7, #20
 800a498:	4618      	mov	r0, r3
 800a49a:	f001 f939 	bl	800b710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a4a2:	f002 f91b 	bl	800c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a4a6:	f000 fda7 	bl	800aff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a4aa:	f002 f8e5 	bl	800c678 <vPortEnterCritical>
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a4b4:	b25b      	sxtb	r3, r3
 800a4b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4ba:	d103      	bne.n	800a4c4 <xQueueGenericSend+0x174>
 800a4bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4be:	2200      	movs	r2, #0
 800a4c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a4ca:	b25b      	sxtb	r3, r3
 800a4cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4d0:	d103      	bne.n	800a4da <xQueueGenericSend+0x18a>
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a4da:	f002 f8ff 	bl	800c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a4de:	1d3a      	adds	r2, r7, #4
 800a4e0:	f107 0314 	add.w	r3, r7, #20
 800a4e4:	4611      	mov	r1, r2
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f001 f928 	bl	800b73c <xTaskCheckForTimeOut>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d124      	bne.n	800a53c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a4f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4f4:	f000 faa6 	bl	800aa44 <prvIsQueueFull>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d018      	beq.n	800a530 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a500:	3310      	adds	r3, #16
 800a502:	687a      	ldr	r2, [r7, #4]
 800a504:	4611      	mov	r1, r2
 800a506:	4618      	mov	r0, r3
 800a508:	f001 f84c 	bl	800b5a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a50c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a50e:	f000 fa31 	bl	800a974 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a512:	f000 fd7f 	bl	800b014 <xTaskResumeAll>
 800a516:	4603      	mov	r3, r0
 800a518:	2b00      	cmp	r3, #0
 800a51a:	f47f af7c 	bne.w	800a416 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a51e:	4b0c      	ldr	r3, [pc, #48]	@ (800a550 <xQueueGenericSend+0x200>)
 800a520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a524:	601a      	str	r2, [r3, #0]
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	f3bf 8f6f 	isb	sy
 800a52e:	e772      	b.n	800a416 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a530:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a532:	f000 fa1f 	bl	800a974 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a536:	f000 fd6d 	bl	800b014 <xTaskResumeAll>
 800a53a:	e76c      	b.n	800a416 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a53c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a53e:	f000 fa19 	bl	800a974 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a542:	f000 fd67 	bl	800b014 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a546:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3738      	adds	r7, #56	@ 0x38
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}
 800a550:	e000ed04 	.word	0xe000ed04

0800a554 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b090      	sub	sp, #64	@ 0x40
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	60b9      	str	r1, [r7, #8]
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10b      	bne.n	800a584 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a57e:	bf00      	nop
 800a580:	bf00      	nop
 800a582:	e7fd      	b.n	800a580 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d103      	bne.n	800a592 <xQueueGenericSendFromISR+0x3e>
 800a58a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d101      	bne.n	800a596 <xQueueGenericSendFromISR+0x42>
 800a592:	2301      	movs	r3, #1
 800a594:	e000      	b.n	800a598 <xQueueGenericSendFromISR+0x44>
 800a596:	2300      	movs	r3, #0
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10b      	bne.n	800a5b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a59c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5a0:	f383 8811 	msr	BASEPRI, r3
 800a5a4:	f3bf 8f6f 	isb	sy
 800a5a8:	f3bf 8f4f 	dsb	sy
 800a5ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	e7fd      	b.n	800a5b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d103      	bne.n	800a5c2 <xQueueGenericSendFromISR+0x6e>
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d101      	bne.n	800a5c6 <xQueueGenericSendFromISR+0x72>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e000      	b.n	800a5c8 <xQueueGenericSendFromISR+0x74>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d10b      	bne.n	800a5e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a5cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	623b      	str	r3, [r7, #32]
}
 800a5de:	bf00      	nop
 800a5e0:	bf00      	nop
 800a5e2:	e7fd      	b.n	800a5e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a5e4:	f002 f928 	bl	800c838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a5e8:	f3ef 8211 	mrs	r2, BASEPRI
 800a5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f0:	f383 8811 	msr	BASEPRI, r3
 800a5f4:	f3bf 8f6f 	isb	sy
 800a5f8:	f3bf 8f4f 	dsb	sy
 800a5fc:	61fa      	str	r2, [r7, #28]
 800a5fe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a600:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a602:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d302      	bcc.n	800a616 <xQueueGenericSendFromISR+0xc2>
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	2b02      	cmp	r3, #2
 800a614:	d12f      	bne.n	800a676 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a618:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a61c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a624:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a626:	683a      	ldr	r2, [r7, #0]
 800a628:	68b9      	ldr	r1, [r7, #8]
 800a62a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a62c:	f000 f912 	bl	800a854 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a630:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a634:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a638:	d112      	bne.n	800a660 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a63a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a63c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d016      	beq.n	800a670 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a644:	3324      	adds	r3, #36	@ 0x24
 800a646:	4618      	mov	r0, r3
 800a648:	f000 fffe 	bl	800b648 <xTaskRemoveFromEventList>
 800a64c:	4603      	mov	r3, r0
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00e      	beq.n	800a670 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00b      	beq.n	800a670 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2201      	movs	r2, #1
 800a65c:	601a      	str	r2, [r3, #0]
 800a65e:	e007      	b.n	800a670 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a660:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a664:	3301      	adds	r3, #1
 800a666:	b2db      	uxtb	r3, r3
 800a668:	b25a      	sxtb	r2, r3
 800a66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a66c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a670:	2301      	movs	r3, #1
 800a672:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a674:	e001      	b.n	800a67a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a676:	2300      	movs	r3, #0
 800a678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a67a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a67c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a684:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a686:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3740      	adds	r7, #64	@ 0x40
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}

0800a690 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a690:	b580      	push	{r7, lr}
 800a692:	b08c      	sub	sp, #48	@ 0x30
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10b      	bne.n	800a6c2 <xQueueReceive+0x32>
	__asm volatile
 800a6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ae:	f383 8811 	msr	BASEPRI, r3
 800a6b2:	f3bf 8f6f 	isb	sy
 800a6b6:	f3bf 8f4f 	dsb	sy
 800a6ba:	623b      	str	r3, [r7, #32]
}
 800a6bc:	bf00      	nop
 800a6be:	bf00      	nop
 800a6c0:	e7fd      	b.n	800a6be <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d103      	bne.n	800a6d0 <xQueueReceive+0x40>
 800a6c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d101      	bne.n	800a6d4 <xQueueReceive+0x44>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	e000      	b.n	800a6d6 <xQueueReceive+0x46>
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10b      	bne.n	800a6f2 <xQueueReceive+0x62>
	__asm volatile
 800a6da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6de:	f383 8811 	msr	BASEPRI, r3
 800a6e2:	f3bf 8f6f 	isb	sy
 800a6e6:	f3bf 8f4f 	dsb	sy
 800a6ea:	61fb      	str	r3, [r7, #28]
}
 800a6ec:	bf00      	nop
 800a6ee:	bf00      	nop
 800a6f0:	e7fd      	b.n	800a6ee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6f2:	f001 f96f 	bl	800b9d4 <xTaskGetSchedulerState>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d102      	bne.n	800a702 <xQueueReceive+0x72>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <xQueueReceive+0x76>
 800a702:	2301      	movs	r3, #1
 800a704:	e000      	b.n	800a708 <xQueueReceive+0x78>
 800a706:	2300      	movs	r3, #0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10b      	bne.n	800a724 <xQueueReceive+0x94>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	61bb      	str	r3, [r7, #24]
}
 800a71e:	bf00      	nop
 800a720:	bf00      	nop
 800a722:	e7fd      	b.n	800a720 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a724:	f001 ffa8 	bl	800c678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a728:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a72a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a72c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a730:	2b00      	cmp	r3, #0
 800a732:	d01f      	beq.n	800a774 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a734:	68b9      	ldr	r1, [r7, #8]
 800a736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a738:	f000 f8f6 	bl	800a928 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a73c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a73e:	1e5a      	subs	r2, r3, #1
 800a740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a742:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a746:	691b      	ldr	r3, [r3, #16]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d00f      	beq.n	800a76c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a74c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a74e:	3310      	adds	r3, #16
 800a750:	4618      	mov	r0, r3
 800a752:	f000 ff79 	bl	800b648 <xTaskRemoveFromEventList>
 800a756:	4603      	mov	r3, r0
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d007      	beq.n	800a76c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a75c:	4b3c      	ldr	r3, [pc, #240]	@ (800a850 <xQueueReceive+0x1c0>)
 800a75e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a76c:	f001 ffb6 	bl	800c6dc <vPortExitCritical>
				return pdPASS;
 800a770:	2301      	movs	r3, #1
 800a772:	e069      	b.n	800a848 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d103      	bne.n	800a782 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a77a:	f001 ffaf 	bl	800c6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a77e:	2300      	movs	r3, #0
 800a780:	e062      	b.n	800a848 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a784:	2b00      	cmp	r3, #0
 800a786:	d106      	bne.n	800a796 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a788:	f107 0310 	add.w	r3, r7, #16
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 ffbf 	bl	800b710 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a792:	2301      	movs	r3, #1
 800a794:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a796:	f001 ffa1 	bl	800c6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a79a:	f000 fc2d 	bl	800aff8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a79e:	f001 ff6b 	bl	800c678 <vPortEnterCritical>
 800a7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7a8:	b25b      	sxtb	r3, r3
 800a7aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7ae:	d103      	bne.n	800a7b8 <xQueueReceive+0x128>
 800a7b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7be:	b25b      	sxtb	r3, r3
 800a7c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7c4:	d103      	bne.n	800a7ce <xQueueReceive+0x13e>
 800a7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7ce:	f001 ff85 	bl	800c6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7d2:	1d3a      	adds	r2, r7, #4
 800a7d4:	f107 0310 	add.w	r3, r7, #16
 800a7d8:	4611      	mov	r1, r2
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 ffae 	bl	800b73c <xTaskCheckForTimeOut>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d123      	bne.n	800a82e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a7e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e8:	f000 f916 	bl	800aa18 <prvIsQueueEmpty>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d017      	beq.n	800a822 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f4:	3324      	adds	r3, #36	@ 0x24
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f000 fed2 	bl	800b5a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a800:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a802:	f000 f8b7 	bl	800a974 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a806:	f000 fc05 	bl	800b014 <xTaskResumeAll>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d189      	bne.n	800a724 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a810:	4b0f      	ldr	r3, [pc, #60]	@ (800a850 <xQueueReceive+0x1c0>)
 800a812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	f3bf 8f6f 	isb	sy
 800a820:	e780      	b.n	800a724 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a824:	f000 f8a6 	bl	800a974 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a828:	f000 fbf4 	bl	800b014 <xTaskResumeAll>
 800a82c:	e77a      	b.n	800a724 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a82e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a830:	f000 f8a0 	bl	800a974 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a834:	f000 fbee 	bl	800b014 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a838:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a83a:	f000 f8ed 	bl	800aa18 <prvIsQueueEmpty>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	f43f af6f 	beq.w	800a724 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a846:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3730      	adds	r7, #48	@ 0x30
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	e000ed04 	.word	0xe000ed04

0800a854 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a860:	2300      	movs	r3, #0
 800a862:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a868:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10d      	bne.n	800a88e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d14d      	bne.n	800a916 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	689b      	ldr	r3, [r3, #8]
 800a87e:	4618      	mov	r0, r3
 800a880:	f001 f8c6 	bl	800ba10 <xTaskPriorityDisinherit>
 800a884:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	609a      	str	r2, [r3, #8]
 800a88c:	e043      	b.n	800a916 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d119      	bne.n	800a8c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	6858      	ldr	r0, [r3, #4]
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a89c:	461a      	mov	r2, r3
 800a89e:	68b9      	ldr	r1, [r7, #8]
 800a8a0:	f002 faac 	bl	800cdfc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8ac:	441a      	add	r2, r3
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	685a      	ldr	r2, [r3, #4]
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	689b      	ldr	r3, [r3, #8]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d32b      	bcc.n	800a916 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	605a      	str	r2, [r3, #4]
 800a8c6:	e026      	b.n	800a916 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	68d8      	ldr	r0, [r3, #12]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	68b9      	ldr	r1, [r7, #8]
 800a8d4:	f002 fa92 	bl	800cdfc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	68da      	ldr	r2, [r3, #12]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8e0:	425b      	negs	r3, r3
 800a8e2:	441a      	add	r2, r3
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	68da      	ldr	r2, [r3, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	d207      	bcs.n	800a904 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	689a      	ldr	r2, [r3, #8]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8fc:	425b      	negs	r3, r3
 800a8fe:	441a      	add	r2, r3
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2b02      	cmp	r3, #2
 800a908:	d105      	bne.n	800a916 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	3b01      	subs	r3, #1
 800a914:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a91e:	697b      	ldr	r3, [r7, #20]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3718      	adds	r7, #24
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a936:	2b00      	cmp	r3, #0
 800a938:	d018      	beq.n	800a96c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a942:	441a      	add	r2, r3
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68da      	ldr	r2, [r3, #12]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	689b      	ldr	r3, [r3, #8]
 800a950:	429a      	cmp	r2, r3
 800a952:	d303      	bcc.n	800a95c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	68d9      	ldr	r1, [r3, #12]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a964:	461a      	mov	r2, r3
 800a966:	6838      	ldr	r0, [r7, #0]
 800a968:	f002 fa48 	bl	800cdfc <memcpy>
	}
}
 800a96c:	bf00      	nop
 800a96e:	3708      	adds	r7, #8
 800a970:	46bd      	mov	sp, r7
 800a972:	bd80      	pop	{r7, pc}

0800a974 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a97c:	f001 fe7c 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a986:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a988:	e011      	b.n	800a9ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d012      	beq.n	800a9b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	3324      	adds	r3, #36	@ 0x24
 800a996:	4618      	mov	r0, r3
 800a998:	f000 fe56 	bl	800b648 <xTaskRemoveFromEventList>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a9a2:	f000 ff2f 	bl	800b804 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a9a6:	7bfb      	ldrb	r3, [r7, #15]
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	b2db      	uxtb	r3, r3
 800a9ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a9ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	dce9      	bgt.n	800a98a <prvUnlockQueue+0x16>
 800a9b6:	e000      	b.n	800a9ba <prvUnlockQueue+0x46>
					break;
 800a9b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	22ff      	movs	r2, #255	@ 0xff
 800a9be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a9c2:	f001 fe8b 	bl	800c6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a9c6:	f001 fe57 	bl	800c678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9d2:	e011      	b.n	800a9f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	691b      	ldr	r3, [r3, #16]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d012      	beq.n	800aa02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	3310      	adds	r3, #16
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f000 fe31 	bl	800b648 <xTaskRemoveFromEventList>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a9ec:	f000 ff0a 	bl	800b804 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a9f0:	7bbb      	ldrb	r3, [r7, #14]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	b2db      	uxtb	r3, r3
 800a9f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a9f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	dce9      	bgt.n	800a9d4 <prvUnlockQueue+0x60>
 800aa00:	e000      	b.n	800aa04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aa02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	22ff      	movs	r2, #255	@ 0xff
 800aa08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aa0c:	f001 fe66 	bl	800c6dc <vPortExitCritical>
}
 800aa10:	bf00      	nop
 800aa12:	3710      	adds	r7, #16
 800aa14:	46bd      	mov	sp, r7
 800aa16:	bd80      	pop	{r7, pc}

0800aa18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa20:	f001 fe2a 	bl	800c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d102      	bne.n	800aa32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	60fb      	str	r3, [r7, #12]
 800aa30:	e001      	b.n	800aa36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aa32:	2300      	movs	r3, #0
 800aa34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa36:	f001 fe51 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b084      	sub	sp, #16
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aa4c:	f001 fe14 	bl	800c678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa58:	429a      	cmp	r2, r3
 800aa5a:	d102      	bne.n	800aa62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	60fb      	str	r3, [r7, #12]
 800aa60:	e001      	b.n	800aa66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aa66:	f001 fe39 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800aa74:	b480      	push	{r7}
 800aa76:	b085      	sub	sp, #20
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60fb      	str	r3, [r7, #12]
 800aa82:	e014      	b.n	800aaae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aa84:	4a0f      	ldr	r2, [pc, #60]	@ (800aac4 <vQueueAddToRegistry+0x50>)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10b      	bne.n	800aaa8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800aa90:	490c      	ldr	r1, [pc, #48]	@ (800aac4 <vQueueAddToRegistry+0x50>)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	683a      	ldr	r2, [r7, #0]
 800aa96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800aa9a:	4a0a      	ldr	r2, [pc, #40]	@ (800aac4 <vQueueAddToRegistry+0x50>)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	00db      	lsls	r3, r3, #3
 800aaa0:	4413      	add	r3, r2
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800aaa6:	e006      	b.n	800aab6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	60fb      	str	r3, [r7, #12]
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b07      	cmp	r3, #7
 800aab2:	d9e7      	bls.n	800aa84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800aab4:	bf00      	nop
 800aab6:	bf00      	nop
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
 800aac2:	bf00      	nop
 800aac4:	200013d4 	.word	0x200013d4

0800aac8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	60b9      	str	r1, [r7, #8]
 800aad2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800aad8:	f001 fdce 	bl	800c678 <vPortEnterCritical>
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aae2:	b25b      	sxtb	r3, r3
 800aae4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aae8:	d103      	bne.n	800aaf2 <vQueueWaitForMessageRestricted+0x2a>
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaf8:	b25b      	sxtb	r3, r3
 800aafa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aafe:	d103      	bne.n	800ab08 <vQueueWaitForMessageRestricted+0x40>
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2200      	movs	r2, #0
 800ab04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab08:	f001 fde8 	bl	800c6dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d106      	bne.n	800ab22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	3324      	adds	r3, #36	@ 0x24
 800ab18:	687a      	ldr	r2, [r7, #4]
 800ab1a:	68b9      	ldr	r1, [r7, #8]
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 fd67 	bl	800b5f0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ab22:	6978      	ldr	r0, [r7, #20]
 800ab24:	f7ff ff26 	bl	800a974 <prvUnlockQueue>
	}
 800ab28:	bf00      	nop
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08e      	sub	sp, #56	@ 0x38
 800ab34:	af04      	add	r7, sp, #16
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ab3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10b      	bne.n	800ab5c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ab44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab48:	f383 8811 	msr	BASEPRI, r3
 800ab4c:	f3bf 8f6f 	isb	sy
 800ab50:	f3bf 8f4f 	dsb	sy
 800ab54:	623b      	str	r3, [r7, #32]
}
 800ab56:	bf00      	nop
 800ab58:	bf00      	nop
 800ab5a:	e7fd      	b.n	800ab58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ab5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10b      	bne.n	800ab7a <xTaskCreateStatic+0x4a>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	61fb      	str	r3, [r7, #28]
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop
 800ab78:	e7fd      	b.n	800ab76 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ab7a:	23a8      	movs	r3, #168	@ 0xa8
 800ab7c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	2ba8      	cmp	r3, #168	@ 0xa8
 800ab82:	d00b      	beq.n	800ab9c <xTaskCreateStatic+0x6c>
	__asm volatile
 800ab84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab88:	f383 8811 	msr	BASEPRI, r3
 800ab8c:	f3bf 8f6f 	isb	sy
 800ab90:	f3bf 8f4f 	dsb	sy
 800ab94:	61bb      	str	r3, [r7, #24]
}
 800ab96:	bf00      	nop
 800ab98:	bf00      	nop
 800ab9a:	e7fd      	b.n	800ab98 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ab9c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ab9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d01e      	beq.n	800abe2 <xTaskCreateStatic+0xb2>
 800aba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d01b      	beq.n	800abe2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800abaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800abae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800abb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800abb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb6:	2202      	movs	r2, #2
 800abb8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800abbc:	2300      	movs	r3, #0
 800abbe:	9303      	str	r3, [sp, #12]
 800abc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc2:	9302      	str	r3, [sp, #8]
 800abc4:	f107 0314 	add.w	r3, r7, #20
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abcc:	9300      	str	r3, [sp, #0]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	68b9      	ldr	r1, [r7, #8]
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 f851 	bl	800ac7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800abda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abdc:	f000 f8f6 	bl	800adcc <prvAddNewTaskToReadyList>
 800abe0:	e001      	b.n	800abe6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800abe2:	2300      	movs	r3, #0
 800abe4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800abe6:	697b      	ldr	r3, [r7, #20]
	}
 800abe8:	4618      	mov	r0, r3
 800abea:	3728      	adds	r7, #40	@ 0x28
 800abec:	46bd      	mov	sp, r7
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b08c      	sub	sp, #48	@ 0x30
 800abf4:	af04      	add	r7, sp, #16
 800abf6:	60f8      	str	r0, [r7, #12]
 800abf8:	60b9      	str	r1, [r7, #8]
 800abfa:	603b      	str	r3, [r7, #0]
 800abfc:	4613      	mov	r3, r2
 800abfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ac00:	88fb      	ldrh	r3, [r7, #6]
 800ac02:	009b      	lsls	r3, r3, #2
 800ac04:	4618      	mov	r0, r3
 800ac06:	f001 fe59 	bl	800c8bc <pvPortMalloc>
 800ac0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ac0c:	697b      	ldr	r3, [r7, #20]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d00e      	beq.n	800ac30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ac12:	20a8      	movs	r0, #168	@ 0xa8
 800ac14:	f001 fe52 	bl	800c8bc <pvPortMalloc>
 800ac18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ac1a:	69fb      	ldr	r3, [r7, #28]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	697a      	ldr	r2, [r7, #20]
 800ac24:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac26:	e005      	b.n	800ac34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ac28:	6978      	ldr	r0, [r7, #20]
 800ac2a:	f001 ff15 	bl	800ca58 <vPortFree>
 800ac2e:	e001      	b.n	800ac34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ac30:	2300      	movs	r3, #0
 800ac32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ac34:	69fb      	ldr	r3, [r7, #28]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d017      	beq.n	800ac6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ac42:	88fa      	ldrh	r2, [r7, #6]
 800ac44:	2300      	movs	r3, #0
 800ac46:	9303      	str	r3, [sp, #12]
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	9302      	str	r3, [sp, #8]
 800ac4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac4e:	9301      	str	r3, [sp, #4]
 800ac50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac52:	9300      	str	r3, [sp, #0]
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	68b9      	ldr	r1, [r7, #8]
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f000 f80f 	bl	800ac7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac5e:	69f8      	ldr	r0, [r7, #28]
 800ac60:	f000 f8b4 	bl	800adcc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ac64:	2301      	movs	r3, #1
 800ac66:	61bb      	str	r3, [r7, #24]
 800ac68:	e002      	b.n	800ac70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ac6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ac70:	69bb      	ldr	r3, [r7, #24]
	}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3720      	adds	r7, #32
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
	...

0800ac7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b088      	sub	sp, #32
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	60f8      	str	r0, [r7, #12]
 800ac84:	60b9      	str	r1, [r7, #8]
 800ac86:	607a      	str	r2, [r7, #4]
 800ac88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ac8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	461a      	mov	r2, r3
 800ac94:	21a5      	movs	r1, #165	@ 0xa5
 800ac96:	f002 f81f 	bl	800ccd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ac9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aca4:	3b01      	subs	r3, #1
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	4413      	add	r3, r2
 800acaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800acac:	69bb      	ldr	r3, [r7, #24]
 800acae:	f023 0307 	bic.w	r3, r3, #7
 800acb2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800acb4:	69bb      	ldr	r3, [r7, #24]
 800acb6:	f003 0307 	and.w	r3, r3, #7
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d00b      	beq.n	800acd6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800acbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc2:	f383 8811 	msr	BASEPRI, r3
 800acc6:	f3bf 8f6f 	isb	sy
 800acca:	f3bf 8f4f 	dsb	sy
 800acce:	617b      	str	r3, [r7, #20]
}
 800acd0:	bf00      	nop
 800acd2:	bf00      	nop
 800acd4:	e7fd      	b.n	800acd2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d01f      	beq.n	800ad1c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800acdc:	2300      	movs	r3, #0
 800acde:	61fb      	str	r3, [r7, #28]
 800ace0:	e012      	b.n	800ad08 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	4413      	add	r3, r2
 800ace8:	7819      	ldrb	r1, [r3, #0]
 800acea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	4413      	add	r3, r2
 800acf0:	3334      	adds	r3, #52	@ 0x34
 800acf2:	460a      	mov	r2, r1
 800acf4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800acf6:	68ba      	ldr	r2, [r7, #8]
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	4413      	add	r3, r2
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d006      	beq.n	800ad10 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad02:	69fb      	ldr	r3, [r7, #28]
 800ad04:	3301      	adds	r3, #1
 800ad06:	61fb      	str	r3, [r7, #28]
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	2b0f      	cmp	r3, #15
 800ad0c:	d9e9      	bls.n	800ace2 <prvInitialiseNewTask+0x66>
 800ad0e:	e000      	b.n	800ad12 <prvInitialiseNewTask+0x96>
			{
				break;
 800ad10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ad12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ad1a:	e003      	b.n	800ad24 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ad1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1e:	2200      	movs	r2, #0
 800ad20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ad24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad26:	2b37      	cmp	r3, #55	@ 0x37
 800ad28:	d901      	bls.n	800ad2e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ad2a:	2337      	movs	r3, #55	@ 0x37
 800ad2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ad2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ad34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad38:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ad40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad42:	3304      	adds	r3, #4
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7ff f965 	bl	800a014 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	3318      	adds	r3, #24
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7ff f960 	bl	800a014 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ad54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ad60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ad64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ad6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ad7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad7c:	3354      	adds	r3, #84	@ 0x54
 800ad7e:	224c      	movs	r2, #76	@ 0x4c
 800ad80:	2100      	movs	r1, #0
 800ad82:	4618      	mov	r0, r3
 800ad84:	f001 ffa8 	bl	800ccd8 <memset>
 800ad88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad8a:	4a0d      	ldr	r2, [pc, #52]	@ (800adc0 <prvInitialiseNewTask+0x144>)
 800ad8c:	659a      	str	r2, [r3, #88]	@ 0x58
 800ad8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad90:	4a0c      	ldr	r2, [pc, #48]	@ (800adc4 <prvInitialiseNewTask+0x148>)
 800ad92:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ad94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad96:	4a0c      	ldr	r2, [pc, #48]	@ (800adc8 <prvInitialiseNewTask+0x14c>)
 800ad98:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	68f9      	ldr	r1, [r7, #12]
 800ad9e:	69b8      	ldr	r0, [r7, #24]
 800ada0:	f001 fb36 	bl	800c410 <pxPortInitialiseStack>
 800ada4:	4602      	mov	r2, r0
 800ada6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ada8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800adaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800adb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adb2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800adb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800adb6:	bf00      	nop
 800adb8:	3720      	adds	r7, #32
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}
 800adbe:	bf00      	nop
 800adc0:	20005668 	.word	0x20005668
 800adc4:	200056d0 	.word	0x200056d0
 800adc8:	20005738 	.word	0x20005738

0800adcc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b082      	sub	sp, #8
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800add4:	f001 fc50 	bl	800c678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800add8:	4b2d      	ldr	r3, [pc, #180]	@ (800ae90 <prvAddNewTaskToReadyList+0xc4>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	3301      	adds	r3, #1
 800adde:	4a2c      	ldr	r2, [pc, #176]	@ (800ae90 <prvAddNewTaskToReadyList+0xc4>)
 800ade0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ade2:	4b2c      	ldr	r3, [pc, #176]	@ (800ae94 <prvAddNewTaskToReadyList+0xc8>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d109      	bne.n	800adfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800adea:	4a2a      	ldr	r2, [pc, #168]	@ (800ae94 <prvAddNewTaskToReadyList+0xc8>)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800adf0:	4b27      	ldr	r3, [pc, #156]	@ (800ae90 <prvAddNewTaskToReadyList+0xc4>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d110      	bne.n	800ae1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800adf8:	f000 fd28 	bl	800b84c <prvInitialiseTaskLists>
 800adfc:	e00d      	b.n	800ae1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800adfe:	4b26      	ldr	r3, [pc, #152]	@ (800ae98 <prvAddNewTaskToReadyList+0xcc>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d109      	bne.n	800ae1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ae06:	4b23      	ldr	r3, [pc, #140]	@ (800ae94 <prvAddNewTaskToReadyList+0xc8>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d802      	bhi.n	800ae1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ae14:	4a1f      	ldr	r2, [pc, #124]	@ (800ae94 <prvAddNewTaskToReadyList+0xc8>)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ae1a:	4b20      	ldr	r3, [pc, #128]	@ (800ae9c <prvAddNewTaskToReadyList+0xd0>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	4a1e      	ldr	r2, [pc, #120]	@ (800ae9c <prvAddNewTaskToReadyList+0xd0>)
 800ae22:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ae24:	4b1d      	ldr	r3, [pc, #116]	@ (800ae9c <prvAddNewTaskToReadyList+0xd0>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae30:	4b1b      	ldr	r3, [pc, #108]	@ (800aea0 <prvAddNewTaskToReadyList+0xd4>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d903      	bls.n	800ae40 <prvAddNewTaskToReadyList+0x74>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae3c:	4a18      	ldr	r2, [pc, #96]	@ (800aea0 <prvAddNewTaskToReadyList+0xd4>)
 800ae3e:	6013      	str	r3, [r2, #0]
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae44:	4613      	mov	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	4413      	add	r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	4a15      	ldr	r2, [pc, #84]	@ (800aea4 <prvAddNewTaskToReadyList+0xd8>)
 800ae4e:	441a      	add	r2, r3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3304      	adds	r3, #4
 800ae54:	4619      	mov	r1, r3
 800ae56:	4610      	mov	r0, r2
 800ae58:	f7ff f8e9 	bl	800a02e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ae5c:	f001 fc3e 	bl	800c6dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ae60:	4b0d      	ldr	r3, [pc, #52]	@ (800ae98 <prvAddNewTaskToReadyList+0xcc>)
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d00e      	beq.n	800ae86 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ae68:	4b0a      	ldr	r3, [pc, #40]	@ (800ae94 <prvAddNewTaskToReadyList+0xc8>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d207      	bcs.n	800ae86 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ae76:	4b0c      	ldr	r3, [pc, #48]	@ (800aea8 <prvAddNewTaskToReadyList+0xdc>)
 800ae78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae7c:	601a      	str	r2, [r3, #0]
 800ae7e:	f3bf 8f4f 	dsb	sy
 800ae82:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae86:	bf00      	nop
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	200018e8 	.word	0x200018e8
 800ae94:	20001414 	.word	0x20001414
 800ae98:	200018f4 	.word	0x200018f4
 800ae9c:	20001904 	.word	0x20001904
 800aea0:	200018f0 	.word	0x200018f0
 800aea4:	20001418 	.word	0x20001418
 800aea8:	e000ed04 	.word	0xe000ed04

0800aeac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b084      	sub	sp, #16
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d018      	beq.n	800aef0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800aebe:	4b14      	ldr	r3, [pc, #80]	@ (800af10 <vTaskDelay+0x64>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00b      	beq.n	800aede <vTaskDelay+0x32>
	__asm volatile
 800aec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeca:	f383 8811 	msr	BASEPRI, r3
 800aece:	f3bf 8f6f 	isb	sy
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	60bb      	str	r3, [r7, #8]
}
 800aed8:	bf00      	nop
 800aeda:	bf00      	nop
 800aedc:	e7fd      	b.n	800aeda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800aede:	f000 f88b 	bl	800aff8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aee2:	2100      	movs	r1, #0
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fee5 	bl	800bcb4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aeea:	f000 f893 	bl	800b014 <xTaskResumeAll>
 800aeee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d107      	bne.n	800af06 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800aef6:	4b07      	ldr	r3, [pc, #28]	@ (800af14 <vTaskDelay+0x68>)
 800aef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aefc:	601a      	str	r2, [r3, #0]
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af06:	bf00      	nop
 800af08:	3710      	adds	r7, #16
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	20001910 	.word	0x20001910
 800af14:	e000ed04 	.word	0xe000ed04

0800af18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b08a      	sub	sp, #40	@ 0x28
 800af1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af1e:	2300      	movs	r3, #0
 800af20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af22:	2300      	movs	r3, #0
 800af24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af26:	463a      	mov	r2, r7
 800af28:	1d39      	adds	r1, r7, #4
 800af2a:	f107 0308 	add.w	r3, r7, #8
 800af2e:	4618      	mov	r0, r3
 800af30:	f7ff f81c 	bl	8009f6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af34:	6839      	ldr	r1, [r7, #0]
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	9202      	str	r2, [sp, #8]
 800af3c:	9301      	str	r3, [sp, #4]
 800af3e:	2300      	movs	r3, #0
 800af40:	9300      	str	r3, [sp, #0]
 800af42:	2300      	movs	r3, #0
 800af44:	460a      	mov	r2, r1
 800af46:	4924      	ldr	r1, [pc, #144]	@ (800afd8 <vTaskStartScheduler+0xc0>)
 800af48:	4824      	ldr	r0, [pc, #144]	@ (800afdc <vTaskStartScheduler+0xc4>)
 800af4a:	f7ff fdf1 	bl	800ab30 <xTaskCreateStatic>
 800af4e:	4603      	mov	r3, r0
 800af50:	4a23      	ldr	r2, [pc, #140]	@ (800afe0 <vTaskStartScheduler+0xc8>)
 800af52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af54:	4b22      	ldr	r3, [pc, #136]	@ (800afe0 <vTaskStartScheduler+0xc8>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af5c:	2301      	movs	r3, #1
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	e001      	b.n	800af66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af62:	2300      	movs	r3, #0
 800af64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d102      	bne.n	800af72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af6c:	f000 fef6 	bl	800bd5c <xTimerCreateTimerTask>
 800af70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d11b      	bne.n	800afb0 <vTaskStartScheduler+0x98>
	__asm volatile
 800af78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7c:	f383 8811 	msr	BASEPRI, r3
 800af80:	f3bf 8f6f 	isb	sy
 800af84:	f3bf 8f4f 	dsb	sy
 800af88:	613b      	str	r3, [r7, #16]
}
 800af8a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800af8c:	4b15      	ldr	r3, [pc, #84]	@ (800afe4 <vTaskStartScheduler+0xcc>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	3354      	adds	r3, #84	@ 0x54
 800af92:	4a15      	ldr	r2, [pc, #84]	@ (800afe8 <vTaskStartScheduler+0xd0>)
 800af94:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800af96:	4b15      	ldr	r3, [pc, #84]	@ (800afec <vTaskStartScheduler+0xd4>)
 800af98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af9c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800af9e:	4b14      	ldr	r3, [pc, #80]	@ (800aff0 <vTaskStartScheduler+0xd8>)
 800afa0:	2201      	movs	r2, #1
 800afa2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afa4:	4b13      	ldr	r3, [pc, #76]	@ (800aff4 <vTaskStartScheduler+0xdc>)
 800afa6:	2200      	movs	r2, #0
 800afa8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afaa:	f001 fac1 	bl	800c530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afae:	e00f      	b.n	800afd0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afb6:	d10b      	bne.n	800afd0 <vTaskStartScheduler+0xb8>
	__asm volatile
 800afb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbc:	f383 8811 	msr	BASEPRI, r3
 800afc0:	f3bf 8f6f 	isb	sy
 800afc4:	f3bf 8f4f 	dsb	sy
 800afc8:	60fb      	str	r3, [r7, #12]
}
 800afca:	bf00      	nop
 800afcc:	bf00      	nop
 800afce:	e7fd      	b.n	800afcc <vTaskStartScheduler+0xb4>
}
 800afd0:	bf00      	nop
 800afd2:	3718      	adds	r7, #24
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}
 800afd8:	0800d708 	.word	0x0800d708
 800afdc:	0800b81d 	.word	0x0800b81d
 800afe0:	2000190c 	.word	0x2000190c
 800afe4:	20001414 	.word	0x20001414
 800afe8:	2000002c 	.word	0x2000002c
 800afec:	20001908 	.word	0x20001908
 800aff0:	200018f4 	.word	0x200018f4
 800aff4:	200018ec 	.word	0x200018ec

0800aff8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aff8:	b480      	push	{r7}
 800affa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800affc:	4b04      	ldr	r3, [pc, #16]	@ (800b010 <vTaskSuspendAll+0x18>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	3301      	adds	r3, #1
 800b002:	4a03      	ldr	r2, [pc, #12]	@ (800b010 <vTaskSuspendAll+0x18>)
 800b004:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b006:	bf00      	nop
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr
 800b010:	20001910 	.word	0x20001910

0800b014 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b01a:	2300      	movs	r3, #0
 800b01c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b01e:	2300      	movs	r3, #0
 800b020:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b022:	4b42      	ldr	r3, [pc, #264]	@ (800b12c <xTaskResumeAll+0x118>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10b      	bne.n	800b042 <xTaskResumeAll+0x2e>
	__asm volatile
 800b02a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b02e:	f383 8811 	msr	BASEPRI, r3
 800b032:	f3bf 8f6f 	isb	sy
 800b036:	f3bf 8f4f 	dsb	sy
 800b03a:	603b      	str	r3, [r7, #0]
}
 800b03c:	bf00      	nop
 800b03e:	bf00      	nop
 800b040:	e7fd      	b.n	800b03e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b042:	f001 fb19 	bl	800c678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b046:	4b39      	ldr	r3, [pc, #228]	@ (800b12c <xTaskResumeAll+0x118>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	3b01      	subs	r3, #1
 800b04c:	4a37      	ldr	r2, [pc, #220]	@ (800b12c <xTaskResumeAll+0x118>)
 800b04e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b050:	4b36      	ldr	r3, [pc, #216]	@ (800b12c <xTaskResumeAll+0x118>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d162      	bne.n	800b11e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b058:	4b35      	ldr	r3, [pc, #212]	@ (800b130 <xTaskResumeAll+0x11c>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d05e      	beq.n	800b11e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b060:	e02f      	b.n	800b0c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b062:	4b34      	ldr	r3, [pc, #208]	@ (800b134 <xTaskResumeAll+0x120>)
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	3318      	adds	r3, #24
 800b06e:	4618      	mov	r0, r3
 800b070:	f7ff f83a 	bl	800a0e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	3304      	adds	r3, #4
 800b078:	4618      	mov	r0, r3
 800b07a:	f7ff f835 	bl	800a0e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b082:	4b2d      	ldr	r3, [pc, #180]	@ (800b138 <xTaskResumeAll+0x124>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	429a      	cmp	r2, r3
 800b088:	d903      	bls.n	800b092 <xTaskResumeAll+0x7e>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b08e:	4a2a      	ldr	r2, [pc, #168]	@ (800b138 <xTaskResumeAll+0x124>)
 800b090:	6013      	str	r3, [r2, #0]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	4a27      	ldr	r2, [pc, #156]	@ (800b13c <xTaskResumeAll+0x128>)
 800b0a0:	441a      	add	r2, r3
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3304      	adds	r3, #4
 800b0a6:	4619      	mov	r1, r3
 800b0a8:	4610      	mov	r0, r2
 800b0aa:	f7fe ffc0 	bl	800a02e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b2:	4b23      	ldr	r3, [pc, #140]	@ (800b140 <xTaskResumeAll+0x12c>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d302      	bcc.n	800b0c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b0bc:	4b21      	ldr	r3, [pc, #132]	@ (800b144 <xTaskResumeAll+0x130>)
 800b0be:	2201      	movs	r2, #1
 800b0c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0c2:	4b1c      	ldr	r3, [pc, #112]	@ (800b134 <xTaskResumeAll+0x120>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d1cb      	bne.n	800b062 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d001      	beq.n	800b0d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0d0:	f000 fc60 	bl	800b994 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b0d4:	4b1c      	ldr	r3, [pc, #112]	@ (800b148 <xTaskResumeAll+0x134>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d010      	beq.n	800b102 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0e0:	f000 f940 	bl	800b364 <xTaskIncrementTick>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b0ea:	4b16      	ldr	r3, [pc, #88]	@ (800b144 <xTaskResumeAll+0x130>)
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	3b01      	subs	r3, #1
 800b0f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d1f1      	bne.n	800b0e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b0fc:	4b12      	ldr	r3, [pc, #72]	@ (800b148 <xTaskResumeAll+0x134>)
 800b0fe:	2200      	movs	r2, #0
 800b100:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b102:	4b10      	ldr	r3, [pc, #64]	@ (800b144 <xTaskResumeAll+0x130>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d009      	beq.n	800b11e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b10a:	2301      	movs	r3, #1
 800b10c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b10e:	4b0f      	ldr	r3, [pc, #60]	@ (800b14c <xTaskResumeAll+0x138>)
 800b110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b114:	601a      	str	r2, [r3, #0]
 800b116:	f3bf 8f4f 	dsb	sy
 800b11a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b11e:	f001 fadd 	bl	800c6dc <vPortExitCritical>

	return xAlreadyYielded;
 800b122:	68bb      	ldr	r3, [r7, #8]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3710      	adds	r7, #16
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	20001910 	.word	0x20001910
 800b130:	200018e8 	.word	0x200018e8
 800b134:	200018a8 	.word	0x200018a8
 800b138:	200018f0 	.word	0x200018f0
 800b13c:	20001418 	.word	0x20001418
 800b140:	20001414 	.word	0x20001414
 800b144:	200018fc 	.word	0x200018fc
 800b148:	200018f8 	.word	0x200018f8
 800b14c:	e000ed04 	.word	0xe000ed04

0800b150 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b156:	4b05      	ldr	r3, [pc, #20]	@ (800b16c <xTaskGetTickCount+0x1c>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b15c:	687b      	ldr	r3, [r7, #4]
}
 800b15e:	4618      	mov	r0, r3
 800b160:	370c      	adds	r7, #12
 800b162:	46bd      	mov	sp, r7
 800b164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b168:	4770      	bx	lr
 800b16a:	bf00      	nop
 800b16c:	200018ec 	.word	0x200018ec

0800b170 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b170:	b480      	push	{r7}
 800b172:	b085      	sub	sp, #20
 800b174:	af00      	add	r7, sp, #0
 800b176:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d102      	bne.n	800b184 <pcTaskGetName+0x14>
 800b17e:	4b0e      	ldr	r3, [pc, #56]	@ (800b1b8 <pcTaskGetName+0x48>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	e000      	b.n	800b186 <pcTaskGetName+0x16>
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10b      	bne.n	800b1a6 <pcTaskGetName+0x36>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	60bb      	str	r3, [r7, #8]
}
 800b1a0:	bf00      	nop
 800b1a2:	bf00      	nop
 800b1a4:	e7fd      	b.n	800b1a2 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3334      	adds	r3, #52	@ 0x34
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	3714      	adds	r7, #20
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop
 800b1b8:	20001414 	.word	0x20001414

0800b1bc <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800b1bc:	b480      	push	{r7}
 800b1be:	b08b      	sub	sp, #44	@ 0x2c
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d05b      	beq.n	800b28a <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	61bb      	str	r3, [r7, #24]
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	685a      	ldr	r2, [r3, #4]
 800b1dc:	69bb      	ldr	r3, [r7, #24]
 800b1de:	605a      	str	r2, [r3, #4]
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	685a      	ldr	r2, [r3, #4]
 800b1e4:	69bb      	ldr	r3, [r7, #24]
 800b1e6:	3308      	adds	r3, #8
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d104      	bne.n	800b1f6 <prvSearchForNameWithinSingleList+0x3a>
 800b1ec:	69bb      	ldr	r3, [r7, #24]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	685a      	ldr	r2, [r3, #4]
 800b1f2:	69bb      	ldr	r3, [r7, #24]
 800b1f4:	605a      	str	r2, [r3, #4]
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	68db      	ldr	r3, [r3, #12]
 800b1fc:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	613b      	str	r3, [r7, #16]
 800b202:	693b      	ldr	r3, [r7, #16]
 800b204:	685b      	ldr	r3, [r3, #4]
 800b206:	685a      	ldr	r2, [r3, #4]
 800b208:	693b      	ldr	r3, [r7, #16]
 800b20a:	605a      	str	r2, [r3, #4]
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	3308      	adds	r3, #8
 800b214:	429a      	cmp	r2, r3
 800b216:	d104      	bne.n	800b222 <prvSearchForNameWithinSingleList+0x66>
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	685a      	ldr	r2, [r3, #4]
 800b21e:	693b      	ldr	r3, [r7, #16]
 800b220:	605a      	str	r2, [r3, #4]
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800b22a:	2300      	movs	r3, #0
 800b22c:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b22e:	2300      	movs	r3, #0
 800b230:	623b      	str	r3, [r7, #32]
 800b232:	e01c      	b.n	800b26e <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	6a3b      	ldr	r3, [r7, #32]
 800b238:	4413      	add	r3, r2
 800b23a:	3334      	adds	r3, #52	@ 0x34
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	4413      	add	r3, r2
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	7afa      	ldrb	r2, [r7, #11]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d002      	beq.n	800b254 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800b24e:	2301      	movs	r3, #1
 800b250:	61fb      	str	r3, [r7, #28]
 800b252:	e006      	b.n	800b262 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800b254:	7afb      	ldrb	r3, [r7, #11]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d103      	bne.n	800b262 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800b25e:	2301      	movs	r3, #1
 800b260:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800b262:	69fb      	ldr	r3, [r7, #28]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d106      	bne.n	800b276 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b268:	6a3b      	ldr	r3, [r7, #32]
 800b26a:	3301      	adds	r3, #1
 800b26c:	623b      	str	r3, [r7, #32]
 800b26e:	6a3b      	ldr	r3, [r7, #32]
 800b270:	2b0f      	cmp	r3, #15
 800b272:	d9df      	bls.n	800b234 <prvSearchForNameWithinSingleList+0x78>
 800b274:	e000      	b.n	800b278 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800b276:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800b278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d104      	bne.n	800b288 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	429a      	cmp	r2, r3
 800b284:	d1bb      	bne.n	800b1fe <prvSearchForNameWithinSingleList+0x42>
 800b286:	e000      	b.n	800b28a <prvSearchForNameWithinSingleList+0xce>
					break;
 800b288:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b28c:	4618      	mov	r0, r3
 800b28e:	372c      	adds	r7, #44	@ 0x2c
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800b2a0:	2338      	movs	r3, #56	@ 0x38
 800b2a2:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f7f4 ff93 	bl	80001d0 <strlen>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b0f      	cmp	r3, #15
 800b2ae:	d90b      	bls.n	800b2c8 <xTaskGetHandle+0x30>
	__asm volatile
 800b2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b4:	f383 8811 	msr	BASEPRI, r3
 800b2b8:	f3bf 8f6f 	isb	sy
 800b2bc:	f3bf 8f4f 	dsb	sy
 800b2c0:	60fb      	str	r3, [r7, #12]
}
 800b2c2:	bf00      	nop
 800b2c4:	bf00      	nop
 800b2c6:	e7fd      	b.n	800b2c4 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800b2c8:	f7ff fe96 	bl	800aff8 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800b2d2:	697a      	ldr	r2, [r7, #20]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	009b      	lsls	r3, r3, #2
 800b2d8:	4413      	add	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4a1c      	ldr	r2, [pc, #112]	@ (800b350 <xTaskGetHandle+0xb8>)
 800b2de:	4413      	add	r3, r2
 800b2e0:	6879      	ldr	r1, [r7, #4]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f7ff ff6a 	bl	800b1bc <prvSearchForNameWithinSingleList>
 800b2e8:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d103      	bne.n	800b2f8 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d1ea      	bne.n	800b2cc <xTaskGetHandle+0x34>
 800b2f6:	e000      	b.n	800b2fa <xTaskGetHandle+0x62>
					break;
 800b2f8:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d106      	bne.n	800b30e <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800b300:	4b14      	ldr	r3, [pc, #80]	@ (800b354 <xTaskGetHandle+0xbc>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6879      	ldr	r1, [r7, #4]
 800b306:	4618      	mov	r0, r3
 800b308:	f7ff ff58 	bl	800b1bc <prvSearchForNameWithinSingleList>
 800b30c:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d106      	bne.n	800b322 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800b314:	4b10      	ldr	r3, [pc, #64]	@ (800b358 <xTaskGetHandle+0xc0>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f7ff ff4e 	bl	800b1bc <prvSearchForNameWithinSingleList>
 800b320:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d104      	bne.n	800b332 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800b328:	6879      	ldr	r1, [r7, #4]
 800b32a:	480c      	ldr	r0, [pc, #48]	@ (800b35c <xTaskGetHandle+0xc4>)
 800b32c:	f7ff ff46 	bl	800b1bc <prvSearchForNameWithinSingleList>
 800b330:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d104      	bne.n	800b342 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800b338:	6879      	ldr	r1, [r7, #4]
 800b33a:	4809      	ldr	r0, [pc, #36]	@ (800b360 <xTaskGetHandle+0xc8>)
 800b33c:	f7ff ff3e 	bl	800b1bc <prvSearchForNameWithinSingleList>
 800b340:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800b342:	f7ff fe67 	bl	800b014 <xTaskResumeAll>

		return pxTCB;
 800b346:	693b      	ldr	r3, [r7, #16]
	}
 800b348:	4618      	mov	r0, r3
 800b34a:	3718      	adds	r7, #24
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20001418 	.word	0x20001418
 800b354:	200018a0 	.word	0x200018a0
 800b358:	200018a4 	.word	0x200018a4
 800b35c:	200018d4 	.word	0x200018d4
 800b360:	200018bc 	.word	0x200018bc

0800b364 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b086      	sub	sp, #24
 800b368:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b36a:	2300      	movs	r3, #0
 800b36c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b36e:	4b4f      	ldr	r3, [pc, #316]	@ (800b4ac <xTaskIncrementTick+0x148>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f040 8090 	bne.w	800b498 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b378:	4b4d      	ldr	r3, [pc, #308]	@ (800b4b0 <xTaskIncrementTick+0x14c>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3301      	adds	r3, #1
 800b37e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b380:	4a4b      	ldr	r2, [pc, #300]	@ (800b4b0 <xTaskIncrementTick+0x14c>)
 800b382:	693b      	ldr	r3, [r7, #16]
 800b384:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d121      	bne.n	800b3d0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b38c:	4b49      	ldr	r3, [pc, #292]	@ (800b4b4 <xTaskIncrementTick+0x150>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d00b      	beq.n	800b3ae <xTaskIncrementTick+0x4a>
	__asm volatile
 800b396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39a:	f383 8811 	msr	BASEPRI, r3
 800b39e:	f3bf 8f6f 	isb	sy
 800b3a2:	f3bf 8f4f 	dsb	sy
 800b3a6:	603b      	str	r3, [r7, #0]
}
 800b3a8:	bf00      	nop
 800b3aa:	bf00      	nop
 800b3ac:	e7fd      	b.n	800b3aa <xTaskIncrementTick+0x46>
 800b3ae:	4b41      	ldr	r3, [pc, #260]	@ (800b4b4 <xTaskIncrementTick+0x150>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	60fb      	str	r3, [r7, #12]
 800b3b4:	4b40      	ldr	r3, [pc, #256]	@ (800b4b8 <xTaskIncrementTick+0x154>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	4a3e      	ldr	r2, [pc, #248]	@ (800b4b4 <xTaskIncrementTick+0x150>)
 800b3ba:	6013      	str	r3, [r2, #0]
 800b3bc:	4a3e      	ldr	r2, [pc, #248]	@ (800b4b8 <xTaskIncrementTick+0x154>)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	6013      	str	r3, [r2, #0]
 800b3c2:	4b3e      	ldr	r3, [pc, #248]	@ (800b4bc <xTaskIncrementTick+0x158>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	4a3c      	ldr	r2, [pc, #240]	@ (800b4bc <xTaskIncrementTick+0x158>)
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	f000 fae2 	bl	800b994 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b3d0:	4b3b      	ldr	r3, [pc, #236]	@ (800b4c0 <xTaskIncrementTick+0x15c>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d349      	bcc.n	800b46e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3da:	4b36      	ldr	r3, [pc, #216]	@ (800b4b4 <xTaskIncrementTick+0x150>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d104      	bne.n	800b3ee <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3e4:	4b36      	ldr	r3, [pc, #216]	@ (800b4c0 <xTaskIncrementTick+0x15c>)
 800b3e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3ea:	601a      	str	r2, [r3, #0]
					break;
 800b3ec:	e03f      	b.n	800b46e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b3ee:	4b31      	ldr	r3, [pc, #196]	@ (800b4b4 <xTaskIncrementTick+0x150>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	68db      	ldr	r3, [r3, #12]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b3fe:	693a      	ldr	r2, [r7, #16]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	429a      	cmp	r2, r3
 800b404:	d203      	bcs.n	800b40e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b406:	4a2e      	ldr	r2, [pc, #184]	@ (800b4c0 <xTaskIncrementTick+0x15c>)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b40c:	e02f      	b.n	800b46e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	3304      	adds	r3, #4
 800b412:	4618      	mov	r0, r3
 800b414:	f7fe fe68 	bl	800a0e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d004      	beq.n	800b42a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	3318      	adds	r3, #24
 800b424:	4618      	mov	r0, r3
 800b426:	f7fe fe5f 	bl	800a0e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b42e:	4b25      	ldr	r3, [pc, #148]	@ (800b4c4 <xTaskIncrementTick+0x160>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	429a      	cmp	r2, r3
 800b434:	d903      	bls.n	800b43e <xTaskIncrementTick+0xda>
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b43a:	4a22      	ldr	r2, [pc, #136]	@ (800b4c4 <xTaskIncrementTick+0x160>)
 800b43c:	6013      	str	r3, [r2, #0]
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b442:	4613      	mov	r3, r2
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	4413      	add	r3, r2
 800b448:	009b      	lsls	r3, r3, #2
 800b44a:	4a1f      	ldr	r2, [pc, #124]	@ (800b4c8 <xTaskIncrementTick+0x164>)
 800b44c:	441a      	add	r2, r3
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	3304      	adds	r3, #4
 800b452:	4619      	mov	r1, r3
 800b454:	4610      	mov	r0, r2
 800b456:	f7fe fdea 	bl	800a02e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b45e:	4b1b      	ldr	r3, [pc, #108]	@ (800b4cc <xTaskIncrementTick+0x168>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b464:	429a      	cmp	r2, r3
 800b466:	d3b8      	bcc.n	800b3da <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b468:	2301      	movs	r3, #1
 800b46a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b46c:	e7b5      	b.n	800b3da <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b46e:	4b17      	ldr	r3, [pc, #92]	@ (800b4cc <xTaskIncrementTick+0x168>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b474:	4914      	ldr	r1, [pc, #80]	@ (800b4c8 <xTaskIncrementTick+0x164>)
 800b476:	4613      	mov	r3, r2
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	4413      	add	r3, r2
 800b47c:	009b      	lsls	r3, r3, #2
 800b47e:	440b      	add	r3, r1
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d901      	bls.n	800b48a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b486:	2301      	movs	r3, #1
 800b488:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b48a:	4b11      	ldr	r3, [pc, #68]	@ (800b4d0 <xTaskIncrementTick+0x16c>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d007      	beq.n	800b4a2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b492:	2301      	movs	r3, #1
 800b494:	617b      	str	r3, [r7, #20]
 800b496:	e004      	b.n	800b4a2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b498:	4b0e      	ldr	r3, [pc, #56]	@ (800b4d4 <xTaskIncrementTick+0x170>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	4a0d      	ldr	r2, [pc, #52]	@ (800b4d4 <xTaskIncrementTick+0x170>)
 800b4a0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b4a2:	697b      	ldr	r3, [r7, #20]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3718      	adds	r7, #24
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}
 800b4ac:	20001910 	.word	0x20001910
 800b4b0:	200018ec 	.word	0x200018ec
 800b4b4:	200018a0 	.word	0x200018a0
 800b4b8:	200018a4 	.word	0x200018a4
 800b4bc:	20001900 	.word	0x20001900
 800b4c0:	20001908 	.word	0x20001908
 800b4c4:	200018f0 	.word	0x200018f0
 800b4c8:	20001418 	.word	0x20001418
 800b4cc:	20001414 	.word	0x20001414
 800b4d0:	200018fc 	.word	0x200018fc
 800b4d4:	200018f8 	.word	0x200018f8

0800b4d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b085      	sub	sp, #20
 800b4dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b4de:	4b2b      	ldr	r3, [pc, #172]	@ (800b58c <vTaskSwitchContext+0xb4>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d003      	beq.n	800b4ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b4e6:	4b2a      	ldr	r3, [pc, #168]	@ (800b590 <vTaskSwitchContext+0xb8>)
 800b4e8:	2201      	movs	r2, #1
 800b4ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b4ec:	e047      	b.n	800b57e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b4ee:	4b28      	ldr	r3, [pc, #160]	@ (800b590 <vTaskSwitchContext+0xb8>)
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4f4:	4b27      	ldr	r3, [pc, #156]	@ (800b594 <vTaskSwitchContext+0xbc>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	60fb      	str	r3, [r7, #12]
 800b4fa:	e011      	b.n	800b520 <vTaskSwitchContext+0x48>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10b      	bne.n	800b51a <vTaskSwitchContext+0x42>
	__asm volatile
 800b502:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b506:	f383 8811 	msr	BASEPRI, r3
 800b50a:	f3bf 8f6f 	isb	sy
 800b50e:	f3bf 8f4f 	dsb	sy
 800b512:	607b      	str	r3, [r7, #4]
}
 800b514:	bf00      	nop
 800b516:	bf00      	nop
 800b518:	e7fd      	b.n	800b516 <vTaskSwitchContext+0x3e>
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	3b01      	subs	r3, #1
 800b51e:	60fb      	str	r3, [r7, #12]
 800b520:	491d      	ldr	r1, [pc, #116]	@ (800b598 <vTaskSwitchContext+0xc0>)
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	4613      	mov	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4413      	add	r3, r2
 800b52a:	009b      	lsls	r3, r3, #2
 800b52c:	440b      	add	r3, r1
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0e3      	beq.n	800b4fc <vTaskSwitchContext+0x24>
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	4613      	mov	r3, r2
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	009b      	lsls	r3, r3, #2
 800b53e:	4a16      	ldr	r2, [pc, #88]	@ (800b598 <vTaskSwitchContext+0xc0>)
 800b540:	4413      	add	r3, r2
 800b542:	60bb      	str	r3, [r7, #8]
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	685b      	ldr	r3, [r3, #4]
 800b548:	685a      	ldr	r2, [r3, #4]
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	605a      	str	r2, [r3, #4]
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	685a      	ldr	r2, [r3, #4]
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	3308      	adds	r3, #8
 800b556:	429a      	cmp	r2, r3
 800b558:	d104      	bne.n	800b564 <vTaskSwitchContext+0x8c>
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	685b      	ldr	r3, [r3, #4]
 800b55e:	685a      	ldr	r2, [r3, #4]
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	605a      	str	r2, [r3, #4]
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	685b      	ldr	r3, [r3, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	4a0c      	ldr	r2, [pc, #48]	@ (800b59c <vTaskSwitchContext+0xc4>)
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	4a09      	ldr	r2, [pc, #36]	@ (800b594 <vTaskSwitchContext+0xbc>)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b574:	4b09      	ldr	r3, [pc, #36]	@ (800b59c <vTaskSwitchContext+0xc4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3354      	adds	r3, #84	@ 0x54
 800b57a:	4a09      	ldr	r2, [pc, #36]	@ (800b5a0 <vTaskSwitchContext+0xc8>)
 800b57c:	6013      	str	r3, [r2, #0]
}
 800b57e:	bf00      	nop
 800b580:	3714      	adds	r7, #20
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	20001910 	.word	0x20001910
 800b590:	200018fc 	.word	0x200018fc
 800b594:	200018f0 	.word	0x200018f0
 800b598:	20001418 	.word	0x20001418
 800b59c:	20001414 	.word	0x20001414
 800b5a0:	2000002c 	.word	0x2000002c

0800b5a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
 800b5ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d10b      	bne.n	800b5cc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b5b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5b8:	f383 8811 	msr	BASEPRI, r3
 800b5bc:	f3bf 8f6f 	isb	sy
 800b5c0:	f3bf 8f4f 	dsb	sy
 800b5c4:	60fb      	str	r3, [r7, #12]
}
 800b5c6:	bf00      	nop
 800b5c8:	bf00      	nop
 800b5ca:	e7fd      	b.n	800b5c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b5cc:	4b07      	ldr	r3, [pc, #28]	@ (800b5ec <vTaskPlaceOnEventList+0x48>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	3318      	adds	r3, #24
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	6878      	ldr	r0, [r7, #4]
 800b5d6:	f7fe fd4e 	bl	800a076 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b5da:	2101      	movs	r1, #1
 800b5dc:	6838      	ldr	r0, [r7, #0]
 800b5de:	f000 fb69 	bl	800bcb4 <prvAddCurrentTaskToDelayedList>
}
 800b5e2:	bf00      	nop
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20001414 	.word	0x20001414

0800b5f0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b086      	sub	sp, #24
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	60f8      	str	r0, [r7, #12]
 800b5f8:	60b9      	str	r1, [r7, #8]
 800b5fa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10b      	bne.n	800b61a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	617b      	str	r3, [r7, #20]
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop
 800b618:	e7fd      	b.n	800b616 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b61a:	4b0a      	ldr	r3, [pc, #40]	@ (800b644 <vTaskPlaceOnEventListRestricted+0x54>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	3318      	adds	r3, #24
 800b620:	4619      	mov	r1, r3
 800b622:	68f8      	ldr	r0, [r7, #12]
 800b624:	f7fe fd03 	bl	800a02e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d002      	beq.n	800b634 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b62e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b632:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b634:	6879      	ldr	r1, [r7, #4]
 800b636:	68b8      	ldr	r0, [r7, #8]
 800b638:	f000 fb3c 	bl	800bcb4 <prvAddCurrentTaskToDelayedList>
	}
 800b63c:	bf00      	nop
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	20001414 	.word	0x20001414

0800b648 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10b      	bne.n	800b676 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b65e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	60fb      	str	r3, [r7, #12]
}
 800b670:	bf00      	nop
 800b672:	bf00      	nop
 800b674:	e7fd      	b.n	800b672 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	3318      	adds	r3, #24
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7fe fd34 	bl	800a0e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b680:	4b1d      	ldr	r3, [pc, #116]	@ (800b6f8 <xTaskRemoveFromEventList+0xb0>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d11d      	bne.n	800b6c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b688:	693b      	ldr	r3, [r7, #16]
 800b68a:	3304      	adds	r3, #4
 800b68c:	4618      	mov	r0, r3
 800b68e:	f7fe fd2b 	bl	800a0e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b696:	4b19      	ldr	r3, [pc, #100]	@ (800b6fc <xTaskRemoveFromEventList+0xb4>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d903      	bls.n	800b6a6 <xTaskRemoveFromEventList+0x5e>
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a2:	4a16      	ldr	r2, [pc, #88]	@ (800b6fc <xTaskRemoveFromEventList+0xb4>)
 800b6a4:	6013      	str	r3, [r2, #0]
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6aa:	4613      	mov	r3, r2
 800b6ac:	009b      	lsls	r3, r3, #2
 800b6ae:	4413      	add	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4a13      	ldr	r2, [pc, #76]	@ (800b700 <xTaskRemoveFromEventList+0xb8>)
 800b6b4:	441a      	add	r2, r3
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4610      	mov	r0, r2
 800b6be:	f7fe fcb6 	bl	800a02e <vListInsertEnd>
 800b6c2:	e005      	b.n	800b6d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	3318      	adds	r3, #24
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	480e      	ldr	r0, [pc, #56]	@ (800b704 <xTaskRemoveFromEventList+0xbc>)
 800b6cc:	f7fe fcaf 	bl	800a02e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b708 <xTaskRemoveFromEventList+0xc0>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6da:	429a      	cmp	r2, r3
 800b6dc:	d905      	bls.n	800b6ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b6e2:	4b0a      	ldr	r3, [pc, #40]	@ (800b70c <xTaskRemoveFromEventList+0xc4>)
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	e001      	b.n	800b6ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b6ea:	2300      	movs	r3, #0
 800b6ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b6ee:	697b      	ldr	r3, [r7, #20]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	20001910 	.word	0x20001910
 800b6fc:	200018f0 	.word	0x200018f0
 800b700:	20001418 	.word	0x20001418
 800b704:	200018a8 	.word	0x200018a8
 800b708:	20001414 	.word	0x20001414
 800b70c:	200018fc 	.word	0x200018fc

0800b710 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b710:	b480      	push	{r7}
 800b712:	b083      	sub	sp, #12
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b718:	4b06      	ldr	r3, [pc, #24]	@ (800b734 <vTaskInternalSetTimeOutState+0x24>)
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b720:	4b05      	ldr	r3, [pc, #20]	@ (800b738 <vTaskInternalSetTimeOutState+0x28>)
 800b722:	681a      	ldr	r2, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	605a      	str	r2, [r3, #4]
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	20001900 	.word	0x20001900
 800b738:	200018ec 	.word	0x200018ec

0800b73c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b088      	sub	sp, #32
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d10b      	bne.n	800b764 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b750:	f383 8811 	msr	BASEPRI, r3
 800b754:	f3bf 8f6f 	isb	sy
 800b758:	f3bf 8f4f 	dsb	sy
 800b75c:	613b      	str	r3, [r7, #16]
}
 800b75e:	bf00      	nop
 800b760:	bf00      	nop
 800b762:	e7fd      	b.n	800b760 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10b      	bne.n	800b782 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b76a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	60fb      	str	r3, [r7, #12]
}
 800b77c:	bf00      	nop
 800b77e:	bf00      	nop
 800b780:	e7fd      	b.n	800b77e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b782:	f000 ff79 	bl	800c678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b786:	4b1d      	ldr	r3, [pc, #116]	@ (800b7fc <xTaskCheckForTimeOut+0xc0>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	685b      	ldr	r3, [r3, #4]
 800b790:	69ba      	ldr	r2, [r7, #24]
 800b792:	1ad3      	subs	r3, r2, r3
 800b794:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b79e:	d102      	bne.n	800b7a6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	e023      	b.n	800b7ee <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681a      	ldr	r2, [r3, #0]
 800b7aa:	4b15      	ldr	r3, [pc, #84]	@ (800b800 <xTaskCheckForTimeOut+0xc4>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	429a      	cmp	r2, r3
 800b7b0:	d007      	beq.n	800b7c2 <xTaskCheckForTimeOut+0x86>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	69ba      	ldr	r2, [r7, #24]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d302      	bcc.n	800b7c2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	61fb      	str	r3, [r7, #28]
 800b7c0:	e015      	b.n	800b7ee <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d20b      	bcs.n	800b7e4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	1ad2      	subs	r2, r2, r3
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b7d8:	6878      	ldr	r0, [r7, #4]
 800b7da:	f7ff ff99 	bl	800b710 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	61fb      	str	r3, [r7, #28]
 800b7e2:	e004      	b.n	800b7ee <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b7e4:	683b      	ldr	r3, [r7, #0]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b7ee:	f000 ff75 	bl	800c6dc <vPortExitCritical>

	return xReturn;
 800b7f2:	69fb      	ldr	r3, [r7, #28]
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	3720      	adds	r7, #32
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	bd80      	pop	{r7, pc}
 800b7fc:	200018ec 	.word	0x200018ec
 800b800:	20001900 	.word	0x20001900

0800b804 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b804:	b480      	push	{r7}
 800b806:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b808:	4b03      	ldr	r3, [pc, #12]	@ (800b818 <vTaskMissedYield+0x14>)
 800b80a:	2201      	movs	r2, #1
 800b80c:	601a      	str	r2, [r3, #0]
}
 800b80e:	bf00      	nop
 800b810:	46bd      	mov	sp, r7
 800b812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b816:	4770      	bx	lr
 800b818:	200018fc 	.word	0x200018fc

0800b81c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b824:	f000 f852 	bl	800b8cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b828:	4b06      	ldr	r3, [pc, #24]	@ (800b844 <prvIdleTask+0x28>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d9f9      	bls.n	800b824 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b830:	4b05      	ldr	r3, [pc, #20]	@ (800b848 <prvIdleTask+0x2c>)
 800b832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b836:	601a      	str	r2, [r3, #0]
 800b838:	f3bf 8f4f 	dsb	sy
 800b83c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b840:	e7f0      	b.n	800b824 <prvIdleTask+0x8>
 800b842:	bf00      	nop
 800b844:	20001418 	.word	0x20001418
 800b848:	e000ed04 	.word	0xe000ed04

0800b84c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b852:	2300      	movs	r3, #0
 800b854:	607b      	str	r3, [r7, #4]
 800b856:	e00c      	b.n	800b872 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	4613      	mov	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4a12      	ldr	r2, [pc, #72]	@ (800b8ac <prvInitialiseTaskLists+0x60>)
 800b864:	4413      	add	r3, r2
 800b866:	4618      	mov	r0, r3
 800b868:	f7fe fbb4 	bl	8009fd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3301      	adds	r3, #1
 800b870:	607b      	str	r3, [r7, #4]
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b37      	cmp	r3, #55	@ 0x37
 800b876:	d9ef      	bls.n	800b858 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b878:	480d      	ldr	r0, [pc, #52]	@ (800b8b0 <prvInitialiseTaskLists+0x64>)
 800b87a:	f7fe fbab 	bl	8009fd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b87e:	480d      	ldr	r0, [pc, #52]	@ (800b8b4 <prvInitialiseTaskLists+0x68>)
 800b880:	f7fe fba8 	bl	8009fd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b884:	480c      	ldr	r0, [pc, #48]	@ (800b8b8 <prvInitialiseTaskLists+0x6c>)
 800b886:	f7fe fba5 	bl	8009fd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b88a:	480c      	ldr	r0, [pc, #48]	@ (800b8bc <prvInitialiseTaskLists+0x70>)
 800b88c:	f7fe fba2 	bl	8009fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b890:	480b      	ldr	r0, [pc, #44]	@ (800b8c0 <prvInitialiseTaskLists+0x74>)
 800b892:	f7fe fb9f 	bl	8009fd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b896:	4b0b      	ldr	r3, [pc, #44]	@ (800b8c4 <prvInitialiseTaskLists+0x78>)
 800b898:	4a05      	ldr	r2, [pc, #20]	@ (800b8b0 <prvInitialiseTaskLists+0x64>)
 800b89a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b89c:	4b0a      	ldr	r3, [pc, #40]	@ (800b8c8 <prvInitialiseTaskLists+0x7c>)
 800b89e:	4a05      	ldr	r2, [pc, #20]	@ (800b8b4 <prvInitialiseTaskLists+0x68>)
 800b8a0:	601a      	str	r2, [r3, #0]
}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	20001418 	.word	0x20001418
 800b8b0:	20001878 	.word	0x20001878
 800b8b4:	2000188c 	.word	0x2000188c
 800b8b8:	200018a8 	.word	0x200018a8
 800b8bc:	200018bc 	.word	0x200018bc
 800b8c0:	200018d4 	.word	0x200018d4
 800b8c4:	200018a0 	.word	0x200018a0
 800b8c8:	200018a4 	.word	0x200018a4

0800b8cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b8d2:	e019      	b.n	800b908 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b8d4:	f000 fed0 	bl	800c678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8d8:	4b10      	ldr	r3, [pc, #64]	@ (800b91c <prvCheckTasksWaitingTermination+0x50>)
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	68db      	ldr	r3, [r3, #12]
 800b8de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	3304      	adds	r3, #4
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f7fe fbff 	bl	800a0e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b8ea:	4b0d      	ldr	r3, [pc, #52]	@ (800b920 <prvCheckTasksWaitingTermination+0x54>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	3b01      	subs	r3, #1
 800b8f0:	4a0b      	ldr	r2, [pc, #44]	@ (800b920 <prvCheckTasksWaitingTermination+0x54>)
 800b8f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b8f4:	4b0b      	ldr	r3, [pc, #44]	@ (800b924 <prvCheckTasksWaitingTermination+0x58>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	3b01      	subs	r3, #1
 800b8fa:	4a0a      	ldr	r2, [pc, #40]	@ (800b924 <prvCheckTasksWaitingTermination+0x58>)
 800b8fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b8fe:	f000 feed 	bl	800c6dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b902:	6878      	ldr	r0, [r7, #4]
 800b904:	f000 f810 	bl	800b928 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b908:	4b06      	ldr	r3, [pc, #24]	@ (800b924 <prvCheckTasksWaitingTermination+0x58>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d1e1      	bne.n	800b8d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b910:	bf00      	nop
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	200018bc 	.word	0x200018bc
 800b920:	200018e8 	.word	0x200018e8
 800b924:	200018d0 	.word	0x200018d0

0800b928 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b084      	sub	sp, #16
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	3354      	adds	r3, #84	@ 0x54
 800b934:	4618      	mov	r0, r3
 800b936:	f001 fa03 	bl	800cd40 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b940:	2b00      	cmp	r3, #0
 800b942:	d108      	bne.n	800b956 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b948:	4618      	mov	r0, r3
 800b94a:	f001 f885 	bl	800ca58 <vPortFree>
				vPortFree( pxTCB );
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f001 f882 	bl	800ca58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b954:	e019      	b.n	800b98a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d103      	bne.n	800b968 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f001 f879 	bl	800ca58 <vPortFree>
	}
 800b966:	e010      	b.n	800b98a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d00b      	beq.n	800b98a <prvDeleteTCB+0x62>
	__asm volatile
 800b972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b976:	f383 8811 	msr	BASEPRI, r3
 800b97a:	f3bf 8f6f 	isb	sy
 800b97e:	f3bf 8f4f 	dsb	sy
 800b982:	60fb      	str	r3, [r7, #12]
}
 800b984:	bf00      	nop
 800b986:	bf00      	nop
 800b988:	e7fd      	b.n	800b986 <prvDeleteTCB+0x5e>
	}
 800b98a:	bf00      	nop
 800b98c:	3710      	adds	r7, #16
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}
	...

0800b994 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b994:	b480      	push	{r7}
 800b996:	b083      	sub	sp, #12
 800b998:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b99a:	4b0c      	ldr	r3, [pc, #48]	@ (800b9cc <prvResetNextTaskUnblockTime+0x38>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d104      	bne.n	800b9ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b9a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b9aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b9ac:	e008      	b.n	800b9c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9ae:	4b07      	ldr	r3, [pc, #28]	@ (800b9cc <prvResetNextTaskUnblockTime+0x38>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	68db      	ldr	r3, [r3, #12]
 800b9b4:	68db      	ldr	r3, [r3, #12]
 800b9b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	4a04      	ldr	r2, [pc, #16]	@ (800b9d0 <prvResetNextTaskUnblockTime+0x3c>)
 800b9be:	6013      	str	r3, [r2, #0]
}
 800b9c0:	bf00      	nop
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr
 800b9cc:	200018a0 	.word	0x200018a0
 800b9d0:	20001908 	.word	0x20001908

0800b9d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b9da:	4b0b      	ldr	r3, [pc, #44]	@ (800ba08 <xTaskGetSchedulerState+0x34>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d102      	bne.n	800b9e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	607b      	str	r3, [r7, #4]
 800b9e6:	e008      	b.n	800b9fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9e8:	4b08      	ldr	r3, [pc, #32]	@ (800ba0c <xTaskGetSchedulerState+0x38>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d102      	bne.n	800b9f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	607b      	str	r3, [r7, #4]
 800b9f4:	e001      	b.n	800b9fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b9fa:	687b      	ldr	r3, [r7, #4]
	}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	370c      	adds	r7, #12
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr
 800ba08:	200018f4 	.word	0x200018f4
 800ba0c:	20001910 	.word	0x20001910

0800ba10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b086      	sub	sp, #24
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d058      	beq.n	800bad8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba26:	4b2f      	ldr	r3, [pc, #188]	@ (800bae4 <xTaskPriorityDisinherit+0xd4>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d00b      	beq.n	800ba48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ba30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba34:	f383 8811 	msr	BASEPRI, r3
 800ba38:	f3bf 8f6f 	isb	sy
 800ba3c:	f3bf 8f4f 	dsb	sy
 800ba40:	60fb      	str	r3, [r7, #12]
}
 800ba42:	bf00      	nop
 800ba44:	bf00      	nop
 800ba46:	e7fd      	b.n	800ba44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d10b      	bne.n	800ba68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ba50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba54:	f383 8811 	msr	BASEPRI, r3
 800ba58:	f3bf 8f6f 	isb	sy
 800ba5c:	f3bf 8f4f 	dsb	sy
 800ba60:	60bb      	str	r3, [r7, #8]
}
 800ba62:	bf00      	nop
 800ba64:	bf00      	nop
 800ba66:	e7fd      	b.n	800ba64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba6c:	1e5a      	subs	r2, r3, #1
 800ba6e:	693b      	ldr	r3, [r7, #16]
 800ba70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba7a:	429a      	cmp	r2, r3
 800ba7c:	d02c      	beq.n	800bad8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d128      	bne.n	800bad8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	3304      	adds	r3, #4
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f7fe fb2c 	bl	800a0e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baa8:	4b0f      	ldr	r3, [pc, #60]	@ (800bae8 <xTaskPriorityDisinherit+0xd8>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	429a      	cmp	r2, r3
 800baae:	d903      	bls.n	800bab8 <xTaskPriorityDisinherit+0xa8>
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab4:	4a0c      	ldr	r2, [pc, #48]	@ (800bae8 <xTaskPriorityDisinherit+0xd8>)
 800bab6:	6013      	str	r3, [r2, #0]
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800babc:	4613      	mov	r3, r2
 800babe:	009b      	lsls	r3, r3, #2
 800bac0:	4413      	add	r3, r2
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4a09      	ldr	r2, [pc, #36]	@ (800baec <xTaskPriorityDisinherit+0xdc>)
 800bac6:	441a      	add	r2, r3
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	3304      	adds	r3, #4
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fe faad 	bl	800a02e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bad4:	2301      	movs	r3, #1
 800bad6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bad8:	697b      	ldr	r3, [r7, #20]
	}
 800bada:	4618      	mov	r0, r3
 800badc:	3718      	adds	r7, #24
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20001414 	.word	0x20001414
 800bae8:	200018f0 	.word	0x200018f0
 800baec:	20001418 	.word	0x20001418

0800baf0 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b084      	sub	sp, #16
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bafa:	f000 fdbd 	bl	800c678 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bafe:	4b20      	ldr	r3, [pc, #128]	@ (800bb80 <ulTaskNotifyTake+0x90>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d113      	bne.n	800bb32 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bb0a:	4b1d      	ldr	r3, [pc, #116]	@ (800bb80 <ulTaskNotifyTake+0x90>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d00b      	beq.n	800bb32 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb1a:	2101      	movs	r1, #1
 800bb1c:	6838      	ldr	r0, [r7, #0]
 800bb1e:	f000 f8c9 	bl	800bcb4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bb22:	4b18      	ldr	r3, [pc, #96]	@ (800bb84 <ulTaskNotifyTake+0x94>)
 800bb24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bb28:	601a      	str	r2, [r3, #0]
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bb32:	f000 fdd3 	bl	800c6dc <vPortExitCritical>

		taskENTER_CRITICAL();
 800bb36:	f000 fd9f 	bl	800c678 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bb3a:	4b11      	ldr	r3, [pc, #68]	@ (800bb80 <ulTaskNotifyTake+0x90>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bb42:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00e      	beq.n	800bb68 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d005      	beq.n	800bb5c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bb50:	4b0b      	ldr	r3, [pc, #44]	@ (800bb80 <ulTaskNotifyTake+0x90>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2200      	movs	r2, #0
 800bb56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800bb5a:	e005      	b.n	800bb68 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bb5c:	4b08      	ldr	r3, [pc, #32]	@ (800bb80 <ulTaskNotifyTake+0x90>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	3a01      	subs	r2, #1
 800bb64:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb68:	4b05      	ldr	r3, [pc, #20]	@ (800bb80 <ulTaskNotifyTake+0x90>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800bb72:	f000 fdb3 	bl	800c6dc <vPortExitCritical>

		return ulReturn;
 800bb76:	68fb      	ldr	r3, [r7, #12]
	}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	20001414 	.word	0x20001414
 800bb84:	e000ed04 	.word	0xe000ed04

0800bb88 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b08a      	sub	sp, #40	@ 0x28
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
 800bb90:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d10b      	bne.n	800bbb0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800bb98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb9c:	f383 8811 	msr	BASEPRI, r3
 800bba0:	f3bf 8f6f 	isb	sy
 800bba4:	f3bf 8f4f 	dsb	sy
 800bba8:	61bb      	str	r3, [r7, #24]
}
 800bbaa:	bf00      	nop
 800bbac:	bf00      	nop
 800bbae:	e7fd      	b.n	800bbac <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbb0:	f000 fe42 	bl	800c838 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800bbb8:	f3ef 8211 	mrs	r2, BASEPRI
 800bbbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbc0:	f383 8811 	msr	BASEPRI, r3
 800bbc4:	f3bf 8f6f 	isb	sy
 800bbc8:	f3bf 8f4f 	dsb	sy
 800bbcc:	617a      	str	r2, [r7, #20]
 800bbce:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bbd0:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bbd2:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd6:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800bbda:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bbdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbde:	2202      	movs	r2, #2
 800bbe0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bbea:	1c5a      	adds	r2, r3, #1
 800bbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbee:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bbf2:	7ffb      	ldrb	r3, [r7, #31]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d147      	bne.n	800bc88 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d00b      	beq.n	800bc18 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800bc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc04:	f383 8811 	msr	BASEPRI, r3
 800bc08:	f3bf 8f6f 	isb	sy
 800bc0c:	f3bf 8f4f 	dsb	sy
 800bc10:	60fb      	str	r3, [r7, #12]
}
 800bc12:	bf00      	nop
 800bc14:	bf00      	nop
 800bc16:	e7fd      	b.n	800bc14 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc18:	4b20      	ldr	r3, [pc, #128]	@ (800bc9c <vTaskNotifyGiveFromISR+0x114>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d11d      	bne.n	800bc5c <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc22:	3304      	adds	r3, #4
 800bc24:	4618      	mov	r0, r3
 800bc26:	f7fe fa5f 	bl	800a0e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc2e:	4b1c      	ldr	r3, [pc, #112]	@ (800bca0 <vTaskNotifyGiveFromISR+0x118>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d903      	bls.n	800bc3e <vTaskNotifyGiveFromISR+0xb6>
 800bc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc3a:	4a19      	ldr	r2, [pc, #100]	@ (800bca0 <vTaskNotifyGiveFromISR+0x118>)
 800bc3c:	6013      	str	r3, [r2, #0]
 800bc3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc42:	4613      	mov	r3, r2
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	4413      	add	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4a16      	ldr	r2, [pc, #88]	@ (800bca4 <vTaskNotifyGiveFromISR+0x11c>)
 800bc4c:	441a      	add	r2, r3
 800bc4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc50:	3304      	adds	r3, #4
 800bc52:	4619      	mov	r1, r3
 800bc54:	4610      	mov	r0, r2
 800bc56:	f7fe f9ea 	bl	800a02e <vListInsertEnd>
 800bc5a:	e005      	b.n	800bc68 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc5e:	3318      	adds	r3, #24
 800bc60:	4619      	mov	r1, r3
 800bc62:	4811      	ldr	r0, [pc, #68]	@ (800bca8 <vTaskNotifyGiveFromISR+0x120>)
 800bc64:	f7fe f9e3 	bl	800a02e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	@ (800bcac <vTaskNotifyGiveFromISR+0x124>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d908      	bls.n	800bc88 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d002      	beq.n	800bc82 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800bc82:	4b0b      	ldr	r3, [pc, #44]	@ (800bcb0 <vTaskNotifyGiveFromISR+0x128>)
 800bc84:	2201      	movs	r2, #1
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	6a3b      	ldr	r3, [r7, #32]
 800bc8a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	f383 8811 	msr	BASEPRI, r3
}
 800bc92:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800bc94:	bf00      	nop
 800bc96:	3728      	adds	r7, #40	@ 0x28
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}
 800bc9c:	20001910 	.word	0x20001910
 800bca0:	200018f0 	.word	0x200018f0
 800bca4:	20001418 	.word	0x20001418
 800bca8:	200018a8 	.word	0x200018a8
 800bcac:	20001414 	.word	0x20001414
 800bcb0:	200018fc 	.word	0x200018fc

0800bcb4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bcbe:	4b21      	ldr	r3, [pc, #132]	@ (800bd44 <prvAddCurrentTaskToDelayedList+0x90>)
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bcc4:	4b20      	ldr	r3, [pc, #128]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	3304      	adds	r3, #4
 800bcca:	4618      	mov	r0, r3
 800bccc:	f7fe fa0c 	bl	800a0e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bcd6:	d10a      	bne.n	800bcee <prvAddCurrentTaskToDelayedList+0x3a>
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d007      	beq.n	800bcee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bcde:	4b1a      	ldr	r3, [pc, #104]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	3304      	adds	r3, #4
 800bce4:	4619      	mov	r1, r3
 800bce6:	4819      	ldr	r0, [pc, #100]	@ (800bd4c <prvAddCurrentTaskToDelayedList+0x98>)
 800bce8:	f7fe f9a1 	bl	800a02e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bcec:	e026      	b.n	800bd3c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bcf6:	4b14      	ldr	r3, [pc, #80]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	68ba      	ldr	r2, [r7, #8]
 800bcfc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bcfe:	68ba      	ldr	r2, [r7, #8]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	429a      	cmp	r2, r3
 800bd04:	d209      	bcs.n	800bd1a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd06:	4b12      	ldr	r3, [pc, #72]	@ (800bd50 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	4b0f      	ldr	r3, [pc, #60]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	3304      	adds	r3, #4
 800bd10:	4619      	mov	r1, r3
 800bd12:	4610      	mov	r0, r2
 800bd14:	f7fe f9af 	bl	800a076 <vListInsert>
}
 800bd18:	e010      	b.n	800bd3c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd1a:	4b0e      	ldr	r3, [pc, #56]	@ (800bd54 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	4b0a      	ldr	r3, [pc, #40]	@ (800bd48 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3304      	adds	r3, #4
 800bd24:	4619      	mov	r1, r3
 800bd26:	4610      	mov	r0, r2
 800bd28:	f7fe f9a5 	bl	800a076 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bd2c:	4b0a      	ldr	r3, [pc, #40]	@ (800bd58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68ba      	ldr	r2, [r7, #8]
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d202      	bcs.n	800bd3c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bd36:	4a08      	ldr	r2, [pc, #32]	@ (800bd58 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	6013      	str	r3, [r2, #0]
}
 800bd3c:	bf00      	nop
 800bd3e:	3710      	adds	r7, #16
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	200018ec 	.word	0x200018ec
 800bd48:	20001414 	.word	0x20001414
 800bd4c:	200018d4 	.word	0x200018d4
 800bd50:	200018a4 	.word	0x200018a4
 800bd54:	200018a0 	.word	0x200018a0
 800bd58:	20001908 	.word	0x20001908

0800bd5c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b08a      	sub	sp, #40	@ 0x28
 800bd60:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bd62:	2300      	movs	r3, #0
 800bd64:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bd66:	f000 fb13 	bl	800c390 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bd6a:	4b1d      	ldr	r3, [pc, #116]	@ (800bde0 <xTimerCreateTimerTask+0x84>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d021      	beq.n	800bdb6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd7a:	1d3a      	adds	r2, r7, #4
 800bd7c:	f107 0108 	add.w	r1, r7, #8
 800bd80:	f107 030c 	add.w	r3, r7, #12
 800bd84:	4618      	mov	r0, r3
 800bd86:	f7fe f90b 	bl	8009fa0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd8a:	6879      	ldr	r1, [r7, #4]
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	9202      	str	r2, [sp, #8]
 800bd92:	9301      	str	r3, [sp, #4]
 800bd94:	2302      	movs	r3, #2
 800bd96:	9300      	str	r3, [sp, #0]
 800bd98:	2300      	movs	r3, #0
 800bd9a:	460a      	mov	r2, r1
 800bd9c:	4911      	ldr	r1, [pc, #68]	@ (800bde4 <xTimerCreateTimerTask+0x88>)
 800bd9e:	4812      	ldr	r0, [pc, #72]	@ (800bde8 <xTimerCreateTimerTask+0x8c>)
 800bda0:	f7fe fec6 	bl	800ab30 <xTaskCreateStatic>
 800bda4:	4603      	mov	r3, r0
 800bda6:	4a11      	ldr	r2, [pc, #68]	@ (800bdec <xTimerCreateTimerTask+0x90>)
 800bda8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bdaa:	4b10      	ldr	r3, [pc, #64]	@ (800bdec <xTimerCreateTimerTask+0x90>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d001      	beq.n	800bdb6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10b      	bne.n	800bdd4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bdbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc0:	f383 8811 	msr	BASEPRI, r3
 800bdc4:	f3bf 8f6f 	isb	sy
 800bdc8:	f3bf 8f4f 	dsb	sy
 800bdcc:	613b      	str	r3, [r7, #16]
}
 800bdce:	bf00      	nop
 800bdd0:	bf00      	nop
 800bdd2:	e7fd      	b.n	800bdd0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bdd4:	697b      	ldr	r3, [r7, #20]
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3718      	adds	r7, #24
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20001944 	.word	0x20001944
 800bde4:	0800d710 	.word	0x0800d710
 800bde8:	0800bf29 	.word	0x0800bf29
 800bdec:	20001948 	.word	0x20001948

0800bdf0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08a      	sub	sp, #40	@ 0x28
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
 800bdfc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bdfe:	2300      	movs	r3, #0
 800be00:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d10b      	bne.n	800be20 <xTimerGenericCommand+0x30>
	__asm volatile
 800be08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	623b      	str	r3, [r7, #32]
}
 800be1a:	bf00      	nop
 800be1c:	bf00      	nop
 800be1e:	e7fd      	b.n	800be1c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800be20:	4b19      	ldr	r3, [pc, #100]	@ (800be88 <xTimerGenericCommand+0x98>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d02a      	beq.n	800be7e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b05      	cmp	r3, #5
 800be38:	dc18      	bgt.n	800be6c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800be3a:	f7ff fdcb 	bl	800b9d4 <xTaskGetSchedulerState>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b02      	cmp	r3, #2
 800be42:	d109      	bne.n	800be58 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800be44:	4b10      	ldr	r3, [pc, #64]	@ (800be88 <xTimerGenericCommand+0x98>)
 800be46:	6818      	ldr	r0, [r3, #0]
 800be48:	f107 0110 	add.w	r1, r7, #16
 800be4c:	2300      	movs	r3, #0
 800be4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800be50:	f7fe fa7e 	bl	800a350 <xQueueGenericSend>
 800be54:	6278      	str	r0, [r7, #36]	@ 0x24
 800be56:	e012      	b.n	800be7e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800be58:	4b0b      	ldr	r3, [pc, #44]	@ (800be88 <xTimerGenericCommand+0x98>)
 800be5a:	6818      	ldr	r0, [r3, #0]
 800be5c:	f107 0110 	add.w	r1, r7, #16
 800be60:	2300      	movs	r3, #0
 800be62:	2200      	movs	r2, #0
 800be64:	f7fe fa74 	bl	800a350 <xQueueGenericSend>
 800be68:	6278      	str	r0, [r7, #36]	@ 0x24
 800be6a:	e008      	b.n	800be7e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800be6c:	4b06      	ldr	r3, [pc, #24]	@ (800be88 <xTimerGenericCommand+0x98>)
 800be6e:	6818      	ldr	r0, [r3, #0]
 800be70:	f107 0110 	add.w	r1, r7, #16
 800be74:	2300      	movs	r3, #0
 800be76:	683a      	ldr	r2, [r7, #0]
 800be78:	f7fe fb6c 	bl	800a554 <xQueueGenericSendFromISR>
 800be7c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be80:	4618      	mov	r0, r3
 800be82:	3728      	adds	r7, #40	@ 0x28
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	20001944 	.word	0x20001944

0800be8c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b088      	sub	sp, #32
 800be90:	af02      	add	r7, sp, #8
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be96:	4b23      	ldr	r3, [pc, #140]	@ (800bf24 <prvProcessExpiredTimer+0x98>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68db      	ldr	r3, [r3, #12]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	3304      	adds	r3, #4
 800bea4:	4618      	mov	r0, r3
 800bea6:	f7fe f91f 	bl	800a0e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800beb0:	f003 0304 	and.w	r3, r3, #4
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d023      	beq.n	800bf00 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	699a      	ldr	r2, [r3, #24]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	18d1      	adds	r1, r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	683a      	ldr	r2, [r7, #0]
 800bec4:	6978      	ldr	r0, [r7, #20]
 800bec6:	f000 f8d5 	bl	800c074 <prvInsertTimerInActiveList>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	d020      	beq.n	800bf12 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bed0:	2300      	movs	r3, #0
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	2300      	movs	r3, #0
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	2100      	movs	r1, #0
 800beda:	6978      	ldr	r0, [r7, #20]
 800bedc:	f7ff ff88 	bl	800bdf0 <xTimerGenericCommand>
 800bee0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d114      	bne.n	800bf12 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	60fb      	str	r3, [r7, #12]
}
 800befa:	bf00      	nop
 800befc:	bf00      	nop
 800befe:	e7fd      	b.n	800befc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf00:	697b      	ldr	r3, [r7, #20]
 800bf02:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf06:	f023 0301 	bic.w	r3, r3, #1
 800bf0a:	b2da      	uxtb	r2, r3
 800bf0c:	697b      	ldr	r3, [r7, #20]
 800bf0e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	6978      	ldr	r0, [r7, #20]
 800bf18:	4798      	blx	r3
}
 800bf1a:	bf00      	nop
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	2000193c 	.word	0x2000193c

0800bf28 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf30:	f107 0308 	add.w	r3, r7, #8
 800bf34:	4618      	mov	r0, r3
 800bf36:	f000 f859 	bl	800bfec <prvGetNextExpireTime>
 800bf3a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	4619      	mov	r1, r3
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	f000 f805 	bl	800bf50 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bf46:	f000 f8d7 	bl	800c0f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bf4a:	bf00      	nop
 800bf4c:	e7f0      	b.n	800bf30 <prvTimerTask+0x8>
	...

0800bf50 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b084      	sub	sp, #16
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
 800bf58:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bf5a:	f7ff f84d 	bl	800aff8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bf5e:	f107 0308 	add.w	r3, r7, #8
 800bf62:	4618      	mov	r0, r3
 800bf64:	f000 f866 	bl	800c034 <prvSampleTimeNow>
 800bf68:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d130      	bne.n	800bfd2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <prvProcessTimerOrBlockTask+0x3c>
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d806      	bhi.n	800bf8c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf7e:	f7ff f849 	bl	800b014 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf82:	68f9      	ldr	r1, [r7, #12]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f7ff ff81 	bl	800be8c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf8a:	e024      	b.n	800bfd6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d008      	beq.n	800bfa4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf92:	4b13      	ldr	r3, [pc, #76]	@ (800bfe0 <prvProcessTimerOrBlockTask+0x90>)
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <prvProcessTimerOrBlockTask+0x50>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	e000      	b.n	800bfa2 <prvProcessTimerOrBlockTask+0x52>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bfa4:	4b0f      	ldr	r3, [pc, #60]	@ (800bfe4 <prvProcessTimerOrBlockTask+0x94>)
 800bfa6:	6818      	ldr	r0, [r3, #0]
 800bfa8:	687a      	ldr	r2, [r7, #4]
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	683a      	ldr	r2, [r7, #0]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	f7fe fd89 	bl	800aac8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bfb6:	f7ff f82d 	bl	800b014 <xTaskResumeAll>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10a      	bne.n	800bfd6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bfc0:	4b09      	ldr	r3, [pc, #36]	@ (800bfe8 <prvProcessTimerOrBlockTask+0x98>)
 800bfc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfc6:	601a      	str	r2, [r3, #0]
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	f3bf 8f6f 	isb	sy
}
 800bfd0:	e001      	b.n	800bfd6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bfd2:	f7ff f81f 	bl	800b014 <xTaskResumeAll>
}
 800bfd6:	bf00      	nop
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	20001940 	.word	0x20001940
 800bfe4:	20001944 	.word	0x20001944
 800bfe8:	e000ed04 	.word	0xe000ed04

0800bfec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bff4:	4b0e      	ldr	r3, [pc, #56]	@ (800c030 <prvGetNextExpireTime+0x44>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d101      	bne.n	800c002 <prvGetNextExpireTime+0x16>
 800bffe:	2201      	movs	r2, #1
 800c000:	e000      	b.n	800c004 <prvGetNextExpireTime+0x18>
 800c002:	2200      	movs	r2, #0
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d105      	bne.n	800c01c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c010:	4b07      	ldr	r3, [pc, #28]	@ (800c030 <prvGetNextExpireTime+0x44>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	68db      	ldr	r3, [r3, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	60fb      	str	r3, [r7, #12]
 800c01a:	e001      	b.n	800c020 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c01c:	2300      	movs	r3, #0
 800c01e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c020:	68fb      	ldr	r3, [r7, #12]
}
 800c022:	4618      	mov	r0, r3
 800c024:	3714      	adds	r7, #20
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr
 800c02e:	bf00      	nop
 800c030:	2000193c 	.word	0x2000193c

0800c034 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c034:	b580      	push	{r7, lr}
 800c036:	b084      	sub	sp, #16
 800c038:	af00      	add	r7, sp, #0
 800c03a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c03c:	f7ff f888 	bl	800b150 <xTaskGetTickCount>
 800c040:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c042:	4b0b      	ldr	r3, [pc, #44]	@ (800c070 <prvSampleTimeNow+0x3c>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	68fa      	ldr	r2, [r7, #12]
 800c048:	429a      	cmp	r2, r3
 800c04a:	d205      	bcs.n	800c058 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c04c:	f000 f93a 	bl	800c2c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	2201      	movs	r2, #1
 800c054:	601a      	str	r2, [r3, #0]
 800c056:	e002      	b.n	800c05e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2200      	movs	r2, #0
 800c05c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c05e:	4a04      	ldr	r2, [pc, #16]	@ (800c070 <prvSampleTimeNow+0x3c>)
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c064:	68fb      	ldr	r3, [r7, #12]
}
 800c066:	4618      	mov	r0, r3
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	2000194c 	.word	0x2000194c

0800c074 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	60f8      	str	r0, [r7, #12]
 800c07c:	60b9      	str	r1, [r7, #8]
 800c07e:	607a      	str	r2, [r7, #4]
 800c080:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c082:	2300      	movs	r3, #0
 800c084:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	68ba      	ldr	r2, [r7, #8]
 800c08a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	68fa      	ldr	r2, [r7, #12]
 800c090:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c092:	68ba      	ldr	r2, [r7, #8]
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	429a      	cmp	r2, r3
 800c098:	d812      	bhi.n	800c0c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c09a:	687a      	ldr	r2, [r7, #4]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	1ad2      	subs	r2, r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	699b      	ldr	r3, [r3, #24]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d302      	bcc.n	800c0ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c0a8:	2301      	movs	r3, #1
 800c0aa:	617b      	str	r3, [r7, #20]
 800c0ac:	e01b      	b.n	800c0e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c0ae:	4b10      	ldr	r3, [pc, #64]	@ (800c0f0 <prvInsertTimerInActiveList+0x7c>)
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	3304      	adds	r3, #4
 800c0b6:	4619      	mov	r1, r3
 800c0b8:	4610      	mov	r0, r2
 800c0ba:	f7fd ffdc 	bl	800a076 <vListInsert>
 800c0be:	e012      	b.n	800c0e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	683b      	ldr	r3, [r7, #0]
 800c0c4:	429a      	cmp	r2, r3
 800c0c6:	d206      	bcs.n	800c0d6 <prvInsertTimerInActiveList+0x62>
 800c0c8:	68ba      	ldr	r2, [r7, #8]
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	429a      	cmp	r2, r3
 800c0ce:	d302      	bcc.n	800c0d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	617b      	str	r3, [r7, #20]
 800c0d4:	e007      	b.n	800c0e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c0d6:	4b07      	ldr	r3, [pc, #28]	@ (800c0f4 <prvInsertTimerInActiveList+0x80>)
 800c0d8:	681a      	ldr	r2, [r3, #0]
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	3304      	adds	r3, #4
 800c0de:	4619      	mov	r1, r3
 800c0e0:	4610      	mov	r0, r2
 800c0e2:	f7fd ffc8 	bl	800a076 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c0e6:	697b      	ldr	r3, [r7, #20]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	20001940 	.word	0x20001940
 800c0f4:	2000193c 	.word	0x2000193c

0800c0f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08e      	sub	sp, #56	@ 0x38
 800c0fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c0fe:	e0ce      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2b00      	cmp	r3, #0
 800c104:	da19      	bge.n	800c13a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c106:	1d3b      	adds	r3, r7, #4
 800c108:	3304      	adds	r3, #4
 800c10a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c10c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10b      	bne.n	800c12a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	61fb      	str	r3, [r7, #28]
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	e7fd      	b.n	800c126 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c12a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c130:	6850      	ldr	r0, [r2, #4]
 800c132:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c134:	6892      	ldr	r2, [r2, #8]
 800c136:	4611      	mov	r1, r2
 800c138:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	f2c0 80ae 	blt.w	800c29e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c148:	695b      	ldr	r3, [r3, #20]
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d004      	beq.n	800c158 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c150:	3304      	adds	r3, #4
 800c152:	4618      	mov	r0, r3
 800c154:	f7fd ffc8 	bl	800a0e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c158:	463b      	mov	r3, r7
 800c15a:	4618      	mov	r0, r3
 800c15c:	f7ff ff6a 	bl	800c034 <prvSampleTimeNow>
 800c160:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2b09      	cmp	r3, #9
 800c166:	f200 8097 	bhi.w	800c298 <prvProcessReceivedCommands+0x1a0>
 800c16a:	a201      	add	r2, pc, #4	@ (adr r2, 800c170 <prvProcessReceivedCommands+0x78>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c199 	.word	0x0800c199
 800c174:	0800c199 	.word	0x0800c199
 800c178:	0800c199 	.word	0x0800c199
 800c17c:	0800c20f 	.word	0x0800c20f
 800c180:	0800c223 	.word	0x0800c223
 800c184:	0800c26f 	.word	0x0800c26f
 800c188:	0800c199 	.word	0x0800c199
 800c18c:	0800c199 	.word	0x0800c199
 800c190:	0800c20f 	.word	0x0800c20f
 800c194:	0800c223 	.word	0x0800c223
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c19e:	f043 0301 	orr.w	r3, r3, #1
 800c1a2:	b2da      	uxtb	r2, r3
 800c1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ae:	699b      	ldr	r3, [r3, #24]
 800c1b0:	18d1      	adds	r1, r2, r3
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1b8:	f7ff ff5c 	bl	800c074 <prvInsertTimerInActiveList>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d06c      	beq.n	800c29c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1c8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1d0:	f003 0304 	and.w	r3, r3, #4
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d061      	beq.n	800c29c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c1d8:	68ba      	ldr	r2, [r7, #8]
 800c1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1dc:	699b      	ldr	r3, [r3, #24]
 800c1de:	441a      	add	r2, r3
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	9300      	str	r3, [sp, #0]
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1ea:	f7ff fe01 	bl	800bdf0 <xTimerGenericCommand>
 800c1ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c1f0:	6a3b      	ldr	r3, [r7, #32]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d152      	bne.n	800c29c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	61bb      	str	r3, [r7, #24]
}
 800c208:	bf00      	nop
 800c20a:	bf00      	nop
 800c20c:	e7fd      	b.n	800c20a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c214:	f023 0301 	bic.w	r3, r3, #1
 800c218:	b2da      	uxtb	r2, r3
 800c21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c220:	e03d      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c224:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c228:	f043 0301 	orr.w	r3, r3, #1
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c230:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c234:	68ba      	ldr	r2, [r7, #8]
 800c236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c238:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d10b      	bne.n	800c25a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	617b      	str	r3, [r7, #20]
}
 800c254:	bf00      	nop
 800c256:	bf00      	nop
 800c258:	e7fd      	b.n	800c256 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c25a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25c:	699a      	ldr	r2, [r3, #24]
 800c25e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c260:	18d1      	adds	r1, r2, r3
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c266:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c268:	f7ff ff04 	bl	800c074 <prvInsertTimerInActiveList>
					break;
 800c26c:	e017      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c26e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c274:	f003 0302 	and.w	r3, r3, #2
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d103      	bne.n	800c284 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c27c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c27e:	f000 fbeb 	bl	800ca58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c282:	e00c      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c286:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c28a:	f023 0301 	bic.w	r3, r3, #1
 800c28e:	b2da      	uxtb	r2, r3
 800c290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c296:	e002      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c298:	bf00      	nop
 800c29a:	e000      	b.n	800c29e <prvProcessReceivedCommands+0x1a6>
					break;
 800c29c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c29e:	4b08      	ldr	r3, [pc, #32]	@ (800c2c0 <prvProcessReceivedCommands+0x1c8>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	1d39      	adds	r1, r7, #4
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f7fe f9f2 	bl	800a690 <xQueueReceive>
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f47f af26 	bne.w	800c100 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c2b4:	bf00      	nop
 800c2b6:	bf00      	nop
 800c2b8:	3730      	adds	r7, #48	@ 0x30
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}
 800c2be:	bf00      	nop
 800c2c0:	20001944 	.word	0x20001944

0800c2c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b088      	sub	sp, #32
 800c2c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2ca:	e049      	b.n	800c360 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c2cc:	4b2e      	ldr	r3, [pc, #184]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2d6:	4b2c      	ldr	r3, [pc, #176]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	68db      	ldr	r3, [r3, #12]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3304      	adds	r3, #4
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fd feff 	bl	800a0e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	6a1b      	ldr	r3, [r3, #32]
 800c2ee:	68f8      	ldr	r0, [r7, #12]
 800c2f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2f8:	f003 0304 	and.w	r3, r3, #4
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d02f      	beq.n	800c360 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	693a      	ldr	r2, [r7, #16]
 800c306:	4413      	add	r3, r2
 800c308:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c30a:	68ba      	ldr	r2, [r7, #8]
 800c30c:	693b      	ldr	r3, [r7, #16]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d90e      	bls.n	800c330 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	68fa      	ldr	r2, [r7, #12]
 800c31c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c31e:	4b1a      	ldr	r3, [pc, #104]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c320:	681a      	ldr	r2, [r3, #0]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	3304      	adds	r3, #4
 800c326:	4619      	mov	r1, r3
 800c328:	4610      	mov	r0, r2
 800c32a:	f7fd fea4 	bl	800a076 <vListInsert>
 800c32e:	e017      	b.n	800c360 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c330:	2300      	movs	r3, #0
 800c332:	9300      	str	r3, [sp, #0]
 800c334:	2300      	movs	r3, #0
 800c336:	693a      	ldr	r2, [r7, #16]
 800c338:	2100      	movs	r1, #0
 800c33a:	68f8      	ldr	r0, [r7, #12]
 800c33c:	f7ff fd58 	bl	800bdf0 <xTimerGenericCommand>
 800c340:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10b      	bne.n	800c360 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	603b      	str	r3, [r7, #0]
}
 800c35a:	bf00      	nop
 800c35c:	bf00      	nop
 800c35e:	e7fd      	b.n	800c35c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c360:	4b09      	ldr	r3, [pc, #36]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d1b0      	bne.n	800c2cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c36a:	4b07      	ldr	r3, [pc, #28]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c370:	4b06      	ldr	r3, [pc, #24]	@ (800c38c <prvSwitchTimerLists+0xc8>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	4a04      	ldr	r2, [pc, #16]	@ (800c388 <prvSwitchTimerLists+0xc4>)
 800c376:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c378:	4a04      	ldr	r2, [pc, #16]	@ (800c38c <prvSwitchTimerLists+0xc8>)
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	6013      	str	r3, [r2, #0]
}
 800c37e:	bf00      	nop
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	2000193c 	.word	0x2000193c
 800c38c:	20001940 	.word	0x20001940

0800c390 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c396:	f000 f96f 	bl	800c678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c39a:	4b15      	ldr	r3, [pc, #84]	@ (800c3f0 <prvCheckForValidListAndQueue+0x60>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d120      	bne.n	800c3e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c3a2:	4814      	ldr	r0, [pc, #80]	@ (800c3f4 <prvCheckForValidListAndQueue+0x64>)
 800c3a4:	f7fd fe16 	bl	8009fd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c3a8:	4813      	ldr	r0, [pc, #76]	@ (800c3f8 <prvCheckForValidListAndQueue+0x68>)
 800c3aa:	f7fd fe13 	bl	8009fd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c3ae:	4b13      	ldr	r3, [pc, #76]	@ (800c3fc <prvCheckForValidListAndQueue+0x6c>)
 800c3b0:	4a10      	ldr	r2, [pc, #64]	@ (800c3f4 <prvCheckForValidListAndQueue+0x64>)
 800c3b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c3b4:	4b12      	ldr	r3, [pc, #72]	@ (800c400 <prvCheckForValidListAndQueue+0x70>)
 800c3b6:	4a10      	ldr	r2, [pc, #64]	@ (800c3f8 <prvCheckForValidListAndQueue+0x68>)
 800c3b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	4b11      	ldr	r3, [pc, #68]	@ (800c404 <prvCheckForValidListAndQueue+0x74>)
 800c3c0:	4a11      	ldr	r2, [pc, #68]	@ (800c408 <prvCheckForValidListAndQueue+0x78>)
 800c3c2:	2110      	movs	r1, #16
 800c3c4:	200a      	movs	r0, #10
 800c3c6:	f7fd ff23 	bl	800a210 <xQueueGenericCreateStatic>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	4a08      	ldr	r2, [pc, #32]	@ (800c3f0 <prvCheckForValidListAndQueue+0x60>)
 800c3ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c3d0:	4b07      	ldr	r3, [pc, #28]	@ (800c3f0 <prvCheckForValidListAndQueue+0x60>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d005      	beq.n	800c3e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c3d8:	4b05      	ldr	r3, [pc, #20]	@ (800c3f0 <prvCheckForValidListAndQueue+0x60>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	490b      	ldr	r1, [pc, #44]	@ (800c40c <prvCheckForValidListAndQueue+0x7c>)
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7fe fb48 	bl	800aa74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c3e4:	f000 f97a 	bl	800c6dc <vPortExitCritical>
}
 800c3e8:	bf00      	nop
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20001944 	.word	0x20001944
 800c3f4:	20001914 	.word	0x20001914
 800c3f8:	20001928 	.word	0x20001928
 800c3fc:	2000193c 	.word	0x2000193c
 800c400:	20001940 	.word	0x20001940
 800c404:	200019f0 	.word	0x200019f0
 800c408:	20001950 	.word	0x20001950
 800c40c:	0800d718 	.word	0x0800d718

0800c410 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	60f8      	str	r0, [r7, #12]
 800c418:	60b9      	str	r1, [r7, #8]
 800c41a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	3b04      	subs	r3, #4
 800c420:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c428:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	3b04      	subs	r3, #4
 800c42e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	f023 0201 	bic.w	r2, r3, #1
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	3b04      	subs	r3, #4
 800c43e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c440:	4a0c      	ldr	r2, [pc, #48]	@ (800c474 <pxPortInitialiseStack+0x64>)
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	3b14      	subs	r3, #20
 800c44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	3b04      	subs	r3, #4
 800c456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f06f 0202 	mvn.w	r2, #2
 800c45e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	3b20      	subs	r3, #32
 800c464:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c466:	68fb      	ldr	r3, [r7, #12]
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3714      	adds	r7, #20
 800c46c:	46bd      	mov	sp, r7
 800c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c472:	4770      	bx	lr
 800c474:	0800c479 	.word	0x0800c479

0800c478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c47e:	2300      	movs	r3, #0
 800c480:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c482:	4b13      	ldr	r3, [pc, #76]	@ (800c4d0 <prvTaskExitError+0x58>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c48a:	d00b      	beq.n	800c4a4 <prvTaskExitError+0x2c>
	__asm volatile
 800c48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c490:	f383 8811 	msr	BASEPRI, r3
 800c494:	f3bf 8f6f 	isb	sy
 800c498:	f3bf 8f4f 	dsb	sy
 800c49c:	60fb      	str	r3, [r7, #12]
}
 800c49e:	bf00      	nop
 800c4a0:	bf00      	nop
 800c4a2:	e7fd      	b.n	800c4a0 <prvTaskExitError+0x28>
	__asm volatile
 800c4a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	60bb      	str	r3, [r7, #8]
}
 800c4b6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c4b8:	bf00      	nop
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d0fc      	beq.n	800c4ba <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c4c0:	bf00      	nop
 800c4c2:	bf00      	nop
 800c4c4:	3714      	adds	r7, #20
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr
 800c4ce:	bf00      	nop
 800c4d0:	20000028 	.word	0x20000028
	...

0800c4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c4e0:	4b07      	ldr	r3, [pc, #28]	@ (800c500 <pxCurrentTCBConst2>)
 800c4e2:	6819      	ldr	r1, [r3, #0]
 800c4e4:	6808      	ldr	r0, [r1, #0]
 800c4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4ea:	f380 8809 	msr	PSP, r0
 800c4ee:	f3bf 8f6f 	isb	sy
 800c4f2:	f04f 0000 	mov.w	r0, #0
 800c4f6:	f380 8811 	msr	BASEPRI, r0
 800c4fa:	4770      	bx	lr
 800c4fc:	f3af 8000 	nop.w

0800c500 <pxCurrentTCBConst2>:
 800c500:	20001414 	.word	0x20001414
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c504:	bf00      	nop
 800c506:	bf00      	nop

0800c508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c508:	4808      	ldr	r0, [pc, #32]	@ (800c52c <prvPortStartFirstTask+0x24>)
 800c50a:	6800      	ldr	r0, [r0, #0]
 800c50c:	6800      	ldr	r0, [r0, #0]
 800c50e:	f380 8808 	msr	MSP, r0
 800c512:	f04f 0000 	mov.w	r0, #0
 800c516:	f380 8814 	msr	CONTROL, r0
 800c51a:	b662      	cpsie	i
 800c51c:	b661      	cpsie	f
 800c51e:	f3bf 8f4f 	dsb	sy
 800c522:	f3bf 8f6f 	isb	sy
 800c526:	df00      	svc	0
 800c528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c52a:	bf00      	nop
 800c52c:	e000ed08 	.word	0xe000ed08

0800c530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c536:	4b47      	ldr	r3, [pc, #284]	@ (800c654 <xPortStartScheduler+0x124>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a47      	ldr	r2, [pc, #284]	@ (800c658 <xPortStartScheduler+0x128>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d10b      	bne.n	800c558 <xPortStartScheduler+0x28>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	60fb      	str	r3, [r7, #12]
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c558:	4b3e      	ldr	r3, [pc, #248]	@ (800c654 <xPortStartScheduler+0x124>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a3f      	ldr	r2, [pc, #252]	@ (800c65c <xPortStartScheduler+0x12c>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	d10b      	bne.n	800c57a <xPortStartScheduler+0x4a>
	__asm volatile
 800c562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c566:	f383 8811 	msr	BASEPRI, r3
 800c56a:	f3bf 8f6f 	isb	sy
 800c56e:	f3bf 8f4f 	dsb	sy
 800c572:	613b      	str	r3, [r7, #16]
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop
 800c578:	e7fd      	b.n	800c576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c57a:	4b39      	ldr	r3, [pc, #228]	@ (800c660 <xPortStartScheduler+0x130>)
 800c57c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	b2db      	uxtb	r3, r3
 800c584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	22ff      	movs	r2, #255	@ 0xff
 800c58a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	781b      	ldrb	r3, [r3, #0]
 800c590:	b2db      	uxtb	r3, r3
 800c592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c594:	78fb      	ldrb	r3, [r7, #3]
 800c596:	b2db      	uxtb	r3, r3
 800c598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c59c:	b2da      	uxtb	r2, r3
 800c59e:	4b31      	ldr	r3, [pc, #196]	@ (800c664 <xPortStartScheduler+0x134>)
 800c5a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c5a2:	4b31      	ldr	r3, [pc, #196]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5a4:	2207      	movs	r2, #7
 800c5a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5a8:	e009      	b.n	800c5be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c5aa:	4b2f      	ldr	r3, [pc, #188]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	3b01      	subs	r3, #1
 800c5b0:	4a2d      	ldr	r2, [pc, #180]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c5b4:	78fb      	ldrb	r3, [r7, #3]
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	005b      	lsls	r3, r3, #1
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c5be:	78fb      	ldrb	r3, [r7, #3]
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c5c6:	2b80      	cmp	r3, #128	@ 0x80
 800c5c8:	d0ef      	beq.n	800c5aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c5ca:	4b27      	ldr	r3, [pc, #156]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f1c3 0307 	rsb	r3, r3, #7
 800c5d2:	2b04      	cmp	r3, #4
 800c5d4:	d00b      	beq.n	800c5ee <xPortStartScheduler+0xbe>
	__asm volatile
 800c5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5da:	f383 8811 	msr	BASEPRI, r3
 800c5de:	f3bf 8f6f 	isb	sy
 800c5e2:	f3bf 8f4f 	dsb	sy
 800c5e6:	60bb      	str	r3, [r7, #8]
}
 800c5e8:	bf00      	nop
 800c5ea:	bf00      	nop
 800c5ec:	e7fd      	b.n	800c5ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c5ee:	4b1e      	ldr	r3, [pc, #120]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	021b      	lsls	r3, r3, #8
 800c5f4:	4a1c      	ldr	r2, [pc, #112]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800c668 <xPortStartScheduler+0x138>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c600:	4a19      	ldr	r2, [pc, #100]	@ (800c668 <xPortStartScheduler+0x138>)
 800c602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	b2da      	uxtb	r2, r3
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c60c:	4b17      	ldr	r3, [pc, #92]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	4a16      	ldr	r2, [pc, #88]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c618:	4b14      	ldr	r3, [pc, #80]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a13      	ldr	r2, [pc, #76]	@ (800c66c <xPortStartScheduler+0x13c>)
 800c61e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c624:	f000 f8da 	bl	800c7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c628:	4b11      	ldr	r3, [pc, #68]	@ (800c670 <xPortStartScheduler+0x140>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c62e:	f000 f8f9 	bl	800c824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c632:	4b10      	ldr	r3, [pc, #64]	@ (800c674 <xPortStartScheduler+0x144>)
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	4a0f      	ldr	r2, [pc, #60]	@ (800c674 <xPortStartScheduler+0x144>)
 800c638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c63c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c63e:	f7ff ff63 	bl	800c508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c642:	f7fe ff49 	bl	800b4d8 <vTaskSwitchContext>
	prvTaskExitError();
 800c646:	f7ff ff17 	bl	800c478 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c64a:	2300      	movs	r3, #0
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3718      	adds	r7, #24
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	e000ed00 	.word	0xe000ed00
 800c658:	410fc271 	.word	0x410fc271
 800c65c:	410fc270 	.word	0x410fc270
 800c660:	e000e400 	.word	0xe000e400
 800c664:	20001a40 	.word	0x20001a40
 800c668:	20001a44 	.word	0x20001a44
 800c66c:	e000ed20 	.word	0xe000ed20
 800c670:	20000028 	.word	0x20000028
 800c674:	e000ef34 	.word	0xe000ef34

0800c678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
	__asm volatile
 800c67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c682:	f383 8811 	msr	BASEPRI, r3
 800c686:	f3bf 8f6f 	isb	sy
 800c68a:	f3bf 8f4f 	dsb	sy
 800c68e:	607b      	str	r3, [r7, #4]
}
 800c690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c692:	4b10      	ldr	r3, [pc, #64]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	3301      	adds	r3, #1
 800c698:	4a0e      	ldr	r2, [pc, #56]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c69a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c69c:	4b0d      	ldr	r3, [pc, #52]	@ (800c6d4 <vPortEnterCritical+0x5c>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b01      	cmp	r3, #1
 800c6a2:	d110      	bne.n	800c6c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800c6d8 <vPortEnterCritical+0x60>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	b2db      	uxtb	r3, r3
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d00b      	beq.n	800c6c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6b2:	f383 8811 	msr	BASEPRI, r3
 800c6b6:	f3bf 8f6f 	isb	sy
 800c6ba:	f3bf 8f4f 	dsb	sy
 800c6be:	603b      	str	r3, [r7, #0]
}
 800c6c0:	bf00      	nop
 800c6c2:	bf00      	nop
 800c6c4:	e7fd      	b.n	800c6c2 <vPortEnterCritical+0x4a>
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	370c      	adds	r7, #12
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20000028 	.word	0x20000028
 800c6d8:	e000ed04 	.word	0xe000ed04

0800c6dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c6dc:	b480      	push	{r7}
 800c6de:	b083      	sub	sp, #12
 800c6e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c6e2:	4b12      	ldr	r3, [pc, #72]	@ (800c72c <vPortExitCritical+0x50>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d10b      	bne.n	800c702 <vPortExitCritical+0x26>
	__asm volatile
 800c6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6ee:	f383 8811 	msr	BASEPRI, r3
 800c6f2:	f3bf 8f6f 	isb	sy
 800c6f6:	f3bf 8f4f 	dsb	sy
 800c6fa:	607b      	str	r3, [r7, #4]
}
 800c6fc:	bf00      	nop
 800c6fe:	bf00      	nop
 800c700:	e7fd      	b.n	800c6fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c702:	4b0a      	ldr	r3, [pc, #40]	@ (800c72c <vPortExitCritical+0x50>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	3b01      	subs	r3, #1
 800c708:	4a08      	ldr	r2, [pc, #32]	@ (800c72c <vPortExitCritical+0x50>)
 800c70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c70c:	4b07      	ldr	r3, [pc, #28]	@ (800c72c <vPortExitCritical+0x50>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d105      	bne.n	800c720 <vPortExitCritical+0x44>
 800c714:	2300      	movs	r3, #0
 800c716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	f383 8811 	msr	BASEPRI, r3
}
 800c71e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c720:	bf00      	nop
 800c722:	370c      	adds	r7, #12
 800c724:	46bd      	mov	sp, r7
 800c726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72a:	4770      	bx	lr
 800c72c:	20000028 	.word	0x20000028

0800c730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c730:	f3ef 8009 	mrs	r0, PSP
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	4b15      	ldr	r3, [pc, #84]	@ (800c790 <pxCurrentTCBConst>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	f01e 0f10 	tst.w	lr, #16
 800c740:	bf08      	it	eq
 800c742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c74a:	6010      	str	r0, [r2, #0]
 800c74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c754:	f380 8811 	msr	BASEPRI, r0
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	f3bf 8f6f 	isb	sy
 800c760:	f7fe feba 	bl	800b4d8 <vTaskSwitchContext>
 800c764:	f04f 0000 	mov.w	r0, #0
 800c768:	f380 8811 	msr	BASEPRI, r0
 800c76c:	bc09      	pop	{r0, r3}
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	6808      	ldr	r0, [r1, #0]
 800c772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c776:	f01e 0f10 	tst.w	lr, #16
 800c77a:	bf08      	it	eq
 800c77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c780:	f380 8809 	msr	PSP, r0
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	4770      	bx	lr
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w

0800c790 <pxCurrentTCBConst>:
 800c790:	20001414 	.word	0x20001414
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c794:	bf00      	nop
 800c796:	bf00      	nop

0800c798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af00      	add	r7, sp, #0
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c7b2:	f7fe fdd7 	bl	800b364 <xTaskIncrementTick>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c7bc:	4b06      	ldr	r3, [pc, #24]	@ (800c7d8 <xPortSysTickHandler+0x40>)
 800c7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	f383 8811 	msr	BASEPRI, r3
}
 800c7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c7d0:	bf00      	nop
 800c7d2:	3708      	adds	r7, #8
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}
 800c7d8:	e000ed04 	.word	0xe000ed04

0800c7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c7dc:	b480      	push	{r7}
 800c7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800c814 <vPortSetupTimerInterrupt+0x38>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800c818 <vPortSetupTimerInterrupt+0x3c>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	4a0a      	ldr	r2, [pc, #40]	@ (800c81c <vPortSetupTimerInterrupt+0x40>)
 800c7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c7f6:	099b      	lsrs	r3, r3, #6
 800c7f8:	4a09      	ldr	r2, [pc, #36]	@ (800c820 <vPortSetupTimerInterrupt+0x44>)
 800c7fa:	3b01      	subs	r3, #1
 800c7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c7fe:	4b04      	ldr	r3, [pc, #16]	@ (800c810 <vPortSetupTimerInterrupt+0x34>)
 800c800:	2207      	movs	r2, #7
 800c802:	601a      	str	r2, [r3, #0]
}
 800c804:	bf00      	nop
 800c806:	46bd      	mov	sp, r7
 800c808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80c:	4770      	bx	lr
 800c80e:	bf00      	nop
 800c810:	e000e010 	.word	0xe000e010
 800c814:	e000e018 	.word	0xe000e018
 800c818:	2000001c 	.word	0x2000001c
 800c81c:	10624dd3 	.word	0x10624dd3
 800c820:	e000e014 	.word	0xe000e014

0800c824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c834 <vPortEnableVFP+0x10>
 800c828:	6801      	ldr	r1, [r0, #0]
 800c82a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c82e:	6001      	str	r1, [r0, #0]
 800c830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c832:	bf00      	nop
 800c834:	e000ed88 	.word	0xe000ed88

0800c838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c838:	b480      	push	{r7}
 800c83a:	b085      	sub	sp, #20
 800c83c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c83e:	f3ef 8305 	mrs	r3, IPSR
 800c842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	2b0f      	cmp	r3, #15
 800c848:	d915      	bls.n	800c876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c84a:	4a18      	ldr	r2, [pc, #96]	@ (800c8ac <vPortValidateInterruptPriority+0x74>)
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	781b      	ldrb	r3, [r3, #0]
 800c852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c854:	4b16      	ldr	r3, [pc, #88]	@ (800c8b0 <vPortValidateInterruptPriority+0x78>)
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	7afa      	ldrb	r2, [r7, #11]
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d20b      	bcs.n	800c876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	607b      	str	r3, [r7, #4]
}
 800c870:	bf00      	nop
 800c872:	bf00      	nop
 800c874:	e7fd      	b.n	800c872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c876:	4b0f      	ldr	r3, [pc, #60]	@ (800c8b4 <vPortValidateInterruptPriority+0x7c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c87e:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b8 <vPortValidateInterruptPriority+0x80>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	429a      	cmp	r2, r3
 800c884:	d90b      	bls.n	800c89e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88a:	f383 8811 	msr	BASEPRI, r3
 800c88e:	f3bf 8f6f 	isb	sy
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	603b      	str	r3, [r7, #0]
}
 800c898:	bf00      	nop
 800c89a:	bf00      	nop
 800c89c:	e7fd      	b.n	800c89a <vPortValidateInterruptPriority+0x62>
	}
 800c89e:	bf00      	nop
 800c8a0:	3714      	adds	r7, #20
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr
 800c8aa:	bf00      	nop
 800c8ac:	e000e3f0 	.word	0xe000e3f0
 800c8b0:	20001a40 	.word	0x20001a40
 800c8b4:	e000ed0c 	.word	0xe000ed0c
 800c8b8:	20001a44 	.word	0x20001a44

0800c8bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08a      	sub	sp, #40	@ 0x28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c8c8:	f7fe fb96 	bl	800aff8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c8cc:	4b5c      	ldr	r3, [pc, #368]	@ (800ca40 <pvPortMalloc+0x184>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d101      	bne.n	800c8d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c8d4:	f000 f924 	bl	800cb20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c8d8:	4b5a      	ldr	r3, [pc, #360]	@ (800ca44 <pvPortMalloc+0x188>)
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	4013      	ands	r3, r2
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	f040 8095 	bne.w	800ca10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d01e      	beq.n	800c92a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c8ec:	2208      	movs	r2, #8
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f003 0307 	and.w	r3, r3, #7
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d015      	beq.n	800c92a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f023 0307 	bic.w	r3, r3, #7
 800c904:	3308      	adds	r3, #8
 800c906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	f003 0307 	and.w	r3, r3, #7
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00b      	beq.n	800c92a <pvPortMalloc+0x6e>
	__asm volatile
 800c912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c916:	f383 8811 	msr	BASEPRI, r3
 800c91a:	f3bf 8f6f 	isb	sy
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	617b      	str	r3, [r7, #20]
}
 800c924:	bf00      	nop
 800c926:	bf00      	nop
 800c928:	e7fd      	b.n	800c926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d06f      	beq.n	800ca10 <pvPortMalloc+0x154>
 800c930:	4b45      	ldr	r3, [pc, #276]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	429a      	cmp	r2, r3
 800c938:	d86a      	bhi.n	800ca10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c93a:	4b44      	ldr	r3, [pc, #272]	@ (800ca4c <pvPortMalloc+0x190>)
 800c93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c93e:	4b43      	ldr	r3, [pc, #268]	@ (800ca4c <pvPortMalloc+0x190>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c944:	e004      	b.n	800c950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	429a      	cmp	r2, r3
 800c958:	d903      	bls.n	800c962 <pvPortMalloc+0xa6>
 800c95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d1f1      	bne.n	800c946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c962:	4b37      	ldr	r3, [pc, #220]	@ (800ca40 <pvPortMalloc+0x184>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c968:	429a      	cmp	r2, r3
 800c96a:	d051      	beq.n	800ca10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c96c:	6a3b      	ldr	r3, [r7, #32]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	2208      	movs	r2, #8
 800c972:	4413      	add	r3, r2
 800c974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	6a3b      	ldr	r3, [r7, #32]
 800c97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c980:	685a      	ldr	r2, [r3, #4]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	1ad2      	subs	r2, r2, r3
 800c986:	2308      	movs	r3, #8
 800c988:	005b      	lsls	r3, r3, #1
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d920      	bls.n	800c9d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	4413      	add	r3, r2
 800c994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	f003 0307 	and.w	r3, r3, #7
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00b      	beq.n	800c9b8 <pvPortMalloc+0xfc>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	613b      	str	r3, [r7, #16]
}
 800c9b2:	bf00      	nop
 800c9b4:	bf00      	nop
 800c9b6:	e7fd      	b.n	800c9b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	1ad2      	subs	r2, r2, r3
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c9ca:	69b8      	ldr	r0, [r7, #24]
 800c9cc:	f000 f90a 	bl	800cbe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9d2:	681a      	ldr	r2, [r3, #0]
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	1ad3      	subs	r3, r2, r3
 800c9da:	4a1b      	ldr	r2, [pc, #108]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c9de:	4b1a      	ldr	r3, [pc, #104]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800ca50 <pvPortMalloc+0x194>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d203      	bcs.n	800c9f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c9ea:	4b17      	ldr	r3, [pc, #92]	@ (800ca48 <pvPortMalloc+0x18c>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	4a18      	ldr	r2, [pc, #96]	@ (800ca50 <pvPortMalloc+0x194>)
 800c9f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f4:	685a      	ldr	r2, [r3, #4]
 800c9f6:	4b13      	ldr	r3, [pc, #76]	@ (800ca44 <pvPortMalloc+0x188>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	431a      	orrs	r2, r3
 800c9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca02:	2200      	movs	r2, #0
 800ca04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ca06:	4b13      	ldr	r3, [pc, #76]	@ (800ca54 <pvPortMalloc+0x198>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	3301      	adds	r3, #1
 800ca0c:	4a11      	ldr	r2, [pc, #68]	@ (800ca54 <pvPortMalloc+0x198>)
 800ca0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ca10:	f7fe fb00 	bl	800b014 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	f003 0307 	and.w	r3, r3, #7
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00b      	beq.n	800ca36 <pvPortMalloc+0x17a>
	__asm volatile
 800ca1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca22:	f383 8811 	msr	BASEPRI, r3
 800ca26:	f3bf 8f6f 	isb	sy
 800ca2a:	f3bf 8f4f 	dsb	sy
 800ca2e:	60fb      	str	r3, [r7, #12]
}
 800ca30:	bf00      	nop
 800ca32:	bf00      	nop
 800ca34:	e7fd      	b.n	800ca32 <pvPortMalloc+0x176>
	return pvReturn;
 800ca36:	69fb      	ldr	r3, [r7, #28]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3728      	adds	r7, #40	@ 0x28
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	20005650 	.word	0x20005650
 800ca44:	20005664 	.word	0x20005664
 800ca48:	20005654 	.word	0x20005654
 800ca4c:	20005648 	.word	0x20005648
 800ca50:	20005658 	.word	0x20005658
 800ca54:	2000565c 	.word	0x2000565c

0800ca58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b086      	sub	sp, #24
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d04f      	beq.n	800cb0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ca6a:	2308      	movs	r3, #8
 800ca6c:	425b      	negs	r3, r3
 800ca6e:	697a      	ldr	r2, [r7, #20]
 800ca70:	4413      	add	r3, r2
 800ca72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	4b25      	ldr	r3, [pc, #148]	@ (800cb14 <vPortFree+0xbc>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4013      	ands	r3, r2
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d10b      	bne.n	800ca9e <vPortFree+0x46>
	__asm volatile
 800ca86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca8a:	f383 8811 	msr	BASEPRI, r3
 800ca8e:	f3bf 8f6f 	isb	sy
 800ca92:	f3bf 8f4f 	dsb	sy
 800ca96:	60fb      	str	r3, [r7, #12]
}
 800ca98:	bf00      	nop
 800ca9a:	bf00      	nop
 800ca9c:	e7fd      	b.n	800ca9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d00b      	beq.n	800cabe <vPortFree+0x66>
	__asm volatile
 800caa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caaa:	f383 8811 	msr	BASEPRI, r3
 800caae:	f3bf 8f6f 	isb	sy
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	60bb      	str	r3, [r7, #8]
}
 800cab8:	bf00      	nop
 800caba:	bf00      	nop
 800cabc:	e7fd      	b.n	800caba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	685a      	ldr	r2, [r3, #4]
 800cac2:	4b14      	ldr	r3, [pc, #80]	@ (800cb14 <vPortFree+0xbc>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	4013      	ands	r3, r2
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d01e      	beq.n	800cb0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cacc:	693b      	ldr	r3, [r7, #16]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d11a      	bne.n	800cb0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cad4:	693b      	ldr	r3, [r7, #16]
 800cad6:	685a      	ldr	r2, [r3, #4]
 800cad8:	4b0e      	ldr	r3, [pc, #56]	@ (800cb14 <vPortFree+0xbc>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	43db      	mvns	r3, r3
 800cade:	401a      	ands	r2, r3
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cae4:	f7fe fa88 	bl	800aff8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cae8:	693b      	ldr	r3, [r7, #16]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	4b0a      	ldr	r3, [pc, #40]	@ (800cb18 <vPortFree+0xc0>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4413      	add	r3, r2
 800caf2:	4a09      	ldr	r2, [pc, #36]	@ (800cb18 <vPortFree+0xc0>)
 800caf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800caf6:	6938      	ldr	r0, [r7, #16]
 800caf8:	f000 f874 	bl	800cbe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cafc:	4b07      	ldr	r3, [pc, #28]	@ (800cb1c <vPortFree+0xc4>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3301      	adds	r3, #1
 800cb02:	4a06      	ldr	r2, [pc, #24]	@ (800cb1c <vPortFree+0xc4>)
 800cb04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cb06:	f7fe fa85 	bl	800b014 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cb0a:	bf00      	nop
 800cb0c:	3718      	adds	r7, #24
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	20005664 	.word	0x20005664
 800cb18:	20005654 	.word	0x20005654
 800cb1c:	20005660 	.word	0x20005660

0800cb20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cb20:	b480      	push	{r7}
 800cb22:	b085      	sub	sp, #20
 800cb24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cb26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cb2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cb2c:	4b27      	ldr	r3, [pc, #156]	@ (800cbcc <prvHeapInit+0xac>)
 800cb2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f003 0307 	and.w	r3, r3, #7
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00c      	beq.n	800cb54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	3307      	adds	r3, #7
 800cb3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f023 0307 	bic.w	r3, r3, #7
 800cb46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cb48:	68ba      	ldr	r2, [r7, #8]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	4a1f      	ldr	r2, [pc, #124]	@ (800cbcc <prvHeapInit+0xac>)
 800cb50:	4413      	add	r3, r2
 800cb52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cb58:	4a1d      	ldr	r2, [pc, #116]	@ (800cbd0 <prvHeapInit+0xb0>)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cb5e:	4b1c      	ldr	r3, [pc, #112]	@ (800cbd0 <prvHeapInit+0xb0>)
 800cb60:	2200      	movs	r2, #0
 800cb62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	4413      	add	r3, r2
 800cb6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cb6c:	2208      	movs	r2, #8
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	1a9b      	subs	r3, r3, r2
 800cb72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	f023 0307 	bic.w	r3, r3, #7
 800cb7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	4a15      	ldr	r2, [pc, #84]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb82:	4b14      	ldr	r3, [pc, #80]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2200      	movs	r2, #0
 800cb88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb8a:	4b12      	ldr	r3, [pc, #72]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	68fa      	ldr	r2, [r7, #12]
 800cb9a:	1ad2      	subs	r2, r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cba0:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd4 <prvHeapInit+0xb4>)
 800cba2:	681a      	ldr	r2, [r3, #0]
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	685b      	ldr	r3, [r3, #4]
 800cbac:	4a0a      	ldr	r2, [pc, #40]	@ (800cbd8 <prvHeapInit+0xb8>)
 800cbae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	4a09      	ldr	r2, [pc, #36]	@ (800cbdc <prvHeapInit+0xbc>)
 800cbb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cbb8:	4b09      	ldr	r3, [pc, #36]	@ (800cbe0 <prvHeapInit+0xc0>)
 800cbba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cbbe:	601a      	str	r2, [r3, #0]
}
 800cbc0:	bf00      	nop
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	20001a48 	.word	0x20001a48
 800cbd0:	20005648 	.word	0x20005648
 800cbd4:	20005650 	.word	0x20005650
 800cbd8:	20005658 	.word	0x20005658
 800cbdc:	20005654 	.word	0x20005654
 800cbe0:	20005664 	.word	0x20005664

0800cbe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cbec:	4b28      	ldr	r3, [pc, #160]	@ (800cc90 <prvInsertBlockIntoFreeList+0xac>)
 800cbee:	60fb      	str	r3, [r7, #12]
 800cbf0:	e002      	b.n	800cbf8 <prvInsertBlockIntoFreeList+0x14>
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	60fb      	str	r3, [r7, #12]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d8f7      	bhi.n	800cbf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	68ba      	ldr	r2, [r7, #8]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	687a      	ldr	r2, [r7, #4]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d108      	bne.n	800cc26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	685b      	ldr	r3, [r3, #4]
 800cc1c:	441a      	add	r2, r3
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	68ba      	ldr	r2, [r7, #8]
 800cc30:	441a      	add	r2, r3
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	429a      	cmp	r2, r3
 800cc38:	d118      	bne.n	800cc6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681a      	ldr	r2, [r3, #0]
 800cc3e:	4b15      	ldr	r3, [pc, #84]	@ (800cc94 <prvInsertBlockIntoFreeList+0xb0>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d00d      	beq.n	800cc62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	685a      	ldr	r2, [r3, #4]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	441a      	add	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	601a      	str	r2, [r3, #0]
 800cc60:	e008      	b.n	800cc74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc62:	4b0c      	ldr	r3, [pc, #48]	@ (800cc94 <prvInsertBlockIntoFreeList+0xb0>)
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	e003      	b.n	800cc74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc74:	68fa      	ldr	r2, [r7, #12]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d002      	beq.n	800cc82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc82:	bf00      	nop
 800cc84:	3714      	adds	r7, #20
 800cc86:	46bd      	mov	sp, r7
 800cc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8c:	4770      	bx	lr
 800cc8e:	bf00      	nop
 800cc90:	20005648 	.word	0x20005648
 800cc94:	20005650 	.word	0x20005650

0800cc98 <_vsiprintf_r>:
 800cc98:	b510      	push	{r4, lr}
 800cc9a:	b09a      	sub	sp, #104	@ 0x68
 800cc9c:	2400      	movs	r4, #0
 800cc9e:	9100      	str	r1, [sp, #0]
 800cca0:	9104      	str	r1, [sp, #16]
 800cca2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cca6:	9105      	str	r1, [sp, #20]
 800cca8:	9102      	str	r1, [sp, #8]
 800ccaa:	4905      	ldr	r1, [pc, #20]	@ (800ccc0 <_vsiprintf_r+0x28>)
 800ccac:	9103      	str	r1, [sp, #12]
 800ccae:	4669      	mov	r1, sp
 800ccb0:	9419      	str	r4, [sp, #100]	@ 0x64
 800ccb2:	f000 f957 	bl	800cf64 <_svfiprintf_r>
 800ccb6:	9b00      	ldr	r3, [sp, #0]
 800ccb8:	701c      	strb	r4, [r3, #0]
 800ccba:	b01a      	add	sp, #104	@ 0x68
 800ccbc:	bd10      	pop	{r4, pc}
 800ccbe:	bf00      	nop
 800ccc0:	ffff0208 	.word	0xffff0208

0800ccc4 <vsiprintf>:
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	460a      	mov	r2, r1
 800ccc8:	4601      	mov	r1, r0
 800ccca:	4802      	ldr	r0, [pc, #8]	@ (800ccd4 <vsiprintf+0x10>)
 800cccc:	6800      	ldr	r0, [r0, #0]
 800ccce:	f7ff bfe3 	b.w	800cc98 <_vsiprintf_r>
 800ccd2:	bf00      	nop
 800ccd4:	2000002c 	.word	0x2000002c

0800ccd8 <memset>:
 800ccd8:	4402      	add	r2, r0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d100      	bne.n	800cce2 <memset+0xa>
 800cce0:	4770      	bx	lr
 800cce2:	f803 1b01 	strb.w	r1, [r3], #1
 800cce6:	e7f9      	b.n	800ccdc <memset+0x4>

0800cce8 <__errno>:
 800cce8:	4b01      	ldr	r3, [pc, #4]	@ (800ccf0 <__errno+0x8>)
 800ccea:	6818      	ldr	r0, [r3, #0]
 800ccec:	4770      	bx	lr
 800ccee:	bf00      	nop
 800ccf0:	2000002c 	.word	0x2000002c

0800ccf4 <__libc_init_array>:
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	4d0d      	ldr	r5, [pc, #52]	@ (800cd2c <__libc_init_array+0x38>)
 800ccf8:	4c0d      	ldr	r4, [pc, #52]	@ (800cd30 <__libc_init_array+0x3c>)
 800ccfa:	1b64      	subs	r4, r4, r5
 800ccfc:	10a4      	asrs	r4, r4, #2
 800ccfe:	2600      	movs	r6, #0
 800cd00:	42a6      	cmp	r6, r4
 800cd02:	d109      	bne.n	800cd18 <__libc_init_array+0x24>
 800cd04:	4d0b      	ldr	r5, [pc, #44]	@ (800cd34 <__libc_init_array+0x40>)
 800cd06:	4c0c      	ldr	r4, [pc, #48]	@ (800cd38 <__libc_init_array+0x44>)
 800cd08:	f000 fcc2 	bl	800d690 <_init>
 800cd0c:	1b64      	subs	r4, r4, r5
 800cd0e:	10a4      	asrs	r4, r4, #2
 800cd10:	2600      	movs	r6, #0
 800cd12:	42a6      	cmp	r6, r4
 800cd14:	d105      	bne.n	800cd22 <__libc_init_array+0x2e>
 800cd16:	bd70      	pop	{r4, r5, r6, pc}
 800cd18:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd1c:	4798      	blx	r3
 800cd1e:	3601      	adds	r6, #1
 800cd20:	e7ee      	b.n	800cd00 <__libc_init_array+0xc>
 800cd22:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd26:	4798      	blx	r3
 800cd28:	3601      	adds	r6, #1
 800cd2a:	e7f2      	b.n	800cd12 <__libc_init_array+0x1e>
 800cd2c:	0800d818 	.word	0x0800d818
 800cd30:	0800d818 	.word	0x0800d818
 800cd34:	0800d818 	.word	0x0800d818
 800cd38:	0800d81c 	.word	0x0800d81c

0800cd3c <__retarget_lock_acquire_recursive>:
 800cd3c:	4770      	bx	lr

0800cd3e <__retarget_lock_release_recursive>:
 800cd3e:	4770      	bx	lr

0800cd40 <_reclaim_reent>:
 800cd40:	4b2d      	ldr	r3, [pc, #180]	@ (800cdf8 <_reclaim_reent+0xb8>)
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4283      	cmp	r3, r0
 800cd46:	b570      	push	{r4, r5, r6, lr}
 800cd48:	4604      	mov	r4, r0
 800cd4a:	d053      	beq.n	800cdf4 <_reclaim_reent+0xb4>
 800cd4c:	69c3      	ldr	r3, [r0, #28]
 800cd4e:	b31b      	cbz	r3, 800cd98 <_reclaim_reent+0x58>
 800cd50:	68db      	ldr	r3, [r3, #12]
 800cd52:	b163      	cbz	r3, 800cd6e <_reclaim_reent+0x2e>
 800cd54:	2500      	movs	r5, #0
 800cd56:	69e3      	ldr	r3, [r4, #28]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	5959      	ldr	r1, [r3, r5]
 800cd5c:	b9b1      	cbnz	r1, 800cd8c <_reclaim_reent+0x4c>
 800cd5e:	3504      	adds	r5, #4
 800cd60:	2d80      	cmp	r5, #128	@ 0x80
 800cd62:	d1f8      	bne.n	800cd56 <_reclaim_reent+0x16>
 800cd64:	69e3      	ldr	r3, [r4, #28]
 800cd66:	4620      	mov	r0, r4
 800cd68:	68d9      	ldr	r1, [r3, #12]
 800cd6a:	f000 f855 	bl	800ce18 <_free_r>
 800cd6e:	69e3      	ldr	r3, [r4, #28]
 800cd70:	6819      	ldr	r1, [r3, #0]
 800cd72:	b111      	cbz	r1, 800cd7a <_reclaim_reent+0x3a>
 800cd74:	4620      	mov	r0, r4
 800cd76:	f000 f84f 	bl	800ce18 <_free_r>
 800cd7a:	69e3      	ldr	r3, [r4, #28]
 800cd7c:	689d      	ldr	r5, [r3, #8]
 800cd7e:	b15d      	cbz	r5, 800cd98 <_reclaim_reent+0x58>
 800cd80:	4629      	mov	r1, r5
 800cd82:	4620      	mov	r0, r4
 800cd84:	682d      	ldr	r5, [r5, #0]
 800cd86:	f000 f847 	bl	800ce18 <_free_r>
 800cd8a:	e7f8      	b.n	800cd7e <_reclaim_reent+0x3e>
 800cd8c:	680e      	ldr	r6, [r1, #0]
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f000 f842 	bl	800ce18 <_free_r>
 800cd94:	4631      	mov	r1, r6
 800cd96:	e7e1      	b.n	800cd5c <_reclaim_reent+0x1c>
 800cd98:	6961      	ldr	r1, [r4, #20]
 800cd9a:	b111      	cbz	r1, 800cda2 <_reclaim_reent+0x62>
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	f000 f83b 	bl	800ce18 <_free_r>
 800cda2:	69e1      	ldr	r1, [r4, #28]
 800cda4:	b111      	cbz	r1, 800cdac <_reclaim_reent+0x6c>
 800cda6:	4620      	mov	r0, r4
 800cda8:	f000 f836 	bl	800ce18 <_free_r>
 800cdac:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cdae:	b111      	cbz	r1, 800cdb6 <_reclaim_reent+0x76>
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f000 f831 	bl	800ce18 <_free_r>
 800cdb6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdb8:	b111      	cbz	r1, 800cdc0 <_reclaim_reent+0x80>
 800cdba:	4620      	mov	r0, r4
 800cdbc:	f000 f82c 	bl	800ce18 <_free_r>
 800cdc0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cdc2:	b111      	cbz	r1, 800cdca <_reclaim_reent+0x8a>
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	f000 f827 	bl	800ce18 <_free_r>
 800cdca:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cdcc:	b111      	cbz	r1, 800cdd4 <_reclaim_reent+0x94>
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f000 f822 	bl	800ce18 <_free_r>
 800cdd4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cdd6:	b111      	cbz	r1, 800cdde <_reclaim_reent+0x9e>
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f000 f81d 	bl	800ce18 <_free_r>
 800cdde:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cde0:	b111      	cbz	r1, 800cde8 <_reclaim_reent+0xa8>
 800cde2:	4620      	mov	r0, r4
 800cde4:	f000 f818 	bl	800ce18 <_free_r>
 800cde8:	6a23      	ldr	r3, [r4, #32]
 800cdea:	b11b      	cbz	r3, 800cdf4 <_reclaim_reent+0xb4>
 800cdec:	4620      	mov	r0, r4
 800cdee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdf2:	4718      	bx	r3
 800cdf4:	bd70      	pop	{r4, r5, r6, pc}
 800cdf6:	bf00      	nop
 800cdf8:	2000002c 	.word	0x2000002c

0800cdfc <memcpy>:
 800cdfc:	440a      	add	r2, r1
 800cdfe:	4291      	cmp	r1, r2
 800ce00:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ce04:	d100      	bne.n	800ce08 <memcpy+0xc>
 800ce06:	4770      	bx	lr
 800ce08:	b510      	push	{r4, lr}
 800ce0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce12:	4291      	cmp	r1, r2
 800ce14:	d1f9      	bne.n	800ce0a <memcpy+0xe>
 800ce16:	bd10      	pop	{r4, pc}

0800ce18 <_free_r>:
 800ce18:	b538      	push	{r3, r4, r5, lr}
 800ce1a:	4605      	mov	r5, r0
 800ce1c:	2900      	cmp	r1, #0
 800ce1e:	d041      	beq.n	800cea4 <_free_r+0x8c>
 800ce20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce24:	1f0c      	subs	r4, r1, #4
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	bfb8      	it	lt
 800ce2a:	18e4      	addlt	r4, r4, r3
 800ce2c:	f000 fbc4 	bl	800d5b8 <__malloc_lock>
 800ce30:	4a1d      	ldr	r2, [pc, #116]	@ (800cea8 <_free_r+0x90>)
 800ce32:	6813      	ldr	r3, [r2, #0]
 800ce34:	b933      	cbnz	r3, 800ce44 <_free_r+0x2c>
 800ce36:	6063      	str	r3, [r4, #4]
 800ce38:	6014      	str	r4, [r2, #0]
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce40:	f000 bbc0 	b.w	800d5c4 <__malloc_unlock>
 800ce44:	42a3      	cmp	r3, r4
 800ce46:	d908      	bls.n	800ce5a <_free_r+0x42>
 800ce48:	6820      	ldr	r0, [r4, #0]
 800ce4a:	1821      	adds	r1, r4, r0
 800ce4c:	428b      	cmp	r3, r1
 800ce4e:	bf01      	itttt	eq
 800ce50:	6819      	ldreq	r1, [r3, #0]
 800ce52:	685b      	ldreq	r3, [r3, #4]
 800ce54:	1809      	addeq	r1, r1, r0
 800ce56:	6021      	streq	r1, [r4, #0]
 800ce58:	e7ed      	b.n	800ce36 <_free_r+0x1e>
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	b10b      	cbz	r3, 800ce64 <_free_r+0x4c>
 800ce60:	42a3      	cmp	r3, r4
 800ce62:	d9fa      	bls.n	800ce5a <_free_r+0x42>
 800ce64:	6811      	ldr	r1, [r2, #0]
 800ce66:	1850      	adds	r0, r2, r1
 800ce68:	42a0      	cmp	r0, r4
 800ce6a:	d10b      	bne.n	800ce84 <_free_r+0x6c>
 800ce6c:	6820      	ldr	r0, [r4, #0]
 800ce6e:	4401      	add	r1, r0
 800ce70:	1850      	adds	r0, r2, r1
 800ce72:	4283      	cmp	r3, r0
 800ce74:	6011      	str	r1, [r2, #0]
 800ce76:	d1e0      	bne.n	800ce3a <_free_r+0x22>
 800ce78:	6818      	ldr	r0, [r3, #0]
 800ce7a:	685b      	ldr	r3, [r3, #4]
 800ce7c:	6053      	str	r3, [r2, #4]
 800ce7e:	4408      	add	r0, r1
 800ce80:	6010      	str	r0, [r2, #0]
 800ce82:	e7da      	b.n	800ce3a <_free_r+0x22>
 800ce84:	d902      	bls.n	800ce8c <_free_r+0x74>
 800ce86:	230c      	movs	r3, #12
 800ce88:	602b      	str	r3, [r5, #0]
 800ce8a:	e7d6      	b.n	800ce3a <_free_r+0x22>
 800ce8c:	6820      	ldr	r0, [r4, #0]
 800ce8e:	1821      	adds	r1, r4, r0
 800ce90:	428b      	cmp	r3, r1
 800ce92:	bf04      	itt	eq
 800ce94:	6819      	ldreq	r1, [r3, #0]
 800ce96:	685b      	ldreq	r3, [r3, #4]
 800ce98:	6063      	str	r3, [r4, #4]
 800ce9a:	bf04      	itt	eq
 800ce9c:	1809      	addeq	r1, r1, r0
 800ce9e:	6021      	streq	r1, [r4, #0]
 800cea0:	6054      	str	r4, [r2, #4]
 800cea2:	e7ca      	b.n	800ce3a <_free_r+0x22>
 800cea4:	bd38      	pop	{r3, r4, r5, pc}
 800cea6:	bf00      	nop
 800cea8:	200057ac 	.word	0x200057ac

0800ceac <__ssputs_r>:
 800ceac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ceb0:	688e      	ldr	r6, [r1, #8]
 800ceb2:	461f      	mov	r7, r3
 800ceb4:	42be      	cmp	r6, r7
 800ceb6:	680b      	ldr	r3, [r1, #0]
 800ceb8:	4682      	mov	sl, r0
 800ceba:	460c      	mov	r4, r1
 800cebc:	4690      	mov	r8, r2
 800cebe:	d82d      	bhi.n	800cf1c <__ssputs_r+0x70>
 800cec0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cec4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cec8:	d026      	beq.n	800cf18 <__ssputs_r+0x6c>
 800ceca:	6965      	ldr	r5, [r4, #20]
 800cecc:	6909      	ldr	r1, [r1, #16]
 800cece:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ced2:	eba3 0901 	sub.w	r9, r3, r1
 800ced6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceda:	1c7b      	adds	r3, r7, #1
 800cedc:	444b      	add	r3, r9
 800cede:	106d      	asrs	r5, r5, #1
 800cee0:	429d      	cmp	r5, r3
 800cee2:	bf38      	it	cc
 800cee4:	461d      	movcc	r5, r3
 800cee6:	0553      	lsls	r3, r2, #21
 800cee8:	d527      	bpl.n	800cf3a <__ssputs_r+0x8e>
 800ceea:	4629      	mov	r1, r5
 800ceec:	f000 f958 	bl	800d1a0 <_malloc_r>
 800cef0:	4606      	mov	r6, r0
 800cef2:	b360      	cbz	r0, 800cf4e <__ssputs_r+0xa2>
 800cef4:	6921      	ldr	r1, [r4, #16]
 800cef6:	464a      	mov	r2, r9
 800cef8:	f7ff ff80 	bl	800cdfc <memcpy>
 800cefc:	89a3      	ldrh	r3, [r4, #12]
 800cefe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cf02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf06:	81a3      	strh	r3, [r4, #12]
 800cf08:	6126      	str	r6, [r4, #16]
 800cf0a:	6165      	str	r5, [r4, #20]
 800cf0c:	444e      	add	r6, r9
 800cf0e:	eba5 0509 	sub.w	r5, r5, r9
 800cf12:	6026      	str	r6, [r4, #0]
 800cf14:	60a5      	str	r5, [r4, #8]
 800cf16:	463e      	mov	r6, r7
 800cf18:	42be      	cmp	r6, r7
 800cf1a:	d900      	bls.n	800cf1e <__ssputs_r+0x72>
 800cf1c:	463e      	mov	r6, r7
 800cf1e:	6820      	ldr	r0, [r4, #0]
 800cf20:	4632      	mov	r2, r6
 800cf22:	4641      	mov	r1, r8
 800cf24:	f000 fb82 	bl	800d62c <memmove>
 800cf28:	68a3      	ldr	r3, [r4, #8]
 800cf2a:	1b9b      	subs	r3, r3, r6
 800cf2c:	60a3      	str	r3, [r4, #8]
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	4433      	add	r3, r6
 800cf32:	6023      	str	r3, [r4, #0]
 800cf34:	2000      	movs	r0, #0
 800cf36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf3a:	462a      	mov	r2, r5
 800cf3c:	f000 fb48 	bl	800d5d0 <_realloc_r>
 800cf40:	4606      	mov	r6, r0
 800cf42:	2800      	cmp	r0, #0
 800cf44:	d1e0      	bne.n	800cf08 <__ssputs_r+0x5c>
 800cf46:	6921      	ldr	r1, [r4, #16]
 800cf48:	4650      	mov	r0, sl
 800cf4a:	f7ff ff65 	bl	800ce18 <_free_r>
 800cf4e:	230c      	movs	r3, #12
 800cf50:	f8ca 3000 	str.w	r3, [sl]
 800cf54:	89a3      	ldrh	r3, [r4, #12]
 800cf56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cf5a:	81a3      	strh	r3, [r4, #12]
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf60:	e7e9      	b.n	800cf36 <__ssputs_r+0x8a>
	...

0800cf64 <_svfiprintf_r>:
 800cf64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf68:	4698      	mov	r8, r3
 800cf6a:	898b      	ldrh	r3, [r1, #12]
 800cf6c:	061b      	lsls	r3, r3, #24
 800cf6e:	b09d      	sub	sp, #116	@ 0x74
 800cf70:	4607      	mov	r7, r0
 800cf72:	460d      	mov	r5, r1
 800cf74:	4614      	mov	r4, r2
 800cf76:	d510      	bpl.n	800cf9a <_svfiprintf_r+0x36>
 800cf78:	690b      	ldr	r3, [r1, #16]
 800cf7a:	b973      	cbnz	r3, 800cf9a <_svfiprintf_r+0x36>
 800cf7c:	2140      	movs	r1, #64	@ 0x40
 800cf7e:	f000 f90f 	bl	800d1a0 <_malloc_r>
 800cf82:	6028      	str	r0, [r5, #0]
 800cf84:	6128      	str	r0, [r5, #16]
 800cf86:	b930      	cbnz	r0, 800cf96 <_svfiprintf_r+0x32>
 800cf88:	230c      	movs	r3, #12
 800cf8a:	603b      	str	r3, [r7, #0]
 800cf8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf90:	b01d      	add	sp, #116	@ 0x74
 800cf92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf96:	2340      	movs	r3, #64	@ 0x40
 800cf98:	616b      	str	r3, [r5, #20]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf9e:	2320      	movs	r3, #32
 800cfa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cfa4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cfa8:	2330      	movs	r3, #48	@ 0x30
 800cfaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d148 <_svfiprintf_r+0x1e4>
 800cfae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cfb2:	f04f 0901 	mov.w	r9, #1
 800cfb6:	4623      	mov	r3, r4
 800cfb8:	469a      	mov	sl, r3
 800cfba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfbe:	b10a      	cbz	r2, 800cfc4 <_svfiprintf_r+0x60>
 800cfc0:	2a25      	cmp	r2, #37	@ 0x25
 800cfc2:	d1f9      	bne.n	800cfb8 <_svfiprintf_r+0x54>
 800cfc4:	ebba 0b04 	subs.w	fp, sl, r4
 800cfc8:	d00b      	beq.n	800cfe2 <_svfiprintf_r+0x7e>
 800cfca:	465b      	mov	r3, fp
 800cfcc:	4622      	mov	r2, r4
 800cfce:	4629      	mov	r1, r5
 800cfd0:	4638      	mov	r0, r7
 800cfd2:	f7ff ff6b 	bl	800ceac <__ssputs_r>
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	f000 80a7 	beq.w	800d12a <_svfiprintf_r+0x1c6>
 800cfdc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cfde:	445a      	add	r2, fp
 800cfe0:	9209      	str	r2, [sp, #36]	@ 0x24
 800cfe2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	f000 809f 	beq.w	800d12a <_svfiprintf_r+0x1c6>
 800cfec:	2300      	movs	r3, #0
 800cfee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cff6:	f10a 0a01 	add.w	sl, sl, #1
 800cffa:	9304      	str	r3, [sp, #16]
 800cffc:	9307      	str	r3, [sp, #28]
 800cffe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d002:	931a      	str	r3, [sp, #104]	@ 0x68
 800d004:	4654      	mov	r4, sl
 800d006:	2205      	movs	r2, #5
 800d008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d00c:	484e      	ldr	r0, [pc, #312]	@ (800d148 <_svfiprintf_r+0x1e4>)
 800d00e:	f7f3 f8e7 	bl	80001e0 <memchr>
 800d012:	9a04      	ldr	r2, [sp, #16]
 800d014:	b9d8      	cbnz	r0, 800d04e <_svfiprintf_r+0xea>
 800d016:	06d0      	lsls	r0, r2, #27
 800d018:	bf44      	itt	mi
 800d01a:	2320      	movmi	r3, #32
 800d01c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d020:	0711      	lsls	r1, r2, #28
 800d022:	bf44      	itt	mi
 800d024:	232b      	movmi	r3, #43	@ 0x2b
 800d026:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d02a:	f89a 3000 	ldrb.w	r3, [sl]
 800d02e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d030:	d015      	beq.n	800d05e <_svfiprintf_r+0xfa>
 800d032:	9a07      	ldr	r2, [sp, #28]
 800d034:	4654      	mov	r4, sl
 800d036:	2000      	movs	r0, #0
 800d038:	f04f 0c0a 	mov.w	ip, #10
 800d03c:	4621      	mov	r1, r4
 800d03e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d042:	3b30      	subs	r3, #48	@ 0x30
 800d044:	2b09      	cmp	r3, #9
 800d046:	d94b      	bls.n	800d0e0 <_svfiprintf_r+0x17c>
 800d048:	b1b0      	cbz	r0, 800d078 <_svfiprintf_r+0x114>
 800d04a:	9207      	str	r2, [sp, #28]
 800d04c:	e014      	b.n	800d078 <_svfiprintf_r+0x114>
 800d04e:	eba0 0308 	sub.w	r3, r0, r8
 800d052:	fa09 f303 	lsl.w	r3, r9, r3
 800d056:	4313      	orrs	r3, r2
 800d058:	9304      	str	r3, [sp, #16]
 800d05a:	46a2      	mov	sl, r4
 800d05c:	e7d2      	b.n	800d004 <_svfiprintf_r+0xa0>
 800d05e:	9b03      	ldr	r3, [sp, #12]
 800d060:	1d19      	adds	r1, r3, #4
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	9103      	str	r1, [sp, #12]
 800d066:	2b00      	cmp	r3, #0
 800d068:	bfbb      	ittet	lt
 800d06a:	425b      	neglt	r3, r3
 800d06c:	f042 0202 	orrlt.w	r2, r2, #2
 800d070:	9307      	strge	r3, [sp, #28]
 800d072:	9307      	strlt	r3, [sp, #28]
 800d074:	bfb8      	it	lt
 800d076:	9204      	strlt	r2, [sp, #16]
 800d078:	7823      	ldrb	r3, [r4, #0]
 800d07a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d07c:	d10a      	bne.n	800d094 <_svfiprintf_r+0x130>
 800d07e:	7863      	ldrb	r3, [r4, #1]
 800d080:	2b2a      	cmp	r3, #42	@ 0x2a
 800d082:	d132      	bne.n	800d0ea <_svfiprintf_r+0x186>
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	1d1a      	adds	r2, r3, #4
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	9203      	str	r2, [sp, #12]
 800d08c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d090:	3402      	adds	r4, #2
 800d092:	9305      	str	r3, [sp, #20]
 800d094:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d158 <_svfiprintf_r+0x1f4>
 800d098:	7821      	ldrb	r1, [r4, #0]
 800d09a:	2203      	movs	r2, #3
 800d09c:	4650      	mov	r0, sl
 800d09e:	f7f3 f89f 	bl	80001e0 <memchr>
 800d0a2:	b138      	cbz	r0, 800d0b4 <_svfiprintf_r+0x150>
 800d0a4:	9b04      	ldr	r3, [sp, #16]
 800d0a6:	eba0 000a 	sub.w	r0, r0, sl
 800d0aa:	2240      	movs	r2, #64	@ 0x40
 800d0ac:	4082      	lsls	r2, r0
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	3401      	adds	r4, #1
 800d0b2:	9304      	str	r3, [sp, #16]
 800d0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b8:	4824      	ldr	r0, [pc, #144]	@ (800d14c <_svfiprintf_r+0x1e8>)
 800d0ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d0be:	2206      	movs	r2, #6
 800d0c0:	f7f3 f88e 	bl	80001e0 <memchr>
 800d0c4:	2800      	cmp	r0, #0
 800d0c6:	d036      	beq.n	800d136 <_svfiprintf_r+0x1d2>
 800d0c8:	4b21      	ldr	r3, [pc, #132]	@ (800d150 <_svfiprintf_r+0x1ec>)
 800d0ca:	bb1b      	cbnz	r3, 800d114 <_svfiprintf_r+0x1b0>
 800d0cc:	9b03      	ldr	r3, [sp, #12]
 800d0ce:	3307      	adds	r3, #7
 800d0d0:	f023 0307 	bic.w	r3, r3, #7
 800d0d4:	3308      	adds	r3, #8
 800d0d6:	9303      	str	r3, [sp, #12]
 800d0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d0da:	4433      	add	r3, r6
 800d0dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d0de:	e76a      	b.n	800cfb6 <_svfiprintf_r+0x52>
 800d0e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	2001      	movs	r0, #1
 800d0e8:	e7a8      	b.n	800d03c <_svfiprintf_r+0xd8>
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	3401      	adds	r4, #1
 800d0ee:	9305      	str	r3, [sp, #20]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	f04f 0c0a 	mov.w	ip, #10
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0fc:	3a30      	subs	r2, #48	@ 0x30
 800d0fe:	2a09      	cmp	r2, #9
 800d100:	d903      	bls.n	800d10a <_svfiprintf_r+0x1a6>
 800d102:	2b00      	cmp	r3, #0
 800d104:	d0c6      	beq.n	800d094 <_svfiprintf_r+0x130>
 800d106:	9105      	str	r1, [sp, #20]
 800d108:	e7c4      	b.n	800d094 <_svfiprintf_r+0x130>
 800d10a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d10e:	4604      	mov	r4, r0
 800d110:	2301      	movs	r3, #1
 800d112:	e7f0      	b.n	800d0f6 <_svfiprintf_r+0x192>
 800d114:	ab03      	add	r3, sp, #12
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	462a      	mov	r2, r5
 800d11a:	4b0e      	ldr	r3, [pc, #56]	@ (800d154 <_svfiprintf_r+0x1f0>)
 800d11c:	a904      	add	r1, sp, #16
 800d11e:	4638      	mov	r0, r7
 800d120:	f3af 8000 	nop.w
 800d124:	1c42      	adds	r2, r0, #1
 800d126:	4606      	mov	r6, r0
 800d128:	d1d6      	bne.n	800d0d8 <_svfiprintf_r+0x174>
 800d12a:	89ab      	ldrh	r3, [r5, #12]
 800d12c:	065b      	lsls	r3, r3, #25
 800d12e:	f53f af2d 	bmi.w	800cf8c <_svfiprintf_r+0x28>
 800d132:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d134:	e72c      	b.n	800cf90 <_svfiprintf_r+0x2c>
 800d136:	ab03      	add	r3, sp, #12
 800d138:	9300      	str	r3, [sp, #0]
 800d13a:	462a      	mov	r2, r5
 800d13c:	4b05      	ldr	r3, [pc, #20]	@ (800d154 <_svfiprintf_r+0x1f0>)
 800d13e:	a904      	add	r1, sp, #16
 800d140:	4638      	mov	r0, r7
 800d142:	f000 f91b 	bl	800d37c <_printf_i>
 800d146:	e7ed      	b.n	800d124 <_svfiprintf_r+0x1c0>
 800d148:	0800d7dc 	.word	0x0800d7dc
 800d14c:	0800d7e6 	.word	0x0800d7e6
 800d150:	00000000 	.word	0x00000000
 800d154:	0800cead 	.word	0x0800cead
 800d158:	0800d7e2 	.word	0x0800d7e2

0800d15c <sbrk_aligned>:
 800d15c:	b570      	push	{r4, r5, r6, lr}
 800d15e:	4e0f      	ldr	r6, [pc, #60]	@ (800d19c <sbrk_aligned+0x40>)
 800d160:	460c      	mov	r4, r1
 800d162:	6831      	ldr	r1, [r6, #0]
 800d164:	4605      	mov	r5, r0
 800d166:	b911      	cbnz	r1, 800d16e <sbrk_aligned+0x12>
 800d168:	f000 fa7a 	bl	800d660 <_sbrk_r>
 800d16c:	6030      	str	r0, [r6, #0]
 800d16e:	4621      	mov	r1, r4
 800d170:	4628      	mov	r0, r5
 800d172:	f000 fa75 	bl	800d660 <_sbrk_r>
 800d176:	1c43      	adds	r3, r0, #1
 800d178:	d103      	bne.n	800d182 <sbrk_aligned+0x26>
 800d17a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d17e:	4620      	mov	r0, r4
 800d180:	bd70      	pop	{r4, r5, r6, pc}
 800d182:	1cc4      	adds	r4, r0, #3
 800d184:	f024 0403 	bic.w	r4, r4, #3
 800d188:	42a0      	cmp	r0, r4
 800d18a:	d0f8      	beq.n	800d17e <sbrk_aligned+0x22>
 800d18c:	1a21      	subs	r1, r4, r0
 800d18e:	4628      	mov	r0, r5
 800d190:	f000 fa66 	bl	800d660 <_sbrk_r>
 800d194:	3001      	adds	r0, #1
 800d196:	d1f2      	bne.n	800d17e <sbrk_aligned+0x22>
 800d198:	e7ef      	b.n	800d17a <sbrk_aligned+0x1e>
 800d19a:	bf00      	nop
 800d19c:	200057a8 	.word	0x200057a8

0800d1a0 <_malloc_r>:
 800d1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1a4:	1ccd      	adds	r5, r1, #3
 800d1a6:	f025 0503 	bic.w	r5, r5, #3
 800d1aa:	3508      	adds	r5, #8
 800d1ac:	2d0c      	cmp	r5, #12
 800d1ae:	bf38      	it	cc
 800d1b0:	250c      	movcc	r5, #12
 800d1b2:	2d00      	cmp	r5, #0
 800d1b4:	4606      	mov	r6, r0
 800d1b6:	db01      	blt.n	800d1bc <_malloc_r+0x1c>
 800d1b8:	42a9      	cmp	r1, r5
 800d1ba:	d904      	bls.n	800d1c6 <_malloc_r+0x26>
 800d1bc:	230c      	movs	r3, #12
 800d1be:	6033      	str	r3, [r6, #0]
 800d1c0:	2000      	movs	r0, #0
 800d1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d29c <_malloc_r+0xfc>
 800d1ca:	f000 f9f5 	bl	800d5b8 <__malloc_lock>
 800d1ce:	f8d8 3000 	ldr.w	r3, [r8]
 800d1d2:	461c      	mov	r4, r3
 800d1d4:	bb44      	cbnz	r4, 800d228 <_malloc_r+0x88>
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	4630      	mov	r0, r6
 800d1da:	f7ff ffbf 	bl	800d15c <sbrk_aligned>
 800d1de:	1c43      	adds	r3, r0, #1
 800d1e0:	4604      	mov	r4, r0
 800d1e2:	d158      	bne.n	800d296 <_malloc_r+0xf6>
 800d1e4:	f8d8 4000 	ldr.w	r4, [r8]
 800d1e8:	4627      	mov	r7, r4
 800d1ea:	2f00      	cmp	r7, #0
 800d1ec:	d143      	bne.n	800d276 <_malloc_r+0xd6>
 800d1ee:	2c00      	cmp	r4, #0
 800d1f0:	d04b      	beq.n	800d28a <_malloc_r+0xea>
 800d1f2:	6823      	ldr	r3, [r4, #0]
 800d1f4:	4639      	mov	r1, r7
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	eb04 0903 	add.w	r9, r4, r3
 800d1fc:	f000 fa30 	bl	800d660 <_sbrk_r>
 800d200:	4581      	cmp	r9, r0
 800d202:	d142      	bne.n	800d28a <_malloc_r+0xea>
 800d204:	6821      	ldr	r1, [r4, #0]
 800d206:	1a6d      	subs	r5, r5, r1
 800d208:	4629      	mov	r1, r5
 800d20a:	4630      	mov	r0, r6
 800d20c:	f7ff ffa6 	bl	800d15c <sbrk_aligned>
 800d210:	3001      	adds	r0, #1
 800d212:	d03a      	beq.n	800d28a <_malloc_r+0xea>
 800d214:	6823      	ldr	r3, [r4, #0]
 800d216:	442b      	add	r3, r5
 800d218:	6023      	str	r3, [r4, #0]
 800d21a:	f8d8 3000 	ldr.w	r3, [r8]
 800d21e:	685a      	ldr	r2, [r3, #4]
 800d220:	bb62      	cbnz	r2, 800d27c <_malloc_r+0xdc>
 800d222:	f8c8 7000 	str.w	r7, [r8]
 800d226:	e00f      	b.n	800d248 <_malloc_r+0xa8>
 800d228:	6822      	ldr	r2, [r4, #0]
 800d22a:	1b52      	subs	r2, r2, r5
 800d22c:	d420      	bmi.n	800d270 <_malloc_r+0xd0>
 800d22e:	2a0b      	cmp	r2, #11
 800d230:	d917      	bls.n	800d262 <_malloc_r+0xc2>
 800d232:	1961      	adds	r1, r4, r5
 800d234:	42a3      	cmp	r3, r4
 800d236:	6025      	str	r5, [r4, #0]
 800d238:	bf18      	it	ne
 800d23a:	6059      	strne	r1, [r3, #4]
 800d23c:	6863      	ldr	r3, [r4, #4]
 800d23e:	bf08      	it	eq
 800d240:	f8c8 1000 	streq.w	r1, [r8]
 800d244:	5162      	str	r2, [r4, r5]
 800d246:	604b      	str	r3, [r1, #4]
 800d248:	4630      	mov	r0, r6
 800d24a:	f000 f9bb 	bl	800d5c4 <__malloc_unlock>
 800d24e:	f104 000b 	add.w	r0, r4, #11
 800d252:	1d23      	adds	r3, r4, #4
 800d254:	f020 0007 	bic.w	r0, r0, #7
 800d258:	1ac2      	subs	r2, r0, r3
 800d25a:	bf1c      	itt	ne
 800d25c:	1a1b      	subne	r3, r3, r0
 800d25e:	50a3      	strne	r3, [r4, r2]
 800d260:	e7af      	b.n	800d1c2 <_malloc_r+0x22>
 800d262:	6862      	ldr	r2, [r4, #4]
 800d264:	42a3      	cmp	r3, r4
 800d266:	bf0c      	ite	eq
 800d268:	f8c8 2000 	streq.w	r2, [r8]
 800d26c:	605a      	strne	r2, [r3, #4]
 800d26e:	e7eb      	b.n	800d248 <_malloc_r+0xa8>
 800d270:	4623      	mov	r3, r4
 800d272:	6864      	ldr	r4, [r4, #4]
 800d274:	e7ae      	b.n	800d1d4 <_malloc_r+0x34>
 800d276:	463c      	mov	r4, r7
 800d278:	687f      	ldr	r7, [r7, #4]
 800d27a:	e7b6      	b.n	800d1ea <_malloc_r+0x4a>
 800d27c:	461a      	mov	r2, r3
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	42a3      	cmp	r3, r4
 800d282:	d1fb      	bne.n	800d27c <_malloc_r+0xdc>
 800d284:	2300      	movs	r3, #0
 800d286:	6053      	str	r3, [r2, #4]
 800d288:	e7de      	b.n	800d248 <_malloc_r+0xa8>
 800d28a:	230c      	movs	r3, #12
 800d28c:	6033      	str	r3, [r6, #0]
 800d28e:	4630      	mov	r0, r6
 800d290:	f000 f998 	bl	800d5c4 <__malloc_unlock>
 800d294:	e794      	b.n	800d1c0 <_malloc_r+0x20>
 800d296:	6005      	str	r5, [r0, #0]
 800d298:	e7d6      	b.n	800d248 <_malloc_r+0xa8>
 800d29a:	bf00      	nop
 800d29c:	200057ac 	.word	0x200057ac

0800d2a0 <_printf_common>:
 800d2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a4:	4616      	mov	r6, r2
 800d2a6:	4698      	mov	r8, r3
 800d2a8:	688a      	ldr	r2, [r1, #8]
 800d2aa:	690b      	ldr	r3, [r1, #16]
 800d2ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	bfb8      	it	lt
 800d2b4:	4613      	movlt	r3, r2
 800d2b6:	6033      	str	r3, [r6, #0]
 800d2b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d2bc:	4607      	mov	r7, r0
 800d2be:	460c      	mov	r4, r1
 800d2c0:	b10a      	cbz	r2, 800d2c6 <_printf_common+0x26>
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	6033      	str	r3, [r6, #0]
 800d2c6:	6823      	ldr	r3, [r4, #0]
 800d2c8:	0699      	lsls	r1, r3, #26
 800d2ca:	bf42      	ittt	mi
 800d2cc:	6833      	ldrmi	r3, [r6, #0]
 800d2ce:	3302      	addmi	r3, #2
 800d2d0:	6033      	strmi	r3, [r6, #0]
 800d2d2:	6825      	ldr	r5, [r4, #0]
 800d2d4:	f015 0506 	ands.w	r5, r5, #6
 800d2d8:	d106      	bne.n	800d2e8 <_printf_common+0x48>
 800d2da:	f104 0a19 	add.w	sl, r4, #25
 800d2de:	68e3      	ldr	r3, [r4, #12]
 800d2e0:	6832      	ldr	r2, [r6, #0]
 800d2e2:	1a9b      	subs	r3, r3, r2
 800d2e4:	42ab      	cmp	r3, r5
 800d2e6:	dc26      	bgt.n	800d336 <_printf_common+0x96>
 800d2e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d2ec:	6822      	ldr	r2, [r4, #0]
 800d2ee:	3b00      	subs	r3, #0
 800d2f0:	bf18      	it	ne
 800d2f2:	2301      	movne	r3, #1
 800d2f4:	0692      	lsls	r2, r2, #26
 800d2f6:	d42b      	bmi.n	800d350 <_printf_common+0xb0>
 800d2f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d2fc:	4641      	mov	r1, r8
 800d2fe:	4638      	mov	r0, r7
 800d300:	47c8      	blx	r9
 800d302:	3001      	adds	r0, #1
 800d304:	d01e      	beq.n	800d344 <_printf_common+0xa4>
 800d306:	6823      	ldr	r3, [r4, #0]
 800d308:	6922      	ldr	r2, [r4, #16]
 800d30a:	f003 0306 	and.w	r3, r3, #6
 800d30e:	2b04      	cmp	r3, #4
 800d310:	bf02      	ittt	eq
 800d312:	68e5      	ldreq	r5, [r4, #12]
 800d314:	6833      	ldreq	r3, [r6, #0]
 800d316:	1aed      	subeq	r5, r5, r3
 800d318:	68a3      	ldr	r3, [r4, #8]
 800d31a:	bf0c      	ite	eq
 800d31c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d320:	2500      	movne	r5, #0
 800d322:	4293      	cmp	r3, r2
 800d324:	bfc4      	itt	gt
 800d326:	1a9b      	subgt	r3, r3, r2
 800d328:	18ed      	addgt	r5, r5, r3
 800d32a:	2600      	movs	r6, #0
 800d32c:	341a      	adds	r4, #26
 800d32e:	42b5      	cmp	r5, r6
 800d330:	d11a      	bne.n	800d368 <_printf_common+0xc8>
 800d332:	2000      	movs	r0, #0
 800d334:	e008      	b.n	800d348 <_printf_common+0xa8>
 800d336:	2301      	movs	r3, #1
 800d338:	4652      	mov	r2, sl
 800d33a:	4641      	mov	r1, r8
 800d33c:	4638      	mov	r0, r7
 800d33e:	47c8      	blx	r9
 800d340:	3001      	adds	r0, #1
 800d342:	d103      	bne.n	800d34c <_printf_common+0xac>
 800d344:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d34c:	3501      	adds	r5, #1
 800d34e:	e7c6      	b.n	800d2de <_printf_common+0x3e>
 800d350:	18e1      	adds	r1, r4, r3
 800d352:	1c5a      	adds	r2, r3, #1
 800d354:	2030      	movs	r0, #48	@ 0x30
 800d356:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d35a:	4422      	add	r2, r4
 800d35c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d360:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d364:	3302      	adds	r3, #2
 800d366:	e7c7      	b.n	800d2f8 <_printf_common+0x58>
 800d368:	2301      	movs	r3, #1
 800d36a:	4622      	mov	r2, r4
 800d36c:	4641      	mov	r1, r8
 800d36e:	4638      	mov	r0, r7
 800d370:	47c8      	blx	r9
 800d372:	3001      	adds	r0, #1
 800d374:	d0e6      	beq.n	800d344 <_printf_common+0xa4>
 800d376:	3601      	adds	r6, #1
 800d378:	e7d9      	b.n	800d32e <_printf_common+0x8e>
	...

0800d37c <_printf_i>:
 800d37c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d380:	7e0f      	ldrb	r7, [r1, #24]
 800d382:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d384:	2f78      	cmp	r7, #120	@ 0x78
 800d386:	4691      	mov	r9, r2
 800d388:	4680      	mov	r8, r0
 800d38a:	460c      	mov	r4, r1
 800d38c:	469a      	mov	sl, r3
 800d38e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d392:	d807      	bhi.n	800d3a4 <_printf_i+0x28>
 800d394:	2f62      	cmp	r7, #98	@ 0x62
 800d396:	d80a      	bhi.n	800d3ae <_printf_i+0x32>
 800d398:	2f00      	cmp	r7, #0
 800d39a:	f000 80d1 	beq.w	800d540 <_printf_i+0x1c4>
 800d39e:	2f58      	cmp	r7, #88	@ 0x58
 800d3a0:	f000 80b8 	beq.w	800d514 <_printf_i+0x198>
 800d3a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3ac:	e03a      	b.n	800d424 <_printf_i+0xa8>
 800d3ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3b2:	2b15      	cmp	r3, #21
 800d3b4:	d8f6      	bhi.n	800d3a4 <_printf_i+0x28>
 800d3b6:	a101      	add	r1, pc, #4	@ (adr r1, 800d3bc <_printf_i+0x40>)
 800d3b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d3bc:	0800d415 	.word	0x0800d415
 800d3c0:	0800d429 	.word	0x0800d429
 800d3c4:	0800d3a5 	.word	0x0800d3a5
 800d3c8:	0800d3a5 	.word	0x0800d3a5
 800d3cc:	0800d3a5 	.word	0x0800d3a5
 800d3d0:	0800d3a5 	.word	0x0800d3a5
 800d3d4:	0800d429 	.word	0x0800d429
 800d3d8:	0800d3a5 	.word	0x0800d3a5
 800d3dc:	0800d3a5 	.word	0x0800d3a5
 800d3e0:	0800d3a5 	.word	0x0800d3a5
 800d3e4:	0800d3a5 	.word	0x0800d3a5
 800d3e8:	0800d527 	.word	0x0800d527
 800d3ec:	0800d453 	.word	0x0800d453
 800d3f0:	0800d4e1 	.word	0x0800d4e1
 800d3f4:	0800d3a5 	.word	0x0800d3a5
 800d3f8:	0800d3a5 	.word	0x0800d3a5
 800d3fc:	0800d549 	.word	0x0800d549
 800d400:	0800d3a5 	.word	0x0800d3a5
 800d404:	0800d453 	.word	0x0800d453
 800d408:	0800d3a5 	.word	0x0800d3a5
 800d40c:	0800d3a5 	.word	0x0800d3a5
 800d410:	0800d4e9 	.word	0x0800d4e9
 800d414:	6833      	ldr	r3, [r6, #0]
 800d416:	1d1a      	adds	r2, r3, #4
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	6032      	str	r2, [r6, #0]
 800d41c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d420:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d424:	2301      	movs	r3, #1
 800d426:	e09c      	b.n	800d562 <_printf_i+0x1e6>
 800d428:	6833      	ldr	r3, [r6, #0]
 800d42a:	6820      	ldr	r0, [r4, #0]
 800d42c:	1d19      	adds	r1, r3, #4
 800d42e:	6031      	str	r1, [r6, #0]
 800d430:	0606      	lsls	r6, r0, #24
 800d432:	d501      	bpl.n	800d438 <_printf_i+0xbc>
 800d434:	681d      	ldr	r5, [r3, #0]
 800d436:	e003      	b.n	800d440 <_printf_i+0xc4>
 800d438:	0645      	lsls	r5, r0, #25
 800d43a:	d5fb      	bpl.n	800d434 <_printf_i+0xb8>
 800d43c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d440:	2d00      	cmp	r5, #0
 800d442:	da03      	bge.n	800d44c <_printf_i+0xd0>
 800d444:	232d      	movs	r3, #45	@ 0x2d
 800d446:	426d      	negs	r5, r5
 800d448:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d44c:	4858      	ldr	r0, [pc, #352]	@ (800d5b0 <_printf_i+0x234>)
 800d44e:	230a      	movs	r3, #10
 800d450:	e011      	b.n	800d476 <_printf_i+0xfa>
 800d452:	6821      	ldr	r1, [r4, #0]
 800d454:	6833      	ldr	r3, [r6, #0]
 800d456:	0608      	lsls	r0, r1, #24
 800d458:	f853 5b04 	ldr.w	r5, [r3], #4
 800d45c:	d402      	bmi.n	800d464 <_printf_i+0xe8>
 800d45e:	0649      	lsls	r1, r1, #25
 800d460:	bf48      	it	mi
 800d462:	b2ad      	uxthmi	r5, r5
 800d464:	2f6f      	cmp	r7, #111	@ 0x6f
 800d466:	4852      	ldr	r0, [pc, #328]	@ (800d5b0 <_printf_i+0x234>)
 800d468:	6033      	str	r3, [r6, #0]
 800d46a:	bf14      	ite	ne
 800d46c:	230a      	movne	r3, #10
 800d46e:	2308      	moveq	r3, #8
 800d470:	2100      	movs	r1, #0
 800d472:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d476:	6866      	ldr	r6, [r4, #4]
 800d478:	60a6      	str	r6, [r4, #8]
 800d47a:	2e00      	cmp	r6, #0
 800d47c:	db05      	blt.n	800d48a <_printf_i+0x10e>
 800d47e:	6821      	ldr	r1, [r4, #0]
 800d480:	432e      	orrs	r6, r5
 800d482:	f021 0104 	bic.w	r1, r1, #4
 800d486:	6021      	str	r1, [r4, #0]
 800d488:	d04b      	beq.n	800d522 <_printf_i+0x1a6>
 800d48a:	4616      	mov	r6, r2
 800d48c:	fbb5 f1f3 	udiv	r1, r5, r3
 800d490:	fb03 5711 	mls	r7, r3, r1, r5
 800d494:	5dc7      	ldrb	r7, [r0, r7]
 800d496:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d49a:	462f      	mov	r7, r5
 800d49c:	42bb      	cmp	r3, r7
 800d49e:	460d      	mov	r5, r1
 800d4a0:	d9f4      	bls.n	800d48c <_printf_i+0x110>
 800d4a2:	2b08      	cmp	r3, #8
 800d4a4:	d10b      	bne.n	800d4be <_printf_i+0x142>
 800d4a6:	6823      	ldr	r3, [r4, #0]
 800d4a8:	07df      	lsls	r7, r3, #31
 800d4aa:	d508      	bpl.n	800d4be <_printf_i+0x142>
 800d4ac:	6923      	ldr	r3, [r4, #16]
 800d4ae:	6861      	ldr	r1, [r4, #4]
 800d4b0:	4299      	cmp	r1, r3
 800d4b2:	bfde      	ittt	le
 800d4b4:	2330      	movle	r3, #48	@ 0x30
 800d4b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d4ba:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d4be:	1b92      	subs	r2, r2, r6
 800d4c0:	6122      	str	r2, [r4, #16]
 800d4c2:	f8cd a000 	str.w	sl, [sp]
 800d4c6:	464b      	mov	r3, r9
 800d4c8:	aa03      	add	r2, sp, #12
 800d4ca:	4621      	mov	r1, r4
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	f7ff fee7 	bl	800d2a0 <_printf_common>
 800d4d2:	3001      	adds	r0, #1
 800d4d4:	d14a      	bne.n	800d56c <_printf_i+0x1f0>
 800d4d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d4da:	b004      	add	sp, #16
 800d4dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e0:	6823      	ldr	r3, [r4, #0]
 800d4e2:	f043 0320 	orr.w	r3, r3, #32
 800d4e6:	6023      	str	r3, [r4, #0]
 800d4e8:	4832      	ldr	r0, [pc, #200]	@ (800d5b4 <_printf_i+0x238>)
 800d4ea:	2778      	movs	r7, #120	@ 0x78
 800d4ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d4f0:	6823      	ldr	r3, [r4, #0]
 800d4f2:	6831      	ldr	r1, [r6, #0]
 800d4f4:	061f      	lsls	r7, r3, #24
 800d4f6:	f851 5b04 	ldr.w	r5, [r1], #4
 800d4fa:	d402      	bmi.n	800d502 <_printf_i+0x186>
 800d4fc:	065f      	lsls	r7, r3, #25
 800d4fe:	bf48      	it	mi
 800d500:	b2ad      	uxthmi	r5, r5
 800d502:	6031      	str	r1, [r6, #0]
 800d504:	07d9      	lsls	r1, r3, #31
 800d506:	bf44      	itt	mi
 800d508:	f043 0320 	orrmi.w	r3, r3, #32
 800d50c:	6023      	strmi	r3, [r4, #0]
 800d50e:	b11d      	cbz	r5, 800d518 <_printf_i+0x19c>
 800d510:	2310      	movs	r3, #16
 800d512:	e7ad      	b.n	800d470 <_printf_i+0xf4>
 800d514:	4826      	ldr	r0, [pc, #152]	@ (800d5b0 <_printf_i+0x234>)
 800d516:	e7e9      	b.n	800d4ec <_printf_i+0x170>
 800d518:	6823      	ldr	r3, [r4, #0]
 800d51a:	f023 0320 	bic.w	r3, r3, #32
 800d51e:	6023      	str	r3, [r4, #0]
 800d520:	e7f6      	b.n	800d510 <_printf_i+0x194>
 800d522:	4616      	mov	r6, r2
 800d524:	e7bd      	b.n	800d4a2 <_printf_i+0x126>
 800d526:	6833      	ldr	r3, [r6, #0]
 800d528:	6825      	ldr	r5, [r4, #0]
 800d52a:	6961      	ldr	r1, [r4, #20]
 800d52c:	1d18      	adds	r0, r3, #4
 800d52e:	6030      	str	r0, [r6, #0]
 800d530:	062e      	lsls	r6, r5, #24
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	d501      	bpl.n	800d53a <_printf_i+0x1be>
 800d536:	6019      	str	r1, [r3, #0]
 800d538:	e002      	b.n	800d540 <_printf_i+0x1c4>
 800d53a:	0668      	lsls	r0, r5, #25
 800d53c:	d5fb      	bpl.n	800d536 <_printf_i+0x1ba>
 800d53e:	8019      	strh	r1, [r3, #0]
 800d540:	2300      	movs	r3, #0
 800d542:	6123      	str	r3, [r4, #16]
 800d544:	4616      	mov	r6, r2
 800d546:	e7bc      	b.n	800d4c2 <_printf_i+0x146>
 800d548:	6833      	ldr	r3, [r6, #0]
 800d54a:	1d1a      	adds	r2, r3, #4
 800d54c:	6032      	str	r2, [r6, #0]
 800d54e:	681e      	ldr	r6, [r3, #0]
 800d550:	6862      	ldr	r2, [r4, #4]
 800d552:	2100      	movs	r1, #0
 800d554:	4630      	mov	r0, r6
 800d556:	f7f2 fe43 	bl	80001e0 <memchr>
 800d55a:	b108      	cbz	r0, 800d560 <_printf_i+0x1e4>
 800d55c:	1b80      	subs	r0, r0, r6
 800d55e:	6060      	str	r0, [r4, #4]
 800d560:	6863      	ldr	r3, [r4, #4]
 800d562:	6123      	str	r3, [r4, #16]
 800d564:	2300      	movs	r3, #0
 800d566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d56a:	e7aa      	b.n	800d4c2 <_printf_i+0x146>
 800d56c:	6923      	ldr	r3, [r4, #16]
 800d56e:	4632      	mov	r2, r6
 800d570:	4649      	mov	r1, r9
 800d572:	4640      	mov	r0, r8
 800d574:	47d0      	blx	sl
 800d576:	3001      	adds	r0, #1
 800d578:	d0ad      	beq.n	800d4d6 <_printf_i+0x15a>
 800d57a:	6823      	ldr	r3, [r4, #0]
 800d57c:	079b      	lsls	r3, r3, #30
 800d57e:	d413      	bmi.n	800d5a8 <_printf_i+0x22c>
 800d580:	68e0      	ldr	r0, [r4, #12]
 800d582:	9b03      	ldr	r3, [sp, #12]
 800d584:	4298      	cmp	r0, r3
 800d586:	bfb8      	it	lt
 800d588:	4618      	movlt	r0, r3
 800d58a:	e7a6      	b.n	800d4da <_printf_i+0x15e>
 800d58c:	2301      	movs	r3, #1
 800d58e:	4632      	mov	r2, r6
 800d590:	4649      	mov	r1, r9
 800d592:	4640      	mov	r0, r8
 800d594:	47d0      	blx	sl
 800d596:	3001      	adds	r0, #1
 800d598:	d09d      	beq.n	800d4d6 <_printf_i+0x15a>
 800d59a:	3501      	adds	r5, #1
 800d59c:	68e3      	ldr	r3, [r4, #12]
 800d59e:	9903      	ldr	r1, [sp, #12]
 800d5a0:	1a5b      	subs	r3, r3, r1
 800d5a2:	42ab      	cmp	r3, r5
 800d5a4:	dcf2      	bgt.n	800d58c <_printf_i+0x210>
 800d5a6:	e7eb      	b.n	800d580 <_printf_i+0x204>
 800d5a8:	2500      	movs	r5, #0
 800d5aa:	f104 0619 	add.w	r6, r4, #25
 800d5ae:	e7f5      	b.n	800d59c <_printf_i+0x220>
 800d5b0:	0800d7ed 	.word	0x0800d7ed
 800d5b4:	0800d7fe 	.word	0x0800d7fe

0800d5b8 <__malloc_lock>:
 800d5b8:	4801      	ldr	r0, [pc, #4]	@ (800d5c0 <__malloc_lock+0x8>)
 800d5ba:	f7ff bbbf 	b.w	800cd3c <__retarget_lock_acquire_recursive>
 800d5be:	bf00      	nop
 800d5c0:	200057a0 	.word	0x200057a0

0800d5c4 <__malloc_unlock>:
 800d5c4:	4801      	ldr	r0, [pc, #4]	@ (800d5cc <__malloc_unlock+0x8>)
 800d5c6:	f7ff bbba 	b.w	800cd3e <__retarget_lock_release_recursive>
 800d5ca:	bf00      	nop
 800d5cc:	200057a0 	.word	0x200057a0

0800d5d0 <_realloc_r>:
 800d5d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5d4:	4607      	mov	r7, r0
 800d5d6:	4614      	mov	r4, r2
 800d5d8:	460d      	mov	r5, r1
 800d5da:	b921      	cbnz	r1, 800d5e6 <_realloc_r+0x16>
 800d5dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	f7ff bddd 	b.w	800d1a0 <_malloc_r>
 800d5e6:	b92a      	cbnz	r2, 800d5f4 <_realloc_r+0x24>
 800d5e8:	f7ff fc16 	bl	800ce18 <_free_r>
 800d5ec:	4625      	mov	r5, r4
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5f4:	f000 f844 	bl	800d680 <_malloc_usable_size_r>
 800d5f8:	4284      	cmp	r4, r0
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	d802      	bhi.n	800d604 <_realloc_r+0x34>
 800d5fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d602:	d8f4      	bhi.n	800d5ee <_realloc_r+0x1e>
 800d604:	4621      	mov	r1, r4
 800d606:	4638      	mov	r0, r7
 800d608:	f7ff fdca 	bl	800d1a0 <_malloc_r>
 800d60c:	4680      	mov	r8, r0
 800d60e:	b908      	cbnz	r0, 800d614 <_realloc_r+0x44>
 800d610:	4645      	mov	r5, r8
 800d612:	e7ec      	b.n	800d5ee <_realloc_r+0x1e>
 800d614:	42b4      	cmp	r4, r6
 800d616:	4622      	mov	r2, r4
 800d618:	4629      	mov	r1, r5
 800d61a:	bf28      	it	cs
 800d61c:	4632      	movcs	r2, r6
 800d61e:	f7ff fbed 	bl	800cdfc <memcpy>
 800d622:	4629      	mov	r1, r5
 800d624:	4638      	mov	r0, r7
 800d626:	f7ff fbf7 	bl	800ce18 <_free_r>
 800d62a:	e7f1      	b.n	800d610 <_realloc_r+0x40>

0800d62c <memmove>:
 800d62c:	4288      	cmp	r0, r1
 800d62e:	b510      	push	{r4, lr}
 800d630:	eb01 0402 	add.w	r4, r1, r2
 800d634:	d902      	bls.n	800d63c <memmove+0x10>
 800d636:	4284      	cmp	r4, r0
 800d638:	4623      	mov	r3, r4
 800d63a:	d807      	bhi.n	800d64c <memmove+0x20>
 800d63c:	1e43      	subs	r3, r0, #1
 800d63e:	42a1      	cmp	r1, r4
 800d640:	d008      	beq.n	800d654 <memmove+0x28>
 800d642:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d646:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d64a:	e7f8      	b.n	800d63e <memmove+0x12>
 800d64c:	4402      	add	r2, r0
 800d64e:	4601      	mov	r1, r0
 800d650:	428a      	cmp	r2, r1
 800d652:	d100      	bne.n	800d656 <memmove+0x2a>
 800d654:	bd10      	pop	{r4, pc}
 800d656:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d65a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d65e:	e7f7      	b.n	800d650 <memmove+0x24>

0800d660 <_sbrk_r>:
 800d660:	b538      	push	{r3, r4, r5, lr}
 800d662:	4d06      	ldr	r5, [pc, #24]	@ (800d67c <_sbrk_r+0x1c>)
 800d664:	2300      	movs	r3, #0
 800d666:	4604      	mov	r4, r0
 800d668:	4608      	mov	r0, r1
 800d66a:	602b      	str	r3, [r5, #0]
 800d66c:	f7f6 fe06 	bl	800427c <_sbrk>
 800d670:	1c43      	adds	r3, r0, #1
 800d672:	d102      	bne.n	800d67a <_sbrk_r+0x1a>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	b103      	cbz	r3, 800d67a <_sbrk_r+0x1a>
 800d678:	6023      	str	r3, [r4, #0]
 800d67a:	bd38      	pop	{r3, r4, r5, pc}
 800d67c:	200057a4 	.word	0x200057a4

0800d680 <_malloc_usable_size_r>:
 800d680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d684:	1f18      	subs	r0, r3, #4
 800d686:	2b00      	cmp	r3, #0
 800d688:	bfbc      	itt	lt
 800d68a:	580b      	ldrlt	r3, [r1, r0]
 800d68c:	18c0      	addlt	r0, r0, r3
 800d68e:	4770      	bx	lr

0800d690 <_init>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr

0800d69c <_fini>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	bf00      	nop
 800d6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a2:	bc08      	pop	{r3}
 800d6a4:	469e      	mov	lr, r3
 800d6a6:	4770      	bx	lr
